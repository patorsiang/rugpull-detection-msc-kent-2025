{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH2 PUSH1 SSTORE PUSH2 PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH3 NOT AND DUP4 OR SWAP1 SSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH6 PUSH1 SHL DUP2 MSTORE POP PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH6 PUSH1 SHL DUP2 MSTORE POP DUP2 PUSH1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH3 SWAP3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 SWAP1 PUSH1 SWAP1 PUSH1 DUP5 ADD SWAP1 PUSH3 JUMP JUMPDEST POP POP POP PUSH1 PUSH3 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 MLOAD SWAP2 SWAP3 POP SWAP1 PUSH1 SWAP1 PUSH32 SWAP1 DUP3 SWAP1 LOG3 POP PUSH20 PUSH3 DUP2 PUSH1 PUSH3 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 ADDRESS DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT PUSH1 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 DUP3 ADD MSTORE SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 DUP2 SWAP1 MSTORE PUSH3 SWAP1 PUSH1 PUSH3 JUMP JUMPDEST PUSH1 MLOAD PUSH3 SWAP1 PUSH1 PUSH3 JUMP JUMPDEST PUSH12 PUSH1 SSTORE PUSH1 PUSH1 DUP2 DUP1 DUP3 DUP2 PUSH13 PUSH2 PUSH3 DUP3 PUSH1 PUSH3 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH2 PUSH3 DUP3 PUSH1 PUSH3 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP8 SWAP1 SSTORE PUSH1 DUP7 SWAP1 SSTORE PUSH1 DUP6 SWAP1 SSTORE DUP5 PUSH3 DUP8 DUP10 PUSH3 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP5 SWAP1 SSTORE PUSH1 DUP4 SWAP1 SSTORE PUSH1 DUP3 SWAP1 SSTORE DUP2 PUSH3 DUP5 DUP7 PUSH3 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT SWAP1 DUP2 AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP4 AND SWAP3 DUP4 OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP2 AND DUP3 OR SWAP1 SSTORE PUSH3 SWAP1 PUSH1 PUSH3 JUMP JUMPDEST PUSH3 ADDRESS PUSH1 PUSH3 JUMP JUMPDEST PUSH3 PUSH2 PUSH1 PUSH3 JUMP JUMPDEST PUSH3 PUSH3 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 PUSH3 JUMP JUMPDEST PUSH3 ADDRESS PUSH1 PUSH3 JUMP JUMPDEST PUSH3 PUSH2 PUSH1 PUSH3 JUMP JUMPDEST PUSH3 CALLER DUP3 PUSH3 JUMP JUMPDEST POP POP POP POP POP POP POP POP PUSH3 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH3 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 SWAP3 SWAP2 PUSH32 SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH3 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH3 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH3 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH3 JUMP JUMPDEST PUSH3 DUP2 PUSH1 SLOAD PUSH3 PUSH1 SHL PUSH3 OR SWAP1 SWAP2 SWAP1 PUSH1 SHR JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 SWAP1 SWAP2 SHA3 SLOAD PUSH3 SWAP2 DUP4 SWAP1 PUSH3 PUSH3 DUP3 SHL OR SWAP1 SHR JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP3 MLOAD DUP5 DUP2 MSTORE SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH3 DUP4 DUP6 PUSH3 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH3 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 SWAP1 PUSH3 JUMP JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 JUMPI PUSH1 DUP6 SSTORE PUSH3 JUMP JUMPDEST DUP3 PUSH1 LT PUSH3 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH3 JUMP JUMPDEST POP PUSH3 SWAP3 SWAP2 POP PUSH3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH3 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 DUP3 NOT DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 EQ ISZERO PUSH3 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 MLOAD PUSH1 MLOAD PUSH2 PUSH3 PUSH1 CODECOPY PUSH1 DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE PUSH2 ADD MSTORE PUSH1 DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE PUSH2 ADD MSTORE PUSH2 PUSH1 RETURN UNKNOWN_0xfe PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 JUMPI STOP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH32 DUP2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH32 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH3 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH2 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND SWAP2 DUP4 AND SWAP1 PUSH32 SWAP1 PUSH1 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH8 PUSH2 PUSH2 PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH2 SWAP1 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH15 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH8 PUSH2 JUMP JUMPDEST PUSH1 SSTORE POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH2 DUP5 CALLER PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 PUSH1 SHL SUB DUP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD SWAP1 SWAP2 PUSH2 SWAP2 DUP6 SWAP1 PUSH2 SWAP1 DUP7 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 SWAP2 PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 PUSH32 SWAP1 DUP4 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP4 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH19 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP3 GT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH16 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH1 SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP4 SWAP1 SSTORE PUSH1 DUP3 SWAP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE DUP1 PUSH2 DUP4 DUP6 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 DUP2 SSTORE LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH3 NOT AND PUSH3 OR SWAP1 SSTORE TIMESTAMP PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH3 MUL PUSH3 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH32 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP3 PUSH1 PUSH1 PUSH1 SHL SUB AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP14 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND SWAP2 DUP4 AND SWAP1 PUSH32 SWAP1 PUSH1 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP4 SWAP1 SSTORE PUSH1 DUP3 SWAP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE DUP1 PUSH2 DUP4 DUP6 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH1 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH8 PUSH2 PUSH2 PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH2 SWAP1 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH8 PUSH2 JUMP JUMPDEST PUSH1 SSTORE POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH3 PUSH2 PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH2 SWAP1 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH21 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH2 SWAP1 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH20 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP PUSH1 DUP2 SWAP1 SSTORE PUSH1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH1 SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 SWAP1 PUSH1 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST TIMESTAMP GT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH10 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST TIMESTAMP PUSH1 SSTORE PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB PUSH32 AND PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 ADDRESS SWAP1 PUSH4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH2 PUSH2 DUP5 DUP8 PUSH2 JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 JUMPI PUSH2 PUSH32 PUSH2 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH32 SWAP1 POP DUP1 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 MLOAD PUSH32 SWAP3 POP PUSH1 SWAP2 POP LOG1 POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP4 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 SWAP2 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH2 JUMPI PUSH2 DUP4 DUP4 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH22 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH32 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP3 PUSH1 PUSH1 PUSH1 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH32 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP3 PUSH1 PUSH1 PUSH1 SHL SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI ORIGIN PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD NUMBER GT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH9 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST ORIGIN PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 NUMBER SWAP1 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH21 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH19 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH22 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH19 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 SLOAD DUP2 LT DUP1 ISZERO SWAP1 DUP2 SWAP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH3 SWAP1 DIV PUSH1 AND JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 PUSH1 SHL NOT AND PUSH1 PUSH1 SHL OR SWAP1 SSTORE PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 SHL NOT AND SWAP1 SSTORE JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 AND JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST TIMESTAMP LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 PUSH1 PUSH1 SHL SWAP1 SWAP3 DIV DUP3 AND ISZERO SWAP2 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 JUMPDEST PUSH1 DUP2 ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 PUSH1 SLOAD DUP9 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 SLOAD PUSH1 SLOAD DUP3 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 PUSH1 SLOAD DUP9 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 SLOAD PUSH1 SLOAD DUP3 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST DUP1 ISZERO PUSH2 JUMPI PUSH2 DUP8 ADDRESS DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP7 PUSH2 JUMP JUMPDEST SWAP5 POP JUMPDEST PUSH2 DUP8 DUP8 DUP8 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP5 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 DUP5 DUP7 PUSH2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 SWAP3 SWAP2 PUSH32 SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 DUP6 DUP4 PUSH2 JUMP JUMPDEST EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE MLOAD DUP5 DUP2 MSTORE SWAP1 SWAP3 SWAP2 DUP7 AND SWAP2 PUSH32 SWAP2 ADD PUSH2 JUMP JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 POP PUSH1 PUSH1 SLOAD PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP3 ISZERO DUP1 PUSH2 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO PUSH2 JUMPI POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH2 JUMP JUMPDEST DUP4 GT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 PUSH1 DUP4 PUSH1 SLOAD DUP7 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP6 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP SELFBALANCE PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 SELFBALANCE DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP8 PUSH2 PUSH1 SLOAD DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP9 PUSH2 PUSH1 SLOAD DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 PUSH2 DUP5 DUP7 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE PUSH1 SLOAD PUSH1 MLOAD SWAP3 SWAP4 POP PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 MLOAD SWAP2 POP PUSH1 NOT PUSH1 RETURNDATASIZE ADD AND DUP3 ADD PUSH1 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 PUSH1 DUP5 ADD RETURNDATACOPY PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP SWAP1 SWAP9 POP POP DUP7 ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 DUP2 GT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP8 DUP3 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD DUP9 DUP2 MSTORE PUSH1 DUP2 ADD DUP5 SWAP1 MSTORE DUP1 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE MLOAD PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG1 JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 MLOAD SWAP2 POP PUSH1 NOT PUSH1 RETURNDATASIZE ADD AND DUP3 ADD PUSH1 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 PUSH1 DUP5 ADD RETURNDATACOPY PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST TIMESTAMP PUSH1 SSTORE PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB PUSH32 AND PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 SWAP1 ADDRESS SWAP1 PUSH4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH2 PUSH2 PUSH1 SLOAD DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 JUMPI PUSH2 PUSH32 PUSH2 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH32 SWAP1 POP DUP1 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 MLOAD PUSH32 SWAP3 POP PUSH1 SWAP2 POP LOG1 PUSH1 SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 DUP2 DUP4 PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 DUP5 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE PUSH1 DUP3 ADD DUP4 MSTORE PUSH1 SWAP3 PUSH1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP ADDRESS DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MUL PUSH1 ADD ADD SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 DUP2 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 MSTORE POP POP PUSH32 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MUL PUSH1 ADD ADD SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 DUP2 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 MSTORE POP POP PUSH2 ADDRESS PUSH32 DUP5 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB PUSH32 AND SWAP1 PUSH4 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH1 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH2 ADDRESS PUSH32 DUP5 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 DUP3 ADD MSTORE TIMESTAMP PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 PUSH4 SWAP1 DUP4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 ADD PUSH1 NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 DUP5 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD SWAP3 POP PUSH1 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH2 PUSH1 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 DUP5 ADD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP DUP2 CALLDATALOAD SWAP4 PUSH1 DUP4 ADD CALLDATALOAD SWAP4 POP PUSH1 SWAP1 SWAP3 ADD CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 EQ ISZERO PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 DUP3 NOT DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 PUSH1 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP5 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP PUSH1 PUSH1 PUSH1 SHL SUB SWAP7 SWAP1 SWAP7 AND PUSH1 DUP6 ADD MSTORE POP POP POP PUSH1 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 DUP5 ADD MLOAD SWAP2 POP PUSH1 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP UNKNOWN_0xfe GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE SHA3 PUSH21 PUSH20 PUSH7 PUSH15 PUSH2 PUSH6 SHA3 PUSH5 PUSH20 PUSH6 PUSH7 PUSH7 DUP7 SLT UNKNOWN_0x23 UNKNOWN_0xae UNKNOWN_0x2a LOG2 UNKNOWN_0xe5 UNKNOWN_0xe LOG1 UNKNOWN_0xe0 SHA3 PC UNKNOWN_0xa8 UNKNOWN_0x25 UNKNOWN_0xb7 MSTORE PUSH26 PUSH2 PUSH6 INVALID_0x6f",
  "opcode_entropy": 4.727807020592898,
  "opcode_count": 8989,
  "unique_opcodes": 100,
  "byte_entropy": 6.188971430953763,
  "byte_0x": 6.469979296066253e-05,
  "byte_60": 0.10837215320910973,
  "byte_c0": 0.0007763975155279503,
  "byte_40": 0.012357660455486542,
  "byte_52": 0.024844720496894408,
  "byte_19": 0.004723084886128364,
  "byte_0b": 0.0015527950310559005,
  "byte_55": 0.004852484472049689,
  "byte_0c": 0.004140786749482402,
  "byte_80": 0.029632505175983436,
  "byte_54": 0.01177536231884058,
  "byte_01": 0.03881987577639751,
  "byte_ff": 0.00614648033126294,
  "byte_91": 0.01229296066252588,
  "byte_82": 0.017080745341614908,
  "byte_16": 0.015010351966873706,
  "byte_81": 0.02309782608695652,
  "byte_17": 0.0027820910973084885,
  "byte_90": 0.030473602484472048,
  "byte_92": 0.004658385093167702,
  "byte_61": 0.055447722567287784,
  "byte_0e": 0.0010351966873706005,
  "byte_10": 0.0030408902691511385,
  "byte_0d": 0.001488095238095238,
  "byte_07": 0.0032349896480331265,
  "byte_08": 0.007699275362318841,
  "byte_0f": 0.0007116977225672878,
  "byte_11": 0.003817287784679089,
  "byte_62": 0.011710662525879918,
  "byte_83": 0.00666407867494824,
  "byte_13": 0.0016174948240165632,
  "byte_34": 0.004723084886128364,
  "byte_15": 0.01585144927536232,
  "byte_00": 0.06379399585921325,
  "byte_4d": 0.001099896480331263,
  "byte_57": 0.01999223602484472,
  "byte_fd": 0.008346273291925466,
  "byte_5b": 0.0353907867494824,
  "byte_50": 0.024650621118012424,
  "byte_51": 0.009510869565217392,
  "byte_06": 0.002458592132505176,
  "byte_20": 0.022386128364389232,
  "byte_65": 0.00795807453416149,
  "byte_53": 0.001099896480331263,
  "byte_68": 0.0021350931677018635,
  "byte_69": 0.0021350931677018635,
  "byte_6e": 0.004528985507246377,
  "byte_70": 0.0015527950310559005,
  "byte_d0": 0.0009057971014492754,
  "byte_1b": 0.01843944099378882,
  "byte_1c": 0.0015527950310559005,
  "byte_f4": 0.0007763975155279503,
  "byte_b3": 0.0007763975155279503,
  "byte_dc": 0.0005175983436853002,
  "byte_f3": 0.0007116977225672878,
  "byte_d3": 0.0002587991718426501,
  "byte_03": 0.012357660455486542,
  "byte_a4": 0.0023938923395445135,
  "byte_3b": 0.001099896480331263,
  "byte_56": 0.023874223602484472,
  "byte_ba": 0.0008410973084886129,
  "byte_04": 0.01332815734989648,
  "byte_84": 0.004981884057971014,
  "byte_cf": 0.0003234989648033126,
  "byte_5a": 0.001358695652173913,
  "byte_05": 0.004852484472049689,
  "byte_a0": 0.009252070393374742,
  "byte_7f": 0.004399585921325052,
  "byte_8b": 0.0018762939958592133,
  "byte_e0": 0.0022644927536231885,
  "byte_9c": 0.0007763975155279503,
  "byte_59": 0.001099896480331263,
  "byte_14": 0.008087474120082816,
  "byte_44": 0.002587991718426501,
  "byte_cd": 0.003687888198757764,
  "byte_1f": 0.002976190476190476,
  "byte_f2": 0.0007116977225672878,
  "byte_49": 0.0007763975155279503,
  "byte_97": 0.0008410973084886129,
  "byte_22": 0.0016174948240165632,
  "byte_a3": 0.0009057971014492754,
  "byte_da": 0.0004528985507246377,
  "byte_af": 0.0002587991718426501,
  "byte_e3": 0.0005822981366459627,
  "byte_b4": 0.0006469979296066253,
  "byte_18": 0.0022644927536231885,
  "byte_6f": 0.005305383022774327,
  "byte_6b": 0.001099896480331263,
  "byte_64": 0.004528985507246377,
  "byte_73": 0.003817287784679089,
  "byte_7a": 0.0009704968944099379,
  "byte_25": 0.0021350931677018635,
  "byte_30": 0.007828674948240166,
  "byte_39": 0.001229296066252588,
  "byte_df": 0.0005822981366459627,
  "byte_2c": 0.0012939958592132505,
  "byte_5d": 0.0005822981366459627,
  "byte_ac": 0.00019409937888198756,
  "byte_c6": 0.0003234989648033126,
  "byte_48": 0.001099896480331263,
  "byte_8d": 0.0006469979296066253,
  "byte_3f": 0.0007116977225672878,
  "byte_5e": 0.0009057971014492754,
  "byte_63": 0.008863871635610766,
  "byte_c4": 0.00038819875776397513,
  "byte_86": 0.0018762939958592133,
  "byte_85": 0.002846790890269151,
  "byte_fa": 0.0005822981366459627,
  "byte_9a": 0.0003234989648033126,
  "byte_3d": 0.0023938923395445135,
  "byte_3e": 0.001099896480331263,
  "byte_e1": 0.0005175983436853002,
  "byte_c9": 0.00038819875776397513,
  "byte_96": 0.0004528985507246377,
  "byte_ad": 0.002458592132505176,
  "byte_5c": 0.00038819875776397513,
  "byte_46": 0.003817287784679089,
  "byte_02": 0.0022644927536231885,
  "byte_09": 0.002070393374741201,
  "byte_1e": 0.001099896480331263,
  "byte_24": 0.004140786749482402,
  "byte_87": 0.0016821946169772257,
  "byte_f1": 0.0011645962732919255,
  "byte_a2": 0.0003234989648033126,
  "byte_c8": 0.0007763975155279503,
  "byte_d7": 0.0005175983436853002,
  "byte_9f": 0.0004528985507246377,
  "byte_bc": 0.00038819875776397513,
  "byte_7c": 0.0005822981366459627,
  "byte_4a": 0.0003234989648033126,
  "byte_c2": 0.0005822981366459627,
  "byte_6c": 0.0034937888198757765,
  "byte_74": 0.005564182194616977,
  "byte_ed": 0.0005175983436853002,
  "byte_ea": 0.00038819875776397513,
  "byte_e8": 0.0007116977225672878,
  "byte_29": 0.0008410973084886129,
  "byte_35": 0.002070393374741201,
  "byte_0a": 0.002199792960662526,
  "byte_27": 0.001358695652173913,
  "byte_89": 0.00019409937888198756,
  "byte_67": 0.0011645962732919255,
  "byte_1a": 0.0018115942028985507,
  "byte_9e": 0.0007116977225672878,
  "byte_aa": 0.00038819875776397513,
  "byte_93": 0.0016821946169772257,
  "byte_e9": 0.0006469979296066253,
  "byte_2b": 0.0007763975155279503,
  "byte_f6": 0.0005822981366459627,
  "byte_de": 0.0007763975155279503,
  "byte_31": 0.0023938923395445135,
  "byte_4c": 0.00038819875776397513,
  "byte_33": 0.002329192546583851,
  "byte_d5": 0.0003234989648033126,
  "byte_bf": 0.00019409937888198756,
  "byte_e5": 0.0034937888198757765,
  "byte_3c": 0.0005822981366459627,
  "byte_21": 0.003105590062111801,
  "byte_a9": 0.0003234989648033126,
  "byte_7b": 0.0017468944099378882,
  "byte_77": 0.0018115942028985507,
  "byte_bd": 0.0004528985507246377,
  "byte_a1": 0.0009057971014492754,
  "byte_bb": 0.0007763975155279503,
  "byte_6a": 0.0005822981366459627,
  "byte_98": 0.00038819875776397513,
  "byte_ce": 0.0004528985507246377,
  "byte_d9": 0.0002587991718426501,
  "byte_b1": 0.0005175983436853002,
  "byte_ab": 0.0002587991718426501,
  "byte_76": 0.0009704968944099379,
  "byte_9d": 0.00019409937888198756,
  "byte_8f": 0.0002587991718426501,
  "byte_d1": 0.00038819875776397513,
  "byte_b5": 0.0002587991718426501,
  "byte_26": 0.0008410973084886129,
  "byte_ec": 0.0004528985507246377,
  "byte_dd": 0.0008410973084886129,
  "byte_36": 0.0025232919254658385,
  "byte_cc": 0.0002587991718426501,
  "byte_7d": 0.0005175983436853002,
  "byte_2d": 0.0009057971014492754,
  "byte_f7": 0.00019409937888198756,
  "byte_45": 0.0009057971014492754,
  "byte_43": 0.001099896480331263,
  "byte_32": 0.0019409937888198758,
  "byte_3a": 0.001488095238095238,
  "byte_6d": 0.0015527950310559005,
  "byte_72": 0.004917184265010352,
  "byte_94": 0.0009704968944099379,
  "byte_e2": 0.0003234989648033126,
  "byte_9b": 0.0003234989648033126,
  "byte_b0": 0.0005822981366459627,
  "byte_fc": 0.0005822981366459627,
  "byte_37": 0.0007763975155279503,
  "byte_95": 0.0004528985507246377,
  "byte_a7": 0.0006469979296066253,
  "byte_28": 0.0009057971014492754,
  "byte_f5": 0.0004528985507246377,
  "byte_23": 0.0015527950310559005,
  "byte_ef": 0.00012939958592132506,
  "byte_66": 0.002587991718426501,
  "byte_b8": 0.0007116977225672878,
  "byte_88": 0.0007116977225672878,
  "byte_ca": 0.0002587991718426501,
  "byte_cb": 0.0008410973084886129,
  "byte_12": 0.0018115942028985507,
  "byte_4e": 0.0005822981366459627,
  "byte_71": 0.0007116977225672878,
  "byte_b9": 0.0007763975155279503,
  "byte_f8": 0.0004528985507246377,
  "byte_47": 0.0005822981366459627,
  "byte_1d": 0.001229296066252588,
  "byte_78": 0.0007763975155279503,
  "byte_2a": 0.001229296066252588,
  "byte_4f": 0.0008410973084886129,
  "byte_fe": 0.0002587991718426501,
  "byte_a5": 0.0005175983436853002,
  "byte_e7": 0.00038819875776397513,
  "byte_c7": 0.0003234989648033126,
  "byte_42": 0.0009057971014492754,
  "byte_b2": 0.0005175983436853002,
  "byte_eb": 0.00012939958592132506,
  "byte_e4": 0.0005175983436853002,
  "byte_d2": 0.0012939958592132505,
  "byte_d8": 0.0004528985507246377,
  "byte_c1": 0.0002587991718426501,
  "byte_8c": 0.00019409937888198756,
  "byte_b6": 0.0009704968944099379,
  "byte_75": 0.002329192546583851,
  "byte_c5": 0.0003234989648033126,
  "byte_b7": 0.001099896480331263,
  "byte_41": 0.00038819875776397513,
  "byte_d6": 0.00012939958592132506,
  "byte_5f": 0.00012939958592132506,
  "byte_8e": 0.00019409937888198756,
  "byte_d4": 0.0005822981366459627,
  "byte_a6": 0.00019409937888198756,
  "byte_f0": 0.00019409937888198756,
  "byte_a8": 0.0004528985507246377,
  "byte_4b": 0.00019409937888198756,
  "byte_8a": 0.00019409937888198756,
  "byte_be": 0.0006469979296066253,
  "byte_ee": 0.0003234989648033126,
  "byte_2e": 0.002846790890269151,
  "byte_7e": 0.00012939958592132506,
  "byte_38": 0.0003234989648033126,
  "byte_58": 0.0004528985507246377,
  "byte_2f": 0.0014233954451345755,
  "byte_c3": 0.0002587991718426501,
  "byte_f9": 0.00019409937888198756,
  "byte_e6": 0.00019409937888198756,
  "byte_79": 0.0008410973084886129,
  "byte_99": 6.469979296066253e-05,
  "byte_fb": 0.00012939958592132506,
  "byte_db": 0.0003234989648033126,
  "byte_ae": 0.0002587991718426501,
  "num_nodes": 126,
  "num_edges": 126,
  "avg_degree": 2.0,
  "density": 0.008,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 203,
  "event_nums": 1000,
  "creation_block": 15486129,
  "creation_timestamp": 1662495482,
  "life_time": 7620963.0,
  "duration_seconds": 92290353.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 127,
  "num_buyers": 2,
  "num_sellers": 126,
  "num_creator_transfers": 28,
  "buy_amt": 1.9380514108417892e+18,
  "sell_amt": 1.938051410841789e+18,
  "avg_value": 1.9000504027860676e+16,
  "txn_per_block": 2.663705011596958e-05,
  "avg_gas_limit": 326517.7290640394,
  "std_gas_limit": 491190.2703849175,
  "avg_gas_used": 65206.40886699507,
  "std_gas_used": 424811.0219572811,
  "avg_gas_price": 26977030842.729065,
  "std_gas_price": 24965623941.90955,
  "ownershiptransferred_num": 2,
  "setautomatedmarketmakerpair_num": 1,
  "excludefromfees_num": 3,
  "transfer_num": 1,
  "autonukelp_num": 59,
  "approve_num": 154,
  "enabletrading_num": 1,
  "updatesellfees_num": 1,
  "updatebuyfees_num": 1,
  "removelimits_num": 1,
  "renounceownership_num": 1,
  "timeline_sequence": [
    [
      15486129,
      1662495482,
      0,
      322,
      0,
      6096896,
      24085746230,
      0,
      1,
      28780856,
      6096896,
      7644119
    ],
    [
      15486162,
      1662495952,
      19,
      45,
      0,
      550000,
      38252869036,
      0,
      1,
      3128526,
      46628,
      7644086
    ],
    [
      15486162,
      1662495952,
      18,
      47,
      0,
      550000,
      38252869036,
      0,
      1,
      3271890,
      46628,
      7644086
    ],
    [
      15486163,
      1662495988,
      15,
      14,
      0,
      550000,
      40408853830,
      0,
      1,
      1079290,
      46628,
      7644085
    ],
    [
      15486196,
      1662496557,
      1,
      98,
      0,
      55953,
      28860850746,
      0,
      1,
      10867324,
      46628,
      7644052
    ],
    [
      15486216,
      1662496813,
      3,
      285,
      0,
      50610,
      24912817028,
      0,
      1,
      23990278,
      50610,
      7644032
    ],
    [
      15486217,
      1662496853,
      212,
      8,
      0,
      46628,
      28838652021,
      0,
      1,
      642975,
      46628,
      7644031
    ],
    [
      15486217,
      1662496853,
      3214,
      9,
      0,
      46628,
      28838652021,
      0,
      1,
      689603,
      46628,
      7644031
    ],
    [
      15486217,
      1662496853,
      3534,
      10,
      0,
      46628,
      28838652021,
      0,
      1,
      736231,
      46628,
      7644031
    ],
    [
      15486217,
      1662496853,
      1,
      12,
      0,
      600000,
      28338652021,
      0,
      1,
      1385911,
      46628,
      7644031
    ],
    [
      15486217,
      1662496853,
      1,
      13,
      0,
      600000,
      28338652021,
      0,
      1,
      1432539,
      46628,
      7644031
    ],
    [
      15486217,
      1662496853,
      5,
      24,
      0,
      600000,
      28338652021,
      0,
      1,
      2849298,
      46628,
      7644031
    ],
    [
      15486217,
      1662496853,
      2349,
      26,
      0,
      46628,
      28838652021,
      0,
      1,
      3091315,
      46628,
      7644031
    ],
    [
      15486217,
      1662496853,
      1,
      31,
      0,
      600000,
      28338652021,
      0,
      1,
      3919475,
      46628,
      7644031
    ],
    [
      15486217,
      1662496853,
      1,
      35,
      0,
      600000,
      28338652021,
      0,
      1,
      4232466,
      46628,
      7644031
    ],
    [
      15486217,
      1662496853,
      7013,
      48,
      0,
      100000,
      27838652021,
      0,
      1,
      5883007,
      46628,
      7644031
    ],
    [
      15486218,
      1662496856,
      961,
      5,
      0,
      500000,
      205000000000,
      0,
      1,
      525891,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      2030,
      6,
      0,
      500000,
      100000000000,
      0,
      1,
      572519,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      487,
      7,
      0,
      500000,
      100000000000,
      0,
      1,
      619147,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      549,
      8,
      0,
      500000,
      100000000000,
      0,
      1,
      665775,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      495,
      9,
      0,
      500000,
      100000000000,
      0,
      1,
      712403,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      275,
      17,
      0,
      55926,
      35662727776,
      0,
      1,
      1443513,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      506,
      18,
      0,
      55926,
      35662727776,
      0,
      1,
      1490141,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      158,
      19,
      0,
      55926,
      35662727776,
      0,
      1,
      1536769,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      377,
      20,
      0,
      55926,
      35662727776,
      0,
      1,
      1583397,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      11,
      22,
      0,
      55926,
      35662727776,
      0,
      1,
      1677248,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      205,
      27,
      0,
      46628,
      32682727776,
      0,
      1,
      2177169,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      24,
      28,
      0,
      1000000,
      31662727776,
      0,
      1,
      2223797,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      20,
      29,
      0,
      1000000,
      31662727776,
      0,
      1,
      2270425,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      731,
      30,
      0,
      700000,
      30662727776,
      0,
      1,
      2317053,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      331,
      31,
      0,
      700000,
      30662727776,
      0,
      1,
      2363681,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      844,
      32,
      0,
      700000,
      30662727776,
      0,
      1,
      2410309,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      1447,
      33,
      0,
      700000,
      30662727776,
      0,
      1,
      2456937,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      299,
      35,
      0,
      46628,
      30162727776,
      0,
      1,
      2524565,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      185,
      36,
      0,
      46628,
      30162727776,
      0,
      1,
      2571193,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      456,
      37,
      0,
      46628,
      30162727776,
      0,
      1,
      2617821,
      46628,
      7644030
    ],
    [
      15486218,
      1662496856,
      854,
      86,
      0,
      500000,
      29000000000,
      0,
      1,
      8810441,
      46628,
      7644030
    ],
    [
      15486220,
      1662496867,
      215,
      0,
      0,
      400000,
      39000000000,
      0,
      1,
      46628,
      46628,
      7644028
    ],
    [
      15486221,
      1662496869,
      21,
      8,
      0,
      550000,
      42495783943,
      0,
      1,
      1448322,
      26728,
      7644027
    ],
    [
      15486221,
      1662496869,
      216,
      10,
      0,
      750000,
      39000000000,
      0,
      1,
      1547309,
      46628,
      7644027
    ],
    [
      15486221,
      1662496869,
      20,
      15,
      0,
      550000,
      42495783943,
      0,
      1,
      1866713,
      26728,
      7644027
    ],
    [
      15486221,
      1662496869,
      83,
      18,
      0,
      550000,
      42495783943,
      0,
      1,
      2290397,
      46628,
      7644027
    ],
    [
      15486222,
      1662496878,
      438,
      1,
      0,
      455000,
      67000000000,
      0,
      1,
      244934,
      46628,
      7644026
    ],
    [
      15486222,
      1662496878,
      567,
      2,
      0,
      69942,
      51850185649,
      0,
      1,
      291562,
      46628,
      7644026
    ],
    [
      15486222,
      1662496878,
      277,
      6,
      0,
      450000,
      45000000000,
      0,
      1,
      712368,
      46628,
      7644026
    ],
    [
      15486222,
      1662496878,
      17,
      9,
      0,
      550000,
      42850185649,
      0,
      1,
      1014032,
      26728,
      7644026
    ],
    [
      15486222,
      1662496878,
      192,
      10,
      0,
      550000,
      42850185649,
      0,
      1,
      1060660,
      46628,
      7644026
    ],
    [
      15486222,
      1662496878,
      15,
      17,
      0,
      550000,
      42850185649,
      0,
      1,
      1589821,
      46628,
      7644026
    ],
    [
      15486222,
      1662496878,
      92,
      18,
      0,
      69942,
      32850185649,
      0,
      1,
      1636449,
      46628,
      7644026
    ],
    [
      15486222,
      1662496878,
      178,
      20,
      0,
      550000,
      42850185649,
      0,
      1,
      1872147,
      46628,
      7644026
    ],
    [
      15486222,
      1662496878,
      68,
      22,
      0,
      550000,
      42850185649,
      0,
      1,
      2107845,
      46628,
      7644026
    ],
    [
      15486222,
      1662496878,
      23,
      24,
      0,
      550000,
      42850185649,
      0,
      1,
      2289431,
      26728,
      7644026
    ],
    [
      15486222,
      1662496878,
      22,
      26,
      0,
      550000,
      42850185649,
      0,
      1,
      2471029,
      26728,
      7644026
    ],
    [
      15486222,
      1662496878,
      19,
      29,
      0,
      550000,
      42850185649,
      0,
      1,
      2804294,
      26728,
      7644026
    ],
    [
      15486222,
      1662496878,
      140,
      46,
      0,
      210000,
      29244519125,
      0,
      1,
      4037699,
      46364,
      7644026
    ],
    [
      15486222,
      1662496878,
      203,
      48,
      0,
      210000,
      29244519125,
      0,
      1,
      4337848,
      46364,
      7644026
    ],
    [
      15486222,
      1662496878,
      207,
      50,
      0,
      210000,
      29244519125,
      0,
      1,
      4547612,
      46364,
      7644026
    ],
    [
      15486222,
      1662496878,
      205,
      52,
      0,
      210000,
      29244519125,
      0,
      1,
      4757376,
      46364,
      7644026
    ],
    [
      15486222,
      1662496878,
      1949,
      54,
      0,
      210000,
      29244519125,
      0,
      1,
      5057525,
      46364,
      7644026
    ],
    [
      15486222,
      1662496878,
      724,
      83,
      0,
      55926,
      24850185649,
      0,
      1,
      8379251,
      46628,
      7644026
    ],
    [
      15486224,
      1662496901,
      32,
      82,
      0,
      55953,
      23339287256,
      0,
      1,
      16572684,
      46628,
      7644024
    ],
    [
      15486224,
      1662496901,
      124,
      86,
      0,
      55953,
      23339287256,
      0,
      1,
      16861290,
      46628,
      7644024
    ],
    [
      15486224,
      1662496901,
      1320,
      98,
      0,
      300000,
      22939287256,
      0,
      1,
      17791152,
      46628,
      7644024
    ],
    [
      15486226,
      1662496926,
      579,
      15,
      0,
      500000,
      35000000000,
      0,
      1,
      1771718,
      46628,
      7644022
    ],
    [
      15486226,
      1662496926,
      518,
      16,
      0,
      500000,
      35000000000,
      0,
      1,
      1818346,
      46628,
      7644022
    ],
    [
      15486226,
      1662496926,
      831,
      17,
      0,
      500000,
      35000000000,
      0,
      1,
      1864974,
      46628,
      7644022
    ],
    [
      15486226,
      1662496926,
      368,
      18,
      0,
      500000,
      35000000000,
      0,
      1,
      1911602,
      46628,
      7644022
    ],
    [
      15486226,
      1662496926,
      457,
      98,
      0,
      55953,
      23828802580,
      0,
      1,
      11199507,
      46628,
      7644022
    ],
    [
      15486226,
      1662496926,
      88,
      125,
      0,
      55953,
      23828802580,
      0,
      1,
      13691736,
      46628,
      7644022
    ],
    [
      15486232,
      1662497032,
      85,
      17,
      0,
      550000,
      44300882849,
      0,
      1,
      2107439,
      26728,
      7644016
    ],
    [
      15486232,
      1662497032,
      194,
      19,
      0,
      550000,
      44300882849,
      0,
      1,
      2289037,
      26728,
      7644016
    ],
    [
      15486232,
      1662497032,
      180,
      21,
      0,
      550000,
      44300882849,
      0,
      1,
      2470635,
      26728,
      7644016
    ],
    [
      15486232,
      1662497032,
      70,
      23,
      0,
      550000,
      44300882849,
      0,
      1,
      2652233,
      26728,
      7644016
    ],
    [
      15486233,
      1662497054,
      5617,
      1,
      0,
      500000,
      80000000000,
      0,
      1,
      105576,
      46628,
      7644015
    ],
    [
      15486233,
      1662497054,
      28,
      8,
      0,
      69942,
      28202083627,
      0,
      1,
      1093892,
      46628,
      7644015
    ],
    [
      15486235,
      1662497063,
      278,
      92,
      0,
      55953,
      22199219612,
      0,
      1,
      7311737,
      46628,
      7644013
    ],
    [
      15486239,
      1662497112,
      2476,
      80,
      0,
      46628,
      20459222596,
      0,
      1,
      11630368,
      46628,
      7644009
    ],
    [
      15486242,
      1662497140,
      128,
      89,
      0,
      55953,
      20543129034,
      0,
      1,
      9362467,
      46628,
      7644006
    ],
    [
      15486248,
      1662497198,
      5,
      210,
      0,
      41375,
      16437907220,
      0,
      1,
      23229620,
      33100,
      7644000
    ],
    [
      15486255,
      1662497239,
      2254,
      189,
      0,
      300000,
      13991270234,
      0,
      1,
      18531205,
      46628,
      7643993
    ],
    [
      15486255,
      1662497239,
      2477,
      231,
      0,
      55953,
      13991270234,
      0,
      1,
      21805795,
      46628,
      7643993
    ],
    [
      15486256,
      1662497271,
      1051,
      19,
      0,
      300000,
      19489882708,
      0,
      1,
      1158346,
      46628,
      7643992
    ],
    [
      15486258,
      1662497303,
      96,
      45,
      0,
      69942,
      28071023830,
      0,
      1,
      6360682,
      46628,
      7643990
    ],
    [
      15486258,
      1662497303,
      6,
      161,
      0,
      41371,
      19071023830,
      0,
      1,
      17500314,
      33097,
      7643990
    ],
    [
      15486264,
      1662497401,
      777,
      164,
      0,
      55953,
      19662677552,
      0,
      1,
      12551665,
      46628,
      7643984
    ],
    [
      15486264,
      1662497401,
      260,
      218,
      0,
      55953,
      19662677552,
      0,
      1,
      18407050,
      46628,
      7643984
    ],
    [
      15486267,
      1662497431,
      8,
      122,
      0,
      28555,
      18655408327,
      0,
      1,
      9066378,
      28555,
      7643981
    ],
    [
      15486269,
      1662497465,
      225,
      20,
      0,
      55953,
      22419751577,
      0,
      1,
      2944594,
      46628,
      7643979
    ],
    [
      15486276,
      1662497570,
      9,
      324,
      0,
      28094,
      19195547177,
      0,
      1,
      29992140,
      23294,
      7643972
    ],
    [
      15486280,
      1662497594,
      2889,
      325,
      0,
      55953,
      28479349469,
      0,
      1,
      25298275,
      46628,
      7643968
    ],
    [
      15486281,
      1662497623,
      27,
      147,
      0,
      55953,
      28708358297,
      0,
      1,
      13324979,
      46628,
      7643967
    ],
    [
      15486281,
      1662497623,
      672,
      306,
      0,
      55953,
      28648358297,
      0,
      1,
      26815567,
      46628,
      7643967
    ],
    [
      15486282,
      1662497645,
      1583,
      11,
      0,
      55953,
      35046632439,
      0,
      1,
      1019249,
      46628,
      7643966
    ],
    [
      15486283,
      1662497654,
      884,
      84,
      0,
      46628,
      31810476925,
      0,
      1,
      5732023,
      46628,
      7643965
    ],
    [
      15486283,
      1662497654,
      36,
      85,
      0,
      46628,
      31810476925,
      0,
      1,
      5778651,
      46628,
      7643965
    ],
    [
      15486284,
      1662497676,
      293,
      150,
      0,
      55953,
      37970922320,
      0,
      1,
      15015026,
      46628,
      7643964
    ],
    [
      15486285,
      1662497722,
      664,
      89,
      0,
      55953,
      39091372116,
      0,
      1,
      4900499,
      46628,
      7643963
    ],
    [
      15486287,
      1662497747,
      5618,
      60,
      0,
      55953,
      42813992394,
      0,
      1,
      4918364,
      46628,
      7643961
    ],
    [
      15486288,
      1662497753,
      1863,
      47,
      0,
      1500000,
      54400423346,
      0,
      1,
      5897712,
      46628,
      7643960
    ],
    [
      15486288,
      1662497753,
      8,
      190,
      0,
      193057,
      41282223346,
      0,
      1,
      16242144,
      46628,
      7643960
    ],
    [
      15486289,
      1662497787,
      738,
      31,
      0,
      55926,
      49436341685,
      0,
      1,
      1514381,
      26728,
      7643959
    ],
    [
      15486292,
      1662497828,
      3786,
      10,
      0,
      55953,
      50627896426,
      0,
      1,
      950637,
      46628,
      7643956
    ],
    [
      15486293,
      1662497836,
      294,
      46,
      0,
      61665,
      43699467634,
      0,
      1,
      3574684,
      46628,
      7643955
    ],
    [
      15486294,
      1662497861,
      389,
      48,
      0,
      51290,
      40934824322,
      0,
      1,
      3377442,
      46628,
      7643954
    ],
    [
      15486294,
      1662497861,
      244,
      69,
      0,
      55953,
      40934824322,
      0,
      1,
      5803472,
      46628,
      7643954
    ],
    [
      15486296,
      1662497875,
      307,
      7,
      0,
      1000000,
      100000000000,
      0,
      1,
      1070646,
      46628,
      7643952
    ],
    [
      15486297,
      1662497886,
      1609,
      117,
      0,
      55953,
      33847841038,
      0,
      1,
      11047870,
      46628,
      7643951
    ],
    [
      15486298,
      1662497903,
      34,
      250,
      0,
      55953,
      36519817801,
      0,
      1,
      21637558,
      46628,
      7643950
    ],
    [
      15486298,
      1662497903,
      83,
      252,
      0,
      55953,
      36519817801,
      0,
      1,
      21916892,
      46628,
      7643950
    ],
    [
      15486300,
      1662497980,
      343,
      210,
      0,
      55953,
      45413637079,
      0,
      1,
      10840393,
      46628,
      7643948
    ],
    [
      15486303,
      1662498030,
      3216,
      53,
      0,
      55953,
      47573065515,
      0,
      1,
      3087233,
      46628,
      7643945
    ],
    [
      15486310,
      1662498109,
      561,
      177,
      0,
      55953,
      33915512436,
      0,
      1,
      15440932,
      46628,
      7643938
    ],
    [
      15486313,
      1662498188,
      300,
      105,
      0,
      55953,
      39726117544,
      0,
      1,
      8876339,
      46628,
      7643935
    ],
    [
      15486323,
      1662498296,
      1854,
      42,
      0,
      55953,
      37000000000,
      0,
      1,
      3267591,
      46628,
      7643925
    ],
    [
      15486323,
      1662498296,
      1646,
      155,
      0,
      46628,
      26776746483,
      0,
      1,
      13534035,
      46628,
      7643925
    ],
    [
      15486323,
      1662498296,
      41,
      241,
      0,
      60000,
      26276746483,
      0,
      1,
      22544778,
      46628,
      7643925
    ],
    [
      15486325,
      1662498338,
      2652,
      82,
      0,
      55953,
      30000000000,
      0,
      1,
      7652354,
      46628,
      7643923
    ],
    [
      15486326,
      1662498356,
      41,
      43,
      0,
      69942,
      35061849381,
      0,
      1,
      3878328,
      46628,
      7643922
    ],
    [
      15486327,
      1662498371,
      1664,
      2,
      0,
      116570,
      61458137219,
      0,
      1,
      535181,
      46628,
      7643921
    ],
    [
      15486329,
      1662498395,
      221,
      126,
      0,
      55953,
      28241139119,
      0,
      1,
      10627755,
      46628,
      7643919
    ],
    [
      15486331,
      1662498424,
      1215,
      57,
      0,
      55953,
      26934829349,
      0,
      1,
      3305740,
      46628,
      7643917
    ],
    [
      15486337,
      1662498465,
      232,
      65,
      0,
      55953,
      22094578834,
      0,
      1,
      5886513,
      46628,
      7643911
    ],
    [
      15486339,
      1662498477,
      783,
      1,
      0,
      500000,
      80000000000,
      0,
      1,
      67628,
      46628,
      7643909
    ],
    [
      15486339,
      1662498477,
      1072,
      110,
      0,
      46628,
      19280433847,
      0,
      1,
      9818323,
      46628,
      7643909
    ],
    [
      15486341,
      1662498496,
      590,
      245,
      0,
      55953,
      18844339961,
      0,
      1,
      25264178,
      46628,
      7643907
    ],
    [
      15486343,
      1662498538,
      72,
      195,
      0,
      55953,
      20834650352,
      0,
      1,
      17666299,
      46628,
      7643905
    ],
    [
      15486353,
      1662498716,
      5067,
      12,
      0,
      146256,
      33000000000,
      0,
      1,
      1043453,
      46628,
      7643895
    ],
    [
      15486354,
      1662498732,
      83,
      128,
      0,
      55953,
      22391664449,
      0,
      1,
      11250018,
      46628,
      7643894
    ],
    [
      15486357,
      1662498750,
      1679,
      18,
      0,
      69942,
      30038279763,
      0,
      1,
      1463552,
      46628,
      7643891
    ],
    [
      15486362,
      1662498799,
      6630,
      88,
      0,
      55953,
      18243495982,
      0,
      1,
      7837257,
      46628,
      7643886
    ],
    [
      15486362,
      1662498799,
      62,
      119,
      0,
      55953,
      18243495982,
      0,
      1,
      11001180,
      46628,
      7643886
    ],
    [
      15486377,
      1662498976,
      51,
      247,
      0,
      55953,
      16329371561,
      0,
      1,
      17988629,
      46628,
      7643871
    ],
    [
      15486381,
      1662499058,
      141,
      143,
      0,
      55953,
      17066113545,
      0,
      1,
      16428819,
      46628,
      7643867
    ],
    [
      15486387,
      1662499122,
      1667,
      0,
      0,
      73820,
      29140863364,
      0,
      1,
      29528,
      29528,
      7643861
    ],
    [
      15486394,
      1662499204,
      1998,
      190,
      0,
      55953,
      16671643919,
      0,
      1,
      14959558,
      46628,
      7643854
    ],
    [
      15486396,
      1662499266,
      438,
      18,
      0,
      150000,
      20212791347,
      0,
      1,
      1179446,
      46628,
      7643852
    ],
    [
      15486406,
      1662499372,
      6,
      102,
      0,
      55953,
      13729252325,
      0,
      1,
      12653240,
      46628,
      7643842
    ],
    [
      15486417,
      1662499536,
      2,
      83,
      0,
      55953,
      16720908205,
      0,
      1,
      11122057,
      46628,
      7643831
    ],
    [
      15486423,
      1662499575,
      2351,
      109,
      0,
      55953,
      14910268732,
      0,
      1,
      10061228,
      46628,
      7643825
    ],
    [
      15486426,
      1662499616,
      882,
      0,
      0,
      55953,
      132116593391,
      0,
      1,
      46628,
      46628,
      7643822
    ],
    [
      15486430,
      1662499683,
      2,
      23,
      0,
      55953,
      19293481103,
      0,
      1,
      1713430,
      46628,
      7643818
    ],
    [
      15486437,
      1662499791,
      2,
      90,
      0,
      55953,
      16833181376,
      0,
      1,
      8080315,
      46628,
      7643811
    ],
    [
      15486451,
      1662499969,
      161,
      261,
      0,
      96628,
      15498887050,
      0,
      1,
      21115088,
      46628,
      7643797
    ],
    [
      15486452,
      1662500011,
      269,
      67,
      0,
      55953,
      17247524545,
      0,
      1,
      8811352,
      46628,
      7643796
    ],
    [
      15486461,
      1662500126,
      617,
      156,
      0,
      55953,
      19828424715,
      0,
      1,
      15237315,
      46628,
      7643787
    ],
    [
      15486480,
      1662500377,
      1250,
      87,
      0,
      55953,
      15652600575,
      0,
      1,
      8459196,
      46628,
      7643768
    ],
    [
      15486494,
      1662500568,
      1265,
      8,
      0,
      750000,
      28962263081,
      0,
      1,
      1636220,
      46628,
      7643754
    ],
    [
      15486500,
      1662500637,
      183,
      149,
      0,
      55953,
      13106286044,
      0,
      1,
      11089373,
      46628,
      7643748
    ],
    [
      15486528,
      1662500922,
      16,
      15,
      0,
      300000,
      14506773080,
      0,
      1,
      889856,
      46628,
      7643720
    ],
    [
      15486557,
      1662501509,
      6061,
      211,
      0,
      55953,
      18799967138,
      0,
      1,
      8134709,
      46628,
      7643691
    ],
    [
      15486784,
      1662504641,
      542,
      32,
      0,
      46628,
      14078738728,
      0,
      1,
      3290633,
      46628,
      7643464
    ],
    [
      15487516,
      1662514722,
      12,
      224,
      0,
      600000,
      13456552748,
      0,
      1,
      29237898,
      46628,
      7642732
    ],
    [
      15493853,
      1662602633,
      1726,
      75,
      0,
      55953,
      12787319045,
      0,
      1,
      7316479,
      46628,
      7636395
    ],
    [
      15522652,
      1663011068,
      46,
      55,
      0,
      55953,
      30204830902,
      0,
      1,
      5026131,
      46628,
      7607596
    ],
    [
      15527608,
      1663081911,
      794,
      107,
      0,
      53622,
      28483654026,
      0,
      1,
      7815648,
      46628,
      7602640
    ],
    [
      15548664,
      1663361459,
      332,
      176,
      0,
      29144,
      23398981819,
      0,
      1,
      18148408,
      24344,
      7581584
    ],
    [
      20888100,
      1727996099,
      668,
      218,
      0,
      70516,
      5731635375,
      0,
      1,
      23917377,
      46628,
      2242148
    ],
    [
      22952630,
      1752920675,
      1903,
      147,
      0,
      46771,
      2759737326,
      0,
      1,
      16162282,
      46388,
      177618
    ],
    [
      23022359,
      1753762727,
      10,
      151,
      0,
      70952,
      299514144,
      0,
      1,
      33558406,
      70091,
      107889
    ],
    [
      23107091,
      1754785823,
      77,
      226,
      0,
      51448,
      421758035,
      0,
      1,
      30125468,
      46388,
      23157
    ],
    [
      23107092,
      1754785835,
      78,
      259,
      0,
      29514,
      440681366,
      0,
      1,
      17917864,
      26488,
      23156
    ],
    [
      15486222,
      1662496878,
      0,
      0,
      618988857584608045,
      189421,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486222,
      1662496878,
      0,
      0,
      309494428792304022,
      175136,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486222,
      1662496878,
      0,
      0,
      309494428792304023,
      166210,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486222,
      1662496878,
      0,
      0,
      443008057251290589,
      479981,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486222,
      1662496878,
      0,
      0,
      221504028625645294,
      470308,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486222,
      1662496878,
      0,
      0,
      221504028625645295,
      461381,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486222,
      1662496878,
      0,
      0,
      423718081630607796,
      726503,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486222,
      1662496878,
      0,
      0,
      211859040815303898,
      720743,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486222,
      1662496878,
      0,
      0,
      211859040815303898,
      711816,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486222,
      1662496878,
      0,
      0,
      23268711847034387,
      726503,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486222,
      1662496878,
      0,
      0,
      11634355923517193,
      720743,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486222,
      1662496878,
      0,
      0,
      11634355923517194,
      711816,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486226,
      1662496926,
      0,
      0,
      33293627464037172,
      517695,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486226,
      1662496926,
      0,
      0,
      16646813732018586,
      508783,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486226,
      1662496926,
      0,
      0,
      16646813732018586,
      499857,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486227,
      1662496941,
      0,
      0,
      16490291151602254,
      279197,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486227,
      1662496941,
      0,
      0,
      8245145575801127,
      266500,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486227,
      1662496941,
      0,
      0,
      8245145575801127,
      257574,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486237,
      1662497076,
      0,
      0,
      94308706964676493,
      756158,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486237,
      1662497076,
      0,
      0,
      47154353482338246,
      751032,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486237,
      1662497076,
      0,
      0,
      47154353482338247,
      742106,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486237,
      1662497076,
      0,
      0,
      47974658396869925,
      480267,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486237,
      1662497076,
      0,
      0,
      23987329198434962,
      470598,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486237,
      1662497076,
      0,
      0,
      23987329198434963,
      461672,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486237,
      1662497076,
      0,
      0,
      18489697932411598,
      480267,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486237,
      1662497076,
      0,
      0,
      9244848966205799,
      470598,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486237,
      1662497076,
      0,
      0,
      9244848966205799,
      461672,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486240,
      1662497120,
      0,
      0,
      28389447895751226,
      613091,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486240,
      1662497120,
      0,
      0,
      14194723947875613,
      605694,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486240,
      1662497120,
      0,
      0,
      14194723947875613,
      596768,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486244,
      1662497164,
      0,
      0,
      21599791782435004,
      527948,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486244,
      1662497164,
      0,
      0,
      10799895891217502,
      519036,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486244,
      1662497164,
      0,
      0,
      10799895891217502,
      510110,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486244,
      1662497164,
      0,
      0,
      13932789611346049,
      527948,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486244,
      1662497164,
      0,
      0,
      6966394805673024,
      519036,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486244,
      1662497164,
      0,
      0,
      6966394805673025,
      510110,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486244,
      1662497164,
      0,
      0,
      12647135888251756,
      527948,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486244,
      1662497164,
      0,
      0,
      6323567944125878,
      519036,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486244,
      1662497164,
      0,
      0,
      6323567944125878,
      510110,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486270,
      1662497470,
      0,
      0,
      141941555440866620,
      726426,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15486270,
      1662497470,
      0,
      0,
      70970777720433310,
      720819,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15486270,
      1662497470,
      0,
      0,
      70970777720433310,
      711893,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "/*\n\u3084\u304c\u3066\n*/\n\n// SPDX-License-Identifier: MIT                                                                               \n                                                    \npragma solidity 0.8.9;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transacgtion ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\n\nlibrary SafeMathInt {\n    int256 private constant MIN_INT256 = int256(1) << 255;\n    int256 private constant MAX_INT256 = ~(int256(1) << 255);\n\n    /**\n     * @dev Multiplies two int256 variables and fails on overflow.\n     */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a * b;\n\n        // Detect overflow when multiplying MIN_INT256 with -1\n        require(c != MIN_INT256 || (a & MIN_INT256) != (b & MIN_INT256));\n        require((b == 0) || (c / b == a));\n        return c;\n    }\n\n    /**\n     * @dev Division of two int256 variables and fails on overflow.\n     */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        // Prevent overflow when dividing MIN_INT256 by -1\n        require(b != -1 || a != MIN_INT256);\n\n        // Solidity already throws when dividing by 0.\n        return a / b;\n    }\n\n    /**\n     * @dev Subtracts two int256 variables and fails on overflow.\n     */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n        return c;\n    }\n\n    /**\n     * @dev Adds two int256 variables and fails on overflow.\n     */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n        return c;\n    }\n\n    /**\n     * @dev Converts to absolute value, and fails on overflow.\n     */\n    function abs(int256 a) internal pure returns (int256) {\n        require(a != MIN_INT256);\n        return a < 0 ? -a : a;\n    }\n\n\n    function toUint256Safe(int256 a) internal pure returns (uint256) {\n        require(a >= 0);\n        return uint256(a);\n    }\n}\n\nlibrary SafeMathUint {\n  function toInt256Safe(uint256 a) internal pure returns (int256) {\n    int256 b = int256(a);\n    require(b >= 0);\n    return b;\n  }\n}\n\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ncontract Shinpi is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address public immutable uniswapV2Pair;\n    address public constant deadAddress = address(0xdead);\n\n    bool private swapping;\n\n    address public marketingWallet;\n    address public devWallet;\n    \n    uint256 public maxTransactionAmount;\n    uint256 public swapTokensAtAmount;\n    uint256 public maxWallet;\n    \n    uint256 public percentForLPBurn = 25; // 25 = .25%\n    bool public lpBurnEnabled = true;\n    uint256 public lpBurnFrequency = 3600 seconds;\n    uint256 public lastLpBurnTime;\n    \n    uint256 public manualBurnFrequency = 30 minutes;\n    uint256 public lastManualLpBurnTime;\n\n    bool public limitsInEffect = true;\n    bool public tradingActive = false;\n    bool public swapEnabled = false;\n    \n     // Anti-bot and anti-whale mappings and variables\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\n    bool public transferDelayEnabled = true;\n\n    uint256 public buyTotalFees;\n    uint256 public buyMarketingFee;\n    uint256 public buyLiquidityFee;\n    uint256 public buyDevFee;\n    \n    uint256 public sellTotalFees;\n    uint256 public sellMarketingFee;\n    uint256 public sellLiquidityFee;\n    uint256 public sellDevFee;\n    \n    uint256 public tokensForMarketing;\n    uint256 public tokensForLiquidity;\n    uint256 public tokensForDev;\n    \n    /******************/\n\n    // exlcude from fees and max transaction amount\n    mapping (address => bool) private _isExcludedFromFees;\n    mapping (address => bool) public _isExcludedMaxTransactionAmount;\n\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\n    // could be subject to a maximum transfer amount\n    mapping (address => bool) public automatedMarketMakerPairs;\n\n    event UpdateUniswapV2Router(address indexed newAddress, address indexed oldAddress);\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n\n    event marketingWalletUpdated(address indexed newWallet, address indexed oldWallet);\n    \n    event devWalletUpdated(address indexed newWallet, address indexed oldWallet);\n\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiquidity\n    );\n    \n    event AutoNukeLP();\n    \n    event ManualNukeLP();\n\n    constructor() ERC20(\"Shinpi\", \"\\xE7\\xA5\\x9E\\xE7\\xA7\\x98\") {\n        \n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        \n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\n        uniswapV2Router = _uniswapV2Router;\n        \n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\n        \n        uint256 _buyMarketingFee = 5;\n        uint256 _buyLiquidityFee = 0;\n        uint256 _buyDevFee = 5;\n\n        uint256 _sellMarketingFee = 5;\n        uint256 _sellLiquidityFee = 0;\n        uint256 _sellDevFee = 5;\n        \n        uint256 totalSupply = 1 * 1e12 * 1e18;\n        \n        //maxTransactionAmount = totalSupply * 50 / 1000; // 2% maxTransactionAmountTxn\n        maxTransactionAmount = 20000000000 * 1e18;\n        maxWallet = totalSupply * 20 / 1000; // 2% maxWallet\n        swapTokensAtAmount = totalSupply * 15 / 10000; // 0.15% swap wallet\n\n        buyMarketingFee = _buyMarketingFee;\n        buyLiquidityFee = _buyLiquidityFee;\n        buyDevFee = _buyDevFee;\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\n        \n        sellMarketingFee = _sellMarketingFee;\n        sellLiquidityFee = _sellLiquidityFee;\n        sellDevFee = _sellDevFee;\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee;\n        \n        marketingWallet = address(owner()); // set as marketing wallet\n        devWallet = address(owner()); // set as dev wallet\n\n        // exclude from paying fees or having max transaction amount\n        excludeFromFees(owner(), true);\n        excludeFromFees(address(this), true);\n        excludeFromFees(address(0xdead), true);\n        \n        excludeFromMaxTransaction(owner(), true);\n        excludeFromMaxTransaction(address(this), true);\n        excludeFromMaxTransaction(address(0xdead), true);\n        \n        /*\n            _mint is an internal function in ERC20.sol that is only called here,\n            and CANNOT be called ever again\n        */\n        _mint(msg.sender, totalSupply);\n    }\n\n    receive() external payable {\n\n  \t}\n\n    // once enabled, can never be turned off\n    function enableTrading() external onlyOwner {\n        tradingActive = true;\n        swapEnabled = true;\n        lastLpBurnTime = block.timestamp;\n    }\n    \n    // remove limits after token is stable\n    function removeLimits() external onlyOwner returns (bool){\n        limitsInEffect = false;\n        return true;\n    }\n    \n    // disable Transfer delay - cannot be reenabled\n    function disableTransferDelay() external onlyOwner returns (bool){\n        transferDelayEnabled = false;\n        return true;\n    }\n    \n     // change the minimum amount of tokens to sell from fees\n    function updateSwapTokensAtAmount(uint256 newAmount) external onlyOwner returns (bool){\n  \t    require(newAmount >= totalSupply() * 1 / 100000, \"Swap amount cannot be lower than 0.001% total supply.\");\n  \t    require(newAmount <= totalSupply() * 5 / 1000, \"Swap amount cannot be higher than 0.5% total supply.\");\n  \t    swapTokensAtAmount = newAmount;\n  \t    return true;\n  \t}\n    \n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\n        require(newNum >= (totalSupply() * 1 / 1000)/1e18, \"Cannot set maxTransactionAmount lower than 0.1%\");\n        maxTransactionAmount = newNum * (10**18);\n    }\n\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\n        require(newNum >= (totalSupply() * 5 / 1000)/1e18, \"Cannot set maxWallet lower than 0.5%\");\n        maxWallet = newNum * (10**18);\n    }\n    \n    function excludeFromMaxTransaction(address updAds, bool isEx) public onlyOwner {\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\n    }\n    \n    // only use to disable contract sales if absolutely necessary (emergency use only)\n    function updateSwapEnabled(bool enabled) external onlyOwner(){\n        swapEnabled = enabled;\n    }\n    \n    function updateBuyFees(uint256 _marketingFee, uint256 _liquidityFee, uint256 _devFee) external onlyOwner {\n        buyMarketingFee = _marketingFee;\n        buyLiquidityFee = _liquidityFee;\n        buyDevFee = _devFee;\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\n        require(buyTotalFees <= 20, \"Must keep fees at 20% or less\");\n    }\n    \n    function updateSellFees(uint256 _marketingFee, uint256 _liquidityFee, uint256 _devFee) external onlyOwner {\n        sellMarketingFee = _marketingFee;\n        sellLiquidityFee = _liquidityFee;\n        sellDevFee = _devFee;\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee;\n        require(sellTotalFees <= 25, \"Must keep fees at 25% or less\");\n    }\n\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        _isExcludedFromFees[account] = excluded;\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\n        require(pair != uniswapV2Pair, \"The pair cannot be removed from automatedMarketMakerPairs\");\n\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        automatedMarketMakerPairs[pair] = value;\n\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function updateMarketingWallet(address newMarketingWallet) external onlyOwner {\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\n        marketingWallet = newMarketingWallet;\n    }\n    \n    function updateDevWallet(address newWallet) external onlyOwner {\n        emit devWalletUpdated(newWallet, devWallet);\n        devWallet = newWallet;\n    }\n    \n\n    function isExcludedFromFees(address account) public view returns(bool) {\n        return _isExcludedFromFees[account];\n    }\n    \n    event BoughtEarly(address indexed sniper);\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        \n         if(amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n        \n        if(limitsInEffect){\n            if (\n                from != owner() &&\n                to != owner() &&\n                to != address(0) &&\n                to != address(0xdead) &&\n                !swapping\n            ){\n                if(!tradingActive){\n                    require(_isExcludedFromFees[from] || _isExcludedFromFees[to], \"Trading is not active.\");\n                }\n\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.  \n                if (transferDelayEnabled){\n                    if (to != owner() && to != address(uniswapV2Router) && to != address(uniswapV2Pair)){\n                        require(_holderLastTransferTimestamp[tx.origin] < block.number, \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\");\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\n                    }\n                }\n                 \n                //when buy\n                if (automatedMarketMakerPairs[from] && !_isExcludedMaxTransactionAmount[to]) {\n                        require(amount <= maxTransactionAmount, \"Buy transfer amount exceeds the maxTransactionAmount.\");\n                        require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\n                }\n                \n                //when sell\n                else if (automatedMarketMakerPairs[to] && !_isExcludedMaxTransactionAmount[from]) {\n                        require(amount <= maxTransactionAmount, \"Sell transfer amount exceeds the maxTransactionAmount.\");\n                }\n                else if(!_isExcludedMaxTransactionAmount[to]){\n                    require(amount + balanceOf(to) <= maxWallet, \"Max wallet exceeded\");\n                }\n            }\n        }\n        \n        \n        \n\t\tuint256 contractTokenBalance = balanceOf(address(this));\n        \n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\n\n        if( \n            canSwap &&\n            swapEnabled &&\n            !swapping &&\n            !automatedMarketMakerPairs[from] &&\n            !_isExcludedFromFees[from] &&\n            !_isExcludedFromFees[to]\n        ) {\n            swapping = true;\n            \n            swapBack();\n\n            swapping = false;\n        }\n        \n        if(!swapping && automatedMarketMakerPairs[to] && lpBurnEnabled && block.timestamp >= lastLpBurnTime + lpBurnFrequency && !_isExcludedFromFees[from]){\n            autoBurnLiquidityPairTokens();\n        }\n\n        bool takeFee = !swapping;\n\n        // if any account belongs to _isExcludedFromFee account then remove the fee\n        if(_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n            takeFee = false;\n        }\n        \n        uint256 fees = 0;\n        // only take fees on buys/sells, do not take on wallet transfers\n        if(takeFee){\n            // on sell\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0){\n                fees = amount.mul(sellTotalFees).div(100);\n                tokensForLiquidity += fees * sellLiquidityFee / sellTotalFees;\n                tokensForDev += fees * sellDevFee / sellTotalFees;\n                tokensForMarketing += fees * sellMarketingFee / sellTotalFees;\n            }\n            // on buy\n            else if(automatedMarketMakerPairs[from] && buyTotalFees > 0) {\n        \t    fees = amount.mul(buyTotalFees).div(100);\n        \t    tokensForLiquidity += fees * buyLiquidityFee / buyTotalFees;\n                tokensForDev += fees * buyDevFee / buyTotalFees;\n                tokensForMarketing += fees * buyMarketingFee / buyTotalFees;\n            }\n            \n            if(fees > 0){    \n                super._transfer(from, address(this), fees);\n            }\n        \t\n        \tamount -= fees;\n        }\n\n        super._transfer(from, to, amount);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n        \n    }\n    \n    \n    \n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            deadAddress,\n            block.timestamp\n        );\n    }\n\n    function swapBack() private {\n        uint256 contractBalance = balanceOf(address(this));\n        uint256 totalTokensToSwap = tokensForLiquidity + tokensForMarketing + tokensForDev;\n        bool success;\n        \n        if(contractBalance == 0 || totalTokensToSwap == 0) {return;}\n\n        if(contractBalance > swapTokensAtAmount * 20){\n          contractBalance = swapTokensAtAmount * 20;\n        }\n        \n        // Halve the amount of liquidity tokens\n        uint256 liquidityTokens = contractBalance * tokensForLiquidity / totalTokensToSwap / 2;\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\n        \n        uint256 initialETHBalance = address(this).balance;\n\n        swapTokensForEth(amountToSwapForETH); \n        \n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\n        \n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(totalTokensToSwap);\n        uint256 ethForDev = ethBalance.mul(tokensForDev).div(totalTokensToSwap);\n        \n        \n        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForDev;\n        \n        \n        tokensForLiquidity = 0;\n        tokensForMarketing = 0;\n        tokensForDev = 0;\n        \n        (success,) = address(devWallet).call{value: ethForDev}(\"\");\n        \n        if(liquidityTokens > 0 && ethForLiquidity > 0){\n            addLiquidity(liquidityTokens, ethForLiquidity);\n            emit SwapAndLiquify(amountToSwapForETH, ethForLiquidity, tokensForLiquidity);\n        }\n        \n        \n        (success,) = address(marketingWallet).call{value: address(this).balance}(\"\");\n    }\n    \n    function setAutoLPBurnSettings(uint256 _frequencyInSeconds, uint256 _percent, bool _Enabled) external onlyOwner {\n        require(_frequencyInSeconds >= 600, \"cannot set buyback more often than every 10 minutes\");\n        require(_percent <= 1000 && _percent >= 0, \"Must set auto LP burn percent between 0% and 10%\");\n        lpBurnFrequency = _frequencyInSeconds;\n        percentForLPBurn = _percent;\n        lpBurnEnabled = _Enabled;\n    }\n    \n    function autoBurnLiquidityPairTokens() internal returns (bool){\n        \n        lastLpBurnTime = block.timestamp;\n        \n        // get balance of liquidity pair\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\n        \n        // calculate amount to burn\n        uint256 amountToBurn = liquidityPairBalance.mul(percentForLPBurn).div(10000);\n        \n        // pull tokens from pancakePair liquidity and move to dead address permanently\n        if (amountToBurn > 0){\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\n        }\n        \n        //sync price since this is not in a swap transaction!\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\n        pair.sync();\n        emit AutoNukeLP();\n        return true;\n    }\n\n    function manualBurnLiquidityPairTokens(uint256 percent) external onlyOwner returns (bool){\n        require(block.timestamp > lastManualLpBurnTime + manualBurnFrequency , \"Must wait for cooldown to finish\");\n        require(percent <= 1000, \"May not nuke more than 10% of tokens in LP\");\n        lastManualLpBurnTime = block.timestamp;\n        \n        // get balance of liquidity pair\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\n        \n        // calculate amount to burn\n        uint256 amountToBurn = liquidityPairBalance.mul(percent).div(10000);\n        \n        // pull tokens from pancakePair liquidity and move to dead address permanently\n        if (amountToBurn > 0){\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\n        }\n        \n        //sync price since this is not in a swap transaction!\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\n        pair.sync();\n        emit ManualNukeLP();\n        return true;\n    }\n}"
}