{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH14 PUSH1 SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 NOT DUP4 EQ ISZERO PUSH2 JUMPI POP PUSH1 NOT PUSH2 JUMP JUMPDEST PUSH2 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP10 AND DUP1 DUP6 MSTORE SWAP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND OR SWAP1 SSTORE SWAP1 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH32 DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 SHA3 SLOAD DUP3 MLOAD PUSH1 DUP2 ADD SWAP1 SWAP4 MSTORE PUSH1 DUP1 DUP5 MSTORE SWAP2 SWAP4 PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP3 DUP6 SWAP3 PUSH2 SWAP3 DUP9 SWAP3 SWAP2 SWAP1 PUSH2 SWAP1 DUP4 ADD CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP DUP7 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 DUP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP10 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP11 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND OR SWAP1 SSTORE MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH32 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMPDEST PUSH2 DUP8 DUP8 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SWAP4 POP POP POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH11 DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 PUSH1 SHL PUSH1 PUSH1 PUSH1 SHL SUB DUP7 DUP2 AND SWAP2 SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP2 DUP5 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 SLOAD PUSH1 AND PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMPDEST POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 CALLER DUP3 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH4 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 NUMBER DUP3 LT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH4 AND DUP1 PUSH2 JUMPI PUSH1 SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH4 PUSH1 NOT DUP7 ADD DUP2 AND DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 SHA3 SLOAD AND DUP4 LT PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 NOT SWAP5 SWAP1 SWAP5 ADD PUSH4 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP4 DUP1 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH4 AND DUP4 LT ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 NOT DUP3 ADD JUMPDEST DUP2 PUSH4 AND DUP2 PUSH4 AND GT ISZERO PUSH2 JUMPI PUSH1 DUP3 DUP3 SUB PUSH4 AND DIV DUP2 SUB PUSH2 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH4 DUP6 DUP2 AND DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE SLOAD SWAP3 DUP4 AND DUP1 DUP3 MSTORE PUSH1 PUSH1 SHL SWAP1 SWAP4 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP8 EQ ISZERO PUSH2 JUMPI PUSH1 ADD MLOAD SWAP5 POP PUSH2 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 MLOAD PUSH4 AND DUP8 GT ISZERO PUSH2 JUMPI DUP2 SWAP4 POP PUSH2 JUMP JUMPDEST PUSH1 DUP3 SUB SWAP3 POP JUMPDEST POP POP PUSH2 JUMP JUMPDEST POP PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH4 SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB PUSH1 PUSH1 SHL SWAP1 SWAP2 DIV AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP6 AND PUSH1 PUSH1 PUSH1 SHL SUB NOT SWAP3 DUP4 AND OR DUP4 SSTORE PUSH1 DUP1 SLOAD SWAP2 DUP6 AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH4 PUSH1 SHL DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH8 DUP3 PUSH1 PUSH1 PUSH1 SHL SUB AND LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 DUP5 PUSH8 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH22 PUSH1 SHL DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH22 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND SWAP2 PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 SWAP1 PUSH2 SWAP1 CALLER SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 SWAP1 PUSH2 SWAP1 CALLER SWAP1 PUSH1 SWAP1 DUP7 SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 CALLER DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH32 SLOAD CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP2 PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP2 AND DUP6 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 CALLER DUP6 DUP4 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH4 AND DUP1 PUSH2 JUMPI PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 NOT DUP6 ADD PUSH4 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH14 PUSH1 SHL PUSH1 SWAP1 SWAP2 ADD MSTORE PUSH1 PUSH32 PUSH32 PUSH2 PUSH2 JUMP JUMPDEST ADDRESS PUSH1 MLOAD PUSH1 ADD PUSH2 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 SWAP1 POP PUSH1 PUSH32 DUP9 DUP9 DUP9 PUSH1 MLOAD PUSH1 ADD PUSH2 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 SWAP1 POP PUSH1 DUP3 DUP3 PUSH1 MLOAD PUSH1 ADD PUSH2 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 SWAP1 POP PUSH1 PUSH1 DUP3 DUP9 DUP9 DUP9 PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 MSTORE PUSH1 MLOAD PUSH2 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD PUSH1 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 MLOAD PUSH1 NOT ADD MLOAD SWAP2 POP POP PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 DUP2 ADD SWAP1 SWAP2 SSTORE DUP10 EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP8 TIMESTAMP GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP12 PUSH2 JUMP JUMPDEST POP POP POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH8 DUP3 PUSH1 PUSH1 PUSH1 SHL SUB AND LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 DUP5 PUSH8 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH22 PUSH1 SHL DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH22 PUSH1 SHL DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE SWAP2 SWAP3 POP PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND SWAP2 PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 SWAP1 PUSH2 SWAP1 CALLER SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP2 PUSH4 SWAP2 PUSH2 SWAP2 CALLER SWAP2 DUP7 SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH32 DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP3 DUP4 MSTORE PUSH1 DUP1 DUP5 SHA3 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 SHA3 SLOAD PUSH4 DUP2 AND SWAP1 PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND DUP3 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 SHL DUP5 LT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND GT ISZERO DUP3 SWAP1 PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SLOAD DUP3 MLOAD PUSH1 DUP2 ADD SWAP1 SWAP4 MSTORE PUSH1 DUP1 DUP5 MSTORE PUSH2 SWAP4 PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP3 AND SWAP3 DUP6 SWAP3 SWAP2 SWAP1 PUSH2 SWAP1 DUP4 ADD CODECOPY PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP7 DUP8 AND OR SWAP1 SSTORE SWAP3 DUP7 AND DUP3 MSTORE SWAP1 DUP3 SWAP1 SHA3 SLOAD DUP3 MLOAD PUSH1 DUP2 ADD SWAP1 SWAP4 MSTORE PUSH1 DUP1 DUP5 MSTORE PUSH2 SWAP5 SWAP2 SWAP1 SWAP2 AND SWAP3 DUP6 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP4 ADD CODECOPY PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP6 SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SLOAD DUP6 DUP5 AND DUP4 MSTORE SWAP2 SHA3 SLOAD PUSH2 SWAP3 SWAP2 DUP3 AND SWAP2 AND DUP4 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP5 SHA3 DUP1 SLOAD PUSH1 DUP5 MSTORE DUP3 DUP7 SHA3 SLOAD SWAP5 SWAP1 SWAP4 MSTORE DUP8 DUP8 AND PUSH1 PUSH1 PUSH1 SHL SUB NOT DUP5 AND DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP6 AND SWAP5 PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP3 AND SWAP4 SWAP2 SWAP3 DUP6 SWAP3 SWAP2 PUSH32 SWAP2 SWAP1 LOG4 PUSH2 DUP3 DUP5 DUP4 PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP6 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP4 DUP4 MUL PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP6 AND SWAP1 DUP1 DUP8 AND SWAP1 DUP4 AND DUP2 PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 PUSH1 PUSH1 SHL SUB AND EQ DUP4 SWAP1 PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND DUP3 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH12 PUSH1 SHL NOT AND PUSH1 PUSH1 SHL PUSH1 PUSH1 PUSH1 SHL SUB SWAP4 DUP5 AND DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH11 SWAP2 DIV SWAP1 SWAP2 AND GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SLOAD DUP3 MLOAD PUSH1 DUP2 ADD SWAP1 SWAP4 MSTORE PUSH1 DUP1 DUP5 MSTORE PUSH2 SWAP4 PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP3 AND SWAP3 DUP6 SWAP3 SWAP2 SWAP1 PUSH2 SWAP1 DUP4 ADD CODECOPY PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP6 SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP2 SWAP1 PUSH32 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 PUSH1 PUSH1 PUSH1 SHL SUB AND GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH4 AND SWAP1 DUP2 PUSH2 JUMPI PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 NOT DUP7 ADD PUSH4 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP3 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP7 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP POP POP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH4 AND SWAP1 DUP2 PUSH2 JUMPI PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 NOT DUP7 ADD PUSH4 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP3 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP6 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST CHAINID SWAP1 JUMP JUMPDEST PUSH1 DUP4 DUP4 ADD DUP3 PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP8 AND SWAP1 DUP4 AND LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 NUMBER PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP5 PUSH4 AND GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH4 PUSH1 NOT DUP10 ADD DUP2 AND DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 SHA3 SLOAD DUP3 DUP3 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 NOT DUP9 ADD PUSH4 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 DUP1 SLOAD PUSH16 NOT AND PUSH1 PUSH1 SHL PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND MUL OR SWAP1 SSTORE PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH4 DUP1 DUP5 AND DUP3 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP7 AND PUSH1 DUP1 DUP6 ADD SWAP2 DUP3 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP12 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP4 MSTORE DUP8 DUP2 SHA3 DUP13 DUP8 AND DUP3 MSTORE DUP4 MSTORE DUP8 DUP2 SHA3 SWAP7 MLOAD DUP8 SLOAD SWAP5 MLOAD SWAP1 SWAP6 AND PUSH1 PUSH1 SHL MUL PUSH16 NOT SWAP6 DUP8 AND PUSH4 NOT SWAP6 DUP7 AND OR SWAP6 SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 OR SWAP1 SWAP6 SSTORE SWAP4 DUP3 MSTORE PUSH1 SWAP1 SWAP4 MSTORE SWAP3 SWAP1 SWAP3 SHA3 DUP1 SLOAD PUSH1 DUP9 ADD SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST DUP5 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 DUP5 DUP5 PUSH1 MLOAD PUSH2 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 SHL DUP5 LT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP1 DUP3 MSTORE PUSH1 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP5 PUSH1 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 DUP5 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP8 DUP10 SUB SLT ISZERO PUSH2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 DUP9 DUP9 PUSH2 JUMP JUMPDEST SWAP6 POP PUSH1 DUP8 ADD CALLDATALOAD SWAP5 POP PUSH1 DUP8 ADD CALLDATALOAD SWAP4 POP PUSH1 DUP8 ADD CALLDATALOAD PUSH1 DUP2 AND DUP2 EQ PUSH2 JUMPI DUP3 DUP4 REVERT JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP3 SWAP6 PUSH1 DUP2 ADD CALLDATALOAD SWAP5 PUSH1 SWAP1 SWAP2 ADD CALLDATALOAD SWAP4 POP SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD PUSH4 DUP2 AND DUP2 EQ PUSH2 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP5 PUSH1 DUP6 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 SHL DUP2 MSTORE PUSH1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP4 DUP5 AND DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND PUSH1 DUP5 ADD MSTORE PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP4 ADD MSTORE PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 SWAP3 SWAP1 SWAP3 AND PUSH1 DUP5 ADD MSTORE PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 JUMPI DUP4 PUSH1 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 ADD PUSH1 NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH7 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH4 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH4 SWAP3 SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT UNKNOWN_0xfe TIMESTAMP UNKNOWN_0x4e MSTORE8 SELFBALANCE GASPRICE GASPRICE UNKNOWN_0x5f PUSH14 SHA3 PUSH2 PUSH22 PUSH15 PUSH4 SHA3 CODECOPY CALLDATASIZE SHA3 PUSH3 TIMESTAMP UNKNOWN_0x4e MSTORE8 SELFBALANCE GASPRICE GASPRICE UNKNOWN_0x5f PUSH14 SHA3 PUSH2 PUSH22 PUSH15 PUSH15 PUSH6 PUSH13 PUSH15 PUSH7 PUSH15 PUSH6 PUSH24 PUSH20 PUSH6 TIMESTAMP UNKNOWN_0x4e MSTORE8 SELFBALANCE GASPRICE GASPRICE UNKNOWN_0x5f PUSH24 PUSH14 SHA3 PUSH3 TIMESTAMP UNKNOWN_0x4e MSTORE8 SELFBALANCE GASPRICE GASPRICE UNKNOWN_0x5f PUSH14 PUSH2 PUSH22 PUSH16 PUSH5 PUSH3 LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 UNKNOWN_0xef UNKNOWN_0xbc UNKNOWN_0xf UNKNOWN_0xaa DUP15 UNKNOWN_0x4e UNKNOWN_0xc4 UNKNOWN_0xb9 ADDRESS UNKNOWN_0xc2 SGT PUSH9 DUP15 SUB UNKNOWN_0x28 UNKNOWN_0xd5 SWAP9 UNKNOWN_0xd9 UNKNOWN_0x5e UNKNOWN_0x4c UNKNOWN_0xfb UNKNOWN_0xae UNKNOWN_0x26 PUSH5 STOP MOD UNKNOWN_0xc STOP CALLER",
  "opcode_entropy": 4.821154498354668,
  "opcode_count": 5513,
  "unique_opcodes": 112,
  "byte_entropy": 6.1361060238641505,
  "byte_0x": 0.00010831889081455805,
  "byte_60": 0.12055892547660312,
  "byte_80": 0.025021663778162912,
  "byte_40": 0.018089254766031196,
  "byte_52": 0.031087521663778164,
  "byte_34": 0.0005415944540727903,
  "byte_15": 0.00779896013864818,
  "byte_61": 0.04928509532062392,
  "byte_00": 0.02123050259965338,
  "byte_10": 0.0034662045060658577,
  "byte_57": 0.012456672443674177,
  "byte_fd": 0.004224436741767764,
  "byte_5b": 0.03195407279029463,
  "byte_50": 0.019064124783362217,
  "byte_04": 0.008665511265164644,
  "byte_36": 0.0028162911611785096,
  "byte_01": 0.05296793760831889,
  "byte_da": 0.0011915077989601386,
  "byte_35": 0.001841421143847487,
  "byte_e0": 0.0015164644714038128,
  "byte_1c": 0.0027079722703639516,
  "byte_63": 0.01061525129982669,
  "byte_83": 0.010506932409012132,
  "byte_6a": 0.0006499133448873484,
  "byte_45": 0.0008665511265164644,
  "byte_11": 0.0027079722703639516,
  "byte_b4": 0.0009748700173310225,
  "byte_b5": 0.0008665511265164644,
  "byte_ea": 0.0004332755632582322,
  "byte_a2": 0.0006499133448873484,
  "byte_e4": 0.0006499133448873484,
  "byte_27": 0.0005415944540727903,
  "byte_32": 0.0004332755632582322,
  "byte_71": 0.0007582322357019064,
  "byte_14": 0.006932409012131715,
  "byte_03": 0.020472270363951474,
  "byte_ba": 0.0003249566724436742,
  "byte_e7": 0.0007582322357019064,
  "byte_a3": 0.0006499133448873484,
  "byte_24": 0.0002166377816291161,
  "byte_dc": 0.0003249566724436742,
  "byte_cd": 0.0030329289428076256,
  "byte_f1": 0.0007582322357019064,
  "byte_12": 0.0030329289428076256,
  "byte_7e": 0.0007582322357019064,
  "byte_d8": 0.0004332755632582322,
  "byte_d5": 0.0008665511265164644,
  "byte_f8": 0.0004332755632582322,
  "byte_51": 0.01115684575389948,
  "byte_a4": 0.0002166377816291161,
  "byte_f6": 0.0002166377816291161,
  "byte_56": 0.02458838821490468,
  "byte_79": 0.0011915077989601386,
  "byte_c3": 0.0006499133448873484,
  "byte_a5": 0.0004332755632582322,
  "byte_20": 0.029246100519930675,
  "byte_8c": 0.0030329289428076256,
  "byte_c8": 0.0010831889081455806,
  "byte_e8": 0.0007582322357019064,
  "byte_84": 0.007474003466204506,
  "byte_89": 0.0006499133448873484,
  "byte_9f": 0.0002166377816291161,
  "byte_dd": 0.0011915077989601386,
  "byte_62": 0.003682842287694974,
  "byte_ed": 0.0003249566724436742,
  "byte_3e": 0.0007582322357019064,
  "byte_a7": 0.0010831889081455806,
  "byte_95": 0.0028162911611785096,
  "byte_9b": 0.0011915077989601386,
  "byte_41": 0.0003249566724436742,
  "byte_de": 0.0008665511265164644,
  "byte_43": 0.0007582322357019064,
  "byte_a0": 0.007690641247833622,
  "byte_59": 0.0014081455805892548,
  "byte_66": 0.0033578856152512997,
  "byte_31": 0.0010831889081455806,
  "byte_4b": 0.0002166377816291161,
  "byte_a9": 0.0004332755632582322,
  "byte_05": 0.0015164644714038128,
  "byte_9c": 0.0006499133448873484,
  "byte_bb": 0.0002166377816291161,
  "byte_5e": 0.0012998266897746968,
  "byte_ac": 0.0003249566724436742,
  "byte_13": 0.0008665511265164644,
  "byte_2c": 0.0005415944540727903,
  "byte_90": 0.038778162911611784,
  "byte_7a": 0.0006499133448873484,
  "byte_fe": 0.0006499133448873484,
  "byte_28": 0.0008665511265164644,
  "byte_93": 0.004766031195840554,
  "byte_08": 0.0017331022530329288,
  "byte_6c": 0.0025996533795493936,
  "byte_3b": 0.0010831889081455806,
  "byte_4f": 0.0006499133448873484,
  "byte_bc": 0.0004332755632582322,
  "byte_7b": 0.0009748700173310225,
  "byte_73": 0.006065857885615251,
  "byte_7c": 0.0004332755632582322,
  "byte_6f": 0.006390814558058925,
  "byte_cf": 0.0004332755632582322,
  "byte_ff": 0.017114384748700175,
  "byte_02": 0.006499133448873483,
  "byte_c7": 0.0003249566724436742,
  "byte_70": 0.0016247833622183708,
  "byte_82": 0.015814558058925475,
  "byte_78": 0.0006499133448873484,
  "byte_2d": 0.0004332755632582322,
  "byte_e1": 0.0010831889081455806,
  "byte_fa": 0.0004332755632582322,
  "byte_ce": 0.0006499133448873484,
  "byte_be": 0.0003249566724436742,
  "byte_0d": 0.0010831889081455806,
  "byte_77": 0.0009748700173310225,
  "byte_58": 0.0008665511265164644,
  "byte_1e": 0.0017331022530329288,
  "byte_8a": 0.0003249566724436742,
  "byte_5c": 0.0005415944540727903,
  "byte_19": 0.005199306759098787,
  "byte_aa": 0.0006499133448873484,
  "byte_6e": 0.00725736568457539,
  "byte_0c": 0.0016247833622183708,
  "byte_17": 0.0030329289428076256,
  "byte_bf": 0.0002166377816291161,
  "byte_6b": 0.0017331022530329288,
  "byte_b8": 0.0008665511265164644,
  "byte_23": 0.0016247833622183708,
  "byte_72": 0.006174176776429809,
  "byte_47": 0.0034662045060658577,
  "byte_2a": 0.00010831889081455805,
  "byte_d0": 0.0006499133448873484,
  "byte_5a": 0.002166377816291161,
  "byte_3c": 0.0002166377816291161,
  "byte_e5": 0.0031412478336221837,
  "byte_67": 0.0016247833622183708,
  "byte_06": 0.002383015597920277,
  "byte_df": 0.0003249566724436742,
  "byte_09": 0.0012998266897746968,
  "byte_b3": 0.0007582322357019064,
  "byte_18": 0.001841421143847487,
  "byte_16": 0.021447140381282495,
  "byte_1d": 0.0027079722703639516,
  "byte_f4": 0.0009748700173310225,
  "byte_91": 0.016031195840554593,
  "byte_db": 0.0010831889081455806,
  "byte_f3": 0.0003249566724436742,
  "byte_0b": 0.0009748700173310225,
  "byte_1b": 0.024480069324090123,
  "byte_25": 0.002274696707105719,
  "byte_21": 0.001841421143847487,
  "byte_3a": 0.00779896013864818,
  "byte_55": 0.001841421143847487,
  "byte_74": 0.007474003466204506,
  "byte_85": 0.005090987868284229,
  "byte_9d": 0.0011915077989601386,
  "byte_98": 0.0009748700173310225,
  "byte_bd": 0.0004332755632582322,
  "byte_07": 0.005199306759098787,
  "byte_2f": 0.0006499133448873484,
  "byte_c1": 0.00010831889081455805,
  "byte_f5": 0.0005415944540727903,
  "byte_94": 0.0034662045060658577,
  "byte_0a": 0.0016247833622183708,
  "byte_87": 0.0027079722703639516,
  "byte_9a": 0.0002166377816291161,
  "byte_0f": 0.0010831889081455806,
  "byte_75": 0.0027079722703639516,
  "byte_e3": 0.0002166377816291161,
  "byte_3d": 0.002058058925476603,
  "byte_92": 0.007907279029462738,
  "byte_d2": 0.0003249566724436742,
  "byte_0e": 0.0016247833622183708,
  "byte_81": 0.024696707105719237,
  "byte_6d": 0.0032495667244367417,
  "byte_42": 0.004116117850953206,
  "byte_4e": 0.003574523396880416,
  "byte_53": 0.004007798960138648,
  "byte_76": 0.0015164644714038128,
  "byte_65": 0.009857019064124783,
  "byte_39": 0.0017331022530329288,
  "byte_44": 0.0005415944540727903,
  "byte_33": 0.0015164644714038128,
  "byte_54": 0.007690641247833622,
  "byte_86": 0.001841421143847487,
  "byte_7f": 0.0033578856152512997,
  "byte_eb": 0.0003249566724436742,
  "byte_ec": 0.0003249566724436742,
  "byte_7d": 0.0007582322357019064,
  "byte_d1": 0.0015164644714038128,
  "byte_c0": 0.0004332755632582322,
  "byte_f7": 0.0011915077989601386,
  "byte_b2": 0.0007582322357019064,
  "byte_29": 0.0004332755632582322,
  "byte_b9": 0.0004332755632582322,
  "byte_d3": 0.0002166377816291161,
  "byte_ad": 0.0007582322357019064,
  "byte_68": 0.0009748700173310225,
  "byte_a8": 0.0007582322357019064,
  "byte_b7": 0.0003249566724436742,
  "byte_64": 0.0032495667244367417,
  "byte_26": 0.0008665511265164644,
  "byte_88": 0.002058058925476603,
  "byte_a6": 0.0002166377816291161,
  "byte_22": 0.0011915077989601386,
  "byte_ee": 0.0002166377816291161,
  "byte_46": 0.0027079722703639516,
  "byte_48": 0.0004332755632582322,
  "byte_4a": 0.0003249566724436742,
  "byte_ef": 0.0005415944540727903,
  "byte_5d": 0.0007582322357019064,
  "byte_1f": 0.0017331022530329288,
  "byte_d9": 0.0003249566724436742,
  "byte_3f": 0.00010831889081455805,
  "byte_1a": 0.0017331022530329288,
  "byte_b6": 0.0004332755632582322,
  "byte_8e": 0.0006499133448873484,
  "byte_8b": 0.0005415944540727903,
  "byte_30": 0.0004332755632582322,
  "byte_4c": 0.0005415944540727903,
  "byte_69": 0.00444107452339688,
  "byte_ca": 0.0002166377816291161,
  "byte_c9": 0.00010831889081455805,
  "byte_c4": 0.0004332755632582322,
  "byte_a1": 0.0003249566724436742,
  "byte_f2": 0.0003249566724436742,
  "byte_e6": 0.0003249566724436742,
  "byte_97": 0.0004332755632582322,
  "byte_96": 0.0003249566724436742,
  "byte_cc": 0.00010831889081455805,
  "byte_99": 0.0003249566724436742,
  "byte_49": 0.0003249566724436742,
  "byte_2e": 0.0004332755632582322,
  "byte_f0": 0.0005415944540727903,
  "byte_8f": 0.0002166377816291161,
  "byte_f9": 0.0002166377816291161,
  "byte_b1": 0.00010831889081455805,
  "byte_2b": 0.0003249566724436742,
  "byte_e2": 0.0002166377816291161,
  "byte_c2": 0.0004332755632582322,
  "byte_b0": 0.0003249566724436742,
  "byte_fc": 0.0003249566724436742,
  "byte_37": 0.0002166377816291161,
  "byte_8d": 0.0003249566724436742,
  "byte_4d": 0.0003249566724436742,
  "byte_c6": 0.0002166377816291161,
  "byte_c5": 0.0002166377816291161,
  "byte_38": 0.00010831889081455805,
  "byte_ae": 0.0002166377816291161,
  "byte_5f": 0.0008665511265164644,
  "byte_ab": 0.00010831889081455805,
  "byte_fb": 0.00010831889081455805,
  "num_nodes": 418,
  "num_edges": 146,
  "avg_degree": 0.6985645933014354,
  "density": 0.0008376074260209058,
  "connected_components": 294,
  "avg_clustering": 0.0,
  "timeline_sequence": [],
  "sourcecode": "pragma solidity ^0.6.12;\npragma experimental ABIEncoderV2;\n\nabstract contract Token {\n    \n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool);\n\n    function balanceOf(address account) external virtual view returns (uint);\n    \n}\n\ncontract BNSG {\n    /// @notice EIP-20 token name for this token\n    string public constant name = \"BNS Governance\";\n\n    /// @notice EIP-20 token symbol for this token\n    string public constant symbol = \"BNSG\";\n\n    address public bnsdAdd;\n    address public bnsAdd;\n    address public admin;\n\n    uint96 public bnsToBNSG; // how many satoshi of BNS makes one BNSG\n    uint96 public bnsdToBNSG; // how many satoshi of BNSD makes one BNSG\n\n    // Formula to calculate rates above, Ex - BNS rate - 0.06$, BNSG rate - 1$\n    // bnsToBNSG = (BNSG rate in USD) * (10 ** (bnsDecimals))/(BNS rate in USD) = (1e8/ 0.06) = 1666666666\n\n    /// @notice EIP-20 token decimals for this token\n    uint8 public constant decimals = 18;\n\n    /// @notice Total number of tokens in circulation\n    uint96 public constant maxTotalSupply = 10000000e18; // 10 million BNSG\n\n    uint96 public totalSupply; // Starts with 0\n\n    /// @notice Allowance amounts on behalf of others\n    mapping (address => mapping (address => uint96)) internal allowances;\n\n    /// @notice Official record of token balances for each account\n    mapping (address => uint96) internal balances;\n\n    /// @notice A record of each accounts delegate\n    mapping (address => address) public delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint96 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping (address => uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice A record of states for signing / validating signatures\n    mapping (address => uint) public nonces;\n\n    bool public rateSet;\n\n    /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(address indexed delegate, uint previousBalance, uint newBalance);\n\n    /// @notice The standard EIP-20 transfer event\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    /// @notice The standard EIP-20 approval event\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n\n    constructor() public {\n        admin = msg.sender;\n        _mint(admin, 805712895369472282718529); // Amount of token minted in version 1, will be airdropped to users\n    }\n\n    modifier _adminOnly() {\n        require(msg.sender == admin);\n        _;\n    }\n\n\n    /**\n     * @notice Add bns and bnsd addresses\n     */\n    function setAddresses(address _bns, address _bnsd) external _adminOnly returns (bool) {\n        bnsAdd = _bns;\n        bnsdAdd = _bnsd;\n        return true;\n    }\n\n    /**\n     * @notice Add rates for bns to bnsg and bnsd to bnsg\n     */\n    function setTokenRates(uint96 _bnsRate, uint96 _bnsdRate) external _adminOnly returns (bool) {\n        bnsToBNSG = _bnsRate;\n        bnsdToBNSG = _bnsdRate;\n        if(!rateSet){\n            rateSet = true;\n        }\n        return true;\n    }\n\n    /**\n     * @notice Mint `BNSG` by buring BNS token from msg.sender based on current rates on contract\n     * @param amountToMint The number of BNSG tokens to be minted \n     * @return Whether or not the minting succeeded\n     */\n    function mintBNSGWithBNS(uint96 amountToMint) external returns (bool) {\n        require(rateSet, \"BNSG::mint: rate not yet set\");\n        require(amountToMint >= 1e18, \"BNSG::mint: min mint amount 1\");\n        uint96 _bnsNeeded = mul96(div96(amountToMint, 1e18, \"BNSG::mint: div failed\"),bnsToBNSG, \"BNSG::mint: mul failed\");\n        require(Token(bnsAdd).balanceOf(msg.sender) >= _bnsNeeded, \"BNSG::mint: insufficient BNS\");\n        require(Token(bnsAdd).transferFrom(msg.sender, address(1), _bnsNeeded), \"BNSG::mint: burn BNS failed\");\n        _mint(msg.sender, amountToMint);\n        _moveDelegates(delegates[address(0)], delegates[msg.sender], amountToMint);\n        return true;\n    }\n\n    /**\n     * @notice Mint `BNSG` by buring BNSD token from msg.sender based on current rates on contract\n     * @param amountToMint The number of BNSG tokens to be minted \n     * @return Whether or not the minting succeeded\n     */\n    function mintBNSGWithBNSD(uint96 amountToMint) external returns (bool) {\n        require(rateSet, \"BNSG::mint: rate not yet set\");\n        require(amountToMint >= 1e18, \"BNSG::mint: min mint amount 1\");\n        uint96 _bnsdNeeded = mul96(div96(amountToMint, 1e18, \"BNSG::mint: div failed\"),bnsdToBNSG, \"BNSG::mint: mul failed\");\n        require(Token(bnsdAdd).balanceOf(msg.sender) >= _bnsdNeeded, \"BNSG::mint: insufficient BNSD\");\n        require(Token(bnsdAdd).transferFrom(msg.sender, address(1), _bnsdNeeded), \"BNSG::mint: burn BNSD failed\");\n        _mint(msg.sender, amountToMint);\n        _moveDelegates(delegates[address(0)], delegates[msg.sender], amountToMint);\n        return true;\n    }\n\n\n    function _mint(address account, uint96 amount) internal virtual {\n        require(account != address(0), \"BNSG: mint to the zero address\");\n        totalSupply =  add96(totalSupply, amount, \"BNSG: mint amount overflow\");\n        require(totalSupply <= maxTotalSupply, \"BNSG: crosses total supply possible\");\n        balances[account] = add96(balances[account], amount, \"BNSG::_mint: transfer amount overflows\");\n        emit Transfer(address(0), account, amount);\n    }\n\n\n    /**\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n     * @param account The address of the account holding the funds\n     * @param spender The address of the account spending the funds\n     * @return The number of tokens approved\n     */\n    function allowance(address account, address spender) external view returns (uint) {\n        return allowances[account][spender];\n    }\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n     * @return Whether or not the approval succeeded\n     */\n    function approve(address spender, uint rawAmount) external returns (bool) {\n        uint96 amount;\n        if (rawAmount == uint(-1)) {\n            amount = uint96(-1);\n        } else {\n            amount = safe96(rawAmount, \"BNSG::approve: amount exceeds 96 bits\");\n        }\n\n        allowances[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice Get the number of tokens held by the `account`\n     * @param account The address of the account to get the balance of\n     * @return The number of tokens held\n     */\n    function balanceOf(address account) external view returns (uint) {\n        return balances[account];\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transfer(address dst, uint rawAmount) external returns (bool) {\n        uint96 amount = safe96(rawAmount, \"BNSG::transfer: amount exceeds 96 bits\");\n        _transferTokens(msg.sender, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferFrom(address src, address dst, uint rawAmount) external returns (bool) {\n        address spender = msg.sender;\n        uint96 spenderAllowance = allowances[src][spender];\n        uint96 amount = safe96(rawAmount, \"BNSG::approve: amount exceeds 96 bits\");\n\n        if (spender != src && spenderAllowance != uint96(-1)) {\n            uint96 newAllowance = sub96(spenderAllowance, amount, \"BNSG::transferFrom: transfer amount exceeds spender allowance\");\n            allowances[src][spender] = newAllowance;\n\n            emit Approval(src, spender, newAllowance);\n        }\n\n        _transferTokens(src, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) public {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(address delegatee, uint nonce, uint expiry, uint8 v, bytes32 r, bytes32 s) public {\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"BNSG::delegateBySig: invalid signature\");\n        require(nonce == nonces[signatory]++, \"BNSG::delegateBySig: invalid nonce\");\n        require(now <= expiry, \"BNSG::delegateBySig: signature expired\");\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view returns (uint96) {\n        uint32 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint blockNumber) public view returns (uint96) {\n        require(blockNumber < block.number, \"BNSG::getPriorVotes: not yet determined\");\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    function _delegate(address delegator, address delegatee) internal {\n        address currentDelegate = delegates[delegator];\n        uint96 delegatorBalance = balances[delegator];\n        delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _transferTokens(address src, address dst, uint96 amount) internal {\n        require(src != address(0), \"BNSG::_transferTokens: cannot transfer from the zero address\");\n        require(dst != address(0), \"BNSG::_transferTokens: cannot transfer to the zero address\");\n\n        balances[src] = sub96(balances[src], amount, \"BNSG::_transferTokens: transfer amount exceeds balance\");\n        balances[dst] = add96(balances[dst], amount, \"BNSG::_transferTokens: transfer amount overflows\");\n        emit Transfer(src, dst, amount);\n\n        _moveDelegates(delegates[src], delegates[dst], amount);\n    }\n\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint96 srcRepNew = sub96(srcRepOld, amount, \"BNSG::_moveVotes: vote amount underflows\");\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint96 dstRepNew = add96(dstRepOld, amount, \"BNSG::_moveVotes: vote amount overflows\");\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\n      uint32 blockNumber = safe32(block.number, \"BNSG::_writeCheckpoint: block number exceeds 32 bits\");\n\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n      } else {\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n          numCheckpoints[delegatee] = nCheckpoints + 1;\n      }\n\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint n, string memory errorMessage) internal pure returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function safe96(uint n, string memory errorMessage) internal pure returns (uint96) {\n        require(n < 2**96, errorMessage);\n        return uint96(n);\n    }\n\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n        uint96 c = a + b;\n        require(c >= a, errorMessage);\n        return c;\n    }\n\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    function div96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n        require(b != 0, errorMessage);\n        uint96 c = a / b;\n        return c;\n    }\n\n    function mul96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n        if (a == 0) {\n            return 0;\n        }\n        uint96 c = a * b;\n        require(c / a == b, errorMessage);\n        return c;\n    }\n\n    function getChainId() internal pure returns (uint) {\n        uint256 chainId;\n        assembly { chainId := chainid() }\n        return chainId;\n    }\n}"
}