{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH3 PUSH8 PUSH1 NOT PUSH3 JUMP JUMPDEST PUSH3 SWAP1 PUSH1 NOT PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH3 PUSH1 SHL NOT AND SWAP1 SSTORE PUSH3 PUSH1 PUSH3 PUSH8 PUSH1 PUSH3 PUSH1 SWAP1 DUP2 SHL PUSH3 OR SWAP1 SHR JUMP JUMPDEST PUSH3 PUSH1 SHL PUSH3 OR SWAP1 SWAP2 SWAP1 PUSH1 SHR JUMP JUMPDEST PUSH1 SSTORE PUSH3 PUSH1 PUSH3 PUSH1 PUSH8 PUSH3 PUSH1 SHL PUSH3 OR SWAP1 SWAP2 SWAP1 PUSH1 SHR JUMP JUMPDEST PUSH1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND CALLER SWAP1 DUP2 OR DUP3 SSTORE PUSH1 MLOAD SWAP1 SWAP2 DUP3 SWAP2 PUSH32 SWAP1 DUP3 SWAP1 LOG3 POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 SLOAD PUSH1 SWAP2 DUP3 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP3 SHA3 SSTORE PUSH1 SWAP1 PUSH1 SWAP1 PUSH3 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 SWAP2 DUP3 ADD PUSH1 SWAP1 DUP2 SHA3 DUP1 SLOAD SWAP6 ISZERO ISZERO PUSH1 NOT SWAP7 DUP8 AND OR SWAP1 SSTORE ADDRESS DUP2 MSTORE PUSH1 SWAP4 DUP5 SWAP1 MSTORE DUP3 DUP2 SHA3 DUP1 SLOAD DUP7 AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 SLOAD SWAP1 SWAP3 AND DUP2 MSTORE SWAP2 SWAP1 SWAP2 SHA3 DUP1 SLOAD SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE PUSH1 SSTORE PUSH3 CALLER SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 PUSH8 PUSH1 MLOAD PUSH3 SWAP2 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH3 JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST PUSH1 PUSH3 DUP4 DUP6 PUSH3 JUMP JUMPDEST SWAP1 POP DUP3 PUSH3 DUP6 DUP4 PUSH3 JUMP JUMPDEST EQ PUSH3 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH3 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH1 DUP2 DUP4 PUSH3 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST POP PUSH1 PUSH3 DUP5 DUP7 PUSH3 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH3 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH3 JUMPI PUSH1 PUSH1 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 ADD PUSH1 NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 LT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH2 DUP1 PUSH3 PUSH1 CODECOPY PUSH1 RETURN UNKNOWN_0xfe PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 JUMPI STOP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH8 JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH2 DUP5 CALLER PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 PUSH1 SHL SUB DUP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH1 PUSH1 SHL MUL PUSH1 PUSH1 SHL NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER PUSH1 PUSH1 PUSH1 SHL SUB AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SELFBALANCE PUSH2 DUP2 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 SWAP1 DUP4 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH8 PUSH1 DUP2 SWAP1 SSTORE PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER PUSH1 PUSH1 PUSH1 SHL SUB AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 ADDRESS PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH20 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH2 ADDRESS DUP3 PUSH8 PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 ADDRESS DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT PUSH1 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 DUP3 ADD MSTORE SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND OR SWAP1 SSTORE PUSH1 SLOAD AND PUSH4 SELFBALANCE ADDRESS PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP9 SWAP1 SHL PUSH1 PUSH1 PUSH1 SHL SUB NOT AND DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP6 DUP7 AND PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE TIMESTAMP PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP PUSH1 DUP1 SLOAD PUSH4 PUSH1 SHL NOT DUP2 AND PUSH4 PUSH1 SHL OR SWAP1 SWAP2 SSTORE PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 DUP3 ADD MSTORE PUSH1 NOT PUSH1 DUP3 ADD MSTORE SWAP2 AND SWAP2 POP PUSH4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 DUP5 DUP5 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE DUP1 PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 DUP6 DUP4 PUSH2 JUMP JUMPDEST EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH9 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SSTORE PUSH1 SLOAD PUSH1 SSTORE PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 PUSH2 DUP5 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH2 ADDRESS PUSH2 JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 GT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST SELFBALANCE DUP1 ISZERO PUSH2 JUMPI PUSH2 SELFBALANCE PUSH2 JUMP JUMPDEST POP JUMPDEST POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 SSTORE JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP5 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 DUP5 DUP7 PUSH2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP3 ISZERO PUSH2 MUL SWAP1 DUP4 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH10 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP4 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 SHL NOT AND PUSH1 PUSH1 SHL OR SWAP1 SSTORE PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE PUSH1 DUP3 ADD DUP4 MSTORE PUSH1 SWAP3 PUSH1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP ADDRESS DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP4 AND SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 SLOAD PUSH2 SWAP2 ADDRESS SWAP2 AND DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH1 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 SHL NOT AND SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 DUP5 DUP7 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH2 DUP8 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP16 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP6 SWAP12 POP SWAP4 SWAP10 POP SWAP2 SWAP8 POP SWAP6 POP SWAP4 POP SWAP2 POP PUSH2 SWAP1 DUP8 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP12 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP11 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP10 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP4 PUSH2 JUMP JUMPDEST DUP8 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP10 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 DUP6 PUSH1 MLOAD PUSH2 SWAP2 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 PUSH8 PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 JUMPI POP POP PUSH1 SLOAD SWAP3 PUSH8 SWAP3 POP SWAP1 POP JUMP JUMPDEST SWAP1 SWAP4 SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 DUP11 PUSH1 SLOAD PUSH1 SLOAD PUSH2 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP1 PUSH1 PUSH2 DUP15 DUP8 DUP8 DUP8 PUSH2 JUMP JUMPDEST SWAP2 SWAP15 POP SWAP13 POP SWAP11 POP SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP2 SWAP5 POP POP POP POP POP SWAP2 SWAP4 SWAP6 POP SWAP2 SWAP4 SWAP6 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP4 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 PUSH2 PUSH1 PUSH2 DUP10 DUP10 PUSH2 JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH1 PUSH2 DUP11 DUP10 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP3 PUSH2 DUP12 DUP7 PUSH2 JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST SWAP10 SWAP3 SWAP9 POP SWAP1 SWAP7 POP SWAP1 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 PUSH2 DUP9 DUP7 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP9 DUP8 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP9 DUP9 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP3 PUSH2 DUP7 DUP7 PUSH2 JUMP JUMPDEST SWAP4 SWAP12 SWAP4 SWAP11 POP SWAP2 SWAP9 POP SWAP2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 DUP5 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 DUP4 ADD SLT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST DUP1 PUSH1 SHL PUSH1 MLOAD PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD DUP2 DUP2 LT DUP6 DUP3 GT OR ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MSTORE DUP3 DUP2 MSTORE DUP6 DUP2 ADD SWAP4 POP DUP5 DUP7 ADD DUP3 DUP7 ADD DUP8 ADD DUP11 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP6 POP JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP6 MSTORE PUSH1 SWAP6 SWAP1 SWAP6 ADD SWAP5 SWAP4 DUP7 ADD SWAP4 DUP7 ADD PUSH2 JUMP JUMPDEST POP SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 DUP5 ADD MLOAD SWAP2 POP PUSH1 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 ADD PUSH1 NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 PUSH1 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP5 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP PUSH1 PUSH1 PUSH1 SHL SUB SWAP7 SWAP1 SWAP7 AND PUSH1 DUP6 ADD MSTORE POP POP POP PUSH1 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 NOT DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 PUSH1 NOT DUP3 EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT UNKNOWN_0xfe GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE SHA3 PUSH21 PUSH20 UNKNOWN_0xa9 PUSH23 SIGNEXTEND CALLVALUE DUP16 UNKNOWN_0xfe PUSH7 NUMBER STOP ADDMOD SMOD STOP CALLER",
  "opcode_entropy": 4.837312377112703,
  "opcode_count": 4841,
  "unique_opcodes": 94,
  "byte_entropy": 6.123312382201806,
  "byte_0x": 0.00012933264355923435,
  "byte_60": 0.11497672012415934,
  "byte_80": 0.029746508018623902,
  "byte_40": 0.01396792550439731,
  "byte_52": 0.025737196068287636,
  "byte_62": 0.010475944128297983,
  "byte_00": 0.0429384376616658,
  "byte_1a": 0.0011639937920331091,
  "byte_67": 0.0024573202276254526,
  "byte_01": 0.04759441282979824,
  "byte_63": 0.00892395240558717,
  "byte_45": 0.0020693222969477496,
  "byte_78": 0.0020693222969477496,
  "byte_5d": 0.0014226590791515778,
  "byte_8a": 0.0019399896533885152,
  "byte_19": 0.0086652871184687,
  "byte_03": 0.016425245732022763,
  "byte_ba": 0.00038799793067770304,
  "byte_56": 0.02612519399896534,
  "byte_5b": 0.0380237972064149,
  "byte_28": 0.0007759958613554061,
  "byte_90": 0.026901189860320744,
  "byte_a0": 0.008535954474909468,
  "byte_08": 0.002198654940506984,
  "byte_55": 0.004397309881013968,
  "byte_0f": 0.004526642524573203,
  "byte_54": 0.008406621831350233,
  "byte_ff": 0.004397309881013968,
  "byte_a8": 0.0009053285049146404,
  "byte_1b": 0.018753233316088982,
  "byte_16": 0.016295913088463527,
  "byte_75": 0.0016813243662700465,
  "byte_64": 0.005431971029487843,
  "byte_61": 0.05419037765131919,
  "byte_02": 0.007242628039317123,
  "byte_f5": 0.0009053285049146404,
  "byte_20": 0.01991722710812209,
  "byte_81": 0.022762545266425245,
  "byte_0a": 0.004526642524573203,
  "byte_2e": 0.0019399896533885152,
  "byte_17": 0.004397309881013968,
  "byte_1c": 0.0007759958613554061,
  "byte_89": 0.0010346611484738748,
  "byte_b4": 0.0014226590791515778,
  "byte_91": 0.0128039317123642,
  "byte_10": 0.0034919813760993274,
  "byte_a1": 0.0006466632177961717,
  "byte_11": 0.004397309881013968,
  "byte_34": 0.002586652871184687,
  "byte_15": 0.018365235385411276,
  "byte_b1": 0.00038799793067770304,
  "byte_57": 0.01784790481117434,
  "byte_fd": 0.00892395240558717,
  "byte_50": 0.034014485256078635,
  "byte_33": 0.002198654940506984,
  "byte_82": 0.01901189860320745,
  "byte_51": 0.011510605276771857,
  "byte_7f": 0.00297465080186239,
  "byte_8b": 0.0006466632177961717,
  "byte_e0": 0.0027159855147439213,
  "byte_07": 0.0012933264355923435,
  "byte_9c": 0.0010346611484738748,
  "byte_53": 0.0015519917227108122,
  "byte_59": 0.0005173305742369374,
  "byte_14": 0.006854630108639421,
  "byte_13": 0.002198654940506984,
  "byte_44": 0.0024573202276254526,
  "byte_cd": 0.0036213140196585617,
  "byte_1f": 0.002586652871184687,
  "byte_d0": 0.00038799793067770304,
  "byte_a4": 0.00038799793067770304,
  "byte_f2": 0.0007759958613554061,
  "byte_84": 0.006595964821520952,
  "byte_49": 0.00038799793067770304,
  "byte_97": 0.0007759958613554061,
  "byte_22": 0.0007759958613554061,
  "byte_a3": 0.0010346611484738748,
  "byte_da": 0.0002586652871184687,
  "byte_af": 0.0005173305742369374,
  "byte_e3": 0.00038799793067770304,
  "byte_18": 0.0028453181583031556,
  "byte_6f": 0.005561303673047077,
  "byte_6b": 0.0002586652871184687,
  "byte_0d": 0.002198654940506984,
  "byte_05": 0.0023279875840662182,
  "byte_83": 0.009958613554061045,
  "byte_93": 0.004267977237454734,
  "byte_95": 0.002198654940506984,
  "byte_96": 0.0011639937920331091,
  "byte_87": 0.0024573202276254526,
  "byte_30": 0.0023279875840662182,
  "byte_86": 0.00297465080186239,
  "byte_92": 0.006078634247284015,
  "byte_0c": 0.0011639937920331091,
  "byte_99": 0.0005173305742369374,
  "byte_dd": 0.0012933264355923435,
  "byte_ad": 0.0016813243662700465,
  "byte_e2": 0.0006466632177961717,
  "byte_c8": 0.0005173305742369374,
  "byte_9b": 0.0009053285049146404,
  "byte_69": 0.0031039834454216243,
  "byte_c2": 0.0005173305742369374,
  "byte_b0": 0.0006466632177961717,
  "byte_68": 0.0024573202276254526,
  "byte_fc": 0.0009053285049146404,
  "byte_37": 0.0005173305742369374,
  "byte_8d": 0.0007759958613554061,
  "byte_aa": 0.00038799793067770304,
  "byte_2b": 0.0005173305742369374,
  "byte_a7": 0.0006466632177961717,
  "byte_f1": 0.0009053285049146404,
  "byte_c4": 0.0006466632177961717,
  "byte_5a": 0.0016813243662700465,
  "byte_4d": 0.0010346611484738748,
  "byte_23": 0.0009053285049146404,
  "byte_b3": 0.0009053285049146404,
  "byte_ef": 0.0005173305742369374,
  "byte_e7": 0.0006466632177961717,
  "byte_06": 0.0020693222969477496,
  "byte_85": 0.004009311950336265,
  "byte_7e": 0.0002586652871184687,
  "byte_46": 0.0031039834454216243,
  "byte_e5": 0.0032333160889808587,
  "byte_04": 0.01189860320744956,
  "byte_21": 0.00038799793067770304,
  "byte_24": 0.0027159855147439213,
  "byte_66": 0.0028453181583031556,
  "byte_65": 0.007371960682876358,
  "byte_74": 0.005302638385928609,
  "byte_3a": 0.0019399896533885152,
  "byte_6d": 0.0018106570098292809,
  "byte_6c": 0.0027159855147439213,
  "byte_70": 0.0011639937920331091,
  "byte_6e": 0.0032333160889808587,
  "byte_76": 0.0011639937920331091,
  "byte_72": 0.004785307811691671,
  "byte_77": 0.0011639937920331091,
  "byte_f8": 0.00038799793067770304,
  "byte_73": 0.0038799793067770304,
  "byte_79": 0.0014226590791515778,
  "byte_7a": 0.0015519917227108122,
  "byte_d3": 0.00038799793067770304,
  "byte_f7": 0.0006466632177961717,
  "byte_94": 0.0015519917227108122,
  "byte_3e": 0.0012933264355923435,
  "byte_d1": 0.0005173305742369374,
  "byte_b5": 0.0005173305742369374,
  "byte_cc": 0.0005173305742369374,
  "byte_4e": 0.0009053285049146404,
  "byte_48": 0.0012933264355923435,
  "byte_7b": 0.0011639937920331091,
  "byte_71": 0.0010346611484738748,
  "byte_12": 0.0036213140196585617,
  "byte_26": 0.0002586652871184687,
  "byte_39": 0.0006466632177961717,
  "byte_f3": 0.0005173305742369374,
  "byte_fe": 0.0005173305742369374,
  "byte_36": 0.0014226590791515778,
  "byte_35": 0.0024573202276254526,
  "byte_a9": 0.00038799793067770304,
  "byte_bb": 0.0009053285049146404,
  "byte_e1": 0.0005173305742369374,
  "byte_c3": 0.00038799793067770304,
  "byte_c9": 0.0009053285049146404,
  "byte_f9": 0.0002586652871184687,
  "byte_d6": 0.00012933264355923435,
  "byte_ed": 0.00038799793067770304,
  "byte_4b": 0.00012933264355923435,
  "byte_3f": 0.0002586652871184687,
  "byte_a5": 0.0012933264355923435,
  "byte_cb": 0.0002586652871184687,
  "byte_8c": 0.0009053285049146404,
  "byte_d8": 0.0005173305742369374,
  "byte_41": 0.0006466632177961717,
  "byte_31": 0.0005173305742369374,
  "byte_3c": 0.00038799793067770304,
  "byte_dc": 0.00012933264355923435,
  "byte_cf": 0.0006466632177961717,
  "byte_32": 0.0018106570098292809,
  "byte_ea": 0.0009053285049146404,
  "byte_eb": 0.0005173305742369374,
  "byte_ec": 0.0009053285049146404,
  "byte_a6": 0.0002586652871184687,
  "byte_42": 0.0009053285049146404,
  "byte_de": 0.00012933264355923435,
  "byte_09": 0.0019399896533885152,
  "byte_5e": 0.00038799793067770304,
  "byte_b8": 0.0007759958613554061,
  "byte_25": 0.0007759958613554061,
  "byte_2a": 0.0005173305742369374,
  "byte_88": 0.0012933264355923435,
  "byte_ca": 0.00012933264355923435,
  "byte_db": 0.0005173305742369374,
  "byte_0b": 0.0018106570098292809,
  "byte_5c": 0.0006466632177961717,
  "byte_3d": 0.0031039834454216243,
  "byte_8f": 0.0012933264355923435,
  "byte_98": 0.0010346611484738748,
  "byte_c0": 0.00038799793067770304,
  "byte_9f": 0.00012933264355923435,
  "byte_ac": 0.00038799793067770304,
  "byte_9e": 0.00038799793067770304,
  "byte_f6": 0.0006466632177961717,
  "byte_3b": 0.0036213140196585617,
  "byte_47": 0.0009053285049146404,
  "byte_bc": 0.00038799793067770304,
  "byte_a2": 0.0005173305742369374,
  "byte_4f": 0.0007759958613554061,
  "byte_9a": 0.00038799793067770304,
  "byte_d7": 0.00038799793067770304,
  "byte_0e": 0.0019399896533885152,
  "byte_df": 0.0002586652871184687,
  "byte_2c": 0.00038799793067770304,
  "byte_c6": 0.00038799793067770304,
  "byte_fa": 0.00038799793067770304,
  "byte_43": 0.0012933264355923435,
  "byte_58": 0.0005173305742369374,
  "byte_f4": 0.00038799793067770304,
  "byte_f0": 0.00038799793067770304,
  "byte_b9": 0.00038799793067770304,
  "byte_7d": 0.0005173305742369374,
  "byte_1e": 0.00038799793067770304,
  "byte_b2": 0.00012933264355923435,
  "byte_29": 0.0002586652871184687,
  "byte_c7": 0.00012933264355923435,
  "byte_e8": 0.00012933264355923435,
  "byte_be": 0.00012933264355923435,
  "byte_5f": 0.0005173305742369374,
  "byte_ab": 0.0002586652871184687,
  "byte_1d": 0.00012933264355923435,
  "byte_6a": 0.0002586652871184687,
  "byte_fb": 0.00012933264355923435,
  "byte_8e": 0.00012933264355923435,
  "byte_e4": 0.00012933264355923435,
  "byte_38": 0.00012933264355923435,
  "byte_ee": 0.00012933264355923435,
  "byte_b7": 0.00012933264355923435,
  "byte_4c": 0.00012933264355923435,
  "byte_d9": 0.0002586652871184687,
  "byte_4a": 0.00012933264355923435,
  "byte_e9": 0.00012933264355923435,
  "num_nodes": 35,
  "num_edges": 36,
  "avg_degree": 2.057142857142857,
  "density": 0.030252100840336135,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 112,
  "event_nums": 249,
  "creation_block": 16095225,
  "creation_timestamp": 1669961243,
  "life_time": 5409046.0,
  "duration_seconds": 65467596.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 36,
  "num_buyers": 3,
  "num_sellers": 35,
  "num_creator_transfers": 36,
  "buy_amt": 2.331731071288897e+18,
  "sell_amt": 2.331731071288897e+18,
  "avg_value": 4.126957648298933e+16,
  "txn_per_block": 2.070605043735061e-05,
  "avg_gas_limit": 166226.6607142857,
  "std_gas_limit": 356548.6625985984,
  "avg_gas_used": 60123.99107142857,
  "std_gas_used": 310111.6420446864,
  "avg_gas_price": 5009819081.776786,
  "std_gas_price": 7424500408.432211,
  "ownershiptransferred_num": 2,
  "transfer_num": 2,
  "atinversebrah_num": 1,
  "opentrading_num": 1,
  "approve_num": 34,
  "removelimits_num": 1,
  "renounceownership_num": 1,
  "timeline_sequence": [
    [
      16095225,
      1669961243,
      0,
      61,
      0,
      1719718,
      11682061684,
      0,
      1,
      6781878,
      1719718,
      7035066
    ],
    [
      16095278,
      1669961879,
      1,
      34,
      0,
      68607,
      11584751379,
      0,
      1,
      4010305,
      63619,
      7035013
    ],
    [
      16095283,
      1669961939,
      2,
      38,
      2000000000000000000,
      31582,
      11458079700,
      0,
      1,
      3137664,
      21055,
      7035008
    ],
    [
      16095286,
      1669961975,
      3,
      79,
      0,
      2892910,
      11765615884,
      0,
      1,
      12350687,
      2833060,
      7035005
    ],
    [
      16095297,
      1669962107,
      855,
      19,
      0,
      146209,
      17000000000,
      0,
      1,
      1654820,
      46581,
      7034994
    ],
    [
      16095297,
      1669962107,
      1029,
      20,
      0,
      146209,
      17000000000,
      0,
      1,
      1701401,
      46581,
      7034994
    ],
    [
      16095300,
      1669962143,
      253,
      136,
      0,
      51239,
      12470589997,
      0,
      1,
      12839458,
      46581,
      7034991
    ],
    [
      16095306,
      1669962215,
      27,
      157,
      0,
      55897,
      12240435368,
      0,
      1,
      12511183,
      46581,
      7034985
    ],
    [
      16095307,
      1669962227,
      233,
      150,
      0,
      76808,
      14379103274,
      0,
      1,
      12668452,
      46581,
      7034984
    ],
    [
      16095312,
      1669962287,
      2040,
      6,
      0,
      55897,
      13114458878,
      0,
      1,
      585580,
      46581,
      7034979
    ],
    [
      16095313,
      1669962299,
      17,
      161,
      0,
      55897,
      11779540691,
      0,
      1,
      10454570,
      46581,
      7034978
    ],
    [
      16095313,
      1669962299,
      6,
      184,
      0,
      33386,
      11779540691,
      0,
      1,
      13358304,
      33386,
      7034978
    ],
    [
      16095313,
      1669962299,
      7,
      217,
      0,
      28140,
      11779540691,
      0,
      1,
      16035076,
      23340,
      7034978
    ],
    [
      16095320,
      1669962383,
      7263,
      207,
      0,
      55897,
      12912985154,
      0,
      1,
      23676077,
      46581,
      7034971
    ],
    [
      16095323,
      1669962419,
      8,
      67,
      0,
      55897,
      12992179386,
      0,
      1,
      5312402,
      46581,
      7034968
    ],
    [
      16095325,
      1669962443,
      1217,
      13,
      0,
      300000,
      20982977798,
      0,
      1,
      1862276,
      46581,
      7034966
    ],
    [
      16095325,
      1669962443,
      2629,
      42,
      0,
      73215,
      13982977798,
      0,
      1,
      4128898,
      46581,
      7034966
    ],
    [
      16095326,
      1669962455,
      2228,
      49,
      0,
      55897,
      12580210037,
      0,
      1,
      4162809,
      46581,
      7034965
    ],
    [
      16095328,
      1669962479,
      290,
      73,
      0,
      800000,
      11694975942,
      0,
      1,
      6652595,
      46581,
      7034963
    ],
    [
      16095329,
      1669962491,
      167,
      3,
      0,
      73864,
      16138286491,
      0,
      1,
      172151,
      46581,
      7034962
    ],
    [
      16095329,
      1669962491,
      24,
      33,
      0,
      800000,
      11138286491,
      0,
      1,
      1937790,
      46581,
      7034962
    ],
    [
      16095329,
      1669962491,
      33,
      34,
      0,
      800000,
      11138286491,
      0,
      1,
      1984371,
      46581,
      7034962
    ],
    [
      16095330,
      1669962503,
      477,
      86,
      0,
      55897,
      11792056235,
      0,
      1,
      5311023,
      46581,
      7034961
    ],
    [
      16095341,
      1669962635,
      39,
      19,
      0,
      74755,
      13889241206,
      0,
      1,
      1086923,
      46581,
      7034950
    ],
    [
      16095348,
      1669962719,
      158,
      24,
      0,
      51239,
      12000000000,
      0,
      1,
      3602207,
      46581,
      7034943
    ],
    [
      16095349,
      1669962731,
      914,
      22,
      0,
      1000000,
      13186791830,
      0,
      1,
      2794316,
      46581,
      7034942
    ],
    [
      16095349,
      1669962731,
      965,
      64,
      0,
      46581,
      12186791830,
      0,
      1,
      6004479,
      46581,
      7034942
    ],
    [
      16095349,
      1669962731,
      419,
      65,
      0,
      46581,
      12186791830,
      0,
      1,
      6051060,
      46581,
      7034942
    ],
    [
      16095352,
      1669962767,
      1732,
      81,
      0,
      46581,
      12720541075,
      0,
      1,
      6260032,
      46581,
      7034939
    ],
    [
      16095353,
      1669962779,
      522,
      84,
      0,
      55897,
      12223700592,
      0,
      1,
      8942337,
      46581,
      7034938
    ],
    [
      16095359,
      1669962851,
      954,
      5,
      0,
      71830,
      46338887126,
      0,
      1,
      537129,
      46581,
      7034932
    ],
    [
      16095359,
      1669962851,
      291,
      46,
      0,
      55897,
      12838887126,
      0,
      1,
      4251920,
      46581,
      7034932
    ],
    [
      16095370,
      1669962983,
      681,
      15,
      0,
      55897,
      12496924664,
      0,
      1,
      1131387,
      46581,
      7034921
    ],
    [
      16095377,
      1669963067,
      967,
      61,
      0,
      29481,
      11452252850,
      0,
      1,
      6613988,
      29481,
      7034914
    ],
    [
      16095398,
      1669963319,
      50,
      86,
      0,
      55897,
      11574038794,
      0,
      1,
      8384495,
      46581,
      7034893
    ],
    [
      16095400,
      1669963343,
      221,
      15,
      0,
      69385,
      12600000000,
      0,
      1,
      1872403,
      46257,
      7034891
    ],
    [
      16095440,
      1669963823,
      855,
      38,
      0,
      55897,
      11442454147,
      0,
      1,
      2493216,
      46581,
      7034851
    ],
    [
      16097488,
      1669988495,
      93,
      41,
      0,
      46581,
      14121328068,
      0,
      1,
      2344889,
      46581,
      7032803
    ],
    [
      16125445,
      1670326007,
      48,
      70,
      0,
      55897,
      16907573522,
      0,
      1,
      17335034,
      46581,
      7004846
    ],
    [
      16130598,
      1670388563,
      180,
      15,
      0,
      55897,
      13869461397,
      0,
      1,
      1501038,
      46581,
      6999693
    ],
    [
      21504271,
      1735428839,
      3421,
      27,
      0,
      253813,
      5677131042,
      0,
      1,
      4354001,
      200825,
      1626020
    ],
    [
      16095286,
      1669961975,
      0,
      0,
      2000000000000000000,
      291782,
      0,
      0,
      0,
      0,
      270629,
      0
    ],
    [
      16095320,
      1669962383,
      0,
      0,
      153838278904947551,
      173809,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095320,
      1669962383,
      0,
      0,
      153838278904947551,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095358,
      1669962839,
      0,
      0,
      85689940170052200,
      144359,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095358,
      1669962839,
      0,
      0,
      85689940170052200,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095359,
      1669962851,
      0,
      0,
      8811983807731894,
      149600,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095359,
      1669962851,
      0,
      0,
      8811983807731894,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095360,
      1669962863,
      0,
      0,
      1974409285333950,
      181685,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095360,
      1669962863,
      0,
      0,
      1974409285333950,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095371,
      1669962995,
      0,
      0,
      98653282971403,
      183745,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095371,
      1669962995,
      0,
      0,
      98653282971403,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095371,
      1669962995,
      0,
      0,
      4082709414718675,
      307286,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095371,
      1669962995,
      0,
      0,
      4082709414718675,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095372,
      1669963007,
      0,
      0,
      4080246985353638,
      149600,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095372,
      1669963007,
      0,
      0,
      4080246985353638,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095375,
      1669963043,
      0,
      0,
      6437626897576905,
      764205,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095375,
      1669963043,
      0,
      0,
      6437626897576905,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095375,
      1669963043,
      0,
      0,
      1074439246649986,
      764205,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095375,
      1669963043,
      0,
      0,
      1074439246649986,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095378,
      1669963079,
      0,
      0,
      809788742148201,
      181559,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095378,
      1669963079,
      0,
      0,
      809788742148201,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095380,
      1669963103,
      0,
      0,
      3587158398201801,
      137863,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095380,
      1669963103,
      0,
      0,
      3587158398201801,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095382,
      1669963127,
      0,
      0,
      893319051365555,
      259754,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095382,
      1669963127,
      0,
      0,
      893319051365555,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095383,
      1669963139,
      0,
      0,
      2401610869010391,
      230314,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095383,
      1669963139,
      0,
      0,
      2401610869010391,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095383,
      1669963139,
      0,
      0,
      3041275764504665,
      156280,
      0,
      1,
      0,
      0,
      55,
      0
    ],
    [
      16095383,
      1669963139,
      0,
      0,
      3041275764504665,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      16095387,
      1669963187,
      0,
      0,
      3041275764504665,
      181559,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095387,
      1669963187,
      0,
      0,
      3041275764504665,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095389,
      1669963211,
      0,
      0,
      3205678574161332,
      134105,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095389,
      1669963211,
      0,
      0,
      3205678574161332,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095404,
      1669963391,
      0,
      0,
      3643085542634208,
      117192,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095404,
      1669963391,
      0,
      0,
      3643085542634208,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095438,
      1669963799,
      0,
      0,
      4452207890811398,
      137862,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095438,
      1669963799,
      0,
      0,
      4452207890811398,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095447,
      1669963907,
      0,
      0,
      2428984165625704,
      149597,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095447,
      1669963907,
      0,
      0,
      2428984165625704,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095455,
      1669964003,
      0,
      0,
      1434652452006743,
      117194,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095455,
      1669964003,
      0,
      0,
      1434652452006743,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095458,
      1669964039,
      0,
      0,
      661212854886364,
      149600,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095458,
      1669964039,
      0,
      0,
      661212854886364,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095511,
      1669964675,
      0,
      0,
      887355454507223,
      236950,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095511,
      1669964675,
      0,
      0,
      887355454507223,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095520,
      1669964795,
      0,
      0,
      2237106461582958,
      235625,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095520,
      1669964795,
      0,
      0,
      2237106461582958,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095531,
      1669964927,
      0,
      0,
      640872032538028,
      149600,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095531,
      1669964927,
      0,
      0,
      640872032538028,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095552,
      1669965179,
      0,
      0,
      735399244630360,
      241591,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095552,
      1669965179,
      0,
      0,
      735399244630360,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095654,
      1669966415,
      0,
      0,
      2103981857558423,
      169884,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095654,
      1669966415,
      0,
      0,
      2103981857558423,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095721,
      1669967219,
      0,
      0,
      622076784813775,
      117194,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095721,
      1669967219,
      0,
      0,
      622076784813775,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095939,
      1669969835,
      0,
      0,
      1798950878265001,
      149600,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095939,
      1669969835,
      0,
      0,
      1798950878265001,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16095951,
      1669969979,
      0,
      0,
      1851623096588183,
      149600,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16095951,
      1669969979,
      0,
      0,
      1851623096588183,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16097030,
      1669982975,
      0,
      0,
      988764919188625,
      149600,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16097030,
      1669982975,
      0,
      0,
      988764919188625,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16097500,
      1669988639,
      0,
      0,
      412846499583303,
      232529,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16097500,
      1669988639,
      0,
      0,
      412846499583303,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16097932,
      1669993859,
      0,
      0,
      2270300006521366,
      733689,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16097932,
      1669993859,
      0,
      0,
      2270300006521366,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16125447,
      1670326031,
      0,
      0,
      2286110871803757,
      149600,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16125447,
      1670326031,
      0,
      0,
      2286110871803757,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16130600,
      1670388587,
      0,
      0,
      1888744149455661,
      149600,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16130600,
      1670388587,
      0,
      0,
      1888744149455661,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      21504271,
      1735428839,
      0,
      0,
      17318400966662551,
      47397,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      21504271,
      1735428839,
      0,
      0,
      17318400966662551,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "/**\n *\n*/\n\n/**\n\nE-Cat\n\nCAT ETH is the tradable and liquid token of ETH NETWORK, \ntransacting $CATETH will contribute to the protocol by filling the  treasury slowly, \nto fund investments into decentralised technologies.\n\nhttps://t.me/cat_eth\nhttps://cat-eth.com/\n\n*/\n\npragma solidity 0.8.7;\n\n// SPDX-License-Identifier: UNLICENSED \nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n\n}\n\ncontract Ownable is Context {\n    address private _owner;\n    address private _previousOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n}\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n}\n\ncontract ECAT is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private bots;\n    mapping (address => uint) private cooldown;\n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _tTotal = 100000000 * 10**9;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n\n    uint256 private _feeAddr1;\n    uint256 private _feeAddr2;\n    uint256 private _standardTax;\n    address payable private _feeAddrWallet;\n\n    string private constant _name = \"CATETH\";\n    string private constant _symbol = \"ECAT\";\n    uint8 private constant _decimals = 5;\n\n    IUniswapV2Router02 private uniswapV2Router;\n    address private uniswapV2Pair;\n    bool private tradingOpen;\n    bool private inSwap = false;\n    bool private swapEnabled = false;\n    bool private cooldownEnabled = false;\n    uint256 private _maxTxAmount = _tTotal.mul(2).div(100);\n    uint256 private _maxWalletSize = _tTotal.mul(2).div(100);\n    event MaxTxAmountUpdated(uint _maxTxAmount);\n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor () {\n        _feeAddrWallet = payable(_msgSender());\n        _rOwned[_msgSender()] = _rTotal;\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[_feeAddrWallet] = true;\n        _standardTax=5;\n\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public pure override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function setCooldownEnabled(bool onoff) external onlyOwner() {\n        cooldownEnabled = onoff;\n    }\n\n    function tokenFromReflection(uint256 rAmount) private view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount.div(currentRate);\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n\n\n        if (from != owner() && to != owner()) {\n            require(!bots[from] && !bots[to]);\n            _feeAddr1 = 0;\n            _feeAddr2 = _standardTax;\n            if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to] && cooldownEnabled) {\n                // Cooldown\n                require(amount <= _maxTxAmount, \"Exceeds the _maxTxAmount.\");\n                require(balanceOf(to) + amount <= _maxWalletSize, \"Exceeds the maxWalletSize.\");\n\n            }\n\n\n            uint256 contractTokenBalance = balanceOf(address(this));\n            if (!inSwap && from != uniswapV2Pair && swapEnabled && contractTokenBalance>0) {\n                swapTokensForEth(contractTokenBalance);\n                uint256 contractETHBalance = address(this).balance;\n                if(contractETHBalance > 0) {\n                    sendETHToFee(address(this).balance);\n                }\n            }\n        }else{\n          _feeAddr1 = 0;\n          _feeAddr2 = 0;\n        }\n\n        _tokenTransfer(from,to,amount);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function setStandardTax(uint256 newTax) external onlyOwner{\n      require(newTax<_standardTax);\n      _standardTax=newTax;\n    }\n\n    function removeLimits() external onlyOwner{\n        _maxTxAmount = _tTotal;\n        _maxWalletSize = _tTotal;\n    }\n\n    function sendETHToFee(uint256 amount) private {\n        _feeAddrWallet.transfer(amount);\n    }\n\n    function openTrading() external onlyOwner() {\n        require(!tradingOpen,\"trading is already open\");\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Router = _uniswapV2Router;\n        _approve(address(this), address(uniswapV2Router), _tTotal);\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        uniswapV2Router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner(),block.timestamp);\n        swapEnabled = true;\n        cooldownEnabled = true;\n\n        tradingOpen = true;\n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n    }\n\n        function addbot(address[] memory bots_) public onlyOwner {\n        for (uint i = 0; i < bots_.length; i++) {\n            bots[bots_[i]] = true;\n        }\n    }\n\n    function _tokenTransfer(address sender, address recipient, uint256 amount) private {\n        _transferStandard(sender, recipient, amount);\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);\n        _takeTeam(tTeam);\n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _takeTeam(uint256 tTeam) private {\n        uint256 currentRate =  _getRate();\n        uint256 rTeam = tTeam.mul(currentRate);\n        _rOwned[address(this)] = _rOwned[address(this)].add(rTeam);\n    }\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    receive() external payable {}\n\n    function manualswap() external {\n        require(_msgSender() == _feeAddrWallet);\n        uint256 contractBalance = balanceOf(address(this));\n        swapTokensForEth(contractBalance);\n    }\n\n    function manualsend() external {\n        require(_msgSender() == _feeAddrWallet);\n        uint256 contractETHBalance = address(this).balance;\n        sendETHToFee(contractETHBalance);\n    }\n\n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 tFee, uint256 tTeam) = _getTValues(tAmount, _feeAddr1, _feeAddr2);\n        uint256 currentRate =  _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, tTeam, currentRate);\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee, tTeam);\n    }\n\n    function _getTValues(uint256 tAmount, uint256 taxFee, uint256 TeamFee) private pure returns (uint256, uint256, uint256) {\n        uint256 tFee = tAmount.mul(taxFee).div(100);\n        uint256 tTeam = tAmount.mul(TeamFee).div(100);\n        uint256 tTransferAmount = tAmount.sub(tFee).sub(tTeam);\n        return (tTransferAmount, tFee, tTeam);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 tTeam, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rTeam = tTeam.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee).sub(rTeam);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n\tfunction _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n\n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n}"
}