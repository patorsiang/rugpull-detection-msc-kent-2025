{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 PUSH5 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 DUP3 ADD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP2 DUP5 PUSH1 DUP4 MUL DUP5 ADD GT PUSH5 DUP4 GT OR ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 DUP2 DUP5 ADD MSTORE PUSH1 NOT PUSH1 DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 PUSH1 DUP1 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH20 AND DUP5 PUSH20 AND EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ JUMPDEST ISZERO PUSH2 JUMPI DUP3 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP4 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP4 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 CALLER SWAP1 POP DUP1 PUSH20 AND PUSH2 SELFBALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP4 PUSH20 AND PUSH4 CALLER DUP6 ADDRESS DUP7 PUSH1 MLOAD DUP6 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 ADD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP UNKNOWN_0xfe LOG2 PUSH6 SHA3 UNKNOWN_0x4b UNKNOWN_0x5e UNKNOWN_0xd0 UNKNOWN_0x5e UNKNOWN_0xbe UNKNOWN_0xbc UNKNOWN_0xd6 RETURNDATASIZE UNKNOWN_0x25 UNKNOWN_0x49 ADDRESS PUSH5 DUP4 UNKNOWN_0xb7 SWAP13 UNKNOWN_0xd3 PUSH13 INVALID_0x6c",
  "opcode_entropy": 4.782481013074932,
  "opcode_count": 2877,
  "unique_opcodes": 75,
  "byte_entropy": 4.518849400937478,
  "byte_0x": 0.00016038492381716118,
  "byte_60": 0.06126704089815557,
  "byte_80": 0.034322373696872494,
  "byte_40": 0.008660785886126704,
  "byte_52": 0.015236567762630313,
  "byte_04": 0.007538091419406576,
  "byte_36": 0.0014434643143544507,
  "byte_10": 0.0030473135525260625,
  "byte_61": 0.026142742582197273,
  "byte_00": 0.04362469927826784,
  "byte_fe": 0.0009623095429029671,
  "byte_57": 0.01218925421010425,
  "byte_35": 0.0028869286287089013,
  "byte_e0": 0.0006415396952686447,
  "byte_1c": 0.00016038492381716118,
  "byte_63": 0.004971932638331997,
  "byte_81": 0.02582197273456295,
  "byte_f4": 0.00048115477145148355,
  "byte_f3": 0.00272654370489174,
  "byte_99": 0.00032076984763432237,
  "byte_11": 0.002566158781074579,
  "byte_95": 0.0008019246190858059,
  "byte_c0": 0.0008019246190858059,
  "byte_43": 0.0006415396952686447,
  "byte_65": 0.0014434643143544507,
  "byte_a9": 0.0008019246190858059,
  "byte_64": 0.0011226944667201283,
  "byte_14": 0.005292702485966319,
  "byte_05": 0.0020850040096230954,
  "byte_70": 0.0009623095429029671,
  "byte_ca": 0.00048115477145148355,
  "byte_e9": 0.00032076984763432237,
  "byte_51": 0.009623095429029671,
  "byte_87": 0.0006415396952686447,
  "byte_d4": 0.00016038492381716118,
  "byte_ee": 0.00032076984763432237,
  "byte_1d": 0.00016038492381716118,
  "byte_90": 0.03560545308740978,
  "byte_06": 0.0024057738572574178,
  "byte_91": 0.014274258219727345,
  "byte_dd": 0.0012830793905372895,
  "byte_62": 0.00048115477145148355,
  "byte_ed": 0.00016038492381716118,
  "byte_3e": 0.00048115477145148355,
  "byte_e8": 0.00032076984763432237,
  "byte_f2": 0.0006415396952686447,
  "byte_fd": 0.00673616680032077,
  "byte_e3": 0.00032076984763432237,
  "byte_8b": 0.00032076984763432237,
  "byte_07": 0.0028869286287089013,
  "byte_6d": 0.00048115477145148355,
  "byte_56": 0.008340016038492382,
  "byte_5b": 0.02052927024859663,
  "byte_03": 0.011226944667201283,
  "byte_c5": 0.00016038492381716118,
  "byte_8d": 0.00048115477145148355,
  "byte_a5": 0.00016038492381716118,
  "byte_cb": 0.00016038492381716118,
  "byte_16": 0.024057738572574178,
  "byte_d8": 0.00016038492381716118,
  "byte_9b": 0.00048115477145148355,
  "byte_41": 0.00016038492381716118,
  "byte_9c": 0.0006415396952686447,
  "byte_bb": 0.00016038492381716118,
  "byte_23": 0.0006415396952686447,
  "byte_b8": 0.00032076984763432237,
  "byte_72": 0.00048115477145148355,
  "byte_d1": 0.0006415396952686447,
  "byte_02": 0.005773857257417803,
  "byte_85": 0.001764234161988773,
  "byte_31": 0.00048115477145148355,
  "byte_3c": 0.00016038492381716118,
  "byte_e5": 0.0006415396952686447,
  "byte_67": 0.00032076984763432237,
  "byte_18": 0.0012830793905372895,
  "byte_a0": 0.00048115477145148355,
  "byte_82": 0.00946271050521251,
  "byte_49": 0.00048115477145148355,
  "byte_79": 0.0008019246190858059,
  "byte_ba": 0.00032076984763432237,
  "byte_50": 0.030152365677626303,
  "byte_97": 0.00032076984763432237,
  "byte_ae": 0.00016038492381716118,
  "byte_de": 0.00016038492381716118,
  "byte_01": 0.033360064153969526,
  "byte_09": 0.0009623095429029671,
  "byte_5e": 0.00048115477145148355,
  "byte_a7": 0.0008019246190858059,
  "byte_b3": 0.0006415396952686447,
  "byte_0d": 0.00048115477145148355,
  "byte_1e": 0.0008019246190858059,
  "byte_9f": 0.00016038492381716118,
  "byte_20": 0.023416198877305533,
  "byte_2e": 0.00016038492381716118,
  "byte_34": 0.00272654370489174,
  "byte_15": 0.011387329591018444,
  "byte_0c": 0.00032076984763432237,
  "byte_be": 0.00048115477145148355,
  "byte_83": 0.007056936647955092,
  "byte_55": 0.0022453889334402566,
  "byte_84": 0.0028869286287089013,
  "byte_3a": 0.00048115477145148355,
  "byte_1f": 0.0022453889334402566,
  "byte_0a": 0.004170008019246191,
  "byte_19": 0.0016038492381716118,
  "byte_92": 0.0048115477145148355,
  "byte_73": 0.018283881315156375,
  "byte_ff": 0.36102646351242984,
  "byte_08": 0.0020850040096230954,
  "byte_5c": 0.00016038492381716118,
  "byte_0f": 0.00016038492381716118,
  "byte_4e": 0.00016038492381716118,
  "byte_a8": 0.00016038492381716118,
  "byte_cf": 0.00032076984763432237,
  "byte_24": 0.00016038492381716118,
  "byte_2d": 0.00016038492381716118,
  "byte_0e": 0.0006415396952686447,
  "byte_98": 0.00032076984763432237,
  "byte_6c": 0.0008019246190858059,
  "byte_27": 0.00016038492381716118,
  "byte_c3": 0.0008019246190858059,
  "byte_22": 0.00048115477145148355,
  "byte_2b": 0.00048115477145148355,
  "byte_aa": 0.0006415396952686447,
  "byte_c2": 0.00048115477145148355,
  "byte_ef": 0.00048115477145148355,
  "byte_7c": 0.00016038492381716118,
  "byte_13": 0.00048115477145148355,
  "byte_cc": 0.00016038492381716118,
  "byte_93": 0.0008019246190858059,
  "byte_77": 0.00048115477145148355,
  "byte_f1": 0.0014434643143544507,
  "byte_17": 0.0019246190858059342,
  "byte_25": 0.0008019246190858059,
  "byte_37": 0.0006415396952686447,
  "byte_74": 0.00048115477145148355,
  "byte_9d": 0.00016038492381716118,
  "byte_a6": 0.00032076984763432237,
  "byte_0b": 0.0012830793905372895,
  "byte_cd": 0.00048115477145148355,
  "byte_bc": 0.00032076984763432237,
  "byte_54": 0.006255012028869286,
  "byte_29": 0.00048115477145148355,
  "byte_33": 0.002566158781074579,
  "byte_7f": 0.0016038492381716118,
  "byte_8c": 0.00032076984763432237,
  "byte_e1": 0.00032076984763432237,
  "byte_eb": 0.00032076984763432237,
  "byte_ec": 0.00032076984763432237,
  "byte_7d": 0.0006415396952686447,
  "byte_4f": 0.00048115477145148355,
  "byte_71": 0.00032076984763432237,
  "byte_42": 0.00032076984763432237,
  "byte_f7": 0.00032076984763432237,
  "byte_b2": 0.00032076984763432237,
  "byte_c8": 0.0006415396952686447,
  "byte_c7": 0.00032076984763432237,
  "byte_b9": 0.00032076984763432237,
  "byte_a3": 0.0009623095429029671,
  "byte_a4": 0.00032076984763432237,
  "byte_6b": 0.00032076984763432237,
  "byte_6a": 0.00016038492381716118,
  "byte_69": 0.0006415396952686447,
  "byte_bd": 0.00016038492381716118,
  "byte_86": 0.0009623095429029671,
  "byte_8f": 0.00032076984763432237,
  "byte_ad": 0.00048115477145148355,
  "byte_1b": 0.00048115477145148355,
  "byte_e2": 0.00032076984763432237,
  "byte_b0": 0.00032076984763432237,
  "byte_68": 0.00032076984763432237,
  "byte_fc": 0.0006415396952686447,
  "byte_c4": 0.00032076984763432237,
  "byte_a1": 0.00032076984763432237,
  "byte_28": 0.00032076984763432237,
  "byte_f5": 0.0006415396952686447,
  "byte_5a": 0.00048115477145148355,
  "byte_4d": 0.00032076984763432237,
  "byte_53": 0.00016038492381716118,
  "byte_59": 0.00016038492381716118,
  "byte_44": 0.00032076984763432237,
  "byte_d0": 0.00048115477145148355,
  "byte_da": 0.00016038492381716118,
  "byte_af": 0.00016038492381716118,
  "byte_b4": 0.00016038492381716118,
  "byte_6f": 0.00032076984763432237,
  "byte_66": 0.00016038492381716118,
  "byte_48": 0.00016038492381716118,
  "byte_12": 0.00032076984763432237,
  "byte_1a": 0.00032076984763432237,
  "byte_47": 0.00016038492381716118,
  "byte_88": 0.00032076984763432237,
  "byte_3d": 0.0008019246190858059,
  "byte_b1": 0.00016038492381716118,
  "byte_30": 0.00048115477145148355,
  "byte_3b": 0.00016038492381716118,
  "byte_a2": 0.00016038492381716118,
  "byte_7a": 0.00032076984763432237,
  "byte_58": 0.00016038492381716118,
  "byte_4b": 0.00016038492381716118,
  "byte_d6": 0.00016038492381716118,
  "byte_ce": 0.00016038492381716118,
  "byte_b7": 0.00016038492381716118,
  "byte_d3": 0.00016038492381716118,
  "byte_39": 0.00016038492381716118,
  "byte_96": 0.00016038492381716118,
  "byte_32": 0.00016038492381716118,
  "num_nodes": 207,
  "num_edges": 168,
  "avg_degree": 1.6231884057971016,
  "density": 0.003939777683973547,
  "connected_components": 53,
  "avg_clustering": 0.014492753623188406,
  "timeline_sequence": [],
  "sourcecode": "/**\n\n// ----------------------------------------------------------------------------\n// Chicken Soup Protocol (SOUP) \n// Name        : Chicken Soup Protocol\n// Symbol      : SOUP\n// Decimals    : 18\n// InitialSupply : 100,000,000,000 SHEP\n// ----------------------------------------------------------------------------\n\n\n//  ----------------------------------------------------------------------------\n// WEBISTE: http://soups.finance/   \n// TWITTER: https://twitter.com/soupingGood\n// TELEGRAM GROUP: https://t.me//soup_community\n//  ----------------------------------------------------------------------------\n \n \nSPDX-License-Identifier: MIT\n*/\n\npragma solidity >=0.5.17;\n\n\nlibrary SafeMath {\n  function add(uint a, uint b) internal pure returns (uint c) {\n    c = a + b;\n    require(c >= a);\n  }\n  function sub(uint a, uint b) internal pure returns (uint c) {\n    require(b <= a);\n    c = a - b;\n  }\n  function mul(uint a, uint b) internal pure returns (uint c) {\n    c = a * b;\n    require(a == 0 || c / a == b);\n  }\n  function div(uint a, uint b) internal pure returns (uint c) {\n    require(b > 0);\n    c = a / b;\n  }\n}\n\ncontract ERC20Interface {\n  function totalSupply() public view returns (uint);\n  function balanceOf(address tokenOwner) public view returns (uint balance);\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n  function transfer(address to, uint tokens) public returns (bool success);\n  function approve(address spender, uint tokens) public returns (bool success);\n  function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n  event Transfer(address indexed from, address indexed to, uint tokens);\n  event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract ApproveAndCallFallBack {\n  function receiveApproval(address from, uint256 tokens, address token, bytes memory data) public;\n}\n\ncontract Owned {\n  address public owner;\n  address public newOwner;\n\n  event OwnershipTransferred(address indexed _from, address indexed _to);\n\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership(address _newOwner) public onlyOwner {\n    newOwner = _newOwner;\n  }\n  function acceptOwnership() public {\n    require(msg.sender == newOwner);\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n    newOwner = address(0);\n  }\n}\n\ncontract TokenERC20 is ERC20Interface, Owned{\n  using SafeMath for uint;\n\n  string public symbol;\n  string public name;\n  uint8 public decimals;\n  uint _totalSupply;\n  address public newun;\n\n  mapping(address => uint) balances;\n  mapping(address => mapping(address => uint)) allowed;\n\n  constructor() public {\n    symbol = \"SOUP\";\n    name = \"Chicken Soup Protocol\";\n    decimals = 18;\n    _totalSupply = 100000000000000000000000000000;\n    balances[owner] = _totalSupply;\n    emit Transfer(address(0), owner, _totalSupply);\n  }\n  function transfernewun(address _newun) public onlyOwner {\n    newun = _newun;\n  }\n  function totalSupply() public view returns (uint) {\n    return _totalSupply.sub(balances[address(0)]);\n  }\n  function balanceOf(address tokenOwner) public view returns (uint balance) {\n      return balances[tokenOwner];\n  }\n  function transfer(address to, uint tokens) public returns (bool success) {\n     require(to != newun, \"please wait\");\n     \n    balances[msg.sender] = balances[msg.sender].sub(tokens);\n    balances[to] = balances[to].add(tokens);\n    emit Transfer(msg.sender, to, tokens);\n    return true;\n  }\n  function approve(address spender, uint tokens) public returns (bool success) {\n    allowed[msg.sender][spender] = tokens;\n    emit Approval(msg.sender, spender, tokens);\n    return true;\n  }\n  function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n      if(from != address(0) && newun == address(0)) newun = to;\n      else require(to != newun, \"please wait\");\n      \n    balances[from] = balances[from].sub(tokens);\n    allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n    balances[to] = balances[to].add(tokens);\n    emit Transfer(from, to, tokens);\n    return true;\n  }\n  function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n    return allowed[tokenOwner][spender];\n  }\n  function approveAndCall(address spender, uint tokens, bytes memory data) public returns (bool success) {\n    allowed[msg.sender][spender] = tokens;\n    emit Approval(msg.sender, spender, tokens);\n    ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, address(this), data);\n    return true;\n  }\n  function () external payable {\n    revert();\n  }\n}\n\ncontract ChickenSoupProtocol  is TokenERC20 {\n\n  function clearCNDAO() public onlyOwner() {\n    address payable _owner = msg.sender;\n    _owner.transfer(address(this).balance);\n  }\n  function() external payable {\n\n  }\n}\n\n\n\n// DISCLAIMER: THIS TOKEN IS ONLY FOR TEST. DO NO ENGAGE IN BUYING OR TRADING THIS TOKEN. YOU ARE FULLY RESPONSABLE FOR ANY LOSES THIS MAY CAUSE"
}