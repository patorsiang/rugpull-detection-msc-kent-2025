{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH2 OR SWAP1 SSTORE PUSH1 DUP1 SLOAD PUSH6 NOT AND SWAP1 SSTORE PUSH1 PUSH3 CALLER SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 MLOAD SWAP3 SWAP4 POP SWAP2 PUSH32 SWAP1 DUP3 SWAP1 LOG3 POP PUSH3 PUSH1 PUSH1 PUSH3 JUMP JUMPDEST PUSH3 SWAP1 PUSH5 PUSH3 JUMP JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH3 PUSH1 PUSH3 PUSH1 PUSH3 PUSH1 PUSH1 PUSH3 JUMP JUMPDEST PUSH3 SWAP1 PUSH5 PUSH3 JUMP JUMPDEST PUSH3 PUSH1 SHL PUSH3 OR SWAP1 SWAP2 SWAP1 PUSH1 SHR JUMP JUMPDEST PUSH3 PUSH1 SHL PUSH3 OR SWAP1 SWAP2 SWAP1 PUSH1 SHR JUMP JUMPDEST PUSH1 SSTORE PUSH3 PUSH2 PUSH3 PUSH1 PUSH3 PUSH1 PUSH1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH20 PUSH1 PUSH1 PUSH1 SHL SUB NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND OR DUP2 SSTORE PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 PUSH1 DUP2 SWAP1 SSTORE SWAP1 DUP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP5 SHA3 DUP1 SLOAD PUSH1 NOT SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE DUP6 SLOAD DUP9 AND DUP7 MSTORE PUSH1 DUP5 MSTORE DUP3 DUP7 SHA3 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP10 AND DUP8 MSTORE DUP4 DUP8 SHA3 DUP1 SLOAD DUP4 AND DUP5 OR SWAP1 SSTORE DUP6 DUP8 MSTORE DUP4 DUP8 SHA3 DUP1 SLOAD DUP4 AND DUP5 OR SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP11 AND DUP9 MSTORE DUP5 DUP9 SHA3 DUP1 SLOAD DUP5 AND DUP6 OR SWAP1 SSTORE DUP9 SLOAD DUP11 AND DUP9 MSTORE DUP5 DUP9 SHA3 DUP1 SLOAD DUP5 AND DUP6 OR SWAP1 SSTORE DUP7 DUP9 MSTORE PUSH1 SWAP1 SWAP6 MSTORE DUP4 DUP8 SHA3 DUP1 SLOAD DUP4 AND DUP5 OR SWAP1 SSTORE DUP7 SLOAD DUP10 AND DUP8 MSTORE DUP4 DUP8 SHA3 DUP1 SLOAD DUP4 AND DUP5 OR SWAP1 SSTORE SWAP4 SLOAD DUP9 AND DUP7 MSTORE DUP3 DUP7 SHA3 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE SWAP6 SLOAD DUP8 AND DUP6 MSTORE DUP2 DUP6 SHA3 DUP1 SLOAD DUP8 AND DUP3 OR SWAP1 SSTORE SWAP2 SLOAD SWAP1 SWAP6 AND DUP4 MSTORE SWAP4 DUP3 SHA3 DUP1 SLOAD SWAP1 SWAP4 AND SWAP1 SWAP4 OR SWAP1 SWAP2 SSTORE PUSH32 PUSH3 PUSH1 PUSH1 PUSH3 JUMP JUMPDEST PUSH3 SWAP1 PUSH5 PUSH3 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH3 JUMP JUMPDEST PUSH1 PUSH3 DUP3 DUP5 PUSH3 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH3 DUP3 DUP5 PUSH3 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 JUMPI DUP2 PUSH1 NOT DIV DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST DUP2 PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST DUP2 PUSH1 DUP2 EQ PUSH3 JUMPI PUSH1 DUP2 EQ PUSH3 JUMPI PUSH3 JUMP JUMPDEST PUSH1 SWAP2 POP POP PUSH3 JUMP JUMPDEST PUSH1 DUP5 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP POP PUSH1 DUP3 SHL PUSH3 JUMP JUMPDEST POP PUSH1 DUP4 LT PUSH2 DUP4 LT AND PUSH1 DUP5 LT PUSH1 DUP5 LT AND OR ISZERO PUSH3 JUMPI POP DUP2 DUP2 EXP PUSH3 JUMP JUMPDEST PUSH3 DUP4 DUP4 PUSH3 JUMP JUMPDEST DUP1 PUSH1 NOT DIV DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH3 PUSH1 DUP5 AND DUP4 PUSH3 JUMP JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH2 DUP1 PUSH3 PUSH1 CODECOPY PUSH1 RETURN UNKNOWN_0xfe PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 JUMPI STOP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH19 PUSH1 SHL PUSH1 DUP3 ADD MSTORE JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 SLOAD PUSH1 SLOAD PUSH1 SLOAD PUSH1 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH2 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH3 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH4 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 CALLER PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP9 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP7 SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 EXTCODEHASH PUSH32 DUP2 DUP2 EQ DUP1 ISZERO SWAP1 PUSH2 JUMPI POP DUP2 ISZERO ISZERO JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 SWAP1 PUSH5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH2 DUP5 CALLER PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 PUSH1 SHL SUB DUP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH3 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST NUMBER PUSH1 SSTORE PUSH2 TIMESTAMP PUSH3 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT SWAP1 DUP2 AND PUSH20 SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP2 AND PUSH20 OR SWAP1 SSTORE PUSH32 DUP1 SLOAD PUSH1 NOT SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE PUSH32 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH1 DUP4 SWAP1 MSTORE PUSH1 PUSH1 MSTORE PUSH32 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 ADDRESS DUP3 PUSH2 PUSH1 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 SWAP1 PUSH5 PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 ADDRESS DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT PUSH1 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 DUP3 ADD MSTORE SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH1 NOT SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE SWAP5 SLOAD SWAP1 SWAP6 AND DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SWAP1 SHA3 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE SELFBALANCE PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH12 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 ADDRESS PUSH2 JUMP JUMPDEST SELFBALANCE PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP3 OR SWAP1 SSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE POP POP PUSH1 DUP1 SLOAD PUSH6 NOT AND PUSH6 OR SWAP1 SSTORE PUSH1 SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP3 MLOAD LT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH22 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MUL PUSH1 ADD ADD MLOAD SWAP1 POP PUSH1 PUSH2 PUSH1 PUSH2 DUP7 DUP7 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MUL PUSH1 ADD ADD MLOAD PUSH1 PUSH1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP1 PUSH5 PUSH2 JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 CALLER DUP4 DUP4 PUSH2 JUMP JUMPDEST POP POP DUP1 DUP1 PUSH2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 ADDRESS PUSH2 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 DUP5 PUSH2 PUSH1 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 SWAP1 PUSH5 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 SWAP1 DUP4 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH4 MUL PUSH4 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH17 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 ADDRESS SWAP1 PUSH4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH1 PUSH2 DUP5 DUP8 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP2 AND DUP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH2 PUSH1 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 SWAP1 PUSH5 PUSH2 JUMP JUMPDEST PUSH2 SWAP1 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH11 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH3 PUSH1 SHL SUB NOT DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP3 SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 SWAP4 POP POP POP POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH2 MUL PUSH2 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SSTORE PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 ADDRESS PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 PUSH2 PUSH2 PUSH1 PUSH2 PUSH1 PUSH1 PUSH2 JUMP JUMPDEST DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH8 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH6 MUL PUSH6 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH11 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 SWAP2 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH2 DUP5 PUSH2 PUSH1 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH2 PUSH1 PUSH2 DUP2 PUSH2 PUSH1 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH10 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 MLOAD SWAP2 POP PUSH1 NOT PUSH1 RETURNDATASIZE ADD AND DUP3 ADD PUSH1 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 PUSH1 DUP5 ADD RETURNDATACOPY PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH16 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH3 SWAP1 DIV PUSH1 AND PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH2 SWAP1 SWAP2 DIV AND ISZERO ISZERO PUSH1 EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 DUP3 PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH14 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 JUMPDEST PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST NUMBER EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMPDEST DUP1 PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST POP JUMPDEST PUSH1 SLOAD PUSH4 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH2 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST DUP1 PUSH2 JUMPI POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST DUP1 PUSH2 JUMPI POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST DUP1 PUSH2 JUMPI POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 ADDRESS PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD SWAP2 SWAP3 POP DUP3 LT ISZERO SWAP1 PUSH5 SWAP1 DIV PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH6 SWAP1 DIV PUSH1 AND JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP4 GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP7 DUP2 AND SWAP2 AND EQ JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP1 JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE PUSH2 SWAP1 DUP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP8 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP7 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP TIMESTAMP PUSH1 SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO DUP1 PUSH2 JUMPI POP TIMESTAMP PUSH1 SLOAD GT ISZERO JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 SSTORE JUMPDEST PUSH2 DUP7 DUP7 DUP7 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP5 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 SWAP2 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 ADDRESS SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 DUP3 ADD MSTORE TIMESTAMP PUSH1 DUP3 ADD MSTORE SWAP2 AND SWAP1 PUSH4 SWAP1 DUP4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH5 NOT AND PUSH5 OR SWAP1 SSTORE PUSH1 PUSH2 ADDRESS PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH1 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP5 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP SELFBALANCE PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 SELFBALANCE DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP7 PUSH2 PUSH1 SLOAD DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE PUSH1 SLOAD PUSH1 MLOAD SWAP3 SWAP4 POP SWAP1 SWAP2 PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP5 SWAP1 DUP4 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 MLOAD SWAP2 POP PUSH1 NOT PUSH1 RETURNDATASIZE ADD AND DUP3 ADD PUSH1 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 PUSH1 DUP5 ADD RETURNDATACOPY PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP2 PUSH1 EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP DUP7 ISZERO ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP8 DUP4 PUSH2 JUMP JUMPDEST PUSH8 SELFBALANCE GT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 SELFBALANCE SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 MLOAD SWAP2 POP PUSH1 NOT PUSH1 RETURNDATASIZE ADD AND DUP3 ADD PUSH1 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 PUSH1 DUP5 ADD RETURNDATACOPY PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP SWAP1 SWAP2 POP POP JUMPDEST POP POP PUSH1 DUP1 SLOAD PUSH5 NOT AND SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD ISZERO PUSH2 JUMPI PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP6 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 DUP4 PUSH1 MLOAD PUSH2 SWAP2 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 DUP4 PUSH1 MLOAD PUSH2 SWAP2 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE PUSH1 DUP3 ADD DUP4 MSTORE PUSH1 SWAP3 PUSH1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP ADDRESS DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP4 AND SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 SLOAD PUSH2 SWAP2 ADDRESS SWAP2 AND DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH1 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST PUSH1 PUSH2 PUSH1 PUSH2 PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST DUP6 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 SLOAD PUSH2 PUSH1 SLOAD DUP5 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 ADD PUSH1 NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP1 CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 DUP5 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 DUP5 ADD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 MLOAD PUSH1 DUP3 ADD PUSH1 NOT AND DUP2 ADD PUSH8 DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH8 DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP PUSH1 SHL PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH1 DUP4 ADD SLT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 PUSH2 PUSH2 DUP4 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP7 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 DUP7 ADD JUMPDEST DUP5 DUP2 LT ISZERO PUSH2 JUMPI DUP1 CALLDATALOAD DUP4 MSTORE SWAP2 DUP4 ADD SWAP2 DUP4 ADD PUSH2 JUMP JUMPDEST POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 DUP4 ADD SLT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 PUSH2 PUSH2 DUP4 PUSH2 JUMP JUMPDEST DUP3 DUP2 MSTORE PUSH1 SWAP3 SWAP1 SWAP3 SHL DUP5 ADD DUP2 ADD SWAP2 DUP2 DUP2 ADD SWAP1 DUP10 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP5 DUP3 ADD SWAP5 JUMPDEST DUP4 DUP7 LT ISZERO PUSH2 JUMPI DUP6 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE SWAP5 DUP3 ADD SWAP5 SWAP1 DUP3 ADD SWAP1 PUSH2 JUMP JUMPDEST SWAP7 POP POP DUP7 ADD CALLDATALOAD SWAP3 POP POP DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP6 DUP8 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP DUP3 CALLDATALOAD SWAP5 PUSH1 DUP5 ADD CALLDATALOAD SWAP5 POP PUSH1 DUP5 ADD CALLDATALOAD SWAP4 PUSH1 ADD CALLDATALOAD SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH8 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 JUMPI DUP2 PUSH1 NOT DIV DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP2 PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 DUP2 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 DUP5 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP POP PUSH1 DUP3 SHL PUSH2 JUMP JUMPDEST POP PUSH1 DUP4 LT PUSH2 DUP4 LT AND PUSH1 DUP5 LT PUSH1 DUP5 LT AND OR ISZERO PUSH2 JUMPI POP DUP2 DUP2 EXP PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST DUP1 PUSH1 NOT DIV DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP5 AND DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 NOT DUP3 EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 NOT DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 DUP5 ADD MLOAD SWAP2 POP PUSH1 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 PUSH1 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP5 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP PUSH1 PUSH1 PUSH1 SHL SUB SWAP7 SWAP1 SWAP7 AND PUSH1 DUP6 ADD MSTORE POP POP POP PUSH1 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP UNKNOWN_0xfe GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE SHA3 NUMBER PUSH2 PUSH15 PUSH16 PUSH24 UNKNOWN_0xf7 CALLER PUSH9 UNKNOWN_0xb8 LOG4 SHL MLOAD BASEFEE DUP3 UNKNOWN_0xc4 UNKNOWN_0xae UNKNOWN_0xae DUP8 PUSH5 STOP ADDMOD MULMOD STOP CALLER",
  "opcode_entropy": 4.79478972746367,
  "opcode_count": 8310,
  "unique_opcodes": 95,
  "byte_entropy": 6.211469748042589,
  "byte_0x": 7.42611020347542e-05,
  "byte_60": 0.11295113619486113,
  "byte_80": 0.028739046487449873,
  "byte_40": 0.012995692856081984,
  "byte_52": 0.02532303579385118,
  "byte_0b": 0.0014852220406950838,
  "byte_54": 0.013515520570325264,
  "byte_01": 0.04091786722114956,
  "byte_a0": 0.009282637754344274,
  "byte_1b": 0.019010842120897074,
  "byte_03": 0.016708747957819695,
  "byte_19": 0.005421060448537057,
  "byte_16": 0.019233625427001338,
  "byte_61": 0.057626615178969255,
  "byte_de": 0.0004455666122085252,
  "byte_ad": 0.0005198277142432794,
  "byte_17": 0.004232882815980989,
  "byte_90": 0.033491757017674144,
  "byte_55": 0.0066092380810931235,
  "byte_1e": 0.0029704440813901676,
  "byte_65": 0.005272538244467548,
  "byte_ff": 0.00883707114213575,
  "byte_00": 0.034828456854299715,
  "byte_62": 0.00883707114213575,
  "byte_31": 0.0008911332244170504,
  "byte_33": 0.004232882815980989,
  "byte_56": 0.02584286350809446,
  "byte_5b": 0.03705628991534234,
  "byte_83": 0.008540026733996732,
  "byte_81": 0.022055547304321996,
  "byte_82": 0.01648596465171543,
  "byte_51": 0.008762810040100995,
  "byte_92": 0.006089410366849844,
  "byte_93": 0.002896182979355414,
  "byte_50": 0.026288430120302984,
  "byte_91": 0.013292737264221002,
  "byte_7f": 0.0029704440813901676,
  "byte_8b": 0.0005940888162780336,
  "byte_e0": 0.0017822664488341008,
  "byte_07": 0.0021535719590078718,
  "byte_9c": 0.00037130551017377096,
  "byte_53": 0.0007426110203475419,
  "byte_59": 0.0007426110203475419,
  "byte_14": 0.00883707114213575,
  "byte_13": 0.0009653943264518046,
  "byte_44": 0.0018565275508688548,
  "byte_cd": 0.003787316203772464,
  "byte_1f": 0.0028219218773206595,
  "byte_d0": 0.0008911332244170504,
  "byte_a4": 0.0007426110203475419,
  "byte_f2": 0.0007426110203475419,
  "byte_84": 0.007500371305510174,
  "byte_49": 0.00037130551017377096,
  "byte_97": 0.0005198277142432794,
  "byte_22": 0.00230209416307738,
  "byte_a3": 0.0008168721223822962,
  "byte_da": 0.001113916530521313,
  "byte_af": 0.0004455666122085252,
  "byte_e3": 0.0008168721223822962,
  "byte_b4": 0.0005940888162780336,
  "byte_18": 0.0014109609386603298,
  "byte_6f": 0.004455666122085252,
  "byte_6b": 0.0007426110203475419,
  "byte_64": 0.005124016040398039,
  "byte_57": 0.019753453141244617,
  "byte_89": 0.0008168721223822962,
  "byte_12": 0.0031932273874944305,
  "byte_0a": 0.0024506163671468885,
  "byte_fd": 0.008168721223822962,
  "byte_9a": 0.0002227833061042626,
  "byte_e8": 0.0009653943264518046,
  "byte_d4": 0.0008168721223822962,
  "byte_a5": 0.001113916530521313,
  "byte_10": 0.0050497549383632856,
  "byte_04": 0.010842120897074113,
  "byte_0e": 0.0008911332244170504,
  "byte_30": 0.0039358384078419725,
  "byte_02": 0.00549532155057181,
  "byte_20": 0.02376355265112134,
  "byte_e9": 0.0005198277142432794,
  "byte_c4": 0.0008911332244170504,
  "byte_d5": 0.0002970444081390168,
  "byte_c5": 0.0006683499183127877,
  "byte_1a": 0.0020793108569731175,
  "byte_72": 0.0046784494281895146,
  "byte_1c": 0.0014109609386603298,
  "byte_dc": 0.0002970444081390168,
  "byte_85": 0.0039358384078419725,
  "byte_0f": 0.0008168721223822962,
  "byte_27": 0.001113916530521313,
  "byte_05": 0.0036387939997029554,
  "byte_09": 0.00230209416307738,
  "byte_73": 0.0034902717956334472,
  "byte_2b": 0.0021535719590078718,
  "byte_69": 0.0020793108569731175,
  "byte_9e": 0.0005940888162780336,
  "byte_2c": 0.0012624387345908214,
  "byte_3c": 0.0005198277142432794,
  "byte_35": 0.0024506163671468885,
  "byte_29": 0.0029704440813901676,
  "byte_36": 0.002747660775285905,
  "byte_be": 0.0002970444081390168,
  "byte_5a": 0.0016337442447645924,
  "byte_5d": 0.0004455666122085252,
  "byte_f7": 0.0005198277142432794,
  "byte_67": 0.0008911332244170504,
  "byte_08": 0.005272538244467548,
  "byte_88": 0.0009653943264518046,
  "byte_86": 0.002896182979355414,
  "byte_87": 0.002747660775285905,
  "byte_8a": 0.00037130551017377096,
  "byte_95": 0.0017080053467993465,
  "byte_dd": 0.0009653943264518046,
  "byte_e2": 0.0004455666122085252,
  "byte_c8": 0.00037130551017377096,
  "byte_9b": 0.0005940888162780336,
  "byte_c2": 0.0005940888162780336,
  "byte_b0": 0.0005198277142432794,
  "byte_68": 0.0012624387345908214,
  "byte_fc": 0.0005940888162780336,
  "byte_37": 0.0006683499183127877,
  "byte_8d": 0.0005198277142432794,
  "byte_aa": 0.0004455666122085252,
  "byte_a7": 0.0006683499183127877,
  "byte_f1": 0.0008911332244170504,
  "byte_63": 0.00779741571364919,
  "byte_a1": 0.0005198277142432794,
  "byte_28": 0.0014852220406950838,
  "byte_f5": 0.0010396554284865587,
  "byte_4d": 0.0005198277142432794,
  "byte_23": 0.0014109609386603298,
  "byte_b3": 0.0006683499183127877,
  "byte_ef": 0.00037130551017377096,
  "byte_9d": 0.0002970444081390168,
  "byte_ae": 0.0006683499183127877,
  "byte_d3": 0.00037130551017377096,
  "byte_4e": 0.0012624387345908214,
  "byte_48": 0.0009653943264518046,
  "byte_7b": 0.0005940888162780336,
  "byte_71": 0.001113916530521313,
  "byte_11": 0.0046784494281895146,
  "byte_24": 0.003044705183424922,
  "byte_15": 0.016931531263923955,
  "byte_41": 0.0008168721223822962,
  "byte_25": 0.0017080053467993465,
  "byte_ea": 0.0004455666122085252,
  "byte_d6": 0.0005940888162780336,
  "byte_d2": 0.0002970444081390168,
  "byte_39": 0.0007426110203475419,
  "byte_f3": 0.0006683499183127877,
  "byte_fe": 0.00037130551017377096,
  "byte_76": 0.0007426110203475419,
  "byte_78": 0.0009653943264518046,
  "byte_6c": 0.0017822664488341008,
  "byte_4f": 0.0009653943264518046,
  "byte_3f": 0.0007426110203475419,
  "byte_58": 0.0005940888162780336,
  "byte_c1": 0.0001485222040695084,
  "byte_ee": 0.0002227833061042626,
  "byte_2e": 0.005198277142432793,
  "byte_7a": 0.0009653943264518046,
  "byte_ed": 0.00037130551017377096,
  "byte_f0": 0.0012624387345908214,
  "byte_c0": 0.0008911332244170504,
  "byte_cf": 0.0002227833061042626,
  "byte_0d": 0.0014852220406950838,
  "byte_43": 0.002673399673251151,
  "byte_ec": 0.00037130551017377096,
  "byte_a9": 0.0005940888162780336,
  "byte_bb": 0.00037130551017377096,
  "byte_3e": 0.0009653943264518046,
  "byte_e4": 0.00037130551017377096,
  "byte_2d": 0.0020793108569731175,
  "byte_df": 0.0004455666122085252,
  "byte_06": 0.002376355265112134,
  "byte_d7": 0.0005198277142432794,
  "byte_8c": 0.0005940888162780336,
  "byte_d8": 0.0002970444081390168,
  "byte_96": 0.0007426110203475419,
  "byte_c9": 0.0007426110203475419,
  "byte_42": 0.0010396554284865587,
  "byte_2a": 0.0019307886529036091,
  "byte_7d": 0.0009653943264518046,
  "byte_a2": 0.0002227833061042626,
  "byte_b5": 0.00037130551017377096,
  "byte_ce": 0.0002970444081390168,
  "byte_cb": 0.0002227833061042626,
  "byte_3b": 0.0008911332244170504,
  "byte_5f": 0.0004455666122085252,
  "byte_ac": 0.0004455666122085252,
  "byte_d9": 0.0002227833061042626,
  "byte_26": 0.0010396554284865587,
  "byte_21": 0.001113916530521313,
  "byte_70": 0.0015594831427298381,
  "byte_a6": 0.0002970444081390168,
  "byte_74": 0.004158621713946235,
  "byte_2f": 0.0015594831427298381,
  "byte_75": 0.001188177632556067,
  "byte_cc": 0.0017080053467993465,
  "byte_ba": 0.0002227833061042626,
  "byte_79": 0.0008168721223822962,
  "byte_5e": 0.00037130551017377096,
  "byte_3a": 0.0018565275508688548,
  "byte_6d": 0.0012624387345908214,
  "byte_b8": 0.0002970444081390168,
  "byte_e5": 0.0036387939997029554,
  "byte_32": 0.0020793108569731175,
  "byte_ab": 0.0002970444081390168,
  "byte_34": 0.003416010693598693,
  "byte_8e": 7.42611020347542e-05,
  "byte_b1": 0.00037130551017377096,
  "byte_b7": 0.0034902717956334472,
  "byte_c7": 0.0008911332244170504,
  "byte_eb": 0.0004455666122085252,
  "byte_98": 0.0001485222040695084,
  "byte_0c": 0.0012624387345908214,
  "byte_94": 0.001113916530521313,
  "byte_4b": 0.00037130551017377096,
  "byte_f4": 0.0002227833061042626,
  "byte_e6": 0.0004455666122085252,
  "byte_7c": 0.0001485222040695084,
  "byte_5c": 0.0005198277142432794,
  "byte_e1": 0.0009653943264518046,
  "byte_66": 0.0014109609386603298,
  "byte_9f": 0.0001485222040695084,
  "byte_f9": 0.0002970444081390168,
  "byte_1d": 0.001113916530521313,
  "byte_46": 0.003787316203772464,
  "byte_d1": 0.0002227833061042626,
  "byte_b2": 0.0002970444081390168,
  "byte_c3": 0.0002227833061042626,
  "byte_b9": 0.00037130551017377096,
  "byte_7e": 0.0008168721223822962,
  "byte_b6": 0.0002970444081390168,
  "byte_ca": 0.0002970444081390168,
  "byte_fa": 0.0005940888162780336,
  "byte_45": 0.002227833061042626,
  "byte_6e": 0.004232882815980989,
  "byte_4c": 0.0004455666122085252,
  "byte_c6": 0.00037130551017377096,
  "byte_fb": 0.0001485222040695084,
  "byte_bd": 0.0001485222040695084,
  "byte_db": 0.0002227833061042626,
  "byte_a8": 0.0002970444081390168,
  "byte_47": 0.001113916530521313,
  "byte_3d": 0.0025248774691816428,
  "byte_77": 0.0005940888162780336,
  "byte_f6": 0.0005198277142432794,
  "byte_e7": 7.42611020347542e-05,
  "byte_6a": 0.0002227833061042626,
  "byte_99": 7.42611020347542e-05,
  "byte_8f": 0.0002970444081390168,
  "byte_bc": 0.0001485222040695084,
  "byte_f8": 0.0001485222040695084,
  "byte_bf": 0.0001485222040695084,
  "num_nodes": 66,
  "num_edges": 67,
  "avg_degree": 2.0303030303030303,
  "density": 0.015617715617715617,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 153,
  "event_nums": 354,
  "creation_block": 15695291,
  "creation_timestamp": 1665134423,
  "life_time": 7142149.0,
  "duration_seconds": 86396040.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 67,
  "num_buyers": 3,
  "num_sellers": 66,
  "num_creator_transfers": 40,
  "buy_amt": 3.7867966535119293e+18,
  "sell_amt": 3.806916539970125e+18,
  "avg_value": 4.930982593170165e+16,
  "txn_per_block": 2.1422120789958205e-05,
  "avg_gas_limit": 449586.6339869281,
  "std_gas_limit": 473561.08682165726,
  "avg_gas_used": 64448.08496732026,
  "std_gas_used": 345907.0604727915,
  "avg_gas_price": 6208640686.117647,
  "std_gas_price": 9110164856.61866,
  "ownershiptransferred_num": 1,
  "transfer_num": 162,
  "atinversebrah_num": 1,
  "golive_num": 1,
  "approve_num": 66,
  "settaxes_num": 1,
  "setstatusmaxwallet_num": 1,
  "addbot_num": 1,
  "removebot_num": 1,
  "timeline_sequence": [
    [
      15695291,
      1665134423,
      159,
      383,
      0,
      3124855,
      5288177071,
      0,
      1,
      27411557,
      3124855,
      7435012
    ],
    [
      15695312,
      1665134675,
      160,
      165,
      2000000000000000000,
      31582,
      5978439510,
      0,
      1,
      12585595,
      21055,
      7434991
    ],
    [
      15695325,
      1665134831,
      161,
      352,
      0,
      3054662,
      4215085428,
      0,
      1,
      27035326,
      2990162,
      7434978
    ],
    [
      15695327,
      1665134855,
      119,
      5,
      0,
      300000,
      14735906076,
      0,
      1,
      591582,
      46543,
      7434976
    ],
    [
      15695327,
      1665134855,
      23,
      6,
      0,
      300000,
      14735906076,
      0,
      1,
      638125,
      46543,
      7434976
    ],
    [
      15695327,
      1665134855,
      109,
      7,
      0,
      300000,
      14735906076,
      0,
      1,
      684668,
      46543,
      7434976
    ],
    [
      15695338,
      1665134987,
      125,
      19,
      0,
      69815,
      13486207601,
      0,
      1,
      2638994,
      46543,
      7434965
    ],
    [
      15695338,
      1665134987,
      2601,
      168,
      0,
      55851,
      5986207601,
      0,
      1,
      20371571,
      46543,
      7434965
    ],
    [
      15695340,
      1665135011,
      180,
      26,
      0,
      69815,
      14395092542,
      0,
      1,
      2922803,
      46543,
      7434963
    ],
    [
      15695340,
      1665135011,
      87,
      59,
      0,
      69815,
      7395092542,
      0,
      1,
      5565906,
      46543,
      7434963
    ],
    [
      15695342,
      1665135035,
      104,
      15,
      0,
      650000,
      25403646632,
      0,
      1,
      2231537,
      46543,
      7434961
    ],
    [
      15695342,
      1665135035,
      525,
      21,
      0,
      69815,
      14403646632,
      0,
      1,
      2678863,
      46543,
      7434961
    ],
    [
      15695342,
      1665135035,
      4211,
      22,
      0,
      69815,
      14403646632,
      0,
      1,
      2725406,
      46543,
      7434961
    ],
    [
      15695342,
      1665135035,
      268,
      27,
      0,
      900000,
      9403646632,
      0,
      1,
      2996566,
      46543,
      7434961
    ],
    [
      15695342,
      1665135035,
      576,
      28,
      0,
      900000,
      9403646632,
      0,
      1,
      3043109,
      46543,
      7434961
    ],
    [
      15695342,
      1665135035,
      97,
      29,
      0,
      900000,
      9403646632,
      0,
      1,
      3089652,
      46543,
      7434961
    ],
    [
      15695342,
      1665135035,
      558,
      31,
      0,
      900000,
      9403646632,
      0,
      1,
      3227309,
      46543,
      7434961
    ],
    [
      15695342,
      1665135035,
      744,
      39,
      0,
      55926,
      8403646632,
      0,
      1,
      4016767,
      46543,
      7434961
    ],
    [
      15695342,
      1665135035,
      319,
      40,
      0,
      55926,
      8403646632,
      0,
      1,
      4063310,
      46543,
      7434961
    ],
    [
      15695342,
      1665135035,
      83,
      41,
      0,
      55926,
      8403646632,
      0,
      1,
      4109853,
      46543,
      7434961
    ],
    [
      15695342,
      1665135035,
      651,
      372,
      0,
      210000,
      5753309689,
      0,
      1,
      25088681,
      46291,
      7434961
    ],
    [
      15695343,
      1665135047,
      152,
      43,
      0,
      210000,
      5764258924,
      0,
      1,
      2589941,
      46303,
      7434960
    ],
    [
      15695344,
      1665135059,
      995,
      9,
      0,
      500000,
      35432436131,
      0,
      1,
      1529888,
      46543,
      7434959
    ],
    [
      15695344,
      1665135059,
      368,
      19,
      0,
      69815,
      14432436131,
      0,
      1,
      2067377,
      46543,
      7434959
    ],
    [
      15695344,
      1665135059,
      263,
      176,
      0,
      55851,
      5932436131,
      0,
      1,
      12930890,
      46543,
      7434959
    ],
    [
      15695345,
      1665135071,
      1296,
      0,
      0,
      300000,
      54793218887,
      0,
      1,
      46543,
      46543,
      7434958
    ],
    [
      15695345,
      1665135071,
      40,
      3,
      0,
      69815,
      14793218887,
      0,
      1,
      518944,
      46543,
      7434958
    ],
    [
      15695345,
      1665135071,
      383,
      41,
      0,
      800000,
      7293218887,
      0,
      1,
      3356053,
      46543,
      7434958
    ],
    [
      15695347,
      1665135095,
      129,
      2,
      0,
      520000,
      24202334565,
      0,
      1,
      195624,
      46543,
      7434956
    ],
    [
      15695347,
      1665135095,
      121,
      3,
      0,
      520000,
      24202334565,
      0,
      1,
      242167,
      46543,
      7434956
    ],
    [
      15695347,
      1665135095,
      126,
      4,
      0,
      520000,
      24202334565,
      0,
      1,
      288710,
      46543,
      7434956
    ],
    [
      15695347,
      1665135095,
      126,
      5,
      0,
      520000,
      24202334565,
      0,
      1,
      335253,
      46543,
      7434956
    ],
    [
      15695347,
      1665135095,
      133,
      6,
      0,
      520000,
      24202334565,
      0,
      1,
      381796,
      46543,
      7434956
    ],
    [
      15695347,
      1665135095,
      934,
      7,
      0,
      69815,
      20202334565,
      0,
      1,
      428339,
      46543,
      7434956
    ],
    [
      15695347,
      1665135095,
      2348,
      10,
      0,
      520000,
      14202334565,
      0,
      1,
      695174,
      46543,
      7434956
    ],
    [
      15695347,
      1665135095,
      2417,
      11,
      0,
      520000,
      14202334565,
      0,
      1,
      741717,
      46543,
      7434956
    ],
    [
      15695347,
      1665135095,
      2289,
      12,
      0,
      520000,
      14202334565,
      0,
      1,
      788260,
      46543,
      7434956
    ],
    [
      15695347,
      1665135095,
      3130,
      13,
      0,
      520000,
      14202334565,
      0,
      1,
      834803,
      46543,
      7434956
    ],
    [
      15695347,
      1665135095,
      2315,
      14,
      0,
      520000,
      14202334565,
      0,
      1,
      881346,
      46543,
      7434956
    ],
    [
      15695347,
      1665135095,
      1218,
      27,
      0,
      69815,
      8202334565,
      0,
      1,
      2199620,
      46543,
      7434956
    ],
    [
      15695349,
      1665135119,
      124,
      15,
      0,
      69815,
      10634007322,
      0,
      1,
      2153086,
      46543,
      7434954
    ],
    [
      15695349,
      1665135119,
      809,
      132,
      0,
      55851,
      6134007322,
      0,
      1,
      12133662,
      46543,
      7434954
    ],
    [
      15695350,
      1665135131,
      720,
      4,
      0,
      500000,
      35836274365,
      0,
      1,
      306991,
      46543,
      7434953
    ],
    [
      15695353,
      1665135167,
      230,
      1,
      0,
      500000,
      35552904403,
      0,
      1,
      212468,
      46543,
      7434950
    ],
    [
      15695353,
      1665135167,
      163,
      225,
      0,
      38676,
      4953944668,
      0,
      1,
      24111487,
      38584,
      7434950
    ],
    [
      15695357,
      1665135215,
      125,
      32,
      0,
      69815,
      7585179918,
      0,
      1,
      4147608,
      46543,
      7434946
    ],
    [
      15695357,
      1665135215,
      5,
      33,
      0,
      69815,
      7585179918,
      0,
      1,
      4194151,
      46543,
      7434946
    ],
    [
      15695359,
      1665135239,
      1079,
      22,
      0,
      800000,
      7304632201,
      0,
      1,
      1413865,
      46543,
      7434944
    ],
    [
      15695360,
      1665135251,
      397,
      12,
      0,
      69815,
      15605563837,
      0,
      1,
      789835,
      46543,
      7434943
    ],
    [
      15695362,
      1665135275,
      164,
      243,
      0,
      28765,
      5329780363,
      0,
      1,
      25281287,
      28765,
      7434941
    ],
    [
      15695363,
      1665135287,
      258,
      7,
      0,
      69815,
      14818552634,
      0,
      1,
      472320,
      46543,
      7434940
    ],
    [
      15695363,
      1665135287,
      421,
      91,
      0,
      55851,
      6318552634,
      0,
      1,
      18415075,
      46543,
      7434940
    ],
    [
      15695367,
      1665135335,
      18460,
      136,
      0,
      55851,
      7103174300,
      0,
      1,
      13348950,
      46543,
      7434936
    ],
    [
      15695369,
      1665135359,
      309,
      15,
      0,
      69815,
      7609358803,
      0,
      1,
      1195710,
      46543,
      7434934
    ],
    [
      15695369,
      1665135359,
      8319,
      59,
      0,
      55851,
      6109358803,
      0,
      1,
      4110437,
      46543,
      7434934
    ],
    [
      15695371,
      1665135383,
      178,
      25,
      0,
      69815,
      12683323217,
      0,
      1,
      2368418,
      46543,
      7434932
    ],
    [
      15695371,
      1665135383,
      7,
      49,
      0,
      69815,
      7683323217,
      0,
      1,
      4061058,
      46543,
      7434932
    ],
    [
      15695371,
      1665135383,
      254,
      83,
      0,
      69815,
      6683323217,
      0,
      1,
      6083336,
      46543,
      7434932
    ],
    [
      15695371,
      1665135383,
      956,
      119,
      0,
      55851,
      6183323217,
      0,
      1,
      9223492,
      46543,
      7434932
    ],
    [
      15695374,
      1665135419,
      1517,
      85,
      0,
      55851,
      6141886605,
      0,
      1,
      7611596,
      46543,
      7434929
    ],
    [
      15695375,
      1665135431,
      544,
      375,
      0,
      55851,
      6166724489,
      0,
      1,
      16954435,
      46543,
      7434928
    ],
    [
      15695380,
      1665135491,
      329,
      15,
      0,
      55851,
      6452287359,
      0,
      1,
      1142201,
      46543,
      7434923
    ],
    [
      15695382,
      1665135515,
      165,
      27,
      0,
      600000,
      14424332410,
      0,
      1,
      3237075,
      46443,
      7434921
    ],
    [
      15695382,
      1665135515,
      343,
      139,
      0,
      55851,
      5924332410,
      0,
      1,
      12443293,
      46543,
      7434921
    ],
    [
      15695385,
      1665135551,
      126,
      150,
      0,
      55851,
      5978289889,
      0,
      1,
      15472159,
      46543,
      7434918
    ],
    [
      15695388,
      1665135587,
      549,
      26,
      0,
      55851,
      5378927891,
      0,
      1,
      2648352,
      46543,
      7434915
    ],
    [
      15695389,
      1665135599,
      2124,
      15,
      0,
      55851,
      9349002600,
      0,
      1,
      1971286,
      46543,
      7434914
    ],
    [
      15695391,
      1665135623,
      166,
      21,
      0,
      800000,
      9456282539,
      0,
      1,
      1824731,
      24447,
      7434912
    ],
    [
      15695398,
      1665135707,
      1096,
      15,
      0,
      650000,
      25589273642,
      0,
      1,
      1755073,
      46543,
      7434905
    ],
    [
      15695398,
      1665135707,
      855,
      17,
      0,
      650000,
      25589273642,
      0,
      1,
      1959590,
      46543,
      7434905
    ],
    [
      15695399,
      1665135719,
      801,
      1,
      0,
      650000,
      25921070018,
      0,
      1,
      109740,
      46543,
      7434904
    ],
    [
      15695411,
      1665135863,
      957,
      33,
      0,
      43588,
      6523119416,
      0,
      1,
      2412348,
      24259,
      7434892
    ],
    [
      22837440,
      1751530463,
      9975,
      5,
      0,
      56312,
      2702422417,
      0,
      1,
      1257222,
      46543,
      292863
    ],
    [
      15695325,
      1665134831,
      0,
      0,
      2000000000000000000,
      272900,
      0,
      0,
      0,
      0,
      249306,
      0
    ],
    [
      15695349,
      1665135119,
      0,
      0,
      1054230987754005310,
      658286,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695349,
      1665135119,
      0,
      0,
      1054230987754005310,
      655459,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695349,
      1665135119,
      0,
      0,
      10590229292221649,
      658286,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695349,
      1665135119,
      0,
      0,
      10590229292221649,
      655459,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695349,
      1665135119,
      0,
      0,
      10329930074851775,
      658286,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695349,
      1665135119,
      0,
      0,
      10329930074851775,
      655459,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695349,
      1665135119,
      0,
      0,
      10079115726664122,
      658298,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695349,
      1665135119,
      0,
      0,
      10079115726664122,
      655471,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695349,
      1665135119,
      0,
      0,
      9837330857202396,
      658298,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695349,
      1665135119,
      0,
      0,
      9837330857202396,
      655471,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695349,
      1665135119,
      0,
      0,
      9604147085802353,
      240129,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695349,
      1665135119,
      0,
      0,
      9604147085802353,
      230665,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      11947374549189998,
      647999,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      11947374549189998,
      645171,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      10911041371635735,
      658253,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      10911041371635735,
      655424,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      4124733440873205,
      658253,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      4124733440873205,
      655424,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      11243925114758940,
      658253,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      11243925114758940,
      655424,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      9606968863806640,
      658253,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      9606968863806640,
      655424,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      11208564371503570,
      658263,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      11208564371503570,
      655435,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      10506272937794153,
      658253,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695350,
      1665135131,
      0,
      0,
      10506272937794153,
      655424,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695353,
      1665135167,
      0,
      0,
      87973419915121986,
      545609,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695353,
      1665135167,
      0,
      0,
      87973419915121986,
      540993,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695353,
      1665135167,
      0,
      0,
      8987129216316871,
      610582,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695353,
      1665135167,
      0,
      0,
      8987129216316871,
      606997,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695353,
      1665135167,
      0,
      0,
      7484251125339715,
      155565,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695353,
      1665135167,
      0,
      0,
      7484251125339715,
      144757,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695356,
      1665135203,
      0,
      0,
      32898731189933874,
      372096,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695356,
      1665135203,
      0,
      0,
      32898731189933874,
      364726,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695356,
      1665135203,
      0,
      0,
      71353119985335937,
      369339,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695356,
      1665135203,
      0,
      0,
      63842265250037417,
      359213,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695356,
      1665135203,
      0,
      0,
      7510854735298520,
      328030,
      0,
      0,
      0,
      0,
      106626,
      0
    ],
    [
      15695356,
      1665135203,
      0,
      0,
      3629867390339733,
      218234,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695356,
      1665135203,
      0,
      0,
      64705062312294309,
      369351,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695356,
      1665135203,
      0,
      0,
      57894003121526487,
      359225,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695356,
      1665135203,
      0,
      0,
      6811059190767822,
      328042,
      0,
      0,
      0,
      0,
      89526,
      0
    ],
    [
      15695356,
      1665135203,
      0,
      0,
      3285542972960519,
      235079,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695357,
      1665135215,
      0,
      0,
      75785173231332881,
      417778,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695357,
      1665135215,
      0,
      0,
      68826885275163420,
      408376,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695357,
      1665135215,
      0,
      0,
      6958287956169461,
      377193,
      0,
      0,
      0,
      0,
      89526,
      0
    ],
    [
      15695357,
      1665135215,
      0,
      0,
      3392687182347217,
      283462,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695358,
      1665135227,
      0,
      0,
      4356320025626182,
      244819,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695358,
      1665135227,
      0,
      0,
      4356320025626182,
      235591,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695377,
      1665135455,
      0,
      0,
      110115960238523257,
      243713,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695377,
      1665135455,
      0,
      0,
      110115960238523257,
      234464,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695382,
      1665135515,
      0,
      0,
      12695731382185749,
      537686,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695382,
      1665135515,
      0,
      0,
      12695731382185749,
      533104,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695382,
      1665135515,
      0,
      0,
      3956699723710311,
      253960,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695382,
      1665135515,
      0,
      0,
      3956699723710311,
      244712,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695385,
      1665135551,
      0,
      0,
      4534855076671661,
      239069,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695385,
      1665135551,
      0,
      0,
      4534855076671661,
      229584,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695386,
      1665135563,
      0,
      0,
      8806814891104067,
      228810,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695386,
      1665135563,
      0,
      0,
      8806814891104067,
      219325,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695387,
      1665135575,
      0,
      0,
      7352558706142597,
      228810,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695387,
      1665135575,
      0,
      0,
      7352558706142597,
      219325,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695390,
      1665135611,
      0,
      0,
      9811788912547576,
      20490,
      0,
      1,
      0,
      0,
      55,
      0
    ],
    [
      15695390,
      1665135611,
      0,
      0,
      9811788912547576,
      7535,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      15695391,
      1665135623,
      0,
      0,
      9811788912547576,
      10232,
      0,
      1,
      0,
      0,
      55,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      9811788912547576,
      364162,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      9811788912547576,
      356825,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      6325937801611635,
      374415,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      6325937801611635,
      367078,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      3458705759224296,
      1709822,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      3458705759224296,
      1723682,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      3127109302210786,
      1709845,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      3127109302210786,
      1723706,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      4057816003015300,
      1709822,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      4057816003015300,
      1723682,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      3557363809174753,
      660561,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      3557363809174753,
      657766,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      3616679650332330,
      660561,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695393,
      1665135647,
      0,
      0,
      3616679650332330,
      657766,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      15695398,
      1665135707,
      0,
      0,
      67803014901316410,
      239074,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15695398,
      1665135707,
      0,
      0,
      67803014901316410,
      229590,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "// SPDX-License-Identifier: MIT\n/*\nhttps://www.youtube.com/watch?v=cZYNADOHhVY\nhttps://twitter.com/VitalikButerin\nIt relates the misery inflicted by a dragon-tyrant (a personification of the ageing process and death), \nwho demands a tribute of thousands of people's lives per day and the actions of the people, including the king, who come together to fight back, eventually killing the dragon-tyrant.\n*/\n\npragma solidity ^0.8.9;\ncontract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n}\ncontract ERC20Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"ERC20Ownable: caller is not the owner\");\n        _;\n    }\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"ERC20Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\nlibrary SafeMath {\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n}\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n    function functionCall(address target, bytes memory data)\n        internal\n        returns (bytes memory)\n    {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(\n            data\n        );\n        if (success) {\n            return returndata;\n        } else {\n            if (returndata.length > 0) {\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address owner) external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 value) external returns (bool);\n    function transfer(address to, uint256 value) external returns (bool);\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint256);\n    function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\n    event Burn(address indexed sender, uint256 amount0, uint256 amount1, address indexed to);\n    event Swap(address indexed sender, uint256 amount0In, uint256 amount1In, uint256 amount0Out, uint256 amount1Out, address indexed to);\n    event Sync(uint112 reserve0, uint112 reserve1);\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint256);\n    function price1CumulativeLast() external view returns (uint256);\n    function kLast() external view returns (uint256);\n    function burn(address to) external returns (uint256 amount0, uint256 amount1);\n    function swap(uint256 amount0Out, uint256 amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n    function initialize(address, address) external;\n}\n\ncontract TYRANT is Context, IERC20, ERC20Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    string private constant tokenName = \"Fable of the Dragon\";\n    string private constant tokenSymbol = \"TYRANT\";\n    uint8 private constant tokenDecimal = 18;\n    uint256 private constant tokenSupply = 1e12 * 10**tokenDecimal;\n\n    mapping(address => mapping(address => uint256)) private tokenAllowances;\n    mapping(address => uint256) private tokenBalance;\n    mapping(address => bool) private isContractsExcluded;\n    mapping(address => bool) private isMaxWalletExcluded;\n    mapping(address => bool) private isTaxExcluded;\n    mapping(address => bool) public isSniper;\n    mapping(address => bool) public isBot;\n\n    address payable liquidityAddress;\n    address payable marketingAddress;\n    address payable devAddress;\n    address dead = address(0xdead);\n    address public uniV2Pair;\n    IUniswapV2Router02 public uniV2Router;\n    address public uniV3Router;\n    \n    uint256 private maxWallet;\n    uint256 private minTaxSwap;\n    uint256 private marketingTokens;\n    uint256 private liquidityTokens;\n\tuint256 private totalBurnedTokens;\n\n    uint256 private marketingTax;\n    uint256 private liquidityTax;\n    uint256 private divForSplitTax;\n    uint256 private taxBuyMarketing;\n    uint256 private taxBuyLiquidity;\n    uint256 private taxSellMarketing;\n    uint256 private taxSellTreasury;\n    uint256 private taxSellLiquidity;\n\n    uint256 public activeTradingBlock;\n    uint256 public sniperPenaltyEnd;\n\n    bool public limitsOn = false;\n    bool public maxWalletOn = false;\n    bool public live = false;\n    bool public contractBlocker = false;\n    bool inSwapAndLiquify;\n    bool private swapAndLiquifyStatus = false;\n    modifier lockTheSwap() {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n    constructor() payable {\n        tokenBalance[address(this)] = tokenSupply;\n        maxWallet = tokenSupply.mul(4).div(100);\n        minTaxSwap = tokenSupply.mul(5).div(10000);\n\n        marketingAddress = payable(0xd02b2269319e2c3C10cd35b42936bE5A5df75600);\n        devAddress = payable(0xd02b2269319e2c3C10cd35b42936bE5A5df75600);\n\n        liquidityAddress = payable(owner()); //LEAVE AS OWNER\n\n        taxBuyMarketing = 25;\n        taxBuyLiquidity = 0;\n        taxSellMarketing = 25;\n        taxSellLiquidity = 0;\n\n        isContractsExcluded[address(this)] = true;\n        isTaxExcluded[owner()] = true;\n        isTaxExcluded[dead] = true;\n        isTaxExcluded[address(this)] = true;\n        isTaxExcluded[marketingAddress] = true;\n        isTaxExcluded[liquidityAddress] = true;\n        isMaxWalletExcluded[address(this)] = true;\n        isMaxWalletExcluded[owner()] = true;\n        isMaxWalletExcluded[marketingAddress] = true;\n        isMaxWalletExcluded[liquidityAddress] = true;\n        isMaxWalletExcluded[dead] = true;\n        \n        emit Transfer(address(0), address(this), tokenSupply);\n    }\n    receive() external payable {}\n    function name() external pure override returns (string memory) {\n        return tokenName;\n    }\n    function symbol() external pure override returns (string memory) {\n        return tokenSymbol;\n    }\n    function decimals() external pure override returns (uint8) {\n        return tokenDecimal;\n    }\n    function totalSupply() external pure override returns (uint256) {\n        return tokenSupply;\n    }\n    function balanceOf(address account) public view override returns (uint256) {\n        return tokenBalance[account];\n    }\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return tokenAllowances[owner][spender];\n    }\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        require(_msgSender() != address(0), \"ERC20: Can not approve from zero address\");\n        require(spender != address(0), \"ERC20: Can not approve to zero address\");\n        tokenAllowances[_msgSender()][spender] = amount;\n        emit Approval(_msgSender(), spender, amount);\n        return true;\n    }\n    function internalApprove(address owner,address spender,uint256 amount) internal {\n        require(owner != address(0), \"ERC20: Can not approve from zero address\");\n        require(spender != address(0), \"ERC20: Can not approve to zero address\");\n        tokenAllowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        internalTransfer(_msgSender(), recipient, amount);\n        return true;\n    }\n    function transferFrom(address sender,address recipient,uint256 amount) external override returns (bool) {\n        internalTransfer(sender, recipient, amount);\n        internalApprove(sender,_msgSender(),\n        tokenAllowances[sender][_msgSender()].sub(amount, \"ERC20: Can not transfer. Amount exceeds allowance\"));\n        return true;\n    }\n    function AirDrop(address[] memory wallets, uint256[] memory percent) external onlyOwner{\n        require(wallets.length < 100, \"Can only airdrop 100 wallets per txn due to gas limits\");\n        for(uint256 i = 0; i < wallets.length; i++){\n            address wallet = wallets[i];\n            uint256 amount = tokenSupply.mul(percent[i]).div(100);\n            internalTransfer(_msgSender(), wallet, amount);\n        }\n    }\n    function GoLive() external onlyOwner returns (bool){\n        require(!live, \"ERC20: Trades already Live!\");\n        activeTradingBlock = block.number;\n        sniperPenaltyEnd = block.timestamp.add(2 days);\n        IUniswapV2Router02 _uniV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniV2Router = _uniV2Router;\n        uniV3Router = 0x68b3465833fb72A70ecDF485E0e4C7bD8665Fc45;\n        isContractsExcluded[address(uniV2Router)] = true;\n        isContractsExcluded[address(uniV3Router)] = true;\n        isMaxWalletExcluded[address(uniV2Router)] = true;\n        internalApprove(address(this), address(uniV2Router), tokenSupply);\n        uniV2Pair = IUniswapV2Factory(_uniV2Router.factory()).createPair(address(this), _uniV2Router.WETH());\n        isContractsExcluded[address(uniV2Pair)] = true;\n        isMaxWalletExcluded[address(uniV2Pair)] = true;\n        require(address(this).balance > 0, \"ERC20: Must have ETH on contract to Go Live!\");\n        addLiquidity(balanceOf(address(this)), address(this).balance);\n        launchSetLiquidityAddress(dead);\n        maxWalletOn = true;\n        swapAndLiquifyStatus = true;\n        limitsOn = true;\n        live = true;\n        return true;\n    }\n    function internalTransfer(address from, address to, uint256 amount) internal {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"ERC20: Transfer amount must be greater than zero\");\n        require(!isBot[from], \"ERC20: Can not transfer from BOT\");\n        if(!live){\n            require(isTaxExcluded[from] || isTaxExcluded[to], \"ERC20: Trading Is Not Live!\");\n        }\n        if (maxWalletOn == true && ! isMaxWalletExcluded[to]) {\n            require(balanceOf(to).add(amount) <= maxWallet, \"ERC20: Max amount of tokens for wallet reached\");\n        }\n        if(limitsOn){\n            if (from != owner() && to != owner() && to != address(0) && to != dead && to != uniV2Pair) {\n                for (uint x = 0; x < 3; x++) {\n                    if(block.number == activeTradingBlock.add(x)) {\n                        isSniper[to] = true;\n                    }\n                }\n            }\n        }\n        if(contractBlocker) {\n            require(\n                !isContract(to) && isContractsExcluded[from] ||\n                !isContract(from) && isContractsExcluded[to] || \n                isContract(from) && isContractsExcluded[to] || \n                isContract(to) && isContractsExcluded[from]\n                );\n        }\n        uint256 totalTokensToSwap = liquidityTokens.add(marketingTokens);\n        uint256 contractTokenBalance = balanceOf(address(this));\n        bool overMinimumTokenBalance = contractTokenBalance >= minTaxSwap;\n        if (!inSwapAndLiquify && swapAndLiquifyStatus && balanceOf(uniV2Pair) > 0 && totalTokensToSwap > 0 && !isTaxExcluded[to] && !isTaxExcluded[from] && to == uniV2Pair && overMinimumTokenBalance) {\n            taxTokenSwap();\n            }\n        if (isTaxExcluded[from] || isTaxExcluded[to]) {\n            marketingTax = 0;\n            liquidityTax = 0;\n            divForSplitTax = marketingTax.add(liquidityTax);\n        } else {\n            if (from == uniV2Pair) {\n                marketingTax = taxBuyMarketing;\n                liquidityTax = taxBuyLiquidity;\n                divForSplitTax = taxBuyMarketing.add(taxBuyLiquidity);\n            }else if (to == uniV2Pair) {\n                marketingTax = taxSellMarketing;\n                liquidityTax = taxSellLiquidity;\n                divForSplitTax = taxSellMarketing.add(taxSellLiquidity);\n                if(isSniper[from] && sniperPenaltyEnd >= block.timestamp){\n                    marketingTax = 85;\n                    liquidityTax = 10;\n                    divForSplitTax = marketingTax.add(liquidityTax);\n                }\n            }else {\n                require(!isSniper[from] || sniperPenaltyEnd <= block.timestamp, \"ERC20: Snipers can not transfer till penalty time is over\");\n                marketingTax = 0;\n                liquidityTax = 0;\n            }\n        }\n        tokenTransfer(from, to, amount);\n    }\n    function taxTokenSwap() internal lockTheSwap {\n        uint256 contractBalance = balanceOf(address(this));\n        uint256 totalTokensToSwap = marketingTokens.add(liquidityTokens);\n        uint256 swapLiquidityTokens = liquidityTokens.div(2);\n        uint256 amountToSwapForETH = contractBalance.sub(swapLiquidityTokens);\n        uint256 initialETHBalance = address(this).balance;\n        swapTokensForETH(amountToSwapForETH); \n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\n        uint256 ethForMarketing = ethBalance.mul(marketingTokens).div(totalTokensToSwap);\n        uint256 ethForLiquidity = ethBalance.sub(ethForMarketing);\n        marketingTokens = 0;\n        liquidityTokens = 0;\n        (bool success,) = address(marketingAddress).call{value: ethForMarketing}(\"\");\n        if(ethForLiquidity != 0 && swapLiquidityTokens != 0) {\n            addLiquidity(swapLiquidityTokens, ethForLiquidity);\n        }\n        if(address(this).balance > 5 * 1e17){\n            (success,) = address(devAddress).call{value: address(this).balance}(\"\");\n        }\n    }\n    function swapTokensForETH(uint256 tokenAmount) internal {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniV2Router.WETH();\n        internalApprove(address(this), address(uniV2Router), tokenAmount);\n        uniV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) internal {\n        internalApprove(address(this), address(uniV2Router), tokenAmount);\n        uniV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0,\n            0,\n            liquidityAddress,\n            block.timestamp\n        );\n    }\n    function calculateTax(uint256 amount) internal view returns (uint256) {\n        return amount.mul(marketingTax.add(liquidityTax)).div(100);\n    }\n    function splitTaxTokens(uint256 taxTokens) internal {\n        marketingTokens += taxTokens.mul(marketingTax).div(divForSplitTax);\n        liquidityTokens += taxTokens.mul(liquidityTax).div(divForSplitTax);\n    }\n    function tokenTransfer(address sender,address recipient,uint256 amount) internal {\n        if(divForSplitTax != 0){\n            uint256 taxTokens = calculateTax(amount);\n            uint256 transferTokens = amount.sub(taxTokens);\n            splitTaxTokens(taxTokens);\n            tokenBalance[sender] -= amount;\n            tokenBalance[recipient] += transferTokens;\n            tokenBalance[address(this)] += taxTokens;\n            emit Transfer(sender, recipient, transferTokens);\n        }else{\n            tokenBalance[sender] -= amount;\n            tokenBalance[recipient] += amount;\n            emit Transfer(sender, recipient, amount);\n        }\n    }\n    function launchSetLiquidityAddress(address LPAddress) internal {\n        liquidityAddress = payable(LPAddress);\n        isTaxExcluded[liquidityAddress] = true;\n    }\n    function isContract(address account) public view returns (bool) {\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        assembly {\n            codehash := extcodehash(account)\n        }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n    function addRemoveContract(address account, bool trueORfalse) external onlyOwner {\n        isContractsExcluded[account] = trueORfalse;\n    }\n    function isExcludedContract(address account) public view returns (bool) {\n        return isContractsExcluded[account];\n    }\n    function withdrawStuckETH() external onlyOwner {\n        bool success;\n        (success,) = address(owner()).call{value: address(this).balance}(\"\");\n    }\n    function withdrawStuckTokens(uint256 percent) external onlyOwner {\n        internalTransfer(address(this), owner(), tokenSupply*percent/100);\n    }\n    function manualBurnTokensFromLP(uint256 percent) external onlyOwner returns (bool){\n        require(percent <= 10, \"ERC20: May not nuke more than 10% of tokens in LP\");\n        uint256 liquidityPairBalance = this.balanceOf(uniV2Pair);\n        uint256 amountToBurn = liquidityPairBalance.mul(percent).div(10**2);\n        if (amountToBurn > 0){\n            internalTransfer(uniV2Pair, dead, amountToBurn);\n        }\n        totalBurnedTokens = balanceOf(dead);\n        require(totalBurnedTokens <= tokenSupply * 50 / 10**2, \"ERC20: Can not burn more then 50% of supply\");\n        IUniswapV2Pair pair = IUniswapV2Pair(uniV2Pair);\n        pair.sync();\n        return true;\n    }\n    function manualSwapTax() external onlyOwner {\n        uint256 contractBalance = balanceOf(address(this));\n        require(contractBalance >= tokenSupply.mul(5).div(10000), \"ERC20: Can only swap back if more than 0.05% of tokens stuck on contract\");\n        taxTokenSwap();\n    }\n    function addBot(address account) external onlyOwner {\n        require(!isBot[account], \"ERC20: Account already added\");\n        isBot[account] = true;\n    }\n\tfunction removeBot(address account) external onlyOwner {\n        require(isBot[account], \"ERC20: Account is not bot\");\n        isBot[account] = false;\n    }\n\tfunction removeSniper(address account) external onlyOwner {\n        require(isSniper[account], \"ERC20: Account is not sniper\");\n        isSniper[account] = false;\n    }\n    function setExcludedContractAccount(address account, bool trueORfalse) external onlyOwner {\n        isContractsExcluded[address(account)] = trueORfalse;\n    }\n    function setExcludedFromTax(address account, bool trueORfalse) external onlyOwner {\n        isTaxExcluded[address(account)] = trueORfalse;\n    }\n    function setExcludedFromMaxWallet(address account, bool trueORfalse) external onlyOwner {\n        isMaxWalletExcluded[address(account)] = trueORfalse;\n    }\n    function setMaxWalletAmount(uint256 percent, uint256 divider) external onlyOwner {\n        maxWallet = tokenSupply.mul(percent).div(divider);\n        require(maxWallet <=tokenSupply.mul(100).div(100), \"ERC20: Can not set max wallet more than 4%\");\n    }\n    function setStatusLimits(bool trueORfalse) external onlyOwner {\n        limitsOn = trueORfalse;\n    }\n    function setStatusMaxWallet(bool trueORfalse) external onlyOwner {\n       maxWalletOn = trueORfalse;\n    }\n    function setStatusContractBlocker(bool trueORfalse) external onlyOwner {\n        contractBlocker = trueORfalse;\n    }\n    function setSwapAndLiquifyStatus(bool trueORfalse) external onlyOwner {\n        swapAndLiquifyStatus = trueORfalse;\n    }\n    function setTaxes(uint256 buyMarketingTax, uint256 buyLiquidityTax, uint256 sellMarketingTax, uint256 sellLiquidityTax) external onlyOwner {\n        taxBuyMarketing = buyMarketingTax;\n        taxBuyLiquidity = buyLiquidityTax;\n        taxSellMarketing = sellMarketingTax;\n        taxSellLiquidity = sellLiquidityTax;\n    }\n    function viewTaxes() public view returns(uint256 marketingBuy, uint256 liquidityBuy, uint256 marketingSell, uint256 liquiditySell) {\n        return(taxBuyMarketing,taxBuyLiquidity,taxSellMarketing,taxSellLiquidity);\n    }\n}"
}