{
  "opcode_sequence": "RETURNDATASIZE PUSH1 DUP1 PUSH1 RETURNDATASIZE CODECOPY DUP2 RETURN CALLDATASIZE RETURNDATASIZE RETURNDATASIZE CALLDATACOPY RETURNDATASIZE RETURNDATASIZE RETURNDATASIZE CALLDATASIZE RETURNDATASIZE PUSH20 GAS DELEGATECALL RETURNDATASIZE DUP3 DUP1 RETURNDATACOPY SWAP1 RETURNDATASIZE SWAP2 PUSH1 JUMPI REVERT JUMPDEST RETURN",
  "opcode_entropy": 3.6258072359050906,
  "opcode_count": 32,
  "unique_opcodes": 18,
  "byte_entropy": 4.950673342574799,
  "byte_0x": 0.017857142857142856,
  "byte_3d": 0.17857142857142858,
  "byte_60": 0.05357142857142857,
  "byte_2d": 0.017857142857142856,
  "byte_80": 0.03571428571428571,
  "byte_0a": 0.017857142857142856,
  "byte_39": 0.017857142857142856,
  "byte_81": 0.017857142857142856,
  "byte_f3": 0.03571428571428571,
  "byte_36": 0.03571428571428571,
  "byte_37": 0.017857142857142856,
  "byte_73": 0.017857142857142856,
  "byte_84": 0.017857142857142856,
  "byte_43": 0.017857142857142856,
  "byte_a5": 0.017857142857142856,
  "byte_bd": 0.017857142857142856,
  "byte_91": 0.03571428571428571,
  "byte_c8": 0.017857142857142856,
  "byte_f6": 0.017857142857142856,
  "byte_85": 0.017857142857142856,
  "byte_82": 0.03571428571428571,
  "byte_f9": 0.017857142857142856,
  "byte_0d": 0.017857142857142856,
  "byte_d3": 0.017857142857142856,
  "byte_35": 0.017857142857142856,
  "byte_4f": 0.017857142857142856,
  "byte_75": 0.017857142857142856,
  "byte_09": 0.017857142857142856,
  "byte_00": 0.017857142857142856,
  "byte_c5": 0.017857142857142856,
  "byte_e8": 0.017857142857142856,
  "byte_cc": 0.017857142857142856,
  "byte_5a": 0.017857142857142856,
  "byte_f4": 0.017857142857142856,
  "byte_3e": 0.017857142857142856,
  "byte_90": 0.017857142857142856,
  "byte_2b": 0.017857142857142856,
  "byte_57": 0.017857142857142856,
  "byte_fd": 0.017857142857142856,
  "byte_5b": 0.017857142857142856,
  "num_nodes": 6,
  "num_edges": 5,
  "avg_degree": 1.6666666666666667,
  "density": 0.16666666666666666,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 5,
  "event_nums": 15,
  "creation_block": 15673390,
  "creation_timestamp": 1664869775,
  "life_time": 42.0,
  "duration_seconds": 504.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 7,
  "num_buyers": 1,
  "num_sellers": 5,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.11627906976744186,
  "avg_gas_limit": 97888.8,
  "std_gas_limit": 70112.21612358291,
  "avg_gas_used": 41023.8,
  "std_gas_used": 15996.4,
  "avg_gas_price": 6625402630.2,
  "std_gas_price": 3335435484.8785887,
  "transfer_num": 11,
  "approve_num": 4,
  "timeline_sequence": [
    [
      15673400,
      1664869895,
      1,
      73,
      0,
      59247,
      7668773606,
      0,
      1,
      7845831,
      49022,
      7456911
    ],
    [
      15673409,
      1664870003,
      70,
      48,
      0,
      74060,
      8586035540,
      0,
      1,
      5052788,
      49022,
      7456902
    ],
    [
      15673422,
      1664870159,
      8734,
      65,
      0,
      59247,
      8089893595,
      0,
      1,
      4697387,
      49022,
      7456889
    ],
    [
      15673432,
      1664870279,
      309,
      41,
      0,
      59247,
      8782310410,
      0,
      1,
      4408193,
      49022,
      7456879
    ],
    [
      15673390,
      1664869775,
      0,
      0,
      0,
      237643,
      0,
      0,
      0,
      0,
      9031,
      0
    ]
  ],
  "sourcecode": "/**\n *Submitted for verification at BscScan.com on 2021-07-01\n*/\n\n// File: contracts/lib/SafeMath.sol\n\n/*\n\n    Copyright 2020 DODO ZOO.\n    SPDX-License-Identifier: Apache-2.0\n\n*/\n\npragma solidity 0.6.9;\n\n\n/**\n * @title SafeMath\n * @author DODO Breeder\n *\n * @notice Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"MUL_ERROR\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"DIVIDING_ERROR\");\n        return a / b;\n    }\n\n    function divCeil(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 quotient = div(a, b);\n        uint256 remainder = a - quotient * b;\n        if (remainder > 0) {\n            return quotient + 1;\n        } else {\n            return quotient;\n        }\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SUB_ERROR\");\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"ADD_ERROR\");\n        return c;\n    }\n\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = x / 2 + 1;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n// File: contracts/external/ERC20/InitializableERC20.sol\n\n\n\ncontract InitializableERC20 {\n    using SafeMath for uint256;\n\n    string public name;\n    uint8 public decimals;\n    string public symbol;\n    uint256 public totalSupply;\n\n    bool public initialized;\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    function init(\n        address _creator,\n        uint256 _totalSupply,\n        string memory _name,\n        string memory _symbol,\n        uint8 _decimals\n    ) public {\n        require(!initialized, \"TOKEN_INITIALIZED\");\n        initialized = true;\n        totalSupply = _totalSupply;\n        balances[_creator] = _totalSupply;\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        emit Transfer(address(0), _creator, _totalSupply);\n    }\n\n    function transfer(address to, uint256 amount) public returns (bool) {\n        require(to != address(0), \"TO_ADDRESS_IS_EMPTY\");\n        require(amount <= balances[msg.sender], \"BALANCE_NOT_ENOUGH\");\n\n        balances[msg.sender] = balances[msg.sender].sub(amount);\n        balances[to] = balances[to].add(amount);\n        emit Transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    function balanceOf(address owner) public view returns (uint256 balance) {\n        return balances[owner];\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public returns (bool) {\n        require(to != address(0), \"TO_ADDRESS_IS_EMPTY\");\n        require(amount <= balances[from], \"BALANCE_NOT_ENOUGH\");\n        require(amount <= allowed[from][msg.sender], \"ALLOWANCE_NOT_ENOUGH\");\n\n        balances[from] = balances[from].sub(amount);\n        balances[to] = balances[to].add(amount);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(amount);\n        emit Transfer(from, to, amount);\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        allowed[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return allowed[owner][spender];\n    }\n}"
}