{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 PUSH1 SSTORE PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 PUSH1 SSTORE PUSH2 PUSH1 SSTORE PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 PUSH1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH3 SWAP3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST POP DUP1 PUSH1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH3 SWAP3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST POP POP POP PUSH3 PUSH3 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH1 PUSH20 SWAP1 POP PUSH3 DUP2 PUSH1 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST DUP1 PUSH20 AND PUSH1 DUP2 PUSH20 AND DUP2 MSTORE POP POP DUP1 PUSH20 AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH20 AND PUSH4 ADDRESS DUP4 PUSH20 AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH3 SWAP3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH20 AND PUSH1 DUP2 PUSH20 AND DUP2 MSTORE POP POP PUSH3 PUSH1 MLOAD PUSH1 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH3 PUSH1 MLOAD PUSH1 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH1 PUSH1 SWAP1 POP PUSH1 DUP1 PUSH1 PUSH1 SWAP1 POP PUSH1 DUP1 PUSH1 PUSH11 SWAP1 POP PUSH10 PUSH1 DUP2 SWAP1 SSTORE POP PUSH10 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 DUP3 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP DUP7 PUSH1 DUP2 SWAP1 SSTORE POP DUP6 PUSH1 DUP2 SWAP1 SSTORE POP DUP5 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 SLOAD PUSH1 SLOAD PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP DUP4 PUSH1 DUP2 SWAP1 SSTORE POP DUP3 PUSH1 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 SLOAD PUSH1 SLOAD PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH20 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH20 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH3 PUSH3 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH1 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH3 ADDRESS PUSH1 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH3 PUSH2 PUSH1 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH3 PUSH3 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH1 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH3 ADDRESS PUSH1 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH3 PUSH2 PUSH1 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH3 CALLER DUP3 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST POP POP POP POP POP POP POP POP PUSH3 JUMP JUMPDEST PUSH1 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP DUP2 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 AND DUP2 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH3 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH20 AND PUSH3 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH20 AND EQ PUSH3 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH3 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP1 ISZERO ISZERO DUP3 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH3 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH20 AND PUSH3 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH20 AND EQ PUSH3 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH3 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP2 PUSH20 AND PUSH32 DUP3 PUSH1 MLOAD PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND EQ ISZERO PUSH3 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH3 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 PUSH1 DUP4 DUP4 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 DUP1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND PUSH1 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH3 PUSH1 DUP4 DUP4 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 SWAP1 PUSH3 JUMP JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 JUMPI PUSH1 DUP6 SSTORE PUSH3 JUMP JUMPDEST DUP3 PUSH1 LT PUSH3 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH3 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 JUMPI PUSH1 DUP2 PUSH1 SWAP1 SSTORE POP PUSH1 ADD PUSH3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH3 DUP3 PUSH3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 DUP2 PUSH3 JUMP JUMPDEST DUP2 EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP PUSH3 DUP2 PUSH3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST JUMPDEST PUSH1 PUSH3 DUP5 DUP3 DUP6 ADD PUSH3 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH3 DUP2 PUSH3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH3 PUSH1 DUP4 ADD DUP6 PUSH3 JUMP JUMPDEST PUSH3 PUSH1 DUP4 ADD DUP5 PUSH3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH3 DUP3 PUSH3 JUMP JUMPDEST SWAP2 POP PUSH3 DUP4 PUSH3 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH3 DUP3 PUSH3 JUMP JUMPDEST SWAP2 POP PUSH3 DUP4 PUSH3 JUMP JUMPDEST SWAP3 POP DUP3 PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH3 DUP3 PUSH3 JUMP JUMPDEST SWAP2 POP PUSH3 DUP4 PUSH3 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 SUB DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH3 PUSH1 DUP4 PUSH3 JUMP JUMPDEST SWAP2 POP PUSH3 DUP3 PUSH3 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH3 DUP2 PUSH3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 DUP2 PUSH3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH3 PUSH1 DUP4 ADD DUP5 PUSH3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH3 PUSH1 DUP4 PUSH3 JUMP JUMPDEST SWAP2 POP PUSH3 DUP3 PUSH3 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH3 DUP2 PUSH3 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH3 DUP2 PUSH3 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH3 PUSH1 DUP4 ADD DUP5 PUSH3 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DIV SWAP1 POP PUSH1 DUP3 AND DUP1 PUSH3 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 EQ ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 MLOAD PUSH1 MLOAD PUSH2 PUSH3 PUSH1 CODECOPY PUSH1 DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE PUSH2 ADD MSTORE PUSH1 DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE DUP2 DUP2 PUSH2 ADD MSTORE PUSH2 ADD MSTORE PUSH2 PUSH1 RETURN UNKNOWN_0xfexfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 PUSH8 UNKNOWN_0xd6 UNKNOWN_0xeb UNKNOWN_0x24 UNKNOWN_0xbd DUP9 UNKNOWN_0xc6 UNKNOWN_0x1e CODECOPY UNKNOWN_0xd4 SGT UNKNOWN_0xbb PUSH14 INVALID_0x6c",
  "opcode_entropy": 4.662101206284189,
  "opcode_count": 13314,
  "unique_opcodes": 89,
  "byte_entropy": 5.509566472723552,
  "byte_0x": 3.6157211555844816e-05,
  "byte_60": 0.06005712839425823,
  "byte_c0": 0.0003615721155584481,
  "byte_40": 0.012148823082763858,
  "byte_52": 0.012257294717431392,
  "byte_19": 0.002892576924467585,
  "byte_0b": 0.0018078605777922406,
  "byte_55": 0.003290306251581878,
  "byte_00": 0.12224753227031131,
  "byte_0c": 0.0022417471164623785,
  "byte_61": 0.0557544202191127,
  "byte_01": 0.02082655385616661,
  "byte_0a": 0.004158079328922154,
  "byte_81": 0.02035651010594063,
  "byte_54": 0.00773764327295079,
  "byte_ff": 0.16560002892576925,
  "byte_02": 0.003217991828470188,
  "byte_16": 0.01232960914054308,
  "byte_90": 0.034674765882055175,
  "byte_83": 0.006869870195610515,
  "byte_15": 0.00990707596630148,
  "byte_17": 0.001771703366236396,
  "byte_50": 0.034385508189608414,
  "byte_0e": 0.0018078605777922406,
  "byte_10": 0.0014101312506779478,
  "byte_0d": 0.0022417471164623785,
  "byte_07": 0.0012293451928987236,
  "byte_08": 0.0034349350978052575,
  "byte_0f": 0.0013016596160104132,
  "byte_11": 0.002892576924467585,
  "byte_13": 0.0015186028853454822,
  "byte_34": 0.0027117908666883608,
  "byte_80": 0.018657121162815923,
  "byte_62": 0.00683371298405467,
  "byte_a9": 0.00039772932711429294,
  "byte_57": 0.01164262212098203,
  "byte_fd": 0.005351267310265032,
  "byte_5b": 0.04281013848212026,
  "byte_51": 0.010630220197418374,
  "byte_1b": 0.001916332212459775,
  "byte_20": 0.01659616010413277,
  "byte_7f": 0.005315110098709187,
  "byte_77": 0.001337816827566258,
  "byte_65": 0.004302708175145533,
  "byte_6e": 0.003145677405358499,
  "byte_74": 0.003145677405358499,
  "byte_79": 0.0024225331742416026,
  "byte_4f": 0.0009039302888961203,
  "byte_4d": 0.0011931879813428788,
  "byte_69": 0.001373974039122103,
  "byte_6c": 0.0016632317315688613,
  "byte_6f": 0.0028202625013558956,
  "byte_42": 0.0008677730773402755,
  "byte_63": 0.0051704812524858085,
  "byte_73": 0.010449434139639151,
  "byte_04": 0.007086813464945584,
  "byte_03": 0.00885851683118198,
  "byte_2e": 0.0009039302888961203,
  "byte_92": 0.00383266442491955,
  "byte_91": 0.01750009039302889,
  "byte_56": 0.03254149040026033,
  "byte_47": 0.0016632317315688613,
  "byte_6a": 0.0005423581733376722,
  "byte_5e": 0.0003615721155584481,
  "byte_05": 0.002133275481794844,
  "byte_ca": 0.00028925769244675853,
  "byte_1c": 0.0015186028853454822,
  "byte_d2": 0.00021694326933506888,
  "byte_7a": 0.0005062009617818274,
  "byte_25": 0.0009039302888961203,
  "byte_30": 0.0015909173084571718,
  "byte_b4": 0.0005062009617818274,
  "byte_cf": 0.00028925769244675853,
  "byte_53": 0.0009400875004519652,
  "byte_97": 0.0005062009617818274,
  "byte_39": 0.0010847163466753444,
  "byte_df": 0.0003254149040026033,
  "byte_2c": 0.0005785153848935171,
  "byte_5d": 0.0002531004808909137,
  "byte_ac": 0.0003254149040026033,
  "byte_c6": 0.00028925769244675853,
  "byte_59": 0.0011570307697870341,
  "byte_f2": 0.0005785153848935171,
  "byte_48": 0.001373974039122103,
  "byte_8d": 0.0003615721155584481,
  "byte_96": 0.0005785153848935171,
  "byte_06": 0.0015547600969013269,
  "byte_98": 0.0005785153848935171,
  "byte_c4": 0.00028925769244675853,
  "byte_5a": 0.0014824456737896374,
  "byte_e0": 0.0008316158657844307,
  "byte_86": 0.0016993889431247062,
  "byte_fa": 0.0004700437502259826,
  "byte_3d": 0.0016993889431247062,
  "byte_3e": 0.0011931879813428788,
  "byte_1f": 0.0018440177893480855,
  "byte_82": 0.012980438948548287,
  "byte_3c": 0.0008677730773402755,
  "byte_24": 0.0009762447120078099,
  "byte_c9": 0.0015909173084571718,
  "byte_ad": 0.0005785153848935171,
  "byte_5c": 0.0005062009617818274,
  "byte_46": 0.0026033192320208264,
  "byte_a4": 0.0005785153848935171,
  "byte_e9": 0.0003615721155584481,
  "byte_67": 0.0010485591351194995,
  "byte_87": 0.001373974039122103,
  "byte_f1": 0.0014101312506779478,
  "byte_09": 0.0015909173084571718,
  "byte_2f": 0.0003254149040026033,
  "byte_a0": 0.0023140615395740682,
  "byte_8c": 0.00039772932711429294,
  "byte_28": 0.001771703366236396,
  "byte_ec": 0.0005062009617818274,
  "byte_f6": 0.00028925769244675853,
  "byte_7e": 0.00021694326933506888,
  "byte_35": 0.0006869870195610515,
  "byte_58": 0.0008677730773402755,
  "byte_f0": 0.00014462884622337926,
  "byte_e1": 0.0003615721155584481,
  "byte_18": 0.001337816827566258,
  "byte_a1": 0.0006146725964493618,
  "byte_e8": 0.00039772932711429294,
  "byte_e2": 0.0005785153848935171,
  "byte_cd": 0.00039772932711429294,
  "byte_ee": 0.00021694326933506888,
  "byte_85": 0.0018440177893480855,
  "byte_84": 0.0029648913475792747,
  "byte_1e": 0.0014101312506779478,
  "byte_95": 0.0005785153848935171,
  "byte_2a": 0.0006146725964493618,
  "byte_14": 0.005062009617818274,
  "byte_1a": 0.0009400875004519652,
  "byte_66": 0.0009039302888961203,
  "byte_8b": 0.0004700437502259826,
  "byte_7b": 0.0008316158657844307,
  "byte_ab": 0.0003254149040026033,
  "byte_4a": 0.0020248038471273096,
  "byte_23": 0.0010847163466753444,
  "byte_3b": 0.0007231442311168962,
  "byte_d5": 0.0003254149040026033,
  "byte_fe": 0.0011931879813428788,
  "byte_db": 0.00021694326933506888,
  "byte_9e": 0.0005062009617818274,
  "byte_6b": 0.0006508298080052066,
  "byte_38": 0.0006869870195610515,
  "byte_4b": 0.0005062009617818274,
  "byte_de": 0.00039772932711429294,
  "byte_aa": 0.00039772932711429294,
  "byte_bc": 0.00028925769244675853,
  "byte_33": 0.00043388653867013776,
  "byte_9c": 0.0003615721155584481,
  "byte_44": 0.0019524894240156199,
  "byte_d0": 0.0003615721155584481,
  "byte_49": 0.0016993889431247062,
  "byte_22": 0.0009400875004519652,
  "byte_a3": 0.0005423581733376722,
  "byte_da": 0.00028925769244675853,
  "byte_af": 0.00039772932711429294,
  "byte_e3": 0.0002531004808909137,
  "byte_64": 0.001735546154680551,
  "byte_a8": 0.00021694326933506888,
  "byte_ce": 0.0004700437502259826,
  "byte_27": 0.0005423581733376722,
  "byte_c3": 0.0019886466355714645,
  "byte_21": 0.0011570307697870341,
  "byte_f4": 0.0003615721155584481,
  "byte_bd": 0.0003254149040026033,
  "byte_bb": 0.0005062009617818274,
  "byte_d9": 0.00021694326933506888,
  "byte_b1": 0.0002531004808909137,
  "byte_dc": 0.0003254149040026033,
  "byte_d3": 0.00021694326933506888,
  "byte_9d": 0.0003254149040026033,
  "byte_8f": 0.0003615721155584481,
  "byte_ea": 0.00010847163466753444,
  "byte_d1": 0.00018078605777922406,
  "byte_b5": 0.00018078605777922406,
  "byte_26": 0.0006508298080052066,
  "byte_dd": 0.0006146725964493618,
  "byte_36": 0.001735546154680551,
  "byte_cc": 0.00043388653867013776,
  "byte_7d": 0.0002531004808909137,
  "byte_f3": 0.0020609610586831543,
  "byte_2d": 0.0003615721155584481,
  "byte_f7": 0.00021694326933506888,
  "byte_a2": 0.0003615721155584481,
  "byte_c8": 0.00039772932711429294,
  "byte_9b": 0.0002531004808909137,
  "byte_c2": 0.0005423581733376722,
  "byte_b0": 0.0002531004808909137,
  "byte_68": 0.0009400875004519652,
  "byte_fc": 0.00043388653867013776,
  "byte_37": 0.0007593014426727411,
  "byte_2b": 0.0004700437502259826,
  "byte_a7": 0.00039772932711429294,
  "byte_f5": 0.0002531004808909137,
  "byte_b3": 0.0004700437502259826,
  "byte_ef": 0.0002531004808909137,
  "byte_32": 0.0011208735582311892,
  "byte_88": 0.0009039302888961203,
  "byte_b6": 0.0006146725964493618,
  "byte_bf": 0.0003254149040026033,
  "byte_12": 0.0010124019235636548,
  "byte_ba": 0.00039772932711429294,
  "byte_93": 0.0007231442311168962,
  "byte_4e": 0.0008677730773402755,
  "byte_71": 0.0005785153848935171,
  "byte_94": 0.0005785153848935171,
  "byte_e7": 0.00028925769244675853,
  "byte_8a": 0.00021694326933506888,
  "byte_89": 0.00018078605777922406,
  "byte_e6": 0.00021694326933506888,
  "byte_3a": 0.0007954586542285859,
  "byte_72": 0.0026033192320208264,
  "byte_75": 0.0010847163466753444,
  "byte_45": 0.003615721155584481,
  "byte_43": 0.0010485591351194995,
  "byte_6d": 0.0010847163466753444,
  "byte_d8": 0.0003615721155584481,
  "byte_ae": 0.0002531004808909137,
  "byte_ed": 0.0003615721155584481,
  "byte_3f": 0.0005785153848935171,
  "byte_41": 0.0007593014426727411,
  "byte_d7": 0.0003254149040026033,
  "byte_9a": 0.00028925769244675853,
  "byte_a5": 0.0002531004808909137,
  "byte_cb": 0.00021694326933506888,
  "byte_c7": 0.0002531004808909137,
  "byte_f8": 0.0009762447120078099,
  "byte_b2": 0.0003254149040026033,
  "byte_b8": 0.0009039302888961203,
  "byte_76": 0.0003254149040026033,
  "byte_b9": 0.0003254149040026033,
  "byte_eb": 0.0002531004808909137,
  "byte_e4": 0.0013016596160104132,
  "byte_c1": 0.0003615721155584481,
  "byte_9f": 0.00028925769244675853,
  "byte_c5": 0.00018078605777922406,
  "byte_d6": 0.00028925769244675853,
  "byte_b7": 0.00028925769244675853,
  "byte_8e": 0.00039772932711429294,
  "byte_31": 0.0005423581733376722,
  "byte_e5": 0.00021694326933506888,
  "byte_a6": 0.00021694326933506888,
  "byte_be": 0.00021694326933506888,
  "byte_70": 0.0008316158657844307,
  "byte_4c": 0.0015909173084571718,
  "byte_99": 0.0002531004808909137,
  "byte_1d": 0.0007593014426727411,
  "byte_29": 0.0005062009617818274,
  "byte_78": 0.0005785153848935171,
  "byte_f9": 0.00014462884622337926,
  "byte_d4": 0.0003615721155584481,
  "byte_fb": 0.00014462884622337926,
  "byte_5f": 0.00010847163466753444,
  "byte_7c": 7.231442311168963e-05,
  "num_nodes": 72,
  "num_edges": 72,
  "avg_degree": 2.0,
  "density": 0.014084507042253521,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 136,
  "event_nums": 508,
  "creation_block": 16364992,
  "creation_timestamp": 1673216123,
  "life_time": 2981.0,
  "duration_seconds": 35880.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 73,
  "num_buyers": 2,
  "num_sellers": 72,
  "num_creator_transfers": 29,
  "buy_amt": 6.756345248547689e+17,
  "sell_amt": 6.756345248547689e+17,
  "avg_value": 9863277735106116.0,
  "txn_per_block": 0.04560697518443997,
  "avg_gas_limit": 304563.39705882355,
  "std_gas_limit": 740404.2463055956,
  "avg_gas_used": 87552.83823529411,
  "std_gas_used": 707330.578147654,
  "avg_gas_price": 17982253084.125,
  "std_gas_price": 20314191417.86849,
  "ownershiptransferred_num": 2,
  "setautomatedmarketmakerpair_num": 1,
  "excludefromfees_num": 3,
  "transfer_num": 315,
  "enabletrading_num": 1,
  "approve_num": 73,
  "updatebuyfees_num": 1,
  "updatesellfees_num": 1,
  "renounceownership_num": 1,
  "timeline_sequence": [
    [
      16364992,
      1673216123,
      0,
      135,
      0,
      8301578,
      20838942157,
      0,
      1,
      18302778,
      8301578,
      6765324
    ],
    [
      16365008,
      1673216327,
      1,
      116,
      0,
      51128,
      19985454940,
      0,
      1,
      11483175,
      51128,
      6765308
    ],
    [
      16365024,
      1673216519,
      2,
      54,
      0,
      56714,
      19191195009,
      0,
      1,
      4679496,
      47262,
      6765292
    ],
    [
      16365029,
      1673216579,
      498,
      5,
      0,
      200000,
      47697723451,
      0,
      1,
      1084036,
      47262,
      6765287
    ],
    [
      16365029,
      1673216579,
      1779,
      6,
      0,
      200000,
      47697723451,
      0,
      1,
      1131298,
      47262,
      6765287
    ],
    [
      16365029,
      1673216579,
      101,
      12,
      0,
      1100000,
      29388720290,
      0,
      1,
      1842821,
      47262,
      6765287
    ],
    [
      16365029,
      1673216579,
      14,
      13,
      0,
      73411,
      28388720290,
      0,
      1,
      1890083,
      47262,
      6765287
    ],
    [
      16365029,
      1673216579,
      1,
      14,
      0,
      74434,
      28388720290,
      0,
      1,
      1937345,
      47262,
      6765287
    ],
    [
      16365029,
      1673216579,
      6,
      15,
      0,
      77477,
      28388720290,
      0,
      1,
      1984607,
      47262,
      6765287
    ],
    [
      16365029,
      1673216579,
      497,
      32,
      0,
      800000,
      22388720290,
      0,
      1,
      3487164,
      47262,
      6765287
    ],
    [
      16365029,
      1673216579,
      595,
      33,
      0,
      800000,
      22388720290,
      0,
      1,
      3534426,
      47262,
      6765287
    ],
    [
      16365029,
      1673216579,
      682,
      34,
      0,
      800000,
      22388720290,
      0,
      1,
      3581688,
      47262,
      6765287
    ],
    [
      16365029,
      1673216579,
      716,
      35,
      0,
      800000,
      22388720290,
      0,
      1,
      3628950,
      47262,
      6765287
    ],
    [
      16365029,
      1673216579,
      211,
      38,
      0,
      77573,
      21388720290,
      0,
      1,
      3826408,
      47262,
      6765287
    ],
    [
      16365029,
      1673216579,
      314,
      39,
      0,
      73346,
      21388720290,
      0,
      1,
      3873670,
      47262,
      6765287
    ],
    [
      16365029,
      1673216579,
      50,
      41,
      0,
      74533,
      21388720290,
      0,
      1,
      3967560,
      47262,
      6765287
    ],
    [
      16365029,
      1673216579,
      18,
      42,
      0,
      71220,
      21388720290,
      0,
      1,
      4014822,
      47262,
      6765287
    ],
    [
      16365030,
      1673216591,
      1924,
      11,
      0,
      650000,
      39907270709,
      0,
      1,
      1810788,
      47262,
      6765286
    ],
    [
      16365030,
      1673216591,
      524,
      12,
      0,
      650000,
      39907270709,
      0,
      1,
      1858050,
      47262,
      6765286
    ],
    [
      16365030,
      1673216591,
      48,
      13,
      0,
      650000,
      39907270709,
      0,
      1,
      1905312,
      47262,
      6765286
    ],
    [
      16365030,
      1673216591,
      4,
      92,
      0,
      77261,
      23907270709,
      0,
      1,
      12006786,
      47262,
      6765286
    ],
    [
      16365030,
      1673216591,
      56,
      121,
      0,
      77676,
      21907270709,
      0,
      1,
      14295280,
      47262,
      6765286
    ],
    [
      16365030,
      1673216591,
      3,
      124,
      0,
      74982,
      21907270709,
      0,
      1,
      14435798,
      47262,
      6765286
    ],
    [
      16365030,
      1673216591,
      19,
      125,
      0,
      75165,
      21907270709,
      0,
      1,
      14483060,
      47262,
      6765286
    ],
    [
      16365032,
      1673216615,
      44,
      22,
      0,
      75827,
      24187490337,
      0,
      1,
      2144630,
      47262,
      6765284
    ],
    [
      16365032,
      1673216615,
      446,
      24,
      0,
      76541,
      24187490337,
      0,
      1,
      2238520,
      47262,
      6765284
    ],
    [
      16365032,
      1673216615,
      40,
      26,
      0,
      75912,
      24187490337,
      0,
      1,
      2333015,
      47262,
      6765284
    ],
    [
      16365033,
      1673216627,
      288,
      1,
      0,
      347574,
      66163716031,
      0,
      1,
      247846,
      47262,
      6765283
    ],
    [
      16365033,
      1673216627,
      9,
      23,
      0,
      72580,
      24163716031,
      0,
      1,
      1395404,
      47262,
      6765283
    ],
    [
      16365039,
      1673216699,
      73,
      7,
      0,
      47058,
      27111148360,
      0,
      1,
      584796,
      47058,
      6765277
    ],
    [
      16365039,
      1673216699,
      54,
      8,
      0,
      47058,
      27111148360,
      0,
      1,
      631854,
      47058,
      6765277
    ],
    [
      16365043,
      1673216747,
      6,
      10,
      0,
      74416,
      22269699691,
      0,
      1,
      1022177,
      47262,
      6765273
    ],
    [
      16365066,
      1673217023,
      24,
      18,
      0,
      72395,
      23071290846,
      0,
      1,
      918880,
      47262,
      6765250
    ],
    [
      16365070,
      1673217083,
      38,
      50,
      0,
      56714,
      22000000000,
      0,
      1,
      11099560,
      47262,
      6765246
    ],
    [
      16365074,
      1673217131,
      1320,
      23,
      0,
      191373,
      25225394972,
      0,
      1,
      2241209,
      47262,
      6765242
    ],
    [
      16365134,
      1673217851,
      1322,
      22,
      0,
      56714,
      24000000000,
      0,
      1,
      3011168,
      47262,
      6765182
    ],
    [
      16365147,
      1673218007,
      57,
      126,
      0,
      56714,
      18055808256,
      0,
      1,
      7292751,
      47262,
      6765169
    ],
    [
      16365176,
      1673218355,
      8,
      275,
      0,
      39830,
      17083804048,
      0,
      1,
      12556635,
      39830,
      6765140
    ],
    [
      16365178,
      1673218379,
      9,
      324,
      0,
      39831,
      17176553171,
      0,
      1,
      14223378,
      39831,
      6765138
    ],
    [
      16365179,
      1673218391,
      1793,
      56,
      0,
      75292,
      19777379494,
      0,
      1,
      1656885,
      47262,
      6765137
    ],
    [
      16365182,
      1673218427,
      651,
      23,
      0,
      258590,
      19480285195,
      0,
      1,
      2846713,
      47262,
      6765134
    ],
    [
      16365208,
      1673218739,
      51,
      19,
      0,
      434448,
      21282874441,
      0,
      1,
      1225749,
      47262,
      6765108
    ],
    [
      16365208,
      1673218739,
      40,
      20,
      0,
      432635,
      21282874441,
      0,
      1,
      1273011,
      47262,
      6765108
    ],
    [
      16365213,
      1673218799,
      38,
      13,
      0,
      77921,
      21291890329,
      0,
      1,
      2120861,
      47262,
      6765103
    ],
    [
      16365216,
      1673218835,
      37,
      244,
      0,
      56714,
      22807605846,
      0,
      1,
      27218937,
      47262,
      6765100
    ],
    [
      16365230,
      1673219003,
      10,
      53,
      0,
      28306,
      63072772553,
      0,
      1,
      5072809,
      23506,
      6765086
    ],
    [
      16365236,
      1673219075,
      5,
      16,
      0,
      56714,
      63175719462,
      0,
      1,
      919463,
      47262,
      6765080
    ],
    [
      16365238,
      1673219099,
      11,
      15,
      0,
      75656,
      61731083674,
      0,
      1,
      1041494,
      47262,
      6765078
    ],
    [
      16365250,
      1673219243,
      48,
      14,
      0,
      71379,
      65106595955,
      0,
      1,
      1246276,
      47262,
      6765066
    ],
    [
      16365251,
      1673219255,
      155,
      145,
      0,
      56714,
      64064084527,
      0,
      1,
      15392849,
      47262,
      6765065
    ],
    [
      16365255,
      1673219315,
      573,
      97,
      0,
      56714,
      80471161113,
      0,
      1,
      9259460,
      47262,
      6765061
    ],
    [
      16365263,
      1673219411,
      355,
      28,
      0,
      56714,
      116856181600,
      0,
      1,
      2571410,
      47262,
      6765053
    ],
    [
      16365273,
      1673219531,
      10,
      57,
      0,
      56714,
      68171155936,
      0,
      1,
      3916463,
      47262,
      6765043
    ],
    [
      16365282,
      1673219639,
      67,
      17,
      0,
      712743,
      47216602560,
      0,
      1,
      1982642,
      47262,
      6765034
    ],
    [
      16365285,
      1673219675,
      57,
      19,
      0,
      500000,
      44992492540,
      0,
      1,
      1896742,
      47262,
      6765031
    ],
    [
      16365289,
      1673219723,
      2334,
      7,
      0,
      56714,
      43000000000,
      0,
      1,
      631902,
      47262,
      6765027
    ],
    [
      16365289,
      1673219723,
      51,
      26,
      0,
      76870,
      37241617029,
      0,
      1,
      1764792,
      47262,
      6765027
    ],
    [
      16365296,
      1673219819,
      828,
      59,
      0,
      70893,
      32052905472,
      0,
      1,
      7259704,
      47262,
      6765020
    ],
    [
      16365298,
      1673219843,
      134,
      13,
      0,
      56714,
      31234586132,
      0,
      1,
      899801,
      47262,
      6765018
    ],
    [
      16365300,
      1673219867,
      1148,
      23,
      0,
      54351,
      32510052163,
      0,
      1,
      1043376,
      47262,
      6765016
    ],
    [
      16365305,
      1673219927,
      562,
      48,
      0,
      56714,
      29428864256,
      0,
      1,
      4244460,
      47262,
      6765011
    ],
    [
      16365307,
      1673219951,
      3050,
      60,
      0,
      56714,
      27342314708,
      0,
      1,
      6122716,
      47262,
      6765009
    ],
    [
      16365307,
      1673219951,
      80,
      70,
      0,
      56714,
      26842314708,
      0,
      1,
      6680700,
      47262,
      6765009
    ],
    [
      16365310,
      1673219987,
      169,
      71,
      0,
      56714,
      25752119851,
      0,
      1,
      6434259,
      47262,
      6765006
    ],
    [
      16365314,
      1673220035,
      380,
      152,
      0,
      56714,
      22869259026,
      0,
      1,
      12999368,
      47262,
      6765002
    ],
    [
      16365315,
      1673220047,
      1121,
      8,
      0,
      76573,
      32967162999,
      0,
      1,
      1059259,
      47262,
      6765001
    ],
    [
      16365316,
      1673220059,
      127,
      98,
      0,
      56714,
      24727810633,
      0,
      1,
      7071803,
      47262,
      6765000
    ],
    [
      16365335,
      1673220287,
      397,
      89,
      0,
      56714,
      23563677055,
      0,
      1,
      11055018,
      47262,
      6764981
    ],
    [
      16365341,
      1673220359,
      212,
      54,
      0,
      75753,
      22879376402,
      0,
      1,
      6187831,
      47262,
      6764975
    ],
    [
      16365348,
      1673220443,
      115,
      131,
      0,
      56714,
      24771369721,
      0,
      1,
      13725150,
      47262,
      6764968
    ],
    [
      16365367,
      1673220671,
      314,
      16,
      0,
      56714,
      25960739206,
      0,
      1,
      4696404,
      47262,
      6764949
    ],
    [
      16365396,
      1673221019,
      217,
      22,
      0,
      51988,
      24150000000,
      0,
      1,
      1985488,
      47262,
      6764920
    ],
    [
      16365397,
      1673221031,
      53,
      103,
      0,
      56714,
      22495065136,
      0,
      1,
      8944629,
      47262,
      6764919
    ],
    [
      16365400,
      1673221067,
      2556,
      112,
      0,
      56714,
      20601593225,
      0,
      1,
      11693308,
      47262,
      6764916
    ],
    [
      16365419,
      1673221295,
      96,
      10,
      0,
      76614,
      23183501119,
      0,
      1,
      708772,
      47262,
      6764897
    ],
    [
      16365509,
      1673222375,
      18,
      149,
      0,
      56714,
      20598577357,
      0,
      1,
      13605557,
      47262,
      6764807
    ],
    [
      16367051,
      1673240891,
      101,
      84,
      0,
      56714,
      15443458270,
      0,
      1,
      7810156,
      47262,
      6763265
    ],
    [
      16367973,
      1673252003,
      92,
      97,
      0,
      56714,
      14767967079,
      0,
      1,
      8303594,
      47262,
      6762343
    ],
    [
      16365047,
      1673216795,
      0,
      0,
      36465664223929858,
      750819,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365047,
      1673216795,
      0,
      0,
      36465664223929858,
      745317,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365047,
      1673216795,
      0,
      0,
      33748589487407983,
      761072,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365047,
      1673216795,
      0,
      0,
      33748589487407983,
      755570,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365093,
      1673217359,
      0,
      0,
      37853877186445452,
      267768,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365093,
      1673217359,
      0,
      0,
      37853877186445452,
      254598,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365102,
      1673217467,
      0,
      0,
      34956627266986945,
      304807,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365102,
      1673217467,
      0,
      0,
      34956627266986945,
      292225,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365102,
      1673217467,
      0,
      0,
      32897818137067005,
      290523,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365102,
      1673217467,
      0,
      0,
      32897818137067005,
      277551,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365102,
      1673217467,
      0,
      0,
      30878227404890008,
      309829,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365102,
      1673217467,
      0,
      0,
      30878227404890008,
      297164,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365178,
      1673218379,
      0,
      0,
      30720971812348800,
      284098,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365178,
      1673218379,
      0,
      0,
      30720971812348800,
      271024,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365246,
      1673219195,
      0,
      0,
      61648521558741992,
      162774,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365246,
      1673219195,
      0,
      0,
      61648521558741992,
      147938,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365248,
      1673219219,
      0,
      0,
      58850049791188447,
      543490,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365248,
      1673219219,
      0,
      0,
      58850049791188447,
      534697,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365248,
      1673219219,
      0,
      0,
      51803640804946528,
      553743,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365248,
      1673219219,
      0,
      0,
      51803640804946528,
      544950,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365254,
      1673219303,
      0,
      0,
      47741558822976858,
      290479,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365254,
      1673219303,
      0,
      0,
      47741558822976858,
      277670,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365269,
      1673219483,
      0,
      0,
      9539908053556206,
      298246,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365269,
      1673219483,
      0,
      0,
      9539908053556206,
      285560,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365310,
      1673219987,
      0,
      0,
      68587762628532137,
      174461,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365310,
      1673219987,
      0,
      0,
      68587762628532137,
      159810,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365315,
      1673220047,
      0,
      0,
      21959030638546030,
      279134,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365315,
      1673220047,
      0,
      0,
      21959030638546030,
      266144,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365319,
      1673220095,
      0,
      0,
      14241429988425833,
      273882,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365319,
      1673220095,
      0,
      0,
      14241429988425833,
      260809,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365333,
      1673220263,
      0,
      0,
      11884888061221381,
      259762,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365333,
      1673220263,
      0,
      0,
      11884888061221381,
      246465,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365337,
      1673220311,
      0,
      0,
      12538183790545133,
      296723,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365337,
      1673220311,
      0,
      0,
      12538183790545133,
      284013,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365341,
      1673220359,
      0,
      0,
      14993123404192519,
      314750,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365341,
      1673220359,
      0,
      0,
      14993123404192519,
      302326,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365359,
      1673220575,
      0,
      0,
      9693359908808922,
      270016,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365359,
      1673220575,
      0,
      0,
      9693359908808922,
      256882,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365371,
      1673220719,
      0,
      0,
      7746406745626140,
      299673,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365371,
      1673220719,
      0,
      0,
      7746406745626140,
      287010,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365377,
      1673220791,
      0,
      0,
      8308222916991576,
      315156,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365377,
      1673220791,
      0,
      0,
      8308222916991576,
      302738,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365382,
      1673220851,
      0,
      0,
      6410423296217232,
      174461,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365382,
      1673220851,
      0,
      0,
      6410423296217232,
      159810,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365386,
      1673220899,
      0,
      0,
      5284191982085962,
      19816,
      0,
      1,
      0,
      0,
      55,
      0
    ],
    [
      16365386,
      1673220899,
      0,
      0,
      5284191982085962,
      2549,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      16365387,
      1673220911,
      0,
      0,
      5284191982085962,
      1540029,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365387,
      1673220911,
      0,
      0,
      5284191982085962,
      1547054,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365400,
      1673221067,
      0,
      0,
      5162550774989575,
      543798,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365400,
      1673221067,
      0,
      0,
      5162550774989575,
      535010,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365404,
      1673221115,
      0,
      0,
      3940930105201465,
      19816,
      0,
      1,
      0,
      0,
      55,
      0
    ],
    [
      16365404,
      1673221115,
      0,
      0,
      3940930105201465,
      2549,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      16365405,
      1673221127,
      0,
      0,
      3940930105201465,
      128080,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365405,
      1673221127,
      0,
      0,
      3940930105201465,
      112693,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16365464,
      1673221835,
      0,
      0,
      4881830300132788,
      174461,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16365464,
      1673221835,
      0,
      0,
      4881830300132788,
      159810,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      16367057,
      1673240963,
      0,
      0,
      3671613675478704,
      174458,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      16367057,
      1673240963,
      0,
      0,
      3671613675478704,
      159807,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "// SPDX-License-Identifier: MIT\n\n/**\n\nTwenty One Million Bitcoins (TOMB)\n\nSupply: 21,000,000 TOMB\nMax Wallet : 420,000 TOMB (2%)\nMax Transaction : 420,000 TOMB\n\nTwitter : https://twitter.com/21millionbtcerc\nTelegram : https://t.me/tomberc\n\n**/\npragma solidity =0.8.10 >=0.8.10 >=0.8.0 <0.9.0;\npragma experimental ABIEncoderV2;\n\n////// lib/openzeppelin-contracts/contracts/utils/Context.sol\n// OpenZeppelin Contracts v4.4.0 (utils/Context.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n////// lib/openzeppelin-contracts/contracts/access/Ownable.sol\n// OpenZeppelin Contracts v4.4.0 (access/Ownable.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/* import \"../utils/Context.sol\"; */\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n////// lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/IERC20.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n////// lib/openzeppelin-contracts/contracts/token/ERC20/extensions/IERC20Metadata.sol\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/extensions/IERC20Metadata.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/* import \"../IERC20.sol\"; */\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n////// lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\n// OpenZeppelin Contracts v4.4.0 (token/ERC20/ERC20.sol)\n\n/* pragma solidity ^0.8.0; */\n\n/* import \"./IERC20.sol\"; */\n/* import \"./extensions/IERC20Metadata.sol\"; */\n/* import \"../../utils/Context.sol\"; */\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\n////// lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\n// OpenZeppelin Contracts v4.4.0 (utils/math/SafeMath.sol)\n\n/* pragma solidity ^0.8.0; */\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n////// src/IUniswapV2Factory.sol\n/* pragma solidity 0.8.10; */\n/* pragma experimental ABIEncoderV2; */\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\n////// src/IUniswapV2Pair.sol\n/* pragma solidity 0.8.10; */\n/* pragma experimental ABIEncoderV2; */\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\n////// src/IUniswapV2Router02.sol\n/* pragma solidity 0.8.10; */\n/* pragma experimental ABIEncoderV2; */\n\ninterface IUniswapV2Router02 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\n/* pragma solidity >=0.8.10; */\n\n/* import {IUniswapV2Router02} from \"./IUniswapV2Router02.sol\"; */\n/* import {IUniswapV2Factory} from \"./IUniswapV2Factory.sol\"; */\n/* import {IUniswapV2Pair} from \"./IUniswapV2Pair.sol\"; */\n/* import {IERC20} from \"lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\"; */\n/* import {ERC20} from \"lib/openzeppelin-contracts/contracts/token/ERC20/ERC20.sol\"; */\n/* import {Ownable} from \"lib/openzeppelin-contracts/contracts/access/Ownable.sol\"; */\n/* import {SafeMath} from \"lib/openzeppelin-contracts/contracts/utils/math/SafeMath.sol\"; */\n\ncontract TOMB is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address public immutable uniswapV2Pair;\n    address public constant deadAddress = address(0xdead);\n\n    bool private swapping;\n\n    address public marketingWallet;\n    address public devWallet;\n\n    uint256 public maxTransactionAmount;\n    uint256 public swapTokensAtAmount;\n    uint256 public maxWallet;\n\n    uint256 public percentForLPBurn = 25; // 25 = .25%\n    bool public lpBurnEnabled = false;\n    uint256 public lpBurnFrequency = 3600 seconds;\n    uint256 public lastLpBurnTime;\n\n    uint256 public manualBurnFrequency = 30 minutes;\n    uint256 public lastManualLpBurnTime;\n\n    bool public limitsInEffect = true;\n    bool public tradingActive = false;\n    bool public swapEnabled = false;\n\n    // Anti-bot and anti-whale mappings and variables\n    mapping(address => uint256) private _holderLastTransferTimestamp; // to hold last Transfers temporarily during launch\n    bool public transferDelayEnabled = true;\n\n    uint256 public buyTotalFees;\n    uint256 public buyMarketingFee;\n    uint256 public buyLiquidityFee;\n    uint256 public buyDevFee;\n\n    uint256 public sellTotalFees;\n    uint256 public sellMarketingFee;\n    uint256 public sellLiquidityFee;\n    uint256 public sellDevFee;\n\n    uint256 public tokensForMarketing;\n    uint256 public tokensForLiquidity;\n    uint256 public tokensForDev;\n\n    /******************/\n\n    // exlcude from fees and max transaction amount\n    mapping(address => bool) private _isExcludedFromFees;\n    mapping(address => bool) public _isExcludedMaxTransactionAmount;\n\n    // store addresses that a automatic market maker pairs. Any transfer *to* these addresses\n    // could be subject to a maximum transfer amount\n    mapping(address => bool) public automatedMarketMakerPairs;\n\n    event UpdateUniswapV2Router(\n        address indexed newAddress,\n        address indexed oldAddress\n    );\n\n    event ExcludeFromFees(address indexed account, bool isExcluded);\n\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n\n    event marketingWalletUpdated(\n        address indexed newWallet,\n        address indexed oldWallet\n    );\n\n    event devWalletUpdated(\n        address indexed newWallet,\n        address indexed oldWallet\n    );\n\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ethReceived,\n        uint256 tokensIntoLiquidity\n    );\n\n    event AutoNukeLP();\n\n    event ManualNukeLP();\n\n    constructor() ERC20(\"Twenty One Million Bitcoins\", \"TOMB\") {\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n        );\n\n        excludeFromMaxTransaction(address(_uniswapV2Router), true);\n        uniswapV2Router = _uniswapV2Router;\n\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), _uniswapV2Router.WETH());\n        excludeFromMaxTransaction(address(uniswapV2Pair), true);\n        _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\n\n        uint256 _buyMarketingFee = 10;\n        uint256 _buyLiquidityFee = 0;\n        uint256 _buyDevFee = 0;\n\n        uint256 _sellMarketingFee = 40;\n        uint256 _sellLiquidityFee = 0;\n        uint256 _sellDevFee = 0;\n\n        uint256 totalSupply = 21_000_000 * 1e18;\n\n        maxTransactionAmount = 420_000 * 1e18; // 2% from total supply maxTransactionAmountTxn\n        maxWallet = 420_000 * 1e18; // 2% from total supply maxWallet\n        swapTokensAtAmount = (totalSupply*2) / 1000; // \n\n        buyMarketingFee = _buyMarketingFee;\n        buyLiquidityFee = _buyLiquidityFee;\n        buyDevFee = _buyDevFee;\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\n\n        sellMarketingFee = _sellMarketingFee;\n        sellLiquidityFee = _sellLiquidityFee;\n        sellDevFee = _sellDevFee;\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee;\n\n        marketingWallet = address(0xaD8B7b0daBA44a5c960223973BD5fEDB9e966b56); // set as marketing wallet\n        devWallet = address(0xaD8B7b0daBA44a5c960223973BD5fEDB9e966b56); // set as dev wallet\n\n        // exclude from paying fees or having max transaction amount\n        excludeFromFees(owner(), true);\n        excludeFromFees(address(this), true);\n        excludeFromFees(address(0xdead), true);\n\n        excludeFromMaxTransaction(owner(), true);\n        excludeFromMaxTransaction(address(this), true);\n        excludeFromMaxTransaction(address(0xdead), true);\n\n        /*\n            _mint is an internal function in ERC20.sol that is only called here,\n            and CANNOT be called ever again\n        */\n        _mint(msg.sender, totalSupply);\n    }\n\n    receive() external payable {}\n\n    // once enabled, can never be turned off\n    function enableTrading() external onlyOwner {\n        tradingActive = true;\n        swapEnabled = true;\n        lastLpBurnTime = block.timestamp;\n    }\n\n    // remove limits after token is stable\n    function removeLimits() external onlyOwner returns (bool) {\n        limitsInEffect = false;\n        return true;\n    }\n\n    // disable Transfer delay - cannot be reenabled\n    function disableTransferDelay() external onlyOwner returns (bool) {\n        transferDelayEnabled = false;\n        return true;\n    }\n\n    // change the minimum amount of tokens to sell from fees\n    function updateSwapTokensAtAmount(uint256 newAmount)\n        external\n        onlyOwner\n        returns (bool)\n    {\n        require(\n            newAmount >= (totalSupply() * 1) / 100000,\n            \"Swap amount cannot be lower than 0.001% total supply.\"\n        );\n        require(\n            newAmount <= (totalSupply() * 5) / 1000,\n            \"Swap amount cannot be higher than 0.5% total supply.\"\n        );\n        swapTokensAtAmount = newAmount;\n        return true;\n    }\n\n    function updateMaxTxnAmount(uint256 newNum) external onlyOwner {\n        require(\n            newNum >= ((totalSupply() * 1) / 1000) / 1e18,\n            \"Cannot set maxTransactionAmount lower than 0.1%\"\n        );\n        maxTransactionAmount = newNum * (10**18);\n    }\n\n    function updateMaxWalletAmount(uint256 newNum) external onlyOwner {\n        require(\n            newNum >= ((totalSupply() * 5) / 1000) / 1e18,\n            \"Cannot set maxWallet lower than 0.5%\"\n        );\n        maxWallet = newNum * (10**18);\n    }\n\n    function excludeFromMaxTransaction(address updAds, bool isEx)\n        public\n        onlyOwner\n    {\n        _isExcludedMaxTransactionAmount[updAds] = isEx;\n    }\n\n    // only use to disable contract sales if absolutely necessary (emergency use only)\n    function updateSwapEnabled(bool enabled) external onlyOwner {\n        swapEnabled = enabled;\n    }\n\n    function updateBuyFees(\n        uint256 _marketingFee,\n        uint256 _liquidityFee,\n        uint256 _devFee\n    ) external onlyOwner {\n        buyMarketingFee = _marketingFee;\n        buyLiquidityFee = _liquidityFee;\n        buyDevFee = _devFee;\n        buyTotalFees = buyMarketingFee + buyLiquidityFee + buyDevFee;\n        require(buyTotalFees <= 9, \"Must keep fees at 9% or less\");\n    }\n\n    function updateSellFees(\n        uint256 _marketingFee,\n        uint256 _liquidityFee,\n        uint256 _devFee\n    ) external onlyOwner {\n        sellMarketingFee = _marketingFee;\n        sellLiquidityFee = _liquidityFee;\n        sellDevFee = _devFee;\n        sellTotalFees = sellMarketingFee + sellLiquidityFee + sellDevFee;\n        require(sellTotalFees <= 9, \"Must keep fees at 9% or less\");\n    }\n\n    function excludeFromFees(address account, bool excluded) public onlyOwner {\n        _isExcludedFromFees[account] = excluded;\n        emit ExcludeFromFees(account, excluded);\n    }\n\n    function setAutomatedMarketMakerPair(address pair, bool value)\n        public\n        onlyOwner\n    {\n        require(\n            pair != uniswapV2Pair,\n            \"The pair cannot be removed from automatedMarketMakerPairs\"\n        );\n\n        _setAutomatedMarketMakerPair(pair, value);\n    }\n\n    function _setAutomatedMarketMakerPair(address pair, bool value) private {\n        automatedMarketMakerPairs[pair] = value;\n\n        emit SetAutomatedMarketMakerPair(pair, value);\n    }\n\n    function updateMarketingWallet(address newMarketingWallet)\n        external\n        onlyOwner\n    {\n        emit marketingWalletUpdated(newMarketingWallet, marketingWallet);\n        marketingWallet = newMarketingWallet;\n    }\n\n    function updateDevWallet(address newWallet) external onlyOwner {\n        emit devWalletUpdated(newWallet, devWallet);\n        devWallet = newWallet;\n    }\n\n    function isExcludedFromFees(address account) public view returns (bool) {\n        return _isExcludedFromFees[account];\n    }\n\n    event BoughtEarly(address indexed sniper);\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        if (amount == 0) {\n            super._transfer(from, to, 0);\n            return;\n        }\n\n        if (limitsInEffect) {\n            if (\n                from != owner() &&\n                to != owner() &&\n                to != address(0) &&\n                to != address(0xdead) &&\n                !swapping\n            ) {\n                if (!tradingActive) {\n                    require(\n                        _isExcludedFromFees[from] || _isExcludedFromFees[to],\n                        \"Trading is not active.\"\n                    );\n                }\n\n                // at launch if the transfer delay is enabled, ensure the block timestamps for purchasers is set -- during launch.\n                if (transferDelayEnabled) {\n                    if (\n                        to != owner() &&\n                        to != address(uniswapV2Router) &&\n                        to != address(uniswapV2Pair)\n                    ) {\n                        require(\n                            _holderLastTransferTimestamp[tx.origin] <\n                                block.number,\n                            \"_transfer:: Transfer Delay enabled.  Only one purchase per block allowed.\"\n                        );\n                        _holderLastTransferTimestamp[tx.origin] = block.number;\n                    }\n                }\n\n                //when buy\n                if (\n                    automatedMarketMakerPairs[from] &&\n                    !_isExcludedMaxTransactionAmount[to]\n                ) {\n                    require(\n                        amount <= maxTransactionAmount,\n                        \"Buy transfer amount exceeds the maxTransactionAmount.\"\n                    );\n                    require(\n                        amount + balanceOf(to) <= maxWallet,\n                        \"Max wallet exceeded\"\n                    );\n                }\n                //when sell\n                else if (\n                    automatedMarketMakerPairs[to] &&\n                    !_isExcludedMaxTransactionAmount[from]\n                ) {\n                    require(\n                        amount <= maxTransactionAmount,\n                        \"Sell transfer amount exceeds the maxTransactionAmount.\"\n                    );\n                } else if (!_isExcludedMaxTransactionAmount[to]) {\n                    require(\n                        amount + balanceOf(to) <= maxWallet,\n                        \"Max wallet exceeded\"\n                    );\n                }\n            }\n        }\n\n        uint256 contractTokenBalance = balanceOf(address(this));\n\n        bool canSwap = contractTokenBalance >= swapTokensAtAmount;\n\n        if (\n            canSwap &&\n            swapEnabled &&\n            !swapping &&\n            !automatedMarketMakerPairs[from] &&\n            !_isExcludedFromFees[from] &&\n            !_isExcludedFromFees[to]\n        ) {\n            swapping = true;\n\n            swapBack();\n\n            swapping = false;\n        }\n\n        if (\n            !swapping &&\n            automatedMarketMakerPairs[to] &&\n            lpBurnEnabled &&\n            block.timestamp >= lastLpBurnTime + lpBurnFrequency &&\n            !_isExcludedFromFees[from]\n        ) {\n            autoBurnLiquidityPairTokens();\n        }\n\n        bool takeFee = !swapping;\n\n        // if any account belongs to _isExcludedFromFee account then remove the fee\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n            takeFee = false;\n        }\n\n        uint256 fees = 0;\n        // only take fees on buys/sells, do not take on wallet transfers\n        if (takeFee) {\n            // on sell\n            if (automatedMarketMakerPairs[to] && sellTotalFees > 0) {\n                fees = amount.mul(sellTotalFees).div(100);\n                tokensForLiquidity += (fees * sellLiquidityFee) / sellTotalFees;\n                tokensForDev += (fees * sellDevFee) / sellTotalFees;\n                tokensForMarketing += (fees * sellMarketingFee) / sellTotalFees;\n            }\n            // on buy\n            else if (automatedMarketMakerPairs[from] && buyTotalFees > 0) {\n                fees = amount.mul(buyTotalFees).div(100);\n                tokensForLiquidity += (fees * buyLiquidityFee) / buyTotalFees;\n                tokensForDev += (fees * buyDevFee) / buyTotalFees;\n                tokensForMarketing += (fees * buyMarketingFee) / buyTotalFees;\n            }\n\n            if (fees > 0) {\n                super._transfer(from, address(this), fees);\n            }\n\n            amount -= fees;\n        }\n\n        super._transfer(from, to, amount);\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private {\n        // generate the uniswap pair path of token -> weth\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // make the swap\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // approve token transfer to cover all possible scenarios\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n\n        // add the liquidity\n        uniswapV2Router.addLiquidityETH{value: ethAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            deadAddress,\n            block.timestamp\n        );\n    }\n\n    function swapBack() private {\n        uint256 contractBalance = balanceOf(address(this));\n        uint256 totalTokensToSwap = tokensForLiquidity +\n            tokensForMarketing +\n            tokensForDev;\n        bool success;\n\n        if (contractBalance == 0 || totalTokensToSwap == 0) {\n            return;\n        }\n\n        if (contractBalance > swapTokensAtAmount * 5) {\n            contractBalance = swapTokensAtAmount * 5;\n        }\n\n        // Halve the amount of liquidity tokens\n        uint256 liquidityTokens = (contractBalance * tokensForLiquidity) /\n            totalTokensToSwap /\n            2;\n        uint256 amountToSwapForETH = contractBalance.sub(liquidityTokens);\n\n        uint256 initialETHBalance = address(this).balance;\n\n        swapTokensForEth(amountToSwapForETH);\n\n        uint256 ethBalance = address(this).balance.sub(initialETHBalance);\n\n        uint256 ethForMarketing = ethBalance.mul(tokensForMarketing).div(\n            totalTokensToSwap\n        );\n        uint256 ethForDev = ethBalance.mul(tokensForDev).div(totalTokensToSwap);\n\n        uint256 ethForLiquidity = ethBalance - ethForMarketing - ethForDev;\n\n        tokensForLiquidity = 0;\n        tokensForMarketing = 0;\n        tokensForDev = 0;\n\n        (success, ) = address(devWallet).call{value: ethForDev}(\"\");\n\n        if (liquidityTokens > 0 && ethForLiquidity > 0) {\n            addLiquidity(liquidityTokens, ethForLiquidity);\n            emit SwapAndLiquify(\n                amountToSwapForETH,\n                ethForLiquidity,\n                tokensForLiquidity\n            );\n        }\n\n        (success, ) = address(marketingWallet).call{\n            value: address(this).balance\n        }(\"\");\n    }\n\n    function setAutoLPBurnSettings(\n        uint256 _frequencyInSeconds,\n        uint256 _percent,\n        bool _Enabled\n    ) external onlyOwner {\n        require(\n            _frequencyInSeconds >= 600,\n            \"cannot set buyback more often than every 10 minutes\"\n        );\n        require(\n            _percent <= 1000 && _percent >= 0,\n            \"Must set auto LP burn percent between 0% and 10%\"\n        );\n        lpBurnFrequency = _frequencyInSeconds;\n        percentForLPBurn = _percent;\n        lpBurnEnabled = _Enabled;\n    }\n\n    function autoBurnLiquidityPairTokens() internal returns (bool) {\n        lastLpBurnTime = block.timestamp;\n\n        // get balance of liquidity pair\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\n\n        // calculate amount to burn\n        uint256 amountToBurn = liquidityPairBalance.mul(percentForLPBurn).div(\n            10000\n        );\n\n        // pull tokens from pancakePair liquidity and move to dead address permanently\n        if (amountToBurn > 0) {\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\n        }\n\n        //sync price since this is not in a swap transaction!\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\n        pair.sync();\n        emit AutoNukeLP();\n        return true;\n    }\n\n    function manualBurnLiquidityPairTokens(uint256 percent)\n        external\n        onlyOwner\n        returns (bool)\n    {\n        require(\n            block.timestamp > lastManualLpBurnTime + manualBurnFrequency,\n            \"Must wait for cooldown to finish\"\n        );\n        require(percent <= 1000, \"May not nuke more than 10% of tokens in LP\");\n        lastManualLpBurnTime = block.timestamp;\n\n        // get balance of liquidity pair\n        uint256 liquidityPairBalance = this.balanceOf(uniswapV2Pair);\n\n        // calculate amount to burn\n        uint256 amountToBurn = liquidityPairBalance.mul(percent).div(10000);\n\n        // pull tokens from pancakePair liquidity and move to dead address permanently\n        if (amountToBurn > 0) {\n            super._transfer(uniswapV2Pair, address(0xdead), amountToBurn);\n        }\n\n        //sync price since this is not in a swap transaction!\n        IUniswapV2Pair pair = IUniswapV2Pair(uniswapV2Pair);\n        pair.sync();\n        emit ManualNukeLP();\n        return true;\n    }\n}"
}