{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT SWAP1 DUP2 AND PUSH20 OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH12 PUSH1 SSTORE PUSH11 PUSH1 SSTORE PUSH11 PUSH1 SSTORE PUSH11 PUSH1 SSTORE CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 CALLVALUE GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLER CALLVALUE PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP6 SWAP1 SSTORE SWAP1 SWAP3 SWAP2 SWAP1 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST TIMESTAMP SWAP1 JUMP JUMPDEST PUSH4 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 CALLDATASIZE LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 DUP2 MSTORE DUP4 DUP3 SHA3 CALLER SWAP1 SWAP4 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP8 AND DUP2 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 SWAP1 DUP8 AND SWAP1 PUSH32 SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH4 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS DUP2 AND BALANCE SWAP2 AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH4 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 CALLDATASIZE LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 CALLER SWAP1 SWAP2 AND SWAP1 PUSH32 SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP7 SWAP1 SSTORE SWAP1 SWAP3 SWAP2 SWAP1 PUSH32 SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH1 PUSH1 EXP SWAP1 DIV CALLER DUP6 ADDRESS DUP7 PUSH1 MLOAD DUP6 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 PUSH2 GAS SUB CALL SWAP3 POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH4 TIMESTAMP GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP2 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 DUP2 SWAP1 SSTORE SWAP2 SLOAD AND SWAP2 PUSH32 SWAP2 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 PUSH1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH4 TIMESTAMP GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP2 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 DUP2 SWAP1 SSTORE SWAP2 SLOAD AND SWAP2 PUSH32 SWAP2 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 PUSH1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH4 TIMESTAMP GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP2 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 DUP2 SWAP1 SSTORE SWAP2 SLOAD AND SWAP2 PUSH32 SWAP2 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP PUSH1 SWAP1 JUMP JUMPDEST PUSH4 DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH20 NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 CALLVALUE DUP2 SWAP1 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH4 TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH4 TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 SWAP3 POP PUSH1 SLOAD SWAP2 POP PUSH2 JUMP JUMPDEST PUSH4 TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH4 TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 SWAP3 POP PUSH1 SLOAD SWAP2 POP PUSH2 JUMP JUMPDEST PUSH4 TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH4 TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 SWAP3 POP PUSH1 SLOAD SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP3 POP PUSH1 SWAP2 POP JUMPDEST PUSH1 DUP4 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH4 TIMESTAMP LT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH4 TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH2 JUMP JUMPDEST PUSH4 TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH4 TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 PUSH32 SWAP1 DUP8 SWAP1 DUP7 SWAP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 PUSH32 DUP4 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe STOP LOG1 PUSH6 SHA3 SGT CREATE2 DUP14 TIMESTAMP UNKNOWN_0xcc PUSH14 PC UNKNOWN_0xd3 CALLER UNKNOWN_0xe9 UNKNOWN_0xb8 BASEFEE SWAP3 UNKNOWN_0xe3 UNKNOWN_0x22 MLOAD UNKNOWN_0x24 INVALID_0x74",
  "opcode_entropy": 4.797325331654505,
  "opcode_count": 2658,
  "unique_opcodes": 77,
  "byte_entropy": 6.144050082148343,
  "byte_0x": 0.00023304591004427873,
  "byte_60": 0.10696807271032394,
  "byte_40": 0.015147984152878116,
  "byte_52": 0.02353763691447215,
  "byte_01": 0.032160335586110464,
  "byte_80": 0.03425774877650897,
  "byte_54": 0.012351433232346772,
  "byte_a0": 0.011419249592169658,
  "byte_02": 0.020974131903985085,
  "byte_0a": 0.015381030062922395,
  "byte_03": 0.028198555115357727,
  "byte_19": 0.0011652295502213937,
  "byte_90": 0.04008389652761594,
  "byte_81": 0.028897692845490562,
  "byte_16": 0.0219063155441622,
  "byte_73": 0.0018643672803542299,
  "byte_68": 0.0009321836401771149,
  "byte_87": 0.002563505010487066,
  "byte_e9": 0.0016313213703099511,
  "byte_c9": 0.00023304591004427873,
  "byte_98": 0.00023304591004427873,
  "byte_b8": 0.0009321836401771149,
  "byte_91": 0.014448846422745281,
  "byte_6e": 0.0020974131903985084,
  "byte_64": 0.0020974131903985084,
  "byte_88": 0.0009321836401771149,
  "byte_a7": 0.0013982754602656724,
  "byte_3a": 0.00046609182008855747,
  "byte_59": 0.00023304591004427873,
  "byte_41": 0.0018643672803542299,
  "byte_51": 0.010720111862036821,
  "byte_ba": 0.00046609182008855747,
  "byte_25": 0.0009321836401771149,
  "byte_6b": 0.0011652295502213937,
  "byte_45": 0.0006991377301328362,
  "byte_17": 0.0011652295502213937,
  "byte_55": 0.006292239571195526,
  "byte_c3": 0.0009321836401771149,
  "byte_3d": 0.00046609182008855747,
  "byte_4a": 0.00023304591004427873,
  "byte_df": 0.0006991377301328362,
  "byte_ae": 0.00046609182008855747,
  "byte_6d": 0.00046609182008855747,
  "byte_a4": 0.0011652295502213937,
  "byte_b7": 0.0018643672803542299,
  "byte_00": 0.04218130971801445,
  "byte_05": 0.003961780470752739,
  "byte_6a": 0.0006991377301328362,
  "byte_14": 0.008622698671638312,
  "byte_ad": 0.0016313213703099511,
  "byte_f4": 0.0011652295502213937,
  "byte_32": 0.0013982754602656724,
  "byte_34": 0.0074574691214169195,
  "byte_b9": 0.0006991377301328362,
  "byte_06": 0.0032626427406199023,
  "byte_18": 0.00046609182008855747,
  "byte_d0": 0.0006991377301328362,
  "byte_bf": 0.0009321836401771149,
  "byte_42": 0.004893964110929853,
  "byte_3c": 0.0013982754602656724,
  "byte_d8": 0.0006991377301328362,
  "byte_de": 0.00046609182008855747,
  "byte_07": 0.004427872290841296,
  "byte_21": 0.0006991377301328362,
  "byte_58": 0.0011652295502213937,
  "byte_50": 0.020974131903985085,
  "byte_28": 0.0011652295502213937,
  "byte_08": 0.006059193661151247,
  "byte_15": 0.018410626893498018,
  "byte_61": 0.04800745746912142,
  "byte_7e": 0.0009321836401771149,
  "byte_57": 0.024469820554649267,
  "byte_fd": 0.010254020041948263,
  "byte_5b": 0.036821253786996036,
  "byte_20": 0.020974131903985085,
  "byte_10": 0.004194826380797017,
  "byte_ab": 0.00046609182008855747,
  "byte_39": 0.00046609182008855747,
  "byte_f3": 0.0020974131903985084,
  "byte_04": 0.008622698671638312,
  "byte_36": 0.0011652295502213937,
  "byte_63": 0.017012351433232348,
  "byte_ff": 0.01980890235376369,
  "byte_e0": 0.0018643672803542299,
  "byte_35": 0.003961780470752739,
  "byte_f9": 0.0009321836401771149,
  "byte_ac": 0.00023304591004427873,
  "byte_9d": 0.0009321836401771149,
  "byte_65": 0.004194826380797017,
  "byte_8a": 0.00023304591004427873,
  "byte_fa": 0.00046609182008855747,
  "byte_09": 0.0011652295502213937,
  "byte_5e": 0.0013982754602656724,
  "byte_b3": 0.0013982754602656724,
  "byte_43": 0.00046609182008855747,
  "byte_b0": 0.0009321836401771149,
  "byte_79": 0.00046609182008855747,
  "byte_12": 0.0009321836401771149,
  "byte_47": 0.0006991377301328362,
  "byte_89": 0.0009321836401771149,
  "byte_8c": 0.0009321836401771149,
  "byte_0d": 0.003495688650664181,
  "byte_dd": 0.0018643672803542299,
  "byte_9f": 0.0020974131903985084,
  "byte_23": 0.0009321836401771149,
  "byte_72": 0.0016313213703099511,
  "byte_b2": 0.0009321836401771149,
  "byte_31": 0.0009321836401771149,
  "byte_e5": 0.0009321836401771149,
  "byte_67": 0.00023304591004427873,
  "byte_da": 0.00023304591004427873,
  "byte_46": 0.0013982754602656724,
  "byte_11": 0.004660918200885575,
  "byte_ed": 0.0006991377301328362,
  "byte_cf": 0.00046609182008855747,
  "byte_d6": 0.00046609182008855747,
  "byte_0b": 0.0018643672803542299,
  "byte_53": 0.00023304591004427873,
  "byte_a3": 0.0013982754602656724,
  "byte_7c": 0.0009321836401771149,
  "byte_13": 0.00046609182008855747,
  "byte_8f": 0.00023304591004427873,
  "byte_9b": 0.0013982754602656724,
  "byte_26": 0.00023304591004427873,
  "byte_70": 0.0011652295502213937,
  "byte_82": 0.009787928221859706,
  "byte_a8": 0.00023304591004427873,
  "byte_4f": 0.0006991377301328362,
  "byte_c7": 0.0011652295502213937,
  "byte_8d": 0.0013982754602656724,
  "byte_a5": 0.00023304591004427873,
  "byte_cb": 0.00046609182008855747,
  "byte_95": 0.0018643672803542299,
  "byte_9c": 0.0013982754602656724,
  "byte_86": 0.0030295968305756233,
  "byte_a9": 0.00023304591004427873,
  "byte_bb": 0.00046609182008855747,
  "byte_be": 0.00046609182008855747,
  "byte_1d": 0.0006991377301328362,
  "byte_c6": 0.0011652295502213937,
  "byte_c8": 0.0018643672803542299,
  "byte_ef": 0.0011652295502213937,
  "byte_ca": 0.0006991377301328362,
  "byte_d9": 0.00046609182008855747,
  "byte_fe": 0.0018643672803542299,
  "byte_4c": 0.00023304591004427873,
  "byte_d3": 0.0011652295502213937,
  "byte_6c": 0.0016313213703099511,
  "byte_9e": 0.00023304591004427873,
  "byte_3e": 0.0013982754602656724,
  "byte_d5": 0.0011652295502213937,
  "byte_1e": 0.0013982754602656724,
  "byte_62": 0.0006991377301328362,
  "byte_f6": 0.0009321836401771149,
  "byte_4b": 0.00023304591004427873,
  "byte_7a": 0.0006991377301328362,
  "byte_f2": 0.0009321836401771149,
  "byte_e3": 0.0006991377301328362,
  "byte_8b": 0.0006991377301328362,
  "byte_56": 0.018410626893498018,
  "byte_78": 0.003495688650664181,
  "byte_db": 0.00046609182008855747,
  "byte_83": 0.008389652761594034,
  "byte_c1": 0.00023304591004427873,
  "byte_1f": 0.0009321836401771149,
  "byte_92": 0.003961780470752739,
  "byte_27": 0.0006991377301328362,
  "byte_4e": 0.0011652295502213937,
  "byte_24": 0.0018643672803542299,
  "byte_84": 0.004194826380797017,
  "byte_97": 0.00023304591004427873,
  "byte_aa": 0.0009321836401771149,
  "byte_99": 0.00023304591004427873,
  "byte_bd": 0.00046609182008855747,
  "byte_44": 0.0018643672803542299,
  "byte_2f": 0.00023304591004427873,
  "byte_f8": 0.00023304591004427873,
  "byte_93": 0.0032626427406199023,
  "byte_a1": 0.0011652295502213937,
  "byte_bc": 0.00023304591004427873,
  "byte_76": 0.0006991377301328362,
  "byte_c2": 0.0016313213703099511,
  "byte_d1": 0.0013982754602656724,
  "byte_af": 0.00023304591004427873,
  "byte_0e": 0.003961780470752739,
  "byte_e4": 0.00023304591004427873,
  "byte_37": 0.0016313213703099511,
  "byte_94": 0.005127010020974132,
  "byte_96": 0.00046609182008855747,
  "byte_49": 0.00046609182008855747,
  "byte_5c": 0.00023304591004427873,
  "byte_0c": 0.0016313213703099511,
  "byte_6f": 0.0006991377301328362,
  "byte_d2": 0.0006991377301328362,
  "byte_33": 0.003961780470752739,
  "byte_7f": 0.0037287345607084597,
  "byte_85": 0.0023304591004427873,
  "byte_e1": 0.00046609182008855747,
  "byte_eb": 0.00046609182008855747,
  "byte_ec": 0.00046609182008855747,
  "byte_7d": 0.0009321836401771149,
  "byte_71": 0.0006991377301328362,
  "byte_c0": 0.003495688650664181,
  "byte_f7": 0.0011652295502213937,
  "byte_29": 0.0009321836401771149,
  "byte_5f": 0.003961780470752739,
  "byte_3f": 0.0013982754602656724,
  "byte_e8": 0.00023304591004427873,
  "byte_1b": 0.0009321836401771149,
  "byte_0f": 0.004427872290841296,
  "byte_cd": 0.00046609182008855747,
  "byte_b1": 0.0018643672803542299,
  "byte_e2": 0.0006991377301328362,
  "byte_69": 0.0020974131903985084,
  "byte_fc": 0.0016313213703099511,
  "byte_2b": 0.0006991377301328362,
  "byte_f1": 0.0011652295502213937,
  "byte_c4": 0.0013982754602656724,
  "byte_f5": 0.0018643672803542299,
  "byte_5a": 0.0018643672803542299,
  "byte_4d": 0.0006991377301328362,
  "byte_30": 0.0009321836401771149,
  "byte_b5": 0.00023304591004427873,
  "byte_2c": 0.0006991377301328362,
  "byte_75": 0.00023304591004427873,
  "byte_74": 0.0006991377301328362,
  "byte_2e": 0.00023304591004427873,
  "byte_f0": 0.00046609182008855747,
  "byte_22": 0.00046609182008855747,
  "byte_2a": 0.0013982754602656724,
  "byte_38": 0.0006991377301328362,
  "byte_ee": 0.0009321836401771149,
  "byte_a2": 0.0009321836401771149,
  "byte_b4": 0.00023304591004427873,
  "byte_7b": 0.00023304591004427873,
  "byte_9a": 0.00023304591004427873,
  "byte_48": 0.0006991377301328362,
  "byte_8e": 0.00023304591004427873,
  "byte_b6": 0.00023304591004427873,
  "byte_c5": 0.00023304591004427873,
  "byte_cc": 0.00023304591004427873,
  "byte_dc": 0.00023304591004427873,
  "num_nodes": 31,
  "num_edges": 31,
  "avg_degree": 2.0,
  "density": 0.03333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 48,
  "event_nums": 113,
  "creation_block": 10694870,
  "creation_timestamp": 1597897292,
  "life_time": 6577959.0,
  "duration_seconds": 86349747.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 32,
  "num_buyers": 2,
  "num_sellers": 31,
  "num_creator_transfers": 2,
  "buy_amt": 9.29979758918e+19,
  "sell_amt": 9.30039758918e+19,
  "avg_value": 3.795958199665306e+18,
  "txn_per_block": 7.297095148039818e-06,
  "avg_gas_limit": 81348.95833333333,
  "std_gas_limit": 159753.30387349825,
  "avg_gas_used": 63900.541666666664,
  "std_gas_used": 147163.42447046164,
  "avg_gas_price": 107908471774.33333,
  "std_gas_price": 50201083521.959885,
  "purchase_num": 12,
  "transfer_num": 8,
  "withdraw_num": 2,
  "approve_num": 19,
  "timeline_sequence": [
    [
      10694870,
      1597897292,
      67,
      129,
      0,
      1168414,
      104000000000,
      0,
      1,
      9242244,
      1068414,
      12435478
    ],
    [
      10694941,
      1597898294,
      4,
      229,
      6000000000000000,
      21000,
      111000000000,
      1,
      0,
      10828956,
      21000,
      12435407
    ],
    [
      10696930,
      1597924984,
      70,
      90,
      100000000000000000,
      58935,
      105000001459,
      0,
      1,
      8245308,
      58935,
      12433418
    ],
    [
      10696934,
      1597925052,
      0,
      69,
      1000000000000000000,
      76615,
      99000000000,
      0,
      1,
      6998689,
      58935,
      12433414
    ],
    [
      10696934,
      1597925052,
      5,
      142,
      1000000000000000000,
      76615,
      99000000000,
      0,
      1,
      12375391,
      58935,
      12433414
    ],
    [
      10696937,
      1597925080,
      0,
      106,
      3660845798800000000,
      82509,
      96800000000,
      0,
      1,
      6551934,
      58935,
      12433411
    ],
    [
      10696937,
      1597925080,
      0,
      141,
      2148264960000000000,
      76615,
      96000000000,
      0,
      1,
      9344001,
      58935,
      12433411
    ],
    [
      10696938,
      1597925088,
      1,
      241,
      987597210000000000,
      57115,
      115000000000,
      0,
      1,
      12089600,
      43935,
      12433410
    ],
    [
      10696955,
      1597925374,
      0,
      190,
      100000000000000000,
      82509,
      115500000000,
      0,
      1,
      11469976,
      58935,
      12433393
    ],
    [
      10696963,
      1597925483,
      1,
      61,
      560088718000000000,
      61509,
      115500000000,
      0,
      1,
      3525381,
      43935,
      12433385
    ],
    [
      10697014,
      1597926190,
      0,
      59,
      0,
      40000,
      100000000000,
      0,
      1,
      3706534,
      31464,
      12433334
    ],
    [
      10697103,
      1597927245,
      0,
      181,
      3400000000000000000,
      76615,
      115000000000,
      0,
      1,
      11772667,
      58935,
      12433245
    ],
    [
      10697190,
      1597928329,
      0,
      204,
      10000000000000000000,
      76615,
      109000000000,
      0,
      1,
      8301136,
      58935,
      12433158
    ],
    [
      10697196,
      1597928400,
      1,
      188,
      51161179205000000000,
      57115,
      112000000000,
      0,
      1,
      8429842,
      43935,
      12433152
    ],
    [
      10697318,
      1597929885,
      0,
      117,
      18880000000000000000,
      76615,
      115000000000,
      0,
      1,
      6434346,
      58935,
      12433030
    ],
    [
      10697365,
      1597930590,
      1,
      23,
      0,
      60000,
      110000000000,
      1,
      0,
      3396439,
      21082,
      12432983
    ],
    [
      10697433,
      1597931408,
      2,
      225,
      0,
      80000,
      110000001235,
      0,
      1,
      9554823,
      31464,
      12432915
    ],
    [
      10704534,
      1598025560,
      2,
      89,
      0,
      68395,
      151000000000,
      0,
      1,
      4728181,
      52612,
      12425814
    ],
    [
      10707904,
      1598070501,
      3,
      123,
      0,
      48911,
      99000000000,
      0,
      1,
      10487594,
      37624,
      12422444
    ],
    [
      10713917,
      1598150545,
      3,
      23,
      0,
      80000,
      100000000377,
      1,
      0,
      1797057,
      21082,
      12416431
    ],
    [
      10713940,
      1598150822,
      4,
      46,
      0,
      85000,
      100000000000,
      1,
      0,
      2247745,
      21082,
      12416408
    ],
    [
      10747506,
      1598595598,
      6,
      126,
      0,
      68395,
      73000000000,
      0,
      1,
      6317324,
      52612,
      12382842
    ],
    [
      10748167,
      1598604256,
      0,
      161,
      0,
      48846,
      49000000000,
      0,
      1,
      12420963,
      44406,
      12382181
    ],
    [
      10754026,
      1598682309,
      7,
      51,
      0,
      68395,
      94000000000,
      0,
      1,
      3142172,
      52612,
      12376322
    ],
    [
      10754050,
      1598682644,
      4,
      8,
      0,
      48846,
      194000000000,
      0,
      1,
      319408,
      44406,
      12376298
    ],
    [
      10760725,
      1598770545,
      8,
      170,
      0,
      68411,
      160000000000,
      0,
      1,
      10287560,
      52624,
      12369623
    ],
    [
      10761939,
      1598787441,
      2,
      146,
      0,
      48846,
      137000000000,
      0,
      1,
      9067057,
      44406,
      12368409
    ],
    [
      10761978,
      1598788006,
      2935,
      67,
      0,
      48846,
      180000000000,
      0,
      1,
      7227852,
      44406,
      12368370
    ],
    [
      10761981,
      1598788041,
      828,
      32,
      0,
      48846,
      200000000000,
      0,
      1,
      3006117,
      44406,
      12368367
    ],
    [
      10761985,
      1598788128,
      265,
      104,
      0,
      48846,
      199000000000,
      0,
      1,
      7639038,
      44406,
      12368363
    ],
    [
      10761989,
      1598788192,
      1046,
      171,
      0,
      48846,
      132600000000,
      0,
      1,
      11868448,
      44406,
      12368359
    ],
    [
      10762033,
      1598788779,
      332,
      137,
      0,
      48846,
      143000000000,
      0,
      1,
      11223760,
      44406,
      12368315
    ],
    [
      10762054,
      1598788989,
      2151,
      55,
      0,
      111111,
      200000000000,
      0,
      1,
      4143308,
      44406,
      12368294
    ],
    [
      10762054,
      1598788989,
      285,
      152,
      0,
      48846,
      174000000000,
      0,
      1,
      10038533,
      44406,
      12368294
    ],
    [
      10762063,
      1598789106,
      9,
      66,
      0,
      48911,
      173000000000,
      0,
      1,
      4359583,
      37624,
      12368285
    ],
    [
      10762087,
      1598789447,
      350,
      143,
      0,
      48846,
      145200000000,
      0,
      1,
      8869078,
      44406,
      12368261
    ],
    [
      10762191,
      1598790796,
      124,
      145,
      0,
      48846,
      159500000233,
      0,
      1,
      8783146,
      44406,
      12368157
    ],
    [
      10813588,
      1599469295,
      2,
      71,
      0,
      68411,
      124000000000,
      0,
      1,
      2757283,
      37624,
      12316760
    ],
    [
      10819550,
      1599548705,
      23,
      32,
      0,
      48846,
      69000000000,
      0,
      1,
      3024474,
      44406,
      12310798
    ],
    [
      10819550,
      1599548705,
      24,
      35,
      0,
      48846,
      69000000000,
      0,
      1,
      3106873,
      25206,
      12310798
    ],
    [
      11126574,
      1603642298,
      10,
      101,
      0,
      48846,
      33000000000,
      0,
      1,
      4079658,
      44406,
      12003774
    ],
    [
      11187083,
      1604445128,
      193,
      18,
      0,
      48846,
      26000000000,
      0,
      1,
      1164612,
      44406,
      11943265
    ],
    [
      11237647,
      1605115302,
      1,
      137,
      0,
      73690,
      30000000000,
      0,
      1,
      12206249,
      37636,
      11892701
    ],
    [
      11239889,
      1605145253,
      21,
      56,
      0,
      48846,
      57200000233,
      0,
      1,
      3458401,
      44406,
      11890459
    ],
    [
      16950313,
      1680303671,
      481,
      95,
      0,
      46242,
      23325217266,
      0,
      1,
      7331799,
      46242,
      6180035
    ],
    [
      17272829,
      1684247039,
      241,
      48,
      0,
      53946,
      56981424365,
      0,
      1,
      2965972,
      46506,
      5857519
    ],
    [
      10697014,
      1597926190,
      0,
      0,
      9556796686800000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      10697433,
      1597931408,
      0,
      0,
      83441179205000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.18;\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n\n    function balanceOf(address who) public constant returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender)\n        public\n        constant\n        returns (uint256);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) public returns (bool);\n\n    function approve(address spender, uint256 value) public returns (bool);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\ninterface Token {\n    function totalSupply() public constant returns (uint256 supply);\n\n    function balanceOf(address _owner)\n        public\n        constant\n        returns (uint256 balance);\n}\n\ncontract GenTokenCoin is ERC20 {\n    using SafeMath for uint256;\n    address public owner = address(0x6887e9c998b891196E6488A73A594151bA256b45);\n    address public eth_black = address(0);\n\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n\n    string public constant name = \"Gen Token\";\n    string public constant symbol = \"GEN\";\n    uint256 public constant decimals = 18;\n\n    uint256 public totalSupply = 855000000e18;\n    uint256 public totalRemaining_1 = 25000000e18;\n    uint256 public totalRemaining_2 = 30000000e18;\n    uint256 public totalRemaining_3 = 40000000e18;\n\n    uint256 public constant exchangeRate_1 = 25500;\n    uint256 public constant exchangeRate_2 = 18000;\n    uint256 public constant exchangeRate_3 = 13250;\n\n    uint256 public constant saleStartTime_1 = 1597924800;\n    uint256 public constant saleEndTime_1 = 1598011200;\n    uint256 public constant saleStartTime_2 = 1598011200;\n    uint256 public constant saleEndTime_2 = 1598097600;\n    uint256 public constant saleStartTime_3 = 1598097600;\n    uint256 public constant saleEndTime_3 = 1598184000;\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _value\n    );\n    event Purchase(address indexed _to, uint256 _amount, uint256 _rate);\n    event Destroy(address indexed _to, uint256 _value);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyPayloadSize(uint256 size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    }\n\n    modifier canBuy() {\n        require(msg.value > 0);\n        _;\n    }\n\n    function GenTokenCoin() public {\n        balances[owner] = totalSupply;\n    }\n\n    function() external payable {\n        buyTokens();\n    }\n\n    function buyTokens() public payable canBuy {\n        purchase(msg.sender, msg.value);\n    }\n\n    function purchase(address _to, uint256 _amount)\n        private\n        canBuy\n        returns (bool)\n    {\n        uint256 _rate;\n        uint256 _totalRemaining;\n        if (now >= saleStartTime_1 && now < saleEndTime_1) {\n            _rate = exchangeRate_1;\n            _totalRemaining = totalRemaining_1;\n        } else if (now >= saleStartTime_2 && now < saleEndTime_2) {\n            _rate = exchangeRate_2;\n            _totalRemaining = totalRemaining_2;\n        } else if (now >= saleStartTime_3 && now < saleEndTime_3) {\n            _rate = exchangeRate_3;\n            _totalRemaining = totalRemaining_3;\n        } else {\n            _rate = 0;\n            _totalRemaining = 0;\n        }\n\n        require(_rate > 0 && _totalRemaining > 0);\n        uint256 _tkv = _amount.mul(_rate);\n        require(_tkv <= _totalRemaining);\n        totalSupply = totalSupply.add(_tkv);\n\n        if (now >= saleStartTime_1 && now < saleEndTime_1) {\n            totalRemaining_1 = totalRemaining_1.sub(_tkv);\n        } else if (now >= saleStartTime_2 && now < saleEndTime_2) {\n            totalRemaining_2 = totalRemaining_2.sub(_tkv);\n        } else {\n            totalRemaining_3 = totalRemaining_3.sub(_tkv);\n        }\n\n        balances[_to] = balances[_to].add(_tkv);\n        Purchase(_to, _amount, _rate);\n        Transfer(address(0), _to, _tkv);\n\n        return true;\n    }\n\n    function destruction() public onlyOwner returns (bool) {\n        if (totalRemaining_1 > 0 && now > saleEndTime_1) {\n            balances[eth_black] = balances[eth_black].add(totalRemaining_1);\n            totalRemaining_1 = 0;\n            Destroy(eth_black, totalRemaining_1);\n        }\n\n        if (totalRemaining_2 > 0 && now > saleEndTime_2) {\n            balances[eth_black] = balances[eth_black].add(totalRemaining_2);\n            totalRemaining_2 = 0;\n            Destroy(eth_black, totalRemaining_2);\n        }\n\n        if (totalRemaining_3 > 0 && now > saleEndTime_3) {\n            balances[eth_black] = balances[eth_black].add(totalRemaining_3);\n            totalRemaining_3 = 0;\n            Destroy(eth_black, totalRemaining_3);\n        }\n\n        return true;\n    }\n\n    function timeStamp() public constant returns (uint256) {\n        return now;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _amount)\n        public\n        onlyPayloadSize(2 * 32)\n        returns (bool success)\n    {\n        require(_to != address(0));\n        require(_amount <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(msg.sender, _to, _amount);\n        return true;\n    }\n\n    function transferFrom(\n        address _from,\n        address _to,\n        uint256 _amount\n    ) public onlyPayloadSize(3 * 32) returns (bool success) {\n        require(_to != address(0));\n        require(_amount <= balances[_from]);\n        require(_amount <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_amount);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(_from, _to, _amount);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value)\n        public\n        returns (bool success)\n    {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender)\n        public\n        constant\n        returns (uint256)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    function withdraw() public onlyOwner {\n        uint256 etherBalance = this.balance;\n        owner.transfer(etherBalance);\n    }\n\n    function approveAndCall(\n        address _spender,\n        uint256 _value,\n        bytes _extraData\n    ) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\n        require(\n            _spender.call(\n                bytes4(\n                    bytes32(\n                        keccak256(\n                            \"receiveApproval(address,uint256,address,bytes)\"\n                        )\n                    )\n                ),\n                msg.sender,\n                _value,\n                this,\n                _extraData\n            )\n        );\n        return true;\n    }\n}"
}