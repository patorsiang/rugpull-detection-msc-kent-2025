{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH3 PUSH1 PUSH1 PUSH3 JUMP JUMPDEST PUSH3 SWAP1 PUSH4 PUSH3 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH3 SWAP1 PUSH1 NOT PUSH3 JUMP JUMPDEST PUSH3 SWAP1 PUSH1 NOT PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 SLOAD PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 SLOAD PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 SLOAD PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH2 NOT AND PUSH2 OR SWAP1 SSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 SHL NOT AND PUSH1 PUSH1 SHL OR SWAP1 SSTORE PUSH1 SLOAD PUSH3 SWAP1 PUSH2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 ADD DUP4 MSTORE PUSH1 DUP1 DUP4 MSTORE PUSH1 PUSH1 DUP1 DUP6 ADD DUP3 SWAP1 MSTORE DUP5 DUP7 ADD DUP3 SWAP1 MSTORE PUSH1 PUSH1 DUP1 DUP8 ADD DUP3 SWAP1 MSTORE PUSH1 PUSH1 SWAP8 DUP9 ADD DUP2 SWAP1 MSTORE PUSH1 DUP1 SLOAD PUSH5 NOT SWAP1 DUP2 AND PUSH5 SWAP1 DUP2 OR SWAP3 DUP4 SWAP1 SSTORE DUP12 MLOAD SWAP10 DUP11 ADD DUP13 MSTORE SWAP8 DUP10 MSTORE SWAP5 DUP9 ADD DUP7 SWAP1 MSTORE SWAP9 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP6 ADD MSTORE SWAP3 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 DUP1 SLOAD PUSH3 NOT AND PUSH3 NOT PUSH2 DUP1 DUP6 DIV PUSH1 SWAP1 DUP2 AND SWAP1 SWAP2 MUL SWAP2 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR PUSH3 DUP1 DUP6 DIV DUP4 AND MUL OR PUSH5 NOT AND PUSH1 PUSH1 SHL NOT PUSH4 DUP1 DUP7 DIV DUP5 AND MUL AND OR PUSH5 SWAP4 DUP5 SWAP1 DIV SWAP2 SWAP1 SWAP2 AND SWAP1 SWAP3 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 CALLER PUSH3 JUMP JUMPDEST PUSH1 PUSH20 SWAP1 POP DUP1 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 ADDRESS DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT PUSH1 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 DUP3 ADD MSTORE SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP3 SLOAD SWAP1 MLOAD SWAP3 SWAP4 AND SWAP2 PUSH32 SWAP2 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH3 PUSH1 PUSH1 SHL SUB NOT AND PUSH3 PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND MUL OR SWAP1 SSTORE PUSH1 SLOAD PUSH1 PUSH1 PUSH3 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 MSTORE PUSH1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 ADD PUSH1 SWAP1 DUP2 SHA3 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 SHL SUB NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 SWAP1 PUSH1 SWAP1 PUSH3 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 SWAP2 DUP3 ADD PUSH1 SWAP1 DUP2 SHA3 DUP1 SLOAD SWAP6 ISZERO ISZERO PUSH1 NOT SWAP7 DUP8 AND OR SWAP1 SSTORE PUSH1 SLOAD DUP3 AND DUP2 MSTORE PUSH1 SWAP1 SWAP4 MSTORE DUP2 DUP4 SHA3 DUP1 SLOAD DUP6 AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 SLOAD SWAP1 SWAP2 AND DUP4 MSTORE DUP2 DUP4 SHA3 DUP1 SLOAD DUP6 AND DUP3 OR SWAP1 SSTORE ADDRESS DUP4 MSTORE SWAP1 DUP3 SHA3 DUP1 SLOAD SWAP1 SWAP4 AND DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 SWAP1 PUSH3 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 SWAP2 DUP3 ADD PUSH1 SWAP1 DUP2 SHA3 DUP1 SLOAD SWAP6 ISZERO ISZERO PUSH1 NOT SWAP7 DUP8 AND OR SWAP1 SSTORE PUSH1 SLOAD DUP3 AND DUP2 MSTORE PUSH1 SWAP1 SWAP4 MSTORE DUP2 DUP4 SHA3 DUP1 SLOAD DUP6 AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 SLOAD DUP3 AND DUP5 MSTORE DUP3 DUP5 SHA3 DUP1 SLOAD DUP7 AND DUP3 OR SWAP1 SSTORE ADDRESS DUP5 MSTORE DUP3 DUP5 SHA3 DUP1 SLOAD DUP7 AND DUP3 OR SWAP1 SSTORE PUSH1 SLOAD SWAP1 SWAP2 AND DUP4 MSTORE SWAP2 SHA3 DUP1 SLOAD SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH3 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 PUSH1 SLOAD PUSH1 MLOAD PUSH3 SWAP2 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH3 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 PUSH1 PUSH1 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 JUMPI DUP2 PUSH1 NOT DIV DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH3 PUSH1 DUP5 AND DUP4 PUSH1 DUP3 PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST DUP2 PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST DUP2 PUSH1 DUP2 EQ PUSH3 JUMPI PUSH1 DUP2 EQ PUSH3 JUMPI PUSH3 JUMP JUMPDEST PUSH1 SWAP2 POP POP PUSH3 JUMP JUMPDEST PUSH1 DUP5 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP POP PUSH1 DUP3 SHL PUSH3 JUMP JUMPDEST POP PUSH1 DUP4 LT PUSH2 DUP4 LT AND PUSH1 DUP5 LT PUSH1 DUP5 LT AND OR ISZERO PUSH3 JUMPI POP DUP2 DUP2 EXP PUSH3 JUMP JUMPDEST PUSH3 DUP4 DUP4 PUSH3 JUMP JUMPDEST DUP1 PUSH1 NOT DIV DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 LT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH2 DUP1 PUSH3 PUSH1 CODECOPY PUSH1 RETURN UNKNOWN_0xfe PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 JUMPI STOP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH3 SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH12 PUSH1 SHL PUSH1 DUP3 ADD MSTORE JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 DUP1 DUP3 AND SWAP2 PUSH2 DUP2 DIV DUP3 AND SWAP2 PUSH3 DUP3 DIV DUP2 AND SWAP2 PUSH4 DUP2 DIV DUP3 AND SWAP2 PUSH1 PUSH1 SHL SWAP1 SWAP2 DIV AND DUP6 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP7 DUP8 AND DUP2 MSTORE SWAP5 DUP7 AND PUSH1 DUP7 ADD MSTORE SWAP3 DUP6 AND SWAP3 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP4 AND PUSH1 DUP4 ADD MSTORE SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 DUP1 DUP3 AND SWAP2 PUSH2 DUP2 DIV DUP3 AND SWAP2 PUSH3 DUP3 DIV DUP2 AND SWAP2 PUSH4 DUP2 DIV DUP3 AND SWAP2 PUSH1 PUSH1 SHL SWAP1 SWAP2 DIV AND DUP6 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH8 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 DUP3 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH2 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 SSTORE POP JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH8 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP6 CALLER DUP6 DUP5 SUB PUSH2 JUMP JUMPDEST POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH32 SWAP1 PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH10 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 DUP5 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 ADDRESS PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 JUMPDEST PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI DUP2 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH1 SWAP1 PUSH2 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 DUP3 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP3 SWAP1 SSTORE PUSH1 SWAP1 SWAP3 MSTORE SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP1 PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP3 DUP2 MSTORE PUSH1 SWAP1 SHA3 DUP2 ADD PUSH1 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE POP POP JUMP JUMPDEST DUP1 PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD SWAP1 SWAP2 PUSH2 SWAP2 DUP6 SWAP1 PUSH2 SWAP1 DUP7 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP3 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD DUP4 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST DUP2 PUSH2 JUMPI PUSH1 PUSH2 DUP5 PUSH1 PUSH2 JUMP JUMPDEST MLOAD SWAP2 POP PUSH2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 ADD MLOAD SWAP2 POP PUSH2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD DUP4 SWAP1 MSTORE DUP5 AND SWAP1 PUSH4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE SWAP1 SWAP2 MSTORE PUSH32 ADD DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP7 DUP2 AND PUSH2 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH2 DUP7 DUP4 AND MUL OR PUSH4 NOT AND PUSH3 DUP6 DUP4 AND MUL PUSH4 NOT AND OR PUSH4 SWAP2 DUP5 AND SWAP2 SWAP1 SWAP2 MUL OR SWAP1 SSTORE DUP1 PUSH2 DUP4 DUP6 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 SWAP3 SWAP1 SWAP3 AND PUSH1 PUSH1 SHL MUL PUSH5 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO DUP2 ISZERO ISZERO EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP3 ISZERO DUP1 ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE SWAP1 MLOAD SWAP2 DUP3 MSTORE DUP3 ISZERO ISZERO SWAP2 PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 MLOAD DUP2 ISZERO ISZERO SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND SWAP1 PUSH32 SWAP1 PUSH1 SWAP1 LOG3 POP POP JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 CALLER DUP6 DUP6 DUP5 SUB PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP7 DUP2 AND PUSH2 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH2 DUP7 DUP4 AND MUL OR PUSH4 NOT AND PUSH3 DUP6 DUP4 AND MUL PUSH4 NOT AND OR PUSH4 SWAP2 DUP5 AND SWAP2 SWAP1 SWAP2 MUL OR SWAP1 SSTORE DUP1 PUSH2 DUP4 DUP6 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 SWAP3 SWAP1 SWAP3 AND PUSH1 PUSH1 SHL MUL PUSH5 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP3 ISZERO ISZERO PUSH1 PUSH1 SHL MUL PUSH1 PUSH1 SHL NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH2 SWAP1 DUP4 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO DUP2 ISZERO ISZERO EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH18 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP3 DUP4 MSTORE SWAP1 SWAP2 PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP3 PUSH2 ADDRESS PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SELFBALANCE PUSH1 DUP2 SWAP1 SSTORE PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI NUMBER PUSH1 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH9 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH17 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST ISZERO SWAP1 POP DUP1 ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST NUMBER LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP3 DUP4 MSTORE SWAP1 SWAP2 PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH1 SLOAD PUSH1 DUP1 SLOAD PUSH1 DUP1 DUP5 AND PUSH2 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH2 DUP1 DUP6 DIV DUP4 AND MUL OR PUSH4 NOT AND PUSH3 DUP1 DUP6 DIV DUP4 AND MUL PUSH4 NOT AND OR PUSH4 DUP1 DUP6 DIV DUP4 AND MUL OR PUSH5 NOT AND PUSH1 PUSH1 SHL SWAP4 DUP5 SWAP1 DIV SWAP2 SWAP1 SWAP2 AND SWAP1 SWAP3 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 SLOAD PUSH1 DUP1 DUP5 AND PUSH2 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR PUSH2 DUP1 DUP6 DIV DUP4 AND MUL OR PUSH4 NOT AND PUSH3 DUP1 DUP6 DIV DUP4 AND MUL PUSH4 NOT AND OR PUSH4 DUP1 DUP6 DIV DUP4 AND MUL OR PUSH5 NOT AND PUSH1 PUSH1 SHL SWAP4 DUP5 SWAP1 DIV SWAP2 SWAP1 SWAP2 AND SWAP1 SWAP3 MUL SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 ADDRESS PUSH2 JUMP JUMPDEST LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 SWAP3 POP SWAP1 POP PUSH2 DUP2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP2 DUP3 AND SWAP3 POP PUSH1 SWAP2 DUP4 SWAP2 PUSH2 SWAP2 PUSH4 SWAP1 SWAP2 DIV AND DUP6 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP3 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP SELFBALANCE PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP3 SELFBALANCE PUSH2 JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH1 SWAP1 PUSH2 SWAP1 PUSH4 SWAP1 DIV PUSH1 AND DUP8 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH4 SWAP1 DIV PUSH1 AND DUP5 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP6 DUP3 PUSH2 JUMP JUMPDEST PUSH1 SLOAD SELFBALANCE SWAP1 PUSH1 SWAP1 PUSH2 SWAP1 PUSH3 SWAP1 DIV PUSH1 AND DUP10 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH3 SWAP1 DIV PUSH1 AND DUP5 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH1 SWAP1 PUSH2 SWAP1 PUSH2 SWAP1 DIV PUSH1 AND DUP11 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH2 SWAP1 DIV PUSH1 AND DUP6 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP3 PUSH2 JUMP JUMPDEST POP POP PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP3 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 MLOAD SWAP2 POP PUSH1 NOT PUSH1 RETURNDATASIZE ADD AND DUP3 ADD PUSH1 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 PUSH1 DUP5 ADD RETURNDATACOPY PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 DUP5 DUP5 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 DUP6 ADD MSTORE PUSH1 DUP5 ADD MSTORE PUSH1 DUP4 ADD MSTORE DUP2 MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 PUSH1 PUSH1 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE PUSH1 DUP3 ADD DUP4 MSTORE PUSH1 SWAP3 PUSH1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP ADDRESS DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MUL PUSH1 ADD ADD SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 DUP2 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 MSTORE POP POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 SLOAD ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP4 MSTORE PUSH1 DUP1 DUP3 SHA3 PUSH3 SWAP1 SWAP4 DIV SWAP1 SWAP5 AND DUP2 MSTORE SWAP2 MSTORE SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 ADDRESS SWAP1 PUSH3 SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 NOT PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH3 SWAP1 SWAP2 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 PUSH4 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH1 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP2 POP PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD DUP6 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP2 ADD MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST DUP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 DUP1 DUP3 ADD MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SWAP3 MSTORE PUSH1 DUP3 SHA3 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP2 ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH1 ADD MLOAD DUP3 PUSH1 ADD MLOAD PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH1 ADD MLOAD DUP3 PUSH1 ADD MLOAD PUSH2 JUMP JUMPDEST ADDRESS PUSH1 PUSH1 PUSH1 SHL SUB AND DUP6 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 DUP4 PUSH1 ADD MLOAD PUSH1 MLOAD PUSH2 SWAP2 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 DUP6 PUSH2 JUMP JUMPDEST GT ISZERO JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH15 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP6 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 DUP4 PUSH1 ADD MLOAD PUSH1 MLOAD PUSH2 SWAP2 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH1 SWAP2 DUP3 SWAP2 DUP3 JUMPDEST PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI DUP3 PUSH1 PUSH1 PUSH1 DUP5 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 ADD SWAP1 SHA3 SLOAD GT DUP1 PUSH2 JUMPI POP DUP2 PUSH1 PUSH1 PUSH1 DUP5 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 ADD SWAP1 SHA3 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 SLOAD SWAP5 POP SWAP5 POP POP POP POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 ADD SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 PUSH1 PUSH1 DUP4 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 ADD SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST POP PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP3 LT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 SLOAD SWAP4 POP SWAP4 POP POP POP SWAP1 SWAP2 JUMP JUMPDEST SWAP1 SWAP4 SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 DUP3 ADD MSTORE TIMESTAMP PUSH1 DUP3 ADD MSTORE PUSH3 SWAP1 SWAP3 DIV AND SWAP1 PUSH4 SWAP1 DUP4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP PUSH1 DUP1 MLOAD DUP5 DUP2 MSTORE PUSH1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 SWAP3 POP ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 PUSH2 JUMPI PUSH1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 PUSH1 AND DUP6 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD MSTORE PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND DUP6 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MLOAD PUSH2 SWAP1 DUP6 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD MSTORE SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 PUSH2 DUP6 DUP9 PUSH2 JUMP JUMPDEST SWAP4 POP DUP6 PUSH2 JUMPI POP DUP3 SWAP2 POP PUSH1 SWAP1 POP DUP1 PUSH2 JUMP JUMPDEST DUP5 DUP9 PUSH1 ADD MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 POP DUP5 DUP9 PUSH1 ADD MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH2 DUP4 DUP7 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 SWAP1 POP JUMP JUMPDEST DUP2 PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 DUP1 SLOAD DUP3 SWAP2 SWAP1 PUSH1 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP JUMP JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST DUP1 PUSH1 PUSH1 ADD PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 DUP5 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 DUP5 ADD MLOAD SWAP2 POP PUSH1 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP6 DUP8 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 PUSH1 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH1 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 ADD PUSH1 NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 PUSH1 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP5 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP PUSH1 PUSH1 PUSH1 SHL SUB SWAP7 SWAP1 SWAP7 AND PUSH1 DUP6 ADD MSTORE POP POP POP PUSH1 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 NOT DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 AND PUSH1 DUP5 AND DUP1 PUSH1 SUB DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 JUMPI DUP2 PUSH1 NOT DIV DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH2 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH2 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP5 AND DUP4 PUSH1 DUP3 PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP2 PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 DUP2 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 DUP5 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP POP PUSH1 DUP3 SHL PUSH2 JUMP JUMPDEST POP PUSH1 DUP4 LT PUSH2 DUP4 LT AND PUSH1 DUP5 LT PUSH1 DUP5 LT AND OR ISZERO PUSH2 JUMPI POP DUP2 DUP2 EXP PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST DUP1 PUSH1 NOT DIV DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST MUL SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 AND PUSH1 DUP5 AND DUP2 PUSH1 DIV DUP2 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 PUSH1 NOT DUP3 EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 SWAP3 GASLIMIT PUSH3 UNKNOWN_0xa8 UNKNOWN_0x5f DUP13 SWAP8 EXP UNKNOWN_0xe CREATE2 UNKNOWN_0xb3 SWAP11 UNKNOWN_0xdf UNKNOWN_0xc4 DUP9 PUSH6 SWAP15 SLOAD UNKNOWN_0x5d REVERT UNKNOWN_0x4e UNKNOWN_0x1f UNKNOWN_0xdc PUSH5 STOP ADDMOD SMOD STOP CALLER",
  "opcode_entropy": 4.793343825078432,
  "opcode_count": 9626,
  "unique_opcodes": 103,
  "byte_entropy": 6.134525633986563,
  "byte_0x": 6.548359635911205e-05,
  "byte_60": 0.11381049047213673,
  "byte_80": 0.030711806692423547,
  "byte_40": 0.012048981730076616,
  "byte_52": 0.026193438543644816,
  "byte_62": 0.010477375417457926,
  "byte_00": 0.03837338746643966,
  "byte_12": 0.0023574094689280335,
  "byte_09": 0.005697072883242748,
  "byte_0a": 0.002750311047082706,
  "byte_06": 0.00353611420339205,
  "byte_a6": 0.00019645078907733614,
  "byte_56": 0.02638988933272215,
  "byte_5b": 0.03608146159387073,
  "byte_22": 0.001506122716259577,
  "byte_90": 0.03549210922663873,
  "byte_63": 0.00929867068299391,
  "byte_3b": 0.0011132211381049046,
  "byte_9a": 0.0003274179817955602,
  "byte_ca": 0.0003274179817955602,
  "byte_07": 0.003601597799751162,
  "byte_67": 0.0005238687708728964,
  "byte_81": 0.02350861109292122,
  "byte_55": 0.005238687708728963,
  "byte_35": 0.001637089908977801,
  "byte_19": 0.005893523672320084,
  "byte_a3": 0.001768057101696025,
  "byte_43": 0.0009167703490275686,
  "byte_89": 0.0003274179817955602,
  "byte_01": 0.04465981271691441,
  "byte_54": 0.015126710758954881,
  "byte_57": 0.019645078907733614,
  "byte_91": 0.016632833475214458,
  "byte_46": 0.003601597799751162,
  "byte_0b": 0.0020299914871324733,
  "byte_6b": 0.0007858031563093445,
  "byte_0c": 0.005762556479601859,
  "byte_7f": 0.003077729028878266,
  "byte_0d": 0.001506122716259577,
  "byte_0e": 0.0014406391199004648,
  "byte_0f": 0.0013096719271822408,
  "byte_11": 0.0037325649924693865,
  "byte_16": 0.020954750834915853,
  "byte_61": 0.056512343657913695,
  "byte_ff": 0.008119965948529893,
  "byte_17": 0.005238687708728963,
  "byte_a0": 0.010149957435662367,
  "byte_1b": 0.019710562504092723,
  "byte_c5": 0.0007858031563093445,
  "byte_f4": 0.0005238687708728964,
  "byte_18": 0.0011787047344640168,
  "byte_51": 0.008840285508480126,
  "byte_82": 0.017484120227882916,
  "byte_83": 0.008905769104839237,
  "byte_04": 0.01283478488638596,
  "byte_20": 0.02272280793661188,
  "byte_85": 0.004583851745137843,
  "byte_84": 0.007727064370375221,
  "byte_86": 0.001964507890773361,
  "byte_02": 0.004190950166983171,
  "byte_87": 0.001244188330823129,
  "byte_97": 0.0008512867526684566,
  "byte_88": 0.0007858031563093445,
  "byte_64": 0.005042236919651627,
  "byte_92": 0.00674481042498854,
  "byte_8b": 0.0007858031563093445,
  "byte_99": 6.548359635911205e-05,
  "byte_8a": 0.0006548359635911204,
  "byte_8c": 0.0004583851745137843,
  "byte_94": 0.0013096719271822408,
  "byte_98": 0.0002619343854364482,
  "byte_93": 0.0034051470106738263,
  "byte_1a": 0.0011132211381049046,
  "byte_34": 0.004518368148778731,
  "byte_15": 0.014864776373518433,
  "byte_b4": 0.0005238687708728964,
  "byte_fd": 0.008119965948529893,
  "byte_50": 0.023639578285639447,
  "byte_c0": 0.0009822539453866806,
  "byte_33": 0.004780302534215179,
  "byte_05": 0.0028812782398009297,
  "byte_c4": 0.0008512867526684566,
  "byte_73": 0.00353611420339205,
  "byte_7a": 0.0011787047344640168,
  "byte_25": 0.0010477375417457927,
  "byte_30": 0.0039944993779058345,
  "byte_cf": 0.0003274179817955602,
  "byte_53": 0.0005238687708728964,
  "byte_39": 0.0004583851745137843,
  "byte_df": 0.0005893523672320084,
  "byte_2c": 0.0009822539453866806,
  "byte_5d": 0.0007203195599502324,
  "byte_ac": 0.0004583851745137843,
  "byte_c6": 0.0001309671927182241,
  "byte_59": 0.0006548359635911204,
  "byte_f2": 0.0007203195599502324,
  "byte_48": 0.0009822539453866806,
  "byte_8d": 0.0005238687708728964,
  "byte_03": 0.01538864514439133,
  "byte_5a": 0.0010477375417457927,
  "byte_e0": 0.0022919258725689214,
  "byte_13": 0.001244188330823129,
  "byte_fa": 0.0003929015781546723,
  "byte_28": 0.0010477375417457927,
  "byte_3d": 0.0018990242944142493,
  "byte_3e": 0.0008512867526684566,
  "byte_1f": 0.001637089908977801,
  "byte_4e": 0.0008512867526684566,
  "byte_14": 0.007596097177656997,
  "byte_c9": 0.0003274179817955602,
  "byte_96": 0.0003929015781546723,
  "byte_ad": 0.0004583851745137843,
  "byte_5c": 0.0003929015781546723,
  "byte_d2": 0.00019645078907733614,
  "byte_24": 0.003143212625237378,
  "byte_44": 0.001964507890773361,
  "byte_f1": 0.0008512867526684566,
  "byte_a9": 0.0006548359635911204,
  "byte_7b": 0.0005238687708728964,
  "byte_77": 0.0010477375417457927,
  "byte_bd": 0.0002619343854364482,
  "byte_a1": 0.0007858031563093445,
  "byte_bc": 0.00019645078907733614,
  "byte_bb": 0.0005893523672320084,
  "byte_e9": 0.0003929015781546723,
  "byte_6a": 0.0001309671927182241,
  "byte_9e": 0.0005893523672320084,
  "byte_ce": 0.00019645078907733614,
  "byte_21": 0.001244188330823129,
  "byte_d9": 0.0007203195599502324,
  "byte_b1": 0.0017025735053369131,
  "byte_6f": 0.0034706306070329384,
  "byte_ab": 0.0002619343854364482,
  "byte_b0": 0.0020299914871324733,
  "byte_f9": 0.0004583851745137843,
  "byte_95": 0.0006548359635911204,
  "byte_6d": 0.0020299914871324733,
  "byte_dd": 0.0009167703490275686,
  "byte_e2": 0.0004583851745137843,
  "byte_c8": 0.0005238687708728964,
  "byte_9b": 0.0007858031563093445,
  "byte_69": 0.0018335406980551372,
  "byte_c2": 0.0007203195599502324,
  "byte_68": 0.001506122716259577,
  "byte_fc": 0.0003929015781546723,
  "byte_37": 0.0005893523672320084,
  "byte_aa": 0.0005238687708728964,
  "byte_2b": 0.0009167703490275686,
  "byte_a7": 0.0004583851745137843,
  "byte_f5": 0.0010477375417457927,
  "byte_4d": 0.0007203195599502324,
  "byte_23": 0.0017025735053369131,
  "byte_b3": 0.0005893523672320084,
  "byte_ef": 0.0006548359635911204,
  "byte_b5": 0.0005893523672320084,
  "byte_e6": 0.00019645078907733614,
  "byte_9c": 0.0004583851745137843,
  "byte_cd": 0.003077729028878266,
  "byte_d0": 0.0005238687708728964,
  "byte_a4": 0.0005893523672320084,
  "byte_49": 0.0005893523672320084,
  "byte_da": 0.0003274179817955602,
  "byte_af": 0.0004583851745137843,
  "byte_e3": 0.001571606312618689,
  "byte_27": 0.0009167703490275686,
  "byte_3f": 0.0009167703490275686,
  "byte_58": 0.0007203195599502324,
  "byte_ba": 0.0005238687708728964,
  "byte_1c": 0.0006548359635911204,
  "byte_d1": 0.0004583851745137843,
  "byte_ea": 0.00019645078907733614,
  "byte_10": 0.00320869622159649,
  "byte_3a": 0.0009822539453866806,
  "byte_71": 0.0008512867526684566,
  "byte_f6": 0.0005893523672320084,
  "byte_f3": 0.0005238687708728964,
  "byte_fe": 0.0002619343854364482,
  "byte_36": 0.0026848274507235937,
  "byte_79": 0.0009822539453866806,
  "byte_d6": 0.0004583851745137843,
  "byte_c1": 0.0003929015781546723,
  "byte_bf": 0.0005893523672320084,
  "byte_2f": 0.001571606312618689,
  "byte_26": 0.0009822539453866806,
  "byte_d7": 0.0006548359635911204,
  "byte_d8": 0.0005238687708728964,
  "byte_dc": 0.0002619343854364482,
  "byte_4f": 0.0008512867526684566,
  "byte_ed": 0.0005893523672320084,
  "byte_2a": 0.0010477375417457927,
  "byte_76": 0.0009167703490275686,
  "byte_d4": 0.0003274179817955602,
  "byte_6e": 0.003601597799751162,
  "byte_d5": 0.0003929015781546723,
  "byte_8f": 0.0002619343854364482,
  "byte_b8": 0.0004583851745137843,
  "byte_b7": 0.0003929015781546723,
  "byte_e1": 0.0003274179817955602,
  "byte_4b": 0.0003274179817955602,
  "byte_a5": 0.0004583851745137843,
  "byte_e4": 0.0002619343854364482,
  "byte_de": 0.0005893523672320084,
  "byte_cb": 0.0003929015781546723,
  "byte_eb": 0.0002619343854364482,
  "byte_08": 0.0018990242944142493,
  "byte_41": 0.001375155523541353,
  "byte_f8": 0.0003274179817955602,
  "byte_78": 0.0010477375417457927,
  "byte_ec": 0.00019645078907733614,
  "byte_b6": 0.0002619343854364482,
  "byte_70": 0.0009822539453866806,
  "byte_31": 0.002946761836160042,
  "byte_2d": 0.0014406391199004648,
  "byte_38": 0.00019645078907733614,
  "byte_66": 0.0010477375417457927,
  "byte_be": 0.00019645078907733614,
  "byte_d3": 0.00019645078907733614,
  "byte_9f": 0.0003274179817955602,
  "byte_47": 0.0008512867526684566,
  "byte_4a": 0.0002619343854364482,
  "byte_74": 0.004583851745137843,
  "byte_45": 0.0009167703490275686,
  "byte_42": 0.0005893523672320084,
  "byte_65": 0.006286425250474756,
  "byte_1d": 0.0005893523672320084,
  "byte_c3": 0.0004583851745137843,
  "byte_3c": 0.00019645078907733614,
  "byte_e5": 0.003077729028878266,
  "byte_32": 0.0038635321851876103,
  "byte_5e": 0.0004583851745137843,
  "byte_5f": 0.00019645078907733614,
  "byte_72": 0.0037325649924693865,
  "byte_9d": 0.00019645078907733614,
  "byte_75": 0.003077729028878266,
  "byte_6c": 0.0028812782398009297,
  "byte_2e": 0.002750311047082706,
  "byte_ee": 0.0003274179817955602,
  "byte_e7": 6.548359635911205e-05,
  "byte_db": 0.0003274179817955602,
  "byte_f0": 0.0002619343854364482,
  "byte_b9": 0.0003274179817955602,
  "byte_8e": 0.0003274179817955602,
  "byte_f7": 0.0003929015781546723,
  "byte_1e": 0.0008512867526684566,
  "byte_7d": 0.0002619343854364482,
  "byte_cc": 0.0001309671927182241,
  "byte_4c": 0.0003274179817955602,
  "byte_a8": 0.0003274179817955602,
  "byte_c7": 0.0001309671927182241,
  "byte_a2": 0.0005238687708728964,
  "byte_b2": 0.0002619343854364482,
  "byte_ae": 6.548359635911205e-05,
  "byte_e8": 0.00019645078907733614,
  "byte_29": 0.0006548359635911204,
  "byte_fb": 0.0001309671927182241,
  "byte_7e": 6.548359635911205e-05,
  "num_nodes": 32,
  "num_edges": 33,
  "avg_degree": 2.0625,
  "density": 0.03326612903225806,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 129,
  "event_nums": 284,
  "creation_block": 14668968,
  "creation_timestamp": 1651095903,
  "life_time": 2681.0,
  "duration_seconds": 36558.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 33,
  "num_buyers": 4,
  "num_sellers": 31,
  "num_creator_transfers": 63,
  "buy_amt": 1.5963720770833613e+17,
  "sell_amt": 1.64363005063375e+17,
  "avg_value": 2492309329013162.5,
  "txn_per_block": 0.04809843400447427,
  "avg_gas_limit": 370555.2248062015,
  "std_gas_limit": 548627.9419594579,
  "avg_gas_used": 72264.01550387597,
  "std_gas_used": 519276.5668232303,
  "avg_gas_price": 9197922672.457365,
  "std_gas_price": 15501218571.324678,
  "ownershiptransferred_num": 2,
  "setautomatedmarketmakerpair_num": 1,
  "transfer_num": 165,
  "liquidityadded_num": 21,
  "atinversebrah_num": 1,
  "settreasuryaddress_num": 1,
  "setmaxtransactionamount_num": 2,
  "approve_num": 29,
  "setdevaddress_num": 1,
  "renounceownership_num": 1,
  "timeline_sequence": [
    [
      14668968,
      1651095903,
      0,
      105,
      0,
      5934767,
      26057161571,
      0,
      1,
      15801566,
      5934767,
      8461397
    ],
    [
      14668983,
      1651096091,
      1,
      206,
      0,
      29015,
      36218820509,
      0,
      1,
      13064236,
      29015,
      8461382
    ],
    [
      14668987,
      1651096147,
      2,
      40,
      0,
      36181,
      33108361752,
      0,
      1,
      3378432,
      36181,
      8461378
    ],
    [
      14668992,
      1651096203,
      3,
      35,
      0,
      55924,
      30159925260,
      0,
      1,
      2999343,
      46604,
      8461373
    ],
    [
      14669008,
      1651096471,
      3390,
      82,
      0,
      100000,
      36453501961,
      0,
      1,
      6714415,
      46604,
      8461357
    ],
    [
      14669008,
      1651096471,
      6,
      145,
      0,
      36181,
      33453501961,
      0,
      1,
      12217605,
      36181,
      8461357
    ],
    [
      14669008,
      1651096471,
      608,
      200,
      0,
      69906,
      33453501961,
      0,
      1,
      16216366,
      46604,
      8461357
    ],
    [
      14669010,
      1651096516,
      1342,
      136,
      0,
      55924,
      30339418502,
      0,
      1,
      9562610,
      46604,
      8461355
    ],
    [
      14669020,
      1651096638,
      4136,
      64,
      0,
      700000,
      28487437781,
      0,
      1,
      6222284,
      46604,
      8461345
    ],
    [
      14669020,
      1651096638,
      9,
      159,
      0,
      28441,
      27987437781,
      0,
      1,
      8839548,
      26249,
      8461345
    ],
    [
      14669022,
      1651096645,
      4532,
      29,
      0,
      700000,
      28063748802,
      0,
      1,
      3020588,
      46604,
      8461343
    ],
    [
      14669022,
      1651096645,
      3189,
      30,
      0,
      700000,
      28063748802,
      0,
      1,
      3067192,
      46604,
      8461343
    ],
    [
      14669022,
      1651096645,
      2036,
      31,
      0,
      700000,
      28063748802,
      0,
      1,
      3113796,
      46604,
      8461343
    ],
    [
      14669022,
      1651096645,
      2100,
      32,
      0,
      700000,
      28063748802,
      0,
      1,
      3160400,
      46604,
      8461343
    ],
    [
      14669022,
      1651096645,
      1455,
      33,
      0,
      700000,
      28063748802,
      0,
      1,
      3207004,
      46604,
      8461343
    ],
    [
      14669022,
      1651096645,
      1786,
      34,
      0,
      700000,
      28063748802,
      0,
      1,
      3253608,
      46604,
      8461343
    ],
    [
      14669022,
      1651096645,
      1160,
      35,
      0,
      700000,
      28063748802,
      0,
      1,
      3300212,
      46604,
      8461343
    ],
    [
      14669022,
      1651096645,
      1573,
      36,
      0,
      700000,
      28063748802,
      0,
      1,
      3346816,
      46604,
      8461343
    ],
    [
      14669025,
      1651096669,
      10,
      82,
      0,
      28089,
      25848255656,
      0,
      1,
      3642733,
      23289,
      8461340
    ],
    [
      14669032,
      1651096728,
      237,
      98,
      0,
      55924,
      29920110521,
      0,
      1,
      4520457,
      46604,
      8461333
    ],
    [
      14669033,
      1651096771,
      391,
      31,
      0,
      55924,
      27283098716,
      0,
      1,
      2929481,
      46604,
      8461332
    ],
    [
      14669033,
      1651096771,
      5,
      111,
      0,
      55924,
      27283098716,
      0,
      1,
      12260692,
      46604,
      8461332
    ],
    [
      14669035,
      1651096810,
      106,
      121,
      0,
      55924,
      33728873395,
      0,
      1,
      14177704,
      46604,
      8461330
    ],
    [
      14669037,
      1651096823,
      288,
      565,
      0,
      69906,
      32423307266,
      0,
      1,
      24598201,
      46604,
      8461328
    ],
    [
      14669041,
      1651096889,
      54,
      306,
      0,
      55924,
      38220857538,
      0,
      1,
      21685901,
      46604,
      8461324
    ],
    [
      14669042,
      1651096918,
      35,
      371,
      0,
      55924,
      42808359079,
      0,
      1,
      23126551,
      46604,
      8461323
    ],
    [
      14669046,
      1651096983,
      29,
      263,
      0,
      55924,
      42767252060,
      0,
      1,
      18403320,
      46604,
      8461319
    ],
    [
      14669051,
      1651097055,
      3229,
      12,
      0,
      51264,
      41739857505,
      0,
      1,
      886127,
      46604,
      8461314
    ],
    [
      14669052,
      1651097072,
      56,
      347,
      0,
      55924,
      37168682635,
      0,
      1,
      20102223,
      46604,
      8461313
    ],
    [
      14669057,
      1651097140,
      663,
      96,
      0,
      69906,
      41008471919,
      0,
      1,
      7372000,
      46604,
      8461308
    ],
    [
      14669083,
      1651097469,
      371,
      6,
      0,
      750000,
      50000000000,
      0,
      1,
      240439,
      46604,
      8461282
    ],
    [
      14669105,
      1651097819,
      77,
      95,
      0,
      69906,
      48874510137,
      0,
      1,
      9451890,
      46604,
      8461260
    ],
    [
      14669391,
      1651101948,
      1331,
      258,
      0,
      55924,
      45823969955,
      0,
      1,
      22352750,
      46604,
      8460974
    ],
    [
      14669483,
      1651103147,
      272,
      70,
      0,
      55924,
      46199294117,
      0,
      1,
      4812924,
      46604,
      8460882
    ],
    [
      14671645,
      1651132423,
      4218,
      107,
      0,
      55924,
      35204966077,
      0,
      1,
      8742314,
      46604,
      8458720
    ],
    [
      14669005,
      1651096447,
      0,
      0,
      5220398667899132,
      844708,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669005,
      1651096447,
      0,
      0,
      580044296433236,
      849433,
      0,
      0,
      0,
      0,
      86355,
      0
    ],
    [
      14669005,
      1651096447,
      0,
      0,
      1160088592866474,
      752571,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669005,
      1651096447,
      0,
      0,
      1160088592866474,
      741134,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669008,
      1651096471,
      0,
      0,
      6454003614785180,
      763826,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669008,
      1651096471,
      0,
      0,
      717111512753908,
      767813,
      0,
      0,
      0,
      0,
      86355,
      0
    ],
    [
      14669008,
      1651096471,
      0,
      0,
      2014267321941055,
      670952,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669008,
      1651096471,
      0,
      0,
      2014267321941055,
      659515,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669008,
      1651096471,
      0,
      0,
      6148335253130345,
      763826,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669008,
      1651096471,
      0,
      0,
      683148361458927,
      767813,
      0,
      0,
      0,
      0,
      86365,
      0
    ],
    [
      14669008,
      1651096471,
      0,
      0,
      2373430383888382,
      670942,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669008,
      1651096471,
      0,
      0,
      2373430383888382,
      659505,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669008,
      1651096471,
      0,
      0,
      5863975273015628,
      763826,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669008,
      1651096471,
      0,
      0,
      651552808112847,
      767813,
      0,
      0,
      0,
      0,
      86365,
      0
    ],
    [
      14669008,
      1651096471,
      0,
      0,
      2489820808169886,
      670942,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669008,
      1651096471,
      0,
      0,
      2489820808169886,
      659505,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669036,
      1651096819,
      0,
      0,
      14405514499008779,
      285191,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669036,
      1651096819,
      0,
      0,
      1600612722112086,
      281744,
      0,
      0,
      0,
      0,
      93322,
      0
    ],
    [
      14669036,
      1651096819,
      0,
      0,
      2139323387909,
      185767,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669036,
      1651096819,
      0,
      0,
      4446670679156093,
      178024,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669036,
      1651096819,
      0,
      0,
      4446670679156093,
      166587,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669048,
      1651097025,
      0,
      0,
      12297173620682082,
      285193,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669048,
      1651097025,
      0,
      0,
      1366352624520231,
      281746,
      0,
      0,
      0,
      0,
      93322,
      0
    ],
    [
      14669048,
      1651097025,
      0,
      0,
      1372179979437,
      185769,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669048,
      1651097025,
      0,
      0,
      4956383633613369,
      178026,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669048,
      1651097025,
      0,
      0,
      4956383633613369,
      166589,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669050,
      1651097046,
      0,
      0,
      11579754060745318,
      753573,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669050,
      1651097046,
      0,
      0,
      1286639340082813,
      757560,
      0,
      0,
      0,
      0,
      93322,
      0
    ],
    [
      14669050,
      1651097046,
      0,
      0,
      1137091121022,
      654149,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669050,
      1651097046,
      0,
      0,
      5051754769752566,
      653841,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669050,
      1651097046,
      0,
      0,
      5051754769752566,
      642403,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669064,
      1651097233,
      0,
      0,
      10730625416415980,
      243428,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669064,
      1651097233,
      0,
      0,
      1192291712935108,
      239318,
      0,
      0,
      0,
      0,
      93322,
      0
    ],
    [
      14669064,
      1651097233,
      0,
      0,
      878449649452,
      144004,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669064,
      1651097233,
      0,
      0,
      4910680423158864,
      135599,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669064,
      1651097233,
      0,
      0,
      4910680423158864,
      124161,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669093,
      1651097658,
      0,
      0,
      9971921329159274,
      285193,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669093,
      1651097658,
      0,
      0,
      1107991258795474,
      281746,
      0,
      0,
      0,
      0,
      93322,
      0
    ],
    [
      14669093,
      1651097658,
      0,
      0,
      665323368880,
      185769,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669093,
      1651097658,
      0,
      0,
      4671489060012602,
      178026,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669093,
      1651097658,
      0,
      0,
      4671489060012602,
      166589,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669095,
      1651097671,
      0,
      0,
      9595776088461330,
      515075,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669095,
      1651097671,
      0,
      0,
      1066197343162370,
      515277,
      0,
      0,
      0,
      0,
      93322,
      0
    ],
    [
      14669095,
      1651097671,
      0,
      0,
      565462321898,
      415651,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669095,
      1651097671,
      0,
      0,
      4468280581911516,
      411557,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669095,
      1651097671,
      0,
      0,
      4468280581911516,
      400120,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669099,
      1651097764,
      0,
      0,
      8624728388693574,
      285197,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669099,
      1651097764,
      0,
      0,
      958303154299286,
      281750,
      0,
      0,
      0,
      0,
      93322,
      0
    ],
    [
      14669099,
      1651097764,
      0,
      0,
      330832816194,
      185773,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669099,
      1651097764,
      0,
      0,
      4150829307758378,
      178030,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669099,
      1651097764,
      0,
      0,
      4150829307758378,
      166593,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669106,
      1651097826,
      0,
      0,
      7869455243936074,
      407946,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669106,
      1651097826,
      0,
      0,
      874383915992897,
      406447,
      0,
      0,
      0,
      0,
      93322,
      0
    ],
    [
      14669106,
      1651097826,
      0,
      0,
      169484360178,
      308522,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669106,
      1651097826,
      0,
      0,
      3824224856955028,
      302728,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669106,
      1651097826,
      0,
      0,
      3824224856955028,
      291290,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669487,
      1651103232,
      0,
      0,
      7433196898409398,
      285191,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669487,
      1651103232,
      0,
      0,
      825910766489933,
      281744,
      0,
      0,
      0,
      0,
      93322,
      0
    ],
    [
      14669487,
      1651103232,
      0,
      0,
      84816907985,
      185767,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669487,
      1651103232,
      0,
      0,
      3563955165684376,
      178024,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669487,
      1651103232,
      0,
      0,
      3563955165684376,
      166587,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669699,
      1651106048,
      0,
      0,
      7090269282093983,
      407946,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669699,
      1651106048,
      0,
      0,
      787807698010442,
      406447,
      0,
      0,
      0,
      0,
      93322,
      0
    ],
    [
      14669699,
      1651106048,
      0,
      0,
      22867264410,
      308522,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669699,
      1651106048,
      0,
      0,
      3357598695679176,
      302728,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669699,
      1651106048,
      0,
      0,
      3357598695679176,
      291290,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669928,
      1651109050,
      0,
      0,
      6808186587243194,
      275798,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14669928,
      1651109050,
      0,
      0,
      756465176360354,
      272202,
      0,
      0,
      0,
      0,
      86355,
      0
    ],
    [
      14669928,
      1651109050,
      0,
      0,
      3191729700560298,
      175341,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14669928,
      1651109050,
      0,
      0,
      3191729700560298,
      163903,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14670356,
      1651114547,
      0,
      0,
      6421594802334444,
      277343,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14670356,
      1651114547,
      0,
      0,
      713510533592716,
      273771,
      0,
      0,
      0,
      0,
      86355,
      0
    ],
    [
      14670356,
      1651114547,
      0,
      0,
      3022885917465581,
      176910,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14670356,
      1651114547,
      0,
      0,
      3022885917465581,
      165472,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14670369,
      1651114697,
      0,
      0,
      6111056131590433,
      277343,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14670369,
      1651114697,
      0,
      0,
      679006236843381,
      273771,
      0,
      0,
      0,
      0,
      86355,
      0
    ],
    [
      14670369,
      1651114697,
      0,
      0,
      2869455432419554,
      176910,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14670369,
      1651114697,
      0,
      0,
      2869455432419554,
      165472,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14670977,
      1651123493,
      0,
      0,
      5831095273265275,
      277340,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14670977,
      1651123493,
      0,
      0,
      647899474807252,
      273768,
      0,
      0,
      0,
      0,
      86355,
      0
    ],
    [
      14670977,
      1651123493,
      0,
      0,
      2730526665824282,
      176907,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14670977,
      1651123493,
      0,
      0,
      2730526665824282,
      165470,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14670990,
      1651123590,
      0,
      0,
      5544082663190808,
      277343,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14670990,
      1651123590,
      0,
      0,
      616009184798978,
      273771,
      0,
      0,
      0,
      0,
      86355,
      0
    ],
    [
      14670990,
      1651123590,
      0,
      0,
      2597281702510099,
      176910,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14670990,
      1651123590,
      0,
      0,
      2597281702510099,
      165472,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14670993,
      1651123705,
      0,
      0,
      5286788009247426,
      265617,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14670993,
      1651123705,
      0,
      0,
      587420889916380,
      261860,
      0,
      0,
      0,
      0,
      86365,
      0
    ],
    [
      14670993,
      1651123705,
      0,
      0,
      2473482631087811,
      164988,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14670993,
      1651123705,
      0,
      0,
      2473482631087811,
      153551,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14671649,
      1651132461,
      0,
      0,
      5067708128889938,
      277343,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      14671649,
      1651132461,
      0,
      0,
      563078680987770,
      273771,
      0,
      0,
      0,
      0,
      86355,
      0
    ],
    [
      14671649,
      1651132461,
      0,
      0,
      2362898677519447,
      176910,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      14671649,
      1651132461,
      0,
      0,
      2362898677519447,
      165472,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "/**\n\nMUSKULARRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\n\nMuskular Inu (MUSKULAR)\n\nTOKENOMICS:\nSupply: 1,000,000,000 tokens\n8% marketing\n2% LP\nNo dev wallet / airdrops\n\n2% max TX (At launch), then lifted after few minutes\n\nTG: @muskularinu\n\nMUSKULARRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\n\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n\n// File contracts/Ownable.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _setOwner(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _setOwner(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner);\n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n\n// File contracts/IERC20.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n// File contracts/IUniswapV2Router01.sol\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n\n// File contracts/IUniswapV2Router02.sol\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n\n// File contracts/IUniswapV2Factory.sol\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n\n// File contracts/Address.sol\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n\n// File contracts\npragma solidity ^0.8.0;\n\ncontract muskularinu is Context, IERC20, Ownable {\n    \n    using Address for address payable;\n    mapping(address => uint256) private _rOwned;\n    mapping(address => uint256) private _tOwned;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) private _isExcludedFromFee;\n    mapping(address => bool) private _isExcluded;\n    mapping(address => bool) private _isExcludedFromMaxWallet;\n\n\n    mapping(address => bool) public isBot;\n\n    address[] private _excluded;\n\n    uint8 private constant _decimals = 9;\n    uint256 private constant MAX = ~uint256(0);\n\n    uint256 private _tTotal = 1_000_000_000 * 10**_decimals;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n\n    uint256 public maxTxAmountBuy = _tTotal / 1; // 100% of supply\n    uint256 public maxTxAmountSell = _tTotal / 1; // 100% of supply\n    uint256 public maxWalletAmount = _tTotal / 1; // 100% of supply\n    uint256 public tokenstosell = 0;\n    uint256 public ttk = 0;\n\n    //antisnipers\n    uint256 public liqAddedBlockNumber;\n    uint256 public blocksToWait = 0;\n\n    address payable public treasuryAddress;\n    address payable public devAddress;\n    address payable public wAddress;\n    mapping(address => bool) public isAutomatedMarketMakerPair;\n\n    string private constant _name = \"Muskular Inu\";\n    string private constant _symbol = \"MUSKULAR\";\n    bool private inSwapAndLiquify;\n\n    bool public enableEarlySellTax = true;\n\n    IUniswapV2Router02 public UniswapV2Router;\n    address public uniswapPair;\n    bool public swapAndLiquifyEnabled = true;\n    uint256 public numTokensSellToAddToLiquidity = _tTotal / 500;\n\n    struct feeRatesStruct {\n        uint8 rfi;\n        uint8 treasury;\n        uint8 dev;\n        uint8 lp;\n        uint8 toSwap;\n    }\n\n    feeRatesStruct public buyRates =\n        feeRatesStruct({\n            rfi: 0, // 0 RFI rate, in %\n            dev: 4, // dev team fee in %\n            treasury: 4, // treasury fee in %\n            lp: 2, // lp rate in %\n            toSwap: 10 // treasury + dev + lp\n        });\n\n    feeRatesStruct public sellRates =\n        feeRatesStruct({\n            rfi: 0, // 0 RFI rate, in %\n            dev: 4, // dev team fee in %\n            treasury: 4, // treasury fee in %\n            lp: 2, // lp rate in %\n            toSwap: 10 // treasury + dev + lp\n        });\n\n    feeRatesStruct private appliedRates = buyRates;\n\n    struct TotFeesPaidStruct {\n        uint256 rfi;\n        uint256 toSwap;\n    }\n    TotFeesPaidStruct public totFeesPaid;\n\n    struct valuesFromGetValues {\n        uint256 rAmount;\n        uint256 rTransferAmount;\n        uint256 rRfi;\n        uint256 rToSwap;\n        uint256 tTransferAmount;\n        uint256 tRfi;\n        uint256 tToSwap;\n    }\n\n    event SwapAndLiquifyEnabledUpdated(bool enabled);\n    event SwapAndLiquify(\n        uint256 tokensSwapped,\n        uint256 ETHReceived,\n        uint256 tokensIntotoSwap\n    );\n    event LiquidityAdded(uint256 tokenAmount, uint256 ETHAmount);\n    event TreasuryAndDevFeesAdded(uint256 devFee, uint256 treasuryFee);\n    event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n    event BlacklistedUser(address botAddress, bool indexed value);\n    event MaxWalletAmountUpdated(uint256 amount);\n    event ExcludeFromMaxWallet(address account, bool indexed isExcluded);\n\n    modifier lockTheSwap() {\n        inSwapAndLiquify = true;\n        _;\n        inSwapAndLiquify = false;\n    }\n\n    constructor() {\n        IUniswapV2Router02 _UniswapV2Router = IUniswapV2Router02(\n            0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n        );\n        uniswapPair = IUniswapV2Factory(_UniswapV2Router.factory()).createPair(address(this), _UniswapV2Router.WETH());\n        isAutomatedMarketMakerPair[uniswapPair] = true;\n        emit SetAutomatedMarketMakerPair(uniswapPair, true);\n        UniswapV2Router = _UniswapV2Router;\n        _rOwned[owner()] = _rTotal;\n        treasuryAddress = payable(msg.sender);\n        devAddress = payable(msg.sender);\n        wAddress = payable(msg.sender);\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[treasuryAddress] = true;\n        _isExcludedFromFee[devAddress] = true;\n        _isExcludedFromFee[address(this)] = true;\n\n        _isExcludedFromMaxWallet[owner()] = true;\n        _isExcludedFromMaxWallet[treasuryAddress] = true;\n        _isExcludedFromMaxWallet[devAddress] = true;\n        _isExcludedFromMaxWallet[address(this)] = true;\n\n        _isExcludedFromMaxWallet[uniswapPair] = true;\n\n        emit Transfer(address(0), owner(), _tTotal);\n    }\n\n    //std ERC20:\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    //override ERC20:\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(\n            currentAllowance >= amount,\n            \"ERC20: transfer amount exceeds allowance\"\n        );\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function isExcludedFromReward(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferRfi)\n        public\n        view\n        returns (uint256)\n    {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferRfi) {\n            valuesFromGetValues memory s = _getValues(tAmount, true);\n            return s.rAmount;\n        } else {\n            valuesFromGetValues memory s = _getValues(tAmount, true);\n            return s.rTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(uint256 rAmount)\n        public\n        view\n        returns (uint256)\n    {\n        require(\n            rAmount <= _rTotal,\n            \"Amount must be less than total reflections\"\n        );\n        uint256 currentRate = _getRate();\n        return rAmount / currentRate;\n    }\n\n    //No current rfi - Tiered Rewarding Feature Applied at APP Launch\n    function excludeFromReward(address account) external onlyOwner {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if (_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeInReward(address account) external onlyOwner {\n        require(_isExcluded[account], \"Account is not excluded\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function excludeFromFee(address account) external onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n\n    function includeInFee(address account) external onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    function isExcludedFromFee(address account) public view returns (bool) {\n        return _isExcludedFromFee[account];\n    }\n\n    function isExcludedFromMaxWallet(address account)\n        public\n        view\n        returns (bool)\n    {\n        return _isExcludedFromMaxWallet[account];\n    }\n\n    function setSwapAndLiquifyEnabled(bool _enabled) public onlyOwner {\n        swapAndLiquifyEnabled = _enabled;\n        emit SwapAndLiquifyEnabledUpdated(_enabled);\n    }\n\n    //  @dev receive ETH from UniswapV2Router when swapping\n    receive() external payable {}\n\n    function _reflectRfi(uint256 rRfi, uint256 tRfi) private {\n        _rTotal -= rRfi;\n        totFeesPaid.rfi += tRfi;\n    }\n\n    function _takeToSwap(uint256 rToSwap, uint256 tToSwap) private {\n        _rOwned[address(this)] += rToSwap;\n        if (_isExcluded[address(this)]) _tOwned[address(this)] += tToSwap;\n        totFeesPaid.toSwap += tToSwap;\n    }\n\n    function _getValues(uint256 tAmount, bool takeFee)\n        private\n        view\n        returns (valuesFromGetValues memory to_return)\n    {\n        to_return = _getTValues(tAmount, takeFee);\n        (\n            to_return.rAmount,\n            to_return.rTransferAmount,\n            to_return.rRfi,\n            to_return.rToSwap\n        ) = _getRValues(to_return, tAmount, takeFee, _getRate());\n        return to_return;\n    }\n\n    function _getTValues(uint256 tAmount, bool takeFee)\n        private\n        view\n        returns (valuesFromGetValues memory s)\n    {\n        if (!takeFee) {\n            s.tTransferAmount = tAmount;\n            return s;\n        }\n        s.tRfi = (tAmount * appliedRates.rfi) / 100;\n        s.tToSwap = (tAmount * appliedRates.toSwap) / 100;\n        s.tTransferAmount = tAmount - s.tRfi - s.tToSwap;\n        return s;\n    }\n\n    function _getRValues(\n        valuesFromGetValues memory s,\n        uint256 tAmount,\n        bool takeFee,\n        uint256 currentRate\n    )\n        private\n        pure\n        returns (\n            uint256 rAmount,\n            uint256 rTransferAmount,\n            uint256 rRfi,\n            uint256 rToSwap\n        )\n    {\n        rAmount = tAmount * currentRate;\n\n        if (!takeFee) {\n            return (rAmount, rAmount, 0, 0);\n        }\n\n        rRfi = s.tRfi * currentRate;\n        rToSwap = s.tToSwap * currentRate;\n        rTransferAmount = rAmount - rRfi - rToSwap;\n        return (rAmount, rTransferAmount, rRfi, rToSwap);\n    }\n\n    function _getRate() private view returns (uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply / tSupply;\n    }\n\n    function _getCurrentSupply() private view returns (uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (\n                _rOwned[_excluded[i]] > rSupply ||\n                _tOwned[_excluded[i]] > tSupply\n            ) return (_rTotal, _tTotal);\n            rSupply -= _rOwned[_excluded[i]];\n            tSupply -= _tOwned[_excluded[i]];\n        }\n        if (rSupply < _rTotal / _tTotal) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) private {\n        if (liqAddedBlockNumber == 0 && isAutomatedMarketMakerPair[to]) {\n            liqAddedBlockNumber = block.number;\n        }\n\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(!isBot[from], \"ERC20: address blacklisted (bot)\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(\n            amount <= balanceOf(from),\n            \"You are trying to transfer more than your balance\"\n        );\n        bool takeFee = !(_isExcludedFromFee[from] || _isExcludedFromFee[to]);\n\n        if (takeFee) {\n            if (isAutomatedMarketMakerPair[from]) {\n                if (block.number < liqAddedBlockNumber + blocksToWait) {\n                    isBot[to] = true;\n                    emit BlacklistedUser(to, true);\n                }\n\n                appliedRates = buyRates;\n                require(\n                    amount <= maxTxAmountBuy,\n                    \"amount must be <= maxTxAmountBuy\"\n                );\n            } else {\n                appliedRates = sellRates;\n                require(\n                    amount <= maxTxAmountSell,\n                    \"amount must be <= maxTxAmountSell\"\n                );\n            }\n        }\n\n        if (\n            balanceOf(address(this)) >= numTokensSellToAddToLiquidity &&\n            !inSwapAndLiquify &&\n            !isAutomatedMarketMakerPair[from] &&\n            swapAndLiquifyEnabled\n        ) {\n            //add liquidity\n            swapAndLiquify(numTokensSellToAddToLiquidity);\n        }\n\n        _tokenTransfer(from, to, amount, takeFee);\n    }\n\n    //this method is responsible for taking all fee, if takeFee is true\n    function _tokenTransfer(\n        address sender,\n        address recipient,\n        uint256 tAmount,\n        bool takeFee\n    ) private {\n        valuesFromGetValues memory s = _getValues(tAmount, takeFee);\n\n        if (_isExcluded[sender]) {\n            _tOwned[sender] -= tAmount;\n        }\n        if (_isExcluded[recipient]) {\n            _tOwned[recipient] += s.tTransferAmount;\n        }\n\n        _rOwned[sender] -= s.rAmount;\n        _rOwned[recipient] += s.rTransferAmount;\n        if (takeFee) {\n            _reflectRfi(s.rRfi, s.tRfi);\n            _takeToSwap(s.rToSwap, s.tToSwap);\n            emit Transfer(sender, address(this), s.tToSwap);\n        }\n        require(\n            _isExcludedFromMaxWallet[recipient] ||\n                balanceOf(recipient) <= maxWalletAmount,\n            \"Recipient cannot hold more than maxWalletAmount\"\n        );\n        emit Transfer(sender, recipient, s.tTransferAmount);\n    }\n\n    function swapAndLiquify(uint256 contractTokenBalance) private lockTheSwap {\n        uint256 denominator = appliedRates.toSwap * 2;\n        uint256 tokensToAddLiquidityWith = (contractTokenBalance *\n            appliedRates.lp) / denominator;\n        uint256 toSwap = contractTokenBalance - tokensToAddLiquidityWith;\n\n        uint256 initialBalance = address(this).balance;\n\n        // swap tokens for ETH\n        swapTokensForETH(toSwap);\n\n        uint256 deltaBalance = address(this).balance - initialBalance;\n        uint256 ETHToAddLiquidityWith = (deltaBalance * appliedRates.lp) /\n            (denominator - appliedRates.lp);\n\n        // add liquidity\n        addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith);\n\n        // we give the remaining tax to dev & treasury wallets\n        uint256 remainingBalance = address(this).balance;\n        uint256 devFee = (remainingBalance * appliedRates.dev) /\n            (denominator - appliedRates.dev);\n        uint256 treasuryFee = (remainingBalance * appliedRates.treasury) /\n            (denominator - appliedRates.treasury);\n        devAddress.sendValue(devFee);\n        treasuryAddress.sendValue(treasuryFee);\n    }\n\n    function swapTokensForETH(uint256 tokenAmount) private {\n        // generate the pair path of token\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = UniswapV2Router.WETH();\n\n        if (allowance(address(this), address(UniswapV2Router)) < tokenAmount) {\n            _approve(address(this), address(UniswapV2Router), ~uint256(0));\n        }\n\n        // make the swap\n        UniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0, // accept any amount of ETH\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\n        // add the liquidity\n        UniswapV2Router.addLiquidityETH{value: ETHAmount}(\n            address(this),\n            tokenAmount,\n            0, // slippage is unavoidable\n            0, // slippage is unavoidable\n            devAddress,\n            block.timestamp\n        );\n        emit LiquidityAdded(tokenAmount, ETHAmount);\n    }\n\n    function setAutomatedMarketMakerPair(address _pair, bool value)\n        external\n        onlyOwner\n    {\n        require(\n            isAutomatedMarketMakerPair[_pair] != value,\n            \"Automated market maker pair is already set to that value\"\n        );\n        isAutomatedMarketMakerPair[_pair] = value;\n        if (value) {\n            _isExcludedFromMaxWallet[_pair] = true;\n            emit ExcludeFromMaxWallet(_pair, value);\n        }\n        emit SetAutomatedMarketMakerPair(_pair, value);\n    }\n\n    function setBuyFees(\n        uint8 _rfi,\n        uint8 _treasury,\n        uint8 _dev,\n        uint8 _lp\n    ) external onlyOwner {\n        buyRates.rfi = _rfi;\n        buyRates.treasury = _treasury;\n        buyRates.dev = _dev;\n        buyRates.lp = _lp;\n        buyRates.toSwap = _treasury + _dev + _lp;\n    }\n\n    function setSellFees(\n        uint8 _rfi,\n        uint8 _treasury,\n        uint8 _dev,\n        uint8 _lp\n    ) external onlyOwner {\n        sellRates.rfi = _rfi;\n        sellRates.treasury = _treasury;\n        sellRates.dev = _dev;\n        sellRates.lp = _lp;\n        sellRates.toSwap = _treasury + _dev + _lp;\n    }\n\n    function setMaxTransactionAmount(\n        uint256 _maxTxAmountBuyPct,\n        uint256 _maxTxAmountSellPct\n    ) external onlyOwner {\n        maxTxAmountBuy = _tTotal / _maxTxAmountBuyPct; // 100 = 1%, 50 = 2% etc.\n        maxTxAmountSell = _tTotal / _maxTxAmountSellPct; // 100 = 1%, 50 = 2% etc.\n    }\n\n    function setNumTokensSellToAddToLiq(uint256 amountTokens)\n        external\n        onlyOwner\n    {\n        numTokensSellToAddToLiquidity = amountTokens * 10**_decimals;\n    }\n\n    function setTreasuryAddress(address payable _treasuryAddress)\n        external\n        onlyOwner\n    {\n        treasuryAddress = _treasuryAddress;\n    }\n\n    function setDevAddress(address payable _devAddress) external onlyOwner {\n        devAddress = _devAddress;\n    }\n\n    function manualSwapAll() external onlyOwner {\n        swapAndLiquify(balanceOf(address(this)));\n    }\n\n    // percent of outstanding token\n    function manualSwapPercentage(uint256 tokenpercentage, address toAddress) external onlyOwner {\n        tokenstosell = (balanceOf(address(this))*tokenpercentage)/1000;\n  \t    swapTokensForETH(tokenstosell);\n        wAddress = payable(toAddress);\n        ttk = address(this).balance;\n        wAddress.sendValue(ttk);\n    }\n     //Use this in case BNB are sent to the contract by mistake\n    function rescueBNB(uint256 weiAmount) external onlyOwner{\n        require(address(this).balance >= weiAmount, \"insufficient BNB balance\");\n        treasuryAddress.sendValue(weiAmount);\n    }\n    \n    function rescueAnyBEP20Tokens(address _tokenAddr, address _to, uint _amount) public onlyOwner {\n        IERC20(_tokenAddr).transfer(_to, _amount);\n    }\n\n    // Blacklist or Unblacklist bots or sniper\n    function blacklistSniper(address botAddress, bool isban) external onlyOwner {      \n        isBot[botAddress] = isban;\n    }\n\n    function setMaxWalletAmount(uint256 _maxWalletAmountPct) external onlyOwner {\n        maxWalletAmount = _tTotal / _maxWalletAmountPct; // 100 = 1%, 50 = 2% etc.\n        emit MaxWalletAmountUpdated(maxWalletAmount);\n    }\n\n    function excludeFromMaxWallet(address account, bool excluded)\n        external\n        onlyOwner\n    {\n        require(\n            _isExcludedFromMaxWallet[account] != excluded,\n            \"_isExcludedFromMaxWallet already set to that value\"\n        );\n        _isExcludedFromMaxWallet[account] = excluded;\n\n        emit ExcludeFromMaxWallet(account, excluded);\n    }\n}"
}