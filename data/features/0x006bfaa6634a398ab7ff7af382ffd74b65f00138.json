{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH9 PUSH1 SHL PUSH1 MSTORE PUSH1 SWAP1 PUSH3 SWAP1 DUP3 PUSH3 JUMP JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 PUSH3 SWAP1 DUP3 PUSH3 JUMP JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 SWAP1 DUP2 OR DUP3 SSTORE PUSH1 PUSH1 SSTORE PUSH1 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 SSTORE PUSH1 PUSH1 SSTORE PUSH3 SWAP1 PUSH1 PUSH3 JUMP JUMPDEST PUSH3 SWAP1 PUSH5 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH20 OR SWAP1 SSTORE PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 PUSH3 SWAP2 PUSH3 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 SLOAD PUSH1 SLOAD PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH2 NOT AND PUSH2 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 SSTORE PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH1 DUP3 SWAP1 SSTORE PUSH1 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH2 NOT AND SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH2 PUSH1 MSTORE PUSH1 DUP2 SWAP1 SSTORE PUSH1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 CALLER PUSH3 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE DUP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH20 SWAP3 DUP4 SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 ADDRESS DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT PUSH1 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 DUP3 ADD MSTORE SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT SWAP1 DUP2 AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP4 DUP5 AND OR DUP3 SSTORE PUSH1 DUP1 SLOAD DUP5 AND DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH1 NOT SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE ADDRESS DUP1 DUP7 MSTORE DUP4 DUP7 SHA3 DUP1 SLOAD DUP4 AND DUP5 OR SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP12 DUP12 AND SWAP9 AND DUP9 OR SWAP1 SSTORE SWAP6 DUP6 MSTORE PUSH1 SWAP1 SWAP4 MSTORE DUP2 DUP5 SHA3 DUP1 SLOAD DUP5 AND DUP3 OR SWAP1 SSTORE DUP4 SLOAD DUP8 AND DUP5 MSTORE DUP2 DUP5 SHA3 DUP1 SLOAD DUP5 AND DUP3 OR SWAP1 SSTORE SWAP4 DUP4 MSTORE SWAP1 SWAP2 SHA3 DUP1 SLOAD SWAP1 SWAP2 AND DUP3 OR SWAP1 SSTORE SWAP1 SLOAD PUSH3 SWAP3 AND SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP1 PUSH1 SWAP1 PUSH32 SWAP1 PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH3 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 PUSH1 PUSH1 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 SWAP3 SWAP2 PUSH32 SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 SUB PUSH3 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 GT ISZERO PUSH3 JUMPI PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 SHA3 PUSH1 DUP6 ADD PUSH1 SHR DUP2 ADD PUSH1 DUP7 LT ISZERO PUSH3 JUMPI POP DUP1 JUMPDEST PUSH1 DUP6 ADD PUSH1 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 JUMPI DUP3 DUP2 SSTORE PUSH1 ADD PUSH3 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST PUSH3 DUP2 PUSH3 DUP5 SLOAD PUSH3 JUMP JUMPDEST DUP5 PUSH3 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 GT PUSH1 DUP2 EQ PUSH3 JUMPI PUSH1 DUP5 ISZERO PUSH3 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 NOT PUSH1 DUP7 SWAP1 SHL SHR NOT AND PUSH1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 JUMP JUMPDEST PUSH1 DUP6 DUP2 MSTORE PUSH1 DUP2 SHA3 PUSH1 NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 NOT PUSH1 DUP9 SWAP1 SHL PUSH1 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 JUMPI DUP2 PUSH1 NOT DIV DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST DUP2 PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST DUP2 PUSH1 DUP2 EQ PUSH3 JUMPI PUSH1 DUP2 EQ PUSH3 JUMPI PUSH3 JUMP JUMPDEST PUSH1 SWAP2 POP POP PUSH3 JUMP JUMPDEST PUSH1 DUP5 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP POP PUSH1 DUP3 SHL PUSH3 JUMP JUMPDEST POP PUSH1 DUP4 LT PUSH2 DUP4 LT AND PUSH1 DUP5 LT PUSH1 DUP5 LT AND OR ISZERO PUSH3 JUMPI POP DUP2 DUP2 EXP PUSH3 JUMP JUMPDEST PUSH3 DUP4 DUP4 PUSH3 JUMP JUMPDEST DUP1 PUSH1 NOT DIV DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH3 PUSH1 DUP5 AND DUP4 PUSH3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 MLOAD PUSH2 PUSH3 PUSH1 CODECOPY PUSH1 DUP2 DUP2 PUSH2 ADD MSTORE PUSH2 ADD MSTORE PUSH2 PUSH1 RETURN UNKNOWN_0xfe PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 JUMPI STOP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH32 DUP2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH2 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH1 PUSH1 NOT SWAP2 DUP3 AND DUP2 OR SWAP1 SWAP3 SSTORE SWAP6 SWAP1 SWAP7 AND DUP1 DUP5 MSTORE DUP2 DUP5 SHA3 DUP1 SLOAD DUP8 AND DUP9 OR SWAP1 SSTORE SWAP4 DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP1 SLOAD DUP6 AND DUP7 OR SWAP1 SSTORE SWAP2 DUP2 MSTORE SHA3 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH8 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP1 DUP6 MSTORE SWAP3 MSTORE SWAP1 SWAP2 SHA3 SLOAD PUSH2 SWAP2 DUP7 SWAP2 PUSH2 SWAP1 DUP7 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP GT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH15 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 SSTORE PUSH1 SWAP1 DUP2 SWAP1 SSTORE SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SELFBALANCE SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND SWAP1 DUP3 ISZERO PUSH2 MUL SWAP1 DUP4 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 PUSH2 SWAP1 DUP4 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH2 MUL PUSH2 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 DUP4 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE POP JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 PUSH2 SWAP1 DUP4 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SSTORE PUSH1 SLOAD PUSH1 SSTORE PUSH2 TIMESTAMP PUSH3 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD DUP4 SWAP1 MSTORE DUP5 AND SWAP1 PUSH4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SSTORE PUSH2 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH18 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 SUB PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH8 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP1 DUP6 AND SUB PUSH2 JUMPI PUSH1 SLOAD DUP3 PUSH2 DUP6 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 SLOAD DUP2 LT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP7 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD DUP2 LT PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 SWAP1 PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE JUMPDEST PUSH1 DUP1 DUP3 ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP9 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ JUMPDEST ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH17 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP9 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 SSTORE PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 DUP9 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 PUSH1 SLOAD DUP8 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP9 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP10 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 SSTORE PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 DUP9 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 PUSH1 SLOAD DUP8 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMPDEST PUSH2 DUP7 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP10 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE DUP1 PUSH2 DUP4 DUP9 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP9 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP DUP1 ISZERO PUSH2 JUMPI PUSH1 SLOAD ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 SLOAD PUSH1 MLOAD SWAP1 DUP2 MSTORE ADDRESS SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB DUP11 AND SWAP1 PUSH32 SWAP1 PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST DUP7 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP9 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 PUSH1 SLOAD DUP10 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 PUSH1 PUSH1 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 MLOAD SWAP1 SWAP3 SWAP2 PUSH32 SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP2 DUP2 MSTORE PUSH32 SWAP1 PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SELFBALANCE PUSH2 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP3 SELFBALANCE PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP4 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP6 DUP2 MSTORE PUSH1 DUP2 ADD DUP4 SWAP1 MSTORE SWAP1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH32 SWAP1 PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE PUSH1 DUP3 ADD DUP4 MSTORE PUSH1 SWAP3 PUSH1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP ADDRESS DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP4 AND SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 SLOAD PUSH2 SWAP2 ADDRESS SWAP2 AND DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND SWAP3 PUSH4 SWAP3 PUSH2 SWAP3 DUP8 SWAP3 PUSH1 SWAP3 DUP9 SWAP3 SWAP2 AND SWAP1 TIMESTAMP SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE PUSH1 DUP3 ADD DUP4 MSTORE PUSH1 SWAP3 PUSH1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP ADDRESS DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP4 AND SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 SLOAD PUSH2 SWAP2 ADDRESS SWAP2 AND DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH1 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 ADDRESS SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE SWAP2 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 PUSH1 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 DUP4 ADD MSTORE PUSH1 PUSH1 PUSH1 SHL SUB PUSH32 DUP2 AND PUSH1 DUP5 ADD MSTORE TIMESTAMP PUSH1 DUP5 ADD MSTORE AND SWAP1 PUSH4 SWAP1 DUP4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 ADD PUSH1 NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 DUP5 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 SUB PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 DUP3 NOT DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 DUP1 DUP6 ADD SWAP5 POP DUP1 DUP5 ADD PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP8 MSTORE SWAP6 DUP3 ADD SWAP6 SWAP1 DUP3 ADD SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST POP SWAP5 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP6 DUP2 MSTORE DUP5 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH2 PUSH1 DUP4 ADD DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP5 SWAP1 SWAP5 AND PUSH1 DUP4 ADD MSTORE POP PUSH1 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 DUP5 ADD MLOAD SWAP2 POP PUSH1 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 DUP14 PUSH8 MUL UNKNOWN_0x5f UNKNOWN_0xe5 PUSH7 UNKNOWN_0x49 UNKNOWN_0xd1 INVALID_0x79",
  "opcode_entropy": 4.768764317125479,
  "opcode_count": 7165,
  "unique_opcodes": 87,
  "byte_entropy": 6.168747196899462,
  "byte_0x": 8.751969193068441e-05,
  "byte_60": 0.11508839488884999,
  "byte_e0": 0.002800630141781901,
  "byte_40": 0.012077717486434448,
  "byte_52": 0.02389287589707684,
  "byte_09": 0.0031507089095046386,
  "byte_a0": 0.009189567652721862,
  "byte_90": 0.032644845090145286,
  "byte_81": 0.024155434972868896,
  "byte_68": 0.0015753544547523193,
  "byte_4d": 0.001050236303168213,
  "byte_45": 0.0018379135305443726,
  "byte_53": 0.0009627166112375284,
  "byte_49": 0.0007876772273761596,
  "byte_20": 0.019429371608611936,
  "byte_4e": 0.0011377559950988972,
  "byte_55": 0.008226851041484334,
  "byte_b8": 0.00017503938386136881,
  "byte_1b": 0.01969193068440399,
  "byte_c0": 0.000437598459653422,
  "byte_01": 0.039996499212322775,
  "byte_62": 0.011990197794503764,
  "byte_00": 0.038508664449501136,
  "byte_2a": 0.00017503938386136881,
  "byte_82": 0.015140906704008401,
  "byte_05": 0.005338701207771749,
  "byte_56": 0.026343427271136005,
  "byte_5b": 0.038508664449501136,
  "byte_50": 0.02503063189217574,
  "byte_80": 0.031944687554699806,
  "byte_51": 0.01032732364782076,
  "byte_91": 0.012952914405741292,
  "byte_64": 0.004813583056187642,
  "byte_d8": 0.0005251181515841065,
  "byte_02": 0.0029756695256432696,
  "byte_03": 0.017416418694206195,
  "byte_54": 0.013653071941186767,
  "byte_ff": 0.004200945212672852,
  "byte_19": 0.005601260283563802,
  "byte_16": 0.017153859618414143,
  "byte_12": 0.003063189217573954,
  "byte_17": 0.0038508664449501137,
  "byte_04": 0.013215473481533345,
  "byte_06": 0.004025905828811483,
  "byte_07": 0.004901102748118327,
  "byte_14": 0.008576929809207072,
  "byte_08": 0.0024505513740591634,
  "byte_8d": 0.0007001575354454753,
  "byte_0a": 0.005513740591633117,
  "byte_37": 0.0007876772273761596,
  "byte_9e": 0.0006126378435147909,
  "byte_48": 0.0014878347628216348,
  "byte_76": 0.000437598459653422,
  "byte_e8": 0.0006126378435147909,
  "byte_4f": 0.000875196919306844,
  "byte_61": 0.05601260283563802,
  "byte_b6": 0.003675827061088745,
  "byte_c2": 0.0007001575354454753,
  "byte_71": 0.0014003150708909505,
  "byte_10": 0.0031507089095046386,
  "byte_73": 0.004113425520742167,
  "byte_6a": 0.000437598459653422,
  "byte_94": 0.0014878347628216348,
  "byte_f5": 0.000875196919306844,
  "byte_3e": 0.0014878347628216348,
  "byte_f6": 0.00026255907579205323,
  "byte_6e": 0.002800630141781901,
  "byte_db": 0.0005251181515841065,
  "byte_7a": 0.0009627166112375284,
  "byte_8a": 0.0006126378435147909,
  "byte_a3": 0.001312795378960266,
  "byte_df": 0.0006126378435147909,
  "byte_af": 0.00035007876772273763,
  "byte_bc": 0.00026255907579205323,
  "byte_e4": 8.751969193068441e-05,
  "byte_2c": 0.0006126378435147909,
  "byte_0c": 0.0016628741466830036,
  "byte_11": 0.004288464904603536,
  "byte_23": 0.005601260283563802,
  "byte_2f": 0.000437598459653422,
  "byte_18": 0.00218799229826711,
  "byte_1a": 0.00218799229826711,
  "byte_1c": 0.001750393838613688,
  "byte_1d": 0.0014878347628216348,
  "byte_1e": 0.0012252756870295817,
  "byte_1f": 0.003675827061088745,
  "byte_21": 0.004025905828811483,
  "byte_92": 0.00656397689480133,
  "byte_de": 0.00026255907579205323,
  "byte_ad": 0.000875196919306844,
  "byte_22": 0.006301417819009277,
  "byte_34": 0.005076142131979695,
  "byte_15": 0.014965867320147033,
  "byte_aa": 0.0005251181515841065,
  "byte_57": 0.02205496236653247,
  "byte_fd": 0.009627166112375284,
  "byte_33": 0.0029756695256432696,
  "byte_0d": 0.0014003150708909505,
  "byte_0b": 0.0014003150708909505,
  "byte_63": 0.01015228426395939,
  "byte_c4": 0.000875196919306844,
  "byte_5a": 0.0014878347628216348,
  "byte_25": 0.0007001575354454753,
  "byte_30": 0.0019254332224750569,
  "byte_b4": 0.0006126378435147909,
  "byte_cf": 0.0007001575354454753,
  "byte_97": 0.0006126378435147909,
  "byte_39": 0.00035007876772273763,
  "byte_5d": 0.000437598459653422,
  "byte_ac": 0.0006126378435147909,
  "byte_c6": 0.0005251181515841065,
  "byte_59": 0.0005251181515841065,
  "byte_f2": 0.0007876772273761596,
  "byte_83": 0.008226851041484334,
  "byte_93": 0.0019254332224750569,
  "byte_86": 0.0025380710659898475,
  "byte_fa": 0.000437598459653422,
  "byte_3d": 0.002363031682128479,
  "byte_43": 0.001050236303168213,
  "byte_c9": 0.0007001575354454753,
  "byte_96": 0.0011377559950988972,
  "byte_5c": 0.0006126378435147909,
  "byte_46": 0.003500787677227376,
  "byte_b7": 0.000437598459653422,
  "byte_85": 0.003238228601435323,
  "byte_24": 0.004113425520742167,
  "byte_44": 0.00218799229826711,
  "byte_87": 0.0012252756870295817,
  "byte_f1": 0.0012252756870295817,
  "byte_2b": 0.000437598459653422,
  "byte_84": 0.006651496586732014,
  "byte_8b": 0.000875196919306844,
  "byte_98": 0.000437598459653422,
  "byte_88": 0.0016628741466830036,
  "byte_95": 0.0011377559950988972,
  "byte_cb": 0.00035007876772273763,
  "byte_7f": 0.002625590757920532,
  "byte_dd": 0.000875196919306844,
  "byte_e2": 0.00035007876772273763,
  "byte_c8": 0.0007001575354454753,
  "byte_9b": 0.0007876772273761596,
  "byte_69": 0.0012252756870295817,
  "byte_b0": 0.00035007876772273763,
  "byte_fc": 0.0005251181515841065,
  "byte_a7": 0.0007001575354454753,
  "byte_a1": 0.000875196919306844,
  "byte_28": 0.0007001575354454753,
  "byte_b3": 0.00035007876772273763,
  "byte_ef": 0.0007876772273761596,
  "byte_bf": 0.0007001575354454753,
  "byte_9c": 0.0007001575354454753,
  "byte_13": 0.001750393838613688,
  "byte_cd": 0.004551023980395589,
  "byte_d0": 0.0028881498337125855,
  "byte_a4": 0.00035007876772273763,
  "byte_da": 0.00035007876772273763,
  "byte_e3": 0.0007001575354454753,
  "byte_6f": 0.0034132679852966917,
  "byte_6b": 0.0007876772273761596,
  "byte_0e": 0.003325748293366007,
  "byte_a9": 0.0007876772273761596,
  "byte_7b": 0.0011377559950988972,
  "byte_f4": 0.000437598459653422,
  "byte_77": 0.000875196919306844,
  "byte_bd": 0.0005251181515841065,
  "byte_bb": 0.0007876772273761596,
  "byte_e9": 0.0007001575354454753,
  "byte_3b": 0.00035007876772273763,
  "byte_ce": 0.00035007876772273763,
  "byte_d9": 0.0005251181515841065,
  "byte_b1": 0.000437598459653422,
  "byte_ab": 0.002625590757920532,
  "byte_41": 0.000437598459653422,
  "byte_dc": 0.00017503938386136881,
  "byte_38": 0.00035007876772273763,
  "byte_72": 0.004113425520742167,
  "byte_c7": 0.00017503938386136881,
  "byte_f3": 0.000875196919306844,
  "byte_d2": 0.00035007876772273763,
  "byte_f8": 0.00035007876772273763,
  "byte_79": 0.0007001575354454753,
  "byte_31": 0.0007876772273761596,
  "byte_ba": 0.00017503938386136881,
  "byte_c5": 0.000437598459653422,
  "byte_e5": 0.0038508664449501137,
  "byte_2d": 0.0005251181515841065,
  "byte_6c": 0.0012252756870295817,
  "byte_8f": 0.0006126378435147909,
  "byte_7d": 0.00026255907579205323,
  "byte_6d": 0.0014878347628216348,
  "byte_fe": 0.00035007876772273763,
  "byte_36": 0.002800630141781901,
  "byte_35": 0.0014003150708909505,
  "byte_8c": 0.00035007876772273763,
  "byte_26": 0.0005251181515841065,
  "byte_b5": 0.00035007876772273763,
  "byte_f7": 0.00035007876772273763,
  "byte_ed": 0.0006126378435147909,
  "byte_b2": 0.00035007876772273763,
  "byte_a5": 0.0006126378435147909,
  "byte_67": 0.0006126378435147909,
  "byte_f9": 0.00017503938386136881,
  "byte_3a": 0.0011377559950988972,
  "byte_e1": 0.00026255907579205323,
  "byte_d3": 0.00035007876772273763,
  "byte_70": 0.0011377559950988972,
  "byte_d1": 0.0007876772273761596,
  "byte_29": 0.000437598459653422,
  "byte_4c": 0.00035007876772273763,
  "byte_a8": 0.0005251181515841065,
  "byte_0f": 0.0007876772273761596,
  "byte_d7": 0.0007001575354454753,
  "byte_66": 0.0012252756870295817,
  "byte_ec": 0.000437598459653422,
  "byte_ca": 0.00035007876772273763,
  "byte_ea": 0.00026255907579205323,
  "byte_4a": 0.0005251181515841065,
  "byte_a6": 0.00035007876772273763,
  "byte_c3": 0.000437598459653422,
  "byte_74": 0.0031507089095046386,
  "byte_9a": 0.00017503938386136881,
  "byte_d6": 0.00026255907579205323,
  "byte_4b": 0.001050236303168213,
  "byte_d5": 0.00017503938386136881,
  "byte_3c": 0.0005251181515841065,
  "byte_65": 0.005688779975494486,
  "byte_42": 0.0009627166112375284,
  "byte_27": 0.000437598459653422,
  "byte_3f": 0.000437598459653422,
  "byte_89": 0.0005251181515841065,
  "byte_e6": 0.000437598459653422,
  "byte_f0": 0.0005251181515841065,
  "byte_78": 0.0007001575354454753,
  "byte_e7": 0.00026255907579205323,
  "byte_a2": 0.00026255907579205323,
  "byte_c1": 0.0005251181515841065,
  "byte_5e": 0.001050236303168213,
  "byte_75": 0.000875196919306844,
  "byte_b9": 0.00017503938386136881,
  "byte_9f": 0.000875196919306844,
  "byte_fb": 0.000437598459653422,
  "byte_99": 8.751969193068441e-05,
  "byte_ae": 0.00017503938386136881,
  "byte_d4": 8.751969193068441e-05,
  "byte_7c": 0.00017503938386136881,
  "byte_32": 0.0016628741466830036,
  "byte_2e": 8.751969193068441e-05,
  "byte_47": 0.0007876772273761596,
  "byte_eb": 8.751969193068441e-05,
  "byte_7e": 8.751969193068441e-05,
  "byte_ee": 0.00017503938386136881,
  "byte_be": 0.00026255907579205323,
  "byte_9d": 8.751969193068441e-05,
  "byte_58": 8.751969193068441e-05,
  "byte_5f": 8.751969193068441e-05,
  "num_nodes": 8,
  "num_edges": 8,
  "avg_degree": 2.0,
  "density": 0.14285714285714285,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 11,
  "event_nums": 45,
  "creation_block": 15864211,
  "creation_timestamp": 1667173115,
  "life_time": 74.0,
  "duration_seconds": 888.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 9,
  "num_buyers": 2,
  "num_sellers": 8,
  "num_creator_transfers": 1,
  "buy_amt": 792821863623005.0,
  "sell_amt": 792821863623005.0,
  "avg_value": 132136977270500.83,
  "txn_per_block": 0.14666666666666667,
  "avg_gas_limit": 899915.5454545454,
  "std_gas_limit": 1450605.9334071002,
  "avg_gas_used": 526540.0909090909,
  "std_gas_used": 1519884.295092435,
  "avg_gas_price": 8720710163.90909,
  "std_gas_price": 7539562573.613531,
  "ownershiptransferred_num": 1,
  "setautomatedmarketmakerpair_num": 1,
  "transfer_num": 26,
  "swapandliquify_num": 1,
  "tokensswappedduringtokenomics_num": 1,
  "approve_num": 6,
  "updatemaxwallettreshold_num": 1,
  "tradestatus_num": 1,
  "timeline_sequence": [
    [
      15864211,
      1667173115,
      0,
      152,
      0,
      5332369,
      5650443353,
      0,
      1,
      22837024,
      5332369,
      7266156
    ],
    [
      15864219,
      1667173211,
      1,
      188,
      0,
      55950,
      6190281060,
      0,
      1,
      13105133,
      46625,
      7266148
    ],
    [
      15864226,
      1667173295,
      3,
      98,
      0,
      36007,
      5276119443,
      0,
      1,
      9214148,
      36007,
      7266141
    ],
    [
      15864235,
      1667173403,
      4,
      118,
      0,
      45835,
      5273579114,
      0,
      1,
      19105708,
      45835,
      7266132
    ],
    [
      15864236,
      1667173415,
      1841,
      3,
      0,
      1100000,
      16433624589,
      0,
      1,
      210108,
      46625,
      7266131
    ],
    [
      15864240,
      1667173463,
      31,
      2,
      0,
      650000,
      26868917736,
      0,
      1,
      290687,
      46625,
      7266127
    ],
    [
      15864248,
      1667173559,
      441,
      12,
      0,
      800000,
      15185064685,
      0,
      1,
      1379509,
      46625,
      7266119
    ],
    [
      15864254,
      1667173631,
      48,
      87,
      0,
      55950,
      7278305137,
      0,
      1,
      9774937,
      46625,
      7266113
    ],
    [
      15864285,
      1667174003,
      127,
      22,
      0,
      1000000,
      7771476686,
      0,
      1,
      2124089,
      46325,
      7266082
    ],
    [
      15864281,
      1667173955,
      0,
      0,
      792821863623005,
      421783,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      15864281,
      1667173955,
      0,
      0,
      792821863623005,
      401177,
      0,
      0,
      0,
      0,
      98225,
      0
    ]
  ],
  "sourcecode": "/**\n\n\n\n/$$      /$$ /$$$$$$$$  /$$$$$$   /$$$$$$  /$$$$$$       /$$$$$$ /$$   /$$ /$$   /$$\n| $$$    /$$$| $$_____/ /$$__  $$ /$$__  $$|_  $$_/      |_  $$_/| $$$ | $$| $$  | $$\n| $$$$  /$$$$| $$      | $$  \\__/| $$  \\__/  | $$          | $$  | $$$$| $$| $$  | $$\n| $$ $$/$$ $$| $$$$$   |  $$$$$$ |  $$$$$$   | $$          | $$  | $$ $$ $$| $$  | $$\n| $$  $$$| $$| $$__/    \\____  $$ \\____  $$  | $$          | $$  | $$  $$$$| $$  | $$\n| $$\\  $ | $$| $$       /$$  \\ $$ /$$  \\ $$  | $$          | $$  | $$\\  $$$| $$  | $$\n| $$ \\/  | $$| $$$$$$$$|  $$$$$$/|  $$$$$$/ /$$$$$$       /$$$$$$| $$ \\  $$|  $$$$$$/\n|__/     |__/|________/ \\______/  \\______/ |______/      |______/|__/  \\__/ \\______/ \n                                                                                \n\n*/\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\nabstract contract Context {\n function _msgSender() internal view virtual returns (address) {\n     return msg.sender;\n }\n function _msgData() internal view virtual returns (bytes calldata) {\n     return msg.data;\n }\n}\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n function balanceOf(address account) external view returns (uint256);\n function transfer(address recipient, uint256 amount) external returns (bool);\n function allowance(address owner, address spender) external view returns (uint256);\n function approve(address spender, uint256 amount) external returns (bool);\n function transferFrom(address sender,address recipient,uint256 amount) external returns (bool);\n event Transfer(address indexed from, address indexed to, uint256 value);\n event Approval(address indexed owner, address indexed spender, uint256 value);\n}\nlibrary Address {\n function isContract(address account) internal view returns (bool) {\n     // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n     // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n     // for accounts without code, i.e. `keccak256('')`\n     bytes32 codehash;\n     bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n     // solhint-disable-next-line no-inline-assembly\n     assembly { codehash := extcodehash(account) }\n     return (codehash != accountHash && codehash != 0x0);\n }\n function sendValue(address payable recipient, uint256 amount) internal {\n     require(address(this).balance >= amount, \"Address: insufficient balance\");\n     // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n     (bool success, ) = recipient.call{ value: amount }(\"\");\n     require(success, \"Address: unable to send value, recipient may have reverted\");\n }\n function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n   return functionCall(target, data, \"Address: low-level call failed\");\n }\n function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n     return _functionCallWithValue(target, data, 0, errorMessage);\n }\n function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n     return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n }\n function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n     require(address(this).balance >= value, \"Address: insufficient balance for call\");\n     return _functionCallWithValue(target, data, value, errorMessage);\n }\n function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n     require(isContract(target), \"Address: call to non-contract\");\n     (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n     if (success) {\n         return returndata;\n     } else {\n      \n         if (returndata.length > 0) {\n             assembly {\n                 let returndata_size := mload(returndata)\n                 revert(add(32, returndata), returndata_size)\n             }\n         } else {\n             revert(errorMessage);\n         }\n     }\n }\n}\nabstract contract Ownable is Context {\n address private _owner;\n event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n /**\n  * @dev Initializes the contract setting the deployer as the initial owner.\n  */\n constructor() {\n     _setOwner(_msgSender());\n }\n /**\n  * @dev Returns the address of the current owner.\n  */\n function owner() public view virtual returns (address) {\n     return _owner;\n }\n /**\n  * @dev Throws if called by any account other than the owner.\n  */\n modifier onlyOwner() {\n     require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n     _;\n }\n /**\n  * @dev Leaves the contract without owner. It will not be possible to call\n  * `onlyOwner` functions anymore. Can only be called by the current owner.\n  *\n  * NOTE: Renouncing ownership will leave the contract without an owner,\n  * thereby removing any functionality that is only available to the owner.\n  */\n function renounceOwnership() public virtual onlyOwner {\n     _setOwner(address(0));\n }\n /**\n  * @dev Transfers ownership of the contract to a new account (`newOwner`).\n  * Can only be called by the current owner.\n  */\n function transferOwnership(address newOwner) public virtual onlyOwner {\n     require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n     _setOwner(newOwner);\n }\n function _setOwner(address newOwner) private {\n     address oldOwner = _owner;\n     _owner = newOwner;\n     emit OwnershipTransferred(oldOwner, newOwner);\n }\n}\n contract MESSIINU is Context,IERC20, Ownable{\n using Address for address;\n string private _name = \"MESSI INU\";\n string private _symbol = \"MESSI\";\n uint8 private _decimals = 18;\n uint256 totalFeeFortx = 0;\n   uint256 maxWalletTreshold = 3;\n uint256 maxTxTreshold = 1;\n uint256 private swapTreshold =1;\n uint256 private currentThreshold = 20; //Once the token value goes up this number can be decreased (To reduce price impact on asset)\n uint256 private _totalSupply = (10000000 * 10**4) * 10**_decimals; //\n uint256 public requiredTokensToSwap = _totalSupply * swapTreshold /1000;\n mapping (address => uint256) private _balances;\n mapping (address => bool) private _excludedFromFees;\n mapping (address => mapping (address => uint256)) private _allowances;\n mapping (address => bool) public automatedMarketMakerPairs;\n address _owner;\n address payable public marketingAddress = payable(0x6a4994F53ef66e4FDb0A087a8aA3DFaFBCE48182);\n uint256 maxWalletAmount = _totalSupply*maxWalletTreshold/300; // starting 3%\n uint256 maxTxAmount = _totalSupply*maxTxTreshold/100;\n mapping (address => bool) botWallets;\n bool botTradeEnabled = false;\n bool checkWalletSize = true;\n mapping (address => bool) private _liquidityHolders;\n mapping (address => bool) private presaleAddresses;\n //Taxes and more \n uint256 private buyliqFee = 2; //1\n uint256 private buyprevLiqFee = 2;\n uint256 private buymktFee = 4;//4\n uint256 private buyPrevmktFee = 4;\n uint256 MESSIDaycooldown = 0;\n bool private tradeEnabled = false;\n  uint256 private sellliqFee = 2;\n uint256 private sellprevLiqFee = 2;\n uint256 private sellmktFee = 5;\n uint256 private sellPrevmktFee = 5;\n  bool public inSwapAndLiquify;\n bool public swapAndLiquifyEnabled = true;\n address public immutable deadAddress = 0x000000000000000000000000000000000000dEaD;\n uint256 private mktTokens = 0;\n uint256 private liqTokens = 0;\n  event SwapAndLiquify(uint256 tokensSwapped,\n     uint256 ethReceived,\n     uint256 tokensIntoLiquidity\n );\n event tokensSwappedDuringTokenomics(uint256 amount);\n event SetAutomatedMarketMakerPair(address indexed pair, bool indexed value);\n  // 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\n IUniswapV2Router02 _router;\n address public uniswapV2Pair;\n //Balances tracker\n modifier lockTheSwap{\n     inSwapAndLiquify = true;\n     _;\n     inSwapAndLiquify = false;\n }\n  constructor(){\n     _balances[_msgSender()] = _totalSupply;\n     //0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D mainnet and all networks\n     IUniswapV2Router02 _uniRouter = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n  \n     uniswapV2Pair = IUniswapV2Factory(_uniRouter.factory())\n         .createPair(address(this), _uniRouter.WETH());\n  \n     _excludedFromFees[owner()] = true;      \n     _excludedFromFees[address(this)] = true;// exclude owner and contract instance from fees\n     _router = _uniRouter;\n     _liquidityHolders[address(_router)] = true;\n     _liquidityHolders[owner()] = true;\n     _liquidityHolders[address(this)] = true;\n     _setAutomatedMarketMakerPair(address(uniswapV2Pair), true);\n     emit Transfer(address(0),_msgSender(),_totalSupply);\n }\n receive() external payable{}\n //general token data and tracking of balances to be swapped.\n function getOwner()external view returns(address){\n         return owner();\n }\n function currentmktTokens() external view returns (uint256){\n         return mktTokens;\n  }\n  function currentLiqTokens() external view returns (uint256){\n         return liqTokens;\n  }\n  function totalSupply() external view override returns (uint256){\n         return _totalSupply;\n  }\n function balanceOf(address account) public view override returns (uint256){\n     return _balances[account];\n }\n function transfer(address recipient, uint256 amount) external override returns (bool){\n         _transfer(_msgSender(),recipient,amount);\n         return true;\n }\n function allowance(address owner, address spender) external view override returns (uint256){\n         return _allowances[owner][spender];\n }\n function approve(address spender, uint256 amount) external override returns (bool){\n         _approve(_msgSender(),spender,amount);\n         return true;\n }\n function decimals()external view returns(uint256){\n     return _decimals;\n }\n function name() external view returns (string memory) {\n     return _name;\n }\n function symbol() external view returns (string memory){\n     return _symbol;\n }\n     function updateMaxTxTreshold(uint256 newVal) public onlyOwner{\n     maxTxTreshold = newVal;\n     maxTxAmount = _totalSupply*maxTxTreshold/100;// 1%\n }\n  function updateMaxWalletTreshold(uint256 newVal) public onlyOwner{\n     maxWalletTreshold = newVal;\n     maxWalletAmount = _totalSupply*maxWalletTreshold/300;\n }\n  function transferFrom(\n     address sender,\n     address recipient,\n     uint256 amount\n ) public override returns (bool){\n     require(amount <= _allowances[sender][_msgSender()], \"ERC20: transfer amount exceeds allowance\");\n     _transfer(sender, recipient, amount);\n     _approve(sender, _msgSender(), _allowances[sender][_msgSender()] - amount);\n     return true;\n }\n //Tokenomics related functions\n  function MESSIDay() public onlyOwner{\n      require(block.timestamp > MESSIDaycooldown, \"You cant call MESSICoinDay more than once a day\");\n      buyPrevmktFee = buymktFee;\n      buyprevLiqFee = buyliqFee;\n \n      buyliqFee = 0;\n      buymktFee = 0;\n }\n function MESSICoinDayOver() public onlyOwner{\n      buyliqFee = buyprevLiqFee;\n      buymktFee = buyPrevmktFee;\n      MESSIDaycooldown = block.timestamp + 86400;\n }\n function addBotWallet (address payable detectedBot, bool isBot) public onlyOwner{\n     botWallets[detectedBot] = isBot;\n }\n function currentbuyliqFee() public view returns (uint256){\n         return buyliqFee;\n }\n function currentbuymktfee() public view returns (uint256){\n         return buymktFee;\n }\n   function currentsellLiqFee() public view returns (uint256){\n         return sellliqFee;\n }\n function currentsellmktfee() public view returns (uint256){\n         return sellmktFee;\n }\n function currentThresholdInt()public view returns (uint256){\n     return currentThreshold;\n }\n function isExcluded(address toCheck)public view returns (bool){\n         return _excludedFromFees[toCheck];\n }\n function _transfer(address from, address to, uint256 amount) internal{\n  \n     require(from != address(0), \"ERC20: transfer from the zero address\");\n     require(to != address(0), \"ERC20: transfer to the zero address\");\n     require(amount > 0,\"ERC20: transfered amount must be greater than zero\");\n     uint256 senderBalance = _balances[from];\n     require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n     if(tradeEnabled == false){\n         require(_liquidityHolders[to] || _liquidityHolders[from],\"Cant trade, trade is disabled\");\n     }\n     if(_liquidityHolders[to]==false && _liquidityHolders[from]==false){\n     require(amount <= maxTxAmount, \"Transfer amount exceeds the maxTxAmount.\");\n      if(from == uniswapV2Pair){\n             require(balanceOf(to)+amount <= maxWalletAmount);\n         }\n     }\n     uint256 inContractBalance = balanceOf(address(this));\n     if(inContractBalance >=requiredTokensToSwap &&\n         !inSwapAndLiquify &&\n         from != uniswapV2Pair &&\n         swapAndLiquifyEnabled){\n             if(inContractBalance >= requiredTokensToSwap ){\n                 inContractBalance = requiredTokensToSwap;\n                 swapForTokenomics(inContractBalance);\n             }\n         }\n         bool takeFees = true;\n      \n      \n         if(_excludedFromFees[from] || _excludedFromFees[to]) {\n             totalFeeFortx = 0;\n             takeFees = false;\n         \n         }\n         uint256 mktAmount = 0;\n         uint256 liqAmount = 0;  // Amount to be added to liquidity.\n         if(takeFees){\n          \n          \n             //bot fees\n             if(botWallets[from] == true||botWallets[to]==true){\n                 revert(\"No bots can trade\");\n             }\n             //Selling fees\n             if (automatedMarketMakerPairs[to] && to != address(_router) ){\n                     totalFeeFortx = 0;\n                     mktAmount = amount * sellmktFee/100;\n                     liqAmount = amount * sellliqFee/100;\n                     totalFeeFortx = mktAmount + liqAmount;\n             }\n             //Buy Fees\n             else if(automatedMarketMakerPairs[from] && from != address(_router)) {\n          \n                 totalFeeFortx = 0;\n                 mktAmount = amount * buymktFee/100;\n                 liqAmount = amount * buyliqFee/100;\n                 totalFeeFortx = mktAmount + liqAmount ;\n             }\n          \n         }\n         _balances[from] = senderBalance - amount;\n         _balances[to] += amount - mktAmount - liqAmount;\n       if(liqAmount != 0) {\n         _balances[address(this)] += totalFeeFortx;\n         //tLiqTotal += liqAmount;\n         liqTokens += liqAmount;\n         mktTokens += mktAmount;\n         emit Transfer(from, address(this), totalFeeFortx);\n      \n         }\n         emit Transfer(from, to,amount-totalFeeFortx);\n      \n  \n }\n function swapForTokenomics(uint256 balanceToswap) private lockTheSwap{\n     swapAndLiquify(liqTokens);\n     swapTokensForETHmkt(mktTokens);\n     emit tokensSwappedDuringTokenomics(balanceToswap);\n     mktTokens = 0;\n     liqTokens = 0;\n }\n  function addLimitExempt(address newAddress)external onlyOwner{\n     _liquidityHolders[newAddress] = true;\n }\n function swapTokensForETHmkt(uint256 amount)private {\n     address[] memory path = new address[](2);\n     path[0] = address(this);\n     path[1] = _router.WETH();\n     _approve(address(this), address(_router), amount);\n  \n     _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n         amount,\n         0, // Accept any amount of ETH.\n         path,\n         marketingAddress,\n         block.timestamp\n     );\n }\n function unstuckTokens (IERC20 tokenToClear, address payable destination, uint256 amount) public onlyOwner{\n     //uint256 contractBalance = tokenToClear.balanceOf(address(this));\n     tokenToClear.transfer(destination, amount);\n }\n function unstuckETH(address payable destination) public onlyOwner{\n     uint256 ethBalance = address(this).balance;\n     payable(destination).transfer(ethBalance);\n }\n function tradeStatus(bool status) public onlyOwner{\n     tradeEnabled = status;\n }\n function swapAndLiquify(uint256 liqTokensPassed) private {\n     uint256 half = liqTokensPassed / 2;\n     uint256 otherHalf = liqTokensPassed - half;\n     uint256 initialBalance = address(this).balance;\n     swapTokensForETH(half);\n     uint256 newBalance = address(this).balance - (initialBalance);\n     addLiquidity(otherHalf, newBalance);\n     emit SwapAndLiquify(half,newBalance,otherHalf);\n }\n function swapTokensForETH(uint256 tokenAmount) private{\n     address[] memory path = new address[](2);\n     path[0] = address(this);\n     path[1] = _router.WETH();\n     _approve(address(this), address(_router), tokenAmount);\n  \n     _router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n         tokenAmount,\n         0, // Accept any amount of ETH.\n         path,\n         address(this),\n         block.timestamp\n     );\n }\n  function addLiquidity(uint256 tokenAmount,uint256 ethAmount) private{\n     _approve(address(this), address(_router), tokenAmount);\n     _router.addLiquidityETH{value:ethAmount}(\n         address(this),\n         tokenAmount,\n         0,\n         0,\n         deadAddress,// tr\n         block.timestamp\n     );\n }\n function _approve(address owner,address spender, uint256 amount) internal{\n     require(owner != address(0), \"ERC20: approve from the zero address\");\n     require(spender != address(0), \"ERC20: approve to the zero address\");\n     _allowances[owner][spender] = amount;\n     emit Approval(owner, spender, amount);\n }\n //Fees related functions\n function addToExcluded(address toExclude) public onlyOwner{\n     _excludedFromFees[toExclude] = true;\n }\n function removeFromExcluded(address toRemove) public onlyOwner{\n     _excludedFromFees[toRemove] = false;\n }\n   function excludePresaleAddresses(address router, address presale) external onlyOwner {\n  \n     _liquidityHolders[address(router)] = true;\n     _liquidityHolders[presale] = true;\n     presaleAddresses[address(router)] = true;\n     presaleAddresses[presale] = true;\n \n }\n function endPresaleStatus() public onlyOwner{\n     buymktFee = 4;\n     buyliqFee = 2;\n     sellmktFee = 4;\n     sellliqFee = 2;\n     setSwapAndLiquify(true);\n }\n function updateThreshold(uint newThreshold) public onlyOwner{\n     currentThreshold = newThreshold;\n }\n function setSwapAndLiquify(bool _enabled) public onlyOwner{\n         swapAndLiquifyEnabled = _enabled;\n }\n //Marketing related\n function setMktAddress(address newAddress) external onlyOwner{\n     marketingAddress = payable(newAddress);\n }\n function transferAssetsETH(address payable to, uint256 amount) internal{\n         to.transfer(amount);\n }\n function setAutomatedMarketMakerPair(address pair, bool value) public onlyOwner {\n     require(pair != uniswapV2Pair, \"The pair cannot be removed from automatedMarketMakerPairs\");\n     _setAutomatedMarketMakerPair(pair, value);\n }\n function _setAutomatedMarketMakerPair(address pair, bool value) private {\n     automatedMarketMakerPairs[pair] = value;\n     emit SetAutomatedMarketMakerPair(pair, value);\n }\n function updatecurrentbuyliqFee(uint256 newAmount) public onlyOwner{\n         buyliqFee = newAmount;\n }\n function updatecurrentbuymktfee(uint256 newAmount) public onlyOwner{\n          buymktFee= newAmount;\n }\n   function updatecurrentsellLiqFee(uint256 newAmount) public onlyOwner{\n          sellliqFee= newAmount;\n }\n function updatecurrentsellmktfee(uint256 newAmount)public onlyOwner{\n          sellmktFee= newAmount;\n }\n function currentMaxWallet() public view returns(uint256){\n     return maxWalletAmount;\n }\n function currentMaxTx() public view returns(uint256){\n     return maxTxAmount;\n }\n function updateSwapTreshold(uint256 newVal) public onlyOwner{\n     swapTreshold = newVal;\n     requiredTokensToSwap = _totalSupply*swapTreshold/1000;\n  \n }\n function currentTradeStatus() public view returns (bool){\n     return tradeEnabled;\n }\n function currentSwapTreshold() public view returns(uint256){\n     return swapTreshold;\n }\n function currentTokensToSwap() public view returns(uint256){\n     return requiredTokensToSwap;\n }\n}\ninterface IUniswapV2Factory {\n event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n function feeTo() external view returns (address);\n function feeToSetter() external view returns (address);\n function getPair(address tokenA, address tokenB) external view returns (address pair);\n function allPairs(uint) external view returns (address pair);\n function allPairsLength() external view returns (uint);\n function createPair(address tokenA, address tokenB) external returns (address pair);\n function setFeeTo(address) external;\n function setFeeToSetter(address) external;\n}\ninterface IUniswapV2Pair {\n event Approval(address indexed owner, address indexed spender, uint value);\n event Transfer(address indexed from, address indexed to, uint value);\n function name() external pure returns (string memory);\n function symbol() external pure returns (string memory);\n function decimals() external pure returns (uint8);\n function totalSupply() external view returns (uint);\n function balanceOf(address owner) external view returns (uint);\n function allowance(address owner, address spender) external view returns (uint);\n function approve(address spender, uint value) external returns (bool);\n function transfer(address to, uint value) external returns (bool);\n function transferFrom(address from, address to, uint value) external returns (bool);\n function DOMAIN_SEPARATOR() external view returns (bytes32);\n function PERMIT_TYPEHASH() external pure returns (bytes32);\n function nonces(address owner) external view returns (uint);\n function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n event Mint(address indexed sender, uint amount0, uint amount1);\n event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n event Swap(\n     address indexed sender,\n     uint amount0In,\n     uint amount1In,\n     uint amount0Out,\n     uint amount1Out,\n     address indexed to\n );\n event Sync(uint112 reserve0, uint112 reserve1);\n function MINIMUM_LIQUIDITY() external pure returns (uint);\n function factory() external view returns (address);\n function token0() external view returns (address);\n function token1() external view returns (address);\n function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n function price0CumulativeLast() external view returns (uint);\n function price1CumulativeLast() external view returns (uint);\n function kLast() external view returns (uint);\n function mint(address to) external returns (uint liquidity);\n function burn(address to) external returns (uint amount0, uint amount1);\n function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n function skim(address to) external;\n function sync() external;\n function initialize(address, address) external;\n}\ninterface IUniswapV2Router01 {\n function factory() external pure returns (address);\n function WETH() external pure returns (address);\n function addLiquidity(\n     address tokenA,\n     address tokenB,\n     uint amountADesired,\n     uint amountBDesired,\n     uint amountAMin,\n     uint amountBMin,\n     address to,\n     uint deadline\n ) external returns (uint amountA, uint amountB, uint liquidity);\n function addLiquidityETH(\n     address token,\n     uint amountTokenDesired,\n     uint amountTokenMin,\n     uint amountETHMin,\n     address to,\n     uint deadline\n ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n function removeLiquidity(\n     address tokenA,\n     address tokenB,\n     uint liquidity,\n     uint amountAMin,\n     uint amountBMin,\n     address to,\n     uint deadline\n ) external returns (uint amountA, uint amountB);\n function removeLiquidityETH(\n     address token,\n     uint liquidity,\n     uint amountTokenMin,\n     uint amountETHMin,\n     address to,\n     uint deadline\n ) external returns (uint amountToken, uint amountETH);\n function removeLiquidityWithPermit(\n     address tokenA,\n     address tokenB,\n     uint liquidity,\n     uint amountAMin,\n     uint amountBMin,\n     address to,\n     uint deadline,\n     bool approveMax, uint8 v, bytes32 r, bytes32 s\n ) external returns (uint amountA, uint amountB);\n function removeLiquidityETHWithPermit(\n     address token,\n     uint liquidity,\n     uint amountTokenMin,\n     uint amountETHMin,\n     address to,\n     uint deadline,\n     bool approveMax, uint8 v, bytes32 r, bytes32 s\n ) external returns (uint amountToken, uint amountETH);\n function swapExactTokensForTokens(\n     uint amountIn,\n     uint amountOutMin,\n     address[] calldata path,\n     address to,\n     uint deadline\n ) external returns (uint[] memory amounts);\n function swapTokensForExactTokens(\n     uint amountOut,\n     uint amountInMax,\n     address[] calldata path,\n     address to,\n     uint deadline\n ) external returns (uint[] memory amounts);\n function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n     external\n     payable\n     returns (uint[] memory amounts);\n function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n     external\n     returns (uint[] memory amounts);\n function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n     external\n     returns (uint[] memory amounts);\n function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n     external\n     payable\n     returns (uint[] memory amounts);\n function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n function removeLiquidityETHSupportingFeeOnTransferTokens(\n     address token,\n     uint liquidity,\n     uint amountTokenMin,\n     uint amountETHMin,\n     address to,\n     uint deadline\n ) external returns (uint amountETH);\n function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n     address token,\n     uint liquidity,\n     uint amountTokenMin,\n     uint amountETHMin,\n     address to,\n     uint deadline,\n     bool approveMax, uint8 v, bytes32 r, bytes32 s\n ) external returns (uint amountETH);\n function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n     uint amountIn,\n     uint amountOutMin,\n     address[] calldata path,\n     address to,\n     uint deadline\n ) external;\n function swapExactETHForTokensSupportingFeeOnTransferTokens(\n     uint amountOutMin,\n     address[] calldata path,\n     address to,\n     uint deadline\n ) external payable;\n function swapExactTokensForETHSupportingFeeOnTransferTokens(\n     uint amountIn,\n     uint amountOutMin,\n     address[] calldata path,\n     address to,\n     uint deadline\n ) external;\n}"
}