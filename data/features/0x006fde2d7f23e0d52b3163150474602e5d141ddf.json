{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH2 DUP4 PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP PUSH2 DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH12 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH2 DUP5 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 DUP12 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 DUP5 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 PUSH2 DUP6 PUSH1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH12 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH2 JUMPI PUSH1 PUSH2 DUP5 PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP DUP1 SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP5 PUSH2 JUMP JUMPDEST POP POP POP SWAP2 POP POP DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH4 ADDRESS PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 DUP2 SWAP1 DUP1 PUSH1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 SWAP1 SUB SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 JUMPDEST PUSH1 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 JUMPI DUP2 PUSH20 AND PUSH1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 DUP1 SLOAD SWAP1 POP PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 DUP1 SLOAD DUP1 PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 PUSH2 EXP DUP2 SLOAD SWAP1 PUSH20 MUL NOT AND SWAP1 SSTORE SWAP1 SSTORE PUSH2 JUMP JUMPDEST DUP1 DUP1 PUSH2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 DUP9 PUSH2 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP1 PUSH1 PUSH2 DUP13 DUP7 DUP7 PUSH2 JUMP JUMPDEST SWAP3 POP SWAP3 POP SWAP3 POP DUP3 DUP3 DUP3 DUP9 DUP9 SWAP11 POP SWAP11 POP SWAP11 POP SWAP11 POP SWAP11 POP POP POP POP POP POP POP SWAP2 SWAP4 SWAP6 SWAP1 SWAP3 SWAP5 POP JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND DUP4 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 DUP4 DUP6 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 DUP2 DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH14 PUSH12 LT PUSH2 JUMPI PUSH2 PUSH1 PUSH2 PUSH1 DUP8 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST PUSH1 PUSH2 DUP3 DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 SWAP4 POP SWAP4 POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH2 DUP6 DUP9 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP7 DUP9 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP3 DUP5 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP DUP3 DUP2 DUP4 SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP SWAP4 POP SWAP4 POP SWAP4 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 DUP7 PUSH2 JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP PUSH2 DUP7 PUSH1 PUSH1 DUP12 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP6 PUSH1 PUSH1 DUP12 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP5 PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 DUP3 PUSH2 JUMP JUMPDEST DUP7 PUSH20 AND DUP9 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 DUP7 PUSH2 JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP PUSH2 DUP6 PUSH1 PUSH1 DUP12 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP5 PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 DUP3 PUSH2 JUMP JUMPDEST DUP7 PUSH20 AND DUP9 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND DUP4 PUSH20 AND EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND DUP3 PUSH20 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP4 PUSH20 AND EQ PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 TIMESTAMP PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP4 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 TIMESTAMP PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 DUP7 PUSH2 JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP PUSH2 DUP6 PUSH1 PUSH1 DUP12 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP5 PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 DUP3 PUSH2 JUMP JUMPDEST DUP7 PUSH20 AND DUP9 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 DUP7 PUSH2 JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP PUSH2 DUP7 PUSH1 PUSH1 DUP12 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP6 PUSH1 PUSH1 DUP12 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP5 PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 DUP3 PUSH2 JUMP JUMPDEST DUP7 PUSH20 AND DUP9 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 SLOAD SWAP1 POP PUSH1 PUSH12 SWAP1 POP PUSH1 JUMPDEST PUSH1 DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 JUMPI DUP3 PUSH1 PUSH1 PUSH1 DUP5 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT DUP1 PUSH2 JUMPI POP DUP2 PUSH1 PUSH1 PUSH1 DUP5 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH12 SWAP5 POP SWAP5 POP POP POP POP PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 DUP5 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP5 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP3 POP PUSH2 PUSH1 PUSH1 PUSH1 DUP5 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP DUP1 DUP1 PUSH2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST POP PUSH2 PUSH12 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST DUP3 LT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH12 SWAP4 POP SWAP4 POP POP POP PUSH2 JUMP JUMPDEST DUP2 DUP2 SWAP4 POP SWAP4 POP POP POP JUMPDEST SWAP1 SWAP2 JUMP JUMPDEST PUSH1 DUP1 DUP4 GT DUP3 SWAP1 PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 DUP4 DUP6 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 DUP3 DUP5 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP3 DUP5 DUP3 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 DUP3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP4 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP2 DUP6 PUSH1 DUP7 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP6 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 SUB DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH20 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DIV SWAP1 POP PUSH1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH32 DUP3 EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 NOT PUSH1 DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP UNKNOWN_0xfe GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE SHA3 PUSH21 PUSH20 PUSH19 PUSH16 GASLIMIT SHR UNKNOWN_0xf8 UNKNOWN_0x29 UNKNOWN_0xc9 PUSH8 SUB UNKNOWN_0xad UNKNOWN_0xba UNKNOWN_0x5f SWAP1 UNKNOWN_0xe5 UNKNOWN_0xee UNKNOWN_0x4b UNKNOWN_0xbf INVALID_0x7d",
  "opcode_entropy": 4.619966618487595,
  "opcode_count": 7338,
  "unique_opcodes": 87,
  "byte_entropy": 5.001067616235045,
  "byte_0x": 6.033182503770739e-05,
  "byte_60": 0.06099547511312217,
  "byte_80": 0.013996983408748115,
  "byte_40": 0.008687782805429865,
  "byte_52": 0.015867269984917044,
  "byte_34": 0.0014479638009049773,
  "byte_15": 0.004886877828054298,
  "byte_61": 0.0465761689291101,
  "byte_00": 0.09972850678733032,
  "byte_10": 0.0016289592760180996,
  "byte_57": 0.007360482654600302,
  "byte_fd": 0.0034992458521870286,
  "byte_5b": 0.03209653092006033,
  "byte_50": 0.031975867269984914,
  "byte_04": 0.007239819004524887,
  "byte_36": 0.002352941176470588,
  "byte_01": 0.025279034690799396,
  "byte_73": 0.015384615384615385,
  "byte_35": 0.0018099547511312218,
  "byte_e0": 0.0006033182503770739,
  "byte_1c": 0.0006033182503770739,
  "byte_63": 0.005490196078431373,
  "byte_71": 0.0010256410256410256,
  "byte_18": 0.0006033182503770739,
  "byte_a6": 0.0006033182503770739,
  "byte_11": 0.0014479638009049773,
  "byte_de": 0.00024132730015082957,
  "byte_a9": 0.00024132730015082957,
  "byte_05": 0.0014479638009049773,
  "byte_9c": 0.00036199095022624434,
  "byte_bb": 0.0005429864253393666,
  "byte_97": 0.00024132730015082957,
  "byte_dd": 0.0006636500754147813,
  "byte_62": 0.0008446455505279034,
  "byte_ed": 0.0004223227752639517,
  "byte_3e": 0.0006033182503770739,
  "byte_14": 0.0033785822021116137,
  "byte_64": 0.001870286576168929,
  "byte_f2": 0.0006636500754147813,
  "byte_cc": 0.00030165912518853697,
  "byte_0c": 0.0005429864253393666,
  "byte_94": 0.0016289592760180996,
  "byte_e3": 0.0006033182503770739,
  "byte_8b": 0.0008446455505279034,
  "byte_b0": 0.0004223227752639517,
  "byte_f8": 0.00018099547511312217,
  "byte_43": 0.0006636500754147813,
  "byte_54": 0.006334841628959276,
  "byte_f1": 0.0006636500754147813,
  "byte_56": 0.02503770739064857,
  "byte_03": 0.008144796380090498,
  "byte_fa": 0.00036199095022624434,
  "byte_cb": 0.00012066365007541478,
  "byte_a0": 0.001568627450980392,
  "byte_e9": 0.0009049773755656109,
  "byte_96": 0.00012066365007541478,
  "byte_2a": 0.00030165912518853697,
  "byte_db": 0.00024132730015082957,
  "byte_32": 0.0022322775263951735,
  "byte_8e": 0.00024132730015082957,
  "byte_5a": 0.000784313725490196,
  "byte_48": 0.000784313725490196,
  "byte_84": 0.004042232277526395,
  "byte_a3": 0.000784313725490196,
  "byte_f5": 0.0006636500754147813,
  "byte_c0": 0.00012066365007541478,
  "byte_8d": 0.00036199095022624434,
  "byte_a5": 0.00024132730015082957,
  "byte_70": 0.0006033182503770739,
  "byte_93": 0.0011463046757164404,
  "byte_ea": 0.0004223227752639517,
  "byte_49": 0.00030165912518853697,
  "byte_83": 0.00808446455505279,
  "byte_95": 0.0006636500754147813,
  "byte_d8": 0.00012066365007541478,
  "byte_9b": 0.00030165912518853697,
  "byte_41": 0.0004223227752639517,
  "byte_ac": 6.033182503770739e-05,
  "byte_a4": 0.00036199095022624434,
  "byte_c2": 0.00036199095022624434,
  "byte_d7": 0.00018099547511312217,
  "byte_ca": 0.00018099547511312217,
  "byte_23": 0.0009049773755656109,
  "byte_b8": 0.0005429864253393666,
  "byte_72": 0.002956259426847662,
  "byte_30": 0.000784313725490196,
  "byte_02": 0.00392156862745098,
  "byte_3a": 0.0024132730015082957,
  "byte_2d": 0.00036199095022624434,
  "byte_81": 0.020633484162895926,
  "byte_19": 0.0010859728506787331,
  "byte_6a": 0.0004223227752639517,
  "byte_31": 0.0006033182503770739,
  "byte_3c": 0.001568627450980392,
  "byte_e5": 0.00024132730015082957,
  "byte_67": 0.0004223227752639517,
  "byte_9a": 0.00036199095022624434,
  "byte_39": 0.003076923076923077,
  "byte_51": 0.006998491704374057,
  "byte_45": 0.0006033182503770739,
  "byte_e8": 0.0006636500754147813,
  "byte_82": 0.01019607843137255,
  "byte_b1": 6.033182503770739e-05,
  "byte_78": 0.0004223227752639517,
  "byte_06": 0.001568627450980392,
  "byte_09": 0.0013273001508295626,
  "byte_5e": 0.00024132730015082957,
  "byte_a7": 0.00048265460030165913,
  "byte_b3": 0.0005429864253393666,
  "byte_b2": 0.00018099547511312217,
  "byte_0b": 0.0009049773755656109,
  "byte_ff": 0.26871794871794874,
  "byte_dc": 0.00018099547511312217,
  "byte_f4": 0.00012066365007541478,
  "byte_e2": 0.00048265460030165913,
  "byte_13": 0.0005429864253393666,
  "byte_4a": 0.00012066365007541478,
  "byte_9d": 0.00018099547511312217,
  "byte_fe": 0.00024132730015082957,
  "byte_16": 0.0171342383107089,
  "byte_0d": 0.000784313725490196,
  "byte_92": 0.003800904977375566,
  "byte_90": 0.03565610859728507,
  "byte_91": 0.01665158371040724,
  "byte_c1": 0.0005429864253393666,
  "byte_37": 0.0020512820512820513,
  "byte_f3": 0.0013273001508295626,
  "byte_c7": 0.00018099547511312217,
  "byte_5c": 0.0007239819004524887,
  "byte_d9": 6.033182503770739e-05,
  "byte_fc": 0.0006636500754147813,
  "byte_f7": 0.00012066365007541478,
  "byte_98": 0.00012066365007541478,
  "byte_07": 0.0009653092006033183,
  "byte_12": 0.0009049773755656109,
  "byte_c4": 0.0012669683257918551,
  "byte_24": 0.0010256410256410256,
  "byte_ce": 6.033182503770739e-05,
  "byte_4f": 0.0006033182503770739,
  "byte_7f": 0.004766214177978884,
  "byte_08": 0.001990950226244344,
  "byte_a2": 0.00024132730015082957,
  "byte_29": 0.0007239819004524887,
  "byte_af": 0.00024132730015082957,
  "byte_9e": 0.00018099547511312217,
  "byte_d2": 6.033182503770739e-05,
  "byte_cd": 0.0004223227752639517,
  "byte_df": 0.00018099547511312217,
  "byte_0f": 0.0006033182503770739,
  "byte_33": 0.00277526395173454,
  "byte_0a": 0.0034992458521870286,
  "byte_3f": 0.0006033182503770739,
  "byte_bd": 6.033182503770739e-05,
  "byte_c3": 0.0017496229260935143,
  "byte_85": 0.0019306184012066365,
  "byte_ec": 0.00012066365007541478,
  "byte_b4": 0.00018099547511312217,
  "byte_e4": 0.0004223227752639517,
  "byte_0e": 0.0006033182503770739,
  "byte_21": 0.001568627450980392,
  "byte_44": 0.00048265460030165913,
  "byte_6f": 0.002654600301659125,
  "byte_c5": 0.00024132730015082957,
  "byte_7e": 0.00012066365007541478,
  "byte_79": 0.0016289592760180996,
  "byte_d1": 0.00012066365007541478,
  "byte_ae": 6.033182503770739e-05,
  "byte_2c": 0.00030165912518853697,
  "byte_e6": 0.00024132730015082957,
  "byte_e1": 0.00030165912518853697,
  "byte_1a": 0.00277526395173454,
  "byte_89": 0.00138763197586727,
  "byte_20": 0.021417797888386124,
  "byte_8c": 0.00018099547511312217,
  "byte_55": 0.0021719457013574662,
  "byte_1b": 0.0016892911010558068,
  "byte_3b": 0.0027149321266968325,
  "byte_1f": 0.0014479638009049773,
  "byte_bf": 0.00012066365007541478,
  "byte_38": 0.0016289592760180996,
  "byte_17": 0.0008446455505279034,
  "byte_6b": 0.0006033182503770739,
  "byte_2e": 0.000784313725490196,
  "byte_9f": 0.0005429864253393666,
  "byte_d0": 0.0006636500754147813,
  "byte_ef": 0.00036199095022624434,
  "byte_1d": 0.00030165912518853697,
  "byte_fb": 0.00012066365007541478,
  "byte_ab": 0.00012066365007541478,
  "byte_28": 0.0012066365007541479,
  "byte_f9": 0.00018099547511312217,
  "byte_22": 0.0013273001508295626,
  "byte_4d": 0.0006033182503770739,
  "byte_6e": 0.001870286576168929,
  "byte_65": 0.00392156862745098,
  "byte_f6": 0.00018099547511312217,
  "byte_53": 0.0004223227752639517,
  "byte_59": 0.00018099547511312217,
  "byte_da": 0.00024132730015082957,
  "byte_7a": 0.000784313725490196,
  "byte_5d": 0.00012066365007541478,
  "byte_47": 6.033182503770739e-05,
  "byte_42": 0.00048265460030165913,
  "byte_25": 0.0006636500754147813,
  "byte_8a": 0.0009653092006033183,
  "byte_86": 0.0016892911010558068,
  "byte_3d": 0.000784313725490196,
  "byte_a8": 0.00024132730015082957,
  "byte_ad": 0.0005429864253393666,
  "byte_46": 6.033182503770739e-05,
  "byte_d5": 0.00030165912518853697,
  "byte_7d": 0.0004223227752639517,
  "byte_4e": 0.0007239819004524887,
  "byte_75": 0.0009049773755656109,
  "byte_6c": 0.0016892911010558068,
  "byte_aa": 0.0004223227752639517,
  "byte_ba": 0.00048265460030165913,
  "byte_7b": 0.0007239819004524887,
  "byte_b6": 0.00030165912518853697,
  "byte_c6": 6.033182503770739e-05,
  "byte_88": 0.0005429864253393666,
  "byte_4c": 6.033182503770739e-05,
  "byte_c9": 0.00018099547511312217,
  "byte_2b": 0.0010256410256410256,
  "byte_1e": 0.00048265460030165913,
  "byte_66": 0.0009653092006033183,
  "byte_74": 0.002352941176470588,
  "byte_68": 0.0012669683257918551,
  "byte_69": 0.0013273001508295626,
  "byte_76": 0.0006033182503770739,
  "byte_77": 0.0007239819004524887,
  "byte_87": 0.00030165912518853697,
  "byte_eb": 0.00018099547511312217,
  "byte_c8": 0.00036199095022624434,
  "byte_b9": 0.00012066365007541478,
  "byte_27": 0.0004223227752639517,
  "byte_6d": 0.0007239819004524887,
  "byte_5f": 0.00012066365007541478,
  "byte_99": 0.00012066365007541478,
  "byte_be": 0.00012066365007541478,
  "byte_a1": 0.00024132730015082957,
  "byte_e7": 6.033182503770739e-05,
  "byte_26": 0.00030165912518853697,
  "byte_7c": 0.00018099547511312217,
  "byte_b5": 6.033182503770739e-05,
  "byte_2f": 0.00018099547511312217,
  "byte_d3": 6.033182503770739e-05,
  "byte_f0": 6.033182503770739e-05,
  "byte_58": 0.00012066365007541478,
  "byte_bc": 6.033182503770739e-05,
  "byte_4b": 0.00012066365007541478,
  "byte_ee": 6.033182503770739e-05,
  "num_nodes": 657,
  "num_edges": 129,
  "avg_degree": 0.3926940639269406,
  "density": 0.0002993094999443145,
  "connected_components": 548,
  "avg_clustering": 0.0020294266869609334,
  "timeline_sequence": [],
  "sourcecode": "// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.8.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // According to EIP-1052, 0x0 is the value returned for not-yet created accounts\n        // and 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470 is returned\n        // for accounts without code, i.e. `keccak256('')`\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != accountHash && codehash != 0x0);\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        return _functionCallWithValue(target, data, value, errorMessage);\n    }\n\n    function _functionCallWithValue(address target, bytes memory data, uint256 weiValue, string memory errorMessage) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: weiValue }(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\ncontract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\ninterface IUniswapV2Router01 {\n     function factory() external pure returns (address);\n     function WETH() external pure returns (address);\n }\n\n interface IUniswapV2Factory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n\ncontract MiniStars is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    using Address for address;\n\n    mapping (address => uint256) private _rOwned;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping(address => uint256) private cooldown;\n\n    mapping (address => bool) private _isExcluded;\n    address[] private _excluded;\n    address private uniswapV2Pair;\n    IUniswapV2Router01 private uniswapRouter01 = IUniswapV2Router01(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n   \n    uint256 private constant MAX = ~uint256(0);\n    uint256 private constant _tTotal = 1000 * 10**6 * 10**18;\n    uint256 private _rTotal = (MAX - (MAX % _tTotal));\n    uint256 private _tFeeTotal;\n    bool enableTrading = true;\n\n    string private _name = 'Mini-Stars   ';\n    string private _symbol = 'STARS';\n    uint8 private _decimals = 18;\n\n    constructor () public {\n        _rOwned[_msgSender()] = _rTotal;\n        emit Transfer(address(0), _msgSender(), _tTotal);\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_isExcluded[account]) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount) public override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function isExcluded(address account) public view returns (bool) {\n        return _isExcluded[account];\n    }\n\n    function totalFees() public view returns (uint256) {\n        return _tFeeTotal;\n    }\n\n    function reflect(uint256 tAmount) public {\n        address sender = _msgSender();\n        require(!_isExcluded[sender], \"Excluded addresses cannot call this function\");\n        (uint256 rAmount,,,,) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rTotal = _rTotal.sub(rAmount);\n        _tFeeTotal = _tFeeTotal.add(tAmount);\n    }\n\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        if (!deductTransferFee) {\n            (uint256 rAmount,,,,) = _getValues(tAmount);\n            return rAmount;\n        } else {\n            (,uint256 rTransferAmount,,,) = _getValues(tAmount);\n            return rTransferAmount;\n        }\n    }\n\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {\n        require(rAmount <= _rTotal, \"Amount must be less than total reflections\");\n        uint256 currentRate =  _getRate();\n        return rAmount.div(currentRate);\n    }\n    \n    function useCoolDown(bool enable) public onlyOwner {\n        enableTrading = enable;\n    }\n    \n    function updateUniPair() public onlyOwner {\n        address getPairAddress = IUniswapV2Factory(uniswapRouter01.factory()).getPair(address(this), uniswapRouter01.WETH());\n        require(getPairAddress != address(0));\n        uniswapV2Pair = getPairAddress;\n    }\n\n    function excludeAccount(address account) external onlyOwner() {\n        require(!_isExcluded[account], \"Account is already excluded\");\n        if(_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _isExcluded[account] = true;\n        _excluded.push(account);\n    }\n\n    function includeAccount(address account) external onlyOwner() {\n        require(_isExcluded[account], \"Account is already excluded\");\n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_excluded[i] == account) {\n                _excluded[i] = _excluded[_excluded.length - 1];\n                _tOwned[account] = 0;\n                _isExcluded[account] = false;\n                _excluded.pop();\n                break;\n            }\n        }\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) private {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        if (_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferFromExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferToExcluded(sender, recipient, amount);\n        } else if (!_isExcluded[sender] && !_isExcluded[recipient]) {\n            _transferStandard(sender, recipient, amount);\n        } else if (_isExcluded[sender] && _isExcluded[recipient]) {\n            _transferBothExcluded(sender, recipient, amount);\n        } else {\n            _transferStandard(sender, recipient, amount);\n        }\n    }\n\n    function _transferStandard(address sender, address recipient, uint256 tAmount) private {\n        if (sender != owner() && recipient != owner()) {\n            if(sender != uniswapV2Pair) {\n                require(enableTrading);\n                require(cooldown[recipient] < block.timestamp);\n                cooldown[recipient] = block.timestamp + (35 seconds);\n            }\n            if(sender == uniswapV2Pair) cooldown[sender] = block.timestamp + (35 seconds);\n        }\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);       \n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferToExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);           \n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferFromExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);   \n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _transferBothExcluded(address sender, address recipient, uint256 tAmount) private {\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee, uint256 tTransferAmount, uint256 tFee) = _getValues(tAmount);\n        _tOwned[sender] = _tOwned[sender].sub(tAmount);\n        _rOwned[sender] = _rOwned[sender].sub(rAmount);\n        _tOwned[recipient] = _tOwned[recipient].add(tTransferAmount);\n        _rOwned[recipient] = _rOwned[recipient].add(rTransferAmount);        \n        _reflectFee(rFee, tFee);\n        emit Transfer(sender, recipient, tTransferAmount);\n    }\n\n    function _reflectFee(uint256 rFee, uint256 tFee) private {\n       \n        _rTotal = _rTotal.sub(rFee);\n        _tFeeTotal = _tFeeTotal.add(tFee);\n    }\n\n    function _getValues(uint256 tAmount) private view returns (uint256, uint256, uint256, uint256, uint256) {\n        (uint256 tTransferAmount, uint256 tFee) = _getTValues(tAmount);\n        uint256 currentRate =  _getRate();\n        (uint256 rAmount, uint256 rTransferAmount, uint256 rFee) = _getRValues(tAmount, tFee, currentRate);\n        return (rAmount, rTransferAmount, rFee, tTransferAmount, tFee);\n    }\n\n    function _getTValues(uint256 tAmount) private view returns (uint256, uint256) {\n       \n        uint256 tFee;\n        if(_tTotal >= 30000000 * (10**6) * (10**18))\n        {\n        tFee = tAmount.div(100).mul(2);\n        }\n        else\n        {\n        tFee = 0;\n        }\n        uint256 tTransferAmount = tAmount.sub(tFee);\n        return (tTransferAmount, tFee);\n    }\n\n    function _getRValues(uint256 tAmount, uint256 tFee, uint256 currentRate) private pure returns (uint256, uint256, uint256) {\n        uint256 rAmount = tAmount.mul(currentRate);\n        uint256 rFee = tFee.mul(currentRate);\n        uint256 rTransferAmount = rAmount.sub(rFee);\n        return (rAmount, rTransferAmount, rFee);\n    }\n\n    function _getRate() private view returns(uint256) {\n        (uint256 rSupply, uint256 tSupply) = _getCurrentSupply();\n        return rSupply.div(tSupply);\n    }\n    uint256 public rSupply;\n    uint256 public tSupply; \n    function _getCurrentSupply() private view returns(uint256, uint256) {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;      \n        for (uint256 i = 0; i < _excluded.length; i++) {\n            if (_rOwned[_excluded[i]] > rSupply || _tOwned[_excluded[i]] > tSupply) return (_rTotal, _tTotal);\n            rSupply = rSupply.sub(_rOwned[_excluded[i]]);\n            tSupply = tSupply.sub(_tOwned[_excluded[i]]);\n        }\n        if (rSupply < _rTotal.div(_tTotal)) return (_rTotal, _tTotal);\n        return (rSupply, tSupply);\n    }\n}"
}