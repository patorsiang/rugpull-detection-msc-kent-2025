{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH2 DUP5 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 DUP12 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 PUSH1 AND PUSH1 EXP PUSH6 MUL DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 PUSH2 DUP6 PUSH1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP3 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 DUP7 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 DUP4 PUSH2 PUSH2 JUMP JUMPDEST DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND DUP4 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 DUP1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND DUP4 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 DUP4 DUP6 SUB SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH20 AND DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP UNKNOWN_0xfe GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE SHA3 PUSH21 PUSH5 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE SHA3 PUSH3 SHA3 PUSH2 PUSH22 ADDRESS GASPRICE SHA3 PUSH2 PUSH19 PUSH19 PUSH2 PUSH22 ADDRESS GASPRICE SHA3 PUSH21 PUSH20 PUSH15 SHA3 PUSH2 PUSH16 SHA3 PUSH7 SHA3 PUSH27 PUSH7 SHA3 PUSH27 PUSH19 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE SHA3 PUSH5 PUSH20 PUSH6 PUSH7 UNKNOWN_0xe6 DUP8 OR JUMP SWAP5 UNKNOWN_0x21 UNKNOWN_0xd4 UNKNOWN_0x23 UNKNOWN_0xe1 RETURNDATACOPY UNKNOWN_0xbf JUMP UNKNOWN_0x1e PUSH2 UNKNOWN_0xbb UNKNOWN_0xea SWAP13 DUP8 UNKNOWN_0xc4 STOP CALLDATASIZE MSIZE UNKNOWN_0x2d UNKNOWN_0xc3 EXP INVALID_0x74",
  "opcode_entropy": 4.722646029817768,
  "opcode_count": 2628,
  "unique_opcodes": 84,
  "byte_entropy": 5.2053604083741885,
  "byte_0x": 0.0001866019779809666,
  "byte_60": 0.06960253778690054,
  "byte_80": 0.03489456988244075,
  "byte_40": 0.014181750326553461,
  "byte_52": 0.021645829445792124,
  "byte_34": 0.0001866019779809666,
  "byte_15": 0.007464079119238664,
  "byte_61": 0.03788020153013622,
  "byte_00": 0.056913603284194814,
  "byte_10": 0.004851651427505131,
  "byte_57": 0.009143496921067364,
  "byte_fd": 0.0035454375816383653,
  "byte_5b": 0.02313864526963986,
  "byte_50": 0.03358835603657399,
  "byte_04": 0.006717671207314798,
  "byte_36": 0.0020526217577906325,
  "byte_f5": 0.0014928158238477329,
  "byte_35": 0.003732039559619332,
  "byte_e0": 0.0001866019779809666,
  "byte_1c": 0.0005598059339428998,
  "byte_63": 0.007837283075200598,
  "byte_39": 0.0022392237357715993,
  "byte_93": 0.000933009889904833,
  "byte_51": 0.012875536480686695,
  "byte_11": 0.0022392237357715993,
  "byte_97": 0.0001866019779809666,
  "byte_95": 0.0007464079119238664,
  "byte_d8": 0.0003732039559619332,
  "byte_9b": 0.0007464079119238664,
  "byte_41": 0.0003732039559619332,
  "byte_66": 0.0026124276917335325,
  "byte_14": 0.004851651427505131,
  "byte_1b": 0.0007464079119238664,
  "byte_a4": 0.0005598059339428998,
  "byte_c2": 0.0007464079119238664,
  "byte_d7": 0.0001866019779809666,
  "byte_9e": 0.0003732039559619332,
  "byte_a9": 0.0001866019779809666,
  "byte_05": 0.0016794178018286995,
  "byte_9c": 0.0005598059339428998,
  "byte_bb": 0.0003732039559619332,
  "byte_02": 0.005224855383467065,
  "byte_dd": 0.0013062138458667662,
  "byte_62": 0.0014928158238477329,
  "byte_ed": 0.0001866019779809666,
  "byte_3e": 0.0005598059339428998,
  "byte_56": 0.014928158238477329,
  "byte_e3": 0.0003732039559619332,
  "byte_42": 0.0007464079119238664,
  "byte_96": 0.0003732039559619332,
  "byte_6c": 0.0024258257137525657,
  "byte_68": 0.001866019779809666,
  "byte_03": 0.012875536480686695,
  "byte_47": 0.0001866019779809666,
  "byte_70": 0.0013062138458667662,
  "byte_a0": 0.0014928158238477329,
  "byte_82": 0.01044971076693413,
  "byte_31": 0.0003732039559619332,
  "byte_75": 0.0016794178018286995,
  "byte_79": 0.0014928158238477329,
  "byte_cc": 0.0001866019779809666,
  "byte_67": 0.0003732039559619332,
  "byte_90": 0.034707967904459784,
  "byte_cd": 0.0001866019779809666,
  "byte_23": 0.0014928158238477329,
  "byte_b8": 0.0005598059339428998,
  "byte_72": 0.006344467251352864,
  "byte_d3": 0.0003732039559619332,
  "byte_01": 0.037133793618212355,
  "byte_ff": 0.23082664676245568,
  "byte_2e": 0.0001866019779809666,
  "byte_0f": 0.0005598059339428998,
  "byte_26": 0.0005598059339428998,
  "byte_25": 0.0011196118678857996,
  "byte_83": 0.008397089009143497,
  "byte_2f": 0.0003732039559619332,
  "byte_f2": 0.0005598059339428998,
  "byte_e9": 0.0003732039559619332,
  "byte_dc": 0.0001866019779809666,
  "byte_3c": 0.0001866019779809666,
  "byte_e5": 0.0003732039559619332,
  "byte_06": 0.0026124276917335325,
  "byte_de": 0.0005598059339428998,
  "byte_fa": 0.0003732039559619332,
  "byte_09": 0.0022392237357715993,
  "byte_5e": 0.0001866019779809666,
  "byte_a7": 0.0005598059339428998,
  "byte_b3": 0.0007464079119238664,
  "byte_7d": 0.0016794178018286995,
  "byte_18": 0.0003732039559619332,
  "byte_16": 0.016980779996267962,
  "byte_0d": 0.0005598059339428998,
  "byte_e1": 0.0005598059339428998,
  "byte_20": 0.034707967904459784,
  "byte_81": 0.02799029669714499,
  "byte_91": 0.019966411643963428,
  "byte_84": 0.0035454375816383653,
  "byte_27": 0.0003732039559619332,
  "byte_1f": 0.0016794178018286995,
  "byte_6f": 0.005411457361448031,
  "byte_0a": 0.002799029669714499,
  "byte_19": 0.0007464079119238664,
  "byte_92": 0.006717671207314798,
  "byte_f3": 0.002799029669714499,
  "byte_c9": 0.0001866019779809666,
  "byte_73": 0.015487964172420227,
  "byte_6b": 0.0001866019779809666,
  "byte_a8": 0.0001866019779809666,
  "byte_8b": 0.0005598059339428998,
  "byte_07": 0.001866019779809666,
  "byte_ac": 0.0001866019779809666,
  "byte_86": 0.0007464079119238664,
  "byte_ca": 0.0001866019779809666,
  "byte_99": 0.0001866019779809666,
  "byte_f9": 0.0001866019779809666,
  "byte_b0": 0.0005598059339428998,
  "byte_5d": 0.0001866019779809666,
  "byte_08": 0.003172233625676432,
  "byte_b7": 0.0001866019779809666,
  "byte_77": 0.0013062138458667662,
  "byte_bf": 0.0003732039559619332,
  "byte_21": 0.0007464079119238664,
  "byte_48": 0.0003732039559619332,
  "byte_ea": 0.0005598059339428998,
  "byte_b4": 0.0001866019779809666,
  "byte_c3": 0.0020526217577906325,
  "byte_4e": 0.0001866019779809666,
  "byte_c8": 0.000933009889904833,
  "byte_7c": 0.0001866019779809666,
  "byte_ae": 0.0003732039559619332,
  "byte_54": 0.003732039559619332,
  "byte_76": 0.0013062138458667662,
  "byte_4b": 0.0005598059339428998,
  "byte_59": 0.0005598059339428998,
  "byte_94": 0.0005598059339428998,
  "byte_8d": 0.0005598059339428998,
  "byte_0b": 0.003732039559619332,
  "byte_bd": 0.0022392237357715993,
  "byte_c5": 0.000933009889904833,
  "byte_b5": 0.0001866019779809666,
  "byte_bc": 0.0003732039559619332,
  "byte_c1": 0.0001866019779809666,
  "byte_71": 0.0003732039559619332,
  "byte_85": 0.0013062138458667662,
  "byte_28": 0.0007464079119238664,
  "byte_13": 0.0016794178018286995,
  "byte_12": 0.0011196118678857996,
  "byte_65": 0.009143496921067364,
  "byte_5a": 0.0005598059339428998,
  "byte_7a": 0.0013062138458667662,
  "byte_ce": 0.0001866019779809666,
  "byte_89": 0.0001866019779809666,
  "byte_74": 0.004291845493562232,
  "byte_6e": 0.0035454375816383653,
  "byte_3d": 0.0003732039559619332,
  "byte_fe": 0.0003732039559619332,
  "byte_24": 0.0007464079119238664,
  "byte_ef": 0.0007464079119238664,
  "byte_0c": 0.0005598059339428998,
  "byte_b9": 0.0005598059339428998,
  "byte_8e": 0.0001866019779809666,
  "byte_d0": 0.0001866019779809666,
  "byte_8a": 0.0001866019779809666,
  "byte_9d": 0.0001866019779809666,
  "byte_7f": 0.0022392237357715993,
  "byte_53": 0.0003732039559619332,
  "byte_4d": 0.0007464079119238664,
  "byte_3a": 0.0024258257137525657,
  "byte_64": 0.003732039559619332,
  "byte_69": 0.0011196118678857996,
  "byte_33": 0.0003732039559619332,
  "byte_d1": 0.0005598059339428998,
  "byte_22": 0.000933009889904833,
  "byte_55": 0.000933009889904833,
  "byte_8c": 0.0001866019779809666,
  "byte_eb": 0.0001866019779809666,
  "byte_ec": 0.0001866019779809666,
  "byte_4f": 0.0001866019779809666,
  "byte_1e": 0.0007464079119238664,
  "byte_c0": 0.0001866019779809666,
  "byte_f7": 0.0001866019779809666,
  "byte_b2": 0.0001866019779809666,
  "byte_29": 0.0001866019779809666,
  "byte_c7": 0.0001866019779809666,
  "byte_a3": 0.0005598059339428998,
  "byte_0e": 0.0007464079119238664,
  "byte_87": 0.0005598059339428998,
  "byte_ad": 0.0003732039559619332,
  "byte_e2": 0.0003732039559619332,
  "byte_fc": 0.0005598059339428998,
  "byte_37": 0.0003732039559619332,
  "byte_aa": 0.0003732039559619332,
  "byte_2b": 0.0003732039559619332,
  "byte_f1": 0.0003732039559619332,
  "byte_c4": 0.0005598059339428998,
  "byte_a1": 0.0003732039559619332,
  "byte_2a": 0.0003732039559619332,
  "byte_d4": 0.0003732039559619332,
  "byte_cf": 0.0001866019779809666,
  "byte_45": 0.001866019779809666,
  "byte_43": 0.0020526217577906325,
  "byte_32": 0.001866019779809666,
  "byte_30": 0.001866019779809666,
  "byte_6d": 0.0013062138458667662,
  "byte_78": 0.0007464079119238664,
  "byte_a2": 0.0001866019779809666,
  "byte_58": 0.0001866019779809666,
  "byte_e6": 0.0001866019779809666,
  "byte_17": 0.0001866019779809666,
  "byte_2d": 0.0001866019779809666,
  "byte_3b": 0.0001866019779809666,
  "num_nodes": 186,
  "num_edges": 106,
  "avg_degree": 1.1397849462365592,
  "density": 0.0030804998546934033,
  "connected_components": 95,
  "avg_clustering": 0.0,
  "timeline_sequence": [],
  "sourcecode": "pragma solidity >=0.7.0 <0.9.0;\n\nabstract contract Context {\n    function _msgSender() internal virtual view returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal virtual view returns (bytes memory) {\n        this; \n        return msg.data;\n    }\n}\n\n\npragma solidity >=0.7.0 <0.9.0;\n\ninterface IERC20 {\n   \n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n   \n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n   \n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n\npragma solidity >=0.7.0 <0.9.0;\n\nlibrary SafeMath {\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n\npragma solidity >=0.7.0 <0.9.0;\n\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor(string memory name_, string memory symbol_) public {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = 18;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public override view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public override view returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        virtual\n        override\n        view\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        virtual\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            _msgSender(),\n            _allowances[sender][_msgSender()].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(\n            amount,\n            \"ERC20: burn amount exceeds balance\"\n        );\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _setupDecimals(uint8 decimals_) internal {\n        _decimals = decimals_;\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\n\npragma solidity >=0.7.0 <0.9.0;\n\nabstract contract ERC20Burnable is Context, ERC20 {\n    using SafeMath for uint256;\n\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 decreasedAllowance = allowance(account, _msgSender()).sub(\n            amount,\n            \"ERC20: burn amount exceeds allowance\"\n        );\n\n        _approve(account, _msgSender(), decreasedAllowance);\n        _burn(account, amount);\n    }\n}\n\npragma solidity ^0.7.0;\n\ncontract BabyDoge is ERC20, ERC20Burnable {\n    uint8 public constant DECIMALS = 18;\n    uint256 public constant INITIAL_SUPPLY = 100000000000000 * (10**uint256(DECIMALS));\n\n    constructor() public ERC20(\"BabyDoge\", \"BDOGE\") {\n        _mint(msg.sender, INITIAL_SUPPLY);\n    }\n}"
}