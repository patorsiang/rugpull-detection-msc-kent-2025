{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 PUSH5 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 DUP3 ADD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP2 DUP5 PUSH1 DUP4 MUL DUP5 ADD GT PUSH5 DUP4 GT OR ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH12 AND PUSH12 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 PUSH5 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 DUP3 ADD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP2 DUP5 PUSH1 DUP4 MUL DUP5 ADD GT PUSH5 DUP4 GT OR ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH12 AND PUSH12 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH4 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP4 PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH12 AND PUSH12 AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH32 DUP4 EQ ISZERO PUSH2 JUMPI PUSH32 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH2 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH12 MUL NOT AND SWAP1 DUP4 PUSH12 AND MUL OR SWAP1 SSTORE POP DUP4 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 PUSH12 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP1 POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 DUP2 JUMP JUMPDEST PUSH1 DUP1 CALLER SWAP1 POP PUSH1 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND SWAP1 POP PUSH1 PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP DUP7 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH32 PUSH12 AND DUP3 PUSH12 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH12 MUL NOT AND SWAP1 DUP4 PUSH12 AND MUL OR SWAP1 SSTORE POP DUP4 PUSH20 AND DUP9 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 PUSH12 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMPDEST PUSH2 DUP8 DUP8 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SWAP4 POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH2 CALLER DUP3 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND PUSH12 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP5 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP7 DUP7 DUP7 PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 DUP2 DUP5 ADD MSTORE PUSH1 NOT PUSH1 DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP5 POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 NUMBER DUP3 LT PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND SWAP1 POP PUSH1 DUP2 PUSH4 AND EQ ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP POP PUSH2 JUMP JUMPDEST DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH1 DUP5 SUB PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND PUSH4 AND GT PUSH2 JUMPI PUSH1 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH1 DUP5 SUB PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND SWAP1 POP PUSH2 DUP6 DUP3 PUSH2 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 JUMP JUMPDEST DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP1 PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND PUSH4 AND GT ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 POP PUSH1 PUSH1 DUP4 SUB SWAP1 POP JUMPDEST DUP2 PUSH4 AND DUP2 PUSH4 AND GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 DUP4 SUB PUSH4 AND DUP2 PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP3 SUB SWAP1 POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE SWAP1 DUP2 PUSH1 DUP3 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD PUSH1 DUP3 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND PUSH12 AND PUSH12 AND DUP2 MSTORE POP POP SWAP1 POP DUP7 DUP2 PUSH1 ADD MLOAD PUSH4 AND EQ ISZERO PUSH2 JUMPI DUP1 PUSH1 ADD MLOAD SWAP6 POP POP POP POP POP POP PUSH2 JUMP JUMPDEST DUP7 DUP2 PUSH1 ADD MLOAD PUSH4 AND LT ISZERO PUSH2 JUMPI DUP2 SWAP4 POP PUSH2 JUMP JUMPDEST PUSH1 DUP3 SUB SWAP3 POP JUMPDEST POP POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP5 PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND SWAP1 POP PUSH2 DUP8 DUP3 PUSH2 JUMP JUMPDEST SWAP5 POP POP POP POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP5 PUSH20 AND DUP7 PUSH20 AND PUSH32 DUP7 DUP7 DUP7 PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP5 DUP3 DUP2 DUP2 MSTORE PUSH1 ADD SWAP3 POP DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 DUP2 DUP5 ADD MSTORE PUSH1 NOT PUSH1 DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP SWAP5 POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 DUP7 DUP7 DUP7 PUSH2 JUMP JUMPDEST POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 CALLER DUP6 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND SWAP1 POP PUSH1 DUP1 DUP3 PUSH4 AND GT PUSH2 JUMPI PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH1 DUP5 SUB PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND JUMPDEST SWAP1 POP PUSH2 DUP5 DUP3 PUSH2 JUMP JUMPDEST SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP1 POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 PUSH2 PUSH2 JUMP JUMPDEST ADDRESS PUSH1 MLOAD PUSH1 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP5 POP POP POP POP POP PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 SWAP1 POP PUSH1 PUSH1 MLOAD DUP1 DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP1 POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 DUP9 DUP9 DUP9 PUSH1 MLOAD PUSH1 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 ADD DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP5 POP POP POP POP POP PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 SWAP1 POP PUSH1 DUP3 DUP3 PUSH1 MLOAD PUSH1 ADD DUP1 DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 SWAP1 POP PUSH1 PUSH1 DUP3 DUP9 DUP9 DUP9 PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 MSTORE PUSH1 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 ADD DUP5 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP5 POP POP POP POP POP PUSH1 PUSH1 MLOAD PUSH1 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP PUSH1 PUSH1 MLOAD SUB MLOAD SWAP1 POP PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 ADD SWAP2 SWAP1 POP SSTORE DUP10 EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP8 TIMESTAMP GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP2 DUP12 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND PUSH12 AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP1 POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP2 POP POP DUP1 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND SWAP1 DUP1 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND SWAP1 POP DUP3 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH13 DUP4 LT DUP3 SWAP1 PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP4 PUSH12 AND DUP4 PUSH12 AND GT ISZERO DUP3 SWAP1 PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 DUP5 SUB SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND DUP3 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH12 MUL NOT AND SWAP1 DUP4 PUSH12 AND MUL OR SWAP1 SSTORE POP PUSH2 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND DUP3 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH12 MUL NOT AND SWAP1 DUP4 PUSH12 AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 AND DUP4 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 PUSH12 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP4 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH12 AND PUSH1 DUP1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND PUSH12 AND ADD PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH12 MUL NOT AND SWAP1 DUP4 PUSH12 AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 AND PUSH1 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP PUSH1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND SWAP1 POP DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP3 PUSH20 AND DUP3 PUSH20 AND DUP6 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH2 DUP3 DUP5 DUP4 PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO PUSH2 JUMPI DUP2 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP6 DUP6 PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH12 AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 CHAINID SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP4 DUP6 ADD SWAP1 POP DUP5 PUSH12 AND DUP2 PUSH12 AND LT ISZERO DUP4 SWAP1 PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 PUSH12 AND GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH20 AND DUP4 PUSH20 AND EQ PUSH2 JUMPI PUSH1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND SWAP1 POP PUSH1 DUP1 DUP3 PUSH4 AND GT PUSH2 JUMPI PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH1 DUP5 SUB PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP3 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP7 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP POP POP JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND EQ PUSH2 JUMPI PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND SWAP1 POP PUSH1 DUP1 DUP3 PUSH4 AND GT PUSH2 JUMPI PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH1 DUP5 SUB PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH12 AND JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP3 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP6 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP POP POP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH2 NUMBER PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP5 PUSH4 AND GT DUP1 ISZERO PUSH2 JUMPI POP DUP1 PUSH4 AND PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH1 DUP8 SUB PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND PUSH4 AND EQ JUMPDEST ISZERO PUSH2 JUMPI DUP2 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH1 DUP8 SUB PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH12 MUL NOT AND SWAP1 DUP4 PUSH12 AND MUL OR SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 DUP3 PUSH4 AND DUP2 MSTORE PUSH1 ADD DUP4 PUSH12 AND DUP2 MSTORE POP PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH4 MUL NOT AND SWAP1 DUP4 PUSH4 AND MUL OR SWAP1 SSTORE POP PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH12 MUL NOT AND SWAP1 DUP4 PUSH12 AND MUL OR SWAP1 SSTORE POP SWAP1 POP POP PUSH1 DUP5 ADD PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH4 MUL NOT AND SWAP1 DUP4 PUSH4 AND MUL OR SWAP1 SSTORE POP JUMPDEST DUP5 PUSH20 AND PUSH32 DUP5 DUP5 PUSH1 MLOAD DUP1 DUP4 PUSH12 AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH12 AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH5 DUP4 LT DUP3 SWAP1 PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 PUSH4 AND DUP2 MSTORE PUSH1 ADD PUSH1 PUSH12 AND DUP2 MSTORE POP SWAP1 JUMP UNKNOWN_0xfe MSTORE8 POP MSTORE8 GASPRICE GASPRICE UNKNOWN_0x5f PUSH14 SHA3 PUSH2 PUSH22 PUSH2 TIMESTAMP PUSH26 PUSH6 MSTORE8 PUSH10 SHA3 PUSH20 PUSH6 PUSH20 SHA3 PUSH21 PUSH14 SHA3 PUSH2 PUSH22 PUSH15 PUSH15 PUSH6 PUSH13 PUSH16 PUSH5 PUSH3 MSTORE8 POP MSTORE8 GASPRICE GASPRICE PUSH5 PUSH21 PUSH10 PUSH16 UNKNOWN_0x2c PUSH22 SHA3 PUSH23 PUSH6 PUSH10 PUSH14 CALLDATASIZE SHA3 PUSH3 MSTORE8 POP MSTORE8 GASPRICE GASPRICE PUSH21 PUSH5 PUSH3 MSTORE8 POP MSTORE8 GASPRICE GASPRICE UNKNOWN_0x5f PUSH21 SHA3 PUSH21 SHA3 PUSH2 PUSH19 PUSH15 PUSH21 PUSH21 PUSH20 PUSH5 SHA3 PUSH5 PUSH21 ORIGIN CALLDATALOAD CALLDATASIZE SHA3 PUSH6 MSTORE8 POP MSTORE8 GASPRICE GASPRICE PUSH8 PUSH16 PUSH6 MSTORE8 POP MSTORE8 GASPRICE GASPRICE UNKNOWN_0x5f PUSH21 PUSH6 PUSH15 GASPRICE PUSH21 SHA3 PUSH2 PUSH22 PUSH16 UNKNOWN_0xe3 PUSH26 INVALID_0x6c",
  "opcode_entropy": 4.798549105478329,
  "opcode_count": 6552,
  "unique_opcodes": 90,
  "byte_entropy": 4.843865852240215,
  "byte_0x": 6.718172657037286e-05,
  "byte_60": 0.06523345649983205,
  "byte_80": 0.027141417534430636,
  "byte_40": 0.012294255962378233,
  "byte_52": 0.018878065166274775,
  "byte_34": 0.0003359086328518643,
  "byte_15": 0.00611353711790393,
  "byte_61": 0.02566341954988243,
  "byte_00": 0.06603963721867652,
  "byte_10": 0.0025529056096741686,
  "byte_57": 0.007793080282163252,
  "byte_fd": 0.003359086328518643,
  "byte_5b": 0.015653342290896877,
  "byte_50": 0.0321800470272086,
  "byte_04": 0.007188444743029896,
  "byte_36": 0.002485723883103796,
  "byte_01": 0.03332213637890494,
  "byte_c4": 0.0007389989922741015,
  "byte_35": 0.003224722875377897,
  "byte_e0": 0.0002687269062814914,
  "byte_1c": 0.0003359086328518643,
  "byte_63": 0.007725898555592879,
  "byte_73": 0.016056432650319113,
  "byte_76": 0.0008733624454148472,
  "byte_18": 0.0006046355391333558,
  "byte_28": 0.00047027208599261,
  "byte_11": 0.002284178703392677,
  "byte_f9": 0.0001343634531407457,
  "byte_c3": 0.001477997984548203,
  "byte_cd": 0.00040309035942223714,
  "byte_a5": 0.00040309035942223714,
  "byte_20": 0.02989586832381592,
  "byte_97": 0.0001343634531407457,
  "byte_e7": 0.0001343634531407457,
  "byte_a3": 0.001007725898555593,
  "byte_24": 0.0011420893516963385,
  "byte_dc": 0.0002687269062814914,
  "byte_71": 0.0003359086328518643,
  "byte_14": 0.003426268055089016,
  "byte_0b": 0.0007389989922741015,
  "byte_f1": 0.0002687269062814914,
  "byte_12": 0.0002687269062814914,
  "byte_7e": 0.00047027208599261,
  "byte_d8": 0.00020154517971111857,
  "byte_5e": 0.0003359086328518643,
  "byte_f8": 0.00020154517971111857,
  "byte_51": 0.011420893516963387,
  "byte_a4": 0.0003359086328518643,
  "byte_f5": 0.00040309035942223714,
  "byte_fc": 0.0006718172657037286,
  "byte_b5": 0.0001343634531407457,
  "byte_aa": 0.00020154517971111857,
  "byte_0c": 0.00047027208599261,
  "byte_3f": 0.0001343634531407457,
  "byte_56": 0.008330534094726234,
  "byte_0a": 0.004904266039637219,
  "byte_05": 0.0013436345314074571,
  "byte_dd": 0.0007389989922741015,
  "byte_62": 0.0007389989922741015,
  "byte_ed": 6.718172657037286e-05,
  "byte_3e": 0.00040309035942223714,
  "byte_e2": 0.0006046355391333558,
  "byte_a1": 0.00020154517971111857,
  "byte_44": 0.00040309035942223714,
  "byte_39": 0.002284178703392677,
  "byte_f6": 0.0002687269062814914,
  "byte_95": 0.0005374538125629828,
  "byte_9b": 0.0003359086328518643,
  "byte_41": 0.0002687269062814914,
  "byte_d3": 0.0002687269062814914,
  "byte_07": 0.0011420893516963385,
  "byte_9e": 0.0002687269062814914,
  "byte_e4": 0.0005374538125629828,
  "byte_2e": 0.0007389989922741015,
  "byte_08": 0.00188108834397044,
  "byte_a9": 0.0002687269062814914,
  "byte_9c": 0.0003359086328518643,
  "byte_bb": 0.0001343634531407457,
  "byte_09": 0.001007725898555593,
  "byte_2b": 0.0003359086328518643,
  "byte_b4": 0.0001343634531407457,
  "byte_ea": 0.0002687269062814914,
  "byte_91": 0.012361437688948606,
  "byte_06": 0.00094054417198522,
  "byte_3c": 0.0005374538125629828,
  "byte_78": 0.0008061807188444743,
  "byte_2d": 0.0006046355391333558,
  "byte_6f": 0.003426268055089016,
  "byte_e1": 0.0006046355391333558,
  "byte_f7": 0.0003359086328518643,
  "byte_ce": 0.0001343634531407457,
  "byte_be": 0.0001343634531407457,
  "byte_75": 0.0012764528048370843,
  "byte_e8": 0.0003359086328518643,
  "byte_66": 0.001477997984548203,
  "byte_5c": 0.0002687269062814914,
  "byte_19": 0.001948270070540813,
  "byte_cf": 0.0001343634531407457,
  "byte_ff": 0.31306684581793753,
  "byte_45": 0.0002687269062814914,
  "byte_70": 0.00094054417198522,
  "byte_4b": 0.0002687269062814914,
  "byte_6c": 0.0016123614376889485,
  "byte_02": 0.003224722875377897,
  "byte_a0": 0.0012764528048370843,
  "byte_82": 0.00920389654014108,
  "byte_31": 0.0007389989922741015,
  "byte_03": 0.010211622438696675,
  "byte_c1": 0.00020154517971111857,
  "byte_0f": 0.0005374538125629828,
  "byte_26": 0.0006718172657037286,
  "byte_58": 0.0002687269062814914,
  "byte_7c": 0.0001343634531407457,
  "byte_de": 0.0002687269062814914,
  "byte_1e": 0.00047027208599261,
  "byte_74": 0.004366812227074236,
  "byte_16": 0.021766879408800805,
  "byte_0d": 0.0005374538125629828,
  "byte_a2": 0.00047027208599261,
  "byte_6b": 0.00423244877393349,
  "byte_1a": 0.0008733624454148472,
  "byte_23": 0.0006046355391333558,
  "byte_b8": 0.0003359086328518643,
  "byte_72": 0.004030903594222372,
  "byte_38": 0.0006046355391333558,
  "byte_e5": 0.0003359086328518643,
  "byte_67": 0.0010749076251259657,
  "byte_c9": 0.0001343634531407457,
  "byte_54": 0.004366812227074236,
  "byte_4c": 0.00020154517971111857,
  "byte_a7": 0.0003359086328518643,
  "byte_b3": 0.00020154517971111857,
  "byte_96": 6.718172657037286e-05,
  "byte_d1": 0.0002687269062814914,
  "byte_83": 0.006650990930466913,
  "byte_81": 0.025932146456163922,
  "byte_90": 0.032784682566341955,
  "byte_84": 0.003896540141081626,
  "byte_1f": 0.0008733624454148472,
  "byte_92": 0.004769902586496473,
  "byte_f3": 0.0017467248908296944,
  "byte_bc": 0.0002687269062814914,
  "byte_ac": 6.718172657037286e-05,
  "byte_0e": 0.0005374538125629828,
  "byte_22": 0.00040309035942223714,
  "byte_89": 0.00040309035942223714,
  "byte_4e": 0.00020154517971111857,
  "byte_c6": 0.0005374538125629828,
  "byte_47": 0.00020154517971111857,
  "byte_b6": 0.0002687269062814914,
  "byte_8a": 0.00020154517971111857,
  "byte_13": 0.00047027208599261,
  "byte_3a": 0.003694994961370507,
  "byte_fa": 0.00047027208599261,
  "byte_86": 0.0017467248908296944,
  "byte_64": 0.0028216325159556603,
  "byte_99": 0.0001343634531407457,
  "byte_ab": 0.0001343634531407457,
  "byte_17": 0.0011420893516963385,
  "byte_93": 0.0007389989922741015,
  "byte_43": 0.00094054417198522,
  "byte_b7": 0.00040309035942223714,
  "byte_8b": 0.00020154517971111857,
  "byte_d5": 0.0003359086328518643,
  "byte_1b": 0.0007389989922741015,
  "byte_42": 0.0006046355391333558,
  "byte_df": 6.718172657037286e-05,
  "byte_3b": 0.0002687269062814914,
  "byte_77": 0.0006046355391333558,
  "byte_eb": 0.0002687269062814914,
  "byte_c0": 0.0003359086328518643,
  "byte_1d": 0.00047027208599261,
  "byte_94": 0.0006718172657037286,
  "byte_fe": 0.0003359086328518643,
  "byte_21": 0.0003359086328518643,
  "byte_48": 0.00020154517971111857,
  "byte_a8": 6.718172657037286e-05,
  "byte_b0": 0.0005374538125629828,
  "byte_55": 0.0010749076251259657,
  "byte_7f": 0.0026872690628149142,
  "byte_53": 0.0026872690628149142,
  "byte_69": 0.002754450789385287,
  "byte_6e": 0.004501175680214981,
  "byte_65": 0.006919717836748405,
  "byte_68": 0.0006718172657037286,
  "byte_5a": 0.0008061807188444743,
  "byte_37": 0.0008733624454148472,
  "byte_33": 0.00094054417198522,
  "byte_8c": 0.0002687269062814914,
  "byte_ec": 0.0001343634531407457,
  "byte_7d": 0.00040309035942223714,
  "byte_4f": 0.00040309035942223714,
  "byte_b2": 0.00020154517971111857,
  "byte_29": 0.00047027208599261,
  "byte_c8": 0.0003359086328518643,
  "byte_c7": 0.00020154517971111857,
  "byte_b9": 0.0001343634531407457,
  "byte_25": 0.0012092710782667115,
  "byte_87": 0.00094054417198522,
  "byte_85": 0.001948270070540813,
  "byte_88": 0.0006046355391333558,
  "byte_5f": 0.0007389989922741015,
  "byte_79": 0.0017467248908296944,
  "byte_6d": 0.0016123614376889485,
  "byte_d7": 6.718172657037286e-05,
  "byte_af": 0.00020154517971111857,
  "byte_cc": 0.00020154517971111857,
  "byte_d4": 0.0001343634531407457,
  "byte_7b": 0.00020154517971111857,
  "byte_f4": 0.00020154517971111857,
  "byte_4d": 0.00040309035942223714,
  "byte_7a": 0.00040309035942223714,
  "byte_9a": 0.00047027208599261,
  "byte_c2": 0.0002687269062814914,
  "byte_4a": 6.718172657037286e-05,
  "byte_ba": 0.0002687269062814914,
  "byte_32": 0.0012764528048370843,
  "byte_d9": 0.00020154517971111857,
  "byte_98": 0.0001343634531407457,
  "byte_d0": 0.00020154517971111857,
  "byte_ae": 0.0003359086328518643,
  "byte_3d": 0.0006046355391333558,
  "byte_59": 0.00020154517971111857,
  "byte_6a": 6.718172657037286e-05,
  "byte_2f": 0.0007389989922741015,
  "byte_49": 0.00020154517971111857,
  "byte_30": 0.0002687269062814914,
  "byte_bf": 0.0001343634531407457,
  "byte_db": 0.00020154517971111857,
  "byte_8e": 0.0001343634531407457,
  "byte_2c": 0.0003359086328518643,
  "byte_27": 0.0002687269062814914,
  "byte_f2": 0.0002687269062814914,
  "byte_ad": 0.00020154517971111857,
  "byte_8d": 0.0001343634531407457,
  "byte_ef": 0.00020154517971111857,
  "byte_2a": 0.0001343634531407457,
  "byte_e6": 6.718172657037286e-05,
  "byte_5d": 6.718172657037286e-05,
  "byte_f0": 0.0001343634531407457,
  "byte_e3": 0.0001343634531407457,
  "byte_cb": 6.718172657037286e-05,
  "byte_8f": 6.718172657037286e-05,
  "byte_46": 0.0001343634531407457,
  "byte_b1": 6.718172657037286e-05,
  "byte_9f": 6.718172657037286e-05,
  "byte_d2": 6.718172657037286e-05,
  "byte_da": 6.718172657037286e-05,
  "num_nodes": 343,
  "num_edges": 262,
  "avg_degree": 1.5276967930029155,
  "density": 0.002233474843571514,
  "connected_components": 109,
  "avg_clustering": 0.02478134110787172,
  "timeline_sequence": [],
  "sourcecode": "pragma solidity ^0.5.16;\n\ninterface IStakeModifier {\n    function getVotingPower(address user, uint256 votes) external view returns(uint256);\n}\n\ncontract SPS {\n    /// @notice EIP-20 token name for this token\n    string public constant name = \"Splintershards\";\n\n    /// @notice EIP-20 token symbol for this token\n    string public constant symbol = \"SPS\";\n\n    /// @notice EIP-20 token decimals for this token\n    uint8 public constant decimals = 18;\n\n    /// @notice Initial number of tokens in circulation\n    uint256 public totalSupply = 0;\n\n    /// @notice Allowance amounts on behalf of others\n    mapping (address => mapping (address => uint96)) internal allowances;\n\n    /// @notice Official record of token balances for each account\n    mapping (address => uint96) internal balances;\n\n    /// @notice A record of each accounts delegate\n    mapping (address => address) public delegates;\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint32 fromBlock;\n        uint96 votes;\n    }\n\n    /// @notice A record of votes checkpoints for each account, by index\n    mapping (address => mapping (uint32 => Checkpoint)) public checkpoints;\n\n    /// @notice The number of checkpoints for each account\n    mapping (address => uint32) public numCheckpoints;\n\n    /// @notice The EIP-712 typehash for the contract's domain\n    bytes32 public constant DOMAIN_TYPEHASH = keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\");\n\n    /// @notice The EIP-712 typehash for the delegation struct used by the contract\n    bytes32 public constant DELEGATION_TYPEHASH = keccak256(\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\");\n\n    /// @notice A record of states for signing / validating signatures\n    mapping (address => uint256) public nonces;\n\n    /// @notice An event thats emitted when an account changes its delegate\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n\n    /// @notice An event thats emitted when a delegate account's vote balance changes\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /// @notice The standard EIP-20 transfer event\n    event Transfer(address indexed from, address indexed to, uint256 amount);\n\n    /// @notice The standard EIP-20 approval event\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\n\n    /// @notice Admin can update admin, minter and stake modifier\n    address public admin;\n\n    /// @notice Minter can call mint() function\n    address public minter;\n\n    /// @notice Interface for receiving voting power data\n    IStakeModifier public stakeModifier;\n\n    /**\n     * @dev Modifier to make a function callable only by the admin.\n     */\n    modifier adminOnly() {\n        require(msg.sender == admin, \"Only admin\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only by the minter.\n     */\n    modifier minterOnly() {\n        require(msg.sender == minter, \"Only minter\");\n        _;\n    }\n\n    /// @notice Emitted when changing admin\n    event SetAdmin(address indexed newAdmin, address indexed oldAdmin);\n\n    /// @notice Emitted when changing minter\n    event SetMinter(address indexed newMinter, address indexed oldAdmin);\n\n    /// @notice Event used for cross-chain transfers\n    event BridgeTransfer(address indexed sender, address indexed receiver, uint256 amount, string externalAddress);\n\n    /// @notice Emitted when stake modifier address is updated\n    event SetStakeModifier(address indexed newStakeModifier, address indexed oldStakeModifier);\n\n    /**\n     * @notice Construct a new Comp token\n     * @param adminAddress The address with admin rights\n     * @param minterAddress The address with minter rights\n     * @param stakeModifierAddress The address of stakeModifier contract\n     */\n     constructor(address adminAddress, address minterAddress, address stakeModifierAddress) public {\n         admin = adminAddress;\n         minter = minterAddress;\n\n         stakeModifier = IStakeModifier(stakeModifierAddress);\n     }\n\n    /**\n     * @notice Get the number of tokens `spender` is approved to spend on behalf of `account`\n     * @param account The address of the account holding the funds\n     * @param spender The address of the account spending the funds\n     * @return The number of tokens approved\n     */\n    function allowance(address account, address spender) external view returns (uint256) {\n        return allowances[account][spender];\n    }\n\n    /**\n     * @notice Approve `spender` to transfer up to `amount` from `src`\n     * @dev This will overwrite the approval amount for `spender`\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\n     * @param spender The address of the account which may transfer tokens\n     * @param rawAmount The number of tokens that are approved (2^256-1 means infinite)\n     * @return Whether or not the approval succeeded\n     */\n    function approve(address spender, uint256 rawAmount) external returns (bool) {\n        uint96 amount;\n        if (rawAmount == uint256(-1)) {\n            amount = uint96(-1);\n        } else {\n            amount = safe96(rawAmount, \"SPS::approve: amount exceeds 96 bits\");\n        }\n\n        allowances[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    /**\n     * @notice Get the number of tokens held by the `account`\n     * @param account The address of the account to get the balance of\n     * @return The number of tokens held\n     */\n    function balanceOf(address account) external view returns (uint256) {\n        return balances[account];\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transfer(address dst, uint256 rawAmount) public returns (bool) {\n        uint96 amount = safe96(rawAmount, \"SPS::transfer: amount exceeds 96 bits\");\n        _transferTokens(msg.sender, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Transfer `amount` tokens from `src` to `dst`\n     * @param src The address of the source account\n     * @param dst The address of the destination account\n     * @param rawAmount The number of tokens to transfer\n     * @return Whether or not the transfer succeeded\n     */\n    function transferFrom(address src, address dst, uint256 rawAmount) public returns (bool) {\n        address spender = msg.sender;\n        uint96 spenderAllowance = allowances[src][spender];\n        uint96 amount = safe96(rawAmount, \"SPS::approve: amount exceeds 96 bits\");\n\n        if (spender != src && spenderAllowance != uint96(-1)) {\n            uint96 newAllowance = sub96(spenderAllowance, amount, \"SPS::transferFrom: transfer amount exceeds spender allowance\");\n            allowances[src][spender] = newAllowance;\n\n            emit Approval(src, spender, newAllowance);\n        }\n\n        _transferTokens(src, dst, amount);\n        return true;\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) public {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n     * @notice Delegates votes from signatory to `delegatee`\n     * @param delegatee The address to delegate votes to\n     * @param nonce The contract state required to match the signature\n     * @param expiry The time at which to expire the signature\n     * @param v The recovery byte of the signature\n     * @param r Half of the ECDSA signature pair\n     * @param s Half of the ECDSA signature pair\n     */\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) public {\n        bytes32 domainSeparator = keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(name)), getChainId(), address(this)));\n        bytes32 structHash = keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry));\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n        address signatory = ecrecover(digest, v, r, s);\n        require(signatory != address(0), \"SPS::delegateBySig: invalid signature\");\n        require(nonce == nonces[signatory]++, \"SPS::delegateBySig: invalid nonce\");\n        require(now <= expiry, \"SPS::delegateBySig: signature expired\");\n        return _delegate(signatory, delegatee);\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view returns (uint96) {\n        uint32 nCheckpoints = numCheckpoints[account];\n        uint96 votes = nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n        return getModifiedVotes(account, votes);\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint256 blockNumber) public view returns (uint96) {\n        require(blockNumber < block.number, \"SPS::getPriorVotes: not yet determined\");\n\n        uint32 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            uint96 votes = checkpoints[account][nCheckpoints - 1].votes;\n            return getModifiedVotes(account, votes);\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint32 lower = 0;\n        uint32 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint32 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        uint96 votes = checkpoints[account][lower].votes;\n        return getModifiedVotes(account, votes);\n    }\n\n    /**\n     * @notice Determines the number of votes an account has after modifications by the StakeModifier\n     * @param account The address of the account to check\n     * @param votes The initial, unmodified number of votes, read from storage\n     */\n    function getModifiedVotes(address account, uint96 votes) internal view returns (uint96) {\n        if (address(stakeModifier) == address(0)){\n            return votes;\n        }\n        return safe96(stakeModifier.getVotingPower(account, votes), \"SPS::getModifiedVotes: amount exceeds 96 bits\");\n    }\n\n    function _delegate(address delegator, address delegatee) internal {\n        address currentDelegate = delegates[delegator];\n        uint96 delegatorBalance = balances[delegator];\n        delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _transferTokens(address src, address dst, uint96 amount) internal {\n        require(src != address(0), \"SPS::_transferTokens: cannot transfer from the zero address\");\n        require(dst != address(0), \"SPS::_transferTokens: cannot transfer to the zero address\");\n\n        balances[src] = sub96(balances[src], amount, \"SPS::_transferTokens: transfer amount exceeds balance\");\n        balances[dst] = add96(balances[dst], amount, \"SPS::_transferTokens: transfer amount overflows\");\n        emit Transfer(src, dst, amount);\n\n        _moveDelegates(delegates[src], delegates[dst], amount);\n    }\n\n    function _moveDelegates(address srcRep, address dstRep, uint96 amount) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                uint32 srcRepNum = numCheckpoints[srcRep];\n                uint96 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint96 srcRepNew = sub96(srcRepOld, amount, \"SPS::_moveVotes: vote amount underflows\");\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                uint32 dstRepNum = numCheckpoints[dstRep];\n                uint96 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint96 dstRepNew = add96(dstRepOld, amount, \"SPS::_moveVotes: vote amount overflows\");\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(address delegatee, uint32 nCheckpoints, uint96 oldVotes, uint96 newVotes) internal {\n      uint32 blockNumber = safe32(block.number, \"SPS::_writeCheckpoint: block number exceeds 32 bits\");\n\n      if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber) {\n          checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n      } else {\n          checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\n          numCheckpoints[delegatee] = nCheckpoints + 1;\n      }\n\n      emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    function safe32(uint256 n, string memory errorMessage) internal pure returns (uint32) {\n        require(n < 2**32, errorMessage);\n        return uint32(n);\n    }\n\n    function safe96(uint256 n, string memory errorMessage) internal pure returns (uint96) {\n        require(n < 2**96, errorMessage);\n        return uint96(n);\n    }\n\n    function add96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n        uint96 c = a + b;\n        require(c >= a, errorMessage);\n        return c;\n    }\n\n    function sub96(uint96 a, uint96 b, string memory errorMessage) internal pure returns (uint96) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    function getChainId() internal pure returns (uint256) {\n        uint256 chainId;\n        assembly { chainId := chainid() }\n        return chainId;\n    }\n\n    /**\n     * @notice Set new admin address\n     * @param newAdmin New admin address\n     */\n    function setAdmin(address newAdmin) external adminOnly {\n        emit SetAdmin(newAdmin, admin);\n        admin = newAdmin;\n    }\n\n    /**\n     * @notice Set new minter address\n     * @param newMinter New minter address\n     */\n    function setMinter(address newMinter) external adminOnly {\n        emit SetMinter(newMinter, minter);\n        minter = newMinter;\n    }\n\n    /**\n     * @notice Set new stake modifier address\n     * @param newStakeModifier New stake modifer contract address\n     */\n    function setStakeModifier(address newStakeModifier) external adminOnly {\n        emit SetStakeModifier(newStakeModifier, address(stakeModifier));\n        stakeModifier = IStakeModifier(newStakeModifier);\n    }\n\n    /**\n     * @notice Mint additional tokens\n     * @param toAccount Account receiving new tokens\n     * @param amount Amount of minted tokens\n     */\n    function mint(address toAccount, uint256 amount) external minterOnly {\n        _mint(toAccount, amount);\n    }\n\n    /**\n     * @notice Mint additional tokens\n     * @param account The address of the account to check\n     * @param amount The amount of tokens minted\n     */\n    function _mint(address account, uint256 amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        totalSupply += uint96(amount);\n        balances[account] = safe96(uint256(balances[account]) + amount, \"SPS::_mint: amount exceeds 96 bits\");\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @notice Transfer tokens to cross-chain bridge\n     * @param bridgeAddress The address of the bridge account\n     * @param rawAmount The amount of tokens transfered\n     * @param externalAddress The address on another chain\n     */\n     function bridgeTransfer(address bridgeAddress, uint256 rawAmount, string calldata externalAddress) external returns(bool) {\n         emit BridgeTransfer(msg.sender, bridgeAddress, rawAmount, externalAddress);\n         transfer(bridgeAddress, rawAmount);\n     }\n\n     /**\n      * @notice Transfer tokens from address to cross-chain bridge\n      * @param sourceAddress The address of the source account\n      * @param bridgeAddress The address of the bridge account\n      * @param rawAmount The amount of tokens transfered\n      * @param externalAddress The address on another chain\n      */\n     function bridgeTransferFrom(address sourceAddress, address bridgeAddress, uint256 rawAmount, string calldata externalAddress) external returns(bool) {\n         emit BridgeTransfer(sourceAddress, bridgeAddress, rawAmount, externalAddress);\n         transferFrom(sourceAddress, bridgeAddress, rawAmount);\n     }\n}"
}