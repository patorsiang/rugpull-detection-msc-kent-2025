{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 DUP2 ISZERO DUP1 PUSH2 JUMPI POP CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP7 SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP8 AND DUP2 MSTORE PUSH1 DUP3 MSTORE DUP3 DUP2 SHA3 CALLER DUP3 MSTORE SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP8 AND SWAP4 SWAP2 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH10 DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP STOP LOG1 PUSH6 SHA3 SWAP14 ADDMOD RETURNDATACOPY UNKNOWN_0xb8 MSIZE UNKNOWN_0xc2 SWAP15 PUSH7 UNKNOWN_0xcc POP UNOFFICIAL_DUP UNKNOWN_0x4e UNKNOWN_0xad UNKNOWN_0x4f AND MULMOD SWAP14 UNKNOWN_0xe9 CHAINID DUP13 DUP7 UNKNOWN_0xe DUP3 BYTE UNKNOWN_0xbb STOP UNKNOWN_0x29",
  "opcode_entropy": 4.849403082395394,
  "opcode_count": 1110,
  "unique_opcodes": 71,
  "byte_entropy": 5.782289270181647,
  "byte_0x": 0.000591016548463357,
  "byte_60": 0.10460992907801418,
  "byte_80": 0.03959810874704492,
  "byte_40": 0.013002364066193853,
  "byte_52": 0.03723404255319149,
  "byte_04": 0.0076832151300236405,
  "byte_36": 0.000591016548463357,
  "byte_10": 0.0017730496453900709,
  "byte_61": 0.03900709219858156,
  "byte_00": 0.07210401891252956,
  "byte_a3": 0.002364066193853428,
  "byte_57": 0.018912529550827423,
  "byte_63": 0.011229314420803783,
  "byte_ff": 0.014775413711583925,
  "byte_7c": 0.001182033096926714,
  "byte_01": 0.04314420803782506,
  "byte_35": 0.0065011820330969266,
  "byte_16": 0.022458628841607566,
  "byte_06": 0.005319148936170213,
  "byte_fd": 0.010638297872340425,
  "byte_de": 0.000591016548463357,
  "byte_03": 0.022458628841607566,
  "byte_81": 0.03309692671394799,
  "byte_14": 0.0065011820330969266,
  "byte_a8": 0.000591016548463357,
  "byte_09": 0.001182033096926714,
  "byte_5e": 0.000591016548463357,
  "byte_a7": 0.0017730496453900709,
  "byte_b3": 0.002364066193853428,
  "byte_32": 0.000591016548463357,
  "byte_18": 0.000591016548463357,
  "byte_0d": 0.000591016548463357,
  "byte_dd": 0.0035460992907801418,
  "byte_6a": 0.000591016548463357,
  "byte_23": 0.0017730496453900709,
  "byte_b8": 0.001182033096926714,
  "byte_72": 0.002955082742316785,
  "byte_91": 0.015957446808510637,
  "byte_2f": 0.000591016548463357,
  "byte_f2": 0.0017730496453900709,
  "byte_e9": 0.001182033096926714,
  "byte_dc": 0.002364066193853428,
  "byte_bb": 0.002364066193853428,
  "byte_31": 0.0017730496453900709,
  "byte_3c": 0.000591016548463357,
  "byte_e5": 0.0017730496453900709,
  "byte_67": 0.000591016548463357,
  "byte_d0": 0.000591016548463357,
  "byte_70": 0.000591016548463357,
  "byte_a0": 0.01182033096926714,
  "byte_82": 0.017139479905437353,
  "byte_fb": 0.000591016548463357,
  "byte_95": 0.0017730496453900709,
  "byte_d8": 0.000591016548463357,
  "byte_9b": 0.0017730496453900709,
  "byte_41": 0.000591016548463357,
  "byte_02": 0.02186761229314421,
  "byte_1c": 0.001182033096926714,
  "byte_a9": 0.000591016548463357,
  "byte_05": 0.004137115839243499,
  "byte_9c": 0.000591016548463357,
  "byte_62": 0.001182033096926714,
  "byte_ed": 0.000591016548463357,
  "byte_3e": 0.0017730496453900709,
  "byte_55": 0.004728132387706856,
  "byte_5b": 0.034278959810874705,
  "byte_34": 0.00591016548463357,
  "byte_15": 0.015957446808510637,
  "byte_b4": 0.000591016548463357,
  "byte_50": 0.022458628841607566,
  "byte_bd": 0.001182033096926714,
  "byte_56": 0.01950354609929078,
  "byte_51": 0.01182033096926714,
  "byte_20": 0.028959810874704492,
  "byte_83": 0.015366430260047281,
  "byte_92": 0.01182033096926714,
  "byte_90": 0.04905437352245863,
  "byte_85": 0.0035460992907801418,
  "byte_f7": 0.001182033096926714,
  "byte_df": 0.000591016548463357,
  "byte_1f": 0.000591016548463357,
  "byte_24": 0.002955082742316785,
  "byte_0a": 0.012411347517730497,
  "byte_19": 0.000591016548463357,
  "byte_f3": 0.002955082742316785,
  "byte_76": 0.000591016548463357,
  "byte_7f": 0.005319148936170213,
  "byte_9d": 0.0017730496453900709,
  "byte_44": 0.000591016548463357,
  "byte_c7": 0.0017730496453900709,
  "byte_d4": 0.000591016548463357,
  "byte_e2": 0.0017730496453900709,
  "byte_07": 0.000591016548463357,
  "byte_e7": 0.000591016548463357,
  "byte_28": 0.0017730496453900709,
  "byte_3d": 0.000591016548463357,
  "byte_39": 0.000591016548463357,
  "byte_11": 0.0035460992907801418,
  "byte_43": 0.001182033096926714,
  "byte_6f": 0.000591016548463357,
  "byte_6e": 0.000591016548463357,
  "byte_74": 0.001182033096926714,
  "byte_65": 0.0017730496453900709,
  "byte_69": 0.004137115839243499,
  "byte_66": 0.001182033096926714,
  "byte_64": 0.000591016548463357,
  "byte_e3": 0.000591016548463357,
  "byte_33": 0.00591016548463357,
  "byte_87": 0.0017730496453900709,
  "byte_84": 0.004728132387706856,
  "byte_54": 0.0070921985815602835,
  "byte_ee": 0.000591016548463357,
  "byte_88": 0.000591016548463357,
  "byte_86": 0.0035460992907801418,
  "byte_93": 0.005319148936170213,
  "byte_8c": 0.0017730496453900709,
  "byte_e1": 0.000591016548463357,
  "byte_eb": 0.000591016548463357,
  "byte_ec": 0.000591016548463357,
  "byte_7d": 0.001182033096926714,
  "byte_d1": 0.000591016548463357,
  "byte_4f": 0.0017730496453900709,
  "byte_71": 0.000591016548463357,
  "byte_42": 0.000591016548463357,
  "byte_1e": 0.001182033096926714,
  "byte_c0": 0.000591016548463357,
  "byte_b2": 0.000591016548463357,
  "byte_29": 0.001182033096926714,
  "byte_c8": 0.0017730496453900709,
  "byte_c3": 0.000591016548463357,
  "byte_b9": 0.000591016548463357,
  "byte_25": 0.001182033096926714,
  "byte_97": 0.000591016548463357,
  "byte_f0": 0.000591016548463357,
  "byte_47": 0.0017730496453900709,
  "byte_59": 0.0017730496453900709,
  "byte_94": 0.0035460992907801418,
  "byte_ad": 0.0017730496453900709,
  "byte_1b": 0.001182033096926714,
  "byte_c2": 0.0017730496453900709,
  "byte_b0": 0.001182033096926714,
  "byte_68": 0.0017730496453900709,
  "byte_fc": 0.001182033096926714,
  "byte_37": 0.001182033096926714,
  "byte_8d": 0.001182033096926714,
  "byte_aa": 0.001182033096926714,
  "byte_2b": 0.001182033096926714,
  "byte_f1": 0.001182033096926714,
  "byte_c4": 0.001182033096926714,
  "byte_a1": 0.0017730496453900709,
  "byte_f5": 0.002364066193853428,
  "byte_5a": 0.001182033096926714,
  "byte_4d": 0.001182033096926714,
  "byte_ef": 0.001182033096926714,
  "byte_8a": 0.000591016548463357,
  "byte_d7": 0.000591016548463357,
  "byte_b7": 0.000591016548463357,
  "byte_7b": 0.000591016548463357,
  "byte_12": 0.000591016548463357,
  "byte_6c": 0.000591016548463357,
  "byte_be": 0.000591016548463357,
  "byte_53": 0.000591016548463357,
  "byte_fe": 0.001182033096926714,
  "byte_7a": 0.001182033096926714,
  "byte_30": 0.000591016548463357,
  "byte_58": 0.000591016548463357,
  "byte_08": 0.000591016548463357,
  "byte_9e": 0.000591016548463357,
  "byte_b1": 0.001182033096926714,
  "byte_38": 0.000591016548463357,
  "byte_cc": 0.000591016548463357,
  "byte_4e": 0.000591016548463357,
  "byte_46": 0.000591016548463357,
  "byte_0e": 0.000591016548463357,
  "byte_1a": 0.000591016548463357,
  "num_nodes": 87,
  "num_edges": 67,
  "avg_degree": 1.5402298850574712,
  "density": 0.008954824913124833,
  "connected_components": 22,
  "avg_clustering": 0.017241379310344827,
  "timeline_sequence": [],
  "sourcecode": "pragma solidity ^0.4.25;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function toUINT112(uint256 a) internal pure returns(uint112) {\n    assert(uint112(a) == a);\n    return uint112(a);\n  }\n\n  function toUINT120(uint256 a) internal pure returns(uint120) {\n    assert(uint120(a) == a);\n    return uint120(a);\n  }\n\n  function toUINT128(uint256 a) internal pure returns(uint128) {\n    assert(uint128(a) == a);\n    return uint128(a);\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract ContractVerified is StandardToken {\n\n  string public constant name = \"Contract Verified\";\n  string public constant symbol = \"COVi\";\n  uint8 public constant decimals = 18;\n\n\n  uint256 public constant INITIAL_SUPPLY = 81231 * (10 ** uint256(decimals));\n  \n  constructor() public {\n    totalSupply = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n    emit Transfer(msg.sender, msg.sender, INITIAL_SUPPLY);\n  }\n\n}"
}