{
  "opcode_sequence": "PUSH1 PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH3 CODESIZE DUP2 SWAP1 SUB SWAP1 DUP2 SWAP1 DUP4 CODECOPY DUP2 ADD PUSH1 DUP2 SWAP1 MSTORE PUSH3 SWAP2 PUSH3 JUMP JUMPDEST DUP4 DUP7 DUP7 DUP2 PUSH1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH3 SWAP3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 SWAP1 PUSH1 SWAP1 PUSH1 DUP5 ADD SWAP1 PUSH3 JUMP JUMPDEST POP POP POP PUSH32 PUSH1 SWAP2 SWAP1 SWAP2 SHL AND PUSH1 MSTORE PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 MUL SWAP2 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH2 PUSH1 PUSH1 SHL SUB NOT AND PUSH2 PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND MUL OR SWAP1 SSTORE PUSH3 DUP3 PUSH3 PUSH1 DUP8 AND PUSH1 PUSH3 JUMP JUMPDEST PUSH3 SWAP1 DUP7 PUSH3 JUMP JUMPDEST PUSH3 JUMP JUMPDEST POP POP POP POP POP POP PUSH3 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB PUSH2 SWAP1 SWAP2 DIV AND CALLER EQ PUSH3 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 DUP3 DUP3 PUSH3 PUSH1 SHL PUSH3 OR PUSH1 SHR JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH3 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH3 JUMP JUMPDEST DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH3 SWAP1 DUP5 SWAP1 PUSH3 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 MLOAD DUP2 DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND SWAP1 PUSH1 SWAP1 PUSH32 SWAP1 PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH3 SWAP1 PUSH3 JUMP JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH3 JUMPI PUSH1 DUP6 SSTORE PUSH3 JUMP JUMPDEST DUP3 PUSH1 LT PUSH3 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH3 JUMP JUMPDEST POP PUSH3 SWAP3 SWAP2 POP PUSH3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH3 JUMP JUMPDEST PUSH1 DUP3 PUSH1 DUP4 ADD SLT PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP4 ADD PUSH1 NOT SWAP1 DUP2 AND PUSH1 ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST DUP2 PUSH1 MSTORE DUP4 DUP2 MSTORE PUSH1 SWAP3 POP DUP7 DUP4 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 JUMP JUMPDEST DUP4 DUP3 GT ISZERO PUSH3 JUMPI PUSH1 DUP4 DUP6 DUP4 ADD ADD MSTORE JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP8 DUP10 SUB SLT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP7 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH3 DUP11 DUP4 DUP12 ADD PUSH3 JUMP JUMPDEST SWAP8 POP PUSH1 DUP10 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 DUP10 DUP3 DUP11 ADD PUSH3 JUMP JUMPDEST SWAP6 POP POP PUSH1 DUP8 ADD MLOAD PUSH1 DUP2 AND DUP2 EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP9 ADD MLOAD PUSH1 DUP10 ADD MLOAD SWAP2 SWAP6 POP SWAP4 POP PUSH3 DUP2 PUSH3 JUMP JUMPDEST PUSH1 DUP9 ADD MLOAD SWAP1 SWAP3 POP PUSH3 DUP2 PUSH3 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 POP SWAP3 SWAP6 JUMP JUMPDEST PUSH1 DUP3 NOT DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 JUMPI DUP2 PUSH1 NOT DIV DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH3 DUP4 DUP4 PUSH3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST DUP2 PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST DUP2 PUSH1 DUP2 EQ PUSH3 JUMPI PUSH1 DUP2 EQ PUSH3 JUMPI PUSH3 JUMP JUMPDEST PUSH1 SWAP2 POP POP PUSH3 JUMP JUMPDEST PUSH1 DUP5 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP POP PUSH1 DUP3 SHL PUSH3 JUMP JUMPDEST POP PUSH1 DUP4 LT PUSH2 DUP4 LT AND PUSH1 DUP5 LT PUSH1 DUP5 LT AND OR ISZERO PUSH3 JUMPI POP DUP2 DUP2 EXP PUSH3 JUMP JUMPDEST PUSH3 DUP4 DUP4 PUSH3 JUMP JUMPDEST DUP1 PUSH1 NOT DIV DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 EQ ISZERO PUSH3 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 MLOAD PUSH1 SHR PUSH2 PUSH3 PUSH1 CODECOPY PUSH1 PUSH2 ADD MSTORE PUSH2 PUSH1 RETURN UNKNOWN_0xfe PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 SLOAD PUSH1 AND PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH32 AND DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH2 SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SHL SUB NOT DUP3 AND PUSH4 PUSH1 SHL EQ DUP1 PUSH2 JUMPI POP PUSH4 PUSH1 SHL PUSH1 PUSH1 PUSH1 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH8 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP6 CALLER PUSH2 DUP7 DUP6 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD SWAP1 SWAP2 PUSH2 SWAP2 DUP6 SWAP1 PUSH2 SWAP1 DUP7 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH2 CALLER DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 CALLER DUP3 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB PUSH2 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 SWAP2 PUSH2 SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 PUSH32 SWAP1 DUP4 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH2 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH2 DUP4 CALLER PUSH2 JUMP JUMPDEST SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP4 CALLER PUSH2 DUP6 DUP6 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB PUSH2 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH2 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB PUSH2 SWAP1 SWAP2 DIV AND SWAP1 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT PUSH1 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 CALLER DUP6 PUSH2 DUP7 DUP6 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP PUSH2 DUP6 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB PUSH2 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP5 AND SWAP3 PUSH2 SWAP1 DIV AND SWAP1 PUSH32 SWAP1 PUSH1 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP3 AND PUSH2 MUL PUSH2 PUSH1 PUSH1 SHL SUB NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 MLOAD DUP2 DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND SWAP1 PUSH1 SWAP1 PUSH32 SWAP1 PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 SWAP2 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SWAP1 DUP2 SHA3 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP5 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 DUP5 PUSH1 MLOAD PUSH2 SWAP2 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND EXTCODESIZE PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND SWAP1 PUSH4 SWAP1 PUSH2 SWAP1 CALLER SWAP1 DUP11 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH4 PUSH1 SHL EQ SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB PUSH2 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP2 SHA3 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 MLOAD DUP3 DUP2 MSTORE PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND SWAP1 PUSH32 SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB PUSH2 SWAP1 SWAP2 DIV AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND EXTCODESIZE PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND SWAP1 PUSH4 SWAP1 PUSH2 SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP9 SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH4 PUSH1 SHL EQ SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 PUSH1 DUP4 ADD SLT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH8 DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP4 ADD PUSH1 NOT SWAP1 DUP2 AND PUSH1 ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST DUP2 PUSH1 MSTORE DUP4 DUP2 MSTORE DUP7 PUSH1 DUP6 DUP9 ADD ADD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 PUSH1 DUP8 ADD PUSH1 DUP4 ADD CALLDATACOPY PUSH1 PUSH1 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 DUP5 ADD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH1 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP6 DUP8 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 PUSH1 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 DUP6 ADD CALLDATALOAD PUSH8 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP8 DUP3 DUP9 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 DUP5 ADD CALLDATALOAD PUSH8 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP2 DUP6 ADD DUP2 ADD MLOAD DUP7 DUP4 ADD DUP3 ADD MSTORE ADD PUSH2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 ADD PUSH1 NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 SWAP1 PUSH2 SWAP1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SHL SUB DUP5 AND DUP2 MSTORE DUP3 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 MSTORE PUSH1 PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP3 NOT DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 EQ ISZERO PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 CALLDATACOPY DUP15 UNKNOWN_0x4a PUSH2 UNKNOWN_0x4f UNOFFICIAL_DUP UNKNOWN_0xda DUP6 UNKNOWN_0xe6 CALLDATALOAD UNKNOWN_0x27 UNKNOWN_0xde UNKNOWN_0xe2 DUP2 UNKNOWN_0xfb EXTCODECOPY SIGNEXTEND CREATE2 UNKNOWN_0xd EQ UNKNOWN_0xcb ADD SHL DUP2 SELFBALANCE LT UNKNOWN_0xfb UNKNOWN_0x25 UNKNOWN_0xc9 SHA3 PUSH5 STOP ADDMOD SDIV STOP CALLER STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP UNKNOWN_0xc0 STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP ADD STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP SLT STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP ADD UNKNOWN_0x4b BYTE SWAP3 UNKNOWN_0xc0 STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP UNKNOWN_0xa5 UNKNOWN_0x49 CALLDATASIZE SGT SWAP5 UNKNOWN_0x4e SDIV MSTORE PUSH25 PUSH16 UNKNOWN_0x2a
  "opcode_entropy": 4.876601368783299,
  "opcode_count": 4897,
  "unique_opcodes": 105,
  "byte_entropy": 6.093534335414133,
  "byte_0x": 0.00012453300124533,
  "byte_60": 0.1016189290161893,
  "byte_a0": 0.0073474470734744704,
  "byte_40": 0.012453300124533,
  "byte_81": 0.021917808219178082,
  "byte_90": 0.02752179327521793,
  "byte_52": 0.026276463262764633,
  "byte_05": 0.012079701120797011,
  "byte_80": 0.023163138231631384,
  "byte_54": 0.0049813200498132005,
  "byte_ff": 0.004732254047322541,
  "byte_19": 0.0034869240348692405,
  "byte_16": 0.01569115815691158,
  "byte_55": 0.0024906600249066002,
  "byte_62": 0.016936488169364883,
  "byte_00": 0.07484433374844333,
  "byte_1e": 0.00049813200498132,
  "byte_1d": 0.00024906600249066,
  "byte_38": 0.00037359900373599005,
  "byte_03": 0.01606475716064757,
  "byte_83": 0.008717310087173101,
  "byte_39": 0.00037359900373599005,
  "byte_01": 0.04956413449564134,
  "byte_2f": 0.00037359900373599005,
  "byte_91": 0.010834371108343711,
  "byte_db": 0.00037359900373599005,
  "byte_56": 0.027646326276463264,
  "byte_5b": 0.036737235367372355,
  "byte_86": 0.0024906600249066002,
  "byte_51": 0.010834371108343711,
  "byte_20": 0.023536737235367373,
  "byte_4a": 0.0006226650062266501,
  "byte_92": 0.00560398505603985,
  "byte_02": 0.007471980074719801,
  "byte_7e": 0.0006226650062266501,
  "byte_50": 0.0273972602739726,
  "byte_04": 0.013325031133250311,
  "byte_84": 0.009838107098381071,
  "byte_7f": 0.00410958904109589,
  "byte_f8": 0.00099626400996264,
  "byte_1b": 0.01805728518057285,
  "byte_82": 0.021793275217932753,
  "byte_34": 0.00037359900373599005,
  "byte_15": 0.010709838107098382,
  "byte_61": 0.050684931506849315,
  "byte_08": 0.0012453300124533001,
  "byte_fc": 0.0008717310087173101,
  "byte_85": 0.00523038605230386,
  "byte_88": 0.0017434620174346202,
  "byte_f1": 0.0017434620174346202,
  "byte_93": 0.0023661270236612704,
  "byte_c4": 0.0007471980074719801,
  "byte_57": 0.016562889165628893,
  "byte_3d": 0.0024906600249066002,
  "byte_3e": 0.0013698630136986301,
  "byte_fd": 0.006475716064757161,
  "byte_a8": 0.00049813200498132,
  "byte_17": 0.0023661270236612704,
  "byte_0c": 0.0006226650062266501,
  "byte_fa": 0.0008717310087173101,
  "byte_87": 0.0016189290161892902,
  "byte_0a": 0.0012453300124533001,
  "byte_06": 0.00410958904109589,
  "byte_c3": 0.00037359900373599005,
  "byte_18": 0.0012453300124533001,
  "byte_67": 0.0012453300124533001,
  "byte_33": 0.0033623910336239102,
  "byte_14": 0.009464508094645082,
  "byte_46": 0.00311332503113325,
  "byte_cd": 0.00448318804483188,
  "byte_e5": 0.0038605230386052304,
  "byte_24": 0.0032378580323785804,
  "byte_4f": 0.0006226650062266501,
  "byte_77": 0.0016189290161892902,
  "byte_6e": 0.004234122042341221,
  "byte_6c": 0.00286425902864259,
  "byte_65": 0.009962640099626401,
  "byte_3a": 0.00261519302615193,
  "byte_63": 0.00933997509339975,
  "byte_72": 0.0061021170610211705,
  "byte_69": 0.00199252801992528,
  "byte_73": 0.004856787048567871,
  "byte_6f": 0.00460772104607721,
  "byte_74": 0.0038605230386052304,
  "byte_68": 0.00224159402241594,
  "byte_44": 0.0024906600249066002,
  "byte_64": 0.005977584059775841,
  "byte_95": 0.0018679950186799503,
  "byte_99": 0.00037359900373599005,
  "byte_0b": 0.00112079701120797,
  "byte_4c": 0.00024906600249066,
  "byte_1c": 0.0008717310087173101,
  "byte_1f": 0.0037359900373599006,
  "byte_45": 0.00199252801992528,
  "byte_43": 0.00261519302615193,
  "byte_32": 0.0021170610211706103,
  "byte_30": 0.0016189290161892902,
  "byte_6d": 0.0012453300124533001,
  "byte_7a": 0.0012453300124533001,
  "byte_75": 0.00099626400996264,
  "byte_94": 0.0017434620174346202,
  "byte_dd": 0.00112079701120797,
  "byte_f2": 0.0012453300124533001,
  "byte_ad": 0.00049813200498132,
  "byte_e2": 0.0012453300124533001,
  "byte_c8": 0.00112079701120797,
  "byte_9b": 0.0008717310087173101,
  "byte_c2": 0.0006226650062266501,
  "byte_b0": 0.00099626400996264,
  "byte_37": 0.0008717310087173101,
  "byte_8d": 0.00112079701120797,
  "byte_aa": 0.0007471980074719801,
  "byte_2b": 0.0012453300124533001,
  "byte_a7": 0.0012453300124533001,
  "byte_a1": 0.0006226650062266501,
  "byte_28": 0.0008717310087173101,
  "byte_f5": 0.0016189290161892902,
  "byte_5a": 0.0008717310087173101,
  "byte_4d": 0.00099626400996264,
  "byte_23": 0.0008717310087173101,
  "byte_b3": 0.0008717310087173101,
  "byte_ef": 0.0007471980074719801,
  "byte_a3": 0.00099626400996264,
  "byte_8c": 0.00037359900373599005,
  "byte_fb": 0.00099626400996264,
  "byte_10": 0.0033623910336239102,
  "byte_cb": 0.0006226650062266501,
  "byte_11": 0.004856787048567871,
  "byte_de": 0.0006226650062266501,
  "byte_09": 0.0021170610211706103,
  "byte_0d": 0.0012453300124533001,
  "byte_0e": 0.0007471980074719801,
  "byte_12": 0.00448318804483188,
  "byte_36": 0.0029887920298879204,
  "byte_53": 0.00049813200498132,
  "byte_3f": 0.00037359900373599005,
  "byte_bf": 0.00012453300124533,
  "byte_d1": 0.00024906600249066,
  "byte_96": 0.0007471980074719801,
  "byte_c0": 0.0007471980074719801,
  "byte_89": 0.00112079701120797,
  "byte_8a": 0.00037359900373599005,
  "byte_8b": 0.00049813200498132,
  "byte_97": 0.00099626400996264,
  "byte_41": 0.00099626400996264,
  "byte_59": 0.0007471980074719801,
  "byte_4e": 0.0012453300124533001,
  "byte_22": 0.0018679950186799503,
  "byte_f0": 0.00049813200498132,
  "byte_d4": 0.00037359900373599005,
  "byte_b4": 0.00099626400996264,
  "byte_bd": 0.00112079701120797,
  "byte_2d": 0.0006226650062266501,
  "byte_71": 0.0016189290161892902,
  "byte_a2": 0.0006226650062266501,
  "byte_af": 0.0006226650062266501,
  "byte_b9": 0.0008717310087173101,
  "byte_e0": 0.0029887920298879204,
  "byte_48": 0.0012453300124533001,
  "byte_7b": 0.00112079701120797,
  "byte_f3": 0.00049813200498132,
  "byte_fe": 0.00037359900373599005,
  "byte_35": 0.0029887920298879204,
  "byte_a6": 0.00037359900373599005,
  "byte_f9": 0.00012453300124533,
  "byte_a9": 0.00037359900373599005,
  "byte_9c": 0.0006226650062266501,
  "byte_bb": 0.00037359900373599005,
  "byte_ca": 0.0008717310087173101,
  "byte_e9": 0.00049813200498132,
  "byte_d0": 0.0008717310087173101,
  "byte_d8": 0.0007471980074719801,
  "byte_e3": 0.0006226650062266501,
  "byte_ed": 0.00012453300124533,
  "byte_f6": 0.00012453300124533,
  "byte_b2": 0.00037359900373599005,
  "byte_a5": 0.00037359900373599005,
  "byte_c1": 0.0006226650062266501,
  "byte_d3": 0.00037359900373599005,
  "byte_4b": 0.00049813200498132,
  "byte_a4": 0.00049813200498132,
  "byte_d7": 0.00024906600249066,
  "byte_79": 0.00024906600249066,
  "byte_cc": 0.00024906600249066,
  "byte_7d": 0.00049813200498132,
  "byte_bc": 0.00012453300124533,
  "byte_31": 0.0007471980074719801,
  "byte_3c": 0.00037359900373599005,
  "byte_66": 0.0014943960149439602,
  "byte_ae": 0.00049813200498132,
  "byte_0f": 0.0013698630136986301,
  "byte_c6": 0.00012453300124533,
  "byte_42": 0.0006226650062266501,
  "byte_70": 0.00112079701120797,
  "byte_ee": 0.00037359900373599005,
  "byte_5c": 0.00024906600249066,
  "byte_9f": 0.00024906600249066,
  "byte_5e": 0.00037359900373599005,
  "byte_b8": 0.00024906600249066,
  "byte_49": 0.00049813200498132,
  "byte_c9": 0.00049813200498132,
  "byte_d2": 0.0029887920298879204,
  "byte_dc": 0.0017434620174346202,
  "byte_e8": 0.0006226650062266501,
  "byte_21": 0.00037359900373599005,
  "byte_13": 0.0027397260273972603,
  "byte_5f": 0.0006226650062266501,
  "byte_d9": 0.00099626400996264,
  "byte_3b": 0.0008717310087173101,
  "byte_07": 0.00199252801992528,
  "byte_d6": 0.00024906600249066,
  "byte_76": 0.00099626400996264,
  "byte_2a": 0.00037359900373599005,
  "byte_e4": 0.0008717310087173101,
  "byte_78": 0.0008717310087173101,
  "byte_ea": 0.0008717310087173101,
  "byte_b5": 0.0006226650062266501,
  "byte_e6": 0.00024906600249066,
  "byte_c7": 0.00049813200498132,
  "byte_da": 0.00037359900373599005,
  "byte_6b": 0.00049813200498132,
  "byte_9e": 0.00012453300124533,
  "byte_b6": 0.00037359900373599005,
  "byte_25": 0.0006226650062266501,
  "byte_9d": 0.00024906600249066,
  "byte_26": 0.00037359900373599005,
  "byte_e1": 0.00024906600249066,
  "byte_eb": 0.00024906600249066,
  "byte_ec": 0.00024906600249066,
  "byte_f7": 0.00012453300124533,
  "byte_29": 0.00049813200498132,
  "byte_8e": 0.00024906600249066,
  "byte_98": 0.00012453300124533,
  "byte_ce": 0.00012453300124533,
  "byte_1a": 0.00024906600249066,
  "byte_f4": 0.00012453300124533,
  "byte_2c": 0.00012453300124533,
  "byte_b1": 0.00037359900373599005,
  "byte_9a": 0.00112079701120797,
  "byte_ac": 0.00012453300124533,
  "byte_ab": 0.00012453300124533,
  "byte_df": 0.00024906600249066,
  "byte_58": 0.00037359900373599005,
  "byte_27": 0.00012453300124533,
  "byte_47": 0.00012453300124533,
  "byte_c5": 0.00012453300124533,
  "byte_b7": 0.00024906600249066,
  "byte_e7": 0.00012453300124533,
  "num_nodes": 178,
  "num_edges": 177,
  "avg_degree": 1.9887640449438202,
  "density": 0.0056179775280898875,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 455,
  "event_nums": 1000,
  "creation_block": 14233556,
  "creation_timestamp": 1645234097,
  "life_time": 8792593.0,
  "duration_seconds": 108574422.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 179,
  "num_buyers": 2,
  "num_sellers": 177,
  "num_creator_transfers": 1,
  "buy_amt": 1e+17,
  "sell_amt": 1.17e+17,
  "avg_value": 475877192982456.1,
  "txn_per_block": 5.1748096181854866e-05,
  "avg_gas_limit": 87888.07692307692,
  "std_gas_limit": 594418.07024456,
  "avg_gas_used": 46351.1978021978,
  "std_gas_used": 69169.06878948731,
  "avg_gas_price": 23535300720.443954,
  "std_gas_price": 22147731080.068104,
  "transfer_num": 179,
  "mintfinished_num": 1,
  "ownershiptransferred_num": 1,
  "approve_num": 270,
  "finishminting_num": 1,
  "renounceownership_num": 1,
  "mint_num": 1,
  "timeline_sequence": [
    [
      14233556,
      1645234097,
      0,
      30,
      100000000000000000,
      2000000,
      74522250624,
      0,
      1,
      4087130,
      1508631,
      8896848
    ],
    [
      14233827,
      1645237232,
      2,
      90,
      0,
      55891,
      46224080870,
      0,
      1,
      4637966,
      46576,
      8896577
    ],
    [
      14233856,
      1645237736,
      4,
      100,
      0,
      51233,
      62692515510,
      0,
      1,
      10732923,
      46576,
      8896548
    ],
    [
      14234326,
      1645244183,
      229,
      268,
      0,
      55891,
      64411175976,
      0,
      1,
      23581766,
      46576,
      8896078
    ],
    [
      14234631,
      1645248530,
      2010,
      310,
      0,
      55891,
      59218889073,
      0,
      1,
      25468048,
      46576,
      8895773
    ],
    [
      14234784,
      1645250203,
      18,
      154,
      0,
      55891,
      32752218164,
      0,
      1,
      21404858,
      46576,
      8895620
    ],
    [
      14235454,
      1645259140,
      23,
      176,
      0,
      77428,
      44447533567,
      0,
      1,
      13330470,
      51619,
      8894950
    ],
    [
      14235459,
      1645259192,
      24,
      147,
      0,
      77446,
      37665764581,
      0,
      1,
      9708392,
      51631,
      8894945
    ],
    [
      14235461,
      1645259231,
      25,
      401,
      0,
      77446,
      45055119656,
      0,
      1,
      14496323,
      51631,
      8894943
    ],
    [
      14235462,
      1645259256,
      26,
      206,
      0,
      77428,
      50467907653,
      0,
      1,
      17378974,
      51619,
      8894942
    ],
    [
      14235467,
      1645259316,
      27,
      161,
      0,
      43606,
      44902001066,
      1,
      0,
      12646982,
      43606,
      8894937
    ],
    [
      14235468,
      1645259349,
      28,
      245,
      0,
      77446,
      50326265611,
      0,
      1,
      18277301,
      51631,
      8894936
    ],
    [
      14235470,
      1645259410,
      29,
      297,
      0,
      77428,
      52881594757,
      0,
      1,
      20294982,
      51619,
      8894934
    ],
    [
      14235474,
      1645259555,
      30,
      28,
      0,
      77428,
      68313729229,
      0,
      1,
      2559131,
      51619,
      8894930
    ],
    [
      14238351,
      1645299061,
      239,
      180,
      0,
      55891,
      61432523355,
      0,
      1,
      20127835,
      46576,
      8892053
    ],
    [
      14245119,
      1645389219,
      252,
      304,
      0,
      77410,
      50773721800,
      0,
      1,
      17674127,
      51607,
      8885285
    ],
    [
      14245168,
      1645389691,
      253,
      273,
      0,
      51814,
      31156496737,
      0,
      1,
      22318300,
      34543,
      8885236
    ],
    [
      14251716,
      1645477075,
      0,
      322,
      0,
      51778,
      100985749244,
      0,
      1,
      29149180,
      29719,
      8878688
    ],
    [
      14251766,
      1645477752,
      0,
      142,
      0,
      51796,
      89922322966,
      0,
      1,
      11494399,
      29731,
      8878638
    ],
    [
      14251782,
      1645477899,
      0,
      231,
      0,
      51778,
      82193644486,
      0,
      1,
      18324158,
      29719,
      8878622
    ],
    [
      14251823,
      1645478440,
      0,
      238,
      0,
      51796,
      94867294420,
      0,
      1,
      23041601,
      29731,
      8878581
    ],
    [
      14251833,
      1645478651,
      0,
      169,
      0,
      51796,
      138697146445,
      0,
      1,
      9675015,
      29731,
      8878571
    ],
    [
      14251844,
      1645478751,
      0,
      366,
      0,
      51778,
      86351379597,
      0,
      1,
      29977876,
      29719,
      8878560
    ],
    [
      14251865,
      1645479091,
      0,
      270,
      0,
      51778,
      111140176174,
      0,
      1,
      21373494,
      29719,
      8878539
    ],
    [
      14258111,
      1645563121,
      257,
      339,
      0,
      77446,
      65800503489,
      0,
      1,
      23131417,
      51631,
      8872293
    ],
    [
      14258117,
      1645563212,
      258,
      199,
      0,
      77446,
      80522594868,
      0,
      1,
      22524053,
      51631,
      8872287
    ],
    [
      14258121,
      1645563260,
      259,
      254,
      0,
      77446,
      81540968608,
      0,
      1,
      24127757,
      51631,
      8872283
    ],
    [
      14258131,
      1645563509,
      260,
      310,
      0,
      77428,
      96770065356,
      0,
      1,
      20069955,
      51619,
      8872273
    ],
    [
      14258132,
      1645563531,
      261,
      86,
      0,
      77428,
      108671376804,
      0,
      1,
      6038894,
      51619,
      8872272
    ],
    [
      14258899,
      1645572992,
      262,
      180,
      0,
      77446,
      76569648316,
      0,
      1,
      17525287,
      51631,
      8871505
    ],
    [
      14259000,
      1645574637,
      265,
      177,
      0,
      51233,
      107759001935,
      0,
      1,
      11452067,
      46576,
      8871404
    ],
    [
      14268103,
      1645696344,
      268,
      67,
      0,
      51850,
      80396289692,
      0,
      1,
      4324697,
      34567,
      8862301
    ],
    [
      14406353,
      1647551612,
      336,
      313,
      0,
      77446,
      43604630660,
      0,
      1,
      23364732,
      51631,
      8724051
    ],
    [
      14414616,
      1647662993,
      453,
      221,
      0,
      55891,
      33001713079,
      0,
      1,
      6611930,
      46576,
      8715788
    ],
    [
      14414633,
      1647663271,
      2860,
      94,
      0,
      55891,
      28515904289,
      0,
      1,
      6541259,
      46576,
      8715771
    ],
    [
      14414745,
      1647664704,
      2862,
      319,
      0,
      77068,
      59149876973,
      0,
      1,
      20735661,
      51379,
      8715659
    ],
    [
      14420715,
      1647745082,
      179,
      112,
      0,
      55891,
      23583516626,
      0,
      1,
      18819350,
      46576,
      8709689
    ],
    [
      14424904,
      1647801321,
      7,
      110,
      0,
      55891,
      23235366851,
      0,
      1,
      9909280,
      46576,
      8705500
    ],
    [
      14433931,
      1647922815,
      211,
      264,
      0,
      55891,
      36041103311,
      0,
      1,
      10095462,
      46576,
      8696473
    ],
    [
      14435577,
      1647944960,
      150,
      257,
      0,
      55891,
      29081368324,
      0,
      1,
      19184710,
      46576,
      8694827
    ],
    [
      14435643,
      1647946014,
      153,
      115,
      0,
      77428,
      33124974623,
      0,
      1,
      8696179,
      51619,
      8694761
    ],
    [
      14435657,
      1647946196,
      154,
      243,
      0,
      77428,
      30243108095,
      0,
      1,
      21325558,
      51619,
      8694747
    ],
    [
      14445384,
      1648076164,
      72,
      200,
      0,
      77482,
      48470858965,
      0,
      1,
      16521028,
      46855,
      8685020
    ],
    [
      14459890,
      1648271126,
      9,
      245,
      0,
      77482,
      25890484743,
      0,
      1,
      23198416,
      46855,
      8670514
    ],
    [
      14463572,
      1648321133,
      253,
      4,
      0,
      53562,
      42408599408,
      0,
      1,
      264542,
      46576,
      8666832
    ],
    [
      14469081,
      1648394860,
      61,
      199,
      0,
      55891,
      25409981820,
      0,
      1,
      18928014,
      46576,
      8661323
    ],
    [
      14469755,
      1648403967,
      7,
      165,
      0,
      77428,
      36016663865,
      0,
      1,
      12236784,
      51619,
      8660649
    ],
    [
      14472849,
      1648445755,
      0,
      187,
      0,
      55891,
      30261247348,
      0,
      1,
      6465898,
      46576,
      8657555
    ],
    [
      14473095,
      1648449177,
      9,
      34,
      0,
      46576,
      32297216758,
      0,
      1,
      1922118,
      46576,
      8657309
    ],
    [
      14473162,
      1648450002,
      24,
      2,
      0,
      61596,
      28546533885,
      0,
      1,
      199749,
      46576,
      8657242
    ],
    [
      14474116,
      1648463032,
      12,
      47,
      0,
      51796,
      33795717138,
      0,
      1,
      2909486,
      34531,
      8656288
    ],
    [
      14477257,
      1648505021,
      69,
      201,
      0,
      55891,
      61088447387,
      0,
      1,
      15991490,
      46576,
      8653147
    ],
    [
      14484708,
      1648604867,
      276,
      131,
      0,
      46576,
      51258037070,
      0,
      1,
      16074086,
      46576,
      8645696
    ],
    [
      14484741,
      1648605424,
      278,
      45,
      0,
      61596,
      54669101936,
      0,
      1,
      3836304,
      46576,
      8645663
    ],
    [
      14486081,
      1648623277,
      38,
      139,
      0,
      52688,
      23942753182,
      0,
      1,
      7295751,
      46855,
      8644323
    ],
    [
      14486824,
      1648632732,
      159,
      174,
      0,
      77428,
      29718094302,
      0,
      1,
      18551197,
      51619,
      8643580
    ],
    [
      14495386,
      1648748653,
      279,
      184,
      0,
      55891,
      64320904519,
      0,
      1,
      14684363,
      46576,
      8635018
    ],
    [
      14501923,
      1648836741,
      375,
      218,
      0,
      46576,
      92072690399,
      0,
      1,
      17649981,
      46576,
      8628481
    ],
    [
      14506234,
      1648895778,
      161,
      167,
      0,
      46576,
      36688784500,
      0,
      1,
      14745457,
      46576,
      8624170
    ],
    [
      14506912,
      1648905131,
      0,
      65,
      0,
      51619,
      54000000000,
      0,
      1,
      5271054,
      51619,
      8623492
    ],
    [
      14506926,
      1648905289,
      0,
      64,
      0,
      51619,
      57000000000,
      0,
      1,
      5117434,
      51619,
      8623478
    ],
    [
      14509191,
      1648935429,
      163,
      97,
      0,
      46576,
      52788567550,
      0,
      1,
      9810805,
      46576,
      8621213
    ],
    [
      14509206,
      1648935765,
      703,
      52,
      0,
      53562,
      77696137262,
      0,
      1,
      5178278,
      46576,
      8621198
    ],
    [
      14509675,
      1648942019,
      50,
      402,
      0,
      44446,
      33890585402,
      1,
      0,
      24457400,
      44446,
      8620729
    ],
    [
      14509677,
      1648942077,
      51,
      108,
      0,
      77446,
      41542660446,
      0,
      1,
      14330389,
      51631,
      8620727
    ],
    [
      14509681,
      1648942109,
      52,
      202,
      0,
      77446,
      38423064442,
      0,
      1,
      24260217,
      51631,
      8620723
    ],
    [
      14509688,
      1648942190,
      53,
      116,
      0,
      77446,
      34875641813,
      0,
      1,
      13233143,
      51631,
      8620716
    ],
    [
      14515183,
      1649016234,
      62,
      324,
      0,
      77482,
      48803127988,
      0,
      1,
      23096049,
      46855,
      8615221
    ],
    [
      14515629,
      1649022379,
      288,
      44,
      0,
      51742,
      44221784197,
      0,
      1,
      3999426,
      34495,
      8614775
    ],
    [
      14515672,
      1649022983,
      64,
      236,
      0,
      55891,
      48062150945,
      0,
      1,
      25405298,
      46576,
      8614732
    ],
    [
      14515995,
      1649027169,
      0,
      67,
      0,
      51655,
      48000000000,
      0,
      1,
      5401351,
      51655,
      8614409
    ],
    [
      14516076,
      1649028339,
      1,
      45,
      0,
      51655,
      50000000000,
      0,
      1,
      2933015,
      51655,
      8614328
    ],
    [
      14516098,
      1649028622,
      2,
      63,
      0,
      51643,
      43000000000,
      0,
      1,
      3968674,
      51643,
      8614306
    ],
    [
      14516135,
      1649029129,
      3,
      113,
      0,
      34543,
      43000000000,
      0,
      1,
      14939413,
      34543,
      8614269
    ],
    [
      14516211,
      1649029970,
      4,
      143,
      0,
      34543,
      51000000000,
      0,
      1,
      10141192,
      34543,
      8614193
    ],
    [
      14516318,
      1649031359,
      1,
      91,
      0,
      34519,
      42000000000,
      0,
      1,
      8771663,
      34519,
      8614086
    ],
    [
      14516394,
      1649032355,
      50,
      107,
      0,
      46576,
      47443257484,
      0,
      1,
      10568099,
      46576,
      8614010
    ],
    [
      14517894,
      1649053549,
      710,
      3,
      0,
      53562,
      42977009650,
      0,
      1,
      388725,
      46576,
      8612510
    ],
    [
      14521867,
      1649106855,
      8,
      65,
      0,
      69522,
      96327407424,
      0,
      1,
      3542288,
      46348,
      8608537
    ],
    [
      14522456,
      1649114947,
      66,
      198,
      0,
      69486,
      53559288638,
      0,
      1,
      24507916,
      46324,
      8607948
    ],
    [
      14523501,
      1649129208,
      11,
      72,
      0,
      46576,
      59949260133,
      0,
      1,
      6429089,
      46576,
      8606903
    ],
    [
      14524310,
      1649140333,
      32,
      80,
      0,
      77428,
      70510855670,
      0,
      1,
      7889982,
      51619,
      8606094
    ],
    [
      14524313,
      1649140415,
      33,
      99,
      0,
      77446,
      73485220736,
      0,
      1,
      11745877,
      51631,
      8606091
    ],
    [
      14524314,
      1649140437,
      34,
      267,
      0,
      77446,
      81490428057,
      0,
      1,
      22803315,
      51631,
      8606090
    ],
    [
      14524314,
      1649140437,
      35,
      268,
      0,
      77464,
      81913416903,
      0,
      1,
      22854958,
      51643,
      8606090
    ],
    [
      14524318,
      1649140501,
      36,
      257,
      0,
      77464,
      69676739654,
      0,
      1,
      20587090,
      51643,
      8606086
    ],
    [
      14524320,
      1649140577,
      37,
      67,
      0,
      77446,
      70399396011,
      1,
      0,
      7119506,
      24482,
      8606084
    ],
    [
      14524324,
      1649140595,
      38,
      298,
      0,
      43606,
      59277339086,
      1,
      0,
      17789441,
      24506,
      8606080
    ],
    [
      14524331,
      1649140686,
      39,
      143,
      0,
      77482,
      55130160268,
      0,
      1,
      6665746,
      46855,
      8606073
    ],
    [
      14526995,
      1649175598,
      388,
      388,
      0,
      46576,
      63349401621,
      0,
      1,
      28865945,
      46576,
      8603409
    ],
    [
      14532768,
      1649254062,
      131,
      209,
      0,
      55891,
      84211728362,
      0,
      1,
      16124627,
      46576,
      8597636
    ],
    [
      14532797,
      1649254358,
      132,
      62,
      0,
      55891,
      53211274698,
      0,
      1,
      3628481,
      26676,
      8597607
    ],
    [
      14536031,
      1649298074,
      41,
      57,
      0,
      41127,
      48898467221,
      0,
      1,
      6836335,
      27418,
      8594373
    ],
    [
      14536060,
      1649298481,
      43,
      119,
      0,
      42145,
      44379011275,
      0,
      1,
      12701721,
      28097,
      8594344
    ],
    [
      14536097,
      1649299011,
      44,
      152,
      0,
      51832,
      49176277653,
      0,
      1,
      10295793,
      29755,
      8594307
    ],
    [
      14558193,
      1649597086,
      32,
      366,
      0,
      55891,
      33865882368,
      0,
      1,
      26797335,
      46576,
      8572211
    ],
    [
      14567938,
      1649728783,
      0,
      246,
      0,
      55891,
      61378458322,
      0,
      1,
      17118709,
      46576,
      8562466
    ],
    [
      14568353,
      1649734460,
      1141,
      197,
      0,
      77482,
      45706246588,
      0,
      1,
      8630377,
      46855,
      8562051
    ],
    [
      14568784,
      1649740299,
      71,
      151,
      0,
      77410,
      45095454228,
      0,
      1,
      12236967,
      51607,
      8561620
    ],
    [
      14571913,
      1649782322,
      11,
      166,
      0,
      55891,
      49394499938,
      0,
      1,
      11189029,
      46576,
      8558491
    ],
    [
      14579748,
      1649887702,
      177,
      134,
      0,
      55891,
      48269866722,
      0,
      1,
      14274678,
      46576,
      8550656
    ],
    [
      14583250,
      1649935469,
      53,
      90,
      0,
      55891,
      41089094214,
      0,
      1,
      5799490,
      46576,
      8547154
    ],
    [
      14583321,
      1649936480,
      45,
      49,
      0,
      55891,
      34426321499,
      0,
      1,
      4475101,
      46576,
      8547083
    ],
    [
      14583407,
      1649937475,
      2,
      423,
      0,
      46576,
      23632942682,
      0,
      1,
      26335880,
      46576,
      8546997
    ],
    [
      14585745,
      1649968820,
      50,
      139,
      0,
      55891,
      44416871129,
      0,
      1,
      7684516,
      46576,
      8544659
    ],
    [
      14585914,
      1649971121,
      64,
      138,
      0,
      46576,
      41164822245,
      0,
      1,
      15196748,
      46576,
      8544490
    ],
    [
      14586413,
      1649977779,
      18,
      201,
      0,
      55891,
      41603183921,
      0,
      1,
      14489058,
      46576,
      8543991
    ],
    [
      14599154,
      1650149926,
      13,
      121,
      0,
      55891,
      21861275938,
      0,
      1,
      14490881,
      46576,
      8531250
    ],
    [
      14599155,
      1650149936,
      14,
      63,
      0,
      55891,
      24123980134,
      0,
      1,
      4233617,
      26676,
      8531249
    ],
    [
      14602185,
      1650190446,
      19,
      301,
      17000000000000000,
      21000,
      17000000000,
      1,
      0,
      22664716,
      21000,
      8528219
    ],
    [
      14621682,
      1650455015,
      7,
      196,
      0,
      55891,
      36318090867,
      0,
      1,
      13749523,
      46576,
      8508722
    ],
    [
      14646665,
      1650792266,
      153,
      247,
      0,
      53562,
      20126830691,
      0,
      1,
      24386390,
      46576,
      8483739
    ],
    [
      14652362,
      1650870352,
      55,
      258,
      0,
      55891,
      60775213310,
      0,
      1,
      22677342,
      46576,
      8478042
    ],
    [
      14679461,
      1651239003,
      119,
      106,
      0,
      69864,
      34000000000,
      0,
      1,
      6977313,
      46576,
      8450943
    ],
    [
      14680497,
      1651252642,
      74,
      170,
      0,
      55891,
      83029888370,
      0,
      1,
      9270213,
      46576,
      8449907
    ],
    [
      14703872,
      1651570368,
      14,
      104,
      0,
      55891,
      47395815648,
      0,
      1,
      10315545,
      46576,
      8426532
    ],
    [
      14738771,
      1652049124,
      158,
      134,
      0,
      55891,
      22909195012,
      0,
      1,
      10959865,
      46576,
      8391633
    ],
    [
      14776380,
      1652568804,
      146,
      99,
      0,
      46576,
      37733175699,
      0,
      1,
      6667090,
      46576,
      8354024
    ],
    [
      14786345,
      1652705222,
      75,
      38,
      0,
      77482,
      23322878672,
      0,
      1,
      2998437,
      46855,
      8344059
    ],
    [
      14798640,
      1652874039,
      11,
      78,
      0,
      55891,
      12203442117,
      0,
      1,
      6260354,
      46576,
      8331764
    ],
    [
      14798642,
      1652874096,
      13,
      145,
      0,
      55891,
      13726581161,
      0,
      1,
      24054001,
      46576,
      8331762
    ],
    [
      14818589,
      1653154305,
      56,
      13,
      0,
      77482,
      62000000000,
      0,
      1,
      1149395,
      46855,
      8311815
    ],
    [
      14818594,
      1653154406,
      3,
      10,
      0,
      51796,
      62000000000,
      0,
      1,
      454158,
      29731,
      8311810
    ],
    [
      14841013,
      1653469779,
      10,
      260,
      0,
      77428,
      13962219643,
      0,
      1,
      15554347,
      46819,
      8289391
    ],
    [
      14841742,
      1653479704,
      52,
      205,
      0,
      55891,
      13175839236,
      0,
      1,
      18335489,
      46576,
      8288662
    ],
    [
      14948329,
      1655009938,
      18,
      468,
      0,
      55891,
      35369036881,
      0,
      1,
      23503783,
      46576,
      8182075
    ],
    [
      14964009,
      1655243000,
      43,
      94,
      0,
      69342,
      43006980410,
      0,
      1,
      9115522,
      46228,
      8166395
    ],
    [
      14972203,
      1655365627,
      62,
      354,
      0,
      51832,
      33867164096,
      0,
      1,
      29544653,
      29755,
      8158201
    ],
    [
      14978450,
      1655458431,
      38,
      160,
      0,
      55891,
      35880765908,
      0,
      1,
      9715223,
      46576,
      8151954
    ],
    [
      15069445,
      1656849445,
      254,
      499,
      0,
      55891,
      13666735037,
      0,
      1,
      27325246,
      46576,
      8060959
    ],
    [
      15071036,
      1656870796,
      226,
      134,
      0,
      46576,
      15678559568,
      0,
      1,
      10197932,
      46576,
      8059368
    ],
    [
      15099682,
      1657252997,
      28,
      42,
      0,
      55891,
      21526205117,
      0,
      1,
      4047029,
      46576,
      8030722
    ],
    [
      15157825,
      1658029200,
      402,
      319,
      0,
      29092,
      9207291276,
      0,
      1,
      26407424,
      24292,
      7972579
    ],
    [
      15210393,
      1658735026,
      26,
      278,
      0,
      55891,
      7276785585,
      0,
      1,
      21146383,
      46576,
      7920011
    ],
    [
      15218834,
      1658848183,
      327,
      4,
      0,
      43638,
      34945804947,
      0,
      1,
      361419,
      24292,
      7911570
    ],
    [
      15234115,
      1659053510,
      113,
      26,
      0,
      53562,
      17614610372,
      0,
      1,
      8791249,
      46576,
      7896289
    ],
    [
      15262375,
      1659433797,
      43,
      217,
      0,
      55891,
      8198645058,
      0,
      1,
      15057047,
      46576,
      7868029
    ],
    [
      15262380,
      1659433851,
      44,
      277,
      0,
      32011,
      7991304088,
      0,
      1,
      20762715,
      26676,
      7868024
    ],
    [
      15305962,
      1660020449,
      504,
      169,
      0,
      55891,
      12236397075,
      0,
      1,
      17453413,
      46576,
      7824442
    ],
    [
      15331940,
      1660373669,
      52,
      273,
      0,
      46576,
      8443945274,
      0,
      1,
      21876099,
      46576,
      7798464
    ],
    [
      15339269,
      1660473693,
      121,
      200,
      0,
      51832,
      12123420398,
      0,
      1,
      17970029,
      29755,
      7791135
    ],
    [
      15341292,
      1660501049,
      31,
      140,
      0,
      46576,
      14710985293,
      0,
      1,
      11992960,
      46576,
      7789112
    ],
    [
      15356662,
      1660711347,
      55,
      84,
      0,
      77464,
      5033019990,
      0,
      1,
      5610879,
      46843,
      7773742
    ],
    [
      15360873,
      1660768794,
      69,
      77,
      0,
      55891,
      14961085581,
      0,
      1,
      6885322,
      46576,
      7769531
    ],
    [
      15372281,
      1660925467,
      96,
      154,
      0,
      77428,
      21629263423,
      0,
      1,
      14282707,
      51619,
      7758123
    ],
    [
      15372287,
      1660925538,
      97,
      220,
      0,
      77428,
      18178341757,
      0,
      1,
      14276647,
      51619,
      7758117
    ],
    [
      15386206,
      1661115510,
      194,
      123,
      0,
      55891,
      9248680059,
      0,
      1,
      11179245,
      46576,
      7744198
    ],
    [
      15386978,
      1661125560,
      1,
      298,
      0,
      55891,
      5416188453,
      0,
      1,
      25318504,
      46576,
      7743426
    ],
    [
      15393044,
      1661209108,
      50,
      202,
      0,
      77464,
      9476622689,
      0,
      1,
      26704746,
      46843,
      7737360
    ],
    [
      15393065,
      1661209437,
      1,
      180,
      0,
      46228,
      12024514349,
      0,
      1,
      14942886,
      46228,
      7737339
    ],
    [
      15393079,
      1661209660,
      2,
      246,
      0,
      46228,
      13034003084,
      0,
      1,
      25503580,
      46228,
      7737325
    ],
    [
      15393139,
      1661210456,
      4,
      58,
      0,
      43638,
      11796495966,
      0,
      1,
      12474463,
      24292,
      7737265
    ],
    [
      15393144,
      1661210540,
      5,
      164,
      0,
      39438,
      14499945438,
      0,
      1,
      29565824,
      26292,
      7737260
    ],
    [
      15393144,
      1661210540,
      6,
      168,
      0,
      39438,
      14499945438,
      0,
      1,
      29971390,
      26292,
      7737260
    ],
    [
      15393167,
      1661210991,
      7,
      206,
      0,
      46228,
      21271975798,
      0,
      1,
      17305735,
      46228,
      7737237
    ],
    [
      15393278,
      1661212566,
      9,
      62,
      0,
      46300,
      22834865615,
      0,
      1,
      5355161,
      46300,
      7737126
    ],
    [
      15393292,
      1661212673,
      2,
      58,
      0,
      77446,
      14836040805,
      0,
      1,
      5556594,
      51631,
      7737112
    ],
    [
      15393469,
      1661214856,
      2,
      224,
      0,
      46228,
      9801510378,
      0,
      1,
      29539922,
      46228,
      7736935
    ],
    [
      15393969,
      1661221621,
      1,
      103,
      0,
      46276,
      7287244653,
      0,
      1,
      8187815,
      46276,
      7736435
    ],
    [
      15393982,
      1661221804,
      3,
      265,
      0,
      46276,
      9237681861,
      0,
      1,
      21144291,
      46276,
      7736422
    ],
    [
      15393991,
      1661221915,
      6,
      147,
      0,
      55891,
      8307688076,
      0,
      1,
      14435637,
      46576,
      7736413
    ],
    [
      15394441,
      1661228310,
      4,
      23,
      0,
      51760,
      9589243425,
      0,
      1,
      10210993,
      34507,
      7735963
    ],
    [
      15394451,
      1661228371,
      5,
      232,
      0,
      77410,
      5955356293,
      0,
      1,
      22260309,
      51607,
      7735953
    ],
    [
      15394453,
      1661228449,
      6,
      178,
      0,
      77410,
      7138106862,
      0,
      1,
      12533652,
      51607,
      7735951
    ],
    [
      15394462,
      1661228563,
      7,
      288,
      0,
      77410,
      6577630759,
      0,
      1,
      23449484,
      51607,
      7735942
    ],
    [
      15394463,
      1661228601,
      8,
      312,
      0,
      77410,
      7211891401,
      0,
      1,
      29907849,
      51607,
      7735941
    ],
    [
      15394466,
      1661228678,
      9,
      336,
      0,
      77410,
      7937910084,
      0,
      1,
      27638334,
      51607,
      7735938
    ],
    [
      15394469,
      1661228723,
      10,
      119,
      0,
      77410,
      9379108140,
      0,
      1,
      11247745,
      51607,
      7735935
    ],
    [
      15394475,
      1661228789,
      11,
      392,
      0,
      77410,
      7373867220,
      0,
      1,
      21532875,
      51607,
      7735929
    ],
    [
      15394525,
      1661229482,
      12,
      294,
      0,
      77410,
      6652212135,
      0,
      1,
      24512647,
      51607,
      7735879
    ],
    [
      15394530,
      1661229562,
      13,
      101,
      0,
      51760,
      6796569292,
      0,
      1,
      6802795,
      34507,
      7735874
    ],
    [
      15394533,
      1661229610,
      14,
      15,
      0,
      77410,
      7664065304,
      0,
      1,
      2359773,
      51607,
      7735871
    ],
    [
      15394536,
      1661229637,
      15,
      247,
      0,
      77410,
      6968603082,
      0,
      1,
      14077589,
      51607,
      7735868
    ],
    [
      15394546,
      1661229715,
      16,
      276,
      0,
      77410,
      5952364392,
      0,
      1,
      27208533,
      51607,
      7735858
    ],
    [
      15394548,
      1661229766,
      17,
      157,
      0,
      77410,
      7133923867,
      0,
      1,
      13188138,
      51607,
      7735856
    ],
    [
      15394551,
      1661229801,
      18,
      66,
      0,
      77410,
      7640238853,
      0,
      1,
      3464995,
      51607,
      7735853
    ],
    [
      15394562,
      1661229881,
      19,
      254,
      0,
      77410,
      6216149711,
      0,
      1,
      15475914,
      51607,
      7735842
    ],
    [
      15394564,
      1661229917,
      20,
      221,
      0,
      77410,
      6560003482,
      0,
      1,
      16421003,
      51607,
      7735840
    ],
    [
      15394566,
      1661229961,
      21,
      174,
      0,
      77410,
      7049803956,
      0,
      1,
      9656973,
      51607,
      7735838
    ],
    [
      15394569,
      1661230008,
      22,
      111,
      0,
      77410,
      7257019916,
      0,
      1,
      6101920,
      51607,
      7735835
    ],
    [
      15394571,
      1661230035,
      23,
      26,
      0,
      77410,
      7918983397,
      0,
      1,
      1852632,
      51607,
      7735833
    ],
    [
      15394575,
      1661230084,
      24,
      78,
      0,
      43606,
      7367411102,
      0,
      1,
      5647410,
      28823,
      7735829
    ],
    [
      15394577,
      1661230122,
      25,
      85,
      0,
      77410,
      7606085764,
      0,
      1,
      6397701,
      51607,
      7735827
    ],
    [
      15394582,
      1661230162,
      26,
      280,
      0,
      77410,
      6462042729,
      0,
      1,
      24609198,
      51607,
      7735822
    ],
    [
      15394585,
      1661230273,
      27,
      50,
      0,
      77410,
      7379285994,
      0,
      1,
      4022522,
      51607,
      7735819
    ],
    [
      15394585,
      1661230273,
      28,
      193,
      0,
      51760,
      7379285994,
      0,
      1,
      19055036,
      34507,
      7735819
    ],
    [
      15394589,
      1661230295,
      29,
      410,
      0,
      77410,
      6832188777,
      0,
      1,
      29410123,
      51607,
      7735815
    ],
    [
      15394590,
      1661230354,
      30,
      215,
      0,
      77410,
      7498365637,
      0,
      1,
      18451024,
      51607,
      7735814
    ],
    [
      15394608,
      1661230543,
      31,
      102,
      0,
      77410,
      6025214230,
      0,
      1,
      8866122,
      51607,
      7735796
    ],
    [
      15394639,
      1661230911,
      32,
      234,
      0,
      77410,
      7163338336,
      0,
      1,
      15593637,
      51607,
      7735765
    ],
    [
      15394642,
      1661230954,
      33,
      49,
      0,
      77410,
      7130080879,
      0,
      1,
      1786191,
      51607,
      7735762
    ],
    [
      15394647,
      1661230989,
      34,
      128,
      0,
      77410,
      5734351881,
      0,
      1,
      10799546,
      51607,
      7735757
    ],
    [
      15394649,
      1661231016,
      35,
      310,
      0,
      77392,
      5789947438,
      0,
      1,
      24110614,
      51595,
      7735755
    ],
    [
      15394653,
      1661231067,
      36,
      63,
      0,
      77410,
      6366842242,
      0,
      1,
      4286894,
      51607,
      7735751
    ],
    [
      15394672,
      1661231356,
      37,
      113,
      0,
      77410,
      7912521961,
      0,
      1,
      11985378,
      51607,
      7735732
    ],
    [
      15394679,
      1661231452,
      38,
      144,
      0,
      77410,
      7483324227,
      0,
      1,
      11403992,
      51607,
      7735725
    ],
    [
      15394685,
      1661231494,
      39,
      138,
      0,
      77410,
      5832471157,
      0,
      1,
      11324359,
      51607,
      7735719
    ],
    [
      15394687,
      1661231532,
      40,
      256,
      0,
      77410,
      6080835642,
      0,
      1,
      16910637,
      51607,
      7735717
    ],
    [
      15394690,
      1661231589,
      41,
      41,
      0,
      77410,
      6338946759,
      0,
      1,
      2194186,
      51607,
      7735714
    ],
    [
      15394695,
      1661231623,
      42,
      120,
      0,
      77410,
      5617015103,
      0,
      1,
      11649487,
      51607,
      7735709
    ],
    [
      15394696,
      1661231643,
      43,
      296,
      0,
      77410,
      6054780921,
      0,
      1,
      22928859,
      51607,
      7735708
    ],
    [
      15394700,
      1661231698,
      44,
      142,
      0,
      77410,
      5885161310,
      0,
      1,
      11704292,
      51607,
      7735704
    ],
    [
      15394704,
      1661231743,
      45,
      137,
      0,
      77410,
      5720978532,
      0,
      1,
      7898608,
      51607,
      7735700
    ],
    [
      15394708,
      1661231788,
      46,
      81,
      0,
      77410,
      5590708830,
      0,
      1,
      5451585,
      51607,
      7735696
    ],
    [
      15394713,
      1661231848,
      47,
      150,
      0,
      77410,
      5221107093,
      0,
      1,
      15200119,
      51607,
      7735691
    ],
    [
      15394716,
      1661231934,
      48,
      199,
      0,
      77410,
      5740763673,
      0,
      1,
      16784042,
      51607,
      7735688
    ],
    [
      15394716,
      1661231934,
      49,
      332,
      0,
      77410,
      5740763673,
      0,
      1,
      28853726,
      51607,
      7735688
    ],
    [
      15394721,
      1661231972,
      50,
      81,
      0,
      77410,
      5445431823,
      0,
      1,
      7001385,
      51607,
      7735683
    ],
    [
      15394726,
      1661231997,
      51,
      217,
      0,
      77410,
      6048225841,
      0,
      1,
      22437703,
      51607,
      7735678
    ],
    [
      15394742,
      1661232253,
      52,
      145,
      0,
      51760,
      7011641959,
      0,
      1,
      14567048,
      34507,
      7735662
    ],
    [
      15394744,
      1661232300,
      53,
      122,
      0,
      51760,
      7691896513,
      0,
      1,
      16181689,
      34507,
      7735660
    ],
    [
      15394749,
      1661232343,
      54,
      108,
      0,
      51760,
      6741880304,
      0,
      1,
      11281289,
      34507,
      7735655
    ],
    [
      15394753,
      1661232380,
      55,
      119,
      0,
      51760,
      6216421391,
      0,
      1,
      8996770,
      34507,
      7735651
    ],
    [
      15394759,
      1661232426,
      56,
      687,
      0,
      51760,
      5544849267,
      0,
      1,
      28914997,
      34507,
      7735645
    ],
    [
      15394762,
      1661232471,
      57,
      78,
      0,
      51760,
      6550786060,
      0,
      1,
      11256064,
      34507,
      7735642
    ],
    [
      15394764,
      1661232499,
      58,
      135,
      0,
      51760,
      6771696892,
      0,
      1,
      12356092,
      34507,
      7735640
    ],
    [
      15394768,
      1661232548,
      59,
      149,
      0,
      51760,
      6522205244,
      0,
      1,
      21767330,
      34507,
      7735636
    ],
    [
      15394770,
      1661232592,
      60,
      69,
      0,
      51760,
      6703349668,
      0,
      1,
      5983611,
      34507,
      7735634
    ],
    [
      15394777,
      1661232653,
      61,
      222,
      0,
      51760,
      5791837498,
      0,
      1,
      17932312,
      34507,
      7735627
    ],
    [
      15394781,
      1661232689,
      13,
      101,
      0,
      69864,
      5497744136,
      0,
      1,
      8018068,
      46576,
      7735623
    ],
    [
      15394783,
      1661232695,
      62,
      78,
      0,
      51760,
      5413568962,
      0,
      1,
      7100557,
      34507,
      7735621
    ],
    [
      15394785,
      1661232715,
      63,
      321,
      0,
      51760,
      5629786126,
      0,
      1,
      29647862,
      34507,
      7735619
    ],
    [
      15394790,
      1661232770,
      64,
      191,
      0,
      51760,
      5220719695,
      0,
      1,
      17111299,
      34507,
      7735614
    ],
    [
      15394792,
      1661232804,
      65,
      148,
      0,
      51760,
      5898994617,
      0,
      1,
      16454360,
      34507,
      7735612
    ],
    [
      15394793,
      1661232816,
      66,
      335,
      0,
      51760,
      6026411688,
      0,
      1,
      29945330,
      34507,
      7735611
    ],
    [
      15394797,
      1661232925,
      67,
      309,
      0,
      51760,
      7398340554,
      0,
      1,
      29303188,
      34507,
      7735607
    ],
    [
      15394798,
      1661232947,
      68,
      219,
      0,
      51760,
      8135210438,
      0,
      1,
      22864548,
      34507,
      7735606
    ],
    [
      15394800,
      1661232977,
      69,
      140,
      0,
      51760,
      8628375104,
      0,
      1,
      17161524,
      34507,
      7735604
    ],
    [
      15394804,
      1661233110,
      29,
      199,
      0,
      46276,
      11162670987,
      0,
      1,
      20301329,
      46276,
      7735600
    ],
    [
      15394810,
      1661233193,
      16,
      84,
      0,
      55891,
      11796978297,
      0,
      1,
      7479604,
      46576,
      7735594
    ],
    [
      15394812,
      1661233226,
      70,
      149,
      0,
      51760,
      11123306391,
      0,
      1,
      19844328,
      34507,
      7735592
    ],
    [
      15394812,
      1661233226,
      71,
      150,
      0,
      51760,
      11326453962,
      0,
      1,
      19878835,
      34507,
      7735592
    ],
    [
      15394812,
      1661233226,
      72,
      151,
      0,
      77410,
      11326453962,
      0,
      1,
      19930442,
      51607,
      7735592
    ],
    [
      15394812,
      1661233226,
      73,
      152,
      0,
      77410,
      11326453962,
      0,
      1,
      19982049,
      51607,
      7735592
    ],
    [
      15394812,
      1661233226,
      74,
      153,
      0,
      51760,
      11326453962,
      0,
      1,
      20016556,
      34507,
      7735592
    ],
    [
      15394812,
      1661233226,
      75,
      154,
      0,
      51760,
      11326453962,
      0,
      1,
      20051063,
      34507,
      7735592
    ],
    [
      15394813,
      1661233240,
      76,
      228,
      0,
      51760,
      12120929397,
      0,
      1,
      20850873,
      34507,
      7735591
    ],
    [
      15394864,
      1661233950,
      0,
      234,
      0,
      77428,
      8580118575,
      0,
      1,
      16536216,
      46819,
      7735540
    ],
    [
      15394864,
      1661233950,
      77,
      324,
      0,
      55891,
      8580118575,
      0,
      1,
      26442478,
      46576,
      7735540
    ],
    [
      15394932,
      1661234740,
      81,
      344,
      0,
      69414,
      5722858093,
      0,
      1,
      26896764,
      46276,
      7735472
    ],
    [
      15394943,
      1661234946,
      84,
      150,
      0,
      55891,
      7860929393,
      0,
      1,
      12699593,
      46576,
      7735461
    ],
    [
      15394967,
      1661235229,
      0,
      113,
      0,
      46276,
      6837611890,
      0,
      1,
      5861993,
      46276,
      7735437
    ],
    [
      15395049,
      1661236322,
      243,
      61,
      0,
      55891,
      8133549018,
      0,
      1,
      4934061,
      46576,
      7735355
    ],
    [
      15395049,
      1661236322,
      86,
      75,
      0,
      51832,
      8133549018,
      0,
      1,
      6150982,
      29755,
      7735355
    ],
    [
      15395222,
      1661238604,
      2,
      252,
      0,
      55891,
      7300896547,
      0,
      1,
      25710913,
      46576,
      7735182
    ],
    [
      15395256,
      1661239050,
      9,
      134,
      0,
      46288,
      8798977981,
      0,
      1,
      15193133,
      46288,
      7735148
    ],
    [
      15395356,
      1661240661,
      0,
      108,
      0,
      46204,
      13555913539,
      0,
      1,
      13599808,
      46204,
      7735048
    ],
    [
      15395396,
      1661241397,
      5,
      298,
      0,
      77410,
      18504799544,
      0,
      1,
      21321760,
      46807,
      7735008
    ],
    [
      15395424,
      1661241785,
      171,
      430,
      0,
      46276,
      13344810124,
      0,
      1,
      27086996,
      46276,
      7734980
    ],
    [
      15395532,
      1661243519,
      5,
      146,
      0,
      46288,
      9372579289,
      0,
      1,
      16422230,
      46288,
      7734872
    ],
    [
      15395558,
      1661243979,
      8,
      128,
      0,
      55891,
      10083106503,
      0,
      1,
      9510622,
      46576,
      7734846
    ],
    [
      15395680,
      1661246138,
      10,
      102,
      0,
      46288,
      17240038617,
      0,
      1,
      7563121,
      46288,
      7734724
    ],
    [
      15395693,
      1661246297,
      1601,
      109,
      0,
      55891,
      13753596517,
      0,
      1,
      8228585,
      46576,
      7734711
    ],
    [
      15395735,
      1661246707,
      39,
      48,
      0,
      55891,
      10861758761,
      0,
      1,
      7438500,
      46576,
      7734669
    ],
    [
      15395741,
      1661246758,
      0,
      127,
      0,
      46276,
      7394781085,
      0,
      1,
      8414656,
      46276,
      7734663
    ],
    [
      15395743,
      1661246766,
      1,
      83,
      0,
      46276,
      7566197762,
      0,
      1,
      4925700,
      26376,
      7734661
    ],
    [
      15395745,
      1661246807,
      2,
      88,
      0,
      46276,
      6991235801,
      0,
      1,
      9630486,
      26376,
      7734659
    ],
    [
      15395806,
      1661247582,
      0,
      221,
      0,
      55891,
      6562614616,
      0,
      1,
      19117857,
      46576,
      7734598
    ],
    [
      15395828,
      1661247923,
      0,
      120,
      0,
      55891,
      8127658799,
      0,
      1,
      9433149,
      46576,
      7734576
    ],
    [
      15395858,
      1661248378,
      0,
      212,
      0,
      55891,
      14877041264,
      0,
      1,
      16868045,
      46576,
      7734546
    ],
    [
      15395913,
      1661248935,
      178,
      63,
      0,
      46288,
      6763005397,
      0,
      1,
      5015062,
      46288,
      7734491
    ],
    [
      15395923,
      1661249014,
      0,
      320,
      0,
      55891,
      7392688560,
      0,
      1,
      27237319,
      46576,
      7734481
    ],
    [
      15395928,
      1661249127,
      181,
      61,
      0,
      55891,
      8974122891,
      0,
      1,
      5763519,
      46576,
      7734476
    ],
    [
      15395945,
      1661249287,
      0,
      135,
      0,
      55891,
      6700801526,
      0,
      1,
      11215345,
      46576,
      7734459
    ],
    [
      15395966,
      1661249588,
      0,
      322,
      0,
      55891,
      7502522012,
      0,
      1,
      26609940,
      46576,
      7734438
    ],
    [
      15396018,
      1661250233,
      0,
      207,
      0,
      55891,
      5725531468,
      0,
      1,
      23736494,
      46576,
      7734386
    ],
    [
      15396065,
      1661250799,
      0,
      126,
      0,
      55891,
      9995632292,
      0,
      1,
      15553694,
      46576,
      7734339
    ],
    [
      15396077,
      1661250978,
      3,
      27,
      0,
      29188,
      9976982842,
      0,
      1,
      4182249,
      29188,
      7734327
    ],
    [
      15396170,
      1661252548,
      55,
      101,
      0,
      46276,
      21366888983,
      0,
      1,
      8800750,
      46276,
      7734234
    ],
    [
      15396187,
      1661252793,
      2,
      86,
      0,
      69414,
      19147380667,
      0,
      1,
      8083493,
      46276,
      7734217
    ],
    [
      15396344,
      1661255022,
      2,
      146,
      0,
      29224,
      6464125691,
      0,
      1,
      8908707,
      29224,
      7734060
    ],
    [
      15396683,
      1661259305,
      110,
      187,
      0,
      46288,
      8157187721,
      0,
      1,
      20810379,
      46288,
      7733721
    ],
    [
      15397295,
      1661266910,
      68,
      287,
      0,
      46300,
      12615662396,
      0,
      1,
      28415850,
      46300,
      7733109
    ],
    [
      15397296,
      1661266923,
      69,
      197,
      0,
      46300,
      14003939619,
      0,
      1,
      17001648,
      26400,
      7733108
    ],
    [
      15397299,
      1661266983,
      70,
      118,
      0,
      46300,
      15464197453,
      0,
      1,
      10791322,
      26400,
      7733105
    ],
    [
      15397359,
      1661267749,
      272,
      219,
      0,
      69450,
      10997553735,
      0,
      1,
      21671385,
      46300,
      7733045
    ],
    [
      15397461,
      1661269014,
      112,
      175,
      0,
      46288,
      20369166565,
      0,
      1,
      23734914,
      46288,
      7732943
    ],
    [
      15397702,
      1661272229,
      1,
      29,
      0,
      69864,
      17658871673,
      0,
      1,
      4070194,
      46576,
      7732702
    ],
    [
      15397722,
      1661272440,
      7,
      49,
      0,
      55891,
      15097457808,
      0,
      1,
      4293141,
      46576,
      7732682
    ],
    [
      15397768,
      1661272974,
      6,
      136,
      0,
      69864,
      11421512332,
      0,
      1,
      11729595,
      46576,
      7732636
    ],
    [
      15397835,
      1661273962,
      276,
      50,
      0,
      55891,
      26306659146,
      0,
      1,
      7624770,
      46576,
      7732569
    ],
    [
      15398165,
      1661278282,
      12,
      158,
      0,
      46276,
      18168326260,
      0,
      1,
      14594214,
      46276,
      7732239
    ],
    [
      15398185,
      1661278573,
      13,
      136,
      0,
      26376,
      17828992688,
      0,
      1,
      15229994,
      26376,
      7732219
    ],
    [
      15398190,
      1661278684,
      14,
      129,
      0,
      29176,
      22989665936,
      0,
      1,
      14098206,
      29176,
      7732214
    ],
    [
      15398326,
      1661280490,
      115,
      108,
      0,
      77428,
      24906067725,
      0,
      1,
      8822208,
      51619,
      7732078
    ],
    [
      15398434,
      1661282014,
      4,
      269,
      0,
      51832,
      16619076194,
      0,
      1,
      27171217,
      29755,
      7731970
    ],
    [
      15398481,
      1661282736,
      6,
      97,
      0,
      46300,
      15744262326,
      0,
      1,
      7861375,
      46300,
      7731923
    ],
    [
      15398495,
      1661283025,
      9,
      229,
      0,
      55891,
      21596878660,
      0,
      1,
      12952432,
      46576,
      7731909
    ],
    [
      15398554,
      1661283919,
      16,
      111,
      0,
      46228,
      15643209561,
      0,
      1,
      12315720,
      46228,
      7731850
    ],
    [
      15398572,
      1661284186,
      1,
      47,
      0,
      55891,
      14000000000,
      0,
      1,
      6210205,
      46576,
      7731832
    ],
    [
      15398584,
      1661284328,
      18,
      205,
      0,
      46228,
      12610238789,
      0,
      1,
      21111911,
      46228,
      7731820
    ],
    [
      15398598,
      1661284544,
      20,
      177,
      0,
      46300,
      11918002195,
      0,
      1,
      17574839,
      46300,
      7731806
    ],
    [
      15399144,
      1661291757,
      9,
      262,
      0,
      55891,
      13717317611,
      0,
      1,
      28623455,
      46576,
      7731260
    ],
    [
      15399230,
      1661292949,
      2,
      84,
      0,
      34519,
      15000000000,
      0,
      1,
      6886261,
      29719,
      7731174
    ],
    [
      15399675,
      1661299434,
      11,
      69,
      0,
      46276,
      7049844029,
      0,
      1,
      7517692,
      46276,
      7730729
    ],
    [
      15400362,
      1661309036,
      489,
      201,
      0,
      77410,
      9156756608,
      0,
      1,
      26630447,
      51607,
      7730042
    ],
    [
      15400371,
      1661309130,
      490,
      188,
      0,
      77446,
      7654298311,
      0,
      1,
      27345674,
      51631,
      7730033
    ],
    [
      15400494,
      1661310914,
      189,
      213,
      0,
      46288,
      10162443781,
      0,
      1,
      13889109,
      46288,
      7729910
    ],
    [
      15402013,
      1661331787,
      291,
      328,
      0,
      29092,
      11332366548,
      0,
      1,
      29693487,
      24292,
      7728391
    ],
    [
      15402013,
      1661331787,
      292,
      329,
      0,
      29092,
      12124713476,
      0,
      1,
      29717779,
      24292,
      7728391
    ],
    [
      15402018,
      1661331851,
      295,
      144,
      0,
      26292,
      12957482144,
      0,
      1,
      13306318,
      26292,
      7728386
    ],
    [
      15402019,
      1661331859,
      296,
      193,
      0,
      26292,
      13269628615,
      0,
      1,
      20498376,
      26292,
      7728385
    ],
    [
      15402979,
      1661344909,
      19,
      41,
      0,
      46276,
      13045264547,
      0,
      1,
      3484466,
      46276,
      7727425
    ],
    [
      15403000,
      1661345180,
      22,
      471,
      0,
      55891,
      12012048498,
      0,
      1,
      24975559,
      46576,
      7727404
    ],
    [
      15403048,
      1661345928,
      73,
      257,
      0,
      55891,
      10378319808,
      0,
      1,
      27046446,
      46576,
      7727356
    ],
    [
      15403219,
      1661348257,
      24,
      81,
      0,
      46288,
      15118008372,
      0,
      1,
      6040778,
      46288,
      7727185
    ],
    [
      15403282,
      1661349119,
      58,
      182,
      0,
      29188,
      10416807797,
      0,
      1,
      13308078,
      29188,
      7727122
    ],
    [
      15404094,
      1661360442,
      491,
      154,
      0,
      77410,
      16277826064,
      0,
      1,
      15872060,
      51607,
      7726310
    ],
    [
      15404124,
      1661360828,
      492,
      95,
      0,
      77446,
      21584983740,
      0,
      1,
      9842405,
      51631,
      7726280
    ],
    [
      15404178,
      1661361545,
      304,
      148,
      0,
      69414,
      14716007053,
      0,
      1,
      13860423,
      46276,
      7726226
    ],
    [
      15404251,
      1661362553,
      493,
      131,
      0,
      77410,
      18639866540,
      0,
      1,
      10901560,
      51607,
      7726153
    ],
    [
      15404270,
      1661362913,
      305,
      322,
      0,
      39564,
      26167174240,
      0,
      1,
      23123950,
      26376,
      7726134
    ],
    [
      15404724,
      1661368989,
      494,
      275,
      0,
      51760,
      10440321048,
      0,
      1,
      28183017,
      34507,
      7725680
    ],
    [
      15404737,
      1661369192,
      495,
      253,
      0,
      77410,
      17925083551,
      0,
      1,
      21631113,
      51607,
      7725667
    ],
    [
      15405100,
      1661374335,
      203,
      81,
      0,
      46288,
      21463045443,
      0,
      1,
      7693323,
      46288,
      7725304
    ],
    [
      15405161,
      1661374966,
      205,
      71,
      0,
      46288,
      11602561976,
      0,
      1,
      6866760,
      46288,
      7725243
    ],
    [
      15405187,
      1661375345,
      206,
      110,
      0,
      26388,
      11540878279,
      0,
      1,
      15483380,
      26388,
      7725217
    ],
    [
      15405263,
      1661376190,
      2,
      98,
      0,
      55891,
      12832965595,
      0,
      1,
      10932451,
      46576,
      7725141
    ],
    [
      15405270,
      1661376254,
      496,
      238,
      0,
      77392,
      9060598052,
      0,
      1,
      22757055,
      51595,
      7725134
    ],
    [
      15405785,
      1661383705,
      497,
      110,
      0,
      77410,
      6511173674,
      0,
      1,
      12607843,
      51607,
      7724619
    ],
    [
      15406261,
      1661390532,
      498,
      338,
      0,
      55891,
      10385517437,
      0,
      1,
      27035752,
      46576,
      7724143
    ],
    [
      15407001,
      1661400993,
      500,
      143,
      0,
      69342,
      9403242764,
      0,
      1,
      16824852,
      46228,
      7723403
    ],
    [
      15407039,
      1661401647,
      503,
      100,
      0,
      29176,
      14163777980,
      0,
      1,
      11274845,
      29176,
      7723365
    ],
    [
      15408082,
      1661416247,
      181,
      197,
      0,
      46276,
      9366647067,
      0,
      1,
      17717594,
      46276,
      7722322
    ],
    [
      15408082,
      1661416247,
      182,
      234,
      0,
      46276,
      9366647067,
      0,
      1,
      21844106,
      26376,
      7722322
    ],
    [
      15408086,
      1661416335,
      183,
      5,
      0,
      46276,
      11378626770,
      0,
      1,
      1266174,
      26376,
      7722318
    ],
    [
      15408092,
      1661416401,
      184,
      60,
      0,
      46276,
      10606589748,
      0,
      1,
      5636605,
      26376,
      7722312
    ],
    [
      15408102,
      1661416554,
      185,
      144,
      0,
      46276,
      10888464463,
      0,
      1,
      7708592,
      26376,
      7722302
    ],
    [
      15410344,
      1661447688,
      309,
      51,
      0,
      55891,
      48245148282,
      0,
      1,
      3773629,
      46576,
      7720060
    ],
    [
      15416360,
      1661530282,
      12,
      40,
      0,
      46276,
      13147457845,
      0,
      1,
      3615483,
      46276,
      7714044
    ],
    [
      15418722,
      1661563488,
      45,
      222,
      0,
      55891,
      7635083494,
      0,
      1,
      18834165,
      46576,
      7711682
    ],
    [
      15426459,
      1661671193,
      2,
      162,
      0,
      55891,
      5147889129,
      0,
      1,
      19782716,
      46576,
      7703945
    ],
    [
      15429756,
      1661716434,
      115,
      109,
      0,
      55891,
      20765120147,
      0,
      1,
      10207190,
      46576,
      7700648
    ],
    [
      15432608,
      1661755421,
      188,
      107,
      0,
      55891,
      3638298146,
      0,
      1,
      18607950,
      46576,
      7697796
    ],
    [
      15437013,
      1661815798,
      0,
      197,
      0,
      46288,
      7642184564,
      0,
      1,
      13382144,
      46288,
      7693391
    ],
    [
      15437883,
      1661828102,
      1,
      152,
      0,
      26388,
      14800759667,
      0,
      1,
      12057439,
      26388,
      7692521
    ],
    [
      15437931,
      1661828994,
      505,
      226,
      0,
      46264,
      17526720110,
      0,
      1,
      16582705,
      46264,
      7692473
    ],
    [
      15443620,
      1661907689,
      507,
      162,
      0,
      46276,
      13429748397,
      0,
      1,
      19768434,
      46276,
      7686784
    ],
    [
      15444895,
      1661925315,
      2,
      77,
      0,
      46288,
      15987632683,
      0,
      1,
      6824258,
      46288,
      7685509
    ],
    [
      15466626,
      1662225368,
      18,
      282,
      0,
      51832,
      8410372083,
      0,
      1,
      19998211,
      29755,
      7663778
    ],
    [
      15471778,
      1662296312,
      25,
      179,
      0,
      55891,
      12532397564,
      0,
      1,
      11547980,
      46576,
      7658626
    ],
    [
      15475725,
      1662351550,
      5,
      156,
      0,
      77446,
      5790100370,
      0,
      1,
      14603282,
      46831,
      7654679
    ],
    [
      15475816,
      1662353114,
      512,
      271,
      0,
      51796,
      10424213650,
      0,
      1,
      26856498,
      29731,
      7654588
    ],
    [
      15480019,
      1662411315,
      20,
      190,
      0,
      46288,
      10827569077,
      0,
      1,
      12338812,
      46288,
      7650385
    ],
    [
      15480026,
      1662411465,
      21,
      150,
      0,
      55891,
      12468144283,
      0,
      1,
      12960540,
      46576,
      7650378
    ],
    [
      15480043,
      1662411858,
      22,
      268,
      0,
      26388,
      22563508538,
      0,
      1,
      26179872,
      26388,
      7650361
    ],
    [
      15480043,
      1662411858,
      23,
      281,
      0,
      26388,
      22563508538,
      0,
      1,
      27390424,
      26388,
      7650361
    ],
    [
      15481542,
      1662432842,
      516,
      242,
      0,
      51778,
      12987944873,
      0,
      1,
      19958608,
      34519,
      7648862
    ],
    [
      15482959,
      1662452500,
      1338,
      163,
      0,
      46288,
      13469956345,
      0,
      1,
      12711571,
      46288,
      7647445
    ],
    [
      15483090,
      1662454122,
      1340,
      187,
      0,
      29092,
      13866472638,
      0,
      1,
      14899075,
      24292,
      7647314
    ],
    [
      15488285,
      1662524889,
      1,
      129,
      0,
      77428,
      15333174174,
      0,
      1,
      13792911,
      46819,
      7642119
    ],
    [
      15488291,
      1662524972,
      4,
      150,
      0,
      51760,
      13373863814,
      0,
      1,
      12035239,
      29707,
      7642113
    ],
    [
      15488329,
      1662525426,
      62,
      322,
      0,
      77428,
      12040757956,
      0,
      1,
      23658475,
      46819,
      7642075
    ],
    [
      15488364,
      1662525879,
      3,
      115,
      0,
      55891,
      10895140425,
      0,
      1,
      10952010,
      46576,
      7642040
    ],
    [
      15495585,
      1662626792,
      80,
      303,
      0,
      55891,
      15625310493,
      0,
      1,
      18892581,
      46576,
      7634819
    ],
    [
      15495764,
      1662628877,
      222,
      126,
      0,
      46288,
      9028165757,
      0,
      1,
      10212824,
      46288,
      7634640
    ],
    [
      15495797,
      1662629308,
      223,
      180,
      0,
      26388,
      9120302900,
      0,
      1,
      15067090,
      26388,
      7634607
    ],
    [
      15506261,
      1662776640,
      1,
      24,
      0,
      46288,
      9538965891,
      0,
      1,
      4896784,
      46288,
      7624143
    ],
    [
      15506307,
      1662777331,
      4,
      45,
      0,
      26388,
      8962208486,
      0,
      1,
      8777623,
      26388,
      7624097
    ],
    [
      15506338,
      1662777843,
      1,
      100,
      0,
      46288,
      11915402599,
      0,
      1,
      10901830,
      46288,
      7624066
    ],
    [
      15506594,
      1662781378,
      190,
      205,
      0,
      46288,
      9574356479,
      0,
      1,
      17986139,
      46288,
      7623810
    ],
    [
      15515264,
      1662905521,
      3,
      30,
      0,
      46288,
      11991336168,
      0,
      1,
      2429824,
      46288,
      7615140
    ],
    [
      15524797,
      1663041469,
      1,
      13,
      0,
      46288,
      9541885922,
      0,
      1,
      947177,
      46288,
      7605607
    ],
    [
      15528493,
      1663094293,
      1,
      101,
      0,
      55891,
      18138517086,
      0,
      1,
      11344715,
      46576,
      7601911
    ],
    [
      15531386,
      1663136053,
      50,
      95,
      0,
      46288,
      9293148007,
      0,
      1,
      6682186,
      46288,
      7599018
    ],
    [
      15531413,
      1663136359,
      112,
      76,
      0,
      77410,
      6486841580,
      0,
      1,
      7964111,
      46807,
      7598991
    ],
    [
      15531423,
      1663136413,
      113,
      206,
      0,
      46288,
      5546725997,
      0,
      1,
      26504814,
      46288,
      7598981
    ],
    [
      15531513,
      1663137776,
      53,
      341,
      0,
      29188,
      6971091545,
      0,
      1,
      27708615,
      29188,
      7598891
    ],
    [
      15531515,
      1663137892,
      85,
      61,
      0,
      46288,
      8423568791,
      0,
      1,
      10517509,
      46288,
      7598889
    ],
    [
      15587220,
      1663829639,
      2473,
      71,
      0,
      55891,
      5782566844,
      0,
      1,
      8189940,
      46576,
      7543184
    ],
    [
      15615074,
      1664165459,
      4,
      47,
      0,
      46288,
      6367795394,
      0,
      1,
      4463680,
      46288,
      7515330
    ],
    [
      15615194,
      1664166899,
      0,
      172,
      0,
      46288,
      3759627566,
      0,
      1,
      19531001,
      46288,
      7515210
    ],
    [
      15637368,
      1664434787,
      85,
      76,
      0,
      46288,
      9995682432,
      0,
      1,
      7490816,
      46288,
      7493036
    ],
    [
      15643582,
      1664509895,
      11,
      248,
      0,
      46288,
      15053705673,
      0,
      1,
      21907453,
      46288,
      7486822
    ],
    [
      15666709,
      1664789039,
      107,
      146,
      0,
      29188,
      9511775459,
      0,
      1,
      10341639,
      29188,
      7463695
    ],
    [
      15693564,
      1665113627,
      366,
      64,
      0,
      46288,
      10634738214,
      0,
      1,
      3113048,
      46288,
      7436840
    ],
    [
      15703280,
      1665230987,
      29,
      123,
      0,
      43638,
      9445032431,
      0,
      1,
      11242528,
      24292,
      7427124
    ],
    [
      15711291,
      1665327611,
      3,
      252,
      0,
      51760,
      25392411936,
      0,
      1,
      24463182,
      29707,
      7419113
    ],
    [
      15711770,
      1665333383,
      12,
      141,
      0,
      51778,
      20271734971,
      0,
      1,
      12483034,
      29719,
      7418634
    ],
    [
      15711861,
      1665334487,
      2,
      249,
      0,
      55891,
      18257860216,
      0,
      1,
      17576792,
      46576,
      7418543
    ],
    [
      15714942,
      1665371603,
      0,
      19,
      0,
      77428,
      43846275943,
      0,
      1,
      1848208,
      46819,
      7415462
    ],
    [
      15791322,
      1666293167,
      8,
      180,
      0,
      77392,
      28027767473,
      0,
      1,
      15543183,
      46795,
      7339082
    ],
    [
      15908258,
      1667704907,
      75,
      93,
      0,
      51814,
      10202045622,
      0,
      1,
      9003402,
      29743,
      7222146
    ],
    [
      15908371,
      1667706275,
      159,
      94,
      0,
      51832,
      9864257103,
      0,
      1,
      9772931,
      29755,
      7222033
    ],
    [
      15994379,
      1668744131,
      2,
      144,
      0,
      69414,
      14448435109,
      0,
      1,
      14262306,
      46276,
      7136025
    ],
    [
      15994393,
      1668744299,
      3,
      76,
      0,
      43764,
      15285113407,
      0,
      1,
      4738248,
      29176,
      7136011
    ],
    [
      15994409,
      1668744491,
      4,
      80,
      0,
      43944,
      13286313017,
      0,
      1,
      6539383,
      29296,
      7135995
    ],
    [
      16000674,
      1668820043,
      2,
      103,
      0,
      69414,
      15860409540,
      0,
      1,
      8383182,
      46276,
      7129730
    ],
    [
      16007912,
      1668907319,
      4,
      90,
      0,
      46276,
      12357860693,
      0,
      1,
      9331485,
      46276,
      7122492
    ],
    [
      16007932,
      1668907559,
      5,
      89,
      0,
      29188,
      11640731316,
      0,
      1,
      7139052,
      29188,
      7122472
    ],
    [
      16008026,
      1668908687,
      1,
      80,
      0,
      46288,
      11151426761,
      0,
      1,
      13554476,
      46288,
      7122378
    ],
    [
      16031700,
      1669194491,
      247,
      115,
      0,
      46288,
      12595152173,
      0,
      1,
      9168618,
      46288,
      7098704
    ],
    [
      16031716,
      1669194683,
      249,
      41,
      0,
      46276,
      12903932395,
      0,
      1,
      5748222,
      46276,
      7098688
    ],
    [
      16067251,
      1669623647,
      18,
      45,
      0,
      55891,
      11473356498,
      0,
      1,
      2566470,
      46576,
      7063153
    ],
    [
      16073259,
      1669696079,
      9,
      60,
      0,
      46276,
      10678255428,
      0,
      1,
      6071765,
      46276,
      7057145
    ],
    [
      16073270,
      1669696211,
      2,
      97,
      0,
      46276,
      10751883602,
      0,
      1,
      9040390,
      46276,
      7057134
    ],
    [
      16077093,
      1669742363,
      275,
      19,
      0,
      51234,
      12653825104,
      0,
      1,
      2557510,
      46576,
      7053311
    ],
    [
      16094975,
      1669958231,
      0,
      119,
      0,
      46276,
      10924410414,
      0,
      1,
      10109193,
      46276,
      7035429
    ],
    [
      16135213,
      1670444891,
      1,
      82,
      0,
      46288,
      15779621752,
      0,
      1,
      6523279,
      46288,
      6995191
    ],
    [
      16150208,
      1670625875,
      1,
      63,
      0,
      46288,
      14001824367,
      0,
      1,
      4444570,
      46288,
      6980196
    ],
    [
      16165469,
      1670809979,
      0,
      2,
      0,
      46288,
      13156202473,
      0,
      1,
      270911,
      46288,
      6964935
    ],
    [
      16165497,
      1670810327,
      4,
      79,
      0,
      46288,
      13014490862,
      0,
      1,
      7402209,
      46288,
      6964907
    ],
    [
      16165511,
      1670810507,
      7,
      33,
      0,
      55891,
      14019708246,
      0,
      1,
      2896720,
      46576,
      6964893
    ],
    [
      16165633,
      1670811971,
      8,
      71,
      0,
      51778,
      12841909610,
      0,
      1,
      5230593,
      34519,
      6964771
    ],
    [
      16167580,
      1670835419,
      799,
      33,
      0,
      46288,
      14702084696,
      0,
      1,
      2833672,
      46288,
      6962824
    ],
    [
      16181310,
      1671001259,
      13,
      78,
      0,
      55891,
      13980305799,
      0,
      1,
      6061007,
      46576,
      6949094
    ],
    [
      16210211,
      1671350087,
      58,
      33,
      0,
      77482,
      14840605422,
      0,
      1,
      1724120,
      46855,
      6920193
    ],
    [
      16210227,
      1671350279,
      47,
      49,
      0,
      55891,
      14383171750,
      0,
      1,
      4537710,
      46576,
      6920177
    ],
    [
      16212439,
      1671376895,
      198,
      55,
      0,
      77428,
      14627496082,
      0,
      1,
      5694948,
      46819,
      6917965
    ],
    [
      16215661,
      1671415787,
      249,
      107,
      0,
      46288,
      12368607686,
      0,
      1,
      9391214,
      46288,
      6914743
    ],
    [
      16216575,
      1671426791,
      251,
      83,
      0,
      46300,
      11574565314,
      0,
      1,
      6938833,
      46300,
      6913829
    ],
    [
      16221596,
      1671487331,
      184,
      178,
      0,
      46276,
      15609534825,
      0,
      1,
      12224845,
      46276,
      6908808
    ],
    [
      16221607,
      1671487463,
      259,
      229,
      0,
      29188,
      14176242049,
      0,
      1,
      27462524,
      29188,
      6908797
    ],
    [
      16221610,
      1671487499,
      260,
      180,
      0,
      26388,
      17994058674,
      0,
      1,
      16322119,
      26388,
      6908794
    ],
    [
      16221619,
      1671487607,
      261,
      79,
      0,
      29176,
      36998797521,
      0,
      1,
      7119760,
      29176,
      6908785
    ],
    [
      16261342,
      1671966263,
      1521,
      82,
      0,
      46288,
      11963345595,
      0,
      1,
      8366603,
      46288,
      6869062
    ],
    [
      16261407,
      1671967067,
      1523,
      72,
      0,
      46276,
      12605479910,
      0,
      1,
      6766162,
      46276,
      6868997
    ],
    [
      16303040,
      1672469135,
      1357,
      63,
      0,
      55891,
      17859671712,
      0,
      1,
      5152987,
      46576,
      6827364
    ],
    [
      16390240,
      1673520683,
      1626,
      82,
      0,
      29188,
      15654007732,
      0,
      1,
      5090309,
      29188,
      6740164
    ],
    [
      16397740,
      1673611319,
      299,
      175,
      0,
      77482,
      18973863136,
      0,
      1,
      22754262,
      46855,
      6732664
    ],
    [
      16540533,
      1675333847,
      1666,
      128,
      0,
      29092,
      22316351291,
      0,
      1,
      12032909,
      24292,
      6589871
    ],
    [
      16694593,
      1677197771,
      7,
      91,
      0,
      77482,
      29965172806,
      0,
      1,
      5912570,
      46855,
      6435811
    ],
    [
      16694638,
      1677198311,
      3,
      175,
      0,
      51814,
      25993208887,
      0,
      1,
      22031647,
      29743,
      6435766
    ],
    [
      16765216,
      1678055951,
      419,
      117,
      0,
      29092,
      23441561894,
      0,
      1,
      10633360,
      24292,
      6365188
    ],
    [
      16799448,
      1678472219,
      42,
      113,
      0,
      29092,
      38138099301,
      0,
      1,
      24967269,
      24292,
      6330956
    ],
    [
      16943323,
      1680218903,
      306,
      71,
      0,
      46516,
      31575706957,
      0,
      1,
      14889171,
      46264,
      6187081
    ],
    [
      16951172,
      1680314123,
      934,
      101,
      0,
      46300,
      23083808160,
      0,
      1,
      8191630,
      46300,
      6179232
    ],
    [
      16957824,
      1680394907,
      529,
      96,
      0,
      46324,
      17560101996,
      0,
      1,
      10355855,
      46324,
      6172580
    ],
    [
      16958190,
      1680399335,
      146,
      75,
      0,
      77410,
      16396146653,
      0,
      1,
      5839265,
      46807,
      6172214
    ],
    [
      16958212,
      1680399599,
      144,
      112,
      0,
      46276,
      15734968141,
      0,
      1,
      9574820,
      46276,
      6172192
    ],
    [
      16963638,
      1680465743,
      395,
      140,
      0,
      46324,
      20633882327,
      0,
      1,
      11865391,
      46324,
      6166766
    ],
    [
      16965006,
      1680482327,
      572,
      86,
      0,
      46288,
      16032521261,
      0,
      1,
      9061775,
      46276,
      6165398
    ],
    [
      16965053,
      1680482891,
      578,
      79,
      0,
      46288,
      17645165409,
      1,
      0,
      5420566,
      46288,
      6165351
    ],
    [
      16965066,
      1680483047,
      579,
      64,
      0,
      46288,
      16785920678,
      1,
      0,
      28361165,
      46288,
      6165338
    ],
    [
      16965072,
      1680483119,
      580,
      44,
      0,
      96288,
      19039594642,
      0,
      1,
      4992397,
      46300,
      6165332
    ],
    [
      16967614,
      1680514103,
      5,
      64,
      0,
      46516,
      20499893626,
      0,
      1,
      9386243,
      46228,
      6162790
    ],
    [
      16990669,
      1680797639,
      14,
      102,
      0,
      46288,
      30510787062,
      0,
      1,
      9207987,
      46288,
      6139735
    ],
    [
      16991098,
      1680802979,
      18,
      130,
      0,
      46288,
      29372752664,
      0,
      1,
      10613580,
      46288,
      6139306
    ],
    [
      16991103,
      1680803039,
      20,
      55,
      0,
      46288,
      33544041982,
      0,
      1,
      4544387,
      46288,
      6139301
    ],
    [
      17006948,
      1680996899,
      665,
      79,
      0,
      53562,
      17907373971,
      0,
      1,
      10091223,
      46576,
      6123456
    ],
    [
      17008571,
      1681016711,
      24,
      113,
      0,
      46288,
      18733792814,
      0,
      1,
      7911640,
      46288,
      6121833
    ],
    [
      17009130,
      1681023503,
      100,
      65,
      0,
      46324,
      19027763311,
      0,
      1,
      4158690,
      46324,
      6121274
    ],
    [
      17015459,
      1681101155,
      36,
      51,
      0,
      46324,
      18000000000,
      0,
      1,
      25645941,
      46324,
      6114945
    ],
    [
      17020706,
      1681165403,
      1832,
      76,
      0,
      46276,
      20339248480,
      0,
      1,
      6289009,
      46276,
      6109698
    ],
    [
      17031569,
      1681298111,
      1836,
      160,
      0,
      46276,
      19133843057,
      0,
      1,
      12827701,
      46276,
      6098835
    ],
    [
      17251895,
      1683991163,
      399,
      16,
      0,
      46264,
      38691838626,
      0,
      1,
      1732783,
      46264,
      5878509
    ],
    [
      17485412,
      1686833711,
      23,
      165,
      0,
      46276,
      19947235759,
      0,
      1,
      12050673,
      46276,
      5644992
    ],
    [
      17739872,
      1689922607,
      744,
      122,
      0,
      46276,
      20564836708,
      0,
      1,
      14901093,
      46276,
      5390532
    ],
    [
      17739878,
      1689922679,
      745,
      81,
      0,
      46288,
      22288619212,
      0,
      1,
      14697744,
      46288,
      5390526
    ],
    [
      17942275,
      1692368975,
      823,
      107,
      0,
      43638,
      35702079080,
      0,
      1,
      13406013,
      24292,
      5188129
    ],
    [
      18924736,
      1704259523,
      3,
      33,
      0,
      46324,
      10676305075,
      0,
      1,
      5462052,
      46324,
      4205668
    ],
    [
      22494757,
      1747387835,
      545,
      91,
      0,
      43915,
      3296033454,
      0,
      1,
      9876691,
      24292,
      635647
    ],
    [
      22713793,
      1750037123,
      2714,
      88,
      0,
      12599987,
      321676715,
      1,
      0,
      4730162,
      24324,
      416611
    ],
    [
      23026149,
      1753808519,
      548,
      91,
      0,
      43915,
      5392360704,
      0,
      1,
      10256239,
      24292,
      104255
    ],
    [
      14233556,
      1645234097,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "// SPDX-License-Identifier: Unlicensed\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n// File: @openzeppelin/contracts/utils/Context.sol\n\n\n\npragma solidity ^0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/ERC20.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin guidelines: functions revert instead\n * of returning `false` on failure. This behavior is nonetheless conventional\n * and does not conflict with the expectations of ERC20 applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The defaut value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor (string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n\n        return true;\n    }\n\n    /**\n     * @dev Moves tokens `amount` from `sender` to `recipient`.\n     *\n     * This is internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[sender] = senderBalance - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        _balances[account] = accountBalance - amount;\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be to transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual { }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        _approve(account, _msgSender(), currentAllowance - amount);\n        _burn(account, amount);\n    }\n}\n\n// File: @openzeppelin/contracts/utils/Address.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/utils/introspection/IERC165.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n\n// File: @openzeppelin/contracts/utils/introspection/ERC165.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @title IERC1363 Interface\n * @dev Interface for a Payable Token contract as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363 is IERC20, IERC165 {\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferAndCall(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from `msg.sender` to another address and then call `onTransferReceived` on receiver\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\n     * @return true unless throwing\n     */\n    function transferAndCall(\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param sender address The address which you want to send tokens from\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @notice Transfer tokens from one address to another and then call `onTransferReceived` on receiver\n     * @param sender address The address which you want to send tokens from\n     * @param recipient address The address which you want to transfer to\n     * @param amount uint256 The amount of tokens to be transferred\n     * @param data bytes Additional data with no specified format, sent in call to `recipient`\n     * @return true unless throwing\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     */\n    function approveAndCall(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @notice Approve the passed address to spend the specified amount of tokens on behalf of msg.sender\n     * and then call `onApprovalReceived` on spender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format, sent in call to `spender`\n     */\n    function approveAndCall(\n        address spender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bool);\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Receiver.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC1363Receiver Interface\n * @dev Interface for any contract that wants to support transferAndCall or transferFromAndCall\n *  from ERC1363 token contracts as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363Receiver {\n    /**\n     * @notice Handle the receipt of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after a `transfer` or a `transferFrom`. This function MAY throw to revert and reject the\n     * transfer. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param operator address The address which called `transferAndCall` or `transferFromAndCall` function\n     * @param sender address The address which are token transferred from\n     * @param amount uint256 The amount of tokens transferred\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onTransferReceived(address,address,uint256,bytes)\"))` unless throwing\n     */\n    function onTransferReceived(\n        address operator,\n        address sender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/IERC1363Spender.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @title IERC1363Spender Interface\n * @dev Interface for any contract that wants to support approveAndCall\n *  from ERC1363 token contracts as defined in\n *  https://eips.ethereum.org/EIPS/eip-1363\n */\ninterface IERC1363Spender {\n    /**\n     * @notice Handle the approval of ERC1363 tokens\n     * @dev Any ERC1363 smart contract calls this function on the recipient\n     * after an `approve`. This function MAY throw to revert and reject the\n     * approval. Return of other than the magic value MUST result in the\n     * transaction being reverted.\n     * Note: the token contract address is always the message sender.\n     * @param sender address The address which called `approveAndCall` function\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Additional data with no specified format\n     * @return `bytes4(keccak256(\"onApprovalReceived(address,uint256,bytes)\"))` unless throwing\n     */\n    function onApprovalReceived(\n        address sender,\n        uint256 amount,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n\n// File: erc-payable-token/contracts/token/ERC1363/ERC1363.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n\n\n\n\n/**\n * @title ERC1363\n * @dev Implementation of an ERC1363 interface\n */\nabstract contract ERC1363 is ERC20, IERC1363, ERC165 {\n    using Address for address;\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return interfaceId == type(IERC1363).interfaceId || super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\n     * @param recipient The address to transfer to.\n     * @param amount The amount to be transferred.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferAndCall(address recipient, uint256 amount) public virtual override returns (bool) {\n        return transferAndCall(recipient, amount, \"\");\n    }\n\n    /**\n     * @dev Transfer tokens to a specified address and then execute a callback on recipient.\n     * @param recipient The address to transfer to\n     * @param amount The amount to be transferred\n     * @param data Additional data with no specified format\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferAndCall(\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        transfer(recipient, amount);\n        require(_checkAndCallTransfer(_msgSender(), recipient, amount, data), \"ERC1363: _checkAndCallTransfer reverts\");\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\n     * @param sender The address which you want to send tokens from\n     * @param recipient The address which you want to transfer to\n     * @param amount The amount of tokens to be transferred\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        return transferFromAndCall(sender, recipient, amount, \"\");\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another and then execute a callback on recipient.\n     * @param sender The address which you want to send tokens from\n     * @param recipient The address which you want to transfer to\n     * @param amount The amount of tokens to be transferred\n     * @param data Additional data with no specified format\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function transferFromAndCall(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        transferFrom(sender, recipient, amount);\n        require(_checkAndCallTransfer(sender, recipient, amount, data), \"ERC1363: _checkAndCallTransfer reverts\");\n        return true;\n    }\n\n    /**\n     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\n     * @param spender The address allowed to transfer to\n     * @param amount The amount allowed to be transferred\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function approveAndCall(address spender, uint256 amount) public virtual override returns (bool) {\n        return approveAndCall(spender, amount, \"\");\n    }\n\n    /**\n     * @dev Approve spender to transfer tokens and then execute a callback on recipient.\n     * @param spender The address allowed to transfer to.\n     * @param amount The amount allowed to be transferred.\n     * @param data Additional data with no specified format.\n     * @return A boolean that indicates if the operation was successful.\n     */\n    function approveAndCall(\n        address spender,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override returns (bool) {\n        approve(spender, amount);\n        require(_checkAndCallApprove(spender, amount, data), \"ERC1363: _checkAndCallApprove reverts\");\n        return true;\n    }\n\n    /**\n     * @dev Internal function to invoke `onTransferReceived` on a target address\n     *  The call is not executed if the target address is not a contract\n     * @param sender address Representing the previous owner of the given token value\n     * @param recipient address Target address that will receive the tokens\n     * @param amount uint256 The amount mount of tokens to be transferred\n     * @param data bytes Optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkAndCallTransfer(\n        address sender,\n        address recipient,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual returns (bool) {\n        if (!recipient.isContract()) {\n            return false;\n        }\n        bytes4 retval = IERC1363Receiver(recipient).onTransferReceived(_msgSender(), sender, amount, data);\n        return (retval == IERC1363Receiver(recipient).onTransferReceived.selector);\n    }\n\n    /**\n     * @dev Internal function to invoke `onApprovalReceived` on a target address\n     *  The call is not executed if the target address is not a contract\n     * @param spender address The address which will spend the funds\n     * @param amount uint256 The amount of tokens to be spent\n     * @param data bytes Optional data to send along with the call\n     * @return whether the call correctly returned the expected magic value\n     */\n    function _checkAndCallApprove(\n        address spender,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual returns (bool) {\n        if (!spender.isContract()) {\n            return false;\n        }\n        bytes4 retval = IERC1363Spender(spender).onApprovalReceived(_msgSender(), amount, data);\n        return (retval == IERC1363Spender(spender).onApprovalReceived.selector);\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address public _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: eth-token-recover/contracts/TokenRecover.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n\n/**\n * @title TokenRecover\n * @dev Allows owner to recover any ERC20 sent into the contract\n */\ncontract TokenRecover is Ownable {\n    /**\n     * @dev Remember that only owner can call so be careful when use on contracts generated from other contracts.\n     * @param tokenAddress The token contract address\n     * @param tokenAmount Number of tokens to be sent\n     */\n    function recoverERC20(address tokenAddress, uint256 tokenAmount) public virtual onlyOwner {\n        IERC20(tokenAddress).transfer(owner(), tokenAmount);\n    }\n}\n\n// File: contracts/token/ERC20/behaviours/ERC20Decimals.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title ERC20Decimals\n * @dev Implementation of the ERC20Decimals. Extension of {ERC20} that adds decimals storage slot.\n */\nabstract contract ERC20Decimals is ERC20 {\n    uint8 private immutable _decimals;\n\n    /**\n     * @dev Sets the value of the `decimals`. This value is immutable, it can only be\n     * set once during construction.\n     */\n    constructor(uint8 decimals_) {\n        _decimals = decimals_;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n}\n\n// File: contracts/token/ERC20/behaviours/ERC20Mintable.sol\n\n\n\npragma solidity ^0.8.0;\n\n\n/**\n * @title ERC20Mintable\n * @dev Implementation of the ERC20Mintable. Extension of {ERC20} that adds a minting behaviour.\n */\nabstract contract ERC20Mintable is ERC20 {\n    // indicates if minting is finished\n    bool private _mintingFinished = false;\n\n    /**\n     * @dev Emitted during finish minting\n     */\n    event MintFinished();\n\n    /**\n     * @dev Tokens can be minted only before minting finished.\n     */\n    modifier canMint() {\n        require(!_mintingFinished, \"ERC20Mintable: minting is finished\");\n        _;\n    }\n\n    /**\n     * @return if minting is finished or not.\n     */\n    function mintingFinished() external view returns (bool) {\n        return _mintingFinished;\n    }\n\n    /**\n     * @dev Function to mint tokens.\n     *\n     * WARNING: it allows everyone to mint new tokens. Access controls MUST be defined in derived contracts.\n     *\n     * @param account The address that will receive the minted tokens\n     * @param amount The amount of tokens to mint\n     */\n    function mint(address account, uint256 amount) external canMint {\n        _mint(account, amount);\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     *\n     * WARNING: it allows everyone to finish minting. Access controls MUST be defined in derived contracts.\n     */\n    function finishMinting() external canMint {\n        _finishMinting();\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     */\n    function _finishMinting() internal virtual {\n        _mintingFinished = true;\n\n        emit MintFinished();\n    }\n}\n\n\n\n\n\npragma solidity ^0.8.0;\n\n\n\n\n\ncontract CoinToken is ERC20Decimals, ERC20Mintable, ERC20Burnable, ERC1363, TokenRecover {\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_,\n        uint256 initialBalance_,\n        address tokenOwner,\n        address payable feeReceiver_\n    ) payable ERC20(name_, symbol_) ERC20Decimals(decimals_)  {\n        payable(feeReceiver_).transfer(msg.value);\n        _owner  = tokenOwner;\n        _mint(tokenOwner, initialBalance_*10**uint256(decimals_));\n        \n    }\n\n    function decimals() public view virtual override(ERC20, ERC20Decimals) returns (uint8) {\n        return super.decimals();\n    }\n\n    /**\n     * @dev Function to mint tokens.\n     *\n     * NOTE: restricting access to addresses with MINTER role. See {ERC20Mintable-mint}.\n     *\n     * @param account The address that will receive the minted tokens\n     * @param amount The amount of tokens to mint\n     */\n    function _mint(address account, uint256 amount) internal override onlyOwner {\n        super._mint(account, amount);\n    }\n\n    /**\n     * @dev Function to stop minting new tokens.\n     *\n     * NOTE: restricting access to owner only. See {ERC20Mintable-finishMinting}.\n     */\n    function _finishMinting() internal override onlyOwner {\n        super._finishMinting();\n    }\n}"
}