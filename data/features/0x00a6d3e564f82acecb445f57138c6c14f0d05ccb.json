{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP UNKNOWN_0xfe LOG1 PUSH6 SHA3 MSTORE UNKNOWN_0x4a DUP14 UNKNOWN_0x27 DUP14 PUSH3 PUSH5 UNKNOWN_0xc6 UNKNOWN_0xdf UNKNOWN_0x1e UNKNOWN_0xea UNKNOWN_0xbc UNKNOWN_0xd4 SWAP15 DELEGATECALL UNKNOWN_0xfe LOG3 UNKNOWN_0xb7 STOP SWAP3 DUP3 UNKNOWN_0x4a CHAINID UNKNOWN_0xa9 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.692217489362443,
  "opcode_count": 1443,
  "unique_opcodes": 65,
  "byte_entropy": 4.800082359129988,
  "byte_0x": 0.00037439161362785476,
  "byte_60": 0.08011980531636091,
  "byte_80": 0.040059902658180456,
  "byte_40": 0.013103706476974916,
  "byte_52": 0.023212280044926994,
  "byte_34": 0.00037439161362785476,
  "byte_15": 0.011606140022463497,
  "byte_61": 0.023212280044926994,
  "byte_00": 0.029576937476600524,
  "byte_10": 0.004492699363534257,
  "byte_57": 0.011231748408835642,
  "byte_fd": 0.0041183077499064025,
  "byte_5b": 0.019842755522276302,
  "byte_50": 0.037813552976413325,
  "byte_04": 0.008236615499812805,
  "byte_36": 0.0022463496817671283,
  "byte_93": 0.0011231748408835642,
  "byte_35": 0.004492699363534257,
  "byte_e0": 0.0007487832272557095,
  "byte_1c": 0.00037439161362785476,
  "byte_63": 0.004492699363534257,
  "byte_31": 0.001497566454511419,
  "byte_3c": 0.0007487832272557095,
  "byte_e5": 0.001497566454511419,
  "byte_67": 0.0011231748408835642,
  "byte_11": 0.0018719580681392737,
  "byte_66": 0.00037439161362785476,
  "byte_14": 0.0037439161362785474,
  "byte_02": 0.008985398727068513,
  "byte_25": 0.0007487832272557095,
  "byte_70": 0.0007487832272557095,
  "byte_a0": 0.001497566454511419,
  "byte_82": 0.016098839385997755,
  "byte_49": 0.00037439161362785476,
  "byte_95": 0.0011231748408835642,
  "byte_d8": 0.00037439161362785476,
  "byte_9b": 0.0011231748408835642,
  "byte_41": 0.00037439161362785476,
  "byte_a1": 0.001497566454511419,
  "byte_a9": 0.0011231748408835642,
  "byte_05": 0.002995132909022838,
  "byte_9c": 0.00037439161362785476,
  "byte_bb": 0.00037439161362785476,
  "byte_03": 0.01647323099962561,
  "byte_24": 0.00037439161362785476,
  "byte_dd": 0.0022463496817671283,
  "byte_62": 0.0011231748408835642,
  "byte_ed": 0.00037439161362785476,
  "byte_3e": 0.00037439161362785476,
  "byte_8a": 0.00037439161362785476,
  "byte_56": 0.008985398727068513,
  "byte_06": 0.0007487832272557095,
  "byte_de": 0.00037439161362785476,
  "byte_98": 0.001497566454511419,
  "byte_09": 0.0007487832272557095,
  "byte_5e": 0.00037439161362785476,
  "byte_a7": 0.0011231748408835642,
  "byte_b3": 0.0011231748408835642,
  "byte_01": 0.04417821040808686,
  "byte_1b": 0.0011231748408835642,
  "byte_18": 0.00037439161362785476,
  "byte_16": 0.02208910520404343,
  "byte_0d": 0.0007487832272557095,
  "byte_81": 0.036690378135529764,
  "byte_23": 0.0011231748408835642,
  "byte_b8": 0.00037439161362785476,
  "byte_72": 0.0007487832272557095,
  "byte_9f": 0.00037439161362785476,
  "byte_51": 0.01272931486334706,
  "byte_20": 0.03406963684013478,
  "byte_83": 0.005990265818045676,
  "byte_91": 0.019842755522276302,
  "byte_90": 0.038187944590041184,
  "byte_84": 0.002620741295394983,
  "byte_c5": 0.00037439161362785476,
  "byte_1f": 0.002995132909022838,
  "byte_0a": 0.0018719580681392737,
  "byte_19": 0.0007487832272557095,
  "byte_92": 0.008985398727068513,
  "byte_f3": 0.0037439161362785474,
  "byte_73": 0.013852489704230626,
  "byte_ff": 0.2781729689254961,
  "byte_89": 0.00037439161362785476,
  "byte_0b": 0.00037439161362785476,
  "byte_b5": 0.00037439161362785476,
  "byte_2d": 0.00037439161362785476,
  "byte_08": 0.002995132909022838,
  "byte_8b": 0.00037439161362785476,
  "byte_5f": 0.00037439161362785476,
  "byte_13": 0.00037439161362785476,
  "byte_2b": 0.0011231748408835642,
  "byte_e9": 0.00037439161362785476,
  "byte_ce": 0.00037439161362785476,
  "byte_3a": 0.00037439161362785476,
  "byte_c9": 0.00037439161362785476,
  "byte_ec": 0.0007487832272557095,
  "byte_1d": 0.00037439161362785476,
  "byte_54": 0.007487832272557095,
  "byte_6d": 0.00037439161362785476,
  "byte_7b": 0.00037439161362785476,
  "byte_33": 0.002620741295394983,
  "byte_85": 0.0018719580681392737,
  "byte_55": 0.0022463496817671283,
  "byte_7f": 0.0011231748408835642,
  "byte_8c": 0.0007487832272557095,
  "byte_e1": 0.00037439161362785476,
  "byte_eb": 0.00037439161362785476,
  "byte_7d": 0.0007487832272557095,
  "byte_d1": 0.00037439161362785476,
  "byte_4f": 0.00037439161362785476,
  "byte_71": 0.00037439161362785476,
  "byte_42": 0.00037439161362785476,
  "byte_1e": 0.0011231748408835642,
  "byte_c0": 0.00037439161362785476,
  "byte_f7": 0.00037439161362785476,
  "byte_b2": 0.00037439161362785476,
  "byte_29": 0.0007487832272557095,
  "byte_c8": 0.0011231748408835642,
  "byte_c7": 0.00037439161362785476,
  "byte_c3": 0.00037439161362785476,
  "byte_b9": 0.00037439161362785476,
  "byte_a3": 0.001497566454511419,
  "byte_6e": 0.00037439161362785476,
  "byte_86": 0.0007487832272557095,
  "byte_f2": 0.0007487832272557095,
  "byte_ad": 0.0007487832272557095,
  "byte_e2": 0.0007487832272557095,
  "byte_69": 0.0007487832272557095,
  "byte_c2": 0.0007487832272557095,
  "byte_b0": 0.0007487832272557095,
  "byte_68": 0.0007487832272557095,
  "byte_fc": 0.0007487832272557095,
  "byte_37": 0.0007487832272557095,
  "byte_8d": 0.001497566454511419,
  "byte_aa": 0.0007487832272557095,
  "byte_f1": 0.0007487832272557095,
  "byte_c4": 0.0007487832272557095,
  "byte_28": 0.0007487832272557095,
  "byte_f5": 0.001497566454511419,
  "byte_5a": 0.0007487832272557095,
  "byte_4d": 0.0007487832272557095,
  "byte_ef": 0.0007487832272557095,
  "byte_c1": 0.0007487832272557095,
  "byte_96": 0.00037439161362785476,
  "byte_a4": 0.00037439161362785476,
  "byte_fe": 0.0007487832272557095,
  "byte_65": 0.00037439161362785476,
  "byte_7a": 0.0007487832272557095,
  "byte_30": 0.00037439161362785476,
  "byte_58": 0.00037439161362785476,
  "byte_4a": 0.0007487832272557095,
  "byte_27": 0.00037439161362785476,
  "byte_94": 0.00037439161362785476,
  "byte_64": 0.00037439161362785476,
  "byte_d2": 0.00037439161362785476,
  "byte_87": 0.00037439161362785476,
  "byte_c6": 0.00037439161362785476,
  "byte_df": 0.00037439161362785476,
  "byte_ea": 0.00037439161362785476,
  "byte_bc": 0.00037439161362785476,
  "byte_d4": 0.00037439161362785476,
  "byte_9e": 0.00037439161362785476,
  "byte_f4": 0.00037439161362785476,
  "byte_b7": 0.00037439161362785476,
  "byte_46": 0.00037439161362785476,
  "num_nodes": 81,
  "num_edges": 68,
  "avg_degree": 1.6790123456790123,
  "density": 0.010493827160493827,
  "connected_components": 21,
  "avg_clustering": 0.0,
  "timeline_sequence": [],
  "sourcecode": "pragma solidity 0.5.7;\n\n/* MechYield 2020\n\t\n\t\n\t\n\t\n\t/ ----------------------------------------------------------------------------\n// Safe Math Library \n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) public pure returns (uint c) {\n        require(b <= a); c = a - b; } function safeMul(uint a, uint b) public pure returns (uint c) { c = a * b; require(a == 0 || c / a == b); } function safeDiv(uint a, uint b) public pure returns (uint c) { require(b > 0);\n        c = a / b;\n    }\n\n    using SafeMath for uint256;\n    \n    address public owner;\n    Uniamp public Uniamp;\n    \n    uint256 public totalinStaking;\n    mapping (address => uint256) public staked;\n    \n\n    event Staked(address indexed user, uint256 amount, uint256 total);\n    event Unstaked(address indexed user, uint256 amount, uint256 total);\n    \n    \n    \n    \n    \n\n    );\n    \n    \n File: @openzeppelin/contracts/math/Math.sol\n\n\n    function deploy(bytes32 _struct) private {\n       bytes memory slotcode = type(StorageUnit).creationCode;\n     solium-disable-next-line \n      // assembly{ pop(create2(0, add(slotcode, 0x20), mload(slotcode), _struct)) }\n   \n\n    \n    \n     soliuma-next-line \n        (bool success, bytes memory data) = address(store).staticcall(\n        //abi.encodeWithSelector(\n\n          _key\"\"\"\n   \n   \n   \n    function Flex_Bridge(\n       bytes32 _struct,\n       bytes32 _key\n   \"\" ) internal view returns (bytes32) {\n        StorageUnit store = StorageUnit(contractSlot(_struct));\n        if (!IsContract.isContract(address(store))) {\n            return bytes32(0);\n\n        require(success, \"error reading storage\");\n       return abi.decode(data, (bytes32)); */   \n\n /*   function read(\n        bytes32 _struct,\n        bytes32 _key\n   \"\" ) internal view returns (bytes32) {\n        StorageUnit store = StorageUnit(contractSlot(_struct));\n        if (!IsContract.isContract(address(store))) {\n            return bytes32(0);\n            \n            \n\n   \n   \n   function Yield-connect(\n       bytes32 _struct,\n       bytes32 _key\n   \"\" ) internal view returns (bytes32) {\n        StorageUnit store = StorageUnit(contractSlot(_struct));\n        if (!IsContract.isContract(address(store))) {\n            return bytes32(0);\n            \n       \n\n /*   function read(\n        bytes32 _struct,\n        bytes32 _key\n   \"\" ) internal view returns (bytes32) {\n        StorageUnit store = StorageUnit(contractSlot(_struct));\n        if (!IsContract.isContract(address(store))) {\n            return bytes32(0);\n            \n            \n            \t   \n            \n        \n         solium-disable-next-line \n      (bool success, bytes memory data) = address(store).staticcall(\n        abi.encodeWithSelector(\n           store.read.selector,\n         _key\"\"\"\n   \n\n      require(success, \"error reading storage\");\n      return abi.decode(data, (bytes32));\n\n\n\n soliuma-next-line \n        (bool success, bytes memory data) = address(store).staticcall(\n        //abi.encodeWithSelector(\n            store.read.selector,\n          _key\"\"\"\n   \n\n        require(success, \"error reading storage\");\n       return abi.decode(data, (bytes32)); */\n     \n     \n /*   function read(\n        bytes32 _struct,\n        bytes32 _key\n   \"\" ) internal view returns (bytes32) {\n        StorageUnit store = StorageUnit(contractSlot(_struct));\n        if (!IsContract.isContract(address(store))) {\n            return bytes32(0);\n            \n            \n            */\n\ncontract MechYield {\n  \n    mapping (address => uint256) public balanceOf;\n\n    // \n    string public name = \"MechYield\";\n    string public symbol = \"MECH\";\n    uint8 public decimals = 18;\n    uint256 public totalSupply = 50000000 * (uint256(10) ** decimals);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor() public {\n        // \n        balanceOf[msg.sender] = totalSupply;\n        emit Transfer(address(0), msg.sender, totalSupply);\n    }\n\n\n\n\n\n /*   function read(\n        bytes32 _struct,\n        bytes32 _key\n   \"\" ) internal view returns (bytes32) {\n        StorageUnit store = StorageUnit(contractSlot(_struct));\n        if (!IsContract.isContract(address(store))) {\n            return bytes32(0);\n        \n\n\n\n\n\n /* function write(\n        bytes32 _struct,\n        bytes32 _key,\n        bytes32 _value\n/internal {\n       StorageUnit store = StorageUnit(contractSlot(_struct));\n       if (!IsContract.isContract(address(store))) {\n            deploy(_struct);\n        \n\n        /* solium-disable-next-line */\n         /* abi.encodeWithSelector(\n               store.write.selector,\n                _key,\n                _value\n           )\n        );\n\n        require(success, \"error writing storage\");\n    }\n \n \n \n  //   function read(\n    //    bytes32 _struct,\n   //     bytes32 _key\n//    ) internal view returns (bytes32) {\n//        StorageUnit store = StorageUnit(contractSlot(_struct));\n//        if (!IsContract.isContract(address(store))) {\n//            return bytes32(0);\n        \n\n        /* solium-disable-next-line */\n       // (bool success, bytes memory data) = address(store).staticcall(\n        //abi.encodeWithSelector(\n    //*        store.read.selector,\n        //       _key\"\"\"\n   \n\n      //  require(success, \"error reading storage\");\n     //  return abi.decode(data, (bytes32));\n\n\n/*library DistributedStorage {\n   function contractSlot(bytes32 _struct) private view returns (address) {\n    return address(\n          uint256(\n     keccak256(\n      abi.encodePacked(\n                       byte(0xff),\n                       address(this),\n                      _struct,\n                      keccak256(type(StorageUnit).creationCode)\n\n\n  function deploy(bytes32 _struct) private {\n       bytes memory slotcode = type(StorageUnit).creationCode;\n     solium-disable-next-line */\n      // assembly{ pop(create2(0, add(slotcode, 0x20), mload(slotcode), _struct)) }\n    \n\n  /* function write(\n        bytes32 _struct,\n        bytes32 _key,\n        bytes32 _value\n/internal {\n       StorageUnit store = StorageUnit(contractSlot(_struct));\n       if (!IsContract.isContract(address(store))) {\n            deploy(_struct);\n        \n\n        /* solium-disable-next-line */\n         /* abi.encodeWithSelector(\n               store.write.selector,\n                _key,\n                _value\n           )\n        );\n\n        require(success, \"error writing storage\");\n    }\n\n    function read(\n        bytes32 _struct,\n        bytes32 _key\n   \"\" ) internal view returns (bytes32) {\n        StorageUnit store = StorageUnit(contractSlot(_struct));\n        if (!IsContract.isContract(address(store))) {\n            return bytes32(0);\n        \n\n        /* solium-disable-next-line */\n       // (bool success, bytes memory data) = address(store).staticcall(\n        //abi.encodeWithSelector(\n    //*        store.read.selector,\n        //       _key\"\"\"\n   \n\n      //  require(success, \"error reading storage\");\n     //  return abi.decode(data, (bytes32));\n\n \n \n \n \n \n\n\n   // function read(\n//        bytes32 _struct,\n/*        bytes32 _key\n   \"\" ) internal view returns (bytes32) {\n        StorageUnit store = StorageUnit(contractSlot(_struct));\n        if (!IsContract.isContract(address(store))) {\n            return bytes32(0);\n        \n\n        /* solium-disable-next-line */\n       // (bool success, bytes memory data) = address(store).staticcall(\n        //abi.encodeWithSelector(\n    //*        store.read.selector,\n        //       _key\"\"\"\n   \n\n      //  require(success, \"error reading storage\");\n     //  return abi.decode(data, (bytes32));\n\n\t\n\t\n\t\n\t\n\t\n\t\n    function transfer(address to, uint256 value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= value);\n\n        balanceOf[msg.sender] -= value;  // \n        balanceOf[to] += value;          // \n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    function approve(address spender, uint256 value)\n        public\n        returns (bool success)\n    {\n        allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function transferFrom(address from, address to, uint256 value)\n        public\n        returns (bool success)\n    {\n        require(value <= balanceOf[from]);\n        require(value <= allowance[from][msg.sender]);\n\n        balanceOf[from] -= value;\n        balanceOf[to] += value;\n        allowance[from][msg.sender] -= value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n}"
}