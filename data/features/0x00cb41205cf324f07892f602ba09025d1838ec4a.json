{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST CALLDATASIZE PUSH2 JUMPI STOP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 DUP2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH2 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP6 PUSH2 PUSH2 JUMP JUMPDEST DUP6 DUP5 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP3 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND DUP4 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP4 PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP3 PUSH20 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 SLOAD DUP2 PUSH2 DUP5 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP4 PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP3 PUSH20 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 DUP4 PUSH2 JUMP JUMPDEST DUP3 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 PUSH2 ADDRESS PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP5 PUSH20 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 GT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 SELFBALANCE SWAP1 POP PUSH1 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 SELFBALANCE PUSH2 JUMP JUMPDEST JUMPDEST POP JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND JUMPDEST ISZERO PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP DUP2 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 AND DUP2 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH8 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 MUL PUSH1 ADD DUP3 ADD PUSH1 MSTORE DUP1 ISZERO PUSH2 JUMPI DUP2 PUSH1 ADD PUSH1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP ADDRESS DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 MUL PUSH1 ADD ADD SWAP1 PUSH20 AND SWAP1 DUP2 PUSH20 AND DUP2 MSTORE POP POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 MUL PUSH1 ADD ADD SWAP1 PUSH20 AND SWAP1 DUP2 PUSH20 AND DUP2 MSTORE POP POP PUSH2 ADDRESS PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP4 PUSH1 DUP5 ADDRESS TIMESTAMP PUSH1 MLOAD DUP7 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP JUMP JUMPDEST DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 DUP2 PUSH2 JUMPI DUP3 PUSH2 JUMP JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST JUMPDEST SWAP1 POP DUP1 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP4 PUSH20 AND DUP6 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP5 PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH2 AND PUSH2 AND PUSH1 SLOAD DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH2 AND PUSH2 AND PUSH1 SLOAD DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH2 AND PUSH2 AND PUSH1 SLOAD DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP4 PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH2 AND PUSH2 AND PUSH1 SLOAD DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH2 AND PUSH2 AND PUSH1 SLOAD DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH2 AND PUSH2 AND PUSH1 SLOAD DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP5 PUSH20 AND PUSH32 PUSH1 SLOAD PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SLOAD PUSH1 PUSH1 PUSH2 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH20 AND DUP5 PUSH20 AND PUSH32 PUSH1 SLOAD PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SLOAD PUSH1 PUSH1 ADDRESS PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP ADDRESS PUSH20 AND DUP5 PUSH20 AND PUSH32 PUSH1 SLOAD PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 PUSH1 SLOAD PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH20 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 NOT PUSH1 DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP2 DUP6 PUSH1 DUP7 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP4 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 PUSH1 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 PUSH1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 DUP6 GT ISZERO PUSH2 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 DUP6 AND ISZERO PUSH2 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP5 POP PUSH2 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST DUP2 PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 DUP2 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 DUP5 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST POP PUSH2 JUMP JUMPDEST POP PUSH1 DUP4 LT PUSH2 DUP4 LT AND PUSH1 DUP5 LT PUSH1 DUP5 LT AND OR ISZERO PUSH2 JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH32 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DIV SWAP1 POP PUSH1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 SUB PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 DUP5 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST DUP1 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 MLOAD PUSH2 DUP9 DUP3 PUSH2 JUMP JUMPDEST SWAP8 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP9 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP4 ADD DUP8 PUSH2 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 DUP7 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP6 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 PUSH5 UNKNOWN_0xdf UNKNOWN_0xea DUP4 UNKNOWN_0xd7 ADD INVALID_0x7f",
  "opcode_entropy": 4.563108853537476,
  "opcode_count": 6665,
  "unique_opcodes": 74,
  "byte_entropy": 5.402039682352933,
  "byte_0x": 7.307804735457468e-05,
  "byte_60": 0.05780473545746858,
  "byte_80": 0.018927214264834843,
  "byte_40": 0.01045016077170418,
  "byte_52": 0.011180941245249926,
  "byte_04": 0.008038585209003215,
  "byte_36": 0.0013154048523823444,
  "byte_10": 0.001900029231218942,
  "byte_61": 0.0632125109617071,
  "byte_02": 0.005261619409529378,
  "byte_13": 0.0031423560362467116,
  "byte_57": 0.012130955860859398,
  "byte_00": 0.10143232972814967,
  "byte_35": 0.001169248757673195,
  "byte_e0": 0.0005115463314820228,
  "byte_1c": 0.0005846243788365975,
  "byte_63": 0.004750073078047355,
  "byte_92": 0.004530838935983631,
  "byte_69": 0.0013154048523823444,
  "byte_11": 0.0035077462730195848,
  "byte_01": 0.020608009353990063,
  "byte_18": 0.001388482899736919,
  "byte_cc": 0.0007307804735457469,
  "byte_70": 0.0006577024261911722,
  "byte_ac": 0.00029231218941829873,
  "byte_ee": 0.0005115463314820228,
  "byte_a0": 0.0022654194679918153,
  "byte_ea": 0.0004384682841274481,
  "byte_2f": 0.0008038585209003215,
  "byte_0b": 0.0013154048523823444,
  "byte_37": 0.0008769365682548962,
  "byte_6f": 0.0021923414206372407,
  "byte_14": 0.005261619409529378,
  "byte_07": 0.0021192633732826658,
  "byte_7e": 0.00021923414206372405,
  "byte_eb": 0.0005115463314820228,
  "byte_ec": 0.00029231218941829873,
  "byte_e9": 0.0005115463314820228,
  "byte_c9": 0.0004384682841274481,
  "byte_a7": 0.0008769365682548962,
  "byte_f1": 0.0005846243788365975,
  "byte_1a": 0.0016807950891552178,
  "byte_24": 0.001388482899736919,
  "byte_d3": 0.0005846243788365975,
  "byte_d0": 0.0005115463314820228,
  "byte_f2": 0.0007307804735457469,
  "byte_fd": 0.005407775504238527,
  "byte_e3": 0.00014615609470914936,
  "byte_8b": 0.00029231218941829873,
  "byte_fb": 0.00014615609470914936,
  "byte_f6": 0.00021923414206372405,
  "byte_43": 0.0006577024261911722,
  "byte_42": 0.00029231218941829873,
  "byte_08": 0.0032885121309558607,
  "byte_56": 0.03339666764104063,
  "byte_5b": 0.044650686933645135,
  "byte_06": 0.0021192633732826658,
  "byte_c0": 0.0005115463314820228,
  "byte_a3": 0.0015346389944460683,
  "byte_98": 0.00021923414206372405,
  "byte_dd": 0.000950014615609471,
  "byte_62": 0.0005115463314820228,
  "byte_ed": 0.00021923414206372405,
  "byte_3e": 0.0005846243788365975,
  "byte_16": 0.014177141186787489,
  "byte_e7": 0.00021923414206372405,
  "byte_1d": 0.0008038585209003215,
  "byte_c3": 0.0018269511838643671,
  "byte_f5": 0.0019731072785735167,
  "byte_53": 0.0004384682841274481,
  "byte_a8": 0.00021923414206372405,
  "byte_b0": 0.0005846243788365975,
  "byte_89": 0.00036539023677287344,
  "byte_82": 0.012057877813504822,
  "byte_05": 0.0020461853259280912,
  "byte_a9": 0.00036539023677287344,
  "byte_9c": 0.000950014615609471,
  "byte_bb": 0.00014615609470914936,
  "byte_ad": 0.000950014615609471,
  "byte_b8": 0.0007307804735457469,
  "byte_73": 0.011254019292604502,
  "byte_bd": 0.00021923414206372405,
  "byte_b9": 0.0004384682841274481,
  "byte_7b": 0.0005846243788365975,
  "byte_f9": 0.00029231218941829873,
  "byte_41": 0.0005846243788365975,
  "byte_95": 0.0006577024261911722,
  "byte_d8": 0.00029231218941829873,
  "byte_9b": 0.0005846243788365975,
  "byte_6c": 0.0013154048523823444,
  "byte_97": 0.0006577024261911722,
  "byte_46": 0.00021923414206372405,
  "byte_9f": 0.00021923414206372405,
  "byte_71": 0.0007307804735457469,
  "byte_6d": 0.000950014615609471,
  "byte_c2": 0.0005115463314820228,
  "byte_22": 0.001607717041800643,
  "byte_5c": 0.00021923414206372405,
  "byte_50": 0.034638994446068404,
  "byte_a6": 0.0004384682841274481,
  "byte_6a": 0.00029231218941829873,
  "byte_75": 0.0008769365682548962,
  "byte_d9": 0.00021923414206372405,
  "byte_ce": 0.00029231218941829873,
  "byte_5a": 0.0005115463314820228,
  "byte_84": 0.0040192926045016075,
  "byte_d6": 0.00021923414206372405,
  "byte_c8": 0.0004384682841274481,
  "byte_c6": 0.00036539023677287344,
  "byte_8d": 0.0004384682841274481,
  "byte_a5": 0.00029231218941829873,
  "byte_cb": 0.00014615609470914936,
  "byte_03": 0.009865536392867583,
  "byte_3c": 0.00021923414206372405,
  "byte_19": 0.0014615609470914938,
  "byte_b3": 0.0005115463314820228,
  "byte_ca": 0.00021923414206372405,
  "byte_ef": 0.0005115463314820228,
  "byte_78": 0.000950014615609471,
  "byte_23": 0.0007307804735457469,
  "byte_31": 0.0019731072785735167,
  "byte_0d": 0.0021192633732826658,
  "byte_e2": 0.0006577024261911722,
  "byte_67": 0.0005846243788365975,
  "byte_1f": 0.001388482899736919,
  "byte_3f": 0.0004384682841274481,
  "byte_8f": 0.00014615609470914936,
  "byte_33": 0.0018269511838643671,
  "byte_72": 0.002630809704764689,
  "byte_5e": 0.0004384682841274481,
  "byte_e5": 0.00036539023677287344,
  "byte_2a": 0.00233849751534639,
  "byte_45": 0.0007307804735457469,
  "byte_de": 0.0004384682841274481,
  "byte_4a": 0.0004384682841274481,
  "byte_09": 0.0013154048523823444,
  "byte_0f": 0.0018269511838643671,
  "byte_e4": 0.00029231218941829873,
  "byte_b2": 0.00021923414206372405,
  "byte_34": 0.004750073078047355,
  "byte_15": 0.009427068108740135,
  "byte_2b": 0.00233849751534639,
  "byte_4f": 0.0005115463314820228,
  "byte_51": 0.009207833966676411,
  "byte_91": 0.0176118094124525,
  "byte_90": 0.03610055539315989,
  "byte_25": 0.0024846536100555394,
  "byte_cf": 0.0004384682841274481,
  "byte_f3": 0.0021192633732826658,
  "byte_5f": 0.00036539023677287344,
  "byte_55": 0.0021923414206372407,
  "byte_26": 0.003946214557147033,
  "byte_7a": 0.0008769365682548962,
  "byte_81": 0.01980415083308974,
  "byte_27": 0.0035077462730195848,
  "byte_be": 0.00014615609470914936,
  "byte_c7": 0.0004384682841274481,
  "byte_d4": 7.307804735457468e-05,
  "byte_88": 0.0019731072785735167,
  "byte_ba": 0.00029231218941829873,
  "byte_ff": 0.19073370359543992,
  "byte_c4": 0.0004384682841274481,
  "byte_48": 0.0005115463314820228,
  "byte_85": 0.0021923414206372407,
  "byte_db": 0.00021923414206372405,
  "byte_df": 0.00014615609470914936,
  "byte_28": 0.0024846536100555394,
  "byte_d2": 0.00029231218941829873,
  "byte_e8": 0.00021923414206372405,
  "byte_65": 0.004896229172756504,
  "byte_0a": 0.004165448699210757,
  "byte_bf": 0.00029231218941829873,
  "byte_3a": 0.0007307804735457469,
  "byte_5d": 0.00021923414206372405,
  "byte_4d": 0.0005846243788365975,
  "byte_68": 0.0015346389944460683,
  "byte_0c": 0.001607717041800643,
  "byte_8a": 0.00029231218941829873,
  "byte_93": 0.0010961707103186204,
  "byte_7d": 0.00021923414206372405,
  "byte_a1": 0.0005115463314820228,
  "byte_aa": 0.0005846243788365975,
  "byte_b7": 0.00029231218941829873,
  "byte_d5": 0.00036539023677287344,
  "byte_f7": 0.00036539023677287344,
  "byte_99": 0.00014615609470914936,
  "byte_38": 0.00029231218941829873,
  "byte_8e": 0.00036539023677287344,
  "byte_0e": 0.001169248757673195,
  "byte_3d": 0.0007307804735457469,
  "byte_12": 0.0017538731365097924,
  "byte_30": 0.0020461853259280912,
  "byte_b5": 0.00021923414206372405,
  "byte_f0": 0.0004384682841274481,
  "byte_fc": 0.0005846243788365975,
  "byte_83": 0.007892429114294067,
  "byte_dc": 0.00036539023677287344,
  "byte_1e": 0.0012423268050277697,
  "byte_39": 0.00021923414206372405,
  "byte_1b": 0.001169248757673195,
  "byte_20": 0.014834843612978661,
  "byte_7f": 0.004457760888629056,
  "byte_74": 0.00233849751534639,
  "byte_6e": 0.001900029231218942,
  "byte_6b": 0.00021923414206372405,
  "byte_21": 0.001607717041800643,
  "byte_29": 0.0018269511838643671,
  "byte_54": 0.00686933645133002,
  "byte_86": 0.001388482899736919,
  "byte_b6": 0.00029231218941829873,
  "byte_79": 0.0020461853259280912,
  "byte_b1": 0.00014615609470914936,
  "byte_64": 0.0015346389944460683,
  "byte_17": 0.0012423268050277697,
  "byte_3b": 0.00036539023677287344,
  "byte_32": 0.0014615609470914938,
  "byte_49": 0.00021923414206372405,
  "byte_2c": 0.001607717041800643,
  "byte_44": 0.00029231218941829873,
  "byte_af": 0.0004384682841274481,
  "byte_2d": 0.000950014615609471,
  "byte_fe": 0.00014615609470914936,
  "byte_2e": 0.0012423268050277697,
  "byte_8c": 7.307804735457468e-05,
  "byte_e1": 0.00014615609470914936,
  "byte_d1": 0.0008038585209003215,
  "byte_58": 0.00036539023677287344,
  "byte_4c": 0.00014615609470914936,
  "byte_ae": 0.0008769365682548962,
  "byte_f8": 7.307804735457468e-05,
  "byte_a4": 0.00021923414206372405,
  "byte_fa": 0.00021923414206372405,
  "byte_4e": 0.0005846243788365975,
  "byte_f4": 0.00021923414206372405,
  "byte_47": 0.00029231218941829873,
  "byte_59": 0.00014615609470914936,
  "byte_cd": 0.000950014615609471,
  "byte_da": 7.307804735457468e-05,
  "byte_b4": 7.307804735457468e-05,
  "byte_94": 0.0004384682841274481,
  "byte_87": 0.0005115463314820228,
  "byte_e6": 7.307804735457468e-05,
  "byte_ab": 0.00021923414206372405,
  "byte_9a": 7.307804735457468e-05,
  "byte_76": 0.00029231218941829873,
  "byte_66": 0.0007307804735457469,
  "byte_d7": 0.00014615609470914936,
  "byte_9d": 0.00021923414206372405,
  "byte_77": 0.0005846243788365975,
  "byte_a2": 0.00014615609470914936,
  "byte_c5": 0.00014615609470914936,
  "byte_4b": 7.307804735457468e-05,
  "byte_7c": 7.307804735457468e-05,
  "byte_96": 7.307804735457468e-05,
  "byte_c1": 7.307804735457468e-05,
  "num_nodes": 774,
  "num_edges": 244,
  "avg_degree": 0.6304909560723514,
  "density": 0.0004078207995293347,
  "connected_components": 555,
  "avg_clustering": 0.001937984496124031,
  "timeline_sequence": [],
  "sourcecode": "// SPDX-License-Identifier: MIT\n\n/*\nToken Name: White Snake\nTicker: TAMER \ud83d\udc0d\nSupply: 10,000,000\nTax: 4/4\n\n2% marketing\n2% Liquidity\n\nfor updates please refer to our official telegram...\n\n        ** https://t.me/TAMERERC20 **\n\n*/\n\npragma solidity ^0.8.15;\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");    }\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage); uint256 c = a - b; return c;    }\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");    }\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage); uint256 c = a / b; return c;  } }\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);  }\n\n    abstract contract Context {\n    function _msgSender() internal view virtual returns (address) {return msg.sender;}\n    function _msgData() internal view virtual returns (bytes calldata) {this; return msg.data;  \n    }\n}\n\n    abstract contract Ownable is Context {\n    address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() { _setOwner(_msgSender());    }\n\n    function owner() public view virtual returns (address) {return _owner;}\n\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;  }\n\n    function renounceOwnership() public virtual onlyOwner {\n      _setOwner(address(0));   }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _setOwner(newOwner); \n    }\n\n    function _setOwner(address newOwner) private {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner); \n        }\n    }\n\ninterface IUniswapV2Factory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n    function getPair(address tokenA, address tokenB)  external view returns (address pair);\n    }\n\ninterface IUniswapV2Router02 {\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    }\n    \ncontract TAMER is Context, IERC20, Ownable {\n    using SafeMath for uint256;\n    mapping (address => uint256) private _tOwned;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) private _isExcludedFromFee;\n    mapping (address => bool) private _isExcludedFromMaxWalletSize;\n    string private constant _name = \"White Snake\";\n    string private constant _symbol = unicode\"TAMER \ud83d\udc0d\";\n    uint8 private constant _decimals = 9;\n    string public chat;\n\n    uint256 public buyLiquidityFee=0;\n    uint256 public buyBurnFee=2;\n    uint256 public buyMarketingFee = 2;\n    uint256 public totalBuyFees;\n\n    uint256 public sellLiquidityFee=0;\n    uint256 public sellBurnFee=2;\n    uint256 public sellMarketingFee= 2;\n    uint256 public totalSellFees;\n  \n    uint256 public tokensForAutoLiquidity;\n    uint256 public tokensForAutoBurn;  \n    uint256 public tokensForMarketing;\n    uint16 public masterTaxDivisor = 100;\n    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\n    address public pairAddress;\n    IUniswapV2Router02 private uniswapV2Router;\n    address private uniswapV2Pair;\n\n    bool private tradingOpen=false;\n    bool private inSwap = false;\n    bool private swapEnabled = false;\n\n\n    uint256 private _tTotal = 10000000 * 10**9;\n    uint256 private maxWalletAmount = 100000 * 10**9; //10%\n    uint256 private maxTxAmount = 500000 * 10**9; //5%\n\n       \n    address payable private MarketAddrWallet;\n    event MaxWalletAmountUpdated(uint maxWalletAmount);\n    modifier lockTheSwap {\n        inSwap = true;\n        _;\n        inSwap = false;    }\n    constructor () {\n        require(!tradingOpen,\"trading is already open\");\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        uniswapV2Router = _uniswapV2Router;\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory()).createPair(address(this), _uniswapV2Router.WETH());\n        pairAddress = IUniswapV2Factory(_uniswapV2Router.factory()).getPair(address(this), _uniswapV2Router.WETH());\n        MarketAddrWallet = payable(0x37Fb2aa76985b37F34Def4179cdd07181716522f); \n        _tOwned[owner()] = _tTotal;\n    \n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[MarketAddrWallet] = true;\n        _isExcludedFromMaxWalletSize[owner()] = true;\n        _isExcludedFromMaxWalletSize[address(this)] = true;\n        _isExcludedFromMaxWalletSize[MarketAddrWallet] = true;  \n  \n        IERC20(uniswapV2Pair).approve(address(uniswapV2Router), type(uint).max);\n        emit Transfer(address(0), owner(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) { return _name; }\n    function getTxAmount() public view returns(uint256) {return maxTxAmount;}\n    function getMaxWallet() public view returns(uint256) {return maxWalletAmount;}\n    function symbol() public pure returns (string memory) { return _symbol; }\n    function decimals() public pure returns (uint8) { return _decimals; }\n    function totalSupply() public view override returns (uint256) { return _tTotal; }\n    function balanceOf(address account) public view override returns (uint256) { return _tOwned[account]; }\n    function transfer(address recipient, uint256 amount) public override returns (bool) { _transfer(_msgSender(), recipient, amount); return true; }\n    function allowance(address owner, address spender) public view override returns (uint256) { return _allowances[owner][spender]; }\n    function approve(address spender, uint256 amount) public override returns (bool) { _approve(_msgSender(), spender, amount); return true; }\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address from, address to, uint256 amount) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(amount <= balanceOf(from),\"You are trying to transfer more than your balance\");    \n        require(tradingOpen || _isExcludedFromFee[from] || _isExcludedFromFee[to], \"Trading not enabled yet\");\n        if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromFee[to]) {\n                require(amount <= maxTxAmount, \"Exceeds the _maxTxAmount.\");\n                require(balanceOf(to) + amount <= maxWalletAmount, \"Exceeds the maxWalletSize.\");   }\n        if (from == uniswapV2Pair && to != address(uniswapV2Router) && ! _isExcludedFromMaxWalletSize[to]) {             \n                require(amount + balanceOf(to) <= maxWalletAmount, \"Recipient exceeds max wallet size.\");   }\n        uint256 contractTokenBalance = balanceOf(address(this));\n            if (!inSwap && from != uniswapV2Pair && swapEnabled && contractTokenBalance>0) {\n                swapTokensForEth(contractTokenBalance);\n                uint256 contractETHBalance = address(this).balance;\n                if(contractETHBalance > 0) {\n                    sendETHToFee(address(this).balance);    }   }\n        _tokenTransfer(from, to, amount, !(_isExcludedFromFee[from] || _isExcludedFromFee[to]));\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) private lockTheSwap {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = uniswapV2Router.WETH();\n        _approve(address(this), address(uniswapV2Router), tokenAmount);\n        uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n    }\n\n    function _tokenTransfer(address sender, address recipient, uint256 amount, bool takeFee) private {\n        _tOwned[sender] -= amount;\n        uint256 amountReceived = (takeFee) ? takeTaxes(sender, recipient, amount) : amount;\n        _tOwned[recipient] += amountReceived;\n        emit Transfer(sender, recipient, amountReceived);\n    }\n\n    function takeTaxes(address from, address to, uint256 amount) internal returns (uint256) {\n        if(from == uniswapV2Pair && totalBuyFees > 0 ) { \n            tokensForAutoLiquidity = amount * buyLiquidityFee / masterTaxDivisor;\n            tokensForAutoBurn = amount * buyBurnFee / masterTaxDivisor;         \n            tokensForMarketing = amount * buyMarketingFee / masterTaxDivisor;        } \n        else if (to == uniswapV2Pair  && totalSellFees > 0 ) { \n            tokensForAutoLiquidity = amount * sellLiquidityFee / masterTaxDivisor;\n            tokensForAutoBurn = amount * sellBurnFee / masterTaxDivisor;\n            tokensForMarketing = amount * sellMarketingFee / masterTaxDivisor;        }\n        _tOwned[pairAddress] += tokensForAutoLiquidity;\n        emit Transfer(from, pairAddress, tokensForAutoLiquidity);\n        _tOwned[DEAD] += tokensForAutoBurn;\n        _tTotal = _tTotal - tokensForAutoBurn;\n        _tTotal = totalSupply();\n        emit Transfer(from, DEAD, tokensForAutoBurn); \n        _tOwned[address(this)] += tokensForMarketing;\n        emit Transfer(from, address(this), tokensForMarketing);\n        uint256 feeAmount = tokensForAutoLiquidity + tokensForAutoBurn + tokensForMarketing;\n        return amount - feeAmount;\n    }\n\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n     function excludeFromMaxWalletLimit(address account) public onlyOwner {\n\t\t_isExcludedFromMaxWalletSize[account] = true;\n    }\n\n    function includeInMaxWalletLimit(address account) public onlyOwner {\n\t\t_isExcludedFromMaxWalletSize[account] = false;\n    }\n\n       // once enabled, can never be turned off\n    function openTrading() external onlyOwner {\n        tradingOpen = true;\n        swapEnabled = true;  \n    }\n\n   function SetMaxWalletand(uint256 _maxWalletSize) external onlyOwner{\n        maxWalletAmount = _maxWalletSize * 10 **_decimals;\n    }\n\n    function SetWalletandTxtAmount(uint256 _maxTxAmount, uint256 _maxWalletSize) external onlyOwner{\n        maxTxAmount = _maxTxAmount * 10 **_decimals;\n        maxWalletAmount = _maxWalletSize * 10 **_decimals;\n    }\n\n    function sendETHToFee(uint256 amount) private {\n        MarketAddrWallet.transfer(amount);\n        } \n\n    receive() external payable{}\n\n    \n}"
}