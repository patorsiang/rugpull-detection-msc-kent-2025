{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 JUMPI STOP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 DUP2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH13 PUSH1 SHL PUSH1 DUP3 ADD MSTORE JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH20 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH2 DUP5 CALLER PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 PUSH1 SHL SUB DUP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 SHL NOT AND PUSH1 PUSH1 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH32 SLOAD PUSH2 PUSH1 SWAP1 DUP2 MSTORE PUSH32 SLOAD PUSH1 SLOAD SWAP2 SWAP3 PUSH2 SWAP3 SWAP1 SWAP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH32 SWAP1 PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SWAP2 SWAP1 SWAP2 SSTORE PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH2 JUMPI DUP2 PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP7 AND SWAP1 PUSH32 SWAP1 PUSH2 SWAP1 DUP6 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP5 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH9 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH17 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH14 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST DUP2 EXTCODESIZE ISZERO ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP3 EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 GT ISZERO DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH17 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP POP PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 DUP7 DUP7 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP7 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST ADDRESS PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND SWAP1 PUSH32 SWAP1 PUSH2 SWAP1 DUP6 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 DUP4 DUP3 PUSH2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH1 SLOAD SWAP2 SWAP4 DUP6 LT ISZERO SWAP3 GT ISZERO SWAP1 PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 AND JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP2 JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP7 DUP2 AND SWAP2 AND EQ JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP1 JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH1 SLOAD PUSH1 SLOAD PUSH1 SWAP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP1 PUSH1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP3 PUSH2 PUSH1 SLOAD DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP5 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP SELFBALANCE PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 SELFBALANCE DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH2 PUSH1 SLOAD DUP9 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST DUP4 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH1 SLOAD DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 JUMPI PUSH2 DUP7 DUP3 PUSH2 JUMP JUMPDEST SELFBALANCE DUP1 ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH20 SWAP1 DUP3 ISZERO PUSH2 MUL SWAP1 DUP4 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP JUMPDEST POP POP PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND SUB PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP1 DUP5 AND SUB PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST POP PUSH1 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE PUSH1 DUP3 ADD DUP4 MSTORE PUSH1 SWAP3 PUSH1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP ADDRESS DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP4 AND SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 SLOAD PUSH2 SWAP2 ADDRESS SWAP2 AND DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH1 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 ADDRESS SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH20 PUSH1 DUP3 ADD MSTORE TIMESTAMP PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 SWAP1 DUP4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 ADD PUSH1 NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 DUP5 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 NOT DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 PUSH1 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP5 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP PUSH1 PUSH1 PUSH1 SHL SUB SWAP7 SWAP1 SWAP7 AND PUSH1 DUP6 ADD MSTORE POP POP POP PUSH1 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 DUP5 ADD MLOAD SWAP2 POP PUSH1 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP UNKNOWN_0xfe GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE SHA3 PUSH21 PUSH20 UNKNOWN_0xd8 DUP10 UNKNOWN_0xd5 MSIZE RETURNDATASIZE BASEFEE BLOCKHASH UNKNOWN_0x2e UNKNOWN_0xa8 STOP JUMPI DUP11 UNKNOWN_0xe1 UNKNOWN_0xce NUMBER NUMBER UNKNOWN_0xd4 UNKNOWN_0x2d SHA3 UNKNOWN_0x1f UNKNOWN_0xc7 CREATE UNKNOWN_0x2e LOG3 UNKNOWN_0xdb UNKNOWN_0xaf BASEFEE UNKNOWN_0xee UNKNOWN_0xd2 UNKNOWN_0xc0 SLT CREATE2 PUSH5 STOP ADDMOD UNKNOWN_0xf STOP CALLER",
  "opcode_entropy": 4.760955048293952,
  "opcode_count": 3465,
  "unique_opcodes": 101,
  "byte_entropy": 6.143286023292336,
  "byte_0x": 0.0001820830298616169,
  "byte_60": 0.11762563729060452,
  "byte_80": 0.027312454479242534,
  "byte_40": 0.013474144209759651,
  "byte_52": 0.030043699927166788,
  "byte_04": 0.012381646030589949,
  "byte_36": 0.0023670793882010197,
  "byte_10": 0.0049162418062636565,
  "byte_61": 0.05826656955571741,
  "byte_01": 0.04661325564457393,
  "byte_2e": 0.0010924981791697013,
  "byte_57": 0.02039329934450109,
  "byte_00": 0.025127458120903133,
  "byte_35": 0.0023670793882010197,
  "byte_e0": 0.002002913328477786,
  "byte_1c": 0.0010924981791697013,
  "byte_63": 0.008922068463219229,
  "byte_5f": 0.0005462490895848507,
  "byte_7b": 0.0016387472687545521,
  "byte_cd": 0.0025491624180626364,
  "byte_70": 0.001820830298616169,
  "byte_11": 0.00528040786598689,
  "byte_ab": 0.0009104151493080845,
  "byte_95": 0.0016387472687545521,
  "byte_d8": 0.0009104151493080845,
  "byte_9b": 0.0009104151493080845,
  "byte_41": 0.0005462490895848507,
  "byte_6f": 0.004187909686817188,
  "byte_14": 0.008557902403495994,
  "byte_03": 0.01638747268754552,
  "byte_6a": 0.0003641660597232338,
  "byte_a8": 0.0005462490895848507,
  "byte_aa": 0.0005462490895848507,
  "byte_1b": 0.01820830298616169,
  "byte_31": 0.0007283321194464676,
  "byte_97": 0.0003641660597232338,
  "byte_a9": 0.0012745812090313182,
  "byte_05": 0.0027312454479242534,
  "byte_9c": 0.0003641660597232338,
  "byte_bb": 0.0001820830298616169,
  "byte_b7": 0.0003641660597232338,
  "byte_dd": 0.001820830298616169,
  "byte_62": 0.004005826656955572,
  "byte_ed": 0.0012745812090313182,
  "byte_3e": 0.0014566642388929353,
  "byte_d7": 0.0010924981791697013,
  "byte_e8": 0.0014566642388929353,
  "byte_76": 0.0010924981791697013,
  "byte_55": 0.002002913328477786,
  "byte_cf": 0.0001820830298616169,
  "byte_02": 0.005826656955571741,
  "byte_c2": 0.0007283321194464676,
  "byte_f2": 0.0010924981791697013,
  "byte_fd": 0.008922068463219229,
  "byte_e3": 0.0005462490895848507,
  "byte_8b": 0.0005462490895848507,
  "byte_1d": 0.0012745812090313182,
  "byte_5b": 0.03896576839038601,
  "byte_a0": 0.01001456664238893,
  "byte_82": 0.019118718135469774,
  "byte_ea": 0.0007283321194464676,
  "byte_78": 0.0010924981791697013,
  "byte_9e": 0.0009104151493080845,
  "byte_54": 0.013109978150036417,
  "byte_20": 0.02421704297159505,
  "byte_7d": 0.0009104151493080845,
  "byte_b4": 0.0003641660597232338,
  "byte_a5": 0.0016387472687545521,
  "byte_89": 0.0005462490895848507,
  "byte_3d": 0.0023670793882010197,
  "byte_4c": 0.0001820830298616169,
  "byte_29": 0.0009104151493080845,
  "byte_32": 0.0016387472687545521,
  "byte_30": 0.003095411507647487,
  "byte_b8": 0.0010924981791697013,
  "byte_2b": 0.0005462490895848507,
  "byte_49": 0.0007283321194464676,
  "byte_2f": 0.0009104151493080845,
  "byte_bf": 0.0001820830298616169,
  "byte_6e": 0.0029133284777858705,
  "byte_47": 0.001820830298616169,
  "byte_3c": 0.0003641660597232338,
  "byte_e5": 0.0029133284777858705,
  "byte_67": 0.0014566642388929353,
  "byte_3f": 0.0001820830298616169,
  "byte_42": 0.002002913328477786,
  "byte_18": 0.0009104151493080845,
  "byte_92": 0.006190823015294974,
  "byte_2a": 0.0003641660597232338,
  "byte_45": 0.0016387472687545521,
  "byte_3a": 0.0010924981791697013,
  "byte_06": 0.003641660597232338,
  "byte_de": 0.0012745812090313182,
  "byte_6d": 0.0021849963583394027,
  "byte_09": 0.0023670793882010197,
  "byte_5e": 0.0007283321194464676,
  "byte_a7": 0.0012745812090313182,
  "byte_b3": 0.0010924981791697013,
  "byte_ac": 0.0003641660597232338,
  "byte_16": 0.016751638747268753,
  "byte_0d": 0.0023670793882010197,
  "byte_dc": 0.0003641660597232338,
  "byte_23": 0.0007283321194464676,
  "byte_72": 0.005826656955571741,
  "byte_fb": 0.0001820830298616169,
  "byte_34": 0.004552075746540422,
  "byte_15": 0.01711580480699199,
  "byte_46": 0.0027312454479242534,
  "byte_50": 0.03222869628550619,
  "byte_ad": 0.0023670793882010197,
  "byte_81": 0.022578295702840496,
  "byte_56": 0.02530954115076475,
  "byte_51": 0.009104151493080845,
  "byte_90": 0.03259286234522942,
  "byte_91": 0.012381646030589949,
  "byte_f3": 0.0007283321194464676,
  "byte_79": 0.0012745812090313182,
  "byte_6c": 0.0014566642388929353,
  "byte_64": 0.005462490895848507,
  "byte_4d": 0.0009104151493080845,
  "byte_65": 0.0065549890750182084,
  "byte_73": 0.004369992716678805,
  "byte_75": 0.0014566642388929353,
  "byte_98": 0.0005462490895848507,
  "byte_12": 0.00528040786598689,
  "byte_8d": 0.0007283321194464676,
  "byte_cc": 0.0012745812090313182,
  "byte_c7": 0.0007283321194464676,
  "byte_fa": 0.0010924981791697013,
  "byte_07": 0.004005826656955572,
  "byte_13": 0.005644573925710124,
  "byte_26": 0.0001820830298616169,
  "byte_27": 0.0005462490895848507,
  "byte_bd": 0.0007283321194464676,
  "byte_1a": 0.0010924981791697013,
  "byte_53": 0.0007283321194464676,
  "byte_ff": 0.00528040786598689,
  "byte_ce": 0.0005462490895848507,
  "byte_e6": 0.0007283321194464676,
  "byte_a2": 0.0009104151493080845,
  "byte_2d": 0.0009104151493080845,
  "byte_df": 0.0005462490895848507,
  "byte_db": 0.0010924981791697013,
  "byte_84": 0.009650400582665695,
  "byte_0e": 0.003641660597232338,
  "byte_f6": 0.0001820830298616169,
  "byte_2c": 0.0001820830298616169,
  "byte_58": 0.0003641660597232338,
  "byte_24": 0.0029133284777858705,
  "byte_9f": 0.0001820830298616169,
  "byte_a3": 0.0009104151493080845,
  "byte_08": 0.005826656955571741,
  "byte_c3": 0.0003641660597232338,
  "byte_d2": 0.0005462490895848507,
  "byte_83": 0.011835396941005098,
  "byte_93": 0.003459577567370721,
  "byte_94": 0.0010924981791697013,
  "byte_38": 0.0003641660597232338,
  "byte_4a": 0.0003641660597232338,
  "byte_33": 0.0014566642388929353,
  "byte_ae": 0.0003641660597232338,
  "byte_85": 0.003095411507647487,
  "byte_28": 0.0007283321194464676,
  "byte_39": 0.0007283321194464676,
  "byte_8a": 0.0005462490895848507,
  "byte_22": 0.0009104151493080845,
  "byte_d1": 0.0007283321194464676,
  "byte_44": 0.0023670793882010197,
  "byte_19": 0.0021849963583394027,
  "byte_17": 0.0009104151493080845,
  "byte_7f": 0.0023670793882010197,
  "byte_ef": 0.0005462490895848507,
  "byte_8e": 0.0001820830298616169,
  "byte_d5": 0.0005462490895848507,
  "byte_0f": 0.0032774945375091042,
  "byte_43": 0.002002913328477786,
  "byte_3b": 0.0009104151493080845,
  "byte_f8": 0.0007283321194464676,
  "byte_d3": 0.0003641660597232338,
  "byte_ec": 0.0003641660597232338,
  "byte_c6": 0.0003641660597232338,
  "byte_1f": 0.0014566642388929353,
  "byte_b1": 0.0016387472687545521,
  "byte_d6": 0.0003641660597232338,
  "byte_d4": 0.0003641660597232338,
  "byte_b6": 0.0005462490895848507,
  "byte_eb": 0.0005462490895848507,
  "byte_fe": 0.0003641660597232338,
  "byte_96": 0.0007283321194464676,
  "byte_25": 0.0007283321194464676,
  "byte_86": 0.0027312454479242534,
  "byte_fc": 0.0029133284777858705,
  "byte_a6": 0.0001820830298616169,
  "byte_ee": 0.0003641660597232338,
  "byte_4b": 0.0001820830298616169,
  "byte_9a": 0.0001820830298616169,
  "byte_68": 0.0021849963583394027,
  "byte_6b": 0.0005462490895848507,
  "byte_e1": 0.0009104151493080845,
  "byte_a4": 0.0007283321194464676,
  "byte_c0": 0.0007283321194464676,
  "byte_99": 0.0003641660597232338,
  "byte_a1": 0.0007283321194464676,
  "byte_66": 0.0014566642388929353,
  "byte_74": 0.003641660597232338,
  "byte_7a": 0.0010924981791697013,
  "byte_f0": 0.0003641660597232338,
  "byte_87": 0.0012745812090313182,
  "byte_8c": 0.0001820830298616169,
  "byte_4f": 0.0003641660597232338,
  "byte_71": 0.0007283321194464676,
  "byte_1e": 0.0005462490895848507,
  "byte_f7": 0.0005462490895848507,
  "byte_b2": 0.0003641660597232338,
  "byte_0a": 0.0023670793882010197,
  "byte_c8": 0.0005462490895848507,
  "byte_b9": 0.0003641660597232338,
  "byte_0c": 0.0014566642388929353,
  "byte_88": 0.0010924981791697013,
  "byte_f1": 0.0012745812090313182,
  "byte_e2": 0.0016387472687545521,
  "byte_69": 0.0009104151493080845,
  "byte_b0": 0.0005462490895848507,
  "byte_37": 0.0005462490895848507,
  "byte_c4": 0.0005462490895848507,
  "byte_f5": 0.0010924981791697013,
  "byte_5a": 0.0012745812090313182,
  "byte_9d": 0.0003641660597232338,
  "byte_7e": 0.0001820830298616169,
  "byte_59": 0.0014566642388929353,
  "byte_d0": 0.0001820830298616169,
  "byte_d9": 0.0003641660597232338,
  "byte_0b": 0.002002913328477786,
  "byte_f9": 0.0001820830298616169,
  "byte_77": 0.0003641660597232338,
  "byte_5d": 0.0001820830298616169,
  "byte_4e": 0.0010924981791697013,
  "byte_c9": 0.0009104151493080845,
  "byte_21": 0.0003641660597232338,
  "byte_5c": 0.0001820830298616169,
  "byte_48": 0.0010924981791697013,
  "byte_c1": 0.0001820830298616169,
  "byte_e7": 0.0001820830298616169,
  "byte_ba": 0.0001820830298616169,
  "byte_af": 0.0001820830298616169,
  "num_nodes": 337,
  "num_edges": 144,
  "avg_degree": 0.8545994065281899,
  "density": 0.001271725307333616,
  "connected_components": 211,
  "avg_clustering": 0.00692383778437191,
  "timeline_sequence": [],
  "sourcecode": "/**\n\nhttps://t.me/WorldMessInu\n\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.15;\n\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {return a + b;}\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {return a - b;}\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {return a * b;}\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {return a / b;}\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {return a % b;}\n    \n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {uint256 c = a + b; if(c < a) return(false, 0); return(true, c);}}\n\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {if(b > a) return(false, 0); return(true, a - b);}}\n\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {if (a == 0) return(true, 0); uint256 c = a * b;\n        if(c / a != b) return(false, 0); return(true, c);}}\n\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {if(b == 0) return(false, 0); return(true, a / b);}}\n\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {if(b == 0) return(false, 0); return(true, a % b);}}\n\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked{require(b <= a, errorMessage); return a - b;}}\n\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked{require(b > 0, errorMessage); return a / b;}}\n\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        unchecked{require(b > 0, errorMessage); return a % b;}}}\n\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function decimals() external view returns (uint8);\n    function symbol() external view returns (string memory);\n    function name() external view returns (string memory);\n    function getOwner() external view returns (address);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address _owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);}\n\nabstract contract Ownable {\n    address internal owner;\n    constructor(address _owner) {owner = _owner;}\n    modifier onlyOwner() {require(isOwner(msg.sender), \"!OWNER\"); _;}\n    function isOwner(address account) public view returns (bool) {return account == owner;}\n    function transferOwnership(address payable adr) public onlyOwner {owner = adr; emit OwnershipTransferred(adr);}\n    event OwnershipTransferred(address owner);\n}\n\ninterface IFactory{\n        function createPair(address tokenA, address tokenB) external returns (address pair);\n        function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\n\ninterface IRouter {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline) external;\n}\n\ncontract WorldMessInu is IERC20, Ownable {\n    using SafeMath for uint256;\n    string private constant _name = 'World MessInu';\n    string private constant _symbol = '$WMI';\n    uint8 private constant _decimals = 9;\n    uint256 private _totalSupply = 100 * 10**9 * (10 ** _decimals);\n    uint256 public _maxTxAmount = ( _totalSupply * 200 ) / 10000;\n    uint256 public _maxWalletToken = ( _totalSupply * 200 ) / 10000;\n    mapping (address => uint256) _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n    mapping (address => bool) public isFeeExempt;\n    IRouter router;\n    address public pair;\n    bool tradingAllowed = false;\n    uint256 liquidityFee = 100;\n    uint256 marketingFee = 100;\n    uint256 totalFee = 200;\n    uint256 sellFee = 200;\n    uint256 transferFee = 0;\n    uint256 feeDenominator = 10000;\n    bool swapEnabled = true;\n    uint256 swapTimes;\n    bool swapping; \n    uint256 swapThreshold = ( _totalSupply * 200 ) / 100000;\n    uint256 _minTokenAmount = ( _totalSupply * 15 ) / 100000;\n    modifier lockTheSwap {swapping = true; _; swapping = false;}\n\n    address public constant liquidity_receiver = 0x0713e8e6A2002D34A9de7b09dFADDb1d84d7FA0e; \n    address public constant DEAD = 0x000000000000000000000000000000000000dEaD;\n    address public constant marketing_receiver = 0x0713e8e6A2002D34A9de7b09dFADDb1d84d7FA0e;\n\n    constructor() Ownable(msg.sender) {\n        IRouter _router = IRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        address _pair = IFactory(_router.factory()).createPair(address(this), _router.WETH());\n        router = _router;\n        pair = _pair;\n        isFeeExempt[address(this)] = true;\n        isFeeExempt[liquidity_receiver] = true;\n        isFeeExempt[marketing_receiver] = true;\n        isFeeExempt[msg.sender] = true;\n        _balances[msg.sender] = _totalSupply;\n        emit Transfer(address(0), msg.sender, _totalSupply);\n    }\n\n    receive() external payable {}\n\n    function name() public pure returns (string memory) {return _name;}\n    function symbol() public pure returns (string memory) {return _symbol;}\n    function decimals() public pure returns (uint8) {return _decimals;}\n    function totalSupply() public view override returns (uint256) {return _totalSupply;}\n    function getOwner() external view override returns (address) { return owner; }\n    function balanceOf(address account) public view override returns (uint256) {return _balances[account];}\n    function transfer(address recipient, uint256 amount) public override returns (bool) {_transfer(msg.sender, recipient, amount);return true;}\n    function allowance(address owner, address spender) public view override returns (uint256) {return _allowances[owner][spender];}\n    function isCont(address addr) internal view returns (bool) {uint size; assembly { size := extcodesize(addr) } return size > 0; }\n    function approve(address spender, uint256 amount) public override returns (bool) {_approve(msg.sender, spender, amount);return true;}\n    function getCirculatingSupply() public view returns (uint256) {return _totalSupply.sub(balanceOf(DEAD)).sub(balanceOf(address(0)));}\n\n    function transferFrom(address sender, address recipient, uint256 amount) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, msg.sender, _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) private {\n        preTxCheck(sender, recipient, amount);\n        checktradingAllowed(sender, recipient);\n        checkMaxWallet(sender, recipient, amount); \n        swapbackCounters(sender, recipient);\n        checkTxLimit(sender, recipient, amount); \n        swapBack(sender, recipient, amount);\n        _balances[sender] = _balances[sender].sub(amount);\n        uint256 amountReceived = shouldTakeFee(sender, recipient) ? takeFee(sender, recipient, amount) : amount;\n        _balances[recipient] = _balances[recipient].add(amountReceived);\n        emit Transfer(sender, recipient, amountReceived);\n    }\n\n    function preTxCheck(address sender, address recipient, uint256 amount) internal view {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > uint256(0), \"Transfer amount must be greater than zero\");\n        require(amount <= balanceOf(sender),\"You are trying to transfer more than your balance\");\n    }\n\n    function checktradingAllowed(address sender, address recipient) internal view {\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient]){require(tradingAllowed, \"tradingAllowed\");}\n    }\n    \n    function checkMaxWallet(address sender, address recipient, uint256 amount) internal view {\n        if(isCont(recipient) && sender != pair && !isCont(sender)){require((_balances[recipient].add(amount)) <= _totalSupply);}\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient] && recipient != address(pair) && recipient != address(DEAD)){\n            require((_balances[recipient].add(amount)) <= _maxWalletToken, \"Exceeds maximum wallet amount.\");}\n    }\n\n    function swapbackCounters(address sender, address recipient) internal {\n        if(recipient == pair && !isFeeExempt[sender]){swapTimes += uint256(1);}\n    }\n\n    function startTrading() external onlyOwner {\n        tradingAllowed = true; \n    }\n\n    function shouldTakeFee(address sender, address recipient) internal view returns (bool) {\n        return !isFeeExempt[sender] && !isFeeExempt[recipient];\n    }\n\n    function takeFee(address sender, address recipient, uint256 amount) internal returns (uint256) {\n        uint256 feeAmount = amount.div(feeDenominator).mul(getTotalFee(sender, recipient));\n        _balances[address(this)] = _balances[address(this)].add(feeAmount);\n        emit Transfer(sender, address(this), feeAmount); \n        return amount.sub(feeAmount);\n    }\n\n    function getTotalFee(address sender, address recipient) internal view returns (uint256) {\n        if(recipient == pair){return sellFee;}\n        if(sender == pair){return totalFee;}\n        return transferFee;\n    }\n\n    function checkTxLimit(address sender, address recipient, uint256 amount) internal view {\n        require(amount <= _maxTxAmount || isFeeExempt[sender] || isFeeExempt[recipient], \"TX Limit Exceeded\");\n    }\n\n    function shouldSwapBack(address sender, address recipient, uint256 amount) internal view returns (bool) {\n        bool aboveMin = amount >= _minTokenAmount;\n        bool aboveThreshold = balanceOf(address(this)) >= swapThreshold;\n        return !swapping && swapEnabled && aboveMin && !isFeeExempt[sender] && recipient == pair && swapTimes >= uint256(2) && aboveThreshold;\n    }\n\n    function swapBack(address sender, address recipient, uint256 amount) internal {\n        if(shouldSwapBack(sender, recipient, amount)){swapAndLiquify(swapThreshold); swapTimes = 0;}\n    }\n\n    function swapAndLiquify(uint256 tokens) private lockTheSwap {\n        uint256 denominator = (liquidityFee.add(marketingFee)) * 2;\n        uint256 tokensToAddLiquidityWith = tokens.mul(liquidityFee).div(denominator);\n        uint256 toSwap = tokens.sub(tokensToAddLiquidityWith);\n        uint256 initialBalance = address(this).balance;\n        swapTokensForETH(toSwap);\n        uint256 deltaBalance = address(this).balance.sub(initialBalance);\n        uint256 unitBalance= deltaBalance.div(denominator.sub(liquidityFee));\n        uint256 ETHToAddLiquidityWith = unitBalance.mul(liquidityFee);\n        if(ETHToAddLiquidityWith > uint256(0)){\n            addLiquidity(tokensToAddLiquidityWith, ETHToAddLiquidityWith); }\n        uint256 remainingBalance = address(this).balance;\n        if(remainingBalance > uint256(0)){\n          payable(marketing_receiver).transfer(remainingBalance); }\n    }\n\n    function addLiquidity(uint256 tokenAmount, uint256 ETHAmount) private {\n        _approve(address(this), address(router), tokenAmount);\n        router.addLiquidityETH{value: ETHAmount}(\n            address(this),\n            tokenAmount,\n            0,\n            0,\n            liquidity_receiver,\n            block.timestamp);\n    }\n\n    function swapTokensForETH(uint256 tokenAmount) private {\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n        _approve(address(this), address(router), tokenAmount);\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            tokenAmount,\n            0,\n            path,\n            address(this),\n            block.timestamp);\n    }\n\n}"
}