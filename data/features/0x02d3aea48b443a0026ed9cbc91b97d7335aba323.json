{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 DUP2 CALLDATALOAD DUP2 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP LT PUSH2 JUMPI PUSH1 PUSH1 SLOAD PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMPDEST PUSH1 PUSH1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMPDEST PUSH1 SLOAD PUSH1 SLOAD EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMPDEST PUSH1 SLOAD TIMESTAMP LT PUSH2 JUMPI PUSH1 PUSH1 SLOAD PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 SLOAD LT PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMPDEST JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 CALLVALUE SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP6 POP CALLER SWAP5 POP PUSH2 DUP7 PUSH2 JUMP JUMPDEST SWAP4 POP SWAP4 POP PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST DUP5 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP5 SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP PUSH2 CALLVALUE DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP PUSH2 DUP6 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP7 DUP7 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD POP POP PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP6 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SWAP1 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SWAP1 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 PUSH32 SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP6 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP6 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 SWAP7 POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP5 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD PUSH1 DUP1 SLOAD PUSH2 NOT AND PUSH2 PUSH1 SWAP4 DUP5 AND DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE SWAP1 DIV AND PUSH1 EXP PUSH1 SSTORE POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SELFDESTRUCT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD SWAP3 SWAP1 SSTORE SWAP1 SWAP2 SWAP1 DUP3 ISZERO PUSH2 MUL SWAP1 DUP4 SWAP1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP2 POP PUSH2 PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP4 DUP4 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP1 DUP1 ISZERO PUSH2 MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 MLOAD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 MLOAD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 DUP1 MLOAD PUSH2 SWAP3 SWAP2 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 DUP3 DUP1 MLOAD PUSH2 SWAP3 SWAP2 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SLOAD PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD SWAP1 DUP5 SWAP1 SSTORE PUSH1 SWAP1 SWAP3 MSTORE DUP1 DUP4 SHA3 DUP1 SLOAD SWAP1 DUP5 SWAP1 SSTORE PUSH1 SLOAD SWAP3 SWAP9 POP SWAP7 POP SWAP4 AND SWAP3 PUSH4 SWAP3 SWAP2 DUP7 SWAP2 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD POP POP PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND DUP4 ISZERO PUSH2 MUL DUP5 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP4 POP POP PUSH2 PUSH2 JUMP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND SWAP2 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD DUP3 ISZERO ISZERO PUSH2 MUL PUSH2 NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP2 DUP1 DUP1 DUP1 DUP1 JUMPDEST PUSH1 DUP5 PUSH1 AND LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP6 AND PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP6 AND PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD SWAP3 POP PUSH2 DUP7 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP DUP2 ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP6 AND PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP6 AND PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD SWAP2 POP PUSH1 PUSH1 PUSH1 DUP7 AND PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP8 AND PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 AND PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SSTORE JUMPDEST PUSH2 DUP3 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP PUSH2 DUP7 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP6 POP PUSH2 DUP6 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP5 POP JUMPDEST PUSH1 SWAP1 SWAP4 ADD SWAP3 PUSH2 JUMP JUMPDEST POP SWAP3 SWAP8 SWAP4 SWAP7 POP SWAP3 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 PUSH2 SWAP3 POP SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP STOP LOG1 PUSH6 SHA3 NUMBER UNKNOWN_0xb4 UNKNOWN_0x25 SWAP9 UNKNOWN_0x5d PUSH1 UNKNOWN_0xb8 UNKNOWN_0xc2 EXP UNKNOWN_0xbf PUSH20 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.7245303225718684,
  "opcode_count": 3279,
  "unique_opcodes": 70,
  "byte_entropy": 5.828213525089306,
  "byte_60": 0.11311747613117476,
  "byte_40": 0.011830635118306352,
  "byte_52": 0.012038190120381901,
  "byte_36": 0.00041511000415110004,
  "byte_15": 0.026151930261519303,
  "byte_61": 0.0655873806558738,
  "byte_01": 0.0365296803652968,
  "byte_9b": 0.0008302200083022001,
  "byte_57": 0.031133250311332503,
  "byte_63": 0.012245745122457451,
  "byte_ff": 0.0323785803237858,
  "byte_e0": 0.00228310502283105,
  "byte_02": 0.0228310502283105,
  "byte_0a": 0.013491075134910751,
  "byte_00": 0.0294728102947281,
  "byte_35": 0.0035284350352843504,
  "byte_04": 0.014113740141137402,
  "byte_16": 0.023868825238688253,
  "byte_06": 0.005811540058115401,
  "byte_fd": 0.013906185139061852,
  "byte_de": 0.0006226650062266501,
  "byte_03": 0.024076380240763803,
  "byte_81": 0.026359485263594853,
  "byte_14": 0.012868410128684102,
  "byte_f5": 0.00041511000415110004,
  "byte_80": 0.041718555417185554,
  "byte_10": 0.00892486508924865,
  "byte_fc": 0.0010377750103777502,
  "byte_31": 0.0014528850145288502,
  "byte_ce": 0.00041511000415110004,
  "byte_7f": 0.0008302200083022001,
  "byte_18": 0.0018679950186799503,
  "byte_0d": 0.0029057700290577005,
  "byte_dd": 0.00041511000415110004,
  "byte_b0": 0.0006226650062266501,
  "byte_1a": 0.0010377750103777502,
  "byte_ef": 0.00020755500207555002,
  "byte_58": 0.00041511000415110004,
  "byte_c3": 0.0008302200083022001,
  "byte_1c": 0.00041511000415110004,
  "byte_d3": 0.00041511000415110004,
  "byte_b7": 0.00041511000415110004,
  "byte_54": 0.020755500207555,
  "byte_d6": 0.00041511000415110004,
  "byte_23": 0.00020755500207555002,
  "byte_a0": 0.00809464508094645,
  "byte_8d": 0.00041511000415110004,
  "byte_97": 0.0006226650062266501,
  "byte_ec": 0.0010377750103777502,
  "byte_3c": 0.0008302200083022001,
  "byte_e5": 0.0008302200083022001,
  "byte_67": 0.0010377750103777502,
  "byte_32": 0.0008302200083022001,
  "byte_46": 0.00041511000415110004,
  "byte_88": 0.0018679950186799503,
  "byte_7d": 0.00020755500207555002,
  "byte_28": 0.00020755500207555002,
  "byte_13": 0.0006226650062266501,
  "byte_90": 0.030718140307181403,
  "byte_5b": 0.04711498547114985,
  "byte_e2": 0.0006226650062266501,
  "byte_4a": 0.00041511000415110004,
  "byte_6b": 0.0010377750103777502,
  "byte_6e": 0.0006226650062266501,
  "byte_3b": 0.0014528850145288502,
  "byte_4b": 0.00041511000415110004,
  "byte_eb": 0.0006226650062266501,
  "byte_a5": 0.0006226650062266501,
  "byte_d7": 0.00020755500207555002,
  "byte_19": 0.00394354503943545,
  "byte_b8": 0.0008302200083022001,
  "byte_42": 0.0006226650062266501,
  "byte_e1": 0.0008302200083022001,
  "byte_5c": 0.0008302200083022001,
  "byte_74": 0.00020755500207555002,
  "byte_cb": 0.0008302200083022001,
  "byte_48": 0.00020755500207555002,
  "byte_3a": 0.00041511000415110004,
  "byte_d4": 0.00041511000415110004,
  "byte_fa": 0.00020755500207555002,
  "byte_4d": 0.00041511000415110004,
  "byte_ba": 0.00041511000415110004,
  "byte_a1": 0.0006226650062266501,
  "byte_af": 0.0010377750103777502,
  "byte_43": 0.0008302200083022001,
  "byte_20": 0.013906185139061852,
  "byte_6a": 0.00041511000415110004,
  "byte_5e": 0.00020755500207555002,
  "byte_26": 0.00041511000415110004,
  "byte_50": 0.025944375259443753,
  "byte_33": 0.0029057700290577005,
  "byte_6f": 0.0008302200083022001,
  "byte_e9": 0.00041511000415110004,
  "byte_f6": 0.0006226650062266501,
  "byte_70": 0.0008302200083022001,
  "byte_82": 0.011000415110004151,
  "byte_71": 0.0006226650062266501,
  "byte_f9": 0.00041511000415110004,
  "byte_89": 0.00020755500207555002,
  "byte_7b": 0.00020755500207555002,
  "byte_84": 0.004773765047737651,
  "byte_da": 0.0008302200083022001,
  "byte_8e": 0.00041511000415110004,
  "byte_95": 0.0010377750103777502,
  "byte_d8": 0.0006226650062266501,
  "byte_41": 0.0008302200083022001,
  "byte_b4": 0.0006226650062266501,
  "byte_0c": 0.005396430053964301,
  "byte_c7": 0.0008302200083022001,
  "byte_b2": 0.00020755500207555002,
  "byte_87": 0.0018679950186799503,
  "byte_79": 0.0006226650062266501,
  "byte_b9": 0.00041511000415110004,
  "byte_0b": 0.0043586550435865505,
  "byte_ed": 0.00020755500207555002,
  "byte_c1": 0.0006226650062266501,
  "byte_05": 0.0035284350352843504,
  "byte_91": 0.013075965130759652,
  "byte_25": 0.0010377750103777502,
  "byte_93": 0.00394354503943545,
  "byte_e6": 0.0006226650062266501,
  "byte_08": 0.0024906600249066002,
  "byte_a6": 0.00020755500207555002,
  "byte_0f": 0.005396430053964301,
  "byte_d9": 0.00041511000415110004,
  "byte_c5": 0.00020755500207555002,
  "byte_f1": 0.0016604400166044002,
  "byte_4c": 0.0006226650062266501,
  "byte_a8": 0.0006226650062266501,
  "byte_85": 0.00394354503943545,
  "byte_f2": 0.0008302200083022001,
  "byte_e3": 0.0008302200083022001,
  "byte_8b": 0.00041511000415110004,
  "byte_f4": 0.00041511000415110004,
  "byte_f7": 0.0010377750103777502,
  "byte_fb": 0.00041511000415110004,
  "byte_22": 0.00041511000415110004,
  "byte_38": 0.00041511000415110004,
  "byte_07": 0.0037359900373599006,
  "byte_a3": 0.0008302200083022001,
  "byte_56": 0.023453715234537154,
  "byte_11": 0.00809464508094645,
  "byte_fe": 0.0045662100456621,
  "byte_f3": 0.0018679950186799503,
  "byte_34": 0.0078870900788709,
  "byte_09": 0.0033208800332088003,
  "byte_75": 0.0006226650062266501,
  "byte_51": 0.012038190120381901,
  "byte_83": 0.008717310087173101,
  "byte_44": 0.0010377750103777502,
  "byte_2c": 0.00020755500207555002,
  "byte_1f": 0.00228310502283105,
  "byte_92": 0.006434205064342051,
  "byte_8a": 0.0006226650062266501,
  "byte_9e": 0.00394354503943545,
  "byte_bb": 0.00041511000415110004,
  "byte_2b": 0.0006226650062266501,
  "byte_45": 0.00041511000415110004,
  "byte_12": 0.00394354503943545,
  "byte_47": 0.0018679950186799503,
  "byte_59": 0.0006226650062266501,
  "byte_66": 0.00020755500207555002,
  "byte_3e": 0.0006226650062266501,
  "byte_86": 0.0037359900373599006,
  "byte_bc": 0.00020755500207555002,
  "byte_99": 0.00041511000415110004,
  "byte_c2": 0.00041511000415110004,
  "byte_ac": 0.00041511000415110004,
  "byte_bf": 0.00041511000415110004,
  "byte_d2": 0.00020755500207555002,
  "byte_53": 0.0006226650062266501,
  "byte_f8": 0.00020755500207555002,
  "byte_24": 0.0010377750103777502,
  "byte_37": 0.0006226650062266501,
  "byte_94": 0.0012453300124533001,
  "byte_96": 0.0008302200083022001,
  "byte_0e": 0.0035284350352843504,
  "byte_4f": 0.0006226650062266501,
  "byte_b1": 0.00041511000415110004,
  "byte_7a": 0.0010377750103777502,
  "byte_d0": 0.0008302200083022001,
  "byte_8c": 0.00041511000415110004,
  "byte_98": 0.0006226650062266501,
  "byte_2d": 0.00041511000415110004,
  "byte_6c": 0.00020755500207555002,
  "byte_72": 0.00041511000415110004,
  "byte_17": 0.0024906600249066002,
  "byte_55": 0.005396430053964301,
  "byte_9a": 0.00041511000415110004,
  "byte_ad": 0.0006226650062266501,
  "byte_3d": 0.00041511000415110004,
  "byte_5f": 0.00020755500207555002,
  "byte_c6": 0.0010377750103777502,
  "byte_5a": 0.0010377750103777502,
  "byte_9f": 0.00041511000415110004,
  "byte_ca": 0.00041511000415110004,
  "byte_69": 0.00020755500207555002,
  "byte_a2": 0.00041511000415110004,
  "byte_39": 0.00020755500207555002,
  "byte_65": 0.0006226650062266501,
  "byte_ee": 0.00041511000415110004,
  "byte_73": 0.0006226650062266501,
  "byte_ae": 0.00020755500207555002,
  "byte_cc": 0.00041511000415110004,
  "byte_21": 0.0006226650062266501,
  "byte_9c": 0.00041511000415110004,
  "byte_77": 0.00020755500207555002,
  "byte_cd": 0.00041511000415110004,
  "byte_1e": 0.00041511000415110004,
  "byte_8f": 0.00041511000415110004,
  "byte_2e": 0.00041511000415110004,
  "byte_68": 0.00020755500207555002,
  "byte_b3": 0.00020755500207555002,
  "byte_c8": 0.00020755500207555002,
  "byte_a4": 0.00020755500207555002,
  "byte_49": 0.00020755500207555002,
  "byte_64": 0.00020755500207555002,
  "byte_9d": 0.00020755500207555002,
  "byte_d1": 0.00041511000415110004,
  "byte_d5": 0.00020755500207555002,
  "byte_7c": 0.00041511000415110004,
  "byte_62": 0.00020755500207555002,
  "byte_30": 0.00020755500207555002,
  "byte_5d": 0.00020755500207555002,
  "byte_a9": 0.00020755500207555002,
  "byte_a7": 0.00020755500207555002,
  "byte_29": 0.00041511000415110004,
  "byte_ea": 0.00020755500207555002,
  "byte_f0": 0.00020755500207555002,
  "num_nodes": 3,
  "num_edges": 3,
  "avg_degree": 2.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 5,
  "event_nums": 1,
  "creation_block": 4308743,
  "creation_timestamp": 1506292689,
  "life_time": 323489.0,
  "duration_seconds": 5501007.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 2,
  "num_sellers": 3,
  "num_creator_transfers": 1,
  "buy_amt": 9e+17,
  "sell_amt": 9e+17,
  "avg_value": 3e+17,
  "txn_per_block": 1.545642832854184e-05,
  "avg_gas_limit": 413172.0,
  "std_gas_limit": 697011.1501288915,
  "avg_gas_used": 410444.0,
  "std_gas_used": 698540.6461436586,
  "avg_gas_price": 15400000000.0,
  "std_gas_price": 8014985963.805552,
  "purchased_num": 1,
  "advancestate_num": 1,
  "cleanup_num": 1,
  "timeline_sequence": [
    [
      4308743,
      1506292689,
      1,
      50,
      0,
      1799061,
      15000000000,
      0,
      0,
      4202175,
      1799060,
      18806613
    ],
    [
      4310406,
      1506343453,
      3,
      123,
      0,
      28579,
      21000000000,
      0,
      0,
      2746989,
      28578,
      18804950
    ],
    [
      4312190,
      1506397026,
      0,
      203,
      900000000000000000,
      210943,
      21000000000,
      0,
      0,
      5782117,
      210943,
      18803166
    ],
    [
      4632232,
      1511793696,
      24,
      111,
      0,
      27277,
      20000000000,
      0,
      1,
      4320716,
      13639,
      18483124
    ],
    [
      4632232,
      1511793696,
      0,
      0,
      900000000000000000,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.17;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ninterface ManagedToken{\n    function setLock(bool _newLockState) public returns (bool success);\n    function mint(address _for, uint256 _amount) public returns (bool success);\n    function demint(address _for, uint256 _amount) public returns (bool success);\n    function decimals() constant public returns (uint8 decDigits);\n    function totalSupply() constant public returns (uint256 supply);\n    function balanceOf(address _owner) constant public returns (uint256 balance);\n}\n  \ncontract HardcodedCrowdsale {\n    using SafeMath for uint256;\n\n    //global definisions\n\n    enum ICOStateEnum {NotStarted, Started, Refunded, Successful}\n\n\n    address public owner = msg.sender;\n    ManagedToken public managedTokenLedger;\n\n    string public name = \"MDBlockchainPreICO\";\n    string public symbol = \"MDB\";\n\n    bool public unlocked = false;\n    bool public halted = false;\n\n    uint256 public totalSupply = 0;\n    \n    uint256 public minTokensToBuy = 1000;\n    \n    uint256 public preICOcontributors = 0;\n    uint256 public ICOcontributors = 0;\n\n    uint256 public preICOstart;\n    uint256 public preICOend;\n    uint256 public preICOgoal;\n    uint256 public preICOcollected = 0;\n    uint256 public preICOcap = 0 ether;\n    uint256 public preICOtokensSold = 0;\n    ICOStateEnum public preICOstate = ICOStateEnum.NotStarted;\n    \n    uint8 public decimals = 18;\n    uint256 public DECIMAL_MULTIPLIER = 10**uint256(decimals);\n\n    uint256[3] public preICOrates = [uint(1 ether).div(1600), uint(1 ether).div(1400), uint(1 ether).div(1200)];\n    uint256[3] public preICOcoinsLeft = [7000000*DECIMAL_MULTIPLIER, 14000000*DECIMAL_MULTIPLIER, 21000000*DECIMAL_MULTIPLIER];\n    uint256 public totalPreICOavailible = 42000000*DECIMAL_MULTIPLIER;\n\n    mapping(address => uint256) public weiForRefundPreICO;\n\n    mapping(address => uint256) public weiToRecoverPreICO;\n\n    mapping(address => uint256) public balancesForPreICO;\n\n    event Purchased(address indexed _from, uint256 _value);\n\n    function advanceState() public returns (bool success) {\n        transitionState();\n        return true;\n    }\n\n    function transitionState() internal {\n        if (now >= preICOstart) {\n            if (preICOstate == ICOStateEnum.NotStarted) {\n                preICOstate = ICOStateEnum.Started;\n            }\n            if (preICOcap > 0 && preICOcollected >= preICOcap) {\n                preICOstate = ICOStateEnum.Successful;\n            }\n            if (preICOtokensSold == totalPreICOavailible) {\n                preICOstate = ICOStateEnum.Successful;\n            }\n        } if (now >= preICOend) {\n            if (preICOstate == ICOStateEnum.Started) {\n                if (preICOcollected >= preICOgoal) {\n                    preICOstate = ICOStateEnum.Successful;\n                } else {\n                    preICOstate = ICOStateEnum.Refunded;\n                }\n            }\n        } \n    }\n\n    modifier stateTransition() {\n        transitionState();\n        _;\n        transitionState();\n    }\n\n    modifier requirePreICOState(ICOStateEnum _state) {\n        require(preICOstate == _state);\n        _;\n    }\n\n    modifier notHalted() {\n        require(!halted);\n        _;\n    }\n\n    // Ownership\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));      \n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function balanceOf(address _owner) constant public returns (uint256 balance) {\n        return managedTokenLedger.balanceOf(_owner);\n    }\n\n\n    function HardcodedCrowdsale (uint _preICOstart, uint _preICOend, uint _preICOgoal, uint _preICOcap, address _newLedgerAddress) public {\n        require(_preICOstart > now);\n        require(_preICOend > _preICOstart);\n        require(_preICOgoal > 0);\n        require(_newLedgerAddress != address(0));\n        preICOstart = _preICOstart;\n        preICOend = _preICOend;\n        preICOgoal = _preICOgoal;\n        preICOcap = _preICOcap;\n        managedTokenLedger = ManagedToken(_newLedgerAddress);\n        decimals = managedTokenLedger.decimals();\n        DECIMAL_MULTIPLIER = 10**uint256(decimals);\n    }\n\n    function setNameAndTicker(string _name, string _symbol) onlyOwner public returns (bool success) {\n        require(bytes(_name).length > 1);\n        require(bytes(_symbol).length > 1);\n        name = _name;\n        symbol = _symbol;\n        return true;\n    }\n\n    function setLedger (address _newLedgerAddress) onlyOwner public returns (bool success) {\n        require(_newLedgerAddress != address(0));\n        managedTokenLedger = ManagedToken(_newLedgerAddress);\n        decimals = managedTokenLedger.decimals();\n        DECIMAL_MULTIPLIER = 10**uint256(decimals);\n        return true;\n    }\n\n    function () payable stateTransition notHalted public {\n        if (preICOstate == ICOStateEnum.Started) {\n            assert(preICOBuy());\n        } else {\n            revert();\n        }\n    }\n\n    function transferPreICOCollected() onlyOwner stateTransition public returns (bool success) {\n        require(preICOstate == ICOStateEnum.Successful);\n        owner.transfer(preICOcollected);\n        return true;\n    }\n\n    function setHalt(bool _halt) onlyOwner public returns (bool success) {\n        halted = _halt;\n        return true;\n    }\n\n    function calculateAmountBoughtPreICO(uint256 _weisSentScaled) internal returns (uint256 _tokensToBuyScaled, uint256 _weisLeftScaled) {\n        uint256 value = _weisSentScaled;\n        uint256 totalPurchased = 0;\n        for (uint8 i = 0; i < preICOrates.length; i++) {\n            if (preICOcoinsLeft[i] == 0) {\n                continue;\n            }\n            uint256 rate = preICOrates[i];\n            uint256 forThisRate = value.div(rate);\n            if (forThisRate == 0) {\n                break;\n            }\n            if (forThisRate > preICOcoinsLeft[i]) {\n                forThisRate = preICOcoinsLeft[i];\n                preICOcoinsLeft[i] = 0;\n            } else {\n                preICOcoinsLeft[i] = preICOcoinsLeft[i].sub(forThisRate);\n            }\n            uint256 consumed = forThisRate.mul(rate);\n            value = value.sub(consumed);\n            totalPurchased = totalPurchased.add(forThisRate);\n        }\n        return (totalPurchased, value);\n    }\n\n    function preICOBuy() internal notHalted returns (bool success) {\n        uint256 weisSentScaled = msg.value.mul(DECIMAL_MULTIPLIER);\n        address _for = msg.sender;\n        var (tokensBought, fundsLeftScaled) = calculateAmountBoughtPreICO(weisSentScaled);\n        if (tokensBought < minTokensToBuy.mul(DECIMAL_MULTIPLIER)) {\n            revert();\n        }\n        uint256 fundsLeft = fundsLeftScaled.div(DECIMAL_MULTIPLIER);\n        uint256 totalSpent = msg.value.sub(fundsLeft);\n        if (balanceOf(_for) == 0) {\n            preICOcontributors = preICOcontributors + 1;\n        }\n        managedTokenLedger.mint(_for, tokensBought);\n        balancesForPreICO[_for] = balancesForPreICO[_for].add(tokensBought);\n        weiForRefundPreICO[_for] = weiForRefundPreICO[_for].add(totalSpent);\n        weiToRecoverPreICO[_for] = weiToRecoverPreICO[_for].add(fundsLeft);\n        Purchased(_for, tokensBought);\n        preICOcollected = preICOcollected.add(totalSpent);\n        totalSupply = totalSupply.add(tokensBought);\n        preICOtokensSold = preICOtokensSold.add(tokensBought);\n        return true;\n    }\n\n    function recoverLeftoversPreICO() stateTransition notHalted public returns (bool success) {\n        require(preICOstate != ICOStateEnum.NotStarted);\n        uint256 value = weiToRecoverPreICO[msg.sender];\n        delete weiToRecoverPreICO[msg.sender];\n        msg.sender.transfer(value);\n        return true;\n    }\n\n    function refundPreICO() stateTransition requirePreICOState(ICOStateEnum.Refunded) notHalted \n        public returns (bool success) {\n            uint256 value = weiForRefundPreICO[msg.sender];\n            delete weiForRefundPreICO[msg.sender];\n            uint256 tokenValue = balancesForPreICO[msg.sender];\n            delete balancesForPreICO[msg.sender];\n            managedTokenLedger.demint(msg.sender, tokenValue);\n            msg.sender.transfer(value);\n            return true;\n    }\n\n    function cleanup() onlyOwner public {\n        selfdestruct(owner);\n    }\n\n}"
}