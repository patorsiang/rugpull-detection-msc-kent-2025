{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP5 DUP7 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP7 SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 DUP2 MSTORE DUP3 DUP3 SHA3 CALLER DUP4 MSTORE SWAP1 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP7 AND DUP2 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP9 AND SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 PUSH32 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG2 PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND SWAP2 PUSH1 SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 SWAP2 PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP1 DUP4 GT ISZERO PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SSTORE JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH32 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT STOP UNKNOWN_0xdd CALLCODE MSTORE UNKNOWN_0xad SHL UNKNOWN_0xe2 UNKNOWN_0xc8 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef LOG1 PUSH6 SHA3 UNKNOWN_0x29 SHR UNKNOWN_0xc4 SSTORE CALLDATACOPY SWAP5 CALLCODE UNKNOWN_0xbe BYTE UNKNOWN_0xe6 RETURNDATACOPY EXTCODECOPY SWAP3 UNKNOWN_0xe7 UNKNOWN_0xe3 UNKNOWN_0xb7 UNKNOWN_0xd9 UNKNOWN_0xc1 SWAP14 UNKNOWN_0xb4 SWAP12 UNKNOWN_0xe8 LOG0 UNKNOWN_0xe1 UNOFFICIAL_SWAP UNKNOWN_0x22 PUSH2 UNKNOWN_0xc8 UNKNOWN_0xa8 UNKNOWN_0xcc STOP UNKNOWN_0x29",
  "opcode_entropy": 4.862599794864245,
  "opcode_count": 2053,
  "unique_opcodes": 90,
  "byte_entropy": 5.779942318179986,
  "byte_60": 0.12103843560350641,
  "byte_80": 0.039447066756574514,
  "byte_40": 0.012137559002022926,
  "byte_52": 0.03506405933917734,
  "byte_04": 0.009440323668240054,
  "byte_36": 0.00033715441672285906,
  "byte_10": 0.0016857720836142953,
  "byte_61": 0.041132838840188805,
  "byte_00": 0.04248145650708024,
  "byte_cf": 0.0006743088334457181,
  "byte_57": 0.019554956169925825,
  "byte_63": 0.009777478084962913,
  "byte_ff": 0.017194875252865813,
  "byte_7c": 0.0006743088334457181,
  "byte_01": 0.038772757923128794,
  "byte_35": 0.006068779501011463,
  "byte_16": 0.023263654753877275,
  "byte_06": 0.006068779501011463,
  "byte_fd": 0.012811867835468645,
  "byte_de": 0.0006743088334457181,
  "byte_03": 0.027309507754551585,
  "byte_81": 0.033715441672285906,
  "byte_14": 0.0064059339177343225,
  "byte_d4": 0.0006743088334457181,
  "byte_09": 0.0026972353337828725,
  "byte_5e": 0.0010114632501685772,
  "byte_a7": 0.0006743088334457181,
  "byte_b3": 0.0020229265003371545,
  "byte_18": 0.0010114632501685772,
  "byte_0d": 0.00033715441672285906,
  "byte_dd": 0.0026972353337828725,
  "byte_96": 0.0010114632501685772,
  "byte_23": 0.0013486176668914363,
  "byte_b8": 0.00033715441672285906,
  "byte_72": 0.0006743088334457181,
  "byte_bd": 0.0006743088334457181,
  "byte_31": 0.0006743088334457181,
  "byte_3c": 0.0010114632501685772,
  "byte_e5": 0.0013486176668914363,
  "byte_67": 0.0006743088334457181,
  "byte_e7": 0.0006743088334457181,
  "byte_3e": 0.0010114632501685772,
  "byte_aa": 0.0010114632501685772,
  "byte_f8": 0.00033715441672285906,
  "byte_6b": 0.0006743088334457181,
  "byte_02": 0.022589345920431558,
  "byte_12": 0.0010114632501685772,
  "byte_c1": 0.0006743088334457181,
  "byte_0f": 0.0010114632501685772,
  "byte_19": 0.0013486176668914363,
  "byte_27": 0.00033715441672285906,
  "byte_42": 0.0013486176668914363,
  "byte_6c": 0.0010114632501685772,
  "byte_68": 0.0010114632501685772,
  "byte_4b": 0.0016857720836142953,
  "byte_66": 0.00033715441672285906,
  "byte_84": 0.008766014834794335,
  "byte_65": 0.0006743088334457181,
  "byte_70": 0.00033715441672285906,
  "byte_a0": 0.01449763991908294,
  "byte_82": 0.015509103169251517,
  "byte_89": 0.0013486176668914363,
  "byte_95": 0.0013486176668914363,
  "byte_d8": 0.00033715441672285906,
  "byte_9b": 0.0010114632501685772,
  "byte_41": 0.0013486176668914363,
  "byte_a9": 0.0006743088334457181,
  "byte_05": 0.008428860418071477,
  "byte_9c": 0.00033715441672285906,
  "byte_bb": 0.0006743088334457181,
  "byte_bf": 0.00033715441672285906,
  "byte_d7": 0.00033715441672285906,
  "byte_3d": 0.00033715441672285906,
  "byte_d6": 0.00033715441672285906,
  "byte_e3": 0.0010114632501685772,
  "byte_62": 0.0006743088334457181,
  "byte_ed": 0.0006743088334457181,
  "byte_07": 0.0023600809170600135,
  "byte_5b": 0.03337828725556305,
  "byte_34": 0.0050573162508428865,
  "byte_15": 0.01449763991908294,
  "byte_e0": 0.0006743088334457181,
  "byte_50": 0.018543492919757248,
  "byte_e9": 0.0006743088334457181,
  "byte_2e": 0.00033715441672285906,
  "byte_56": 0.01449763991908294,
  "byte_51": 0.013486176668914362,
  "byte_20": 0.02933243425488874,
  "byte_83": 0.019892110586648686,
  "byte_91": 0.018543492919757248,
  "byte_92": 0.011800404585300068,
  "byte_90": 0.05158462575859744,
  "byte_85": 0.0050573162508428865,
  "byte_0b": 0.0057316250842886045,
  "byte_1f": 0.0023600809170600135,
  "byte_0a": 0.016183412002697236,
  "byte_f3": 0.0026972353337828725,
  "byte_6a": 0.00033715441672285906,
  "byte_24": 0.0023600809170600135,
  "byte_a2": 0.0013486176668914363,
  "byte_ab": 0.0016857720836142953,
  "byte_47": 0.00033715441672285906,
  "byte_c9": 0.00033715441672285906,
  "byte_44": 0.0010114632501685772,
  "byte_4d": 0.0006743088334457181,
  "byte_fc": 0.0006743088334457181,
  "byte_1e": 0.0030343897505057315,
  "byte_33": 0.0064059339177343225,
  "byte_e8": 0.0006743088334457181,
  "byte_71": 0.0016857720836142953,
  "byte_08": 0.0020229265003371545,
  "byte_f6": 0.00033715441672285906,
  "byte_b6": 0.00033715441672285906,
  "byte_11": 0.004383007417397168,
  "byte_cb": 0.00033715441672285906,
  "byte_ef": 0.0006743088334457181,
  "byte_4a": 0.00033715441672285906,
  "byte_13": 0.0006743088334457181,
  "byte_fa": 0.00033715441672285906,
  "byte_54": 0.009777478084962913,
  "byte_86": 0.0026972353337828725,
  "byte_94": 0.0033715441672285905,
  "byte_93": 0.0057316250842886045,
  "byte_88": 0.0016857720836142953,
  "byte_d2": 0.00033715441672285906,
  "byte_df": 0.00033715441672285906,
  "byte_55": 0.004720161834120027,
  "byte_7f": 0.0016857720836142953,
  "byte_8c": 0.0010114632501685772,
  "byte_e1": 0.0013486176668914363,
  "byte_eb": 0.0010114632501685772,
  "byte_ec": 0.0010114632501685772,
  "byte_7d": 0.0026972353337828725,
  "byte_d1": 0.0010114632501685772,
  "byte_4f": 0.0010114632501685772,
  "byte_c0": 0.0010114632501685772,
  "byte_f7": 0.0010114632501685772,
  "byte_b2": 0.0013486176668914363,
  "byte_29": 0.0016857720836142953,
  "byte_c8": 0.0016857720836142953,
  "byte_c7": 0.0010114632501685772,
  "byte_c3": 0.0013486176668914363,
  "byte_b9": 0.0010114632501685772,
  "byte_25": 0.0030343897505057315,
  "byte_a3": 0.0023600809170600135,
  "byte_64": 0.00033715441672285906,
  "byte_79": 0.0006743088334457181,
  "byte_db": 0.0006743088334457181,
  "byte_3a": 0.0020229265003371545,
  "byte_39": 0.0020229265003371545,
  "byte_32": 0.0006743088334457181,
  "byte_98": 0.00033715441672285906,
  "byte_a5": 0.0006743088334457181,
  "byte_bc": 0.00033715441672285906,
  "byte_fe": 0.0006743088334457181,
  "byte_73": 0.0006743088334457181,
  "byte_4c": 0.0006743088334457181,
  "byte_0e": 0.00033715441672285906,
  "byte_21": 0.00033715441672285906,
  "byte_2b": 0.0006743088334457181,
  "byte_78": 0.00033715441672285906,
  "byte_cc": 0.0013486176668914363,
  "byte_f5": 0.0010114632501685772,
  "byte_b4": 0.0006743088334457181,
  "byte_87": 0.0010114632501685772,
  "byte_5c": 0.00033715441672285906,
  "byte_9d": 0.0006743088334457181,
  "byte_7a": 0.0010114632501685772,
  "byte_b7": 0.0006743088334457181,
  "byte_5d": 0.00033715441672285906,
  "byte_ac": 0.00033715441672285906,
  "byte_f2": 0.0006743088334457181,
  "byte_ad": 0.00033715441672285906,
  "byte_1b": 0.00033715441672285906,
  "byte_e2": 0.00033715441672285906,
  "byte_69": 0.00033715441672285906,
  "byte_c2": 0.00033715441672285906,
  "byte_b0": 0.00033715441672285906,
  "byte_37": 0.0006743088334457181,
  "byte_8d": 0.00033715441672285906,
  "byte_f1": 0.00033715441672285906,
  "byte_c4": 0.0006743088334457181,
  "byte_a1": 0.0006743088334457181,
  "byte_28": 0.00033715441672285906,
  "byte_5a": 0.00033715441672285906,
  "byte_30": 0.00033715441672285906,
  "byte_58": 0.00033715441672285906,
  "byte_1c": 0.0006743088334457181,
  "byte_be": 0.00033715441672285906,
  "byte_1a": 0.00033715441672285906,
  "byte_e6": 0.00033715441672285906,
  "byte_d9": 0.00033715441672285906,
  "byte_22": 0.00033715441672285906,
  "byte_1d": 0.00033715441672285906,
  "byte_a8": 0.00033715441672285906,
  "num_nodes": 155,
  "num_edges": 126,
  "avg_degree": 1.6258064516129032,
  "density": 0.005278592375366569,
  "connected_components": 36,
  "avg_clustering": 0.0,
  "timeline_sequence": [],
  "sourcecode": "pragma solidity ^0.4.20;\n\n\n// ----------------------------------------------------------------------------\n// RingDEX Token Burnable/Mintable token contract\n//\n// Symbol           : RDEX\n// Name             : RingDEX Token\n// Total Supply     : 1,000,000\n// Decimals         : 8\n// ----------------------------------------------------------------------------\n\n// ----------------------------------------------------------------------------\n// Safe math\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals and an\n// initial fixed supply\n// ----------------------------------------------------------------------------\ncontract RingDEXToken is ERC20Interface {\n    \n    using SafeMath for uint;\n\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n    address owner;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address => uint)) allowed;\n    \n    \n    event Mint(address indexed to, uint256 amount);\n    event Burn(address indexed burner, uint256 value);\n    \n    \n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    constructor() public {\n        symbol = \"RDEX\";\n        name = \"RingDEX Token\";\n        decimals = 8;\n        _totalSupply = 1000000 * 10**uint(decimals);\n        owner = msg.sender;\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Reject when someone sends ethers to this contract\n    // ------------------------------------------------------------------------\n    function() public payable {\n        revert();\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public view returns (uint) {\n        return _totalSupply;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) public returns (bool success) {\n        require(to != address(0));\n        require(tokens > 0);\n        require(balances[msg.sender] >= tokens);\n        \n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces \n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        require(spender != address(0));\n        require(tokens > 0);\n        \n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    // \n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n        require(from != address(0));\n        require(to != address(0));\n        require(tokens > 0);\n        require(balances[from] >= tokens);\n        require(allowed[from][msg.sender] >= tokens);\n        \n        balances[from] = balances[from].sub(tokens);\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n        balances[to] = balances[to].add(tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Increase the amount of tokens that an owner allowed to a spender.\n    //\n    // approve should be called when allowed[_spender] == 0. To increment\n    // allowed value is better to use this function to avoid 2 calls (and wait until\n    // the first transaction is mined)\n    // _spender The address which will spend the funds.\n    // _addedValue The amount of tokens to increase the allowance by.\n    // ------------------------------------------------------------------------\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        require(_spender != address(0));\n        \n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Decrease the amount of tokens that an owner allowed to a spender.\n    //\n    // approve should be called when allowed[_spender] == 0. To decrement\n    // allowed value is better to use this function to avoid 2 calls (and wait until\n    // the first transaction is mined)\n    // From MonolithDAO Token.sol\n    // _spender The address which will spend the funds.\n    // _subtractedValue The amount of tokens to decrease the allowance by.\n    // ------------------------------------------------------------------------\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        require(_spender != address(0));\n        \n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Function to mint tokens\n    // _to The address that will receive the minted tokens.\n    // _value The amount of tokens to mint.\n    // A boolean that indicates if the operation was successful.\n    // ------------------------------------------------------------------------\n    function mint(address _to, uint256 _value) onlyOwner public returns (bool) {\n        require(_to != address(0));\n        require(_value > 0);\n        \n        _totalSupply = _totalSupply.add(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Mint(_to, _value);\n        emit Transfer(address(0), _to, _value);\n        return true;\n    }\n    \n    \n    // ------------------------------------------------------------------------\n    // Function to burn tokens\n    // _value The amount of tokens to burn.\n    // A boolean that indicates if the operation was successful.\n    // ------------------------------------------------------------------------\n    function burn(uint256 _value) onlyOwner public {\n      require(_value > 0);\n      require(_value <= balances[msg.sender]);\n      \n      address burner = msg.sender;\n      balances[burner] = balances[burner].sub(_value);\n      _totalSupply = _totalSupply.sub(_value);\n      emit Burn(burner, _value);\n      emit Transfer(burner, address(0), _value);\n    }\n\n}"
}