{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 PUSH2 JUMP JUMPDEST ISZERO DUP1 PUSH2 JUMPI POP DUP2 ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH4 PUSH1 SLOAD PUSH2 JUMP JUMPDEST DUP3 GT ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD CALLER SWAP2 PUSH1 SWAP2 PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND ADDRESS EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP5 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD DUP5 SWAP1 MSTORE SWAP2 MLOAD DUP6 SWAP3 DUP4 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND DUP3 MSTORE DUP6 AND PUSH1 DUP3 ADD MSTORE DUP1 DUP3 ADD DUP5 SWAP1 MSTORE SWAP1 MLOAD PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 SHA3 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 DUP3 GT DUP1 ISZERO PUSH2 JUMPI POP DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP2 MSTORE SWAP1 DUP2 SWAP1 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SSTORE JUMPDEST DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 DUP3 GT DUP1 ISZERO PUSH2 JUMPI POP CALLER PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SSTORE JUMPDEST PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND SWAP2 CALLER SWAP2 PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 ADD SWAP13 UNKNOWN_0xe7 SWAP10 UNKNOWN_0xb9 UNKNOWN_0x2b DUP5 UNKNOWN_0xd2 ADDMOD UNKNOWN_0x26 UNKNOWN_0xeb UNKNOWN_0xae PUSH21",
  "opcode_entropy": 4.727744400538046,
  "opcode_count": 1871,
  "unique_opcodes": 67,
  "byte_entropy": 5.906523970962759,
  "byte_60": 0.1128759716120311,
  "byte_80": 0.036160865157147684,
  "byte_40": 0.012504224400135181,
  "byte_52": 0.027712064886786077,
  "byte_04": 0.012166272389320717,
  "byte_36": 0.0013518080432578573,
  "byte_10": 0.0016897600540723217,
  "byte_61": 0.04427171341669483,
  "byte_00": 0.0682663061845218,
  "byte_da": 0.0006759040216289286,
  "byte_57": 0.02331868874619804,
  "byte_63": 0.0070969922271037515,
  "byte_ff": 0.011490368367691788,
  "byte_7c": 0.0003379520108144643,
  "byte_01": 0.034809057113889826,
  "byte_35": 0.006759040216289287,
  "byte_16": 0.022304832713754646,
  "byte_50": 0.026022304832713755,
  "byte_24": 0.003041568097330179,
  "byte_81": 0.027036160865157147,
  "byte_14": 0.01013856032443393,
  "byte_df": 0.0006759040216289286,
  "byte_06": 0.003041568097330179,
  "byte_fd": 0.011152416356877323,
  "byte_de": 0.001013856032443393,
  "byte_03": 0.024670496789455897,
  "byte_f6": 0.0006759040216289286,
  "byte_09": 0.0023656640757012504,
  "byte_5e": 0.0003379520108144643,
  "byte_a7": 0.002027712064886786,
  "byte_b3": 0.0013518080432578573,
  "byte_13": 0.0006759040216289286,
  "byte_af": 0.0016897600540723217,
  "byte_b8": 0.0016897600540723217,
  "byte_18": 0.0006759040216289286,
  "byte_0d": 0.0013518080432578573,
  "byte_dd": 0.0023656640757012504,
  "byte_d9": 0.0006759040216289286,
  "byte_23": 0.0016897600540723217,
  "byte_72": 0.001013856032443393,
  "byte_02": 0.022980736735383575,
  "byte_31": 0.0013518080432578573,
  "byte_3c": 0.0006759040216289286,
  "byte_e5": 0.001013856032443393,
  "byte_67": 0.0003379520108144643,
  "byte_2a": 0.0013518080432578573,
  "byte_c4": 0.002027712064886786,
  "byte_20": 0.02095302467049679,
  "byte_d4": 0.001013856032443393,
  "byte_55": 0.004393376140588037,
  "byte_70": 0.0006759040216289286,
  "byte_a0": 0.013856032443393038,
  "byte_82": 0.013180128421764109,
  "byte_6a": 0.0013518080432578573,
  "byte_7e": 0.001013856032443393,
  "byte_1f": 0.0006759040216289286,
  "byte_2b": 0.0016897600540723217,
  "byte_8b": 0.0006759040216289286,
  "byte_89": 0.0003379520108144643,
  "byte_51": 0.011828320378506252,
  "byte_9c": 0.0023656640757012504,
  "byte_a3": 0.0016897600540723217,
  "byte_95": 0.0013518080432578573,
  "byte_d8": 0.001013856032443393,
  "byte_9b": 0.0013518080432578573,
  "byte_41": 0.001013856032443393,
  "byte_cd": 0.0006759040216289286,
  "byte_a9": 0.0013518080432578573,
  "byte_05": 0.0070969922271037515,
  "byte_bb": 0.001013856032443393,
  "byte_e2": 0.0013518080432578573,
  "byte_62": 0.0013518080432578573,
  "byte_ed": 0.0006759040216289286,
  "byte_3e": 0.0006759040216289286,
  "byte_e7": 0.001013856032443393,
  "byte_2d": 0.0006759040216289286,
  "byte_5b": 0.036160865157147684,
  "byte_34": 0.005407232173031429,
  "byte_15": 0.02027712064886786,
  "byte_eb": 0.0013518080432578573,
  "byte_f4": 0.0016897600540723217,
  "byte_53": 0.001013856032443393,
  "byte_56": 0.018925312605610003,
  "byte_0b": 0.0016897600540723217,
  "byte_83": 0.013180128421764109,
  "byte_91": 0.013180128421764109,
  "byte_92": 0.006421088205474822,
  "byte_90": 0.04291990537343697,
  "byte_85": 0.0033795201081446434,
  "byte_45": 0.0016897600540723217,
  "byte_0a": 0.018925312605610003,
  "byte_19": 0.0016897600540723217,
  "byte_f3": 0.002027712064886786,
  "byte_8c": 0.0013518080432578573,
  "byte_a4": 0.002027712064886786,
  "byte_e6": 0.0003379520108144643,
  "byte_1a": 0.0006759040216289286,
  "byte_ee": 0.0013518080432578573,
  "byte_0c": 0.0006759040216289286,
  "byte_44": 0.001013856032443393,
  "byte_66": 0.0006759040216289286,
  "byte_3f": 0.0003379520108144643,
  "byte_b4": 0.0006759040216289286,
  "byte_b9": 0.0013518080432578573,
  "byte_76": 0.001013856032443393,
  "byte_97": 0.0006759040216289286,
  "byte_2f": 0.001013856032443393,
  "byte_07": 0.004731328151402501,
  "byte_43": 0.0003379520108144643,
  "byte_12": 0.0003379520108144643,
  "byte_84": 0.009124704291990537,
  "byte_39": 0.0003379520108144643,
  "byte_54": 0.010814464346062858,
  "byte_33": 0.007434944237918215,
  "byte_ad": 0.0033795201081446434,
  "byte_17": 0.001013856032443393,
  "byte_7f": 0.0037174721189591076,
  "byte_5a": 0.0016897600540723217,
  "byte_cb": 0.0006759040216289286,
  "byte_ae": 0.001013856032443393,
  "byte_6d": 0.0006759040216289286,
  "byte_a8": 0.0013518080432578573,
  "byte_9a": 0.0003379520108144643,
  "byte_71": 0.0016897600540723217,
  "byte_49": 0.0006759040216289286,
  "byte_5f": 0.001013856032443393,
  "byte_86": 0.0013518080432578573,
  "byte_3d": 0.0016897600540723217,
  "byte_aa": 0.002027712064886786,
  "byte_f0": 0.001013856032443393,
  "byte_c3": 0.0006759040216289286,
  "byte_78": 0.0006759040216289286,
  "byte_a1": 0.0027036160865157146,
  "byte_47": 0.0003379520108144643,
  "byte_4f": 0.0013518080432578573,
  "byte_48": 0.001013856032443393,
  "byte_f2": 0.0013518080432578573,
  "byte_fc": 0.0013518080432578573,
  "byte_11": 0.0033795201081446434,
  "byte_08": 0.002027712064886786,
  "byte_73": 0.001013856032443393,
  "byte_9f": 0.0006759040216289286,
  "byte_a6": 0.0006759040216289286,
  "byte_93": 0.0027036160865157146,
  "byte_d0": 0.0006759040216289286,
  "byte_ba": 0.001013856032443393,
  "byte_bf": 0.0003379520108144643,
  "byte_a5": 0.001013856032443393,
  "byte_9d": 0.0003379520108144643,
  "byte_f8": 0.0003379520108144643,
  "byte_42": 0.0006759040216289286,
  "byte_db": 0.0003379520108144643,
  "byte_e0": 0.0006759040216289286,
  "byte_ce": 0.0003379520108144643,
  "byte_1b": 0.001013856032443393,
  "byte_c8": 0.0013518080432578573,
  "byte_69": 0.001013856032443393,
  "byte_c2": 0.001013856032443393,
  "byte_b0": 0.001013856032443393,
  "byte_68": 0.001013856032443393,
  "byte_37": 0.0013518080432578573,
  "byte_8d": 0.001013856032443393,
  "byte_f1": 0.0013518080432578573,
  "byte_28": 0.001013856032443393,
  "byte_f5": 0.002027712064886786,
  "byte_4d": 0.001013856032443393,
  "byte_ef": 0.0013518080432578573,
  "byte_30": 0.0006759040216289286,
  "byte_87": 0.001013856032443393,
  "byte_3b": 0.0003379520108144643,
  "byte_fa": 0.0003379520108144643,
  "byte_b5": 0.0006759040216289286,
  "byte_a2": 0.0006759040216289286,
  "byte_6e": 0.0006759040216289286,
  "byte_d3": 0.0003379520108144643,
  "byte_bc": 0.0003379520108144643,
  "byte_21": 0.0003379520108144643,
  "byte_1c": 0.0003379520108144643,
  "byte_7a": 0.001013856032443393,
  "byte_4a": 0.0006759040216289286,
  "byte_c1": 0.0003379520108144643,
  "byte_7d": 0.0013518080432578573,
  "byte_94": 0.0013518080432578573,
  "byte_c6": 0.0003379520108144643,
  "byte_dc": 0.0003379520108144643,
  "byte_38": 0.0003379520108144643,
  "byte_0f": 0.0003379520108144643,
  "byte_4e": 0.0003379520108144643,
  "byte_6f": 0.0003379520108144643,
  "byte_ac": 0.0003379520108144643,
  "byte_64": 0.0003379520108144643,
  "byte_e1": 0.0003379520108144643,
  "byte_ec": 0.0003379520108144643,
  "byte_d1": 0.0003379520108144643,
  "byte_1e": 0.0006759040216289286,
  "byte_c0": 0.0003379520108144643,
  "byte_f7": 0.0003379520108144643,
  "byte_b2": 0.0003379520108144643,
  "byte_29": 0.0006759040216289286,
  "byte_c7": 0.0003379520108144643,
  "byte_25": 0.0006759040216289286,
  "byte_bd": 0.0006759040216289286,
  "byte_3a": 0.0003379520108144643,
  "byte_d6": 0.0003379520108144643,
  "byte_fe": 0.0006759040216289286,
  "byte_65": 0.0003379520108144643,
  "byte_58": 0.0006759040216289286,
  "byte_99": 0.0003379520108144643,
  "byte_d2": 0.0003379520108144643,
  "byte_26": 0.0006759040216289286,
  "byte_74": 0.0003379520108144643,
  "byte_77": 0.0003379520108144643,
  "byte_5d": 0.0003379520108144643,
  "byte_c9": 0.0003379520108144643,
  "byte_1d": 0.0003379520108144643,
  "byte_d7": 0.0003379520108144643,
  "num_nodes": 4,
  "num_edges": 3,
  "avg_degree": 1.5,
  "density": 0.25,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 7,
  "event_nums": 6,
  "creation_block": 6414014,
  "creation_timestamp": 1538121832,
  "life_time": 106054.0,
  "duration_seconds": 1490794.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 5,
  "num_buyers": 1,
  "num_sellers": 3,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 6.600348875583424e-05,
  "avg_gas_limit": 175349.2857142857,
  "std_gas_limit": 282894.90327869327,
  "avg_gas_used": 166566.14285714287,
  "std_gas_used": 286578.8528572539,
  "avg_gas_price": 9971428571.428572,
  "std_gas_price": 1444906606.684604,
  "transfer_num": 5,
  "atinversebrah_num": 1,
  "createtokens_num": 1,
  "timeline_sequence": [
    [
      6414014,
      1538121832,
      0,
      177,
      0,
      868197,
      12000000000,
      0,
      1,
      6972115,
      868197,
      16706856
    ],
    [
      6414032,
      1538122099,
      1,
      104,
      0,
      65155,
      10000000000,
      0,
      1,
      7461954,
      65155,
      16706838
    ],
    [
      6414054,
      1538122412,
      2,
      95,
      0,
      52599,
      10000000000,
      0,
      1,
      7094776,
      52599,
      16706816
    ],
    [
      6414061,
      1538122508,
      3,
      160,
      0,
      52599,
      9900000000,
      0,
      1,
      4930606,
      37599,
      16706809
    ],
    [
      6417823,
      1538176025,
      7,
      34,
      0,
      62965,
      10000000000,
      0,
      1,
      7956801,
      52471,
      16703047
    ],
    [
      6419358,
      1538197886,
      8,
      51,
      0,
      62965,
      11000000000,
      0,
      1,
      7865903,
      52471,
      16701512
    ],
    [
      6520068,
      1539612626,
      1,
      101,
      0,
      62965,
      6900000000,
      0,
      1,
      4143539,
      37471,
      16600802
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.25;\n\n/*\n * Creator: POSH (GOPOSH) \n */\n\n/*\n * Abstract Token Smart Contract\n *\n */\n\n \n /*\n * Safe Math Smart Contract. \n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n */\n\ncontract SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n/**\n * ERC-20 standard token interface, as defined\n * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\n */\ncontract Token {\n  \n  function totalSupply() public constant returns (uint256 supply);\n  function balanceOf(address _owner) public constant returns (uint256 balance);\n  function transfer(address _to, uint256 _value) public returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n  function approve(address _spender, uint256 _value) public returns (bool success);\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts.\n */\ncontract AbstractToken is Token, SafeMath {\n  /**\n   * Create new Abstract Token contract.\n   */\n  constructor () public {\n    // Do nothing\n  }\n  \n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   * accounts [_to] + _value > accounts [_to] for overflow check\n   * which is already in safeMath\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    require(_to != address(0));\n    if (accounts [msg.sender] < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    emit Transfer (msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   * accounts [_to] + _value > accounts [_to] for overflow check\n   * which is already in safeMath\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public\n  returns (bool success) {\n    require(_to != address(0));\n    if (allowances [_from][msg.sender] < _value) return false;\n    if (accounts [_from] < _value) return false; \n\n    if (_value > 0 && _from != _to) {\n\t  allowances [_from][msg.sender] = safeSub (allowances [_from][msg.sender], _value);\n      accounts [_from] = safeSub (accounts [_from], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   * @param _spender address to allow the owner of to transfer tokens from message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n   function approve (address _spender, uint256 _value) public returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    emit Approval (msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance(address _owner, address _spender) public constant\n  returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  /**\n   * Mapping from addresses of token holders to the numbers of tokens belonging\n   * to these token holders.\n   */\n  mapping (address => uint256) accounts;\n\n  /**\n   * Mapping from addresses of token holders to the mapping of addresses of\n   * spenders to the allowances set by these token holders to these spenders.\n   */\n  mapping (address => mapping (address => uint256)) private allowances;\n  \n}\n\n\n/**\n * GOPOSH smart contract.\n */\ncontract POSHToken is AbstractToken {\n  /**\n   * Maximum allowed number of tokens in circulation.\n   * tokenSupply = tokensIActuallyWant * (10 ^ decimals)\n   */\n   \n   \n  uint256 constant MAX_TOKEN_COUNT = 8000000 * (10**2);\n   \n  /**\n   * Address of the owner of this smart contract.\n   */\n  address private owner;\n  \n  /**\n   * Frozen account list holder\n   */\n  mapping (address => bool) private frozenAccount;\n\n  /**\n   * Current number of tokens in circulation.\n   */\n  uint256 tokenCount = 0;\n  \n \n  /**\n   * True if tokens transfers are currently frozen, false otherwise.\n   */\n  bool frozen = false;\n  \n \n  /**\n   * Create new token smart contract and make msg.sender the\n   * owner of this smart contract.\n   */\n  constructor () public {\n    owner = msg.sender;\n  }\n\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply() public constant returns (uint256 supply) {\n    return tokenCount;\n  }\n\n  string constant public name = \"GOPOSH\";\n  string constant public symbol = \"POSH\";\n  uint8 constant public decimals = 2;\n  \n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n    require(!frozenAccount[msg.sender]);\n\tif (frozen) return false;\n    else return AbstractToken.transfer (_to, _value);\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public\n    returns (bool success) {\n\trequire(!frozenAccount[_from]);\n    if (frozen) return false;\n    else return AbstractToken.transferFrom (_from, _to, _value);\n  }\n\n   /**\n   * Change how many tokens given spender is allowed to transfer from message\n   * spender.  In order to prevent double spending of allowance,\n   * To change the approve amount you first have to reduce the addresses`\n   * allowance to zero by calling `approve(_spender, 0)` if it is not\n   * already 0 to mitigate the race condition described here:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value) public\n    returns (bool success) {\n\trequire(allowance (msg.sender, _spender) == 0 || _value == 0);\n    return AbstractToken.approve (_spender, _value);\n  }\n\n  /**\n   * Create _value new tokens and give new created tokens to msg.sender.\n   * May only be called by smart contract owner.\n   *\n   * @param _value number of tokens to create\n   * @return true if tokens were created successfully, false otherwise\n   */\n  function createTokens(uint256 _value) public\n    returns (bool success) {\n    require (msg.sender == owner);\n\n    if (_value > 0) {\n      if (_value > safeSub (MAX_TOKEN_COUNT, tokenCount)) return false;\n\t  \n      accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\n      tokenCount = safeAdd (tokenCount, _value);\n\t  \n\t  // adding transfer event and _from address as null address\n\t  emit Transfer(0x0, msg.sender, _value);\n\t  \n\t  return true;\n    }\n\t\n\t  return false;\n    \n  }\n  \n\n  /**\n   * Set new owner for the smart contract.\n   * May only be called by smart contract owner.\n   *\n   * @param _newOwner address of new owner of the smart contract\n   */\n  function setOwner(address _newOwner) public {\n    require (msg.sender == owner);\n\n    owner = _newOwner;\n  }\n\n  /**\n   * Freeze ALL token transfers.\n   * May only be called by smart contract owner.\n   */\n  function freezeTransfers () public {\n    require (msg.sender == owner);\n\n    if (!frozen) {\n      frozen = true;\n      emit Freeze ();\n    }\n  }\n\n  /**\n   * Unfreeze ALL token transfers.\n   * May only be called by smart contract owner.\n   */\n  function unfreezeTransfers () public {\n    require (msg.sender == owner);\n\n    if (frozen) {\n      frozen = false;\n      emit Unfreeze ();\n    }\n  }\n  \n  \n  /*A user is able to unintentionally send tokens to a contract \n  * and if the contract is not prepared to refund them they will get stuck in the contract. \n  * The same issue used to happen for Ether too but new Solidity versions added the payable modifier to\n  * prevent unintended Ether transfers. However, there\u2019s no such mechanism for token transfers.\n  * so the below function is created\n  */\n  \n  function refundTokens(address _token, address _refund, uint256 _value) public {\n    require (msg.sender == owner);\n    require(_token != address(this));\n    AbstractToken token = AbstractToken(_token);\n    token.transfer(_refund, _value);\n    emit RefundTokens(_token, _refund, _value);\n  }\n  \n  /**\n   * Freeze specific account\n   * May only be called by smart contract owner.\n   */\n  function freezeAccount(address _target, bool freeze) public {\n      require (msg.sender == owner);\n\t  require (msg.sender != _target);\n      frozenAccount[_target] = freeze;\n      emit FrozenFunds(_target, freeze);\n }\n\n  /**\n   * Logged when token transfers were frozen.\n   */\n  event Freeze ();\n\n  /**\n   * Logged when token transfers were unfrozen.\n   */\n  event Unfreeze ();\n  \n  /**\n   * Logged when a particular account is frozen.\n   */\n  \n  event FrozenFunds(address target, bool frozen);\n\n\n  \n  /**\n   * when accidentally send other tokens are refunded\n   */\n  \n  event RefundTokens(address _token, address _refund, uint256 _value);\n}"
}