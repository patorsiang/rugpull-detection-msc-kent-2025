{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP2 DUP3 MSTORE ISZERO ISZERO PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD DUP2 LT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 PUSH1 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 AND JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 DUP2 SWAP1 MSTORE PUSH1 MSTORE PUSH32 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 DUP2 SWAP1 MSTORE PUSH1 MSTORE PUSH32 SLOAD PUSH2 SWAP2 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH32 SSTORE PUSH1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP2 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 SWAP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP2 DUP3 MUL ADD PUSH1 SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 NOT AND SWAP4 ISZERO ISZERO SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP2 SWAP1 PUSH32 SWAP1 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 SWAP1 SWAP2 ADD SLOAD SWAP1 SWAP2 POP PUSH1 AND DUP3 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 TIMESTAMP LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 CALLER SWAP1 SWAP2 AND SWAP1 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 SWAP1 SWAP11 SWAP8 UNKNOWN_0xed UNKNOWN_0xd1 UNKNOWN_0xef SWAP10 UNKNOWN_0xca SWAP3 DUP3 UNKNOWN_0xc0 UNKNOWN_0xbb UNKNOWN_0xb3 EXTCODECOPY CALLDATASIZE UNKNOWN_0xe7 INVALID_0x79",
  "opcode_entropy": 4.69478969635837,
  "opcode_count": 1182,
  "unique_opcodes": 61,
  "byte_entropy": 5.865490242179002,
  "byte_60": 0.10888546481766821,
  "byte_40": 0.012840267077555213,
  "byte_52": 0.022598870056497175,
  "byte_04": 0.01027221366204417,
  "byte_36": 0.0015408320493066256,
  "byte_10": 0.00667693888032871,
  "byte_61": 0.04725218284540318,
  "byte_00": 0.06882383153569595,
  "byte_cf": 0.0005136106831022085,
  "byte_57": 0.024139702105803802,
  "byte_63": 0.012840267077555213,
  "byte_ff": 0.024139702105803802,
  "byte_7c": 0.0005136106831022085,
  "byte_01": 0.04519774011299435,
  "byte_35": 0.004622496147919877,
  "byte_16": 0.019517205957883924,
  "byte_06": 0.009758602978941962,
  "byte_fd": 0.012840267077555213,
  "byte_de": 0.001027221366204417,
  "byte_03": 0.022598870056497175,
  "byte_81": 0.026194144838212634,
  "byte_14": 0.008731381612737545,
  "byte_d4": 0.001027221366204417,
  "byte_80": 0.032357473035439135,
  "byte_18": 0.0005136106831022085,
  "byte_0d": 0.001027221366204417,
  "byte_dd": 0.0015408320493066256,
  "byte_5e": 0.002054442732408834,
  "byte_31": 0.0015408320493066256,
  "byte_3c": 0.001027221366204417,
  "byte_e5": 0.0005136106831022085,
  "byte_67": 0.001027221366204417,
  "byte_83": 0.007190549563430919,
  "byte_39": 0.001027221366204417,
  "byte_5a": 0.0015408320493066256,
  "byte_cd": 0.0025680534155110425,
  "byte_eb": 0.0005136106831022085,
  "byte_96": 0.0005136106831022085,
  "byte_98": 0.001027221366204417,
  "byte_e3": 0.001027221366204417,
  "byte_a9": 0.001027221366204417,
  "byte_48": 0.001027221366204417,
  "byte_2c": 0.0030816640986132513,
  "byte_f0": 0.0015408320493066256,
  "byte_c1": 0.001027221366204417,
  "byte_70": 0.001027221366204417,
  "byte_a0": 0.009758602978941962,
  "byte_82": 0.012326656394453005,
  "byte_71": 0.005649717514124294,
  "byte_50": 0.012326656394453005,
  "byte_1b": 0.0015408320493066256,
  "byte_23": 0.0025680534155110425,
  "byte_f3": 0.0035952747817154596,
  "byte_78": 0.001027221366204417,
  "byte_e9": 0.0005136106831022085,
  "byte_79": 0.0025680534155110425,
  "byte_25": 0.0005136106831022085,
  "byte_02": 0.026194144838212634,
  "byte_8d": 0.0015408320493066256,
  "byte_a5": 0.0005136106831022085,
  "byte_cb": 0.0005136106831022085,
  "byte_5b": 0.03903441191576785,
  "byte_95": 0.0015408320493066256,
  "byte_d8": 0.001027221366204417,
  "byte_9b": 0.0015408320493066256,
  "byte_41": 0.001027221366204417,
  "byte_65": 0.001027221366204417,
  "byte_05": 0.009244992295839754,
  "byte_9c": 0.0005136106831022085,
  "byte_bb": 0.001027221366204417,
  "byte_f2": 0.0015408320493066256,
  "byte_8b": 0.0025680534155110425,
  "byte_ae": 0.0005136106831022085,
  "byte_fb": 0.0005136106831022085,
  "byte_93": 0.004622496147919877,
  "byte_21": 0.0005136106831022085,
  "byte_08": 0.0005136106831022085,
  "byte_34": 0.007190549563430919,
  "byte_15": 0.017976373908577297,
  "byte_df": 0.001027221366204417,
  "byte_e7": 0.0015408320493066256,
  "byte_ef": 0.002054442732408834,
  "byte_56": 0.01848998459167951,
  "byte_51": 0.01078582434514638,
  "byte_20": 0.021058038007190548,
  "byte_90": 0.040575243965074476,
  "byte_91": 0.01848998459167951,
  "byte_0b": 0.0005136106831022085,
  "byte_1f": 0.0005136106831022085,
  "byte_0a": 0.009758602978941962,
  "byte_19": 0.0015408320493066256,
  "byte_92": 0.004622496147919877,
  "byte_69": 0.005649717514124294,
  "byte_26": 0.0005136106831022085,
  "byte_8e": 0.0005136106831022085,
  "byte_a1": 0.0025680534155110425,
  "byte_b4": 0.0005136106831022085,
  "byte_bf": 0.0030816640986132513,
  "byte_37": 0.0015408320493066256,
  "byte_cc": 0.0035952747817154596,
  "byte_42": 0.0030816640986132513,
  "byte_fe": 0.0035952747817154596,
  "byte_09": 0.0005136106831022085,
  "byte_2e": 0.0005136106831022085,
  "byte_49": 0.0005136106831022085,
  "byte_a7": 0.0035952747817154596,
  "byte_9a": 0.0015408320493066256,
  "byte_24": 0.001027221366204417,
  "byte_b9": 0.0005136106831022085,
  "byte_4b": 0.0005136106831022085,
  "byte_7f": 0.0035952747817154596,
  "byte_44": 0.001027221366204417,
  "byte_74": 0.0005136106831022085,
  "byte_6c": 0.001027221366204417,
  "byte_6f": 0.0015408320493066256,
  "byte_6b": 0.002054442732408834,
  "byte_54": 0.01848998459167951,
  "byte_33": 0.0035952747817154596,
  "byte_64": 0.0005136106831022085,
  "byte_7d": 0.0005136106831022085,
  "byte_ca": 0.001027221366204417,
  "byte_88": 0.0030816640986132513,
  "byte_5f": 0.0015408320493066256,
  "byte_da": 0.0015408320493066256,
  "byte_1a": 0.0015408320493066256,
  "byte_4a": 0.0030816640986132513,
  "byte_ce": 0.0015408320493066256,
  "byte_62": 0.002054442732408834,
  "byte_17": 0.0030816640986132513,
  "byte_9e": 0.0015408320493066256,
  "byte_8f": 0.0015408320493066256,
  "byte_d5": 0.0015408320493066256,
  "byte_8a": 0.002054442732408834,
  "byte_1c": 0.002054442732408834,
  "byte_c2": 0.0025680534155110425,
  "byte_c9": 0.0015408320493066256,
  "byte_b6": 0.0015408320493066256,
  "byte_2f": 0.0015408320493066256,
  "byte_55": 0.0035952747817154596,
  "byte_7b": 0.001027221366204417,
  "byte_d6": 0.0005136106831022085,
  "byte_ad": 0.001027221366204417,
  "byte_e2": 0.001027221366204417,
  "byte_c8": 0.001027221366204417,
  "byte_b0": 0.0015408320493066256,
  "byte_68": 0.001027221366204417,
  "byte_fc": 0.001027221366204417,
  "byte_aa": 0.001027221366204417,
  "byte_2b": 0.001027221366204417,
  "byte_f1": 0.001027221366204417,
  "byte_c4": 0.001027221366204417,
  "byte_28": 0.001027221366204417,
  "byte_f5": 0.002054442732408834,
  "byte_4d": 0.001027221366204417,
  "byte_b3": 0.0015408320493066256,
  "byte_a3": 0.001027221366204417,
  "byte_fa": 0.001027221366204417,
  "byte_73": 0.0005136106831022085,
  "byte_11": 0.0005136106831022085,
  "byte_75": 0.0005136106831022085,
  "byte_d9": 0.0005136106831022085,
  "byte_85": 0.0015408320493066256,
  "byte_07": 0.0005136106831022085,
  "byte_0e": 0.0005136106831022085,
  "byte_7a": 0.001027221366204417,
  "byte_72": 0.0005136106831022085,
  "byte_30": 0.0005136106831022085,
  "byte_58": 0.0005136106831022085,
  "byte_97": 0.0005136106831022085,
  "byte_ed": 0.0005136106831022085,
  "byte_d1": 0.0005136106831022085,
  "byte_99": 0.0005136106831022085,
  "byte_c0": 0.0005136106831022085,
  "byte_6a": 0.0005136106831022085,
  "byte_b2": 0.0005136106831022085,
  "byte_27": 0.0005136106831022085,
  "byte_2a": 0.0005136106831022085,
  "byte_e1": 0.0005136106831022085,
  "byte_87": 0.0005136106831022085,
  "byte_29": 0.0005136106831022085,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 2,
  "event_nums": 1,
  "creation_block": 5431846,
  "creation_timestamp": 1523603495,
  "life_time": 29.0,
  "duration_seconds": 368.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.06666666666666667,
  "avg_gas_limit": 601419.5,
  "std_gas_limit": 450305.5,
  "avg_gas_used": 501419.5,
  "std_gas_used": 450305.5,
  "avg_gas_price": 1000000000.0,
  "std_gas_price": 0.0,
  "transfer_num": 1,
  "distribute_num": 1,
  "timeline_sequence": [
    [
      5431846,
      1523603495,
      0,
      1,
      0,
      1051725,
      1000000000,
      0,
      1,
      1032072,
      951725,
      17689025
    ],
    [
      5431875,
      1523603863,
      1,
      126,
      0,
      151114,
      1000000000,
      0,
      1,
      6048457,
      51114,
      17688996
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.21;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title owned\n * @dev The owned contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken.\n */\ncontract BasicToken {\n    using SafeMath for uint256;\n    \n    uint256       _supply;\n    mapping (address => uint256)    _balances;\n    \n    event Transfer( address indexed from, address indexed to, uint256 value);\n\n    function BasicToken() public {    }\n    \n    function totalSupply() public view returns (uint256) {\n        return _supply;\n    }\n    function balanceOf(address _owner) public view returns (uint256) {\n        return _balances[_owner];\n    }\n    \n    /**\n     * @dev transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_balances[msg.sender] >= _value);\n        \n        _balances[msg.sender] =_balances[msg.sender].sub(_value);\n        _balances[_to] =_balances[_to].add(_value);\n        \n        emit Transfer(msg.sender, _to, _value);\n        \n        return true;\n    }\n  \n}\n\ncontract DBToken is BasicToken,owned {\n    string  constant public symbol = \"DB\";\n    string  constant public name = \"Digital Block\";\n    uint256 constant public decimals =6; \n    uint256 public lockedCounts = 8*(10**8)*(10**6);\n    uint256 public eachUnlockCounts = 2*(10**8)*(10**6);\n    //crowdSale end time, May/10/2018\n    uint256 public startTime = 1525881600;\n\n    struct LockStruct {\n        uint256 unlockTime;\n        bool locked;\n    }\n\n    LockStruct[] public unlockTimeMap;\n\n    function DBToken() public {\n        _supply =50*(10**8)*(10**6);\n        _balances[0x01] = lockedCounts;\n         _balances[msg.sender] =_supply.sub(lockedCounts);\n\n        // November/10/2018\n        unlockTimeMap.push(LockStruct({unlockTime:1541779200, locked: true})); \n        // May/10/2019\n        unlockTimeMap.push(LockStruct({unlockTime:1557417600, locked: true})); \n        // November/10/2019\n        unlockTimeMap.push(LockStruct({unlockTime:1573315200, locked: true})); \n        // May/10/2020\n        unlockTimeMap.push(LockStruct({unlockTime:1589040000, locked: true})); \n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require (now >= startTime);\n\n        return super.transfer(_to, _value);\n    }\n\n    function distribute(address _to, uint256 _value) onlyOwner public returns (bool) {\n\n        return super.transfer(_to, _value);\n    }\n\n    /**\n     * @dev unlock , only can be called by owner.\n     */\n    function unlock(uint256 _index) onlyOwner public {\n        require(_index>=0 && _index<unlockTimeMap.length);\n        require(now >= unlockTimeMap[_index].unlockTime && unlockTimeMap[_index].locked);\n        require(_balances[0x01] >= eachUnlockCounts);\n\n        _balances[0x01] =_balances[0x01].sub(eachUnlockCounts);\n        _balances[owner] =_balances[owner].add(eachUnlockCounts);\n\n        lockedCounts =lockedCounts.sub(eachUnlockCounts);\n        unlockTimeMap[_index].locked = false;\n\n        emit Transfer(0x01, owner, eachUnlockCounts);\n    }\n}"
}