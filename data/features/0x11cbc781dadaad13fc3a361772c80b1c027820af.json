{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 JUMPI STOP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH32 DUP2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH32 DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH2 DUP5 CALLER PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 PUSH1 SHL SUB DUP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD SWAP1 SWAP2 PUSH2 SWAP2 DUP6 SWAP1 PUSH2 SWAP1 DUP7 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 SWAP1 DUP4 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP14 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 SWAP2 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 SWAP2 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH16 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND PUSH2 JUMPI PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH32 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD NUMBER PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 SWAP1 PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 JUMPDEST PUSH1 PUSH2 PUSH1 PUSH2 DUP6 PUSH1 PUSH2 JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH32 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP6 PUSH1 PUSH1 PUSH1 SHL SUB AND EQ DUP1 PUSH2 JUMPI POP PUSH32 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP5 PUSH1 PUSH1 PUSH1 SHL SUB AND EQ JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP2 JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH2 PUSH1 PUSH2 DUP7 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 DUP8 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP8 ADDRESS DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP6 DUP5 PUSH2 JUMP JUMPDEST SWAP5 POP POP POP PUSH2 JUMP JUMPDEST DUP2 ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 DUP7 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP3 PUSH2 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND OR SWAP1 SSTORE JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND OR SWAP1 SSTORE JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH32 PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH32 PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP8 DUP2 AND PUSH1 PUSH1 PUSH1 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 DUP1 SLOAD SWAP3 DUP8 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 SLOAD ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND ADDRESS EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP TIMESTAMP PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST GT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH2 JUMP JUMPDEST TIMESTAMP PUSH1 SSTORE JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP5 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 DUP5 DUP7 PUSH2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP4 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH32 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 PUSH1 PUSH1 PUSH1 SHL SUB AND EQ JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 PUSH1 SHL NOT AND PUSH1 PUSH1 SHL OR SWAP1 SSTORE NUMBER PUSH1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 DUP6 DUP4 PUSH2 JUMP JUMPDEST EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP6 AND SWAP1 PUSH32 SWAP1 PUSH2 SWAP1 DUP6 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP3 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH32 AND SWAP1 PUSH4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP3 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH32 AND SWAP1 PUSH4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMPI POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP4 SWAP1 SSTORE PUSH1 DUP4 ADD DUP5 SSTORE SWAP3 SWAP1 SWAP3 MSTORE PUSH32 ADD DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP1 PUSH2 JUMPI POP POP JUMP JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 DUP1 GAS SWAP1 POP PUSH1 JUMPDEST DUP6 DUP4 LT DUP1 ISZERO PUSH2 JUMPI POP DUP5 DUP2 LT JUMPDEST ISZERO PUSH2 JUMPI DUP5 PUSH1 SLOAD LT PUSH2 JUMPI PUSH1 PUSH1 SSTORE JUMPDEST PUSH1 PUSH2 PUSH32 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH32 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 PUSH1 SLOAD DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD PUSH1 MLOAD PUSH1 DUP4 SWAP1 SHL PUSH1 PUSH1 PUSH1 SHL SUB NOT AND DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP9 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD SWAP1 PUSH1 PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP DUP2 DUP1 PUSH2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 GT ISZERO PUSH2 JUMPI POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 PUSH1 PUSH1 SLOAD DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP3 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 GAS DUP6 SWAP1 PUSH2 JUMP JUMPDEST DUP6 SWAP1 PUSH2 JUMP JUMPDEST SWAP4 POP GAS PUSH1 DUP1 SLOAD SWAP2 SWAP5 POP PUSH1 PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP DUP2 DUP1 PUSH2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 DUP5 DUP7 PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMP JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 MLOAD ADDRESS SWAP1 PUSH32 SWAP1 PUSH2 SWAP1 DUP6 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH1 SWAP1 PUSH2 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP5 DUP2 AND DUP5 MSTORE PUSH1 SWAP1 SWAP3 MSTORE PUSH1 SWAP1 SWAP3 SHA3 SLOAD PUSH1 DUP1 SLOAD SWAP3 SWAP1 SWAP4 AND SWAP3 SWAP2 DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP4 AND DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH1 DUP1 SLOAD SWAP2 SWAP4 SWAP3 SWAP2 PUSH2 SWAP1 PUSH1 SWAP1 PUSH2 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 ADD SWAP1 SHA3 SSTORE PUSH1 DUP1 SLOAD DUP1 PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP3 DUP2 MSTORE PUSH1 SWAP1 SHA3 DUP2 ADD PUSH1 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 DUP5 ADD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH1 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 ADD PUSH1 NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP3 NOT DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 EQ ISZERO PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 NOT DUP3 EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT UNKNOWN_0xfe GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE SHA3 PUSH21 PUSH20 PUSH19 PUSH16 LT GASLIMIT UNKNOWN_0xde PUSH8 UNKNOWN_0xe DUP15 CODECOPY PUSH26 CALLER",
  "opcode_entropy": 4.640662282547125,
  "opcode_count": 4827,
  "unique_opcodes": 77,
  "byte_entropy": 6.121866284880588,
  "byte_0x": 0.00012473493825620557,
  "byte_60": 0.11824872146688288,
  "byte_80": 0.03180740925533242,
  "byte_40": 0.013346638393413995,
  "byte_52": 0.025695397280778347,
  "byte_04": 0.009729325183984033,
  "byte_36": 0.003118373456405139,
  "byte_10": 0.005114132468504428,
  "byte_61": 0.06012224023949108,
  "byte_02": 0.006610951727578895,
  "byte_08": 0.0044904577772234,
  "byte_57": 0.021454409380067357,
  "byte_00": 0.04290881876013471,
  "byte_35": 0.0013720843208182613,
  "byte_e0": 0.0021204939503554946,
  "byte_1c": 0.0038667830859423725,
  "byte_63": 0.008357240863165773,
  "byte_70": 0.002369963826867906,
  "byte_a0": 0.012847698640389173,
  "byte_82": 0.013097168516901583,
  "byte_31": 0.0024946987651241113,
  "byte_11": 0.0029936385181489333,
  "byte_01": 0.04278408382187851,
  "byte_18": 0.0029936385181489333,
  "byte_a9": 0.00024946987651241115,
  "byte_05": 0.003492578271173756,
  "byte_9c": 0.00112261444430585,
  "byte_bb": 0.00024946987651241115,
  "byte_f2": 0.002369963826867906,
  "byte_fd": 0.009604590245727828,
  "byte_e3": 0.0022452288886117,
  "byte_8b": 0.00112261444430585,
  "byte_6f": 0.004739927653735812,
  "byte_14": 0.0089809155544468,
  "byte_06": 0.0032431083946613446,
  "byte_62": 0.003742048147686167,
  "byte_f7": 0.00037420481476861667,
  "byte_ce": 0.0004989397530248223,
  "byte_44": 0.001746289135586878,
  "byte_79": 0.0006236746912810278,
  "byte_f8": 0.000873144567793439,
  "byte_21": 0.00024946987651241115,
  "byte_07": 0.003492578271173756,
  "byte_69": 0.002369963826867906,
  "byte_a2": 0.000873144567793439,
  "byte_fc": 0.0004989397530248223,
  "byte_42": 0.0007484096295372333,
  "byte_ca": 0.00024946987651241115,
  "byte_d2": 0.00037420481476861667,
  "byte_c2": 0.0004989397530248223,
  "byte_ff": 0.004116252962454783,
  "byte_d4": 0.0006236746912810278,
  "byte_84": 0.0061120119745540725,
  "byte_e2": 0.0004989397530248223,
  "byte_5b": 0.03729574653860546,
  "byte_c6": 0.00012473493825620557,
  "byte_bf": 0.00024946987651241115,
  "byte_56": 0.024822252712984907,
  "byte_b3": 0.0006236746912810278,
  "byte_71": 0.0013720843208182613,
  "byte_e6": 0.00012473493825620557,
  "byte_dd": 0.0014968192590744667,
  "byte_ed": 0.0007484096295372333,
  "byte_3e": 0.0006236746912810278,
  "byte_ea": 0.00024946987651241115,
  "byte_2f": 0.0018710240738430836,
  "byte_0b": 0.001746289135586878,
  "byte_37": 0.0006236746912810278,
  "byte_8d": 0.0007484096295372333,
  "byte_a5": 0.0004989397530248223,
  "byte_cb": 0.00024946987651241115,
  "byte_e7": 0.00024946987651241115,
  "byte_2d": 0.0016215541973306723,
  "byte_95": 0.0018710240738430836,
  "byte_d8": 0.0013720843208182613,
  "byte_9b": 0.0006236746912810278,
  "byte_41": 0.00024946987651241115,
  "byte_4b": 0.00037420481476861667,
  "byte_98": 0.00024946987651241115,
  "byte_d0": 0.0006236746912810278,
  "byte_2c": 0.00012473493825620557,
  "byte_4d": 0.000873144567793439,
  "byte_3a": 0.0016215541973306723,
  "byte_0e": 0.0013720843208182613,
  "byte_90": 0.03205687913184483,
  "byte_a4": 0.0004989397530248223,
  "byte_d7": 0.00037420481476861667,
  "byte_a6": 0.0018710240738430836,
  "byte_50": 0.024572782836472497,
  "byte_78": 0.0004989397530248223,
  "byte_2e": 0.00024946987651241115,
  "byte_5e": 0.0022452288886117,
  "byte_b2": 0.0007484096295372333,
  "byte_86": 0.0014968192590744667,
  "byte_e4": 0.0004989397530248223,
  "byte_76": 0.0009978795060496446,
  "byte_0d": 0.0012473493825620556,
  "byte_48": 0.0012473493825620556,
  "byte_ab": 0.00037420481476861667,
  "byte_7d": 0.0006236746912810278,
  "byte_49": 0.000873144567793439,
  "byte_bd": 0.0006236746912810278,
  "byte_5a": 0.001746289135586878,
  "byte_6a": 0.003118373456405139,
  "byte_03": 0.01771236123238119,
  "byte_de": 0.00037420481476861667,
  "byte_a8": 0.0004989397530248223,
  "byte_16": 0.020456529874017713,
  "byte_12": 0.0044904577772234,
  "byte_c9": 0.00012473493825620557,
  "byte_c0": 0.0006236746912810278,
  "byte_33": 0.002369963826867906,
  "byte_53": 0.000873144567793439,
  "byte_ac": 0.00037420481476861667,
  "byte_b4": 0.0004989397530248223,
  "byte_64": 0.0049893975302482225,
  "byte_3c": 0.00024946987651241115,
  "byte_e5": 0.0029936385181489333,
  "byte_67": 0.0004989397530248223,
  "byte_39": 0.000873144567793439,
  "byte_93": 0.0036173132094299613,
  "byte_51": 0.006860421604091306,
  "byte_43": 0.0016215541973306723,
  "byte_23": 0.000873144567793439,
  "byte_ec": 0.0006236746912810278,
  "byte_bc": 0.00024946987651241115,
  "byte_df": 0.0006236746912810278,
  "byte_1f": 0.001995759012099289,
  "byte_3d": 0.001995759012099289,
  "byte_f4": 0.00024946987651241115,
  "byte_b8": 0.00024946987651241115,
  "byte_72": 0.004240987900710989,
  "byte_24": 0.0026194337033803167,
  "byte_27": 0.0014968192590744667,
  "byte_c8": 0.0006236746912810278,
  "byte_09": 0.0014968192590744667,
  "byte_a7": 0.00037420481476861667,
  "byte_3f": 0.00112261444430585,
  "byte_1d": 0.004116252962454783,
  "byte_6b": 0.001995759012099289,
  "byte_94": 0.00112261444430585,
  "byte_0f": 0.0021204939503554946,
  "byte_34": 0.006236746912810278,
  "byte_15": 0.015092927529000873,
  "byte_20": 0.02307596357739803,
  "byte_29": 0.0004989397530248223,
  "byte_91": 0.010727204690033678,
  "byte_3b": 0.0012473493825620556,
  "byte_f3": 0.00037420481476861667,
  "byte_5f": 0.0012473493825620556,
  "byte_8a": 0.00037420481476861667,
  "byte_81": 0.02083073468878633,
  "byte_7b": 0.00112261444430585,
  "byte_85": 0.0049893975302482225,
  "byte_54": 0.013596108269926407,
  "byte_9f": 0.00024946987651241115,
  "byte_c7": 0.0009978795060496446,
  "byte_7f": 0.003991518024198578,
  "byte_4e": 0.0009978795060496446,
  "byte_b6": 0.00024946987651241115,
  "byte_b5": 0.00024946987651241115,
  "byte_47": 0.0004989397530248223,
  "byte_1b": 0.021703879256579767,
  "byte_eb": 0.0018710240738430836,
  "byte_19": 0.007109891480603717,
  "byte_30": 0.0021204939503554946,
  "byte_a1": 0.0004989397530248223,
  "byte_0a": 0.0014968192590744667,
  "byte_b7": 0.0012473493825620556,
  "byte_dc": 0.0013720843208182613,
  "byte_38": 0.0013720843208182613,
  "byte_f1": 0.002369963826867906,
  "byte_d9": 0.0018710240738430836,
  "byte_fa": 0.0021204939503554946,
  "byte_28": 0.0018710240738430836,
  "byte_92": 0.006985156542347512,
  "byte_d3": 0.0013720843208182613,
  "byte_1e": 0.0049893975302482225,
  "byte_55": 0.0044904577772234,
  "byte_8e": 0.0006236746912810278,
  "byte_9d": 0.00037420481476861667,
  "byte_a3": 0.000873144567793439,
  "byte_97": 0.0009978795060496446,
  "byte_ae": 0.0004989397530248223,
  "byte_f9": 0.00012473493825620557,
  "byte_8f": 0.00024946987651241115,
  "byte_6c": 0.0021204939503554946,
  "byte_c1": 0.00024946987651241115,
  "byte_9e": 0.00012473493825620557,
  "byte_e1": 0.00024946987651241115,
  "byte_17": 0.003492578271173756,
  "byte_83": 0.008606710739678183,
  "byte_5d": 0.00012473493825620557,
  "byte_6e": 0.0022452288886117,
  "byte_45": 0.00112261444430585,
  "byte_aa": 0.00037420481476861667,
  "byte_ee": 0.00012473493825620557,
  "byte_0c": 0.0007484096295372333,
  "byte_fe": 0.00037420481476861667,
  "byte_fb": 0.0006236746912810278,
  "byte_58": 0.0006236746912810278,
  "byte_87": 0.0012473493825620556,
  "byte_73": 0.0027441686416365225,
  "byte_46": 0.0027441686416365225,
  "byte_cd": 0.002868903579892728,
  "byte_59": 0.0004989397530248223,
  "byte_13": 0.0013720843208182613,
  "byte_22": 0.00112261444430585,
  "byte_da": 0.00024946987651241115,
  "byte_af": 0.0004989397530248223,
  "byte_25": 0.0004989397530248223,
  "byte_f6": 0.00012473493825620557,
  "byte_26": 0.00024946987651241115,
  "byte_4f": 0.0006236746912810278,
  "byte_77": 0.0014968192590744667,
  "byte_65": 0.005987277036297867,
  "byte_74": 0.002868903579892728,
  "byte_68": 0.001746289135586878,
  "byte_7a": 0.0009978795060496446,
  "byte_32": 0.0016215541973306723,
  "byte_66": 0.0016215541973306723,
  "byte_6d": 0.0006236746912810278,
  "byte_f0": 0.00012473493825620557,
  "byte_8c": 0.00012473493825620557,
  "byte_d1": 0.00024946987651241115,
  "byte_c3": 0.00012473493825620557,
  "byte_b9": 0.00024946987651241115,
  "byte_c4": 0.00037420481476861667,
  "byte_e8": 0.00024946987651241115,
  "byte_b1": 0.00037420481476861667,
  "byte_ba": 0.00012473493825620557,
  "byte_4a": 0.00012473493825620557,
  "byte_99": 0.0004989397530248223,
  "byte_2a": 0.00024946987651241115,
  "byte_75": 0.0007484096295372333,
  "byte_4c": 0.0006236746912810278,
  "byte_1a": 0.0013720843208182613,
  "byte_7c": 0.00024946987651241115,
  "byte_89": 0.00024946987651241115,
  "byte_c5": 0.00012473493825620557,
  "byte_e9": 0.00012473493825620557,
  "byte_ad": 0.00024946987651241115,
  "byte_b0": 0.00037420481476861667,
  "byte_2b": 0.00037420481476861667,
  "byte_f5": 0.0004989397530248223,
  "byte_ef": 0.00024946987651241115,
  "byte_be": 0.00012473493825620557,
  "byte_db": 0.00012473493825620557,
  "byte_88": 0.00012473493825620557,
  "byte_cc": 0.00012473493825620557,
  "byte_96": 0.00012473493825620557,
  "num_nodes": 466,
  "num_edges": 225,
  "avg_degree": 0.9656652360515021,
  "density": 0.0010383497161844109,
  "connected_components": 272,
  "avg_clustering": 0.002861230329041488,
  "timeline_sequence": [],
  "sourcecode": "/**\n *Submitted for verification at BscScan.com on 2022-05-21\n*/\n\n/**\n *Submitted for verification at BscScan.com on 2022-05-15\n*/\n\npragma solidity ^0.8.6;\n\n// SPDX-License-Identifier: Unlicensed\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nabstract contract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor ()  {\n        address msgSender = msg.sender;\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }   \n    \n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n    \n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(\n        address indexed token0,\n        address indexed token1,\n        address pair,\n        uint256\n    );\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB)\n        external\n        view\n        returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    event Mint(address indexed sender, uint256 amount0, uint256 amount1);\n    event Burn(\n        address indexed sender,\n        uint256 amount0,\n        uint256 amount1,\n        address indexed to\n    );\n    event Swap(\n        address indexed sender,\n        uint256 amount0In,\n        uint256 amount1In,\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint256);\n\n    function factory() external view returns (address);\n\n    function token0() external view returns (address);\n\n    function token1() external view returns (address);\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function price0CumulativeLast() external view returns (uint256);\n\n    function price1CumulativeLast() external view returns (uint256);\n\n    function kLast() external view returns (uint256);\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function burn(address to)\n        external\n        returns (uint256 amount0, uint256 amount1);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function skim(address to) external;\n\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\n\ncontract DHE is IERC20, Ownable {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) private _tOwned;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping (address => bool) isDividendExempt;\n    mapping(address => bool) private _isExcludedFromFee;\n    mapping(address => bool) public _updated;\n\n        mapping(address => bool) public _isSniper;\n    mapping(address => bool) private _liquidityHolders;\n\n    address public communityAddress = 0x8B52C17938Aea1FfD2B25542cDFAc78a3755E9e9;\n    IERC20 public usdt = IERC20(0x55d398326f99059fF775485246999027B3197955);\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\n\n    bool public _hasLiqBeenAdded = false;\n    uint256 public launchedAt = 0;\n\n    string private _name = \"DHE\";\n    string private _symbol = \"DHE\";\n    uint8 private _decimals = 18;\n\t\n\tuint256 public bounProcess = 1 * 10**9;\n    \n    uint256 currentIndex;  \n    uint256 private _tTotal = 3990000 * 10 ** 18;\n    uint256 public swapProcess = 500 * 10**18;\n\n    uint256 distributorGas = 300000;\n    uint256 public minPeriod = 600;\n    uint256 public LPFeefenhong;\n    IUniswapV2Router02 public immutable uniswapV2Router;\n    address public immutable uniswapV2Pair;\n    address private fromAddress;\n    address private toAddress;\n\n    address[] shareholders;\n    mapping (address => uint256) shareholderIndexes;\n\n\n    constructor() {\n        address should = 0xa3427dD4909fA77780F5595512533734C971e7a6;\n        _tOwned[should] = _tTotal;\n       \n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n\n        // Create a uniswap pair for this new token\n        uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n            .createPair(address(this), address(usdt));\n\n        uniswapV2Router = _uniswapV2Router;\n\n        //exclude owner and this contract from fee\n        _isExcludedFromFee[msg.sender] = true;\n        \n        addExcludedFromFee(should);\n\n        _liquidityHolders[owner()] = true;\n        _liquidityHolders[should] = true;\n\n        isDividendExempt[address(this)] = true;\n        isDividendExempt[address(0)] = true;\n        isDividendExempt[should] = true;\n        \n        emit Transfer(address(0), should, _tTotal);\n    }\n\n    function addExcludedFromFee(address account) private {\n        _isExcludedFromFee[owner()] = true;\n        _isExcludedFromFee[communityAddress] = true;\n        _isExcludedFromFee[address(this)] = true;\n        _isExcludedFromFee[address(account)] = true;\n        \n        _isExcludedFromFee[address(0x10ED43C718714eb63d5aA57B78B54704E256024E)] = true;\n        _isExcludedFromFee[address(0x57b9e71a85344654C3Ac56903921f478C7fbE720)] = true;\n        _isExcludedFromFee[address(0x7799737b3eFdf28E00cC3CeE49613f659c45741f)] = true;\n        _isExcludedFromFee[address(0x0d7437b934Ae43B27E0c9Bf5ca61E2232e6EAAf5)] = true;\n        _isExcludedFromFee[address(0xBd6e85Dd328F3D5ec18c9Ecedd8D45B4e4946235)] = true;\n        _isExcludedFromFee[address(0x47dADBe62490B7f09d4e30D135aB3a08A4fE1583)] = true;\n        _isExcludedFromFee[address(0x9D1351F4906B52EE3450fb8D16bE3Af8938be480)] = true;\n        _isExcludedFromFee[address(0xf5EFeD309cbFfe79E156eD9a53a1bd2AA73600B8)] = true;\n        _isExcludedFromFee[address(0x140C07c96DB1Fee9a72400D7d9EC97053BeD18E7)] = true;\n        _isExcludedFromFee[address(0xcCF3d4708D5dF488a8d812eBC95b5b4DF080EF08)] = true;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint256) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _tOwned[account];\n    }\n\n    function transfer(address recipient, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            msg.sender,\n            _allowances[sender][msg.sender].sub(\n                amount,\n                \"ERC20: transfer amount exceeds allowance\"\n            )\n        );\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].add(addedValue)\n        );\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].sub(\n                subtractedValue,\n                \"ERC20: decreased allowance below zero\"\n            )\n        );\n        return true;\n    }\n\n\n   function isExcludedFromFee(address account) public view returns (bool) {\n        return _isExcludedFromFee[account];\n    }\n    function excludeFromFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = true;\n    }\n\tfunction setBounProcess(uint256 amount) public onlyOwner {\n\t    bounProcess = amount;\n\t}\n    function removeSniper(address account, bool success) external onlyOwner {\n        _isSniper[account] = success;\n    }\n    function setMinPeriod(uint256 number) public onlyOwner {\n        minPeriod = number;\n    }\n    function setSwapProcess(uint256 number) public onlyOwner {\n        swapProcess = number;\n    }\n    function _checkLiquidityAdd(address from, address to) private {\n        require(!_hasLiqBeenAdded, \"Liquidity already added and marked.\");\n\n        if (_liquidityHolders[from] && to == uniswapV2Pair) {\n            _hasLiqBeenAdded = true;\n            launchedAt = block.number;\n        }\n    }\n    function setCommunityAddress(address account) public onlyOwner {\n        communityAddress = account;\n    }\n\n    function includeInFee(address account) public onlyOwner {\n        _isExcludedFromFee[account] = false;\n    }\n\n    //to recieve ETH from uniswapV2Router when swaping\n    receive() external payable {}\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer( address from, address to, uint256 amount ) private {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        if (_isSniper[from]) {\n            revert(\"Sniper rejected.\");\n        }\n\n        if (!_hasLiqBeenAdded) {\n            _checkLiquidityAdd(from, to);\n        } else { \n            if ( launchedAt > 0 && from == uniswapV2Pair && !_liquidityHolders[from] && !_liquidityHolders[to]) {\n                if (block.number - launchedAt < 2000) {\n                    _isSniper[to] = true;\n                }\n            }\n        }\n        \n        bool takeFee = true;\n\n        if (_isExcludedFromFee[from] || _isExcludedFromFee[to]) {\n            takeFee = false;\n        }\n\n        uint256 fees = amount.mul(5).div(100);\n\t\tif((from == uniswapV2Pair || to == uniswapV2Pair) && takeFee){\n            uint256 communityFee = amount.mul(1).div(100);\n            _tokenTransfer(from,communityAddress ,communityFee);\n\n            uint256 coinFee = fees.sub(communityFee);\n\t\t\t_tokenTransfer(from,address(this) ,coinFee);\n\n            amount = amount.sub(fees);\n\t\t} else if(takeFee) {\n\t\t\t _tokenTransfer(from, deadAddress, fees);\n             amount = amount.sub(fees);\n\t\t}\n        _tokenTransfer(from,to ,amount);\n        \n        if(fromAddress == address(0) )fromAddress = from;\n        if(toAddress == address(0) )toAddress = to;  \n        if(!isDividendExempt[fromAddress] && fromAddress != uniswapV2Pair ) setShare(fromAddress);\n        if(!isDividendExempt[toAddress] && toAddress != uniswapV2Pair ) setShare(toAddress);\n        \n        fromAddress = from;\n        toAddress = to;  \n\n         if(balanceOf(address(this)) >= swapProcess && from !=address(this) && LPFeefenhong.add(minPeriod) <= block.timestamp) {\n             process(distributorGas);\n             LPFeefenhong = block.timestamp;\n        }\n    }\n\n    function _tokenTransfer(address sender,address shareholder ,uint256 amount) private {\n        _tOwned[sender] = _tOwned[sender].sub(amount);\n        _tOwned[shareholder] = _tOwned[shareholder].add(amount);\n        emit Transfer(sender, shareholder, amount);\n    }\n\n    function process(uint256 gas) private {\n        uint256 shareholderCount = shareholders.length;\t\n\n        if(shareholderCount == 0)return;\n        uint256 nowbanance = _tOwned[address(this)];\n        uint256 gasUsed = 0;\n        uint256 gasLeft = gasleft();\n\n        uint256 iterations = 0;\n\n        while(gasUsed < gas && iterations < shareholderCount) {\n            if(currentIndex >= shareholderCount){\n                currentIndex = 0;\n            }\n          uint256 amount = nowbanance.mul(IERC20(uniswapV2Pair).balanceOf(shareholders[currentIndex])).div(IERC20(uniswapV2Pair).totalSupply());\n         if( amount < bounProcess) {\n             currentIndex++;\n             iterations++;\n             return;\n         }\n         \n         if(_tOwned[address(this)]  < amount )return;\n            distributeDividend(shareholders[currentIndex],amount);\n            \n            gasUsed = gasUsed.add(gasLeft.sub(gasleft()));\n            gasLeft = gasleft();\n            currentIndex++;\n            iterations++;\n        }\n    }\n   \n\n    function distributeDividend(address shareholder ,uint256 amount) internal {\n            _tOwned[address(this)] = _tOwned[address(this)].sub(amount);\n            _tOwned[shareholder] = _tOwned[shareholder].add(amount);\n             emit Transfer(address(this), shareholder, amount);\n    }\n\t\n\n    function setShare(address shareholder) private {\n           if(_updated[shareholder] ){      \n                if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) quitShare(shareholder);           \n                return;  \n           }\n           if(IERC20(uniswapV2Pair).balanceOf(shareholder) == 0) return;  \n            addShareholder(shareholder);\t\n            _updated[shareholder] = true;\n          \n      }\n    function addShareholder(address shareholder) internal {\n        shareholderIndexes[shareholder] = shareholders.length;\n        shareholders.push(shareholder);\n    }\n    function quitShare(address shareholder) private {\n           removeShareholder(shareholder);   \n           _updated[shareholder] = false; \n      }\n    function removeShareholder(address shareholder) internal {\n        shareholders[shareholderIndexes[shareholder]] = shareholders[shareholders.length-1];\n        shareholderIndexes[shareholders[shareholders.length-1]] = shareholderIndexes[shareholder];\n        shareholders.pop();\n    }\n\n\n\t\n\t\n}"
}