{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 DUP1 CALLDATALOAD DUP3 AND SWAP2 PUSH1 DUP1 CALLDATALOAD SWAP1 SWAP2 AND SWAP2 PUSH1 CALLDATALOAD SWAP2 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND SWAP1 SSTORE PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH22 NOT AND PUSH1 PUSH1 EXP OR SWAP1 SSTORE PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND PUSH1 PUSH1 EXP OR SWAP1 SSTORE PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP6 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP6 SWAP1 SSTORE SWAP1 SWAP3 SWAP2 SWAP1 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP7 GAS CALL SWAP2 POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP8 DUP4 AND DUP3 MSTORE PUSH1 DUP2 MSTORE DUP4 DUP3 SHA3 CALLER SWAP1 SWAP4 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND SWAP2 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 PUSH32 DUP5 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SLOAD DUP1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP10 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 SLOAD PUSH32 SWAP2 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP1 DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP5 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP7 GAS CALL SWAP2 POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 DUP5 SWAP1 SSTORE SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 SWAP2 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP STOP LOG1 PUSH6 SHA3 LOG2 UNKNOWN_0x1e TIMESTAMP UNKNOWN_0xaa UNKNOWN_0xea ADDMOD UNKNOWN_0x2f DUP7 MLOAD UNKNOWN_0xc5 CALL UNKNOWN_0x22 INVALID_0x7a",
  "opcode_entropy": 4.7188623231641555,
  "opcode_count": 3245,
  "unique_opcodes": 71,
  "byte_entropy": 5.866578881154934,
  "byte_60": 0.1225898112441648,
  "byte_40": 0.012786685609904607,
  "byte_52": 0.021717069210472905,
  "byte_04": 0.011974832555307489,
  "byte_36": 0.00020296326364927948,
  "byte_10": 0.0032474122183884717,
  "byte_61": 0.044043028211893646,
  "byte_01": 0.03795413030241526,
  "byte_69": 0.0016237061091942358,
  "byte_57": 0.020905216155875785,
  "byte_63": 0.008930383600568297,
  "byte_ff": 0.017454840673838037,
  "byte_7c": 0.00020296326364927948,
  "byte_00": 0.04972599959407347,
  "byte_35": 0.009742236655165415,
  "byte_16": 0.02760300385630201,
  "byte_dd": 0.0020296326364927946,
  "byte_a2": 0.0010148163182463973,
  "byte_05": 0.0032474122183884717,
  "byte_81": 0.03044448954739192,
  "byte_14": 0.008930383600568297,
  "byte_6e": 0.00040592652729855896,
  "byte_80": 0.03633042419322103,
  "byte_d2": 0.0006088897909478384,
  "byte_03": 0.028617820174548406,
  "byte_5b": 0.03633042419322103,
  "byte_86": 0.0024355591637913536,
  "byte_06": 0.0032474122183884717,
  "byte_fd": 0.014207428455449563,
  "byte_de": 0.0006088897909478384,
  "byte_ad": 0.0016237061091942358,
  "byte_09": 0.003044448954739192,
  "byte_5e": 0.00040592652729855896,
  "byte_a7": 0.0008118530545971179,
  "byte_b3": 0.0008118530545971179,
  "byte_02": 0.02334077531966714,
  "byte_37": 0.002232595900142074,
  "byte_ca": 0.00040592652729855896,
  "byte_3b": 0.0008118530545971179,
  "byte_59": 0.0006088897909478384,
  "byte_18": 0.00040592652729855896,
  "byte_0d": 0.002232595900142074,
  "byte_be": 0.00040592652729855896,
  "byte_23": 0.0012177795818956768,
  "byte_b8": 0.0006088897909478384,
  "byte_72": 0.0010148163182463973,
  "byte_e3": 0.00040592652729855896,
  "byte_31": 0.0008118530545971179,
  "byte_3c": 0.0006088897909478384,
  "byte_e5": 0.0010148163182463973,
  "byte_67": 0.0008118530545971179,
  "byte_0b": 0.0024355591637913536,
  "byte_3f": 0.0006088897909478384,
  "byte_4b": 0.0006088897909478384,
  "byte_a8": 0.0018266693728435153,
  "byte_3a": 0.0008118530545971179,
  "byte_34": 0.005885934645829105,
  "byte_c1": 0.00020296326364927948,
  "byte_0f": 0.002232595900142074,
  "byte_19": 0.0018266693728435153,
  "byte_47": 0.0006088897909478384,
  "byte_5c": 0.0006088897909478384,
  "byte_17": 0.0010148163182463973,
  "byte_f9": 0.00040592652729855896,
  "byte_f4": 0.00040592652729855896,
  "byte_97": 0.0006088897909478384,
  "byte_5a": 0.0012177795818956768,
  "byte_bb": 0.0008118530545971179,
  "byte_ce": 0.00040592652729855896,
  "byte_66": 0.0006088897909478384,
  "byte_84": 0.013192612137203167,
  "byte_e1": 0.0008118530545971179,
  "byte_70": 0.0008118530545971179,
  "byte_3d": 0.0008118530545971179,
  "byte_f7": 0.0008118530545971179,
  "byte_93": 0.004059265272985589,
  "byte_a0": 0.016440024355591637,
  "byte_82": 0.008930383600568297,
  "byte_49": 0.0006088897909478384,
  "byte_38": 0.00020296326364927948,
  "byte_7d": 0.0018266693728435153,
  "byte_64": 0.0014207428455449563,
  "byte_bc": 0.00040592652729855896,
  "byte_b4": 0.00020296326364927948,
  "byte_9d": 0.0006088897909478384,
  "byte_56": 0.017454840673838037,
  "byte_cb": 0.0006088897909478384,
  "byte_b0": 0.0008118530545971179,
  "byte_8d": 0.0008118530545971179,
  "byte_a5": 0.0006088897909478384,
  "byte_c3": 0.0010148163182463973,
  "byte_90": 0.04668155063933428,
  "byte_6a": 0.00020296326364927948,
  "byte_26": 0.00020296326364927948,
  "byte_e0": 0.0006088897909478384,
  "byte_f2": 0.0010148163182463973,
  "byte_95": 0.002232595900142074,
  "byte_d8": 0.00040592652729855896,
  "byte_9b": 0.0010148163182463973,
  "byte_41": 0.0006088897909478384,
  "byte_a9": 0.0006088897909478384,
  "byte_9c": 0.00020296326364927948,
  "byte_ab": 0.00040592652729855896,
  "byte_aa": 0.0010148163182463973,
  "byte_58": 0.0008118530545971179,
  "byte_27": 0.00020296326364927948,
  "byte_45": 0.00040592652729855896,
  "byte_62": 0.0010148163182463973,
  "byte_d7": 0.00020296326364927948,
  "byte_d6": 0.00040592652729855896,
  "byte_f8": 0.0006088897909478384,
  "byte_ed": 0.0006088897909478384,
  "byte_3e": 0.0006088897909478384,
  "byte_1a": 0.00040592652729855896,
  "byte_8b": 0.00020296326364927948,
  "byte_fb": 0.00040592652729855896,
  "byte_a4": 0.00040592652729855896,
  "byte_15": 0.016845950882890197,
  "byte_79": 0.0008118530545971179,
  "byte_71": 0.0014207428455449563,
  "byte_91": 0.013801501928151005,
  "byte_99": 0.003044448954739192,
  "byte_9e": 0.0010148163182463973,
  "byte_51": 0.010757052973411813,
  "byte_20": 0.01989039983762939,
  "byte_f3": 0.0016237061091942358,
  "byte_c0": 0.0012177795818956768,
  "byte_ae": 0.00040592652729855896,
  "byte_83": 0.0158311345646438,
  "byte_50": 0.024152628374264257,
  "byte_fc": 0.0010148163182463973,
  "byte_e4": 0.0010148163182463973,
  "byte_1f": 0.0018266693728435153,
  "byte_29": 0.0010148163182463973,
  "byte_0a": 0.020702252892226505,
  "byte_92": 0.005074081591231987,
  "byte_42": 0.0012177795818956768,
  "byte_24": 0.002638522427440633,
  "byte_44": 0.0014207428455449563,
  "byte_94": 0.004059265272985589,
  "byte_96": 0.0010148163182463973,
  "byte_07": 0.004465191800284148,
  "byte_c9": 0.00020296326364927948,
  "byte_d1": 0.0018266693728435153,
  "byte_ee": 0.00020296326364927948,
  "byte_43": 0.00040592652729855896,
  "byte_1e": 0.0020296326364927946,
  "byte_68": 0.0014207428455449563,
  "byte_6d": 0.00020296326364927948,
  "byte_ec": 0.0010148163182463973,
  "byte_74": 0.0010148163182463973,
  "byte_08": 0.003450375482037751,
  "byte_4c": 0.00040592652729855896,
  "byte_d9": 0.00020296326364927948,
  "byte_0e": 0.0018266693728435153,
  "byte_12": 0.0020296326364927946,
  "byte_22": 0.0006088897909478384,
  "byte_32": 0.0006088897909478384,
  "byte_25": 0.0012177795818956768,
  "byte_4a": 0.00020296326364927948,
  "byte_e6": 0.00040592652729855896,
  "byte_54": 0.010148163182463974,
  "byte_33": 0.004871118327582707,
  "byte_8c": 0.0012177795818956768,
  "byte_11": 0.0028414856910899127,
  "byte_55": 0.003450375482037751,
  "byte_7f": 0.002232595900142074,
  "byte_2a": 0.0006088897909478384,
  "byte_b7": 0.00020296326364927948,
  "byte_5d": 0.0006088897909478384,
  "byte_0c": 0.0018266693728435153,
  "byte_88": 0.0006088897909478384,
  "byte_78": 0.00020296326364927948,
  "byte_2f": 0.0008118530545971179,
  "byte_13": 0.0014207428455449563,
  "byte_df": 0.00020296326364927948,
  "byte_9f": 0.00020296326364927948,
  "byte_ac": 0.00020296326364927948,
  "byte_2e": 0.00020296326364927948,
  "byte_a1": 0.0016237061091942358,
  "byte_21": 0.00040592652729855896,
  "byte_f1": 0.002638522427440633,
  "byte_cd": 0.00020296326364927948,
  "byte_30": 0.0018266693728435153,
  "byte_75": 0.00020296326364927948,
  "byte_2b": 0.0012177795818956768,
  "byte_65": 0.00040592652729855896,
  "byte_ea": 0.00040592652729855896,
  "byte_f0": 0.00020296326364927948,
  "byte_d3": 0.0006088897909478384,
  "byte_b1": 0.00040592652729855896,
  "byte_fa": 0.00040592652729855896,
  "byte_b9": 0.0008118530545971179,
  "byte_d0": 0.00040592652729855896,
  "byte_85": 0.0036533387456870307,
  "byte_b6": 0.00020296326364927948,
  "byte_db": 0.00040592652729855896,
  "byte_76": 0.00020296326364927948,
  "byte_a3": 0.0014207428455449563,
  "byte_bf": 0.00020296326364927948,
  "byte_f6": 0.00020296326364927948,
  "byte_73": 0.0006088897909478384,
  "byte_87": 0.00040592652729855896,
  "byte_eb": 0.0006088897909478384,
  "byte_4f": 0.0006088897909478384,
  "byte_b2": 0.0006088897909478384,
  "byte_c8": 0.0012177795818956768,
  "byte_c7": 0.0008118530545971179,
  "byte_da": 0.00020296326364927948,
  "byte_1b": 0.0006088897909478384,
  "byte_e2": 0.0008118530545971179,
  "byte_c2": 0.0006088897909478384,
  "byte_c4": 0.0006088897909478384,
  "byte_28": 0.0006088897909478384,
  "byte_f5": 0.0012177795818956768,
  "byte_4d": 0.0006088897909478384,
  "byte_ef": 0.0006088897909478384,
  "byte_fe": 0.0006088897909478384,
  "byte_48": 0.00020296326364927948,
  "byte_98": 0.00040592652729855896,
  "byte_39": 0.00020296326364927948,
  "byte_cf": 0.00020296326364927948,
  "byte_89": 0.0006088897909478384,
  "byte_53": 0.00020296326364927948,
  "byte_7a": 0.0006088897909478384,
  "byte_c5": 0.00020296326364927948,
  "byte_e9": 0.00020296326364927948,
  "byte_1d": 0.00020296326364927948,
  "byte_4e": 0.00020296326364927948,
  "num_nodes": 24,
  "num_edges": 23,
  "avg_degree": 1.9166666666666667,
  "density": 0.041666666666666664,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 23,
  "event_nums": 1000,
  "creation_block": 5248999,
  "creation_timestamp": 1520960158,
  "life_time": 2970018.0,
  "duration_seconds": 43086835.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 25,
  "num_buyers": 1,
  "num_sellers": 23,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 7.74405820299466e-06,
  "avg_gas_limit": 166344.69565217392,
  "std_gas_limit": 326810.55837041995,
  "avg_gas_used": 84151.73913043478,
  "std_gas_used": 202347.93571732426,
  "avg_gas_price": 12963900578.652174,
  "std_gas_price": 12662812091.858845,
  "unpause_num": 1,
  "mint_num": 40,
  "transfer_num": 19,
  "approve_num": 3,
  "timeline_sequence": [
    [
      5313147,
      1521894823,
      3,
      2,
      0,
      52877,
      41000000000,
      0,
      1,
      111032,
      52877,
      17807859
    ],
    [
      5613651,
      1526323270,
      3,
      88,
      0,
      52877,
      21000000000,
      0,
      1,
      2361133,
      52877,
      17507355
    ],
    [
      5628308,
      1526546043,
      12,
      98,
      0,
      54472,
      10000000000,
      0,
      1,
      4596355,
      53005,
      17492698
    ],
    [
      5685792,
      1527426619,
      60,
      155,
      0,
      250000,
      15000000000,
      0,
      1,
      5092182,
      45875,
      17435214
    ],
    [
      5686572,
      1527438959,
      27,
      187,
      0,
      52877,
      7000000000,
      0,
      1,
      7089167,
      37877,
      17434434
    ],
    [
      5689641,
      1527484707,
      65,
      53,
      0,
      250000,
      6000000000,
      0,
      1,
      2510691,
      45875,
      17431365
    ],
    [
      5712281,
      1527832042,
      41,
      83,
      0,
      100000,
      17000000000,
      0,
      1,
      7432594,
      37941,
      17408725
    ],
    [
      5754324,
      1528476313,
      20,
      87,
      0,
      55000,
      10000000000,
      0,
      1,
      2709153,
      37941,
      17366682
    ],
    [
      5759112,
      1528549553,
      54,
      69,
      0,
      52941,
      8000000000,
      0,
      1,
      3287685,
      37941,
      17361894
    ],
    [
      5820738,
      1529470990,
      28,
      72,
      0,
      37941,
      18000000000,
      0,
      1,
      2713778,
      22941,
      17300268
    ],
    [
      5850072,
      1529903555,
      20,
      184,
      0,
      250000,
      4000000000,
      0,
      1,
      6988614,
      46003,
      17270934
    ],
    [
      5861418,
      1530075585,
      22,
      88,
      0,
      52941,
      4000000000,
      0,
      1,
      3971955,
      37941,
      17259588
    ],
    [
      5897878,
      1530615008,
      481,
      6,
      0,
      150000,
      50000000000,
      0,
      1,
      178941,
      52941,
      17223128
    ],
    [
      6026744,
      1532511222,
      118,
      2,
      0,
      53941,
      37077547690,
      0,
      1,
      79941,
      37941,
      17094262
    ],
    [
      6032856,
      1532600158,
      37,
      10,
      0,
      38941,
      8675455583,
      0,
      1,
      843227,
      22941,
      17088150
    ],
    [
      6177167,
      1534706276,
      49,
      25,
      0,
      38941,
      9045068180,
      0,
      1,
      1251637,
      22941,
      16943839
    ],
    [
      6246798,
      1535721983,
      30,
      26,
      0,
      60000,
      6371641856,
      0,
      1,
      1860321,
      52749,
      16874208
    ],
    [
      6517312,
      1539573273,
      128,
      141,
      0,
      100000,
      5000000000,
      0,
      1,
      3843419,
      37941,
      16603694
    ],
    [
      6554797,
      1540102499,
      95,
      43,
      0,
      60000,
      5000000000,
      0,
      1,
      1669562,
      52941,
      16566209
    ],
    [
      6740943,
      1542737518,
      73,
      128,
      0,
      100000,
      7000000000,
      0,
      1,
      5199728,
      37941,
      16380063
    ],
    [
      7128067,
      1548488782,
      45,
      148,
      0,
      52941,
      4000000000,
      0,
      1,
      6669243,
      37941,
      15992939
    ],
    [
      8219017,
      1564046993,
      297,
      69,
      0,
      250000,
      5000000000,
      0,
      1,
      3633686,
      37877,
      14901989
    ],
    [
      5248999,
      1520960158,
      0,
      0,
      0,
      1659238,
      0,
      0,
      0,
      0,
      1032242,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.18;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = true;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n   @title ERC827 interface, an extension of ERC20 token standard\n   Interface of a ERC827 token, following the ERC20 standard with extra\n   methods to transfer value and data and execute calls in transfers and\n   approvals.\n */\ncontract ERC827 is ERC20 {\n\n  function approve( address _spender, uint256 _value, bytes _data ) public returns (bool);\n  function transfer( address _to, uint256 _value, bytes _data ) public returns (bool);\n  function transferFrom( address _from, address _to, uint256 _value, bytes _data ) public returns (bool);\n\n}\n\n/**\n   @title ERC827, an extension of ERC20 token standard\n   Implementation the ERC827, following the ERC20 standard with extra\n   methods to transfer value and data and execute calls in transfers and\n   approvals.\n   Uses OpenZeppelin StandardToken.\n */\ncontract ERC827Token is ERC827, StandardToken {\n\n  /**\n     @dev Addition to ERC20 token methods. It allows to\n     approve the transfer of value and execute a call with the sent data.\n     Beware that changing an allowance with this method brings the risk that\n     someone may use both the old and the new allowance by unfortunate\n     transaction ordering. One possible solution to mitigate this race condition\n     is to first reduce the spender's allowance to 0 and set the desired value\n     afterwards:\n     https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     @param _spender The address that will spend the funds.\n     @param _value The amount of tokens to be spent.\n     @param _data ABI-encoded contract call to call `_to` address.\n     @return true if the call function was executed successfully\n   */\n  function approve(address _spender, uint256 _value, bytes _data) public returns (bool) {\n    require(_spender != address(this));\n\n    super.approve(_spender, _value);\n\n    require(_spender.call(_data));\n\n    return true;\n  }\n\n  /**\n     @dev Addition to ERC20 token methods. Transfer tokens to a specified\n     address and execute a call with the sent data on the same transaction\n     @param _to address The address which you want to transfer to\n     @param _value uint256 the amout of tokens to be transfered\n     @param _data ABI-encoded contract call to call `_to` address.\n     @return true if the call function was executed successfully\n   */\n  function transfer(address _to, uint256 _value, bytes _data) public returns (bool) {\n    require(_to != address(this));\n\n    super.transfer(_to, _value);\n\n    require(_to.call(_data));\n    return true;\n  }\n\n  /**\n     @dev Addition to ERC20 token methods. Transfer tokens from one address to\n     another and make a contract call on the same transaction\n     @param _from The address which you want to send tokens from\n     @param _to The address which you want to transfer to\n     @param _value The amout of tokens to be transferred\n     @param _data ABI-encoded contract call to call `_to` address.\n     @return true if the call function was executed successfully\n   */\n  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n    require(_to != address(this));\n\n    super.transferFrom(_from, _to, _value);\n\n    require(_to.call(_data));\n    return true;\n  }\n\n  /**\n   * @dev Addition to StandardToken methods. Increase the amount of tokens that\n   * an owner allowed to a spender and execute a call with the sent data.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n  function increaseApproval(address _spender, uint _addedValue, bytes _data) public returns (bool) {\n    require(_spender != address(this));\n\n    super.increaseApproval(_spender, _addedValue);\n\n    require(_spender.call(_data));\n\n    return true;\n  }\n\n  /**\n   * @dev Addition to StandardToken methods. Decrease the amount of tokens that\n   * an owner allowed to a spender and execute a call with the sent data.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   * @param _data ABI-encoded contract call to call `_spender` address.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public returns (bool) {\n    require(_spender != address(this));\n\n    super.decreaseApproval(_spender, _subtractedValue);\n\n    require(_spender.call(_data));\n\n    return true;\n  }\n\n}\n\n/**\n * @title Pausable token\n * @dev ERC827Token modified with pausable transfers.\n **/\ncontract PausableToken is ERC827Token, Pausable {\n\n  // ERC20\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n\n  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {\n    return super.increaseApproval(_spender, _addedValue);\n  }\n\n  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {\n    return super.decreaseApproval(_spender, _subtractedValue);\n  }\n  \n  // ERC827\n  function transfer(address _to, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n      return super.transfer(_to, _value, _data);\n  }\n  \n  function transferFrom(address _from, address _to, uint256 _value, bytes _data) public returns (bool) {\n      return super.transferFrom(_from, _to, _value, _data);\n  }\n  \n  function approve(address _spender, uint256 _value, bytes _data) public whenNotPaused returns (bool) {\n      return super.approve(_spender, _value, _data);\n  }\n  \n  function increaseApproval(address _spender, uint _addedValue, bytes _data) public whenNotPaused returns (bool) {\n      return super.increaseApproval(_spender, _addedValue, _data);\n  }\n  \n  function decreaseApproval(address _spender, uint _subtractedValue, bytes _data) public whenNotPaused returns (bool) {\n      return super.decreaseApproval(_spender, _subtractedValue, _data);\n  }\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is PausableToken {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title Capped token\n * @dev Mintable token with a token cap.\n */\ncontract AirEX is MintableToken {\n  string public constant name = \"AIRX\";\n  string public constant symbol = \"AIRX\";\n  uint8 public constant decimals = 18;\n\n  uint256 public hardCap;\n  uint256 public softCap;\n\n  function AirEX(uint256 _cap) public {\n    require(_cap > 0);\n    hardCap = _cap;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    require(totalSupply_.add(_amount) <= hardCap);\n    return super.mint(_to, _amount);\n  }\n  \n  function updateHardCap(uint256 _cap) onlyOwner public {\n    require(_cap > 0);\n    hardCap = _cap;\n  }\n  \n  function updateSoftCap(uint256 _cap) onlyOwner public {\n    require(_cap > 0);\n    softCap = _cap;  \n  }\n\n}\n\ncontract SalesManagerUpgradable is Ownable {\n    using SafeMath for uint256;\n\n/* SZ: Change here to collection address before deploy */\n    address public ethOwner = 0xe8290a10565CB7aDeE9246661B34BB77CB6e4024;\n/* SZ: price1..3 in AIRX per 1 ETH */\n    uint public price1 = 100;\n    uint public price2 = 110;\n    uint public price3 = 125;\n\n/* SZ: lev1..2 in ETH */\n    uint public lev1 = 2 ether;\n    uint public lev2 = 10 ether;\n    \n    uint public ethFundRaised;\n    \n    address public tokenAddress;\n\n/* SZ: AIRX constructor with HardCap in AIRX tokens */\n    function SalesManagerUpgradable () public {\n        tokenAddress = new AirEX(5550000 ether);\n    }\n\n    function () payable public {\n        if(msg.value > 0) revert();\n    }\n\n    function buyTokens(address _investor) public payable returns (bool){\n        if (msg.value <= lev1) {\n            uint tokens = msg.value.mul(price1);\n            if (!sendTokens(tokens, msg.value, _investor)) revert();\n            return true;\n        } else if (msg.value > lev1 && msg.value <= lev2) {\n            tokens = msg.value.mul(price2);\n            if (!sendTokens(tokens, msg.value, _investor)) revert();\n            return true;\n        } else if (msg.value > lev2) {\n            tokens = msg.value.mul(price3);\n            if (!sendTokens(tokens, msg.value, _investor)) revert();\n            return true;\n        }\n        return false;\n    }\n\n    function sendTokens(uint _amount, uint _ethers, address _investor) private returns (bool) {\n        AirEX tokenHolder = AirEX(tokenAddress);\n        if (tokenHolder.mint(_investor, _amount)) {\n            ethFundRaised = ethFundRaised.add(_ethers);\n            ethOwner.transfer(_ethers);\n            return true;\n        }\n        return false;\n    }\n    \n    function generateTokensManually(uint _amount, address _to) public onlyOwner {\n        AirEX tokenHolder = AirEX(tokenAddress);\n        tokenHolder.mint(_to, _amount);\n    }\n    \n    function setColdAddress(address _newAddr) public onlyOwner {\n        ethOwner = _newAddr;\n    }\n    \n    function setPrice1 (uint _price) public onlyOwner {\n        price1 = _price;\n    }\n    \n    function setPrice2 (uint _price) public onlyOwner {\n        price2 = _price;\n    }\n    \n    function setPrice3 (uint _price) public onlyOwner {\n        price3 = _price;\n    }\n\n/* SZ: Functions setLev1, setLev2 to change levels of prices*/\n/* SZ: lev1..2 send as for example \"2000000000000000000\" for 2 ETH */\n    function setLev1 (uint _price) public onlyOwner {\n        lev1 = _price;\n    }\n\n    function setLev2 (uint _price) public onlyOwner {\n        lev2 = _price;\n    }\n    \n    function transferOwnershipToken(address newTokenOwnerAddress) public onlyOwner {\n        AirEX tokenContract = AirEX(tokenAddress);\n        tokenContract.transferOwnership(newTokenOwnerAddress);\n    }\n    \n    function updateHardCap(uint256 _cap) public onlyOwner {\n        AirEX tokenContract = AirEX(tokenAddress);\n        tokenContract.updateHardCap(_cap);\n    }\n    \n    function updateSoftCap(uint256 _cap) public onlyOwner {\n        AirEX tokenContract = AirEX(tokenAddress);\n        tokenContract.updateSoftCap(_cap);\n    }\n    \n    function unPauseContract() public onlyOwner {\n        AirEX tokenContract = AirEX(tokenAddress);\n        tokenContract.unpause();\n    }\n    \n    function pauseContract() public onlyOwner {\n        AirEX tokenContract = AirEX(tokenAddress);\n        tokenContract.pause();\n    }\n    \n    function finishMinting() public onlyOwner {\n        AirEX tokenContract = AirEX(tokenAddress);\n        tokenContract.finishMinting();\n    }\n    \n    function drop(address[] _destinations, uint256[] _amount) onlyOwner public\n    returns (uint) {\n        uint i = 0;\n        while (i < _destinations.length) {\n           AirEX(tokenAddress).mint(_destinations[i], _amount[i]);\n           i += 1;\n        }\n        return(i);\n    }\n    \n    function withdraw(address _to) public onlyOwner {\n        _to.transfer(this.balance);\n    }\n    \n    function destroySalesManager(address _recipient) public onlyOwner {\n        selfdestruct(_recipient);\n    }\n}\n\n\ncontract DepositManager is Ownable {\n    address public actualSalesAddress;\n    \n    function DepositManager (address _actualAddres) public {\n        actualSalesAddress = _actualAddres;\n    }\n    \n    function () payable public {\n        SalesManagerUpgradable sm = SalesManagerUpgradable(actualSalesAddress);\n        if(!sm.buyTokens.value(msg.value)(msg.sender)) revert();\n    }\n    \n    function setNewSalesManager (address _newAddr) public onlyOwner {\n        actualSalesAddress = _newAddr;\n    }\n\n}"
}