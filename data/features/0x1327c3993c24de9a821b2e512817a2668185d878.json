{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH1 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH1 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 PUSH1 MUL DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH1 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 PUSH1 MUL DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 PUSH1 DUP4 PUSH1 AND PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH7 CALLVALUE EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST CALLVALUE PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP1 SLOAD DUP1 PUSH1 ADD DUP3 DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD DUP5 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 PUSH1 AND MUL OR SWAP1 SSTORE POP POP CALLER PUSH1 DUP4 PUSH1 AND PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 DUP1 SLOAD DUP1 PUSH1 ADD DUP3 DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 ADD PUSH1 CALLER SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP PUSH1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 PUSH1 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 PUSH1 MUL PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 JUMPDEST DUP2 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 GT PUSH2 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP1 SLOAD SWAP1 POP EQ ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH20 AND PUSH1 DUP9 PUSH1 AND PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP8 PUSH1 AND PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST CALLER SWAP6 POP PUSH1 DUP8 PUSH1 AND PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP5 POP PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP1 SLOAD SWAP1 POP SWAP4 POP PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP1 SLOAD SWAP1 POP SWAP3 POP PUSH1 SWAP2 POP JUMPDEST PUSH1 DUP3 LT ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 SUB PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 DUP4 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP2 DUP1 PUSH1 SWAP1 SUB SWAP3 POP POP PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST PUSH1 DUP3 LT ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 SUB PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 DUP4 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP2 DUP1 PUSH1 SWAP1 SUB SWAP3 POP POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP DUP3 DUP5 ADD PUSH1 NUMBER SUB BLOCKHASH PUSH1 SWAP1 DIV DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD PUSH1 DUP2 SWAP1 SSTORE POP DUP4 PUSH1 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP1 SLOAD SWAP1 POP SWAP1 POP PUSH1 SWAP2 POP JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP1 SLOAD DUP1 PUSH1 ADD DUP3 DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP6 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 PUSH1 AND MUL OR SWAP1 SSTORE POP POP DUP6 PUSH1 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP5 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH1 AND PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP2 DUP1 PUSH1 ADD SWAP3 POP POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP DUP6 PUSH1 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP5 PUSH1 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP1 SLOAD SWAP1 POP SWAP1 POP PUSH1 SWAP2 POP JUMPDEST DUP1 DUP3 LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP1 SLOAD DUP1 PUSH1 ADD DUP3 DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP6 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 PUSH1 AND MUL OR SWAP1 SSTORE POP POP DUP5 PUSH1 PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP5 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH1 AND PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP2 DUP1 PUSH1 ADD SWAP3 POP POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP DUP5 PUSH1 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP6 PUSH1 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 PUSH1 MUL PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP3 PUSH1 DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 JUMPDEST DUP2 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 GT PUSH2 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 SLOAD SWAP1 POP SWAP4 POP PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP3 POP PUSH1 SWAP2 POP PUSH1 SWAP1 POP JUMPDEST DUP4 DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH1 AND PUSH1 PUSH1 PUSH1 DUP5 PUSH1 AND DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP1 SLOAD SWAP1 POP LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP2 PUSH1 AND DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP3 POP PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST DUP2 ISZERO PUSH2 JUMPI DUP3 PUSH20 AND PUSH2 PUSH1 PUSH1 PUSH1 SLOAD DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV MUL SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 PUSH1 PUSH1 SLOAD DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP DUP3 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 SWAP1 POP JUMPDEST PUSH1 DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 PUSH1 DUP5 PUSH1 AND PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH1 DUP3 PUSH1 AND PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP1 POP JUMPDEST PUSH1 DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP3 PUSH1 AND PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP3 PUSH1 AND DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH1 AND SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 ISZERO GT PUSH2 JUMPI PUSH1 ADD PUSH1 SWAP1 DIV DUP2 PUSH1 ADD PUSH1 SWAP1 DIV DUP4 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 ISZERO GT PUSH2 JUMPI DUP2 DUP4 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 SWAP1 JUMPDEST PUSH1 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 SWAP1 SUB SWAP1 DUP2 PUSH2 JUMPI SWAP1 POP POP SWAP1 JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 ISZERO GT PUSH2 JUMPI PUSH1 ADD PUSH1 SWAP1 DIV DUP2 PUSH1 ADD PUSH1 SWAP1 DIV DUP4 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 SWAP1 JUMPDEST PUSH1 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 SWAP1 SUB SWAP1 DUP2 PUSH2 JUMPI SWAP1 POP POP SWAP1 JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 ISZERO GT PUSH2 JUMPI DUP2 DUP4 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 PUSH1 SWAP1 SSTORE POP PUSH1 ADD PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP STOP LOG1 PUSH6 SHA3 LOG2 EXTCODECOPY UNKNOWN_0xf6 UNKNOWN_0xd0 UNKNOWN_0xc9 JUMPI PUSH3 UNKNOWN_0xda DUP1 UNKNOWN_0x2d UNKNOWN_0xad UNKNOWN_0x5f MSTORE DUP16 UNKNOWN_0xad UNKNOWN_0xc6 MSTORE8 INVALID_0x6d",
  "opcode_entropy": 4.722206786240214,
  "opcode_count": 2881,
  "unique_opcodes": 72,
  "byte_entropy": 4.44526906098649,
  "byte_0x": 0.00017516202487300754,
  "byte_60": 0.07461902259590121,
  "byte_40": 0.005955508845682256,
  "byte_52": 0.01208617971623752,
  "byte_04": 0.008232615169031354,
  "byte_36": 0.0003503240497460151,
  "byte_10": 0.007707129094412331,
  "byte_61": 0.032930460676125414,
  "byte_00": 0.03976177964617271,
  "byte_af": 0.00017516202487300754,
  "byte_57": 0.01488877211420564,
  "byte_35": 0.0012261341741110527,
  "byte_7c": 0.0003503240497460151,
  "byte_01": 0.03783499737256963,
  "byte_90": 0.04606761254160098,
  "byte_63": 0.002277106323349098,
  "byte_ff": 0.34349273077596776,
  "byte_16": 0.02417235943247504,
  "byte_80": 0.018742336661411806,
  "byte_0b": 0.0010509721492380452,
  "byte_1d": 0.0007006480994920302,
  "byte_cc": 0.0005254860746190226,
  "byte_88": 0.0014012961989840604,
  "byte_14": 0.004904536696444211,
  "byte_b4": 0.0010509721492380452,
  "byte_18": 0.00017516202487300754,
  "byte_48": 0.00017516202487300754,
  "byte_72": 0.0005254860746190226,
  "byte_e7": 0.0005254860746190226,
  "byte_21": 0.0007006480994920302,
  "byte_39": 0.00017516202487300754,
  "byte_c2": 0.0003503240497460151,
  "byte_aa": 0.0003503240497460151,
  "byte_26": 0.0003503240497460151,
  "byte_c8": 0.00017516202487300754,
  "byte_13": 0.0019267822736030828,
  "byte_20": 0.02136976703450692,
  "byte_2f": 0.00017516202487300754,
  "byte_17": 0.0035032404974601507,
  "byte_cb": 0.0003503240497460151,
  "byte_8b": 0.0005254860746190226,
  "byte_7b": 0.00017516202487300754,
  "byte_ba": 0.00017516202487300754,
  "byte_06": 0.002627430373095113,
  "byte_dc": 0.00017516202487300754,
  "byte_8a": 0.0005254860746190226,
  "byte_e6": 0.0005254860746190226,
  "byte_9c": 0.0003503240497460151,
  "byte_02": 0.011911017691364512,
  "byte_a7": 0.0003503240497460151,
  "byte_8d": 0.0003503240497460151,
  "byte_ee": 0.00017516202487300754,
  "byte_fa": 0.0003503240497460151,
  "byte_53": 0.0003503240497460151,
  "byte_b3": 0.00017516202487300754,
  "byte_a9": 0.00017516202487300754,
  "byte_68": 0.00017516202487300754,
  "byte_bf": 0.00017516202487300754,
  "byte_e3": 0.0003503240497460151,
  "byte_f5": 0.0003503240497460151,
  "byte_ed": 0.0003503240497460151,
  "byte_c6": 0.0003503240497460151,
  "byte_e2": 0.00017516202487300754,
  "byte_03": 0.004379050621825188,
  "byte_5b": 0.024347521457348045,
  "byte_fd": 0.002277106323349098,
  "byte_cd": 0.0003503240497460151,
  "byte_91": 0.015239096163951655,
  "byte_50": 0.029602382203538273,
  "byte_56": 0.010509721492380452,
  "byte_51": 0.004554212646698196,
  "byte_82": 0.008933263268523384,
  "byte_15": 0.023121387283236993,
  "byte_81": 0.03047819232790331,
  "byte_f3": 0.0015764582238570678,
  "byte_34": 0.002277106323349098,
  "byte_f2": 0.0003503240497460151,
  "byte_05": 0.0017516202487300753,
  "byte_1a": 0.00017516202487300754,
  "byte_1b": 0.0005254860746190226,
  "byte_24": 0.00017516202487300754,
  "byte_41": 0.00017516202487300754,
  "byte_49": 0.00017516202487300754,
  "byte_9a": 0.00017516202487300754,
  "byte_73": 0.016990716412681732,
  "byte_96": 0.00017516202487300754,
  "byte_9e": 0.00017516202487300754,
  "byte_c4": 0.00017516202487300754,
  "byte_0a": 0.009809073392888421,
  "byte_83": 0.007707129094412331,
  "byte_c9": 0.0003503240497460151,
  "byte_84": 0.0021019442984760903,
  "byte_ae": 0.0005254860746190226,
  "byte_45": 0.00017516202487300754,
  "byte_0d": 0.0005254860746190226,
  "byte_0f": 0.0010509721492380452,
  "byte_a0": 0.00017516202487300754,
  "byte_b2": 0.0024522683482221053,
  "byte_25": 0.00017516202487300754,
  "byte_5e": 0.00017516202487300754,
  "byte_66": 0.0005254860746190226,
  "byte_ab": 0.00017516202487300754,
  "byte_df": 0.00017516202487300754,
  "byte_f8": 0.00017516202487300754,
  "byte_4d": 0.00017516202487300754,
  "byte_65": 0.0003503240497460151,
  "byte_78": 0.00017516202487300754,
  "byte_fe": 0.005955508845682256,
  "byte_54": 0.011735855666491504,
  "byte_b9": 0.00017516202487300754,
  "byte_23": 0.00017516202487300754,
  "byte_86": 0.0007006480994920302,
  "byte_6f": 0.0003503240497460151,
  "byte_c1": 0.00017516202487300754,
  "byte_b5": 0.0008758101243650377,
  "byte_92": 0.0019267822736030828,
  "byte_55": 0.004729374671571204,
  "byte_33": 0.0012261341741110527,
  "byte_2c": 0.0003503240497460151,
  "byte_b1": 0.0005254860746190226,
  "byte_19": 0.0031529164477141357,
  "byte_eb": 0.00017516202487300754,
  "byte_b6": 0.0005254860746190226,
  "byte_b7": 0.0007006480994920302,
  "byte_b8": 0.0017516202487300753,
  "byte_3b": 0.00017516202487300754,
  "byte_11": 0.002627430373095113,
  "byte_f1": 0.0005254860746190226,
  "byte_9d": 0.00017516202487300754,
  "byte_c7": 0.00017516202487300754,
  "byte_07": 0.0007006480994920302,
  "byte_09": 0.0012261341741110527,
  "byte_87": 0.0012261341741110527,
  "byte_74": 0.00017516202487300754,
  "byte_95": 0.00017516202487300754,
  "byte_89": 0.0007006480994920302,
  "byte_94": 0.00017516202487300754,
  "byte_93": 0.0007006480994920302,
  "byte_08": 0.0014012961989840604,
  "byte_d6": 0.00017516202487300754,
  "byte_58": 0.0003503240497460151,
  "byte_3c": 0.0005254860746190226,
  "byte_75": 0.00017516202487300754,
  "byte_f7": 0.0003503240497460151,
  "byte_28": 0.0003503240497460151,
  "byte_db": 0.00017516202487300754,
  "byte_43": 0.00017516202487300754,
  "byte_8e": 0.00017516202487300754,
  "byte_0c": 0.0007006480994920302,
  "byte_99": 0.00017516202487300754,
  "byte_42": 0.00017516202487300754,
  "byte_85": 0.0014012961989840604,
  "byte_a2": 0.0003503240497460151,
  "byte_e9": 0.00017516202487300754,
  "byte_8f": 0.0005254860746190226,
  "byte_0e": 0.0008758101243650377,
  "byte_a1": 0.0007006480994920302,
  "byte_4f": 0.00017516202487300754,
  "byte_97": 0.00017516202487300754,
  "byte_a8": 0.00017516202487300754,
  "byte_4a": 0.00017516202487300754,
  "byte_5c": 0.00017516202487300754,
  "byte_d9": 0.00017516202487300754,
  "byte_fc": 0.0003503240497460151,
  "byte_12": 0.0008758101243650377,
  "byte_f6": 0.0005254860746190226,
  "byte_6b": 0.00017516202487300754,
  "byte_cf": 0.00017516202487300754,
  "byte_d8": 0.00017516202487300754,
  "byte_8c": 0.00017516202487300754,
  "byte_6c": 0.0003503240497460151,
  "byte_30": 0.0003503240497460151,
  "byte_1f": 0.0007006480994920302,
  "byte_e5": 0.00017516202487300754,
  "byte_fb": 0.0007006480994920302,
  "byte_62": 0.0005254860746190226,
  "byte_7a": 0.0003503240497460151,
  "byte_d0": 0.00017516202487300754,
  "byte_a3": 0.00017516202487300754,
  "byte_da": 0.00017516202487300754,
  "byte_2d": 0.00017516202487300754,
  "byte_ad": 0.0003503240497460151,
  "byte_5f": 0.00017516202487300754,
  "byte_6d": 0.00017516202487300754,
  "byte_38": 0.00017516202487300754,
  "byte_22": 0.00017516202487300754,
  "byte_a4": 0.00017516202487300754,
  "byte_4e": 0.00017516202487300754,
  "byte_7e": 0.00017516202487300754,
  "byte_29": 0.00017516202487300754,
  "num_nodes": 217,
  "num_edges": 157,
  "avg_degree": 1.4470046082949308,
  "density": 0.0033495477043864142,
  "connected_components": 74,
  "avg_clustering": 0.0,
  "timeline_sequence": [],
  "sourcecode": "pragma solidity ^0.4.11;\n\ncontract Risk\n{\n    address owner;\n    mapping (address => uint8 []) playerCountries;\n    address[178] ownerofCountry; // size must be fixed\n    address[] playerList;\n    uint256 totalmoney=0;\n    uint256 lastR=3;\n    address lastgameendWinner=address(0);   \n    uint8 winnerLimit=20;\n    \n    address[10] winnerloser; // first 5 represents winner last 5 loser\n\n    function Risk() \n    {\n        owner = msg.sender;\n    }\n    \n    function buyCountry(uint8 countryID) payable returns(bool)\n    {\n        assert(ownerofCountry[countryID]==0); //country unowned\n        assert(msg.value == 10 finney); //0.01 ether\n        \n        totalmoney +=msg.value;\n        playerCountries[msg.sender].push(countryID);\n        ownerofCountry[countryID]=msg.sender;\n        playerList.push(msg.sender);\n        \n        return true;\n    }\n    \n    function attackCountry(uint8 countryID)\n    {\n        assert(playerCountries[msg.sender].length!=0); //player owns county\n        assert(ownerofCountry[countryID]!=address(0)); //country owned\n        assert(msg.sender!=ownerofCountry[countryID]); //not attacking its own country\n        \n        address attacker = msg.sender;\n        address defender = ownerofCountry[countryID];\n        \n        uint a=playerCountries[attacker].length;\n        uint b=playerCountries[defender].length;\n\n        for(uint256 i=9;i>=6;i--)\n            winnerloser[i]=winnerloser[i-1];\n        for(i=4;i>=1;i--)\n            winnerloser[i]=winnerloser[i-1];\n        \n        uint256 loopcount=0;\n        lastR=uint256(block.blockhash(block.number-1))%(a+b);\n        if(lastR<a) //attacker win\n        {\n            loopcount=playerCountries[defender].length;\n            for (i=0;i<loopcount;i++)\n            {\n                playerCountries[attacker].push(playerCountries[defender][i]);\n                ownerofCountry[playerCountries[defender][i]]=attacker;\n            }\n            playerCountries[defender].length=0;\n            winnerloser[0]=attacker;\n            winnerloser[5]=defender;\n        }\n        else //defender win\n        {\n            loopcount=playerCountries[attacker].length;\n            for (i=0;i<loopcount;i++)\n            {\n                playerCountries[defender].push(playerCountries[attacker][i]);\n                ownerofCountry[playerCountries[attacker][i]]=defender;\n            }\n            playerCountries[attacker].length=0;\n            winnerloser[0]=defender;\n            winnerloser[5]=attacker;\n        }\n        isGameEnd();\n    }\n    function isGameEnd()\n    {\n        uint256 loopcount=playerList.length;\n        address winner=owner;\n        \n        //require 15 country ownership for testing\n        bool del=false;\n        for (uint8 i=0; i<loopcount;i++)\n        {\n            if(playerCountries[playerList[i]].length>=winnerLimit) //iswinner\n            {\n                winner=playerList[i];\n                del=true;\n                \n                break;\n            }\n        }\n        //deleteeverything\n        if(del)\n        {\n            winner.transfer(totalmoney/10*9); //distribute 90%\n            owner.transfer(totalmoney/10);\n            totalmoney=0;\n            lastgameendWinner=winner;\n            for (i=0;i<178;i++)\n            {\n                playerCountries[ownerofCountry[i]].length=0;\n                ownerofCountry[i]=0;\n            }\n            playerList.length=0;\n            for(i=0;i<10;i++)\n                winnerloser[i]=address(0);\n        }\n    }\n    function setwinnerLimit (uint8 x)\n    {\n        assert(msg.sender==owner);\n        winnerLimit=x;\n    }\n    function getCountryOwnershipList() constant returns (address[178])\n    {\n        return ownerofCountry;\n    }\n    function getTotalBet()constant returns (uint256)\n    {\n        return totalmoney;\n    }\n    function getaddr(address ax, uint8 bx) constant returns(address)\n    {\n        return playerCountries[ax][bx];\n    }\n    function len(address ax) constant returns(uint)\n    {\n        return playerCountries[ax].length;\n    }\n    function lastrandom() constant returns(uint256)\n    {\n        return lastR;\n    }\n    function getwinnerloser() constant returns(address[10])\n    {\n        return winnerloser;\n    }\n    function lastgamewinner() constant returns(address)\n    {\n        return lastgameendWinner;\n    }\n    \n}"
}