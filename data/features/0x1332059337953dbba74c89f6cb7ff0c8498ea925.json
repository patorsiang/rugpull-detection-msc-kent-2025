{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP1 CALLDATALOAD DUP1 DUP3 ADD CALLDATALOAD PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 SWAP5 CALLDATASIZE SWAP5 SWAP3 SWAP4 PUSH1 SWAP4 SWAP3 DUP5 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 CALLDATALOAD PUSH1 DUP2 DUP2 ADD CALLDATALOAD SWAP3 DUP4 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP2 DUP5 MSTORE PUSH2 SWAP5 PUSH1 PUSH1 PUSH1 EXP SUB DUP2 CALLDATALOAD AND SWAP5 PUSH1 DUP1 CALLDATALOAD SWAP6 PUSH1 CALLDATALOAD SWAP6 CALLDATASIZE SWAP6 PUSH1 SWAP5 SWAP4 ADD SWAP2 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP5 POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 CALLDATALOAD DUP2 DUP2 ADD CALLDATALOAD PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 SWAP5 DUP3 CALLDATALOAD SWAP5 PUSH1 DUP1 CALLDATALOAD SWAP6 CALLDATASIZE SWAP6 SWAP5 PUSH1 SWAP5 SWAP3 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE CALLER PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH3 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE CALLER PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND PUSH21 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH3 DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE CALLER PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SLOAD SWAP5 POP PUSH1 DUP1 SLOAD SWAP1 POP DUP9 DUP7 ADD GT PUSH2 JUMPI DUP8 DUP6 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD JUMPDEST SWAP3 POP PUSH1 SWAP2 POP DUP5 SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD DUP2 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP7 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 ADD SWAP1 SHA3 SLOAD PUSH6 PUSH8 SWAP1 SWAP2 DIV AND ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 DUP1 DUP7 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 ADD SWAP1 SHA3 SLOAD PUSH6 PUSH8 SWAP1 SWAP2 DIV DUP2 AND PUSH2 ADD AND NUMBER GT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 DUP6 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST PUSH1 SUB SWAP1 POP PUSH1 DUP2 SGT ISZERO PUSH2 JUMPI PUSH2 PUSH3 PUSH2 PUSH1 SLOAD DUP5 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST DUP3 ADD SWAP2 POP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP1 SWAP4 ADD SWAP3 PUSH2 JUMP JUMPDEST PUSH1 DUP5 SWAP1 SSTORE PUSH6 DUP3 LT PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE CALLER PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP JUMPDEST POP SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE CALLER PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 MLOAD PUSH2 SWAP1 PUSH1 SWAP1 PUSH1 DUP5 ADD SWAP1 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH21 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE CALLER PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP6 DUP6 DUP6 PUSH1 PUSH2 DUP4 PUSH2 JUMP JUMPDEST PUSH1 AND SWAP1 POP PUSH2 DUP5 DUP3 DUP5 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP12 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP12 SWAP1 PUSH6 PUSH8 SWAP1 SWAP2 DIV AND NUMBER EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP13 PUSH2 JUMP JUMPDEST DUP1 SLOAD SWAP1 SWAP9 POP PUSH8 SWAP1 DIV PUSH6 AND ISZERO PUSH2 JUMPI PUSH2 DUP13 PUSH2 JUMP JUMPDEST POP JUMPDEST DUP9 PUSH1 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 PUSH1 EXP MUL PUSH1 PUSH1 EXP SWAP1 DIV SWAP7 POP DUP9 PUSH1 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP6 POP PUSH2 PUSH6 PUSH2 DUP14 PUSH1 DUP12 AND PUSH4 PUSH2 AND JUMP JUMPDEST DUP9 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH7 MUL NOT AND SWAP1 DUP4 PUSH7 AND MUL OR SWAP1 SSTORE POP NUMBER DUP9 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH6 MUL NOT AND SWAP1 DUP4 PUSH6 AND MUL OR SWAP1 SSTORE POP DUP10 DUP9 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 PUSH1 AND MUL OR SWAP1 SSTORE POP DUP6 DUP9 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 PUSH1 AND MUL OR SWAP1 SSTORE POP DUP7 DUP9 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 PUSH1 AND MUL OR SWAP1 SSTORE POP PUSH1 DUP1 SLOAD DUP1 SWAP2 SWAP1 PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP DUP12 PUSH1 PUSH1 SLOAD DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 PUSH1 PUSH1 EXP SUB MUL NOT AND SWAP1 DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 ADD SWAP2 SWAP1 POP SSTORE POP PUSH1 PUSH1 SLOAD SUB PUSH1 PUSH1 DUP15 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH32 DUP13 DUP13 DUP12 PUSH1 MLOAD DUP1 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 SWAP2 SWAP1 PUSH6 PUSH8 SWAP1 SWAP2 DIV AND NUMBER EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLER PUSH2 JUMP JUMPDEST SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH8 DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP1 DUP8 PUSH1 AND PUSH1 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 MUL PUSH1 ADD DUP3 ADD PUSH1 MSTORE DUP1 ISZERO PUSH2 JUMPI DUP2 PUSH1 ADD PUSH1 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY ADD SWAP1 POP JUMPDEST POP SWAP3 POP PUSH1 DUP11 NUMBER SUB GT ISZERO PUSH2 JUMPI PUSH2 DUP8 PUSH1 DUP11 AND PUSH4 PUSH2 AND JUMP JUMPDEST SWAP4 POP PUSH2 JUMP JUMPDEST PUSH2 DUP8 DUP11 PUSH1 AND PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 SWAP1 POP JUMPDEST DUP8 PUSH1 AND DUP2 LT ISZERO PUSH2 JUMPI PUSH2 PUSH1 DUP12 DUP9 DUP5 PUSH2 JUMP JUMPDEST PUSH1 ADD DUP4 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE DUP3 MLOAD PUSH1 DUP11 AND SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD LT ISZERO PUSH2 JUMPI DUP7 DUP3 ADD DUP6 ADD SWAP5 POP PUSH2 JUMP JUMPDEST SWAP3 DUP7 ADD SWAP3 JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH32 DUP11 DUP8 DUP12 DUP12 DUP12 DUP11 DUP11 DUP11 PUSH1 MLOAD DUP1 DUP10 DUP2 MSTORE PUSH1 ADD DUP9 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP8 PUSH1 AND DUP2 MSTORE PUSH1 ADD DUP7 PUSH1 AND DUP2 MSTORE PUSH1 ADD DUP6 DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP10 POP POP POP POP POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP SWAP6 POP SWAP6 POP SWAP6 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE CALLER PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 PUSH1 NOT PUSH2 PUSH1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 PUSH1 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP1 POP PUSH2 PUSH2 JUMP JUMPDEST PUSH2 DUP7 DUP4 PUSH1 AND PUSH2 JUMP JUMPDEST LT DUP1 ISZERO PUSH2 JUMPI POP PUSH8 DUP6 LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 PUSH1 AND LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 PUSH1 AND GT ISZERO JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 DUP7 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP2 ADD DUP3 MSTORE DUP3 SLOAD PUSH7 DUP2 AND DUP3 MSTORE PUSH6 PUSH8 DUP3 DIV AND PUSH1 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 PUSH14 DUP4 DIV DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH15 DUP3 DIV DUP5 AND PUSH1 DUP5 ADD MSTORE PUSH16 SWAP1 SWAP2 DIV SWAP1 SWAP3 AND PUSH1 DUP3 ADD MSTORE SWAP2 SWAP4 POP SWAP1 SWAP2 POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 ADD MLOAD PUSH6 AND DUP3 PUSH1 ADD MLOAD DUP4 PUSH1 ADD MLOAD PUSH2 PUSH6 DUP7 PUSH1 ADD MLOAD PUSH7 AND PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST DUP11 PUSH2 JUMP JUMPDEST SWAP2 SWAP9 SWAP1 SWAP8 POP SWAP1 SWAP6 POP SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 DUP2 JUMP JUMPDEST PUSH2 DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 SWAP2 CALLER SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 JUMP JUMPDEST POP SWAP1 SWAP9 SWAP1 SWAP8 POP SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 DUP10 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP2 ADD DUP3 MSTORE DUP3 SLOAD PUSH7 DUP2 AND DUP3 MSTORE PUSH6 PUSH8 DUP3 DIV AND PUSH1 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 PUSH14 DUP4 DIV DUP2 AND SWAP5 DUP5 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH15 DUP3 DIV DUP5 AND PUSH1 DUP5 ADD MSTORE PUSH16 SWAP1 SWAP2 DIV SWAP1 SWAP3 AND PUSH1 DUP3 ADD MSTORE SWAP2 SWAP7 POP SWAP1 SWAP5 POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP5 SLOAD PUSH13 NOT AND DUP6 SSTORE PUSH1 DUP5 ADD MLOAD PUSH1 DUP6 ADD MLOAD PUSH1 DUP7 ADD MLOAD DUP7 MLOAD PUSH2 SWAP4 PUSH6 AND SWAP3 SWAP2 SWAP1 PUSH2 SWAP1 PUSH7 AND PUSH6 PUSH4 PUSH2 AND JUMP JUMPDEST DUP14 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 DUP9 ADD MLOAD DUP2 MLOAD PUSH32 DUP2 MSTORE PUSH1 SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP4 SWAP11 POP SWAP2 SWAP9 POP PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP6 ADD MLOAD DUP6 MLOAD SWAP2 SWAP5 POP DUP5 SWAP4 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND SWAP2 PUSH4 SWAP2 DUP11 SWAP2 DUP14 SWAP2 PUSH1 SWAP2 DUP3 SWAP2 PUSH2 SWAP2 PUSH1 SWAP1 SWAP2 AND SWAP1 PUSH2 SWAP1 PUSH7 AND PUSH6 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 MLOAD DUP7 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP7 DUP2 MSTORE PUSH1 ADD DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP2 SLOAD SWAP1 SWAP3 POP DUP2 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP12 AND DUP2 MSTORE PUSH1 SWAP1 SWAP2 MSTORE PUSH1 DUP2 SHA3 SSTORE DUP4 MLOAD PUSH32 SWAP1 DUP11 SWAP1 PUSH2 SWAP1 PUSH7 AND PUSH6 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP9 DUP11 SUB DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG1 POP POP POP SWAP2 SWAP1 SWAP3 SUB SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP4 ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 ISZERO ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 EQ ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 EQ ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 EQ ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 EQ ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 EQ ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 EQ ISZERO PUSH2 JUMPI POP PUSH1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH2 PUSH2 DUP3 PUSH2 DUP7 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH2 DUP8 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SUB DUP9 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV ADD MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SUB SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP5 PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP5 BLOCKHASH PUSH1 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH13 PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND MUL DUP3 DUP5 ADD MSTORE PUSH1 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 SWAP1 SWAP3 ADD SWAP3 DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 SWAP4 SWAP2 DUP3 SWAP2 SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 SWAP4 SWAP1 SWAP4 SUB PUSH2 EXP PUSH1 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 SHA3 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 SWAP2 POP PUSH2 JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP4 DUP2 MSTORE PUSH1 SWAP1 SHA3 PUSH2 SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP2 ADD DUP3 MSTORE PUSH1 DUP1 DUP3 MSTORE PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xe0 DUP2 GASPRICE PUSH27 UNKNOWN_0xed STOP UNKNOWN_0x29",
  "opcode_entropy": 4.975722475881131,
  "opcode_count": 5002,
  "unique_opcodes": 88,
  "byte_entropy": 5.764976020524922,
  "byte_0x": 0.00013642564802182812,
  "byte_60": 0.10231923601637108,
  "byte_80": 0.0407912687585266,
  "byte_40": 0.010231923601637109,
  "byte_52": 0.017462482946794,
  "byte_04": 0.011186903137789904,
  "byte_36": 0.0006821282401091405,
  "byte_10": 0.008867667121418827,
  "byte_61": 0.04283765347885402,
  "byte_00": 0.07762619372442019,
  "byte_f8": 0.0015006821282401092,
  "byte_57": 0.021828103683492497,
  "byte_63": 0.00791268758526603,
  "byte_ff": 0.03669849931787176,
  "byte_e0": 0.0017735334242837653,
  "byte_02": 0.01800818553888131,
  "byte_0a": 0.013642564802182811,
  "byte_35": 0.003819918144611187,
  "byte_16": 0.019781718963165076,
  "byte_29": 0.0005457025920873125,
  "byte_ab": 0.0004092769440654843,
  "byte_0c": 0.0016371077762619372,
  "byte_a7": 0.0006821282401091405,
  "byte_81": 0.031241473396998634,
  "byte_14": 0.006139154160982265,
  "byte_fd": 0.01077762619372442,
  "byte_39": 0.0006821282401091405,
  "byte_27": 0.0005457025920873125,
  "byte_01": 0.04788540245566166,
  "byte_0d": 0.0019099590723055935,
  "byte_17": 0.0035470668485675307,
  "byte_3a": 0.0004092769440654843,
  "byte_4f": 0.001091405184174625,
  "byte_69": 0.00013642564802182812,
  "byte_99": 0.00027285129604365623,
  "byte_2c": 0.00013642564802182812,
  "byte_43": 0.001091405184174625,
  "byte_c1": 0.0004092769440654843,
  "byte_59": 0.00013642564802182812,
  "byte_8d": 0.0006821282401091405,
  "byte_53": 0.0005457025920873125,
  "byte_55": 0.0032742155525238743,
  "byte_b9": 0.00027285129604365623,
  "byte_30": 0.0008185538881309686,
  "byte_31": 0.0004092769440654843,
  "byte_68": 0.00027285129604365623,
  "byte_6a": 0.00013642564802182812,
  "byte_56": 0.01514324693042292,
  "byte_1c": 0.001364256480218281,
  "byte_11": 0.002592087312414734,
  "byte_7d": 0.0004092769440654843,
  "byte_6c": 0.0004092769440654843,
  "byte_9a": 0.00027285129604365623,
  "byte_5c": 0.0005457025920873125,
  "byte_92": 0.008731241473397,
  "byte_75": 0.0005457025920873125,
  "byte_9d": 0.00027285129604365623,
  "byte_c3": 0.0004092769440654843,
  "byte_82": 0.016643929058663028,
  "byte_91": 0.01787175989085948,
  "byte_87": 0.0043656207366985,
  "byte_a2": 0.0005457025920873125,
  "byte_f0": 0.00027285129604365623,
  "byte_88": 0.002592087312414734,
  "byte_96": 0.0012278308321964529,
  "byte_19": 0.005593451568894952,
  "byte_a1": 0.0009549795361527968,
  "byte_f5": 0.00013642564802182812,
  "byte_6b": 0.00013642564802182812,
  "byte_b2": 0.0004092769440654843,
  "byte_a5": 0.00013642564802182812,
  "byte_3c": 0.0005457025920873125,
  "byte_03": 0.0165075034106412,
  "byte_47": 0.00013642564802182812,
  "byte_bb": 0.0004092769440654843,
  "byte_da": 0.0004092769440654843,
  "byte_33": 0.002319236016371078,
  "byte_d9": 0.0004092769440654843,
  "byte_ed": 0.0006821282401091405,
  "byte_54": 0.009140518417462483,
  "byte_f2": 0.0006821282401091405,
  "byte_c8": 0.00013642564802182812,
  "byte_f3": 0.0016371077762619372,
  "byte_a9": 0.00027285129604365623,
  "byte_e1": 0.001091405184174625,
  "byte_66": 0.0016371077762619372,
  "byte_d6": 0.00027285129604365623,
  "byte_67": 0.001364256480218281,
  "byte_dc": 0.00013642564802182812,
  "byte_d7": 0.0004092769440654843,
  "byte_e5": 0.0009549795361527968,
  "byte_c7": 0.00013642564802182812,
  "byte_74": 0.001364256480218281,
  "byte_de": 0.0004092769440654843,
  "byte_9c": 0.0004092769440654843,
  "byte_ec": 0.00013642564802182812,
  "byte_06": 0.0017735334242837653,
  "byte_2a": 0.00027285129604365623,
  "byte_c0": 0.00013642564802182812,
  "byte_b1": 0.00013642564802182812,
  "byte_fb": 0.00013642564802182812,
  "byte_41": 0.0012278308321964529,
  "byte_c6": 0.00013642564802182812,
  "byte_5b": 0.03315143246930423,
  "byte_34": 0.0032742155525238743,
  "byte_15": 0.027557980900409278,
  "byte_09": 0.001091405184174625,
  "byte_50": 0.04638472032742155,
  "byte_f9": 0.00027285129604365623,
  "byte_23": 0.00013642564802182812,
  "byte_26": 0.0004092769440654843,
  "byte_38": 0.00027285129604365623,
  "byte_07": 0.0017735334242837653,
  "byte_51": 0.017053206002728513,
  "byte_90": 0.037107776261937245,
  "byte_20": 0.017598908594815825,
  "byte_5f": 0.0009549795361527968,
  "byte_7a": 0.0016371077762619372,
  "byte_89": 0.0006821282401091405,
  "byte_86": 0.0024556616643929058,
  "byte_9e": 0.00027285129604365623,
  "byte_aa": 0.0012278308321964529,
  "byte_08": 0.0020463847203274215,
  "byte_be": 0.0004092769440654843,
  "byte_83": 0.011596180081855388,
  "byte_cf": 0.0004092769440654843,
  "byte_1f": 0.0015006821282401092,
  "byte_84": 0.007639836289222374,
  "byte_85": 0.0036834924965893586,
  "byte_95": 0.00286493860845839,
  "byte_94": 0.0049113233287858115,
  "byte_93": 0.0031377899045020464,
  "byte_24": 0.0020463847203274215,
  "byte_37": 0.0006821282401091405,
  "byte_97": 0.0008185538881309686,
  "byte_f7": 0.0004092769440654843,
  "byte_28": 0.0005457025920873125,
  "byte_64": 0.001364256480218281,
  "byte_a0": 0.007639836289222374,
  "byte_44": 0.001364256480218281,
  "byte_0f": 0.0016371077762619372,
  "byte_f6": 0.0008185538881309686,
  "byte_45": 0.0004092769440654843,
  "byte_13": 0.0019099590723055935,
  "byte_3e": 0.0024556616643929058,
  "byte_b7": 0.0012278308321964529,
  "byte_9f": 0.00027285129604365623,
  "byte_e4": 0.0005457025920873125,
  "byte_fe": 0.002728512960436562,
  "byte_d5": 0.0004092769440654843,
  "byte_72": 0.0005457025920873125,
  "byte_4d": 0.00013642564802182812,
  "byte_4e": 0.00013642564802182812,
  "byte_a8": 0.00027285129604365623,
  "byte_bd": 0.0004092769440654843,
  "byte_5a": 0.0031377899045020464,
  "byte_d2": 0.0005457025920873125,
  "byte_e6": 0.0005457025920873125,
  "byte_05": 0.003819918144611187,
  "byte_4b": 0.0006821282401091405,
  "byte_8f": 0.0009549795361527968,
  "byte_eb": 0.0009549795361527968,
  "byte_3b": 0.002319236016371078,
  "byte_f1": 0.00218281036834925,
  "byte_3d": 0.005866302864938608,
  "byte_8a": 0.0020463847203274215,
  "byte_2f": 0.0006821282401091405,
  "byte_bf": 0.0009549795361527968,
  "byte_6e": 0.0009549795361527968,
  "byte_62": 0.0006821282401091405,
  "byte_42": 0.0004092769440654843,
  "byte_21": 0.0005457025920873125,
  "byte_1a": 0.003819918144611187,
  "byte_e8": 0.0006821282401091405,
  "byte_48": 0.00027285129604365623,
  "byte_65": 0.002592087312414734,
  "byte_e9": 0.00013642564802182812,
  "byte_2d": 0.0006821282401091405,
  "byte_7f": 0.002319236016371078,
  "byte_b5": 0.0005457025920873125,
  "byte_ea": 0.00027285129604365623,
  "byte_cb": 0.0004092769440654843,
  "byte_d1": 0.00013642564802182812,
  "byte_0b": 0.0008185538881309686,
  "byte_5e": 0.0005457025920873125,
  "byte_22": 0.00013642564802182812,
  "byte_1b": 0.0012278308321964529,
  "byte_5d": 0.00027285129604365623,
  "byte_c9": 0.0006821282401091405,
  "byte_cc": 0.00013642564802182812,
  "byte_8b": 0.001364256480218281,
  "byte_8c": 0.0005457025920873125,
  "byte_98": 0.0006821282401091405,
  "byte_0e": 0.0005457025920873125,
  "byte_8e": 0.00027285129604365623,
  "byte_fc": 0.0004092769440654843,
  "byte_1d": 0.0004092769440654843,
  "byte_46": 0.00027285129604365623,
  "byte_1e": 0.00013642564802182812,
  "byte_bc": 0.0004092769440654843,
  "byte_d3": 0.00013642564802182812,
  "byte_dd": 0.0004092769440654843,
  "byte_df": 0.0004092769440654843,
  "byte_b8": 0.0004092769440654843,
  "byte_4a": 0.00013642564802182812,
  "byte_ac": 0.00013642564802182812,
  "byte_32": 0.00027285129604365623,
  "byte_b6": 0.0004092769440654843,
  "byte_b3": 0.0005457025920873125,
  "byte_9b": 0.00013642564802182812,
  "byte_25": 0.00027285129604365623,
  "byte_af": 0.00013642564802182812,
  "byte_ce": 0.0005457025920873125,
  "byte_ad": 0.00027285129604365623,
  "byte_18": 0.0006821282401091405,
  "byte_2b": 0.00013642564802182812,
  "byte_6f": 0.0004092769440654843,
  "byte_6d": 0.0004092769440654843,
  "byte_d0": 0.0004092769440654843,
  "byte_12": 0.0006821282401091405,
  "byte_73": 0.0006821282401091405,
  "byte_ca": 0.00027285129604365623,
  "byte_e7": 0.00013642564802182812,
  "byte_3f": 0.0009549795361527968,
  "byte_a3": 0.00013642564802182812,
  "byte_fa": 0.00027285129604365623,
  "byte_a6": 0.00013642564802182812,
  "byte_d8": 0.00013642564802182812,
  "byte_ae": 0.00013642564802182812,
  "byte_ee": 0.00027285129604365623,
  "byte_79": 0.00013642564802182812,
  "byte_a4": 0.00013642564802182812,
  "byte_c4": 0.00013642564802182812,
  "byte_58": 0.00013642564802182812,
  "byte_2e": 0.00027285129604365623,
  "byte_d4": 0.00013642564802182812,
  "byte_e2": 0.00013642564802182812,
  "byte_49": 0.00013642564802182812,
  "byte_b0": 0.00013642564802182812,
  "num_nodes": 400,
  "num_edges": 300,
  "avg_degree": 1.5,
  "density": 0.0018796992481203006,
  "connected_components": 130,
  "avg_clustering": 0.003333333333333333,
  "timeline_sequence": [],
  "sourcecode": "/*\n  Zethr | https://zethr.io\n  (c) Copyright 2018 | All Rights Reserved\n  This smart contract was developed by the Zethr Dev Team and its source code remains property of the Zethr Project.\n*/\n\npragma solidity ^0.4.24;\n\n// File: contracts/Libraries/SafeMath.sol\n\nlibrary SafeMath {\n  function mul(uint a, uint b) internal pure returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    uint c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal pure returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n// File: contracts/Libraries/ZethrTierLibrary.sol\n\nlibrary ZethrTierLibrary {\n  uint constant internal magnitude = 2 ** 64;\n\n  // Gets the tier (1-7) of the divs sent based off of average dividend rate\n  // This is an index used to call into the correct sub-bankroll to withdraw tokens\n  function getTier(uint divRate) internal pure returns (uint8) {\n\n    // Divide the average dividned rate by magnitude\n    // Remainder doesn't matter because of the below logic\n    uint actualDiv = divRate / magnitude;\n    if (actualDiv >= 30) {\n      return 6;\n    } else if (actualDiv >= 25) {\n      return 5;\n    } else if (actualDiv >= 20) {\n      return 4;\n    } else if (actualDiv >= 15) {\n      return 3;\n    } else if (actualDiv >= 10) {\n      return 2;\n    } else if (actualDiv >= 5) {\n      return 1;\n    } else if (actualDiv >= 2) {\n      return 0;\n    } else {\n      // Impossible\n      revert();\n    }\n  }\n\n  function getDivRate(uint _tier)\n  internal pure\n  returns (uint8)\n  {\n    if (_tier == 0) {\n      return 2;\n    } else if (_tier == 1) {\n      return 5;\n    } else if (_tier == 2) {\n      return 10;\n    } else if (_tier == 3) {\n      return 15;\n    } else if (_tier == 4) {\n      return 20;\n    } else if (_tier == 5) {\n      return 25;\n    } else if (_tier == 6) {\n      return 33;\n    } else {\n      revert();\n    }\n  }\n}\n\n// File: contracts/ERC/ERC223Receiving.sol\n\ncontract ERC223Receiving {\n  function tokenFallback(address _from, uint _amountOfTokens, bytes _data) public returns (bool);\n}\n\n// File: contracts/ZethrMultiSigWallet.sol\n\n/* Zethr MultisigWallet\n *\n * Standard multisig wallet\n * Holds the bankroll ETH, as well as the bankroll 33% ZTH tokens.\n*/ \ncontract ZethrMultiSigWallet is ERC223Receiving {\n  using SafeMath for uint;\n\n  /*=================================\n  =              EVENTS            =\n  =================================*/\n\n  event Confirmation(address indexed sender, uint indexed transactionId);\n  event Revocation(address indexed sender, uint indexed transactionId);\n  event Submission(uint indexed transactionId);\n  event Execution(uint indexed transactionId);\n  event ExecutionFailure(uint indexed transactionId);\n  event Deposit(address indexed sender, uint value);\n  event OwnerAddition(address indexed owner);\n  event OwnerRemoval(address indexed owner);\n  event WhiteListAddition(address indexed contractAddress);\n  event WhiteListRemoval(address indexed contractAddress);\n  event RequirementChange(uint required);\n  event BankrollInvest(uint amountReceived);\n\n  /*=================================\n  =             VARIABLES           =\n  =================================*/\n\n  mapping (uint => Transaction) public transactions;\n  mapping (uint => mapping (address => bool)) public confirmations;\n  mapping (address => bool) public isOwner;\n  address[] public owners;\n  uint public required;\n  uint public transactionCount;\n  bool internal reEntered = false;\n  uint constant public MAX_OWNER_COUNT = 15;\n\n  /*=================================\n  =         CUSTOM CONSTRUCTS       =\n  =================================*/\n\n  struct Transaction {\n    address destination;\n    uint value;\n    bytes data;\n    bool executed;\n  }\n\n  struct TKN {\n    address sender;\n    uint value;\n  }\n\n  /*=================================\n  =            MODIFIERS            =\n  =================================*/\n\n  modifier onlyWallet() {\n    if (msg.sender != address(this))\n      revert();\n    _;\n  }\n\n  modifier isAnOwner() {\n    address caller = msg.sender;\n    if (isOwner[caller])\n      _;\n    else\n      revert();\n  }\n\n  modifier ownerDoesNotExist(address owner) {\n    if (isOwner[owner]) \n      revert();\n      _;\n  }\n\n  modifier ownerExists(address owner) {\n    if (!isOwner[owner])\n      revert();\n    _;\n  }\n\n  modifier transactionExists(uint transactionId) {\n    if (transactions[transactionId].destination == 0)\n      revert();\n    _;\n  }\n\n  modifier confirmed(uint transactionId, address owner) {\n    if (!confirmations[transactionId][owner])\n      revert();\n    _;\n  }\n\n  modifier notConfirmed(uint transactionId, address owner) {\n    if (confirmations[transactionId][owner])\n      revert();\n    _;\n  }\n\n  modifier notExecuted(uint transactionId) {\n    if (transactions[transactionId].executed)\n      revert();\n    _;\n  }\n\n  modifier notNull(address _address) {\n    if (_address == 0)\n      revert();\n    _;\n  }\n\n  modifier validRequirement(uint ownerCount, uint _required) {\n    if ( ownerCount > MAX_OWNER_COUNT\n      || _required > ownerCount\n      || _required == 0\n      || ownerCount == 0)\n      revert();\n    _;\n  }\n\n\n  /*=================================\n  =         PUBLIC FUNCTIONS        =\n  =================================*/\n\n  /// @dev Contract constructor sets initial owners and required number of confirmations.\n  /// @param _owners List of initial owners.\n  /// @param _required Number of required confirmations.\n  constructor (address[] _owners, uint _required)\n    public\n    validRequirement(_owners.length, _required)\n  {\n    // Add owners\n    for (uint i=0; i<_owners.length; i++) {\n      if (isOwner[_owners[i]] || _owners[i] == 0)\n        revert();\n      isOwner[_owners[i]] = true;\n    }\n\n    // Set owners\n    owners = _owners;\n\n    // Set required\n    required = _required;\n  }\n\n  /** Testing only.\n  function exitAll()\n    public\n  {\n    uint tokenBalance = ZTHTKN.balanceOf(address(this));\n    ZTHTKN.sell(tokenBalance - 1e18);\n    ZTHTKN.sell(1e18);\n    ZTHTKN.withdraw(address(0x0));\n  }\n  **/\n\n  /// @dev Fallback function allows Ether to be deposited.\n  function()\n    public\n    payable\n  {\n\n  }\n    \n  /// @dev Allows to add a new owner. Transaction has to be sent by wallet.\n  /// @param owner Address of new owner.\n  function addOwner(address owner)\n    public\n    onlyWallet\n    ownerDoesNotExist(owner)\n    notNull(owner)\n    validRequirement(owners.length + 1, required)\n  {\n    isOwner[owner] = true;\n    owners.push(owner);\n    emit OwnerAddition(owner);\n  }\n\n  /// @dev Allows to remove an owner. Transaction has to be sent by wallet.\n  /// @param owner Address of owner.\n  function removeOwner(address owner)\n    public\n    onlyWallet\n    ownerExists(owner)\n    validRequirement(owners.length, required)\n  {\n    isOwner[owner] = false;\n    for (uint i=0; i<owners.length - 1; i++)\n      if (owners[i] == owner) {\n        owners[i] = owners[owners.length - 1];\n        break;\n      }\n\n    owners.length -= 1;\n    if (required > owners.length)\n      changeRequirement(owners.length);\n    emit OwnerRemoval(owner);\n  }\n\n  /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.\n  /// @param owner Address of owner to be replaced.\n  /// @param owner Address of new owner.\n  function replaceOwner(address owner, address newOwner)\n    public\n    onlyWallet\n    ownerExists(owner)\n    ownerDoesNotExist(newOwner)\n  {\n    for (uint i=0; i<owners.length; i++)\n      if (owners[i] == owner) {\n        owners[i] = newOwner;\n        break;\n      }\n\n    isOwner[owner] = false;\n    isOwner[newOwner] = true;\n    emit OwnerRemoval(owner);\n    emit OwnerAddition(newOwner);\n  }\n\n  /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.\n  /// @param _required Number of required confirmations.\n  function changeRequirement(uint _required)\n    public\n    onlyWallet\n    validRequirement(owners.length, _required)\n  {\n    required = _required;\n    emit RequirementChange(_required);\n  }\n\n  /// @dev Allows an owner to submit and confirm a transaction.\n  /// @param destination Transaction target address.\n  /// @param value Transaction ether value.\n  /// @param data Transaction data payload.\n  /// @return Returns transaction ID.\n  function submitTransaction(address destination, uint value, bytes data)\n    public\n    returns (uint transactionId)\n  {\n    transactionId = addTransaction(destination, value, data);\n    confirmTransaction(transactionId);\n  }\n\n  /// @dev Allows an owner to confirm a transaction.\n  /// @param transactionId Transaction ID.\n  function confirmTransaction(uint transactionId)\n    public\n    ownerExists(msg.sender)\n    transactionExists(transactionId)\n    notConfirmed(transactionId, msg.sender)\n  {\n    confirmations[transactionId][msg.sender] = true;\n    emit Confirmation(msg.sender, transactionId);\n    executeTransaction(transactionId);\n  }\n\n  /// @dev Allows an owner to revoke a confirmation for a transaction.\n  /// @param transactionId Transaction ID.\n  function revokeConfirmation(uint transactionId)\n    public\n    ownerExists(msg.sender)\n    confirmed(transactionId, msg.sender)\n    notExecuted(transactionId)\n  {\n    confirmations[transactionId][msg.sender] = false;\n    emit Revocation(msg.sender, transactionId);\n  }\n\n  /// @dev Allows anyone to execute a confirmed transaction.\n  /// @param transactionId Transaction ID.\n  function executeTransaction(uint transactionId)\n    public\n    notExecuted(transactionId)\n  {\n    if (isConfirmed(transactionId)) {\n      Transaction storage txToExecute = transactions[transactionId];\n      txToExecute.executed = true;\n      if (txToExecute.destination.call.value(txToExecute.value)(txToExecute.data))\n        emit Execution(transactionId);\n      else {\n        emit ExecutionFailure(transactionId);\n        txToExecute.executed = false;\n      }\n    }\n  }\n\n  /// @dev Returns the confirmation status of a transaction.\n  /// @param transactionId Transaction ID.\n  /// @return Confirmation status.\n  function isConfirmed(uint transactionId)\n    public\n    constant\n    returns (bool)\n  {\n    uint count = 0;\n    for (uint i=0; i<owners.length; i++) {\n      if (confirmations[transactionId][owners[i]])\n        count += 1;\n      if (count == required)\n        return true;\n    }\n  }\n\n  /*=================================\n  =        OPERATOR FUNCTIONS       =\n  =================================*/\n\n  /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.\n  /// @param destination Transaction target address.\n  /// @param value Transaction ether value.\n  /// @param data Transaction data payload.\n  /// @return Returns transaction ID.\n  function addTransaction(address destination, uint value, bytes data)\n    internal\n    notNull(destination)\n    returns (uint transactionId)\n  {\n    transactionId = transactionCount;\n\n    transactions[transactionId] = Transaction({\n        destination: destination,\n        value: value,\n        data: data,\n        executed: false\n    });\n\n    transactionCount += 1;\n    emit Submission(transactionId);\n  }\n\n  /*\n   * Web3 call functions\n   */\n  /// @dev Returns number of confirmations of a transaction.\n  /// @param transactionId Transaction ID.\n  /// @return Number of confirmations.\n  function getConfirmationCount(uint transactionId)\n    public\n    constant\n    returns (uint count)\n  {\n    for (uint i=0; i<owners.length; i++)\n      if (confirmations[transactionId][owners[i]])\n        count += 1;\n  }\n\n  /// @dev Returns total number of transactions after filers are applied.\n  /// @param pending Include pending transactions.\n  /// @param executed Include executed transactions.\n  /// @return Total number of transactions after filters are applied.\n  function getTransactionCount(bool pending, bool executed)\n    public\n    constant\n    returns (uint count)\n  {\n    for (uint i=0; i<transactionCount; i++)\n      if (pending && !transactions[i].executed || executed && transactions[i].executed)\n        count += 1;\n  }\n\n  /// @dev Returns list of owners.\n  /// @return List of owner addresses.\n  function getOwners()\n    public\n    constant\n    returns (address[])\n  {\n    return owners;\n  }\n\n  /// @dev Returns array with owner addresses, which confirmed transaction.\n  /// @param transactionId Transaction ID.\n  /// @return Returns array of owner addresses.\n  function getConfirmations(uint transactionId)\n    public\n    constant\n    returns (address[] _confirmations)\n  {\n    address[] memory confirmationsTemp = new address[](owners.length);\n    uint count = 0;\n    uint i;\n    for (i=0; i<owners.length; i++)\n      if (confirmations[transactionId][owners[i]]) {\n        confirmationsTemp[count] = owners[i];\n        count += 1;\n      }\n\n      _confirmations = new address[](count);\n\n      for (i=0; i<count; i++)\n        _confirmations[i] = confirmationsTemp[i];\n  }\n\n  /// @dev Returns list of transaction IDs in defined range.\n  /// @param from Index start position of transaction array.\n  /// @param to Index end position of transaction array.\n  /// @param pending Include pending transactions.\n  /// @param executed Include executed transactions.\n  /// @return Returns array of transaction IDs.\n  function getTransactionIds(uint from, uint to, bool pending, bool executed)\n    public\n    constant\n    returns (uint[] _transactionIds)\n  {\n    uint[] memory transactionIdsTemp = new uint[](transactionCount);\n    uint count = 0;\n    uint i;\n\n    for (i=0; i<transactionCount; i++)\n      if (pending && !transactions[i].executed || executed && transactions[i].executed) {\n        transactionIdsTemp[count] = i;\n        count += 1;\n      }\n\n      _transactionIds = new uint[](to - from);\n\n    for (i=from; i<to; i++)\n      _transactionIds[i - from] = transactionIdsTemp[i];\n  }\n\n  function tokenFallback(address /*_from*/, uint /*_amountOfTokens*/, bytes /*_data*/)\n  public\n  returns (bool)\n  {\n    return true;\n  }\n}\n\n// File: contracts/Bankroll/Interfaces/ZethrTokenBankrollInterface.sol\n\n// Zethr token bankroll function prototypes\ncontract ZethrTokenBankrollInterface is ERC223Receiving {\n  uint public jackpotBalance;\n  \n  function getMaxProfit(address) public view returns (uint);\n  function gameTokenResolution(uint _toWinnerAmount, address _winnerAddress, uint _toJackpotAmount, address _jackpotAddress, uint _originalBetSize) external;\n  function payJackpotToWinner(address _winnerAddress, uint payoutDivisor) public;\n}\n\n// File: contracts/Bankroll/Interfaces/ZethrBankrollControllerInterface.sol\n\ncontract ZethrBankrollControllerInterface is ERC223Receiving {\n  address public jackpotAddress;\n\n  ZethrTokenBankrollInterface[7] public tokenBankrolls; \n  \n  ZethrMultiSigWallet public multiSigWallet;\n\n  mapping(address => bool) public validGameAddresses;\n\n  function gamePayoutResolver(address _resolver, uint _tokenAmount) public;\n\n  function isTokenBankroll(address _address) public view returns (bool);\n\n  function getTokenBankrollAddressFromTier(uint8 _tier) public view returns (address);\n\n  function tokenFallback(address _from, uint _amountOfTokens, bytes _data) public returns (bool);\n}\n\n// File: contracts/Bankroll/ZethrGame.sol\n\n/* Zethr Game Interface\n *\n * Contains the necessary functions to integrate with\n * the Zethr Token bankrolls & the Zethr game ecosystem.\n *\n * Token Bankroll Functions:\n *  - execute\n *\n * Player Functions:\n *  - finish\n *\n * Bankroll Controller / Owner Functions:\n *  - pauseGame\n *  - resumeGame\n *  - set resolver percentage\n *  - set controller address\n *\n * Player/Token Bankroll Functions:\n *  - resolvePendingBets\n*/\ncontract ZethrGame {\n  using SafeMath for uint;\n  using SafeMath for uint56;\n\n  // Default events:\n  event Result (address player, uint amountWagered, int amountOffset);\n  event Wager (address player, uint amount, bytes data);\n\n  // Queue of pending/unresolved bets\n  address[] pendingBetsQueue;\n  uint queueHead = 0;\n  uint queueTail = 0;\n\n  // Store each player's latest bet via mapping\n  mapping(address => BetBase) bets;\n\n  // Bet structures must start with this layout\n  struct BetBase {\n    // Must contain these in this order\n    uint56 tokenValue;    // Multiply by 1e14 to get tokens\n    uint48 blockNumber;\n    uint8 tier;\n    // Game specific structures can add more after this\n  }\n\n  // Mapping of addresses to their *position* in the queue\n  // Zero = they aren't in the queue\n  mapping(address => uint) pendingBetsMapping;\n\n  // Holds the bankroll controller info\n  ZethrBankrollControllerInterface controller;\n\n  // Is the game paused?\n  bool paused;\n\n  // Minimum bet should always be >= 1\n  uint minBet = 1e18;\n\n  // Percentage that a resolver gets when he resolves bets for the house\n  uint resolverPercentage;\n\n  // Every game has a name\n  string gameName;\n\n  constructor (address _controllerAddress, uint _resolverPercentage, string _name) public {\n    controller = ZethrBankrollControllerInterface(_controllerAddress);\n    resolverPercentage = _resolverPercentage;\n    gameName = _name;\n  }\n\n  /** @dev Gets the max profit of this game as decided by the token bankroll\n    * @return uint The maximum profit\n    */\n  function getMaxProfit()\n  public view\n  returns (uint)\n  {\n    return ZethrTokenBankrollInterface(msg.sender).getMaxProfit(address(this));\n  }\n\n  /** @dev Pauses the game, preventing anyone from placing bets\n    */\n  function ownerPauseGame()\n  public\n  ownerOnly\n  {\n    paused = true;\n  }\n\n  /** @dev Resumes the game, allowing bets\n    */\n  function ownerResumeGame()\n  public\n  ownerOnly\n  {\n    paused = false;\n  }\n\n  /** @dev Sets the percentage of the bets that a resolver gets when resolving tokens.\n    * @param _percentage The percentage as x/1,000,000 that the resolver gets\n    */\n  function ownerSetResolverPercentage(uint _percentage)\n  public\n  ownerOnly\n  {\n    require(_percentage <= 1000000);\n    resolverPercentage = _percentage;\n  }\n\n  /** @dev Sets the address of the game controller\n    * @param _controllerAddress The new address of the controller\n    */\n  function ownerSetControllerAddress(address _controllerAddress)\n  public\n  ownerOnly\n  {\n    controller = ZethrBankrollControllerInterface(_controllerAddress);\n  }\n\n  // Every game should have a name\n  /** @dev Sets the name of the game\n    * @param _name The name of the game\n    */\n  function ownerSetGameName(string _name)\n  ownerOnly\n  public\n  {\n    gameName = _name;\n  }\n\n  /** @dev Gets the game name\n    * @return The name of the game\n    */\n  function getGameName()\n  public view\n  returns (string)\n  {\n    return gameName;\n  }\n\n  /** @dev Resolve expired bets in the queue. Gives a percentage of the house edge to the resolver as ZTH\n    * @param _numToResolve The number of bets to resolve.\n    * @return tokensEarned The number of tokens earned\n    * @return queueHead The new head of the queue\n    */\n  function resolveExpiredBets(uint _numToResolve)\n  public\n  returns (uint tokensEarned_, uint queueHead_)\n  {\n    uint mQueue = queueHead;\n    uint head;\n    uint tail = (mQueue + _numToResolve) > pendingBetsQueue.length ? pendingBetsQueue.length : (mQueue + _numToResolve);\n    uint tokensEarned = 0;\n\n    for (head = mQueue; head < tail; head++) {\n      // Check the head of the queue to see if there is a resolvable bet\n      // This means the bet at the queue head is older than 255 blocks AND is not 0\n      // (However, if the address at the head is null, skip it, it's already been resolved)\n      if (pendingBetsQueue[head] == address(0x0)) {\n        continue;\n      }\n\n      if (bets[pendingBetsQueue[head]].blockNumber != 0 && block.number > 256 + bets[pendingBetsQueue[head]].blockNumber) {\n        // Resolve the bet\n        // finishBetfrom returns the *player* profit\n        // this will be negative if the player lost and the house won\n        // so flip it to get the house profit, if any\n        int sum = - finishBetFrom(pendingBetsQueue[head]);\n\n        // Tokens earned is a percentage of the loss\n        if (sum > 0) {\n          tokensEarned += (uint(sum).mul(resolverPercentage)).div(1000000);\n        }\n\n        // Queue-tail is always the \"next\" open spot, so queue head and tail will never overlap\n      } else {\n        // If we can't resolve a bet, stop going down the queue\n        break;\n      }\n    }\n\n    queueHead = head;\n\n    // Send the earned tokens to the resolver\n    if (tokensEarned >= 1e14) {\n      controller.gamePayoutResolver(msg.sender, tokensEarned);\n    }\n\n    return (tokensEarned, head);\n  }\n\n  /** @dev Finishes the bet of the sender, if it exists.\n    * @return int The total profit (positive or negative) earned by the sender\n    */\n  function finishBet()\n  public\n  hasNotBetThisBlock(msg.sender)\n  returns (int)\n  {\n    return finishBetFrom(msg.sender);\n  }\n\n  /** @dev Resturns a random number\n    * @param _blockn The block number to base the random number off of\n    * @param _entropy Data to use in the random generation\n    * @param _index Data to use in the random generation\n    * @return randomNumber The random number to return\n    */\n  function maxRandom(uint _blockn, address _entropy, uint _index)\n  private view\n  returns (uint256 randomNumber)\n  {\n    return uint256(keccak256(\n        abi.encodePacked(\n          blockhash(_blockn),\n          _entropy,\n          _index\n        )));\n  }\n\n  /** @dev Returns a random number\n    * @param _upper The upper end of the range, exclusive\n    * @param _blockn The block number to use for the random number\n    * @param _entropy An address to be used for entropy\n    * @param _index A number to get the next random number\n    * @return randomNumber The random number\n    */\n  function random(uint256 _upper, uint256 _blockn, address _entropy, uint _index)\n  internal view\n  returns (uint256 randomNumber)\n  {\n    return maxRandom(_blockn, _entropy, _index) % _upper;\n  }\n\n  // Prevents the user from placing two bets in one block\n  modifier hasNotBetThisBlock(address _sender)\n  {\n    require(bets[_sender].blockNumber != block.number);\n    _;\n  }\n\n  // Requires that msg.sender is one of the token bankrolls\n  modifier bankrollOnly {\n    require(controller.isTokenBankroll(msg.sender));\n    _;\n  }\n\n  // Requires that the game is not paused\n  modifier isNotPaused {\n    require(!paused);\n    _;\n  }\n\n  // Requires that the bet given has max profit low enough\n  modifier betIsValid(uint _betSize, uint _tier, bytes _data) {\n    uint divRate = ZethrTierLibrary.getDivRate(_tier);\n    require(isBetValid(_betSize, divRate, _data));\n    _;\n  }\n\n  // Only an owner can call this method (controller is always an owner)\n  modifier ownerOnly()\n  {\n    require(msg.sender == address(controller) || controller.multiSigWallet().isOwner(msg.sender));\n    _;\n  }\n\n  /** @dev Places a bet. Callable only by token bankrolls\n    * @param _player The player that is placing the bet\n    * @param _tokenCount The total number of tokens bet\n    * @param _divRate The dividend rate of the player\n    * @param _data The game-specific data, encoded in bytes-form\n    */\n  function execute(address _player, uint _tokenCount, uint _divRate, bytes _data) public;\n\n  /** @dev Resolves the bet of the supplied player.\n    * @param _playerAddress The address of the player whos bet we are resolving\n    * @return int The total profit the player earned, positive or negative\n    */\n  function finishBetFrom(address _playerAddress) internal returns (int);\n\n  /** @dev Determines if a supplied bet is valid\n    * @param _tokenCount The total number of tokens bet\n    * @param _divRate The dividend rate of the bet\n    * @param _data The game-specific bet data\n    * @return bool Whether or not the bet is valid\n    */\n  function isBetValid(uint _tokenCount, uint _divRate, bytes _data) public view returns (bool);\n}\n\n// File: contracts/Games/ZethrDice.sol\n\n/* The actual game contract.\n *\n * This contract contains the actual game logic,\n * including placing bets (execute), resolving bets,\n * and resolving expired bets.\n*/\ncontract ZethrDice is ZethrGame {\n\n  /****************************\n   * GAME SPECIFIC\n   ****************************/\n\n  // Slots-specific bet structure\n  struct Bet {\n    // Must contain these in this order\n    uint56 tokenValue;\n    uint48 blockNumber;\n    uint8 tier;\n    // Game specific\n    uint8 rollUnder;\n    uint8 numRolls;\n  }\n\n  /****************************\n   * FIELDS\n   ****************************/\n\n  uint constant private MAX_INT = 2 ** 256 - 1;\n  uint constant public maxProfitDivisor = 1000000;\n  uint constant public maxNumber = 100;\n  uint constant public minNumber = 2;\n  uint constant public houseEdgeDivisor = 1000;\n  uint constant public houseEdge = 990;\n  uint constant public minBet = 1e18;\n\n  /****************************\n   * CONSTRUCTOR\n   ****************************/\n\n  constructor (address _controllerAddress, uint _resolverPercentage, string _name)\n  ZethrGame(_controllerAddress, _resolverPercentage, _name)\n  public\n  {\n  }\n\n  /****************************\n   * USER METHODS\n   ****************************/\n\n  /** @dev Retrieve the results of the last roll of a player, for web3 calls.\n    * @param _playerAddress The address of the player\n    */\n  function getLastRollOutput(address _playerAddress)\n  public view\n  returns (uint winAmount, uint lossAmount, uint[] memory output)\n  {\n    // Cast to Bet and read from storage\n    Bet storage playerBetInStorage = getBet(_playerAddress);\n    Bet memory playerBet = playerBetInStorage;\n\n    // Safety check\n    require(playerBet.blockNumber != 0);\n\n    (winAmount, lossAmount, output) = getRollOutput(playerBet.blockNumber, playerBet.rollUnder, playerBet.numRolls, playerBet.tokenValue.mul(1e14), _playerAddress);\n\n    return (winAmount, lossAmount, output);\n  }\n\n    event RollResult(\n        uint    _blockNumber,\n        address _target,\n        uint    _rollUnder,\n        uint    _numRolls,\n        uint    _tokenValue,\n        uint    _winAmount,\n        uint    _lossAmount,\n        uint[]  _output\n    );\n\n  /** @dev Retrieve the results of the spin, for web3 calls.\n    * @param _blockNumber The block number of the spin\n    * @param _numRolls The number of rolls of this bet\n    * @param _tokenValue The total number of tokens bet\n    * @param _target The address of the better\n    * @return winAmount The total number of tokens won\n    * @return lossAmount The total number of tokens lost\n    * @return output An array of all of the results of a multispin\n    */\n  function getRollOutput(uint _blockNumber, uint8 _rollUnder, uint8 _numRolls, uint _tokenValue, address _target)\n  public\n  returns (uint winAmount, uint lossAmount, uint[] memory output)\n  {\n    output = new uint[](_numRolls);\n    // Where the result sections start and stop\n\n    // If current block for the first spin is older than 255 blocks, ALL rolls are losses\n    if (block.number - _blockNumber > 255) {\n      lossAmount = _tokenValue.mul(_numRolls);\n    } else {\n      uint profit = calculateProfit(_tokenValue, _rollUnder);\n\n      for (uint i = 0; i < _numRolls; i++) {\n        // Store the output\n        output[i] = random(100, _blockNumber, _target, i) + 1;\n\n        if (output[i] < _rollUnder) {\n          // Player has won!\n          winAmount += profit + _tokenValue;\n        } else {\n          lossAmount += _tokenValue;\n        }\n      }\n    }\n    emit RollResult(_blockNumber, _target, _rollUnder, _numRolls, _tokenValue, winAmount, lossAmount, output);\n    return (winAmount, lossAmount, output);\n  }\n\n  /** @dev Retrieve the results of the roll, for contract calls.\n    * @param _blockNumber The block number of the roll\n    * @param _numRolls The number of rolls of this bet\n    * @param _rollUnder The number the roll has to be under to win\n    * @param _tokenValue The total number of tokens bet\n    * @param _target The address of the better\n    * @return winAmount The total number of tokens won\n    * @return lossAmount The total number of tokens lost\n    */\n  function getRollResults(uint _blockNumber, uint8 _rollUnder, uint8 _numRolls, uint _tokenValue, address _target)\n  public\n  returns (uint winAmount, uint lossAmount)\n  {\n    (winAmount, lossAmount,) = getRollOutput(_blockNumber, _rollUnder, _numRolls, _tokenValue, _target);\n  }\n\n  /****************************\n   * OWNER METHODS\n   ****************************/\n\n  /****************************\n   * INTERNALS\n   ****************************/\n\n  // Calculate the maximum potential profit\n  function calculateProfit(uint _initBet, uint _roll)\n  internal view\n  returns (uint)\n  {\n    return ((((_initBet * (100 - (_roll.sub(1)))) / (_roll.sub(1)) + _initBet)) * houseEdge / houseEdgeDivisor) - _initBet;\n  }\n\n  /** @dev Returs the bet struct of a player\n    * @param _playerAddress The address of the player\n    * @return Bet The bet of the player\n    */\n  function getBet(address _playerAddress)\n  internal view\n  returns (Bet storage)\n  {\n    // Cast BetBase to Bet\n    BetBase storage betBase = bets[_playerAddress];\n\n    Bet storage playerBet;\n    assembly {\n    // tmp is pushed onto stack and points to betBase slot in storage\n      let tmp := betBase_slot\n\n    // swap1 swaps tmp and playerBet pointers\n      swap1\n    }\n    // tmp is popped off the stack\n\n    // playerBet now points to betBase\n    return playerBet;\n  }\n\n  /****************************\n   * OVERRIDDEN METHODS\n   ****************************/\n\n  /** @dev Resolves the bet of the supplied player.\n    * @param _playerAddress The address of the player whos bet we are resolving\n    * @return totalProfit The total profit the player earned, positive or negative\n    */\n  function finishBetFrom(address _playerAddress)\n  internal\n  returns (int /*totalProfit*/)\n  {\n    // Memory vars to hold data as we compute it\n    uint winAmount;\n    uint lossAmount;\n\n    // Cast to Bet and read from storage\n    Bet storage playerBetInStorage = getBet(_playerAddress);\n    Bet memory playerBet = playerBetInStorage;\n\n    // Safety check\n    require(playerBet.blockNumber != 0);\n    playerBetInStorage.blockNumber = 0;\n\n    // Iterate over the number of rolls and calculate totals:\n    //  - player win amount\n    //  - bankroll win amount\n    (winAmount, lossAmount) = getRollResults(playerBet.blockNumber, playerBet.rollUnder, playerBet.numRolls, playerBet.tokenValue.mul(1e14), _playerAddress);\n\n    // Figure out the token bankroll address\n    address tokenBankrollAddress = controller.getTokenBankrollAddressFromTier(playerBet.tier);\n    ZethrTokenBankrollInterface bankroll = ZethrTokenBankrollInterface(tokenBankrollAddress);\n\n    // Call into the bankroll to do some token accounting\n    bankroll.gameTokenResolution(winAmount, _playerAddress, 0, address(0x0), playerBet.tokenValue.mul(1e14).mul(playerBet.numRolls));\n\n    // Grab the position of the player in the pending bets queue\n    uint index = pendingBetsMapping[_playerAddress];\n\n    // Remove the player from the pending bets queue by setting the address to 0x0\n    pendingBetsQueue[index] = address(0x0);\n\n    // Delete the player's bet by setting the mapping to zero\n    pendingBetsMapping[_playerAddress] = 0;\n\n    emit Result(_playerAddress, playerBet.tokenValue.mul(1e14), int(winAmount) - int(lossAmount));\n\n    // Return all bet results + total *player* profit\n    return (int(winAmount) - int(lossAmount));\n  }\n\n  /** @dev Places a bet. Callable only by token bankrolls\n    * @param _player The player that is placing the bet\n    * @param _tokenCount The total number of tokens bet\n    * @param _tier The div rate tier the player falls in\n    * @param _data The game-specific data, encoded in bytes-form\n    */\n  function execute(address _player, uint _tokenCount, uint _tier, bytes _data)\n  isNotPaused\n  bankrollOnly\n  betIsValid(_tokenCount, _tier, _data)\n  hasNotBetThisBlock(_player)\n  public\n  {\n    Bet storage playerBet = getBet(_player);\n\n    // Check for a player bet and resolve if necessary\n    if (playerBet.blockNumber != 0) {\n      finishBetFrom(_player);\n    }\n\n    uint8 rolls = uint8(_data[0]);\n    uint8 rollUnder = uint8(_data[1]);\n\n    // Set bet information\n    playerBet.tokenValue = uint56(_tokenCount.div(rolls).div(1e14));\n    playerBet.blockNumber = uint48(block.number);\n    playerBet.tier = uint8(_tier);\n    playerBet.rollUnder = rollUnder;\n    playerBet.numRolls = rolls;\n\n    // Add player to the pending bets queue\n    pendingBetsQueue.length ++;\n    pendingBetsQueue[queueTail] = _player;\n    queueTail++;\n\n    // Add the player's position in the queue to the pending bets mapping\n    pendingBetsMapping[_player] = queueTail - 1;\n\n    // Emit event\n    emit Wager(_player, _tokenCount, _data);\n  }\n\n  /** @dev Determines if a supplied bet is valid\n    * @param _tokenCount The total number of tokens bet\n    * @param _data The game-specific bet data\n    * @return bool Whether or not the bet is valid\n    */\n  function isBetValid(uint _tokenCount, uint /*_divRate*/, bytes _data)\n  public view\n  returns (bool)\n  {\n    uint8 rollUnder = uint8(_data[1]);\n\n    return (calculateProfit(_tokenCount, rollUnder) < getMaxProfit()\n    && _tokenCount >= minBet\n    && rollUnder >= minNumber\n    && rollUnder <= maxNumber);\n  }\n}"
}