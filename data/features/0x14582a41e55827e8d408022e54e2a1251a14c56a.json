{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 PUSH1 SSTORE PUSH1 PUSH1 SSTORE PUSH1 PUSH1 SSTORE PUSH1 PUSH1 SSTORE CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 PUSH1 PUSH1 EXP SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD SWAP1 PUSH1 PUSH1 DUP1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP13 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD DUP12 DUP2 MSTORE PUSH1 ADD DUP11 DUP2 MSTORE PUSH1 ADD DUP10 DUP2 MSTORE PUSH1 ADD DUP9 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP8 DUP2 MSTORE PUSH1 ADD DUP7 DUP2 MSTORE PUSH1 ADD DUP6 DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP9 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP13 POP POP POP POP POP POP POP POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND DUP2 MSTORE PUSH1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE SWAP1 DUP3 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD NUMBER SUB JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 CALLER PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD DUP5 MLOAD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 CALLVALUE GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD DUP6 EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD CALLVALUE GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 ADD DUP6 EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE CALLVALUE PUSH4 PUSH2 AND JUMP JUMPDEST SWAP3 POP PUSH2 PUSH1 PUSH2 PUSH1 SLOAD DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP3 POP PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 ISZERO PUSH2 MUL DUP4 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH2 PUSH1 SLOAD PUSH1 SUB PUSH2 DUP7 DUP9 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 SLOAD PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP7 AND SWAP6 SWAP1 SWAP6 OR SWAP1 SWAP5 SSTORE DUP3 SLOAD DUP3 MSTORE PUSH1 DUP2 MSTORE DUP4 DUP3 SHA3 DUP7 SWAP1 SSTORE PUSH1 SLOAD DUP4 SLOAD DUP4 MSTORE PUSH1 DUP3 MSTORE DUP5 DUP4 SHA3 SSTORE SWAP2 SLOAD DUP2 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SHA3 PUSH1 DUP1 SLOAD PUSH2 SWAP4 PUSH1 NOT SWAP1 DUP3 AND ISZERO PUSH2 MUL ADD AND DUP2 SWAP1 DIV PUSH2 JUMP JUMPDEST POP PUSH1 PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE PUSH1 SLOAD ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 SSTORE PUSH1 SWAP1 SSTORE JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND OR SWAP1 SSTORE PUSH1 DUP5 DUP1 MLOAD PUSH2 SWAP3 SWAP2 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP CALLVALUE PUSH1 DUP2 SWAP1 SSTORE NUMBER PUSH1 DUP2 SWAP1 SSTORE PUSH1 SLOAD PUSH1 SLOAD PUSH1 SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 SWAP2 PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 SWAP1 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND DUP2 MSTORE PUSH1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE DUP5 SLOAD PUSH1 PUSH1 NOT PUSH2 PUSH1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV SWAP2 DUP4 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 DUP4 ADD SWAP1 DUP6 SWAP1 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP SWAP5 POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP PUSH1 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP11 POP PUSH2 PUSH2 JUMP JUMPDEST SWAP10 POP PUSH1 SLOAD SWAP9 POP PUSH1 SLOAD SWAP8 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP7 POP PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP6 POP PUSH1 SLOAD SWAP5 POP PUSH2 PUSH2 JUMP JUMPDEST SWAP4 POP ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND BALANCE SWAP3 POP NUMBER SWAP2 POP PUSH1 SLOAD SWAP1 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 SWAP8 SWAP9 SWAP10 SWAP11 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH2 PUSH1 PUSH2 PUSH1 SLOAD PUSH2 PUSH1 PUSH2 PUSH1 SLOAD PUSH1 SUB ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND BALANCE PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD PUSH2 PUSH2 JUMP JUMPDEST LT ISZERO SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP6 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 DUP4 MSTORE DUP2 DUP5 SHA3 SLOAD PUSH1 DUP5 MSTORE DUP3 DUP6 SHA3 SLOAD PUSH1 DUP6 MSTORE SWAP5 DUP4 SWAP1 SHA3 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP4 AND SWAP10 POP SWAP5 SWAP8 POP SWAP6 POP PUSH1 PUSH1 NOT PUSH1 DUP4 AND ISZERO PUSH2 MUL ADD SWAP1 SWAP2 AND DIV SWAP2 PUSH1 DUP4 ADD DUP2 SWAP1 DIV DUP2 MUL ADD SWAP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP4 POP SWAP2 SWAP4 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH2 DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD SUB SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SWAP1 EXTCODESIZE GT SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP4 ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 SLOAD DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP2 PUSH1 ADD PUSH1 SWAP1 DIV DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 SLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 SWAP2 POP PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xd4 SLT UNKNOWN_0xc6 UNKNOWN_0xd0 DUP14 SWAP9 DUP7 UNKNOWN_0x2f UNKNOWN_0xda UNKNOWN_0xc4 SMOD UNKNOWN_0xfe EXP DELEGATECALL LOG0 SWAP2 LT MUL DUP3 UNKNOWN_0xcf UNKNOWN_0xf9 UNKNOWN_0xef INVALID_0x7d",
  "opcode_entropy": 4.813741040464503,
  "opcode_count": 2724,
  "unique_opcodes": 85,
  "byte_entropy": 5.719064038115156,
  "byte_0x": 0.0002587991718426501,
  "byte_60": 0.11180124223602485,
  "byte_40": 0.008799171842650104,
  "byte_52": 0.018633540372670808,
  "byte_0c": 0.004399585921325052,
  "byte_03": 0.023291925465838508,
  "byte_55": 0.007505175983436853,
  "byte_01": 0.05719461697722567,
  "byte_05": 0.009575569358178054,
  "byte_06": 0.004399585921325052,
  "byte_8c": 0.0005175983436853002,
  "byte_0b": 0.003105590062111801,
  "byte_34": 0.006987577639751553,
  "byte_15": 0.023809523809523808,
  "byte_61": 0.05926501035196687,
  "byte_00": 0.03881987577639751,
  "byte_23": 0.0002587991718426501,
  "byte_57": 0.02562111801242236,
  "byte_80": 0.04192546583850932,
  "byte_fd": 0.011128364389233954,
  "byte_5b": 0.041666666666666664,
  "byte_54": 0.018892339544513456,
  "byte_a0": 0.006728778467908903,
  "byte_02": 0.018892339544513456,
  "byte_0a": 0.015786749482401656,
  "byte_33": 0.002329192546583851,
  "byte_16": 0.018633540372670808,
  "byte_19": 0.003105590062111801,
  "byte_90": 0.038561076604554864,
  "byte_91": 0.018892339544513456,
  "byte_17": 0.0015527950310559005,
  "byte_0e": 0.002846790890269151,
  "byte_c8": 0.0005175983436853002,
  "byte_4f": 0.0007763975155279503,
  "byte_39": 0.0002587991718426501,
  "byte_f3": 0.002070393374741201,
  "byte_04": 0.011645962732919254,
  "byte_36": 0.0005175983436853002,
  "byte_10": 0.004399585921325052,
  "byte_32": 0.0010351966873706005,
  "byte_63": 0.008022774327122154,
  "byte_ff": 0.02303312629399586,
  "byte_7c": 0.0007763975155279503,
  "byte_35": 0.002846790890269151,
  "byte_46": 0.0007763975155279503,
  "byte_4b": 0.0002587991718426501,
  "byte_f6": 0.0005175983436853002,
  "byte_81": 0.031314699792960664,
  "byte_14": 0.008022774327122154,
  "byte_37": 0.0007763975155279503,
  "byte_79": 0.0002587991718426501,
  "byte_69": 0.0002587991718426501,
  "byte_5c": 0.0002587991718426501,
  "byte_0f": 0.0012939958592132505,
  "byte_c5": 0.0002587991718426501,
  "byte_5f": 0.0005175983436853002,
  "byte_d1": 0.0002587991718426501,
  "byte_6f": 0.0002587991718426501,
  "byte_13": 0.0010351966873706005,
  "byte_af": 0.0007763975155279503,
  "byte_bc": 0.0007763975155279503,
  "byte_8d": 0.0012939958592132505,
  "byte_db": 0.0002587991718426501,
  "byte_1c": 0.0007763975155279503,
  "byte_75": 0.0005175983436853002,
  "byte_b6": 0.0005175983436853002,
  "byte_b2": 0.0002587991718426501,
  "byte_ee": 0.0005175983436853002,
  "byte_1e": 0.0015527950310559005,
  "byte_dd": 0.0005175983436853002,
  "byte_e1": 0.0005175983436853002,
  "byte_29": 0.0010351966873706005,
  "byte_3c": 0.0007763975155279503,
  "byte_58": 0.0015527950310559005,
  "byte_b8": 0.0005175983436853002,
  "byte_da": 0.0005175983436853002,
  "byte_b4": 0.0002587991718426501,
  "byte_fe": 0.002070393374741201,
  "byte_a2": 0.0007763975155279503,
  "byte_7f": 0.0007763975155279503,
  "byte_11": 0.004658385093167702,
  "byte_3f": 0.0002587991718426501,
  "byte_64": 0.002329192546583851,
  "byte_a7": 0.0007763975155279503,
  "byte_ab": 0.0007763975155279503,
  "byte_24": 0.0005175983436853002,
  "byte_50": 0.03493788819875776,
  "byte_08": 0.0036231884057971015,
  "byte_99": 0.0018115942028985507,
  "byte_71": 0.0007763975155279503,
  "byte_97": 0.0010351966873706005,
  "byte_4c": 0.0002587991718426501,
  "byte_be": 0.0002587991718426501,
  "byte_4d": 0.0002587991718426501,
  "byte_a4": 0.0005175983436853002,
  "byte_66": 0.0007763975155279503,
  "byte_62": 0.0015527950310559005,
  "byte_a5": 0.0005175983436853002,
  "byte_cb": 0.0005175983436853002,
  "byte_73": 0.0010351966873706005,
  "byte_9c": 0.0005175983436853002,
  "byte_47": 0.0007763975155279503,
  "byte_d8": 0.0002587991718426501,
  "byte_ce": 0.0002587991718426501,
  "byte_b5": 0.0007763975155279503,
  "byte_aa": 0.0002587991718426501,
  "byte_d9": 0.0002587991718426501,
  "byte_dc": 0.0005175983436853002,
  "byte_c0": 0.0005175983436853002,
  "byte_cc": 0.0007763975155279503,
  "byte_18": 0.0002587991718426501,
  "byte_a8": 0.0005175983436853002,
  "byte_cd": 0.0002587991718426501,
  "byte_4e": 0.0007763975155279503,
  "byte_28": 0.0007763975155279503,
  "byte_26": 0.0012939958592132505,
  "byte_d0": 0.0005175983436853002,
  "byte_86": 0.002070393374741201,
  "byte_e5": 0.0005175983436853002,
  "byte_82": 0.017857142857142856,
  "byte_b7": 0.0002587991718426501,
  "byte_e0": 0.0002587991718426501,
  "byte_42": 0.0005175983436853002,
  "byte_4a": 0.003105590062111801,
  "byte_56": 0.02251552795031056,
  "byte_51": 0.010093167701863354,
  "byte_20": 0.020703933747412008,
  "byte_67": 0.0002587991718426501,
  "byte_6b": 0.0005175983436853002,
  "byte_ba": 0.002070393374741201,
  "byte_44": 0.0002587991718426501,
  "byte_83": 0.013198757763975156,
  "byte_1f": 0.005175983436853002,
  "byte_92": 0.004658385093167702,
  "byte_84": 0.0036231884057971015,
  "byte_94": 0.002329192546583851,
  "byte_96": 0.0010351966873706005,
  "byte_95": 0.002070393374741201,
  "byte_c7": 0.0002587991718426501,
  "byte_e6": 0.0010351966873706005,
  "byte_f5": 0.0002587991718426501,
  "byte_f9": 0.0005175983436853002,
  "byte_fb": 0.0002587991718426501,
  "byte_09": 0.004399585921325052,
  "byte_38": 0.0002587991718426501,
  "byte_22": 0.0007763975155279503,
  "byte_2a": 0.0005175983436853002,
  "byte_3e": 0.0002587991718426501,
  "byte_8b": 0.0015527950310559005,
  "byte_8a": 0.0007763975155279503,
  "byte_89": 0.0010351966873706005,
  "byte_88": 0.002070393374741201,
  "byte_87": 0.0002587991718426501,
  "byte_85": 0.0036231884057971015,
  "byte_b9": 0.0002587991718426501,
  "byte_a1": 0.0005175983436853002,
  "byte_5a": 0.0005175983436853002,
  "byte_2f": 0.0005175983436853002,
  "byte_9f": 0.0002587991718426501,
  "byte_e2": 0.0002587991718426501,
  "byte_7e": 0.0002587991718426501,
  "byte_e8": 0.0002587991718426501,
  "byte_ad": 0.0002587991718426501,
  "byte_f7": 0.0005175983436853002,
  "byte_e7": 0.0002587991718426501,
  "byte_ef": 0.0010351966873706005,
  "byte_2b": 0.0002587991718426501,
  "byte_d5": 0.0002587991718426501,
  "byte_bd": 0.0002587991718426501,
  "byte_31": 0.0010351966873706005,
  "byte_0d": 0.007246376811594203,
  "byte_43": 0.0012939958592132505,
  "byte_a6": 0.0002587991718426501,
  "byte_d4": 0.0005175983436853002,
  "byte_07": 0.002329192546583851,
  "byte_cf": 0.0007763975155279503,
  "byte_76": 0.0002587991718426501,
  "byte_eb": 0.0005175983436853002,
  "byte_30": 0.0018115942028985507,
  "byte_fc": 0.0005175983436853002,
  "byte_f1": 0.0005175983436853002,
  "byte_93": 0.002587991718426501,
  "byte_68": 0.0012939958592132505,
  "byte_53": 0.0005175983436853002,
  "byte_7d": 0.0005175983436853002,
  "byte_b1": 0.0002587991718426501,
  "byte_9d": 0.0005175983436853002,
  "byte_a3": 0.0002587991718426501,
  "byte_48": 0.0002587991718426501,
  "byte_c3": 0.0005175983436853002,
  "byte_b0": 0.0002587991718426501,
  "byte_3a": 0.0002587991718426501,
  "byte_b3": 0.0002587991718426501,
  "byte_6e": 0.0005175983436853002,
  "byte_c6": 0.0005175983436853002,
  "byte_70": 0.0005175983436853002,
  "byte_5e": 0.0002587991718426501,
  "byte_9a": 0.0005175983436853002,
  "byte_98": 0.0007763975155279503,
  "byte_d7": 0.0005175983436853002,
  "byte_d6": 0.0002587991718426501,
  "byte_27": 0.0002587991718426501,
  "byte_f0": 0.0002587991718426501,
  "byte_3b": 0.0002587991718426501,
  "byte_74": 0.0002587991718426501,
  "byte_f2": 0.0015527950310559005,
  "byte_65": 0.0002587991718426501,
  "byte_7a": 0.0005175983436853002,
  "byte_72": 0.0002587991718426501,
  "byte_12": 0.0002587991718426501,
  "byte_c4": 0.0002587991718426501,
  "byte_f4": 0.0002587991718426501,
  "byte_de": 0.0002587991718426501,
  "num_nodes": 12,
  "num_edges": 18,
  "avg_degree": 3.0,
  "density": 0.13636363636363635,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 59,
  "event_nums": 26,
  "creation_block": 5079983,
  "creation_timestamp": 1518484135,
  "life_time": 1288643.0,
  "duration_seconds": 18992788.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 13,
  "num_buyers": 8,
  "num_sellers": 12,
  "num_creator_transfers": 30,
  "buy_amt": 8.066969424927173e+16,
  "sell_amt": 9.0762e+16,
  "avg_value": 2857194904154529.0,
  "txn_per_block": 4.578456113558128e-05,
  "avg_gas_limit": 126188.16949152542,
  "std_gas_limit": 193432.9062072115,
  "avg_gas_used": 78740.42372881356,
  "std_gas_used": 159951.77979916992,
  "avg_gas_price": 4016949152.5423727,
  "std_gas_price": 6505516630.10196,
  "newking_num": 26,
  "setnextbidexpireblocklength_num": 1,
  "bid_num": 27,
  "timeline_sequence": [
    [
      5079983,
      1518484135,
      28,
      104,
      0,
      1264068,
      8000000000,
      0,
      1,
      3977755,
      1164068,
      18012083
    ],
    [
      5080052,
      1518484873,
      30,
      122,
      0,
      142413,
      15000000000,
      0,
      1,
      3881622,
      42413,
      18012014
    ],
    [
      5080256,
      1518487900,
      5,
      155,
      1000000000000000,
      289303,
      3000000000,
      0,
      1,
      4973379,
      177869,
      18011810
    ],
    [
      5080266,
      1518488046,
      0,
      134,
      1000000000000001,
      147115,
      1000000000,
      0,
      1,
      5884110,
      98077,
      18011800
    ],
    [
      5080272,
      1518488183,
      0,
      120,
      2000000000000000,
      99273,
      1000000000,
      0,
      1,
      6783371,
      36182,
      18011794
    ],
    [
      5080282,
      1518488387,
      1,
      135,
      2000000000000001,
      88977,
      1000000000,
      0,
      1,
      5559734,
      44318,
      18011784
    ],
    [
      5080291,
      1518488490,
      6,
      83,
      2100000000000000,
      106338,
      1000000000,
      0,
      1,
      4374770,
      70892,
      18011775
    ],
    [
      5080319,
      1518488869,
      2,
      70,
      2100000000000001,
      91411,
      1000000000,
      0,
      1,
      3530175,
      60941,
      18011747
    ],
    [
      5080347,
      1518489257,
      7,
      208,
      10010000000000000,
      90739,
      1000000000,
      0,
      1,
      7331183,
      60493,
      18011719
    ],
    [
      5080372,
      1518489704,
      3,
      33,
      10020000000000000,
      147115,
      1000000000,
      0,
      1,
      2050666,
      98077,
      18011694
    ],
    [
      5080406,
      1518490158,
      535,
      118,
      10030000000000000,
      96550,
      1000000000,
      1,
      0,
      5971222,
      24105,
      18011660
    ],
    [
      5080413,
      1518490254,
      1,
      115,
      1000000000000000,
      347599,
      1000000000,
      0,
      1,
      5726863,
      186733,
      18011653
    ],
    [
      5080433,
      1518490542,
      4,
      74,
      1000000000000001,
      147115,
      1000000000,
      0,
      1,
      4423854,
      98077,
      18011633
    ],
    [
      5081504,
      1518505595,
      5,
      27,
      10000000000000000,
      347119,
      1000000000,
      0,
      1,
      4620994,
      186413,
      18010562
    ],
    [
      5158937,
      1519639019,
      30,
      130,
      10000000000000000,
      279247,
      4000000000,
      0,
      1,
      6222529,
      171165,
      17933129
    ],
    [
      5159052,
      1519640767,
      31,
      201,
      1500000000000000,
      278671,
      4000000000,
      0,
      1,
      6920183,
      170781,
      17933014
    ],
    [
      6268630,
      1536039714,
      47,
      46,
      1000000000000000,
      278479,
      10000000000,
      0,
      1,
      1900274,
      170653,
      16823436
    ],
    [
      6316635,
      1536735082,
      5,
      49,
      1,
      278287,
      22000000000,
      0,
      1,
      2390498,
      170525,
      16775431
    ],
    [
      6317270,
      1536744212,
      6,
      150,
      1,
      278191,
      19000000000,
      0,
      1,
      3911315,
      170461,
      16774796
    ],
    [
      6317327,
      1536744866,
      7,
      83,
      1000000000000000,
      278191,
      18000000000,
      0,
      1,
      3329307,
      170461,
      16774739
    ],
    [
      6318915,
      1536767337,
      9,
      40,
      1,
      278095,
      10000000000,
      0,
      1,
      1308084,
      170397,
      16773151
    ],
    [
      6366012,
      1537439420,
      264,
      61,
      1,
      276909,
      13000000000,
      0,
      1,
      2555493,
      154606,
      16726054
    ],
    [
      6366044,
      1537439855,
      265,
      115,
      1,
      271290,
      17000000000,
      0,
      1,
      3988727,
      165860,
      16726022
    ],
    [
      6366098,
      1537440634,
      266,
      22,
      1,
      276909,
      17000000000,
      0,
      1,
      1177962,
      154606,
      16725968
    ],
    [
      6366506,
      1537446341,
      267,
      53,
      10000000000000000,
      270714,
      17000000000,
      0,
      1,
      2444440,
      165476,
      16725560
    ],
    [
      6366531,
      1537446822,
      171,
      12,
      15000000000000000,
      90643,
      15000000000,
      0,
      1,
      562228,
      60429,
      16725535
    ],
    [
      6366589,
      1537447731,
      268,
      68,
      1000000000000,
      278959,
      19000000000,
      0,
      1,
      4886296,
      170973,
      16725477
    ],
    [
      6368624,
      1537476916,
      8,
      54,
      1,
      278191,
      6000000000,
      0,
      1,
      7830340,
      170461,
      16723442
    ],
    [
      6368626,
      1537476923,
      9,
      7,
      1000000000000,
      278191,
      9000000000,
      0,
      1,
      1306436,
      60173,
      16723440
    ],
    [
      5080413,
      1518490254,
      0,
      0,
      302300000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5080413,
      1518490254,
      0,
      0,
      28431315000000002,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5081504,
      1518505595,
      0,
      0,
      34963850000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5081504,
      1518505595,
      0,
      0,
      3288350092500001,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5158937,
      1519639019,
      0,
      0,
      101730710575000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5158937,
      1519639019,
      0,
      0,
      9567773329578750,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5159052,
      1519640767,
      0,
      0,
      105035670173462,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5159052,
      1519640767,
      0,
      0,
      9878604779814149,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6268630,
      1536039714,
      0,
      0,
      20199265673586,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6268630,
      1536039714,
      0,
      0,
      1899740936600801,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6316635,
      1536735082,
      0,
      0,
      10999863650842,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6316635,
      1536735082,
      0,
      0,
      1034537176361740,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6317270,
      1536744212,
      0,
      0,
      544493250716,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6317270,
      1536744212,
      0,
      0,
      51209590229908,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6317327,
      1536744866,
      0,
      0,
      26952415910,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6317327,
      1536744866,
      0,
      0,
      2534874716382,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6318915,
      1536767337,
      0,
      0,
      10001334144587,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6318915,
      1536767337,
      0,
      0,
      940625476298461,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6366012,
      1537439420,
      0,
      0,
      495066040157,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6366012,
      1537439420,
      0,
      0,
      46560961076775,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6366044,
      1537439855,
      0,
      0,
      24505768987,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6366044,
      1537439855,
      0,
      0,
      2304767573302,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6366098,
      1537440634,
      0,
      0,
      1213035564,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6366098,
      1537440634,
      0,
      0,
      114085994880,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6366506,
      1537446341,
      0,
      0,
      60045260,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6366506,
      1537446341,
      0,
      0,
      5647256748,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6366589,
      1537447731,
      0,
      0,
      250000002972240,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6366589,
      1537447731,
      0,
      0,
      23512500279539210,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6368624,
      1537476916,
      0,
      0,
      12385000147125,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6368624,
      1537476916,
      0,
      0,
      1164809263837191,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.18;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract KingOfTheEthill {\n  using SafeMath for uint256;  \n  address public owner;\n  address public king;\n  string public kingsMessage;\n  uint256 public bidExpireBlockLength = 12;\n  uint256 public nextBidExpireBlockLength;\n  uint256 public devFeePercent = 1;\n  uint256 public rolloverPercent = 5;\n  uint256 public lastBidAmount;\n  uint256 public lastBidBlock;\n  uint256 public currentRoundNumber;\n  uint256 public currentBidNumber;\n  uint256 public maxMessageChars = 140;\n  mapping(uint256 => address) roundToKing;\n  mapping(uint256 => uint256) roundToWinnings;\n  mapping(uint256 => uint256) roundToFinalBid;\n  mapping(uint256 => string) roundToFinalMessage;\n\n  event NewKing(\n    uint256 indexed roundNumber,\n    address kingAddress,\n    string kingMessage,\n    uint256 bidAmount,\n    uint256 indexed bidNumber,\n    uint256 indexed bidBlockNumber\n  );\n\n  function KingOfTheEthill () public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner() {\n    require(owner == msg.sender);\n    _;\n  }\n  \n  function setDevFee (uint256 _n) onlyOwner() public {\n\t  require(_n >= 0 && _n <= 10);\n    devFeePercent = _n;\n  }\n\n  function setRollover (uint256 _n) onlyOwner() public {\n\t  require(_n >= 1 && _n <= 30);\n    rolloverPercent = _n;\n  }\n\n  function setNextBidExpireBlockLength (uint256 _n) onlyOwner() public {\n\t  require(_n >= 10 && _n <= 10000);\n    nextBidExpireBlockLength = _n;\n  }\n\n  function setOwner (address _owner) onlyOwner() public {\n    owner = _owner;\n  }\n\n  function bid (uint256 _roundNumber, string _message) payable public {\n    require(!isContract(msg.sender));\n    require(bytes(_message).length <= maxMessageChars);\n    require(msg.value > 0);\n    \n    if (_roundNumber == currentRoundNumber && !roundExpired()) {\n      // bid in active round\n      require(msg.value > lastBidAmount);\n    }else if (_roundNumber == (currentRoundNumber+1) && roundExpired()) {\n      // first bid of new round, process old round\n      var lastRoundPotBalance = this.balance.sub(msg.value);\n      uint256 devFee = lastRoundPotBalance.mul(devFeePercent).div(100);\n      owner.transfer(devFee);\n      uint256 winnings = lastRoundPotBalance.sub(devFee).mul(100 - rolloverPercent).div(100);\n      king.transfer(winnings);\n\n      // save previous round data\n      roundToKing[currentRoundNumber] = king;\n      roundToWinnings[currentRoundNumber] = winnings;\n      roundToFinalBid[currentRoundNumber] = lastBidAmount;\n      roundToFinalMessage[currentRoundNumber] = kingsMessage;\n\n      currentBidNumber = 0;\n      currentRoundNumber++;\n\n      if (nextBidExpireBlockLength != 0) {\n        bidExpireBlockLength = nextBidExpireBlockLength;\n        nextBidExpireBlockLength = 0;\n      }\n    }else {\n      require(false);\n    }\n\n    // new king\n    king = msg.sender;\n    kingsMessage = _message;\n    lastBidAmount = msg.value;\n    lastBidBlock = block.number;\n\n    NewKing(currentRoundNumber, king, kingsMessage, lastBidAmount, currentBidNumber, lastBidBlock);\n\n    currentBidNumber++;\n  }\n\n  function roundExpired() public view returns (bool) {\n    return blocksSinceLastBid() >= bidExpireBlockLength;\n  }\n\n  function blocksRemaining() public view returns (uint256) {\n    if (roundExpired()) {\n      return 0;\n    }else {\n      return bidExpireBlockLength - blocksSinceLastBid();\n    }\n  }\n\n  function blocksSinceLastBid() public view returns (uint256) {\n    return block.number - lastBidBlock;\n  }\n\n  function estimateNextPotSeedAmount() public view returns (uint256) {\n      return this.balance.mul(100 - devFeePercent).div(100).mul(rolloverPercent).div(100);\n  }\n\n  function getRoundState() public view returns (bool _currentRoundExpired, uint256 _nextRoundPotSeedAmountEstimate, uint256 _roundNumber, uint256 _bidNumber, address _king, string _kingsMessage, uint256 _lastBidAmount, uint256 _blocksRemaining, uint256 _potAmount, uint256 _blockNumber, uint256 _bidExpireBlockLength) {\n    _currentRoundExpired = roundExpired();\n    _nextRoundPotSeedAmountEstimate = estimateNextPotSeedAmount();\n    _roundNumber = currentRoundNumber;\n    _bidNumber = currentBidNumber;\n    _king = king;\n    _kingsMessage = kingsMessage;\n    _lastBidAmount = lastBidAmount;\n    _blocksRemaining = blocksRemaining();\n    _potAmount = this.balance;\n    _blockNumber = block.number;\n    _bidExpireBlockLength = bidExpireBlockLength;\n  }\n\n  function getPastRound(uint256 _roundNum) public view returns (address _kingAddress, uint256 _finalBid, uint256 _kingWinnings, string _finalMessage) {\n    _kingAddress = roundToKing[_roundNum]; \n    _kingWinnings = roundToWinnings[_roundNum];\n    _finalBid = roundToFinalBid[_roundNum];\n    _finalMessage = roundToFinalMessage[_roundNum];\n  }\n\n  function isContract(address addr) internal view returns (bool) {\n    uint size;\n    assembly { size := extcodesize(addr) }\n    return size > 0;\n  }\n}"
}