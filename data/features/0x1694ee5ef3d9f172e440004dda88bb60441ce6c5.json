{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH7 PUSH1 SSTORE CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP1 POP JUMPDEST DUP2 MLOAD DUP2 LT ISZERO PUSH2 JUMPI PUSH4 DUP4 MUL PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH4 DUP4 MUL PUSH1 PUSH1 DUP5 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH4 DUP7 MUL PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD GT JUMPDEST ISZERO PUSH2 JUMPI DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD GT JUMPDEST ISZERO PUSH2 JUMPI DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xfb UNKNOWN_0x27 UNKNOWN_0xc2 SWAP5 UNKNOWN_0xfb UNKNOWN_0xa8 PUSH11 LOG3 UNKNOWN_0xfc SLOAD AND JUMPI SWAP15 DELEGATECALL NOT MLOAD UNKNOWN_0xbb SWAP14 UNKNOWN_0xab UNKNOWN_0x5f RETURN STOP UNKNOWN_0x29",
  "opcode_entropy": 4.698927297404727,
  "opcode_count": 1759,
  "unique_opcodes": 66,
  "byte_entropy": 4.45688635516766,
  "byte_0x": 0.0002577984016499098,
  "byte_60": 0.06805877803557618,
  "byte_40": 0.009538540861046661,
  "byte_52": 0.020108275328692964,
  "byte_66": 0.0002577984016499098,
  "byte_03": 0.01134312967259603,
  "byte_8d": 0.001288992008249549,
  "byte_7e": 0.0002577984016499098,
  "byte_a4": 0.0005155968032998196,
  "byte_c6": 0.0005155968032998196,
  "byte_80": 0.027068832173240527,
  "byte_00": 0.048723897911832945,
  "byte_55": 0.0028357824181490074,
  "byte_34": 0.0030935808197989174,
  "byte_15": 0.011858726475895849,
  "byte_61": 0.01959267852539314,
  "byte_1a": 0.0002577984016499098,
  "byte_57": 0.010311936065996391,
  "byte_fd": 0.004382572828048466,
  "byte_5b": 0.018045888115493684,
  "byte_33": 0.002320185614849188,
  "byte_01": 0.034544985821087906,
  "byte_0a": 0.0028357824181490074,
  "byte_81": 0.029646816189739623,
  "byte_54": 0.0069605568445475635,
  "byte_73": 0.018045888115493684,
  "byte_ff": 0.3624645527197731,
  "byte_02": 0.008507347254447023,
  "byte_19": 0.0010311936065996391,
  "byte_16": 0.021139468935292602,
  "byte_90": 0.03402938901778809,
  "byte_83": 0.004640371229698376,
  "byte_17": 0.0005155968032998196,
  "byte_50": 0.031193606599639084,
  "byte_04": 0.005155968032998196,
  "byte_20": 0.029904614591389534,
  "byte_0e": 0.0002577984016499098,
  "byte_d2": 0.0005155968032998196,
  "byte_39": 0.0002577984016499098,
  "byte_f3": 0.003351379221448827,
  "byte_36": 0.0002577984016499098,
  "byte_ad": 0.001288992008249549,
  "byte_35": 0.003609177623098737,
  "byte_7c": 0.0002577984016499098,
  "byte_63": 0.005155968032998196,
  "byte_06": 0.0010311936065996391,
  "byte_de": 0.0002577984016499098,
  "byte_14": 0.003351379221448827,
  "byte_b2": 0.0007733952049497294,
  "byte_09": 0.0007733952049497294,
  "byte_5e": 0.0005155968032998196,
  "byte_a7": 0.0010311936065996391,
  "byte_b3": 0.0010311936065996391,
  "byte_4f": 0.0005155968032998196,
  "byte_8e": 0.0002577984016499098,
  "byte_9a": 0.0002577984016499098,
  "byte_18": 0.0002577984016499098,
  "byte_0d": 0.001288992008249549,
  "byte_dd": 0.0018045888115493685,
  "byte_23": 0.0010311936065996391,
  "byte_b8": 0.0002577984016499098,
  "byte_72": 0.0007733952049497294,
  "byte_26": 0.0007733952049497294,
  "byte_31": 0.0007733952049497294,
  "byte_3c": 0.0002577984016499098,
  "byte_e5": 0.0005155968032998196,
  "byte_67": 0.0002577984016499098,
  "byte_9f": 0.0002577984016499098,
  "byte_70": 0.0005155968032998196,
  "byte_a0": 0.0002577984016499098,
  "byte_82": 0.01160092807424594,
  "byte_ce": 0.0002577984016499098,
  "byte_a5": 0.0005155968032998196,
  "byte_cb": 0.0002577984016499098,
  "byte_1b": 0.0010311936065996391,
  "byte_95": 0.0010311936065996391,
  "byte_d8": 0.0002577984016499098,
  "byte_9b": 0.001288992008249549,
  "byte_41": 0.0005155968032998196,
  "byte_a9": 0.0002577984016499098,
  "byte_05": 0.0020623872131992783,
  "byte_9c": 0.0002577984016499098,
  "byte_bb": 0.0005155968032998196,
  "byte_fe": 0.0010311936065996391,
  "byte_62": 0.0005155968032998196,
  "byte_ed": 0.0002577984016499098,
  "byte_3e": 0.0005155968032998196,
  "byte_58": 0.0005155968032998196,
  "byte_bd": 0.0002577984016499098,
  "byte_c5": 0.0002577984016499098,
  "byte_c4": 0.0010311936065996391,
  "byte_56": 0.0069605568445475635,
  "byte_51": 0.01160092807424594,
  "byte_91": 0.01263212168084558,
  "byte_10": 0.002320185614849188,
  "byte_84": 0.003351379221448827,
  "byte_ea": 0.0002577984016499098,
  "byte_1f": 0.0005155968032998196,
  "byte_32": 0.0002577984016499098,
  "byte_92": 0.003609177623098737,
  "byte_4b": 0.0002577984016499098,
  "byte_fb": 0.0007733952049497294,
  "byte_93": 0.0005155968032998196,
  "byte_37": 0.0010311936065996391,
  "byte_ef": 0.0010311936065996391,
  "byte_08": 0.0010311936065996391,
  "byte_07": 0.0010311936065996391,
  "byte_f0": 0.0005155968032998196,
  "byte_85": 0.0010311936065996391,
  "byte_f9": 0.0005155968032998196,
  "byte_aa": 0.0010311936065996391,
  "byte_0b": 0.0015467904098994587,
  "byte_d9": 0.0002577984016499098,
  "byte_2e": 0.0002577984016499098,
  "byte_4e": 0.0005155968032998196,
  "byte_7b": 0.0002577984016499098,
  "byte_74": 0.0005155968032998196,
  "byte_c3": 0.0005155968032998196,
  "byte_a8": 0.0005155968032998196,
  "byte_ae": 0.0002577984016499098,
  "byte_a1": 0.001288992008249549,
  "byte_7f": 0.0015467904098994587,
  "byte_42": 0.0007733952049497294,
  "byte_69": 0.001288992008249549,
  "byte_6f": 0.0002577984016499098,
  "byte_6e": 0.0005155968032998196,
  "byte_47": 0.0005155968032998196,
  "byte_65": 0.0007733952049497294,
  "byte_8c": 0.0002577984016499098,
  "byte_e1": 0.0010311936065996391,
  "byte_eb": 0.0005155968032998196,
  "byte_ec": 0.0002577984016499098,
  "byte_7d": 0.0005155968032998196,
  "byte_d1": 0.0002577984016499098,
  "byte_71": 0.0002577984016499098,
  "byte_1e": 0.0005155968032998196,
  "byte_c0": 0.0005155968032998196,
  "byte_f7": 0.0002577984016499098,
  "byte_29": 0.0005155968032998196,
  "byte_c8": 0.0010311936065996391,
  "byte_c7": 0.0002577984016499098,
  "byte_b9": 0.0002577984016499098,
  "byte_25": 0.0002577984016499098,
  "byte_a3": 0.001288992008249549,
  "byte_4d": 0.0010311936065996391,
  "byte_f5": 0.002320185614849188,
  "byte_e9": 0.0002577984016499098,
  "byte_48": 0.0005155968032998196,
  "byte_f2": 0.0007733952049497294,
  "byte_e2": 0.0007733952049497294,
  "byte_c2": 0.0010311936065996391,
  "byte_b0": 0.0007733952049497294,
  "byte_68": 0.0007733952049497294,
  "byte_fc": 0.0010311936065996391,
  "byte_2b": 0.0007733952049497294,
  "byte_f1": 0.0007733952049497294,
  "byte_28": 0.0007733952049497294,
  "byte_5a": 0.0007733952049497294,
  "byte_86": 0.0018045888115493685,
  "byte_11": 0.001288992008249549,
  "byte_5d": 0.0002577984016499098,
  "byte_f4": 0.0005155968032998196,
  "byte_43": 0.0002577984016499098,
  "byte_0c": 0.0002577984016499098,
  "byte_89": 0.0002577984016499098,
  "byte_96": 0.0002577984016499098,
  "byte_7a": 0.0005155968032998196,
  "byte_30": 0.0002577984016499098,
  "byte_27": 0.0002577984016499098,
  "byte_94": 0.0002577984016499098,
  "byte_6a": 0.0002577984016499098,
  "byte_a2": 0.0002577984016499098,
  "byte_6d": 0.0002577984016499098,
  "byte_b5": 0.0002577984016499098,
  "byte_c1": 0.0002577984016499098,
  "byte_9e": 0.0002577984016499098,
  "byte_9d": 0.0002577984016499098,
  "byte_ab": 0.0002577984016499098,
  "byte_5f": 0.0002577984016499098,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 3,
  "event_nums": 0,
  "creation_block": 4431883,
  "creation_timestamp": 1509004551,
  "life_time": 2263313.0,
  "duration_seconds": 33083845.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 1.325489967366437e-06,
  "avg_gas_limit": 406936.0,
  "std_gas_limit": 490976.55219029216,
  "avg_gas_used": 380608.0,
  "std_gas_used": 508532.10544926923,
  "avg_gas_price": 2333333333.3333335,
  "std_gas_price": 942809041.5820633,
  "timeline_sequence": [
    [
      4431883,
      1509004551,
      5,
      77,
      0,
      1099781,
      1000000000,
      0,
      1,
      5042676,
      1099781,
      18660184
    ],
    [
      6695189,
      1542088249,
      64,
      37,
      0,
      21000,
      3000000000,
      1,
      0,
      6331821,
      21000,
      16396878
    ],
    [
      6695196,
      1542088396,
      65,
      22,
      0,
      100027,
      3000000000,
      1,
      0,
      6581264,
      21043,
      16396871
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.13;\n\n//Bitcoin Green official / bitcoinred.io for official contracts\n\ncontract ERC20 {\n     function totalSupply() constant returns (uint256 totalSupply);\n     function balanceOf(address _owner) constant returns (uint256 balance);\n     function transfer(address _to, uint256 _value) returns (bool success);\n     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n     function approve(address _spender, uint256 _value) returns (bool success);\n     function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n     event Transfer(address indexed _from, address indexed _to, uint256 _value);\n     event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n }\n  \n  contract BitcoinGreen is ERC20 {\n     string public constant symbol = \"BTCG\";\n     string public constant name = \"Bitcoin Green\";\n     uint8 public constant decimals = 8;\n     uint256 _totalSupply = 10000000 * 10**8;\n     \n\n     address public owner;\n  \n     mapping(address => uint256) balances;\n  \n     mapping(address => mapping (address => uint256)) allowed;\n     \n  \n     function BitcoinGreen() {\n         owner = msg.sender;\n         balances[owner] = _totalSupply;\n     }\n     \n     modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n     \n     \n     function distributeBTCG(uint256 _amount, address[] addresses) onlyOwner {\n         for (uint i = 0; i < addresses.length; i++) {\n             balances[owner] -= _amount * 10**8;\n             balances[addresses[i]] += _amount * 10**8;\n             Transfer(owner, addresses[i], _amount * 10**8);\n         }\n     }\n     \n  \n     function totalSupply() constant returns (uint256 totalSupply) {\n         totalSupply = _totalSupply;\n     }\n  \n\n     function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n     }\n \n     function transfer(address _to, uint256 _amount) returns (bool success) {\n         if (balances[msg.sender] >= _amount \n            && _amount > 0\n             && balances[_to] + _amount > balances[_to]) {\n             balances[msg.sender] -= _amount;\n             balances[_to] += _amount;\n             Transfer(msg.sender, _to, _amount);\n            return true;\n         } else {\n             return false;\n         }\n     }\n     \n     \n     function transferFrom(\n         address _from,\n         address _to,\n         uint256 _amount\n     ) returns (bool success) {\n         if (balances[_from] >= _amount\n             && allowed[_from][msg.sender] >= _amount\n             && _amount > 0\n             && balances[_to] + _amount > balances[_to]) {\n             balances[_from] -= _amount;\n             allowed[_from][msg.sender] -= _amount;\n             balances[_to] += _amount;\n             Transfer(_from, _to, _amount);\n             return true;\n         } else {\n            return false;\n         }\n     }\n \n     function approve(address _spender, uint256 _amount) returns (bool success) {\n         allowed[msg.sender][_spender] = _amount;\n        Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n         return allowed[_owner][_spender];\n    }\n}"
}