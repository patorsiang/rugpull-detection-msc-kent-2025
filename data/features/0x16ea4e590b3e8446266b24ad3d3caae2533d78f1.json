{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP1 CALLVALUE SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 SHA3 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP4 GT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 DUP2 ADD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP10 ADD SWAP1 SSTORE SWAP4 DUP10 AND DUP1 DUP4 MSTORE DUP5 DUP4 SHA3 DUP1 SLOAD DUP10 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP3 MSTORE DUP5 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP5 SWAP1 SHA3 DUP1 SLOAD DUP9 SWAP1 SUB SWAP1 SSTORE DUP4 MLOAD DUP8 DUP2 MSTORE SWAP4 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH1 SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SELFDESTRUCT JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE DUP3 SLOAD DUP7 SWAP1 SUB SWAP1 SWAP3 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP2 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB DUP6 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP3 POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO PUSH2 JUMPI PUSH1 SWAP3 POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH3 SWAP1 TIMESTAMP SUB DIV SWAP2 POP PUSH1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP3 POP PUSH2 JUMP JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 DUP1 DUP3 DIV PUSH1 SWAP2 DUP4 MUL SWAP2 SWAP1 SWAP2 DIV DUP4 MUL ADD SWAP1 DUP2 GT ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SHA3 SLOAD DUP3 ADD LT ISZERO PUSH2 JUMPI PUSH1 SWAP3 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SHA3 SLOAD SUB DUP2 ADD SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH8 SWAP3 SWAP1 SWAP3 MUL SWAP2 DUP3 ADD DUP2 SSTORE CALLER DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP3 MSTORE DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE DUP3 SLOAD DUP7 SWAP1 SUB SWAP1 SWAP3 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP2 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH20 NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SLOAD TIMESTAMP LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 DUP2 ADD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 CALLER PUSH2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP9 SWAP1 SUB SWAP1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP1 DUP5 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP1 SLOAD DUP9 ADD SWAP1 SSTORE DUP1 MLOAD DUP8 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD DUP3 PUSH1 SLOAD ADD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD DUP4 ADD SWAP1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE PUSH1 SWAP1 SWAP2 MSTORE SWAP1 SHA3 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP STOP LOG1 PUSH6 SHA3 ADDMOD SWAP11 MSIZE UNKNOWN_0x22 SHL UNKNOWN_0xeb DUP10 INVALID_0x7c",
  "opcode_entropy": 4.64950051620214,
  "opcode_count": 2487,
  "unique_opcodes": 66,
  "byte_entropy": 5.7504635988824635,
  "byte_60": 0.13030628694250404,
  "byte_80": 0.04271896829661472,
  "byte_40": 0.01155292853304675,
  "byte_52": 0.028210639441160666,
  "byte_04": 0.01477700161203654,
  "byte_36": 0.00026867275658248256,
  "byte_10": 0.0018807092960773778,
  "byte_61": 0.04245029554003224,
  "byte_01": 0.03331542181622783,
  "byte_48": 0.0005373455131649651,
  "byte_57": 0.02444922084900591,
  "byte_63": 0.007791509940891994,
  "byte_ff": 0.015045674368619023,
  "byte_7c": 0.0010746910263299302,
  "byte_00": 0.051047823750671684,
  "byte_35": 0.006985491671144546,
  "byte_16": 0.02337452982267598,
  "byte_06": 0.004298764105319721,
  "byte_fd": 0.01477700161203654,
  "byte_de": 0.00026867275658248256,
  "byte_03": 0.03062869425040301,
  "byte_81": 0.027404621171413217,
  "byte_14": 0.010746910263299301,
  "byte_76": 0.0005373455131649651,
  "byte_09": 0.002955400322407308,
  "byte_5e": 0.00026867275658248256,
  "byte_a7": 0.0010746910263299302,
  "byte_b3": 0.0013433637829124126,
  "byte_02": 0.027404621171413217,
  "byte_0f": 0.00026867275658248256,
  "byte_75": 0.00026867275658248256,
  "byte_c9": 0.00026867275658248256,
  "byte_38": 0.00026867275658248256,
  "byte_18": 0.0008060182697474476,
  "byte_0d": 0.0032240730789897904,
  "byte_dd": 0.0016120365394948952,
  "byte_5f": 0.00026867275658248256,
  "byte_23": 0.0008060182697474476,
  "byte_b8": 0.00026867275658248256,
  "byte_72": 0.0005373455131649651,
  "byte_74": 0.0016120365394948952,
  "byte_31": 0.0005373455131649651,
  "byte_3c": 0.0008060182697474476,
  "byte_e5": 0.0008060182697474476,
  "byte_67": 0.0010746910263299302,
  "byte_9e": 0.00026867275658248256,
  "byte_3d": 0.0005373455131649651,
  "byte_13": 0.00026867275658248256,
  "byte_4d": 0.003492745835572273,
  "byte_f4": 0.00026867275658248256,
  "byte_3e": 0.0010746910263299302,
  "byte_0a": 0.018807092960773777,
  "byte_32": 0.0008060182697474476,
  "byte_2d": 0.0008060182697474476,
  "byte_d4": 0.0005373455131649651,
  "byte_6f": 0.0008060182697474476,
  "byte_11": 0.003492745835572273,
  "byte_f5": 0.002955400322407308,
  "byte_ec": 0.0008060182697474476,
  "byte_41": 0.0008060182697474476,
  "byte_c0": 0.0005373455131649651,
  "byte_e1": 0.0008060182697474476,
  "byte_b5": 0.00026867275658248256,
  "byte_42": 0.0018807092960773778,
  "byte_96": 0.00026867275658248256,
  "byte_6c": 0.0010746910263299302,
  "byte_68": 0.0016120365394948952,
  "byte_22": 0.0010746910263299302,
  "byte_46": 0.0005373455131649651,
  "byte_ca": 0.00026867275658248256,
  "byte_a2": 0.0010746910263299302,
  "byte_3a": 0.0008060182697474476,
  "byte_85": 0.0037614185921547557,
  "byte_5b": 0.03519613111230521,
  "byte_9c": 0.0010746910263299302,
  "byte_3f": 0.00026867275658248256,
  "byte_8c": 0.0005373455131649651,
  "byte_70": 0.0010746910263299302,
  "byte_a0": 0.017195056421278884,
  "byte_82": 0.009134873723804407,
  "byte_a4": 0.00026867275658248256,
  "byte_79": 0.0005373455131649651,
  "byte_cc": 0.0013433637829124126,
  "byte_90": 0.04755507791509941,
  "byte_c5": 0.0005373455131649651,
  "byte_8f": 0.0005373455131649651,
  "byte_28": 0.0008060182697474476,
  "byte_39": 0.0010746910263299302,
  "byte_e9": 0.0008060182697474476,
  "byte_93": 0.0024180548092423426,
  "byte_c3": 0.0005373455131649651,
  "byte_2e": 0.0005373455131649651,
  "byte_95": 0.0010746910263299302,
  "byte_d8": 0.0005373455131649651,
  "byte_9b": 0.0018807092960773778,
  "byte_2b": 0.0008060182697474476,
  "byte_a5": 0.0010746910263299302,
  "byte_88": 0.0013433637829124126,
  "byte_a9": 0.0005373455131649651,
  "byte_05": 0.0037614185921547557,
  "byte_bb": 0.0005373455131649651,
  "byte_c4": 0.0008060182697474476,
  "byte_97": 0.0005373455131649651,
  "byte_78": 0.00026867275658248256,
  "byte_07": 0.008866200967221924,
  "byte_62": 0.0010746910263299302,
  "byte_ed": 0.00026867275658248256,
  "byte_a6": 0.00026867275658248256,
  "byte_fa": 0.0005373455131649651,
  "byte_8b": 0.0008060182697474476,
  "byte_cd": 0.00026867275658248256,
  "byte_f8": 0.0008060182697474476,
  "byte_4b": 0.00026867275658248256,
  "byte_f1": 0.0013433637829124126,
  "byte_54": 0.018807092960773777,
  "byte_51": 0.0067168189145620635,
  "byte_91": 0.014508328855454057,
  "byte_34": 0.007522837184309511,
  "byte_87": 0.0026867275658248252,
  "byte_5a": 0.0008060182697474476,
  "byte_92": 0.008866200967221924,
  "byte_50": 0.021762493283181087,
  "byte_15": 0.01585169263836647,
  "byte_56": 0.016120365394948953,
  "byte_20": 0.023911875335840944,
  "byte_83": 0.011821601289629231,
  "byte_ad": 0.0008060182697474476,
  "byte_1f": 0.00026867275658248256,
  "byte_f2": 0.0008060182697474476,
  "byte_19": 0.0016120365394948952,
  "byte_f3": 0.0013433637829124126,
  "byte_0c": 0.0032240730789897904,
  "byte_24": 0.0045674368619022035,
  "byte_44": 0.0010746910263299302,
  "byte_a3": 0.0013433637829124126,
  "byte_6b": 0.0005373455131649651,
  "byte_af": 0.00026867275658248256,
  "byte_aa": 0.0008060182697474476,
  "byte_bf": 0.00026867275658248256,
  "byte_e0": 0.0010746910263299302,
  "byte_b1": 0.0005373455131649651,
  "byte_d6": 0.00026867275658248256,
  "byte_08": 0.0021493820526598604,
  "byte_66": 0.0008060182697474476,
  "byte_98": 0.00026867275658248256,
  "byte_b0": 0.0008060182697474476,
  "byte_d1": 0.0005373455131649651,
  "byte_0b": 0.0021493820526598604,
  "byte_37": 0.0008060182697474476,
  "byte_b2": 0.0008060182697474476,
  "byte_4c": 0.00026867275658248256,
  "byte_6d": 0.0005373455131649651,
  "byte_47": 0.00026867275658248256,
  "byte_d9": 0.00026867275658248256,
  "byte_d0": 0.00026867275658248256,
  "byte_0e": 0.0005373455131649651,
  "byte_58": 0.0005373455131649651,
  "byte_7f": 0.0018807092960773778,
  "byte_69": 0.0013433637829124126,
  "byte_65": 0.0005373455131649651,
  "byte_6e": 0.0005373455131649651,
  "byte_43": 0.0005373455131649651,
  "byte_33": 0.006179473401397098,
  "byte_84": 0.004836109618484685,
  "byte_86": 0.0013433637829124126,
  "byte_55": 0.005642127888232133,
  "byte_94": 0.0008060182697474476,
  "byte_eb": 0.0005373455131649651,
  "byte_7d": 0.0005373455131649651,
  "byte_4f": 0.00026867275658248256,
  "byte_71": 0.0013433637829124126,
  "byte_1e": 0.0013433637829124126,
  "byte_f7": 0.00026867275658248256,
  "byte_29": 0.0005373455131649651,
  "byte_c8": 0.0010746910263299302,
  "byte_c7": 0.0005373455131649651,
  "byte_b9": 0.00026867275658248256,
  "byte_25": 0.0005373455131649651,
  "byte_cb": 0.0005373455131649651,
  "byte_17": 0.0010746910263299302,
  "byte_2f": 0.00026867275658248256,
  "byte_a8": 0.0005373455131649651,
  "byte_89": 0.0010746910263299302,
  "byte_1b": 0.0008060182697474476,
  "byte_e2": 0.0008060182697474476,
  "byte_c2": 0.0005373455131649651,
  "byte_fc": 0.0005373455131649651,
  "byte_8d": 0.0008060182697474476,
  "byte_a1": 0.0008060182697474476,
  "byte_ef": 0.0008060182697474476,
  "byte_12": 0.0010746910263299302,
  "byte_f0": 0.00026867275658248256,
  "byte_db": 0.0005373455131649651,
  "byte_b4": 0.0005373455131649651,
  "byte_5c": 0.0005373455131649651,
  "byte_9d": 0.0005373455131649651,
  "byte_bd": 0.0005373455131649651,
  "byte_73": 0.0010746910263299302,
  "byte_cf": 0.0005373455131649651,
  "byte_7a": 0.0010746910263299302,
  "byte_b7": 0.0005373455131649651,
  "byte_5d": 0.0005373455131649651,
  "byte_b6": 0.0005373455131649651,
  "byte_27": 0.00026867275658248256,
  "byte_64": 0.0005373455131649651,
  "byte_59": 0.0005373455131649651,
  "byte_e7": 0.0005373455131649651,
  "byte_30": 0.00026867275658248256,
  "byte_9a": 0.00026867275658248256,
  "byte_dc": 0.00026867275658248256,
  "byte_7e": 0.00026867275658248256,
  "byte_1a": 0.00026867275658248256,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 6,
  "event_nums": 1,
  "creation_block": 6589692,
  "creation_timestamp": 1540595518,
  "life_time": 55374.0,
  "duration_seconds": 783806.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.00010835214446952596,
  "avg_gas_limit": 230754.16666666666,
  "std_gas_limit": 384113.7581552357,
  "avg_gas_used": 221435.5,
  "std_gas_used": 388309.8413066341,
  "avg_gas_price": 4766666666.666667,
  "std_gas_price": 1368291716.7849195,
  "transfer_num": 3,
  "atinversebrah_num": 1,
  "distribute_num": 1,
  "setstarttime_num": 1,
  "timeline_sequence": [
    [
      6589692,
      1540595518,
      0,
      12,
      0,
      1088610,
      3000000000,
      0,
      1,
      7904366,
      1088610,
      16531182
    ],
    [
      6633029,
      1541209372,
      4,
      88,
      0,
      85930,
      6600000000,
      0,
      1,
      5528908,
      85930,
      16487845
    ],
    [
      6644954,
      1541377680,
      5,
      54,
      0,
      42246,
      6000000000,
      0,
      1,
      4807723,
      42246,
      16475920
    ],
    [
      6644992,
      1541378091,
      0,
      47,
      0,
      42214,
      3000000000,
      0,
      1,
      5256209,
      28143,
      16475882
    ],
    [
      6645056,
      1541379150,
      1,
      61,
      0,
      42214,
      5000000000,
      0,
      1,
      4235031,
      28143,
      16475818
    ],
    [
      6645066,
      1541379324,
      2,
      73,
      0,
      83311,
      5000000000,
      0,
      1,
      4270042,
      55541,
      16475808
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.25;\n    contract TMBToken  {\n        string public constant name = \"TimeBankCoin\";\n        string public constant symbol = \"TMB\";\n        uint public constant decimals = 18;\n        uint256 _totalSupply = 1e9 * (10 ** uint256(decimals)); \n        uint public baseStartTime;\n        uint256 public distributed = 0;\n        mapping (address => bool) public freezed;\n        mapping(address => uint256) balances;       \n        mapping(address => uint256) distBalances;   \n        mapping(address => mapping (address => uint256)) allowed;\n        address public founder;\n        event AllocateFounderTokens(address indexed sender);\n        event Transfer(address indexed _from, address indexed _to, uint256 _value);\n        event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n        event Burn(address indexed fromAddr, uint256 value);\n     \n        function TMBToken() {\n            founder = msg.sender;\n        }\n         function totalSupply() constant returns (uint256 supply) {\n            return _totalSupply;\n        }\n \n        function balanceOf(address _owner) constant returns (uint256 balance) {\n            return balances[_owner];\n        }\n \n        function approve(address _spender, uint256 _value) returns (bool success) {\n            allowed[msg.sender][_spender] = _value;\n            Approval(msg.sender, _spender, _value);\n            return true;\n        }\n \n        function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n          return allowed[_owner][_spender];\n        }\n        function setStartTime(uint _startTime) {\n            if (msg.sender!=founder) revert();\n            baseStartTime = _startTime;\n        }\n \n       \n        function distribute(uint256 _amount, address _to) {\n            if (msg.sender!=founder) revert();\n            if (distributed + _amount > _totalSupply) revert();\n            if (freezed[_to]) revert();\n            distributed += _amount;\n            balances[_to] += _amount;\n            distBalances[_to] += _amount;\n        }\n \n      \n        function transfer(address _to, uint256 _value) returns (bool success) {\n            if (now < baseStartTime) revert();\n            if (freezed[msg.sender]) revert();\n            if (freezed[_to]) revert();\n          \n            if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n                uint _freeAmount = freeAmount(msg.sender);\n                if (_freeAmount < _value) {\n                    return false;\n                } \n \n                balances[msg.sender] -= _value;\n                balances[_to] += _value;\n                Transfer(msg.sender, _to, _value);\n                return true;\n            } else {\n                return false;\n            }\n        }\n        \n        function addTokenTotal(uint256 _addAmount) public returns (bool success){\n    require(msg.sender == founder);                        \n    require(_addAmount > 0);                             \n        \n    _totalSupply += _addAmount * 10 ** decimals;           \n    balances[msg.sender] += _addAmount * 10 ** decimals;  \n    return true;\n}  \n    function unFreezenAccount(address _freezen) public returns (bool success) {\n        require(msg.sender == founder);       \n        \n        freezed[_freezen] = false;\n        return true;\n    }\n    \n    function burn(uint256 _value) public returns (bool success) {\n        require(msg.sender == founder);                  \n        require(balances[msg.sender] >= _value);      \n        balances[msg.sender] -= _value;\n        _totalSupply -= _value;\n        Burn(msg.sender, _value);\n        return true;\n    }\n    \n   \n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(msg.sender == founder);                  \n        require(balances[_from] >= _value);            \n        require(_value <= allowed[_from][msg.sender]);  \n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        _totalSupply -= _value;\n        Burn(_from, _value);\n        return true;\n    }\n\n    function changeAdmin(address _newAdmin) public returns (bool) {\n    require(msg.sender == founder);\n    require(_newAdmin != address(0));\n    founder = _newAdmin;\n    return true;\n}\n   \n    function getFrozenAccount(address _target) public view returns (bool) {\n        require(_target != address(0));\n        return freezed[_target];\n    }\n\n  function freezenAccount(address _freezen) public returns (bool success) {\n        require(msg.sender == founder);      \n        require(_freezen != founder);         \n    \n        freezed[_freezen] = true;\n        return true;\n    }\n\n        function freeAmount(address user) returns (uint256 amount) {\n           \n            if (user == founder) {\n                return balances[user];\n            }\n\n            if (now < baseStartTime) {\n                return 0;\n            }\n \n         \n            uint monthDiff = (now - baseStartTime) / (30 days);\n \n           \n            if (monthDiff > 5) {\n                return balances[user];\n            }\n \n           \n            uint unrestricted = distBalances[user] / 20 + distBalances[user] * 20 / 100 * monthDiff;\n            if (unrestricted > distBalances[user]) {\n                unrestricted = distBalances[user];\n            }\n \n           \n            if (unrestricted + balances[user] < distBalances[user]) {\n                amount = 0;\n            } else {\n                amount = unrestricted + (balances[user] - distBalances[user]);\n            }\n \n            return amount;\n        }\n \n       \n        function changeFounder(address newFounder) {\n            if (msg.sender!=founder) revert();\n            founder = newFounder;\n        }\n \n        \n        function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n            if (msg.sender != founder) revert();\n            if (freezed[_from]) revert();\n            if (freezed[_to]) revert();\n            \n            if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n                uint _freeAmount = freeAmount(_from);\n                if (_freeAmount < _value) {\n                    return false;\n                } \n \n                balances[_to] += _value;\n                balances[_from] -= _value;\n                allowed[_from][msg.sender] -= _value;\n                Transfer(_from, _to, _value);\n                return true;\n            } else { return false; }\n        }\n        function kill() public {\n        require(msg.sender == founder);\n        selfdestruct(founder);\n        }\n\n        function() payable {\n            if (!founder.call.value(msg.value)()) revert(); \n        }\n    }"
}