{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH3 PUSH1 PUSH1 PUSH3 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH3 SWAP1 PUSH7 PUSH3 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH3 SWAP1 PUSH1 NOT PUSH3 JUMP JUMPDEST PUSH3 SWAP1 PUSH1 NOT PUSH3 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH1 SLOAD PUSH3 SWAP2 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 SSTORE PUSH1 PUSH1 SSTORE PUSH1 PUSH1 SSTORE PUSH1 PUSH1 SSTORE PUSH2 PUSH1 SSTORE PUSH2 PUSH1 SSTORE PUSH2 PUSH1 SSTORE PUSH3 PUSH3 PUSH1 SHL PUSH1 SHR JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 PUSH1 PUSH1 SHL SUB NOT SWAP2 DUP3 AND DUP2 OR DUP4 SSTORE PUSH1 DUP1 SLOAD DUP4 AND DUP3 OR SWAP1 SSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP3 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 SLOAD SWAP1 DUP3 MSTORE PUSH1 PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP6 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP4 SLOAD SWAP1 SWAP5 AND DUP4 MSTORE PUSH1 DUP5 MSTORE SWAP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT SWAP1 DUP2 AND DUP4 OR SWAP1 SWAP2 SSTORE SWAP2 DUP1 MSTORE PUSH32 DUP1 SLOAD DUP4 AND DUP3 OR SWAP1 SSTORE PUSH1 SWAP1 SWAP3 MSTORE PUSH32 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH3 CALLER SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 CALLVALUE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 MLOAD SWAP1 DUP2 MSTORE CALLER SWAP1 PUSH1 SWAP1 PUSH32 SWAP1 PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH3 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 JUMPI DUP2 PUSH1 NOT DIV DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST DUP2 PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST DUP2 PUSH1 DUP2 EQ PUSH3 JUMPI PUSH1 DUP2 EQ PUSH3 JUMPI PUSH3 JUMP JUMPDEST PUSH1 SWAP2 POP POP PUSH3 JUMP JUMPDEST PUSH1 DUP5 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP POP PUSH1 DUP3 SHL PUSH3 JUMP JUMPDEST POP PUSH1 DUP4 LT PUSH2 DUP4 LT AND PUSH1 DUP5 LT PUSH1 DUP5 LT AND OR ISZERO PUSH3 JUMPI POP DUP2 DUP2 EXP PUSH3 JUMP JUMPDEST PUSH3 DUP4 DUP4 PUSH3 JUMP JUMPDEST DUP1 PUSH1 NOT DIV DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH3 DUP4 DUP4 PUSH3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP3 PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP MOD SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 LT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH2 DUP1 PUSH3 PUSH1 CODECOPY PUSH1 RETURN UNKNOWN_0xfe PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH10 PUSH1 SHL PUSH1 DUP3 ADD MSTORE JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 PUSH1 DUP2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO SWAP1 JUMP JUMPDEST PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT SWAP1 DUP2 AND SWAP1 SWAP2 SSTORE DUP5 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP4 DUP7 AND SWAP4 DUP5 OR SWAP1 SWAP5 SSTORE DUP3 DUP3 MSTORE DUP1 DUP3 SHA3 DUP1 SLOAD SWAP1 SWAP5 AND PUSH1 OR SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 SWAP2 PUSH32 SWAP2 LOG2 POP JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP PUSH2 DUP6 CALLER PUSH2 DUP7 DUP6 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD SWAP1 SWAP2 PUSH2 SWAP2 DUP6 SWAP1 PUSH2 SWAP1 DUP7 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 CALLER DUP3 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO DUP2 ISZERO ISZERO EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH11 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD DUP2 SWAP1 ISZERO ISZERO DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND CALLER EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND CALLER EQ JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 SWAP1 POP DUP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI POP POP PUSH1 SLOAD PUSH1 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI POP POP PUSH1 SLOAD PUSH1 SWAP1 PUSH2 JUMP JUMPDEST POP POP PUSH1 SLOAD PUSH1 SLOAD JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 SWAP1 DUP4 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND ISZERO ISZERO JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD SWAP2 DUP3 ADD DUP2 SSTORE SWAP1 SWAP2 MSTORE PUSH32 ADD DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND SWAP1 PUSH32 SWAP1 PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 CALLER DUP6 PUSH2 DUP7 DUP6 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND ISZERO ISZERO JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 JUMPDEST PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI DUP2 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH1 SWAP1 PUSH2 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP3 AND SWAP2 DUP4 SWAP1 DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP5 DUP6 AND OR SWAP1 SSTORE SWAP2 DUP5 AND DUP2 MSTORE PUSH1 DUP3 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP3 SWAP1 SSTORE PUSH1 SWAP1 SWAP3 MSTORE SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP1 PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP3 DUP2 MSTORE PUSH1 SWAP1 SHA3 DUP2 ADD PUSH1 NOT SWAP1 DUP2 ADD DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SSTORE ADD SWAP1 SSTORE PUSH2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST DUP1 PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST POP PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND SWAP1 PUSH32 SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND ISZERO JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE MLOAD PUSH32 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 SWAP2 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 SWAP2 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND ISZERO ISZERO JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP3 GT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH9 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST DUP2 PUSH2 DUP6 PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP7 DUP7 PUSH2 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 PUSH2 DUP6 DUP5 DUP5 PUSH2 JUMP JUMPDEST DUP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP10 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP4 SWAP5 POP SWAP2 SWAP3 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 DUP1 DUP3 ADD MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP9 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SWAP3 MSTORE PUSH1 DUP3 SHA3 DUP1 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP2 ADD MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP9 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP2 ADD MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH2 DUP2 DUP9 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST DUP6 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP8 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 ADD MLOAD PUSH1 MLOAD PUSH2 SWAP2 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP6 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 DUP3 PUSH1 ADD MLOAD PUSH1 MLOAD PUSH2 SWAP2 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST DUP1 PUSH2 DUP4 PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 PUSH1 SLOAD DUP3 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP3 DUP2 MSTORE PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND SWAP1 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH1 JUMPDEST PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI DUP3 PUSH1 PUSH1 PUSH1 DUP5 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 ADD SWAP1 SHA3 SLOAD GT DUP1 PUSH2 JUMPI POP DUP2 PUSH1 PUSH1 PUSH1 DUP5 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 ADD SWAP1 SHA3 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 ADD SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 PUSH1 PUSH1 DUP4 DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 ADD SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP DUP1 PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST POP PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP3 LT PUSH2 JUMPI PUSH2 DUP2 DUP4 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE POP POP JUMP JUMPDEST PUSH2 PUSH1 MLOAD DUP1 PUSH2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 DUP10 DUP10 DUP10 PUSH2 JUMP JUMPDEST SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP PUSH1 DUP5 DUP11 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP8 DUP13 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP1 PUSH2 DUP5 DUP9 PUSH2 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH1 PUSH2 DUP4 DUP4 DUP10 DUP10 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH1 SLOAD DUP9 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH2 DUP2 ADD DUP3 MSTORE SWAP6 DUP7 MSTORE PUSH1 DUP7 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP4 ADD MSTORE POP PUSH1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH2 DUP3 ADD MSTORE PUSH2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH2 DUP3 PUSH2 ADD MLOAD DUP3 PUSH2 JUMP JUMPDEST DUP2 PUSH1 ADD MLOAD DUP3 PUSH1 ADD MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 DUP3 ADD MLOAD PUSH1 DUP1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 DUP3 ADD MLOAD PUSH1 DUP1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 DUP3 ADD MLOAD PUSH1 DUP1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH2 DUP3 ADD MLOAD PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 SWAP1 ADDRESS SWAP1 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 PUSH2 DUP9 DUP12 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH2 DUP11 DUP13 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH1 SLOAD DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH1 SLOAD DUP5 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH1 SLOAD DUP6 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP6 SWAP15 SWAP5 SWAP14 POP SWAP2 SWAP12 POP SWAP10 POP SWAP3 SWAP8 POP SWAP1 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SLOAD DUP5 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP6 PUSH2 JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD DUP3 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP6 PUSH2 JUMP JUMPDEST PUSH2 DUP7 DUP9 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD DUP5 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD DUP4 DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND SWAP2 DUP4 AND SWAP1 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 ADD PUSH1 NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH1 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 DUP5 ADD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 DUP3 NOT DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 NOT DUP3 EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP PUSH1 ADD SWAP1 JUMP UNKNOWN_0xfe UNKNOWN_0xdd CALLCODE MSTORE UNKNOWN_0xad SHL UNKNOWN_0xe2 UNKNOWN_0xc8 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 SWAP14 SWAP10 PUSH12 CALLDATACOPY UNKNOWN_0xdd GASLIMIT EQ BALANCE UNKNOWN_0xef UNKNOWN_0x2d INVALID_0x7c",
  "opcode_entropy": 4.66312176541148,
  "opcode_count": 5560,
  "unique_opcodes": 94,
  "byte_entropy": 6.093588602192818,
  "byte_60": 0.11914191419141915,
  "byte_80": 0.02145214521452145,
  "byte_40": 0.012321232123212322,
  "byte_52": 0.029922992299229925,
  "byte_62": 0.01023102310231023,
  "byte_00": 0.03311331133113311,
  "byte_12": 0.0023102310231023103,
  "byte_0a": 0.0033003300330033004,
  "byte_02": 0.009790979097909791,
  "byte_f5": 0.0009900990099009901,
  "byte_56": 0.028712871287128714,
  "byte_5b": 0.035533553355335534,
  "byte_09": 0.0015401540154015402,
  "byte_81": 0.02442244224422442,
  "byte_90": 0.03784378437843784,
  "byte_55": 0.006270627062706271,
  "byte_2a": 0.00033003300330033004,
  "byte_66": 0.0013201320132013201,
  "byte_03": 0.0187018701870187,
  "byte_8d": 0.0008800880088008801,
  "byte_7e": 0.00033003300330033004,
  "byte_a4": 0.0007700770077007701,
  "byte_c6": 0.00011001100110011001,
  "byte_3d": 0.0007700770077007701,
  "byte_19": 0.004840484048404841,
  "byte_42": 0.0007700770077007701,
  "byte_4b": 0.0013201320132013201,
  "byte_59": 0.00055005500550055,
  "byte_0b": 0.0023102310231023103,
  "byte_54": 0.017931793179317933,
  "byte_5e": 0.00033003300330033004,
  "byte_91": 0.016611661166116613,
  "byte_73": 0.00539053905390539,
  "byte_0c": 0.0020902090209020904,
  "byte_64": 0.005610561056105611,
  "byte_0f": 0.0024202420242024204,
  "byte_c8": 0.0008800880088008801,
  "byte_10": 0.0046204620462046205,
  "byte_11": 0.005500550055005501,
  "byte_61": 0.05742574257425743,
  "byte_17": 0.0037403740374037406,
  "byte_70": 0.0022002200220022,
  "byte_13": 0.0012101210121012102,
  "byte_07": 0.0026402640264026403,
  "byte_d0": 0.0006600660066006601,
  "byte_14": 0.00814081408140814,
  "byte_15": 0.009790979097909791,
  "byte_97": 0.0013201320132013201,
  "byte_01": 0.04664466446644665,
  "byte_dc": 0.00022002200220022002,
  "byte_20": 0.02695269526952695,
  "byte_1b": 0.020572057205720574,
  "byte_1c": 0.0023102310231023103,
  "byte_a0": 0.01144114411441144,
  "byte_92": 0.006270627062706271,
  "byte_83": 0.00891089108910891,
  "byte_16": 0.017051705170517052,
  "byte_82": 0.01903190319031903,
  "byte_08": 0.00286028602860286,
  "byte_85": 0.0038503850385038503,
  "byte_93": 0.0035203520352035203,
  "byte_94": 0.0020902090209020904,
  "byte_04": 0.00957095709570957,
  "byte_84": 0.006930693069306931,
  "byte_ff": 0.00253025302530253,
  "byte_7f": 0.0039603960396039604,
  "byte_ef": 0.0013201320132013201,
  "byte_8e": 0.00055005500550055,
  "byte_3e": 0.0008800880088008801,
  "byte_ab": 0.00033003300330033004,
  "byte_9c": 0.0008800880088008801,
  "byte_72": 0.005610561056105611,
  "byte_a8": 0.0006600660066006601,
  "byte_d5": 0.00033003300330033004,
  "byte_78": 0.00055005500550055,
  "byte_1d": 0.0039603960396039604,
  "byte_e0": 0.0026402640264026403,
  "byte_9e": 0.00033003300330033004,
  "byte_6e": 0.0038503850385038503,
  "byte_b3": 0.0006600660066006601,
  "byte_43": 0.0008800880088008801,
  "byte_45": 0.00033003300330033004,
  "byte_ac": 0.00022002200220022002,
  "byte_3b": 0.00044004400440044003,
  "byte_f8": 0.0006600660066006601,
  "byte_fd": 0.0035203520352035203,
  "byte_d3": 0.00022002200220022002,
  "byte_ec": 0.00044004400440044003,
  "byte_05": 0.005940594059405941,
  "byte_b8": 0.0006600660066006601,
  "byte_cc": 0.0008800880088008801,
  "byte_bb": 0.00055005500550055,
  "byte_9d": 0.00033003300330033004,
  "byte_4d": 0.0006600660066006601,
  "byte_8f": 0.0007700770077007701,
  "byte_b1": 0.00022002200220022002,
  "byte_a7": 0.00055005500550055,
  "byte_4c": 0.00033003300330033004,
  "byte_e3": 0.0006600660066006601,
  "byte_c2": 0.0008800880088008801,
  "byte_9a": 0.00055005500550055,
  "byte_41": 0.0009900990099009901,
  "byte_f1": 0.0006600660066006601,
  "byte_b4": 0.00044004400440044003,
  "byte_fb": 0.00055005500550055,
  "byte_da": 0.00055005500550055,
  "byte_47": 0.0011001100110011,
  "byte_d9": 0.00044004400440044003,
  "byte_eb": 0.00055005500550055,
  "byte_49": 0.0006600660066006601,
  "byte_46": 0.0038503850385038503,
  "byte_bc": 0.00055005500550055,
  "byte_33": 0.0038503850385038503,
  "byte_fc": 0.00055005500550055,
  "byte_34": 0.00055005500550055,
  "byte_51": 0.0121012101210121,
  "byte_88": 0.0012101210121012102,
  "byte_50": 0.0231023102310231,
  "byte_57": 0.01595159515951595,
  "byte_dd": 0.0011001100110011,
  "byte_f2": 0.0008800880088008801,
  "byte_ad": 0.00044004400440044003,
  "byte_e2": 0.00055005500550055,
  "byte_9b": 0.0007700770077007701,
  "byte_69": 0.0018701870187018703,
  "byte_b0": 0.0007700770077007701,
  "byte_68": 0.0018701870187018703,
  "byte_37": 0.0013201320132013201,
  "byte_aa": 0.00055005500550055,
  "byte_95": 0.0009900990099009901,
  "byte_2b": 0.0012101210121012102,
  "byte_63": 0.007480748074807481,
  "byte_c4": 0.00044004400440044003,
  "byte_a1": 0.00022002200220022002,
  "byte_28": 0.00055005500550055,
  "byte_5a": 0.00055005500550055,
  "byte_23": 0.00055005500550055,
  "byte_a3": 0.0015401540154015402,
  "byte_8a": 0.00044004400440044003,
  "byte_4e": 0.0008800880088008801,
  "byte_48": 0.0009900990099009901,
  "byte_7b": 0.0011001100110011,
  "byte_71": 0.0011001100110011,
  "byte_24": 0.00286028602860286,
  "byte_29": 0.00044004400440044003,
  "byte_5f": 0.00022002200220022002,
  "byte_d4": 0.00033003300330033004,
  "byte_f6": 0.00033003300330033004,
  "byte_3f": 0.0013201320132013201,
  "byte_27": 0.0012101210121012102,
  "byte_2c": 0.0007700770077007701,
  "byte_06": 0.0026402640264026403,
  "byte_1f": 0.00539053905390539,
  "byte_e8": 0.00022002200220022002,
  "byte_39": 0.0009900990099009901,
  "byte_f3": 0.00055005500550055,
  "byte_fe": 0.0009900990099009901,
  "byte_36": 0.0024202420242024204,
  "byte_35": 0.0009900990099009901,
  "byte_31": 0.0009900990099009901,
  "byte_30": 0.00022002200220022002,
  "byte_a9": 0.00044004400440044003,
  "byte_d8": 0.00055005500550055,
  "byte_86": 0.0020902090209020904,
  "byte_7c": 0.00055005500550055,
  "byte_c1": 0.00011001100110011001,
  "byte_ed": 0.00022002200220022002,
  "byte_c9": 0.00022002200220022002,
  "byte_8b": 0.0007700770077007701,
  "byte_1e": 0.0070407040704070405,
  "byte_75": 0.0017601760176017601,
  "byte_b2": 0.00033003300330033004,
  "byte_bd": 0.00033003300330033004,
  "byte_fa": 0.0026402640264026403,
  "byte_44": 0.00253025302530253,
  "byte_cb": 0.00022002200220022002,
  "byte_cf": 0.00055005500550055,
  "byte_4f": 0.0007700770077007701,
  "byte_2e": 0.00044004400440044003,
  "byte_ae": 0.00055005500550055,
  "byte_cd": 0.0033003300330033004,
  "byte_a5": 0.00011001100110011001,
  "byte_a2": 0.0013201320132013201,
  "byte_2d": 0.00044004400440044003,
  "byte_32": 0.00055005500550055,
  "byte_3c": 0.00055005500550055,
  "byte_d7": 0.00055005500550055,
  "byte_18": 0.0026402640264026403,
  "byte_a6": 0.00011001100110011001,
  "byte_ba": 0.00011001100110011001,
  "byte_74": 0.0036303630363036304,
  "byte_96": 0.00033003300330033004,
  "byte_d2": 0.00011001100110011001,
  "byte_3a": 0.00044004400440044003,
  "byte_99": 0.00055005500550055,
  "byte_87": 0.00143014301430143,
  "byte_9f": 0.00044004400440044003,
  "byte_de": 0.00033003300330033004,
  "byte_6c": 0.0023102310231023103,
  "byte_0d": 0.0015401540154015402,
  "byte_c5": 0.0007700770077007701,
  "byte_e5": 0.0035203520352035203,
  "byte_67": 0.0006600660066006601,
  "byte_79": 0.00055005500550055,
  "byte_c0": 0.00055005500550055,
  "byte_b5": 0.00044004400440044003,
  "byte_b7": 0.00055005500550055,
  "byte_8c": 0.0012101210121012102,
  "byte_af": 0.0018701870187018703,
  "byte_e6": 0.00033003300330033004,
  "byte_0e": 0.0013201320132013201,
  "byte_21": 0.00033003300330033004,
  "byte_5d": 0.0008800880088008801,
  "byte_89": 0.0009900990099009901,
  "byte_4a": 0.00033003300330033004,
  "byte_65": 0.008580858085808581,
  "byte_6d": 0.0017601760176017601,
  "byte_db": 0.0017601760176017601,
  "byte_f0": 0.00011001100110011001,
  "byte_b6": 0.00011001100110011001,
  "byte_6b": 0.0007700770077007701,
  "byte_6f": 0.004180418041804181,
  "byte_77": 0.0016501650165016502,
  "byte_6a": 0.00011001100110011001,
  "byte_58": 0.00055005500550055,
  "byte_76": 0.00044004400440044003,
  "byte_53": 0.00044004400440044003,
  "byte_22": 0.0007700770077007701,
  "byte_e4": 0.00011001100110011001,
  "byte_5c": 0.00055005500550055,
  "byte_38": 0.00022002200220022002,
  "byte_df": 0.00044004400440044003,
  "byte_7a": 0.0008800880088008801,
  "byte_ee": 0.00033003300330033004,
  "byte_1a": 0.0012101210121012102,
  "byte_c7": 0.00044004400440044003,
  "byte_bf": 0.00011001100110011001,
  "byte_c3": 0.00033003300330033004,
  "byte_25": 0.00033003300330033004,
  "byte_26": 0.00044004400440044003,
  "byte_e1": 0.00011001100110011001,
  "byte_7d": 0.00033003300330033004,
  "byte_d1": 0.00022002200220022002,
  "byte_f7": 0.00011001100110011001,
  "byte_b9": 0.00011001100110011001,
  "byte_2f": 0.00011001100110011001,
  "byte_be": 0.00033003300330033004,
  "byte_d6": 0.00011001100110011001,
  "byte_98": 0.00011001100110011001,
  "byte_e7": 0.00022002200220022002,
  "byte_ce": 0.00022002200220022002,
  "byte_f4": 0.00011001100110011001,
  "num_nodes": 467,
  "num_edges": 32,
  "avg_degree": 0.13704496788008566,
  "density": 0.0001470439569528816,
  "connected_components": 442,
  "avg_clustering": 0.00356887937187723,
  "timeline_sequence": [],
  "sourcecode": "/**\n *Submitted for verification at BscScan.com on 2022-03-14\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.9;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return payable(msg.sender);\n    }\n}\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\ncontract Ownable is Context {\n    address public _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n/**\n * @dev Interface of the BEP20 standard as defined in the EIP.\n */\ninterface IBEP20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\n/**\n * TiFiToken = The integrated Finance Token\n * A new type of contract that designed and implemented by TiFi Community\n */\ncontract TiFiToken is IBEP20, Context, Ownable {\n    struct Values {\n        uint256 rSendAmount;\n        uint256 rReceiveAmount;\n        uint256 rRflx;\n        uint256 rBurn;\n        uint256 tSendAmount;\n        uint256 tReceiveAmount;\n        uint256 tRflx;\n        uint256 tReward;\n        uint256 tBurn;\n        uint256 tCmty;\n    }\n    event ApplyReward(address indexed account, uint256 reward);\n    event SetCommunityAccount(address indexed account);\n    event SetDBank(address indexed account);\n    event UpdatePairs(address indexed account, bool enable);\n    mapping(address => uint256) private _rOwned;\n    mapping(address => uint256) private _tOwned;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    mapping(address => bool) private _noFee;\n    mapping(address => bool) private _pairs;\n    address[] private _pairList;\n\n    string private constant _NAME = \"TiFi Token\";\n    string private constant _SYMBOL = \"TIFI\";\n    uint256 private constant _DECIMALS = 18;\n    address public constant ZERO_ADDR = address(0);\n    address public CMTY_ADDR; // Community Address\n    address public BANK_ADDR; // DBank Address\n\n    uint256 private constant _MAX = ~uint256(0);\n    uint256 private _DECIMALFACTOR = 10**_DECIMALS;\n    uint256 private constant _GRANULARITY = 10000;\n\n    uint256 private _tTotal = (10**15) * _DECIMALFACTOR; // Total supply: 1 Quadrillion\n    uint256 private _rTotal = _MAX - (_MAX % _tTotal);\n    uint256 private _rtRate = _rTotal / _tTotal;\n\n    uint256 private _tRflxTotal;\n    uint256 private _tBurnTotal;\n\n    uint256 public SEND_REWARD = 100; // 1%\n    uint256 public RECV_CHARGE = 200; // 2%\n    uint256 public BUY_RATE = 100; // 1%\n    uint256 public SELL_RATE = 200; // 2%\n    uint256 public RFLX_RATE = 6000; // 60% of (charge - reward)\n    uint256 public BURN_RATE = 2000; // 20% of (charge - reward)\n    uint256 public CMTY_RATE = 2000; // 20% of (charge - reward)\n\n    constructor() payable {\n        _owner = _msgSender();\n        CMTY_ADDR = _owner;\n        BANK_ADDR = _owner;\n        _rOwned[_owner] = _rTotal;\n        _noFee[_owner] = true;\n        _noFee[ZERO_ADDR] = true;\n        _pairs[ZERO_ADDR] = true;\n\n        _msgSender().transfer(msg.value);\n        emit Transfer(ZERO_ADDR, _msgSender(), _tTotal);\n    }\n\n    function name() public pure returns (string memory) {\n        return _NAME;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _SYMBOL;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return uint8(_DECIMALS);\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _tTotal;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        if (_pairs[account] || account == ZERO_ADDR) return _tOwned[account];\n        return tokenFromReflection(_rOwned[account]);\n    }\n\n    function transfer(address recipient, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender)\n        public\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        uint256 allow = _allowances[sender][_msgSender()];\n        require(allow >= amount, \"Transfer amount exceeds allowance\");\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), allow - amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        _approve(\n            _msgSender(),\n            spender,\n            _allowances[_msgSender()][spender] + addedValue\n        );\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue)\n        public\n        virtual\n        returns (bool)\n    {\n        uint256 allow = _allowances[_msgSender()][spender];\n        require(allow >= subtractedValue, \"Decreased allowance below zero\");\n        _approve(_msgSender(), spender, allow - subtractedValue);\n        return true;\n    }\n\n    function hasFee(address account) public view returns (bool) {\n        return !_noFee[account];\n    }\n\n    function totalRflx() public view returns (uint256) {\n        return _tRflxTotal;\n    }\n\n    function totalBurn() public view returns (uint256) {\n        return _tBurnTotal;\n    }\n\n    function reflectionFromToken(uint256 tAmount)\n        public\n        view\n        returns (uint256)\n    {\n        require(tAmount <= _tTotal, \"Amount must be less than supply\");\n        return tAmount * _rtRate;\n    }\n\n    function tokenFromReflection(uint256 rAmount)\n        public\n        view\n        returns (uint256)\n    {\n        require(rAmount <= _rTotal, \"Amount must be less than reflections\");\n        return rAmount / _rtRate;\n    }\n\n    function setCommunityAccount(address account) external onlyOwner {\n        require(CMTY_ADDR != account, \"The same address is already set\");\n        if (\n            BANK_ADDR == owner() ||\n            BANK_ADDR == ZERO_ADDR ||\n            BANK_ADDR == CMTY_ADDR\n        ) {\n            // If bank address is not set yet, set to community address.\n            // If bank address is community address, the bank address is set as well (Bank/Community Affiliation).\n            BANK_ADDR = account;\n        }\n        if (CMTY_ADDR != owner() && CMTY_ADDR != BANK_ADDR) {\n            _noFee[CMTY_ADDR] = false; // Re-enable fee to original community address\n        }\n        CMTY_ADDR = account;\n        _noFee[account] = true; // Disable fee for new community address\n        emit SetCommunityAccount(account);\n    }\n\n    function setDBank(address account) external onlyOwner {\n        // Set DBank's smart contract address\n        require(BANK_ADDR != account, \"The same address is already set\");\n        _noFee[BANK_ADDR] = false;\n        BANK_ADDR = account;\n        _noFee[BANK_ADDR] = true;\n        emit SetDBank(account);\n    }\n\n    function setFee(address account, bool enable) external onlyOwner {\n        require(_noFee[account] == enable, \"Already set\");\n        _noFee[account] = (!enable);\n    }\n\n    function setPairAddress(address account) external onlyOwner {\n        require(\n            !_pairs[account] && account != ZERO_ADDR,\n            \"Cannot set pair address\"\n        );\n        if (_rOwned[account] > 0) {\n            _tOwned[account] = tokenFromReflection(_rOwned[account]);\n        }\n        _pairs[account] = true;\n        _pairList.push(account);\n        _updateRTRate();\n        emit UpdatePairs(account, true);\n    }\n\n    function unsetPairAddress(address account) external onlyOwner {\n        require(\n            _pairs[account] && account != ZERO_ADDR,\n            \"Cannot remove pair address\"\n        );\n        for (uint256 i = 0; i < _pairList.length; i++) {\n            if (_pairList[i] == account) {\n                _pairList[i] = _pairList[_pairList.length - 1];\n                _tOwned[account] = 0;\n                _pairs[account] = false;\n                _pairList.pop();\n                _updateRTRate();\n                break;\n            }\n        }\n        emit UpdatePairs(account, false);\n    }\n\n    function getRewardCharge(address sender, address recipient)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        require(\n            _allowances[sender][_msgSender()] > 0 ||\n                sender == _msgSender() ||\n                recipient == _msgSender(),\n            \"Ineligible to view reward or charge\"\n        );\n        if (_noFee[sender] || _noFee[recipient]) {\n            return (0, 0);\n        }\n        if (_pairs[sender]) {\n            return (0, BUY_RATE);\n        }\n        if (_pairs[recipient]) {\n            return (0, SELL_RATE);\n        }\n        return (SEND_REWARD, RECV_CHARGE);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) private {\n        require(owner != address(0), \"Approve from the zero address\");\n        require(spender != address(0), \"Approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) private returns (bool) {\n        require(\n            sender != ZERO_ADDR && recipient != ZERO_ADDR,\n            \"Transfer from/to the zero address\"\n        );\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n        require(balanceOf(sender) >= amount, \"Transfer amount exceeds balance\");\n\n        (uint256 reward, uint256 charge) = getRewardCharge(sender, recipient);\n        Values memory v = _getValues(amount, reward, charge);\n        _rOwned[sender] -= v.rSendAmount;\n        _rOwned[recipient] += v.rReceiveAmount;\n        if (_pairs[sender]) _tOwned[sender] -= v.tSendAmount;\n        if (_pairs[recipient]) _tOwned[recipient] += v.tReceiveAmount;\n        _reflectFee(v, sender);\n        _updateRTRate();\n        emit Transfer(sender, recipient, v.tReceiveAmount);\n        emit ApplyReward(recipient, v.tReward);\n        return true;\n    }\n\n    function _reflectFee(Values memory v, address sender) private {\n        _sendToBank(v.tCmty, sender);\n        _rTotal -= (v.rRflx + v.rBurn);\n        _tRflxTotal += v.tRflx;\n        _tBurnTotal += v.tBurn;\n        _tTotal -= v.tBurn;\n        emit Transfer(address(this), address(0), v.tBurn);\n    }\n\n    function _getValues(\n        uint256 tAmount,\n        uint256 rewardRate,\n        uint256 chargeRate\n    ) private view returns (Values memory) {\n        (\n            uint256 tCharge,\n            uint256 tReward,\n            uint256 tRflx,\n            uint256 tBurn,\n            uint256 tCmty\n        ) = _getTBasics(tAmount, rewardRate, chargeRate);\n        uint256 tSendAmount = tAmount - tReward;\n        uint256 tReceiveAmount = tAmount - tCharge;\n        (uint256 rSendAmount, uint256 rRflx) = _getRBasics(tSendAmount, tRflx);\n        uint256 rReceiveAmount = _getRReceiveAmount(\n            rSendAmount,\n            rRflx,\n            tBurn,\n            tCmty\n        );\n        uint256 rBurn = tBurn * _rtRate;\n        return\n            Values(\n                rSendAmount,\n                rReceiveAmount,\n                rRflx,\n                rBurn,\n                tSendAmount,\n                tReceiveAmount,\n                tRflx,\n                tReward,\n                tBurn,\n                tCmty\n            );\n    }\n\n    function _getTBasics(\n        uint256 tAmount,\n        uint256 rewardRate,\n        uint256 chargeRate\n    )\n        private\n        view\n        returns (\n            uint256,\n            uint256,\n            uint256,\n            uint256,\n            uint256\n        )\n    {\n        uint256 tCharge = (tAmount * chargeRate) / _GRANULARITY;\n        uint256 tReward = (tAmount * rewardRate) / _GRANULARITY;\n        uint256 income = tCharge - tReward;\n        uint256 tRflx = (income * RFLX_RATE) / _GRANULARITY;\n        uint256 tBurn = (income * BURN_RATE) / _GRANULARITY;\n        uint256 tCmty = (income * CMTY_RATE) / _GRANULARITY;\n        return (tCharge, tReward, tRflx, tBurn, tCmty);\n    }\n\n    function _getRBasics(uint256 tSendAmount, uint256 tRflx)\n        private\n        view\n        returns (uint256, uint256)\n    {\n        return (tSendAmount * _rtRate, tRflx * _rtRate);\n    }\n\n    function _getRReceiveAmount(\n        uint256 rSendAmount,\n        uint256 rRflx,\n        uint256 tBurn,\n        uint256 tCmty\n    ) private view returns (uint256) {\n        return rSendAmount - rRflx - tBurn * _rtRate - tCmty * _rtRate;\n    }\n\n    function _updateRTRate() private {\n        uint256 rSupply = _rTotal;\n        uint256 tSupply = _tTotal;\n        for (uint256 i = 0; i < _pairList.length; i++) {\n            if (\n                _rOwned[_pairList[i]] > rSupply ||\n                _tOwned[_pairList[i]] > tSupply\n            ) {\n                _rtRate = _rTotal / _tTotal;\n                return;\n            }\n            rSupply -= _rOwned[_pairList[i]];\n            tSupply -= _tOwned[_pairList[i]];\n        }\n        _rtRate = (rSupply < _rTotal / _tTotal)\n            ? _rTotal / _tTotal\n            : rSupply / tSupply;\n    }\n\n    function _sendToBank(uint256 tCmty, address sender) private {\n        _rOwned[BANK_ADDR] += tCmty * _rtRate;\n        if (_pairs[BANK_ADDR]) _tOwned[BANK_ADDR] += tCmty;\n        emit Transfer(sender, BANK_ADDR, tCmty);\n    }\n\n    function _burn(address account, uint256 amount) internal {\n        require(account != ZERO_ADDR, \"Burn from the zero address\");\n        require(balanceOf(account) >= amount, \"Burn amount exceeds balance\");\n        _rOwned[account] -= amount * _rtRate;\n        if (_pairs[account]) _tOwned[account] -= amount;\n        uint256 rBurn = amount * _rtRate;\n        _rTotal -= rBurn;\n        _tBurnTotal += amount;\n        _tTotal -= amount;\n        _updateRTRate();\n        emit Transfer(account, ZERO_ADDR, amount);\n    }\n\n    function burn(uint256 amount) external {\n        _burn(_msgSender(), amount);\n    }\n}"
}