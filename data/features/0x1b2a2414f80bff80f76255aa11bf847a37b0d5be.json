{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP1 CALLDATALOAD DUP1 DUP3 ADD CALLDATALOAD DUP4 DUP2 MUL DUP1 DUP7 ADD DUP6 ADD SWAP1 SWAP7 MSTORE DUP1 DUP6 MSTORE PUSH2 SWAP6 CALLDATASIZE SWAP6 SWAP4 SWAP5 PUSH1 SWAP5 SWAP4 DUP6 ADD SWAP3 SWAP2 DUP3 SWAP2 DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP POP PUSH1 DUP1 MLOAD DUP8 CALLDATALOAD DUP10 ADD DUP1 CALLDATALOAD PUSH1 DUP2 DUP2 MUL DUP5 DUP2 ADD DUP3 ADD SWAP1 SWAP6 MSTORE DUP2 DUP5 MSTORE SWAP9 SWAP12 SWAP11 SWAP10 DUP10 ADD SWAP9 SWAP3 SWAP8 POP SWAP1 DUP3 ADD SWAP6 POP SWAP4 POP DUP4 SWAP3 POP DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP POP POP SWAP3 CALLDATALOAD PUSH1 AND SWAP4 POP PUSH2 SWAP3 POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 GASPRICE PUSH1 MLOAD DUP3 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND ISZERO ISZERO SWAP2 POP PUSH2 SWAP1 POP JUMPI PUSH1 SLOAD PUSH2 SWAP1 CALLVALUE SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP5 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST SWAP6 POP DUP6 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 DUP8 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP4 POP PUSH2 CALLVALUE DUP6 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP8 SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP3 POP PUSH2 CALLVALUE DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP5 POP JUMPDEST PUSH2 PUSH2 CALLVALUE PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP2 POP PUSH2 CALLVALUE DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD SWAP2 SWAP3 POP PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 DUP4 ISZERO PUSH2 MUL SWAP1 DUP5 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH2 CALLER DUP7 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP2 ISZERO DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 PUSH1 DUP2 DUP1 DUP1 DUP1 DUP1 DUP1 JUMPDEST PUSH1 DUP3 PUSH1 AND LT ISZERO PUSH2 JUMPI PUSH1 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI JUMPDEST POP POP POP POP POP SWAP7 POP DUP7 MLOAD SWAP6 POP DUP7 PUSH1 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD SWAP3 POP DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 ADDRESS PUSH1 MLOAD DUP3 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP4 POP PUSH1 SWAP1 POP JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 JUMPI DUP7 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD SWAP10 POP DUP7 DUP2 PUSH1 ADD DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD SWAP9 POP DUP10 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP7 DUP2 AND PUSH1 DUP4 ADD MSTORE DUP13 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD DUP9 SWAP1 MSTORE SWAP2 MLOAD SWAP3 SWAP11 POP SWAP1 DUP11 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP4 POP DUP9 SWAP3 POP PUSH1 ADD PUSH2 JUMP JUMPDEST SWAP4 DUP4 ADD SWAP4 PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH2 JUMP JUMPDEST POP SWAP3 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 DUP2 MSTORE DUP4 DUP3 SHA3 CALLER SWAP1 SWAP4 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP7 AND DUP2 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP9 AND SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 NOT PUSH2 PUSH1 DUP8 AND ISZERO MUL ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV SWAP3 DUP4 ADD DUP5 SWAP1 DIV DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP2 MSTORE DUP2 DUP2 MSTORE SWAP2 SWAP1 DUP3 DUP3 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 DUP1 MLOAD SWAP3 SWAP1 SWAP2 AND DUP3 MSTORE MLOAD PUSH32 SWAP2 PUSH1 SWAP1 DUP3 SWAP1 SUB ADD SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP5 DUP6 AND PUSH20 NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD SWAP4 DUP6 AND SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 ADDRESS PUSH1 MLOAD DUP3 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD DUP5 SWAP1 MSTORE SWAP2 MLOAD SWAP3 SWAP4 POP SWAP1 DUP6 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH21 MUL PUSH21 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 NOT PUSH2 PUSH1 DUP8 AND ISZERO MUL ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV DUP1 DUP6 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO PUSH2 JUMPI PUSH2 CALLER DUP4 PUSH2 JUMP JUMPDEST PUSH2 CALLER DUP4 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 CALLER SWAP1 SWAP4 AND SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SWAP2 SHA3 DUP5 MLOAD PUSH2 SWAP3 DUP7 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SWAP2 SHA3 DUP4 MLOAD PUSH2 SWAP3 DUP6 ADD SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND SWAP2 ADDRESS SWAP1 SWAP2 AND BALANCE DUP1 ISZERO PUSH2 MUL SWAP2 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH1 SWAP1 POP JUMPDEST PUSH1 DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI PUSH1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP1 SWAP2 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP6 POP DUP6 SWAP4 PUSH4 SWAP4 PUSH1 DUP1 DUP6 ADD SWAP5 SWAP2 SWAP4 SWAP3 SWAP2 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP4 POP PUSH2 DUP5 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD SWAP4 SWAP8 POP SWAP1 DUP6 AND SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP5 ADD SWAP4 PUSH1 SWAP4 SWAP3 SWAP1 DUP4 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP3 ISZERO ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST POP DUP2 DUP2 MUL DUP2 DUP4 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP2 DUP4 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP4 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP PUSH1 SWAP1 POP JUMPDEST PUSH1 DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS DUP2 DUP2 AND PUSH1 DUP6 ADD MSTORE PUSH1 DUP5 ADD DUP7 SWAP1 MSTORE PUSH1 DUP5 ADD DUP7 SWAP1 MSTORE PUSH1 DUP5 ADD DUP7 SWAP1 MSTORE PUSH1 DUP5 ADD DUP7 SWAP1 MSTORE PUSH2 DUP5 ADD DUP7 SWAP1 MSTORE PUSH2 PUSH1 DUP6 ADD SWAP1 DUP2 MSTORE DUP6 SLOAD PUSH2 DUP7 ADD DUP2 SWAP1 MSTORE SWAP3 SWAP1 SWAP8 AND SWAP7 PUSH4 SWAP7 DUP11 SWAP7 SWAP6 DUP8 SWAP6 SWAP5 SWAP2 SWAP3 DUP4 SWAP3 DUP4 SWAP3 DUP4 SWAP3 DUP4 SWAP3 SWAP1 SWAP2 DUP3 SWAP2 PUSH2 SWAP1 SWAP2 ADD SWAP1 DUP13 SWAP1 DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI JUMPDEST POP POP SWAP11 POP POP POP POP POP POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND SWAP2 PUSH1 SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH2 PUSH3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP3 POP DUP3 ISZERO DUP1 PUSH2 JUMPI POP DUP3 DUP8 LT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP8 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP DUP2 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 JUMPDEST PUSH1 DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI PUSH1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP1 SWAP2 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 DUP4 ADD MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP8 POP DUP8 SWAP4 PUSH4 SWAP4 PUSH1 DUP1 DUP6 ADD SWAP5 SWAP2 SWAP4 SWAP3 SWAP2 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP6 POP PUSH2 DUP7 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP6 POP PUSH2 DUP7 PUSH3 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP6 POP PUSH2 DUP7 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP5 POP PUSH2 DUP6 PUSH2 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP5 POP PUSH2 DUP7 DUP7 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD DUP10 SWAP1 MSTORE SWAP1 MLOAD SWAP3 SWAP9 POP SWAP1 DUP7 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP11 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD DUP10 SWAP1 MSTORE SWAP2 MLOAD SWAP2 DUP7 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 JUMPI SWAP2 PUSH1 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 SWAP2 POP PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI DUP1 SLOAD PUSH20 NOT AND DUP2 SSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST SWAP1 JUMP STOP UNKNOWN_0xdd CALLCODE MSTORE UNKNOWN_0xad SHL UNKNOWN_0xe2 UNKNOWN_0xc8 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef LOG1 PUSH6 SHA3 UNKNOWN_0xc4 UNKNOWN_0x4a UNKNOWN_0xc8 UNKNOWN_0xbb SUB CALLER UNKNOWN_0xdd UNKNOWN_0x4b DUP13 UNKNOWN_0x2e BALANCE PUSH13 UNKNOWN_0x27 DIV UNKNOWN_0xe9 DELEGATECALL UNKNOWN_0xc2 UNKNOWN_0xbc UNKNOWN_0xfb STOP UNKNOWN_0x29",
  "opcode_entropy": 4.970490168974092,
  "opcode_count": 4505,
  "unique_opcodes": 99,
  "byte_entropy": 5.781213744287578,
  "byte_60": 0.10855007008254167,
  "byte_80": 0.0437626537922442,
  "byte_40": 0.011368945647095468,
  "byte_52": 0.02164771842392151,
  "byte_04": 0.008409904999221306,
  "byte_36": 0.0003114779629341224,
  "byte_10": 0.005606603332814203,
  "byte_61": 0.043606914810777136,
  "byte_01": 0.043139697866375955,
  "byte_0e": 0.0017131287961376733,
  "byte_57": 0.0208690235165862,
  "byte_63": 0.0104345117582931,
  "byte_ff": 0.03177075221928049,
  "byte_e0": 0.0014016508332035508,
  "byte_02": 0.020713284535119142,
  "byte_0a": 0.013549291387634325,
  "byte_00": 0.054820121476405546,
  "byte_35": 0.00389347453667653,
  "byte_16": 0.027565799719669833,
  "byte_06": 0.003114779629341224,
  "byte_fd": 0.01168042361002959,
  "byte_de": 0.0003114779629341224,
  "byte_03": 0.018844416757514405,
  "byte_81": 0.031926491200747545,
  "byte_14": 0.007163993147484816,
  "byte_18": 0.003114779629341224,
  "byte_09": 0.0009344338888023672,
  "byte_5e": 0.0001557389814670612,
  "byte_a7": 0.0003114779629341224,
  "byte_b3": 0.0006229559258682448,
  "byte_a2": 0.000778694907335306,
  "byte_0d": 0.0012459118517364897,
  "byte_dd": 0.0009344338888023672,
  "byte_da": 0.0012459118517364897,
  "byte_20": 0.01977885064631677,
  "byte_22": 0.0009344338888023672,
  "byte_6e": 0.0001557389814670612,
  "byte_17": 0.002336084722005918,
  "byte_23": 0.000778694907335306,
  "byte_b8": 0.0006229559258682448,
  "byte_72": 0.0006229559258682448,
  "byte_2c": 0.0001557389814670612,
  "byte_4e": 0.0003114779629341224,
  "byte_2e": 0.0004672169444011836,
  "byte_31": 0.001557389814670612,
  "byte_3c": 0.0001557389814670612,
  "byte_e5": 0.0009344338888023672,
  "byte_67": 0.0006229559258682448,
  "byte_55": 0.003114779629341224,
  "byte_54": 0.009344338888023673,
  "byte_4d": 0.0006229559258682448,
  "byte_50": 0.04049213518143591,
  "byte_5b": 0.03270518610808285,
  "byte_e7": 0.0001557389814670612,
  "byte_cc": 0.0001557389814670612,
  "byte_95": 0.0024918237034729793,
  "byte_46": 0.0003114779629341224,
  "byte_85": 0.005450864351347142,
  "byte_6f": 0.0001557389814670612,
  "byte_b6": 0.0003114779629341224,
  "byte_69": 0.0009344338888023672,
  "byte_ea": 0.000778694907335306,
  "byte_71": 0.0006229559258682448,
  "byte_e3": 0.000778694907335306,
  "byte_a0": 0.013393552406167264,
  "byte_8a": 0.0006229559258682448,
  "byte_fb": 0.0004672169444011836,
  "byte_70": 0.0010901728702694285,
  "byte_82": 0.017909982868712038,
  "byte_88": 0.0017131287961376733,
  "byte_84": 0.0059180812957483255,
  "byte_cd": 0.0004672169444011836,
  "byte_7c": 0.0003114779629341224,
  "byte_43": 0.0004672169444011836,
  "byte_d8": 0.0001557389814670612,
  "byte_9b": 0.0006229559258682448,
  "byte_41": 0.0001557389814670612,
  "byte_5d": 0.0004672169444011836,
  "byte_a6": 0.0003114779629341224,
  "byte_f2": 0.0004672169444011836,
  "byte_ae": 0.0004672169444011836,
  "byte_3a": 0.0003114779629341224,
  "byte_a9": 0.001557389814670612,
  "byte_05": 0.004672169444011836,
  "byte_9c": 0.0014016508332035508,
  "byte_bb": 0.0017131287961376733,
  "byte_aa": 0.0003114779629341224,
  "byte_39": 0.0012459118517364897,
  "byte_f8": 0.000778694907335306,
  "byte_96": 0.0012459118517364897,
  "byte_ca": 0.0012459118517364897,
  "byte_fe": 0.0018688677776047345,
  "byte_a4": 0.0006229559258682448,
  "byte_29": 0.0004672169444011836,
  "byte_62": 0.0014016508332035508,
  "byte_ed": 0.0001557389814670612,
  "byte_3e": 0.0026475626849400405,
  "byte_5f": 0.0003114779629341224,
  "byte_4b": 0.000778694907335306,
  "byte_56": 0.015106681202304937,
  "byte_65": 0.0004672169444011836,
  "byte_51": 0.015106681202304937,
  "byte_ab": 0.0001557389814670612,
  "byte_34": 0.004360691481077714,
  "byte_15": 0.02445102009032861,
  "byte_24": 0.0028033016664071016,
  "byte_2d": 0.0004672169444011836,
  "byte_83": 0.01292633546176608,
  "byte_91": 0.02040180657218502,
  "byte_92": 0.01027877277682604,
  "byte_90": 0.04158230805170534,
  "byte_4f": 0.0006229559258682448,
  "byte_1f": 0.001557389814670612,
  "byte_94": 0.004204952499610653,
  "byte_19": 0.002180345740538857,
  "byte_f3": 0.0009344338888023672,
  "byte_c6": 0.0009344338888023672,
  "byte_e2": 0.0003114779629341224,
  "byte_e6": 0.0001557389814670612,
  "byte_ef": 0.0014016508332035508,
  "byte_07": 0.002180345740538857,
  "byte_86": 0.00513938638841302,
  "byte_8c": 0.0010901728702694285,
  "byte_44": 0.0017131287961376733,
  "byte_33": 0.003114779629341224,
  "byte_4c": 0.0004672169444011836,
  "byte_0b": 0.0009344338888023672,
  "byte_6a": 0.0003114779629341224,
  "byte_5a": 0.002180345740538857,
  "byte_a1": 0.000778694907335306,
  "byte_b5": 0.0001557389814670612,
  "byte_c2": 0.0004672169444011836,
  "byte_0c": 0.0009344338888023672,
  "byte_d3": 0.0003114779629341224,
  "byte_30": 0.002024606759071796,
  "byte_8b": 0.0014016508332035508,
  "byte_7e": 0.0001557389814670612,
  "byte_93": 0.006696776203083632,
  "byte_37": 0.0004672169444011836,
  "byte_87": 0.0034262575922753466,
  "byte_89": 0.0012459118517364897,
  "byte_98": 0.0009344338888023672,
  "byte_9a": 0.0009344338888023672,
  "byte_99": 0.0004672169444011836,
  "byte_97": 0.000778694907335306,
  "byte_0f": 0.0014016508332035508,
  "byte_4a": 0.0006229559258682448,
  "byte_12": 0.005295125369880081,
  "byte_7a": 0.0006229559258682448,
  "byte_53": 0.0001557389814670612,
  "byte_6b": 0.0003114779629341224,
  "byte_3b": 0.0018688677776047345,
  "byte_f1": 0.0026475626849400405,
  "byte_26": 0.0006229559258682448,
  "byte_3d": 0.006073820277215387,
  "byte_74": 0.0006229559258682448,
  "byte_1c": 0.000778694907335306,
  "byte_64": 0.0006229559258682448,
  "byte_73": 0.0014016508332035508,
  "byte_11": 0.002336084722005918,
  "byte_e8": 0.0003114779629341224,
  "byte_e1": 0.0004672169444011836,
  "byte_1b": 0.000778694907335306,
  "byte_08": 0.0026475626849400405,
  "byte_fc": 0.000778694907335306,
  "byte_38": 0.0001557389814670612,
  "byte_42": 0.0003114779629341224,
  "byte_b2": 0.0003114779629341224,
  "byte_2b": 0.0003114779629341224,
  "byte_1d": 0.0001557389814670612,
  "byte_af": 0.0004672169444011836,
  "byte_bd": 0.0003114779629341224,
  "byte_7f": 0.0014016508332035508,
  "byte_eb": 0.0001557389814670612,
  "byte_ec": 0.0001557389814670612,
  "byte_7d": 0.0003114779629341224,
  "byte_d1": 0.0001557389814670612,
  "byte_1e": 0.000778694907335306,
  "byte_c0": 0.0001557389814670612,
  "byte_f7": 0.0004672169444011836,
  "byte_c8": 0.0006229559258682448,
  "byte_c7": 0.0001557389814670612,
  "byte_c3": 0.0001557389814670612,
  "byte_b9": 0.0003114779629341224,
  "byte_25": 0.0003114779629341224,
  "byte_a3": 0.000778694907335306,
  "byte_1a": 0.0006229559258682448,
  "byte_9d": 0.0003114779629341224,
  "byte_d2": 0.0001557389814670612,
  "byte_8d": 0.000778694907335306,
  "byte_a5": 0.0003114779629341224,
  "byte_cb": 0.0001557389814670612,
  "byte_dc": 0.0001557389814670612,
  "byte_f0": 0.0003114779629341224,
  "byte_bc": 0.0004672169444011836,
  "byte_d0": 0.0001557389814670612,
  "byte_27": 0.0003114779629341224,
  "byte_9e": 0.0001557389814670612,
  "byte_d4": 0.0001557389814670612,
  "byte_78": 0.0001557389814670612,
  "byte_ce": 0.0003114779629341224,
  "byte_e4": 0.0004672169444011836,
  "byte_32": 0.0001557389814670612,
  "byte_2a": 0.0001557389814670612,
  "byte_f9": 0.0004672169444011836,
  "byte_68": 0.0003114779629341224,
  "byte_49": 0.0001557389814670612,
  "byte_a8": 0.0003114779629341224,
  "byte_ac": 0.0003114779629341224,
  "byte_c4": 0.0004672169444011836,
  "byte_13": 0.0006229559258682448,
  "byte_6d": 0.0003114779629341224,
  "byte_9f": 0.0001557389814670612,
  "byte_21": 0.0001557389814670612,
  "byte_48": 0.0001557389814670612,
  "byte_b7": 0.0001557389814670612,
  "byte_d6": 0.0001557389814670612,
  "byte_7b": 0.0001557389814670612,
  "byte_8f": 0.0001557389814670612,
  "byte_f5": 0.0004672169444011836,
  "byte_77": 0.0001557389814670612,
  "byte_ad": 0.0001557389814670612,
  "byte_b0": 0.0001557389814670612,
  "byte_28": 0.0003114779629341224,
  "byte_58": 0.0001557389814670612,
  "byte_6c": 0.0001557389814670612,
  "byte_d5": 0.0001557389814670612,
  "byte_e9": 0.0003114779629341224,
  "byte_c1": 0.0001557389814670612,
  "byte_be": 0.0001557389814670612,
  "byte_f4": 0.0001557389814670612,
  "num_nodes": 3,
  "num_edges": 3,
  "avg_degree": 2.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 17,
  "event_nums": 3,
  "creation_block": 5604267,
  "creation_timestamp": 1526181130,
  "life_time": 168364.0,
  "duration_seconds": 2575330.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 3,
  "num_sellers": 2,
  "num_creator_transfers": 9,
  "buy_amt": 1e+17,
  "sell_amt": 1e+17,
  "avg_value": 1.1111111111111112e+16,
  "txn_per_block": 0.00010097110444569834,
  "avg_gas_limit": 2343233.529411765,
  "std_gas_limit": 2151255.6111700446,
  "avg_gas_used": 517321.17647058825,
  "std_gas_used": 1417440.8210358736,
  "avg_gas_price": 1235294117.764706,
  "std_gas_price": 1351661799.2519777,
  "admined_num": 1,
  "transfer_num": 2,
  "claimtokens_num": 6,
  "timeline_sequence": [
    [
      5604267,
      1526181130,
      58,
      54,
      0,
      5184073,
      3000000000,
      0,
      1,
      7493341,
      5184073,
      17516778
    ],
    [
      5604312,
      1526181793,
      59,
      37,
      100000000000000000,
      5500000,
      3000000000,
      0,
      1,
      4986443,
      3438807,
      17516733
    ],
    [
      5772623,
      1528756327,
      84,
      89,
      0,
      44100,
      2000000000,
      0,
      1,
      6615939,
      28957,
      17348422
    ],
    [
      5772625,
      1528756367,
      85,
      125,
      0,
      43730,
      2000000001,
      0,
      1,
      7885369,
      28592,
      17348420
    ],
    [
      5772625,
      1528756367,
      86,
      126,
      0,
      43219,
      2000000001,
      0,
      1,
      7913455,
      28086,
      17348420
    ],
    [
      5772627,
      1528756388,
      87,
      44,
      0,
      44547,
      3000000000,
      0,
      1,
      3859482,
      29396,
      17348418
    ],
    [
      5772630,
      1528756445,
      88,
      55,
      0,
      43780,
      3000000000,
      0,
      1,
      3593868,
      28640,
      17348415
    ],
    [
      5772631,
      1528756460,
      89,
      75,
      0,
      43037,
      3000000000,
      0,
      1,
      6353559,
      27909,
      17348414
    ],
    [
      5604312,
      1526181793,
      0,
      0,
      500000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5604312,
      1526181793,
      0,
      0,
      12437500000000000,
      5371042,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5604312,
      1526181793,
      0,
      0,
      12437500000000000,
      4862917,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5604312,
      1526181793,
      0,
      0,
      12437500000000000,
      4362116,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5604312,
      1526181793,
      0,
      0,
      12437500000000000,
      3859565,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5604312,
      1526181793,
      0,
      0,
      12437500000000000,
      3359519,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5604312,
      1526181793,
      0,
      0,
      12437500000000000,
      2860876,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5604312,
      1526181793,
      0,
      0,
      12437500000000000,
      2356912,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5604312,
      1526181793,
      0,
      0,
      12437500000000000,
      1853237,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity 0.4.23;\n///////////////////////////////\n//By f.antonio.akel@gmail.com//\n///////////////////////////////\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    if (a == 0) {\n      return 0;\n    }\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/*\n    Owned contract interface\n*/\ncontract IOwned {\n    // this function isn't abstract since the compiler emits automatically generated getter functions as external\n    function owner() public view returns (address) {}\n\n    function transferOwnership(address _newOwner) public;\n    function acceptOwnership() public;\n}\n\n/*\n    Bancor Converter interface\n*/\ncontract IBancorConverter{\n\n    function getReturn(address _fromToken, address _toToken, uint256 _amount) public view returns (uint256);\n\tfunction quickConvert(address[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\n\n}\n/*\n    Bancor Quick Converter interface\n*/\ncontract IBancorQuickConverter {\n    function convert(IERC20Token[] _path, uint256 _amount, uint256 _minReturn) public payable returns (uint256);\n    function convertFor(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for) public payable returns (uint256);\n    function convertForPrioritized(IERC20Token[] _path, uint256 _amount, uint256 _minReturn, address _for, uint256 _block, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s) public payable returns (uint256);\n}\n\n/*\n    Bancor Gas tools interface\n*/\ncontract IBancorGasPriceLimit {\n    function gasPrice() public view returns (uint256) {}\n    function validateGasPrice(uint256) public view;\n}\n\n/*\n    EIP228 Token Converter interface\n*/\ncontract ITokenConverter {\n    function convertibleTokenCount() public view returns (uint16);\n    function convertibleToken(uint16 _tokenIndex) public view returns (address);\n    function getReturn(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount) public view returns (uint256);\n    function convert(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n    // deprecated, backward compatibility\n    function change(IERC20Token _fromToken, IERC20Token _toToken, uint256 _amount, uint256 _minReturn) public returns (uint256);\n}\n\n/*\n    ERC20 Standard Token interface\n*/\ncontract IERC20Token {\n    // these functions aren't abstract since the compiler emits automatically generated getter functions as external\n    function name() public view returns (string) {}\n    function symbol() public view returns (string) {}\n    function decimals() public view returns (uint8) {}\n    function totalSupply() public view returns (uint256) {}\n    function balanceOf(address _owner) public view returns (uint256) { _owner; }\n    function allowance(address _owner, address _spender) public view returns (uint256) { _owner; _spender; }\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n}\n\n/*\n    Smart Token interface\n*/\ncontract ISmartToken is IOwned, IERC20Token {\n    function disableTransfers(bool _disable) public;\n    function issue(address _to, uint256 _amount) public;\n    function destroy(address _from, uint256 _amount) public;\n}\n\n/**\n* @title Admin parameters\n* @dev Define administration parameters for this contract\n*/\ncontract admined { //This token contract is administered\n    address public admin; //Admin address is public\n\n    /**\n    * @dev Contract constructor\n    * define initial administrator\n    */\n    constructor() internal {\n        admin = msg.sender; //Set initial admin to contract creator\n        emit Admined(admin);\n    }\n\n    modifier onlyAdmin() { //A modifier to define admin-only functions\n        require(msg.sender == admin);\n        _;\n    }\n\n   /**\n    * @dev Function to set new admin address\n    * @param _newAdmin The address to transfer administration to\n    */\n    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered\n        require(_newAdmin != 0);\n        admin = _newAdmin;\n        emit TransferAdminship(admin);\n    }\n\n    event TransferAdminship(address newAdminister);\n    event Admined(address administer);\n\n}\n\n\n/**\n* @title ERC20Token\n* @notice Token definition contract\n*/\ncontract MEGA is admined,IERC20Token { //Standar definition of an ERC20Token\n    using SafeMath for uint256; //SafeMath is used for uint256 operations\n\n///////////////////////////////////////////////////////////////////////////////////////\n///\t\t\t\t\t\t\t\t\tToken Related\t\t\t\t\t\t\t\t\t///\n///////////////////////////////////////////////////////////////////////////////////////\n\n    mapping (address => uint256) balances; //A mapping of all balances per address\n    mapping (address => mapping (address => uint256)) allowed; //A mapping of all allowances\n    uint256 public totalSupply;\n    \n    /**\n    * @notice Get the balance of an _owner address.\n    * @param _owner The address to be query.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 bal) {\n        return balances[_owner];\n    }\n\n    /**\n    * @notice transfer _value tokens to address _to\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    * @return success with boolean value true if done\n    */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0)); //If you dont want that people destroy token\n        \n        if(_to == address(this)){\n        \tburnToken(msg.sender, _value);\n        \tsell(msg.sender,_value);\n        \treturn true;\n        } else {\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n\t        balances[_to] = balances[_to].add(_value);\n    \t    emit Transfer(msg.sender, _to, _value);\n        \treturn true;\n\n        }\n    }\n\n    /**\n    * @notice Transfer _value tokens from address _from to address _to using allowance msg.sender allowance on _from\n    * @param _from The address where tokens comes.\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    * @return success with boolean value true if done\n    */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0)); //If you dont want that people destroy token\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @notice Assign allowance _value to _spender address to use the msg.sender balance\n    * @param _spender The address to be allowed to spend.\n    * @param _value The amount to be allowed.\n    * @return success with boolean value true\n    */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n    \trequire((_value == 0) || (allowed[msg.sender][_spender] == 0)); //exploit mitigation\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n    * @notice Get the allowance of an specified address to use another address balance.\n    * @param _owner The address of the owner of the tokens.\n    * @param _spender The address of the allowed spender.\n    * @return remaining with the allowance value\n    */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n    * @dev Mint token to an specified address.\n    * @param _target The address of the receiver of the tokens.\n    * @param _mintedAmount amount to mint.\n    */\n    function mintToken(address _target, uint256 _mintedAmount) private {\n        balances[_target] = SafeMath.add(balances[_target], _mintedAmount);\n        totalSupply = SafeMath.add(totalSupply, _mintedAmount);\n        emit Transfer(0, this, _mintedAmount);\n        emit Transfer(this, _target, _mintedAmount);\n    }\n\n    /**\n    * @dev Burn token of an specified address.\n    * @param _target The address of the holder of the tokens.\n    * @param _burnedAmount amount to burn.\n    */\n    function burnToken(address _target, uint256 _burnedAmount) private {\n        balances[_target] = SafeMath.sub(balances[_target], _burnedAmount);\n        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);\n        emit Burned(_target, _burnedAmount);\n    }\n\n    /**\n    * @dev Log Events\n    */\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burned(address indexed _target, uint256 _value);\n\n///////////////////////////////////////////////////////////////////////////////////////\n///\t\t\t\t\t\t\t\tInvestment related\t\t\t\t\t\t\t\t\t///\n///////////////////////////////////////////////////////////////////////////////////////\n\n\t//Internal Variables\n\tIBancorConverter BancorConverter = IBancorConverter(0xc6725aE749677f21E4d8f85F41cFB6DE49b9Db29);\n\tIBancorQuickConverter Bancor = IBancorQuickConverter(0xcF1CC6eD5B653DeF7417E3fA93992c3FFe49139B);\n\tIBancorGasPriceLimit BancorGas = IBancorGasPriceLimit(0x607a5C47978e2Eb6d59C6C6f51bc0bF411f4b85a);\n\n\tIERC20Token ETHToken = IERC20Token(0xc0829421C1d260BD3cB3E0F06cfE2D52db2cE315);\n\n\tIERC20Token BNTToken = IERC20Token(0x1F573D6Fb3F13d689FF844B4cE37794d79a7FF1C);\n\n\tIERC20Token EOSRelay = IERC20Token(0x507b06c23d7Cb313194dBF6A6D80297137fb5E01);\n\tIERC20Token EOSToken = IERC20Token(0x86Fa049857E0209aa7D9e616F7eb3b3B78ECfdb0);\n\n\tIERC20Token ELFRelay = IERC20Token(0x0F2318565f1996CB1eD2F88e172135791BC1FcBf);\n\tIERC20Token ELFToken = IERC20Token(0xbf2179859fc6D5BEE9Bf9158632Dc51678a4100e);\n\n\tIERC20Token OMGRelay = IERC20Token(0x99eBD396Ce7AA095412a4Cd1A0C959D6Fd67B340);\n\tIERC20Token OMGToken = IERC20Token(0xd26114cd6EE289AccF82350c8d8487fedB8A0C07);\n\n\tIERC20Token POARelay = IERC20Token(0x564c07255AFe5050D82c8816F78dA13f2B17ac6D);\n\tIERC20Token POAToken = IERC20Token(0x6758B7d441a9739b98552B373703d8d3d14f9e62);\n\n\tIERC20Token DRGNRelay = IERC20Token(0xa7774F9386E1653645E1A08fb7Aae525B4DeDb24);\n\tIERC20Token DRGNToken = IERC20Token(0x419c4dB4B9e25d6Db2AD9691ccb832C8D9fDA05E);\n\n\tIERC20Token SRNRelay = IERC20Token(0xd2Deb679ed81238CaeF8E0c32257092cEcc8888b);\n\tIERC20Token SRNToken = IERC20Token(0x68d57c9a1C35f63E2c83eE8e49A64e9d70528D25);\n\n\tIERC20Token WAXRelay = IERC20Token(0x67563E7A0F13642068F6F999e48c690107A4571F);\n\tIERC20Token WAXToken = IERC20Token(0x39Bb259F66E1C59d5ABEF88375979b4D20D98022);\n\n\tIERC20Token POWRRelay = IERC20Token(0x168D7Bbf38E17941173a352f1352DF91a7771dF3);\n\tIERC20Token POWRToken = IERC20Token(0x595832F8FC6BF59c85C527fEC3740A1b7a361269);\n\n\tbool buyFlag = false; //False = set rate - True = auto rate\n\t//Path to exchanges\n\tmapping(uint8 => IERC20Token[]) paths;\n\tmapping(uint8 => IERC20Token[]) reversePaths;\n\n\n\t//public variables\n\taddress public feeWallet;\n\tuint256 public rate = 6850;\n\t//token related\n\tstring public name = \"MEGAINVEST v3\";\n    uint8 public decimals = 18;\n    string public symbol = \"MEG3\";\n    string public version = '3';\n\n\tconstructor(address _feeWallet) public {\n\t\tfeeWallet = _feeWallet;\n\t\tpaths[0] = [ETHToken,BNTToken,BNTToken,EOSRelay,EOSRelay,EOSRelay,EOSToken];\n    \tpaths[1] = [ETHToken,BNTToken,BNTToken,ELFRelay,ELFRelay,ELFRelay,ELFToken];\n    \tpaths[2] = [ETHToken,BNTToken,BNTToken,OMGRelay,OMGRelay,OMGRelay,OMGToken];\n    \tpaths[3] = [ETHToken,BNTToken,BNTToken,POARelay,POARelay,POARelay,POAToken];\n    \tpaths[4] = [ETHToken,BNTToken,BNTToken,DRGNRelay,DRGNRelay,DRGNRelay,DRGNToken];\n    \tpaths[5] = [ETHToken,BNTToken,BNTToken,SRNRelay,SRNRelay,SRNRelay,SRNToken];\n    \tpaths[6] = [ETHToken,BNTToken,BNTToken,WAXRelay,WAXRelay,WAXRelay,WAXToken];\n    \tpaths[7] = [ETHToken,BNTToken,BNTToken,POWRRelay,POWRRelay,POWRRelay,POWRToken];\n\n    \treversePaths[0] = [EOSToken,EOSRelay,EOSRelay,EOSRelay,BNTToken,BNTToken,ETHToken];\n    \treversePaths[1] = [ELFToken,ELFRelay,ELFRelay,ELFRelay,BNTToken,BNTToken,ETHToken];\n    \treversePaths[2] = [OMGToken,OMGRelay,OMGRelay,OMGRelay,BNTToken,BNTToken,ETHToken];\n    \treversePaths[3] = [POAToken,POARelay,POARelay,POARelay,BNTToken,BNTToken,ETHToken];\n    \treversePaths[4] = [DRGNToken,DRGNRelay,DRGNRelay,DRGNRelay,BNTToken,BNTToken,ETHToken];\n    \treversePaths[5] = [SRNToken,SRNRelay,SRNRelay,SRNRelay,BNTToken,BNTToken,ETHToken];\n    \treversePaths[6] = [WAXToken,WAXRelay,WAXRelay,WAXRelay,BNTToken,BNTToken,ETHToken];\n    \treversePaths[7] = [POWRToken,POWRRelay,POWRRelay,POWRRelay,BNTToken,BNTToken,ETHToken];\n\t}\n\n\tfunction updateBancorContracts(\n\t\tIBancorConverter _BancorConverter,\n\t\tIBancorQuickConverter _Bancor,\n\t\tIBancorGasPriceLimit _BancorGas) public onlyAdmin{\n\n\t\tBancorConverter = _BancorConverter;\n\t\tBancor = _Bancor;\n\t\tBancorGas = _BancorGas;\n\t}\n\n\tfunction updatePath(IERC20Token[] _path, IERC20Token[] _reversePath, uint8 _index) public onlyAdmin{\n\t\tpaths[_index] = _path;\n\t\treversePaths[_index] = _reversePath;\n\t}\n\n\tfunction changeBuyFlag(bool _flag) public onlyAdmin {\n\t\tbuyFlag = _flag;\n\t}\n\t\n\tfunction updateRate(uint256 _rate) public onlyAdmin {\n\t    rate = _rate;\n\t}\n\n\tfunction valueOnContract() public view returns (uint256){\n\n\t\tISmartToken smartToken;\n        IERC20Token toToken;\n        ITokenConverter converter;\n        IERC20Token[] memory _path;\n        uint256 pathLength;\n        uint256 sumUp;\n        uint256 _amount;\n        IERC20Token _fromToken;\n\n        for(uint8 j=0;j<8;j++){\n        \t_path = reversePaths[j];\n        \t// iterate over the conversion path\n\t        pathLength = _path.length;\n\t        _fromToken = _path[0];\n\t        _amount = _fromToken.balanceOf(address(this));\n\n\t        for (uint256 i = 1; i < pathLength; i += 2) {\n\t            smartToken = ISmartToken(_path[i]);\n\t            toToken = _path[i + 1];\n\t            converter = ITokenConverter(smartToken.owner());\n\n\t            // make the conversion - if it's the last one, also provide the minimum return value\n\t            _amount = converter.getReturn(_fromToken, toToken, _amount);\n\t            _fromToken = toToken;\n\t        }\n\t        \n\t        sumUp += _amount;\n        }\n\n        return sumUp;\n\n\t}\n\n\tfunction buy() public payable {\n\t    BancorGas.validateGasPrice(tx.gasprice);\n\n\t\tif(buyFlag == false){\n\t\t\ttokenBuy = msg.value.mul(rate);\n\t\t} else {\n\n\t\t\tuint256 valueStored = valueOnContract();\n\t\t\tuint256 tokenBuy;\n\n\t\t\tif(totalSupply > valueStored){\n\n\t\t\t\tuint256 tempRate = totalSupply.div(valueStored); // Must be > 0 Tok/Eth\n\t\t\t\ttokenBuy = msg.value.mul(tempRate); // Eth * Tok / Eth = Tok\n\n\t\t\t} else {\n\t\t\t\t\n\t\t\t\tuint256 tempPrice = valueStored.div(totalSupply); // Must be > 0 Eth/Tok\n\t\t\t\ttokenBuy = msg.value.div(tempPrice); // Eth / Eth / Tok = Tok\n\n\t\t\t}\n\t\t}\n\t\t\n\n\t\tuint256 ethFee = msg.value.mul(5)/1000; //5/1000 => 0.5%\n\t\tuint256 ethToInvest = msg.value.sub(ethFee);\n\n\t\tfeeWallet.transfer(ethFee);\n\t\tinvest(ethToInvest);\n\n\t\tmintToken(msg.sender,tokenBuy);\n\n\t}\n\n\tfunction invest(uint256 _amount) private {\n\t\tuint256 standarValue = _amount.div(8);\n\n\t\tfor(uint8 i=0; i<8; i++){ \n\t\t\tBancor.convertForPrioritized.value(standarValue)(paths[i],standarValue,1,address(this),0,0,0,0x0,0x0);\n\t\t}\n\n\t}\n\n\tfunction sell(address _target, uint256 _amount) private {\n\t\tuint256 tempBalance;\n\t\tuint256 tempFee;\n\t\tIERC20Token tempToken;\n\t\tuint256 dividedSupply = totalSupply.div(1e5); //ethereum is not decimals friendly\n\n\t\tif(dividedSupply == 0 || _amount < dividedSupply) revert();\n\t\t\n\t\tuint256 factor = _amount.div(dividedSupply);\n\n\t\tif( factor == 0) revert();\n\n\t\tfor(uint8 i=0; i<8; i++){ \n\t\n\t\t\ttempToken = reversePaths[i][0];\n\t\t\ttempBalance = tempToken.balanceOf(this);\n\t\t\ttempBalance = tempBalance.mul(factor);\n\t\t\ttempBalance = tempBalance.div(1e5);\n\t\t\ttempFee = tempBalance.mul(5);\n\t\t\ttempFee = tempFee.div(1000); //0.5%\n\t\t\ttempBalance = tempBalance.sub(tempFee);\n\t\t\ttempToken.transfer(feeWallet,tempFee);\n\t\t\ttempToken.transfer(_target,tempBalance);\n\n\t\t}\n\t}\n\t\n\tfunction emergency() onlyAdmin public{\n\t    uint256 tempBalance;\n\t\tuint256 tempFee;\n\t\tIERC20Token tempToken;\n\t    msg.sender.transfer(address(this).balance);\n\t    for(uint8 i=0; i<8; i++){ \n\t\n\t\t\ttempToken = reversePaths[i][0];\n\t\t\ttempBalance = tempToken.balanceOf(this);\n\t\t\ttempBalance = tempBalance.sub(tempFee);\n\t\t\ttempToken.transfer(admin,tempBalance);\n\n\t\t}\n\t}\n\t\n    function claimTokens(IERC20Token _address, address _to) onlyAdmin public  {\n        require(_to != address(0));\n        uint256 remainder = _address.balanceOf(this); //Check remainder tokens\n        _address.transfer(_to,remainder); //Transfer tokens to creator\n    }\n\n\tfunction () public payable{\n\t\tbuy();\n\t}\n\n}"
}