{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH3 SWAP3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST POP PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH3 SWAP3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 PUSH1 AND MUL OR SWAP1 SSTORE POP PUSH11 PUSH1 SSTORE PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH3 SWAP3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST POP CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLER PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH3 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH3 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH3 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 JUMPI PUSH1 DUP2 PUSH1 SWAP1 SSTORE POP PUSH1 ADD PUSH3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 DUP1 PUSH3 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLER DUP3 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP10 DUP10 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP14 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 DUP12 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 DUP11 PUSH1 DUP1 DUP15 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 DUP10 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP13 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP4 POP DUP11 DUP11 DUP11 DUP11 DUP8 PUSH1 MLOAD DUP1 DUP7 PUSH20 AND PUSH20 AND PUSH13 MUL DUP2 MSTORE PUSH1 ADD DUP6 PUSH20 AND PUSH20 AND PUSH13 MUL DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP6 POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 SWAP3 POP PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP SWAP2 POP DUP2 DUP4 PUSH1 MLOAD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT ISZERO ISZERO PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 DUP3 ADD SWAP2 POP PUSH1 DUP2 ADD SWAP1 POP PUSH1 DUP4 SUB SWAP3 POP PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 SWAP1 POP PUSH1 DUP2 DUP9 DUP9 DUP9 PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 MSTORE PUSH1 MLOAD DUP1 DUP6 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD DUP5 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD DUP4 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP5 POP POP POP POP POP PUSH1 PUSH1 MLOAD PUSH1 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 PUSH1 DUP7 GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP PUSH1 PUSH1 MLOAD SUB MLOAD PUSH20 AND DUP12 PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 DUP10 DUP12 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP15 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP14 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP10 PUSH1 DUP1 DUP14 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP13 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP9 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP14 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP10 PUSH20 AND DUP12 PUSH20 AND PUSH32 DUP12 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 CALLER PUSH20 AND DUP12 PUSH20 AND PUSH32 DUP11 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 PUSH2 PUSH1 DUP3 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 CALLDATASIZE SWAP1 POP LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP5 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP2 POP PUSH2 DUP4 PUSH1 DUP1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 PUSH1 DUP1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 AND DUP6 PUSH20 AND PUSH32 DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP2 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND PUSH32 DUP3 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 PUSH20 AND DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP3 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 CALLDATASIZE SWAP1 POP LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 ADD SWAP1 POP PUSH2 DUP4 DUP3 LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP DUP3 DUP3 LT ISZERO JUMPDEST PUSH2 JUMP JUMPDEST DUP1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 GT ISZERO PUSH2 JUMP JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP STOP LOG1 PUSH6 SHA3 BASEFEE UNKNOWN_0xc6 DUP13 UNKNOWN_0x21 UNKNOWN_0xc2 UNKNOWN_0x4e UNKNOWN_0xfc LOG0 SWAP14 PUSH3 CREATE UNKNOWN_0xb4 UNOFFICIAL_DUP INVALID_0x7c",
  "opcode_entropy": 4.766646516784843,
  "opcode_count": 3848,
  "unique_opcodes": 79,
  "byte_entropy": 4.73546025890102,
  "byte_0x": 0.00012545477355413375,
  "byte_60": 0.06862376113411116,
  "byte_80": 0.03286915067118304,
  "byte_40": 0.008280015054572827,
  "byte_52": 0.01881821603312006,
  "byte_00": 0.045540082800150546,
  "byte_02": 0.009534562790114163,
  "byte_14": 0.005143645715719483,
  "byte_61": 0.024714590390164347,
  "byte_01": 0.03625642955714465,
  "byte_0a": 0.00401455275373228,
  "byte_81": 0.027474595408355288,
  "byte_54": 0.007025467319031489,
  "byte_ff": 0.32266967758123194,
  "byte_19": 0.004516371847948814,
  "byte_16": 0.02559277380504328,
  "byte_90": 0.039518253669552125,
  "byte_83": 0.007527286413248024,
  "byte_15": 0.014552753732279513,
  "byte_17": 0.001380002509095471,
  "byte_55": 0.0031363693388533434,
  "byte_50": 0.029983690879437964,
  "byte_51": 0.0100363818843307,
  "byte_0c": 0.0007527286413248024,
  "byte_20": 0.02722368586124702,
  "byte_7f": 0.0017563668297578723,
  "byte_43": 0.000501819094216535,
  "byte_4e": 0.000501819094216535,
  "byte_59": 0.000501819094216535,
  "byte_6f": 0.00012545477355413375,
  "byte_6b": 0.00012545477355413375,
  "byte_65": 0.00100363818843307,
  "byte_6e": 0.000501819094216535,
  "byte_6c": 0.0008781834148789362,
  "byte_75": 0.0002509095471082675,
  "byte_73": 0.01605821101492912,
  "byte_03": 0.009660017563668298,
  "byte_62": 0.002760005018190942,
  "byte_92": 0.004390917074394681,
  "byte_91": 0.014050934638062978,
  "byte_ce": 0.0003763643206624012,
  "byte_56": 0.010287291431438967,
  "byte_5b": 0.0204491280893238,
  "byte_07": 0.00100363818843307,
  "byte_74": 0.0003763643206624012,
  "byte_e2": 0.0008781834148789362,
  "byte_ba": 0.0003763643206624012,
  "byte_04": 0.006774557771923222,
  "byte_12": 0.0006272738677706687,
  "byte_05": 0.001881821603312006,
  "byte_6a": 0.0002509095471082675,
  "byte_b7": 0.0003763643206624012,
  "byte_d2": 0.0002509095471082675,
  "byte_dc": 0.0002509095471082675,
  "byte_c8": 0.00100363818843307,
  "byte_e4": 0.0002509095471082675,
  "byte_06": 0.0017563668297578723,
  "byte_0b": 0.0011290929619872036,
  "byte_32": 0.0003763643206624012,
  "byte_2e": 0.0002509095471082675,
  "byte_30": 0.000501819094216535,
  "byte_33": 0.0030109145652992097,
  "byte_34": 0.002509095471082675,
  "byte_41": 0.0011290929619872036,
  "byte_57": 0.010287291431438967,
  "byte_fd": 0.005896374357044286,
  "byte_7d": 0.000501819094216535,
  "byte_82": 0.008907288922343496,
  "byte_1f": 0.0017563668297578723,
  "byte_10": 0.002383640697528541,
  "byte_11": 0.0017563668297578723,
  "byte_85": 0.0017563668297578723,
  "byte_42": 0.000501819094216535,
  "byte_24": 0.00012545477355413375,
  "byte_7a": 0.000501819094216535,
  "byte_76": 0.000501819094216535,
  "byte_5c": 0.000501819094216535,
  "byte_1c": 0.0031363693388533434,
  "byte_95": 0.001380002509095471,
  "byte_8d": 0.0015054572826496049,
  "byte_39": 0.0002509095471082675,
  "byte_f3": 0.0016309120562037385,
  "byte_36": 0.0015054572826496049,
  "byte_f1": 0.00100363818843307,
  "byte_35": 0.002509095471082675,
  "byte_7c": 0.000501819094216535,
  "byte_63": 0.005143645715719483,
  "byte_de": 0.0003763643206624012,
  "byte_09": 0.0008781834148789362,
  "byte_5e": 0.0002509095471082675,
  "byte_a7": 0.00100363818843307,
  "byte_b3": 0.0007527286413248024,
  "byte_93": 0.0003763643206624012,
  "byte_18": 0.0007527286413248024,
  "byte_0d": 0.0012545477355413374,
  "byte_dd": 0.0011290929619872036,
  "byte_e0": 0.0003763643206624012,
  "byte_23": 0.0012545477355413374,
  "byte_b8": 0.00012545477355413375,
  "byte_72": 0.0003763643206624012,
  "byte_31": 0.000501819094216535,
  "byte_3c": 0.0002509095471082675,
  "byte_e5": 0.0002509095471082675,
  "byte_67": 0.0003763643206624012,
  "byte_78": 0.0003763643206624012,
  "byte_3f": 0.0002509095471082675,
  "byte_4b": 0.0002509095471082675,
  "byte_a8": 0.00012545477355413375,
  "byte_3a": 0.0003763643206624012,
  "byte_a9": 0.0003763643206624012,
  "byte_96": 0.00012545477355413375,
  "byte_68": 0.0011290929619872036,
  "byte_d8": 0.000501819094216535,
  "byte_4d": 0.0008781834148789362,
  "byte_97": 0.00012545477355413375,
  "byte_5a": 0.0012545477355413374,
  "byte_bb": 0.0002509095471082675,
  "byte_70": 0.0002509095471082675,
  "byte_a0": 0.000501819094216535,
  "byte_c4": 0.0007527286413248024,
  "byte_84": 0.0021327311504202736,
  "byte_cb": 0.0002509095471082675,
  "byte_1b": 0.0011290929619872036,
  "byte_a5": 0.0002509095471082675,
  "byte_4a": 0.00012545477355413375,
  "byte_9b": 0.0007527286413248024,
  "byte_a1": 0.0015054572826496049,
  "byte_9c": 0.00012545477355413375,
  "byte_ed": 0.0002509095471082675,
  "byte_3e": 0.0002509095471082675,
  "byte_7e": 0.0002509095471082675,
  "byte_eb": 0.0003763643206624012,
  "byte_2d": 0.00012545477355413375,
  "byte_45": 0.0002509095471082675,
  "byte_f5": 0.0016309120562037385,
  "byte_f2": 0.0007527286413248024,
  "byte_e3": 0.0002509095471082675,
  "byte_8b": 0.00100363818843307,
  "byte_0f": 0.000501819094216535,
  "byte_58": 0.0002509095471082675,
  "byte_3d": 0.0007527286413248024,
  "byte_9f": 0.0002509095471082675,
  "byte_ec": 0.0003763643206624012,
  "byte_08": 0.0008781834148789362,
  "byte_f8": 0.00012545477355413375,
  "byte_fe": 0.0002509095471082675,
  "byte_28": 0.0008781834148789362,
  "byte_b5": 0.00012545477355413375,
  "byte_be": 0.0002509095471082675,
  "byte_3b": 0.0002509095471082675,
  "byte_1a": 0.0007527286413248024,
  "byte_87": 0.0007527286413248024,
  "byte_aa": 0.0007527286413248024,
  "byte_d0": 0.0002509095471082675,
  "byte_27": 0.00012545477355413375,
  "byte_5f": 0.00012545477355413375,
  "byte_44": 0.0002509095471082675,
  "byte_ad": 0.0008781834148789362,
  "byte_b6": 0.0003763643206624012,
  "byte_f6": 0.0003763643206624012,
  "byte_db": 0.0003763643206624012,
  "byte_8a": 0.00100363818843307,
  "byte_df": 0.0002509095471082675,
  "byte_d6": 0.0002509095471082675,
  "byte_c1": 0.00012545477355413375,
  "byte_0e": 0.0006272738677706687,
  "byte_8c": 0.0006272738677706687,
  "byte_e1": 0.00012545477355413375,
  "byte_d1": 0.0002509095471082675,
  "byte_4f": 0.0002509095471082675,
  "byte_71": 0.0003763643206624012,
  "byte_1e": 0.0003763643206624012,
  "byte_c0": 0.0002509095471082675,
  "byte_f7": 0.00012545477355413375,
  "byte_b2": 0.00012545477355413375,
  "byte_29": 0.0002509095471082675,
  "byte_c7": 0.0002509095471082675,
  "byte_c3": 0.00012545477355413375,
  "byte_b9": 0.00012545477355413375,
  "byte_25": 0.0002509095471082675,
  "byte_a3": 0.0008781834148789362,
  "byte_98": 0.00012545477355413375,
  "byte_99": 0.00012545477355413375,
  "byte_b4": 0.0003763643206624012,
  "byte_86": 0.0008781834148789362,
  "byte_2f": 0.0003763643206624012,
  "byte_9e": 0.0002509095471082675,
  "byte_13": 0.0003763643206624012,
  "byte_f4": 0.00012545477355413375,
  "byte_ac": 0.0002509095471082675,
  "byte_79": 0.00012545477355413375,
  "byte_f0": 0.0002509095471082675,
  "byte_69": 0.0008781834148789362,
  "byte_22": 0.0002509095471082675,
  "byte_e6": 0.0002509095471082675,
  "byte_66": 0.0002509095471082675,
  "byte_d3": 0.0003763643206624012,
  "byte_f9": 0.00012545477355413375,
  "byte_2b": 0.0008781834148789362,
  "byte_a4": 0.00012545477355413375,
  "byte_94": 0.0002509095471082675,
  "byte_bf": 0.00012545477355413375,
  "byte_d5": 0.00012545477355413375,
  "byte_2c": 0.00012545477355413375,
  "byte_89": 0.0008781834148789362,
  "byte_37": 0.0007527286413248024,
  "byte_8e": 0.0002509095471082675,
  "byte_d4": 0.00012545477355413375,
  "byte_64": 0.0002509095471082675,
  "byte_6d": 0.0002509095471082675,
  "byte_53": 0.0002509095471082675,
  "byte_ab": 0.00012545477355413375,
  "byte_88": 0.0006272738677706687,
  "byte_c2": 0.0007527286413248024,
  "byte_b0": 0.0007527286413248024,
  "byte_fc": 0.0007527286413248024,
  "byte_ef": 0.0006272738677706687,
  "byte_1d": 0.00012545477355413375,
  "byte_49": 0.00012545477355413375,
  "byte_d7": 0.00012545477355413375,
  "byte_cc": 0.0002509095471082675,
  "byte_9d": 0.0002509095471082675,
  "byte_bd": 0.00012545477355413375,
  "byte_cf": 0.00012545477355413375,
  "byte_5d": 0.00012545477355413375,
  "byte_a2": 0.0002509095471082675,
  "byte_da": 0.00012545477355413375,
  "byte_38": 0.00012545477355413375,
  "byte_48": 0.00012545477355413375,
  "byte_c6": 0.00012545477355413375,
  "byte_21": 0.00012545477355413375,
  "byte_b1": 0.00012545477355413375,
  "byte_c5": 0.00012545477355413375,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 9,
  "event_nums": 7,
  "creation_block": 5503193,
  "creation_timestamp": 1524658533,
  "life_time": 17989.0,
  "duration_seconds": 269270.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.0005002779321845469,
  "avg_gas_limit": 3718030.888888889,
  "std_gas_limit": 1839990.8010850032,
  "avg_gas_used": 284930.6666666667,
  "std_gas_used": 671689.2436362717,
  "avg_gas_price": 7444444444.444445,
  "std_gas_price": 4474895681.244948,
  "transfer_num": 7,
  "atinversebrah_num": 1,
  "transferownership_num": 1,
  "timeline_sequence": [
    [
      5503193,
      1524658533,
      370,
      72,
      0,
      4700000,
      5000000000,
      0,
      1,
      4864565,
      2184617,
      17588875
    ],
    [
      5503253,
      1524659257,
      371,
      77,
      0,
      4700000,
      6000000000,
      0,
      1,
      2656582,
      52214,
      17588815
    ],
    [
      5503274,
      1524659553,
      372,
      43,
      0,
      4700000,
      6000000000,
      0,
      1,
      2431031,
      52278,
      17588794
    ],
    [
      5503275,
      1524659570,
      373,
      60,
      0,
      4700000,
      6000000000,
      0,
      1,
      2358640,
      52214,
      17588793
    ],
    [
      5503278,
      1524659586,
      374,
      6,
      0,
      4700000,
      6000000000,
      0,
      1,
      587668,
      52406,
      17588790
    ],
    [
      5503280,
      1524659606,
      375,
      47,
      0,
      4700000,
      6000000000,
      0,
      1,
      1882777,
      37342,
      17588788
    ],
    [
      5507626,
      1524724263,
      60,
      158,
      0,
      500000,
      20000000000,
      0,
      1,
      5774339,
      52214,
      17584442
    ],
    [
      5518517,
      1524887354,
      418,
      37,
      0,
      4700000,
      5000000000,
      0,
      1,
      1517970,
      28813,
      17573551
    ],
    [
      5521182,
      1524927803,
      63,
      91,
      0,
      62278,
      7000000000,
      0,
      1,
      4384066,
      52278,
      17570886
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.23;\n\n/**\n * Math operations with safety checks\n */\n library SafeMath {\n   /**\n   * @dev Multiplies two numbers, revert()s on overflow.\n   */\n   function mul(uint256 a, uint256 b) internal returns (uint256 c) {\n     if (a == 0) {\n       return 0;\n     }\n     c = a * b;\n     assert(c / a == b);\n     return c;\n   }\n\n   /**\n   * @dev Integer division of two numbers, truncating the quotient.\n   */\n   function div(uint256 a, uint256 b) internal returns (uint256) {\n     // assert(b > 0); // Solidity automatically revert()s when dividing by 0\n     // uint256 c = a / b;\n     // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n     return a / b;\n   }\n\n   /**\n   * @dev Subtracts two numbers, revert()s on overflow (i.e. if subtrahend is greater than minuend).\n   */\n   function sub(uint256 a, uint256 b) internal returns (uint256) {\n     assert(b <= a);\n     return a - b;\n   }\n\n   /**\n   * @dev Adds two numbers, revert()s on overflow.\n   */\n   function add(uint256 a, uint256 b) internal returns (uint256 c) {\n     c = a + b;\n     assert(c >= a && c >= b);\n     return c;\n   }\n\n   function assert(bool assertion) internal {\n     if (!assertion) {\n       revert();\n     }\n   }\n }\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n  function balanceOf(address who) constant returns (uint);\n  function transfer(address to, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint;\n\n  mapping(address => uint) balances;\n\n  /**\n   * @dev Fix for the ERC20 short address attack.\n   */\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size.add(4)) {\n       revert();\n     }\n     _;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n    require(_to != 0x0);\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint);\n  function transferFrom(address from, address to, uint value);\n  function approve(address spender, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implemantation of the basic standart token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is BasicToken, ERC20 {\n\n  mapping (address => mapping (address => uint)) allowed;\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n    require(_to != 0x0);\n    uint _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already revert() if this condition is not met\n    // if (_value > _allowance) revert();\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    emit Transfer(_from, _to, _value);\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint _value) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) revert();\n\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev revert()s if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      revert();\n    }\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    if (paused) revert();\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused {\n    if (!paused) revert();\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    emit Pause();\n    return true;\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused returns (bool) {\n    paused = false;\n    emit Unpause();\n    return true;\n  }\n}\n\n\n/**\n * Pausable token\n *\n * Simple ERC20 Token example, with pausable token creation\n **/\n\ncontract PausableToken is StandardToken, Pausable {\n\n  function transfer(address _to, uint _value) whenNotPaused {\n    super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) whenNotPaused {\n    super.transferFrom(_from, _to, _value);\n  }\n}\n\n/**\n * @title CNYTokenPlus\n * @dev CNY Token Plus contract\n */\ncontract CNYTokenPlus is PausableToken {\n  using SafeMath for uint256;\n\n  function () {\n      //if ether is sent to this address, send it back.\n      revert();\n  }\n\n  string public name = \"CNYTokenPlus\";\n  string public symbol = \"CNYt\u207a\";\n  uint8 public decimals = 18;\n  uint public totalSupply = 100000000000000000000000000;\n  string public version = 'CNYt\u207a 2.0';\n  // The nonce for avoid transfer replay attacks\n  mapping(address => uint256) nonces;\n\n  event Burn(address indexed burner, uint256 value);\n\n  function CNYTokenPlus() {\n      balances[msg.sender] = totalSupply;              // Give the creator all initial tokens\n  }\n\n  /**\n   * @dev Burns a specific amount of tokens.\n   * @param _value The amount of token to be burned.\n   */\n  function burn(uint256 _value) onlyOwner whenNotPaused {\n    _burn(msg.sender, _value);\n  }\n\n  function _burn(address _who, uint256 _value) internal {\n    require(_value <= balances[_who]);\n    // no need to require value <= totalSupply, since that would imply the\n    // sender's balance is greater than the totalSupply, which *should* be an assertion failure\n\n    balances[_who] = balances[_who].sub(_value);\n    totalSupply = totalSupply.sub(_value);\n    emit Burn(_who, _value);\n    emit Transfer(_who, address(0), _value);\n  }\n\n  /*\n   * Proxy transfer HC token. When some users of the ethereum account don't have ether,\n   * Who can authorize the agent for broadcast transactions, the agents may charge fees\n   * @param _from\n   * @param _to\n   * @param _value\n   * @param fee\n   * @param _v\n   * @param _r\n   * @param _s\n   * @param _comment\n   */\n  function transferProxy(address _from, address _to, uint256 _value, uint256 _fee,\n      uint8 _v, bytes32 _r, bytes32 _s) whenNotPaused {\n\n      require((balances[_from] >= _fee.add(_value)));\n      require(balances[_to].add(_value) >= balances[_to]);\n      require(balances[msg.sender].add(_fee) >= balances[msg.sender]);\n\n      uint256 nonce = nonces[_from];\n      bytes32 hash = keccak256(_from,_to,_value,_fee,nonce);\n      bytes memory prefix = \"\\x19Ethereum Signed Message:\\n32\";\n      bytes32 prefixedHash = keccak256(prefix, hash);\n      require(_from == ecrecover(prefixedHash,_v,_r,_s));\n\n      balances[_from] = balances[_from].sub(_value.add(_fee));\n      balances[_to] = balances[_to].add(_value);\n      balances[msg.sender] = balances[msg.sender].add(_fee);\n      nonces[_from] = nonce.add(1);\n\n      emit Transfer(_from, _to, _value);\n      emit Transfer(_from, msg.sender, _fee);\n  }\n}"
}