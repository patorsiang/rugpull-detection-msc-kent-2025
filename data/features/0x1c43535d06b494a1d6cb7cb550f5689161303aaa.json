{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP6 SWAP1 SSTORE SWAP1 SWAP3 SWAP2 SWAP1 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 MSTORE PUSH1 PUSH1 MSTORE PUSH32 SLOAD PUSH1 SLOAD SUB SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP8 DUP4 AND DUP3 MSTORE PUSH1 DUP2 MSTORE DUP4 DUP3 SHA3 CALLER SWAP1 SWAP4 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND SWAP2 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SLOAD DUP1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP10 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 SLOAD PUSH32 SWAP2 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 CALLER SWAP1 SWAP2 AND SWAP1 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND SWAP2 PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 DUP5 SWAP1 SSTORE SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 SWAP2 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND SWAP3 PUSH4 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP6 SWAP1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH29 PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND SWAP2 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xcc UNKNOWN_0xa7 SWAP1 UNKNOWN_0x2f UNKNOWN_0xd1 UNKNOWN_0xcb CALLVALUE DUP2 UNKNOWN_0x5c UNKNOWN_0xde UNKNOWN_0xb5 UNKNOWN_0xab LT UNKNOWN_0x22 UNOFFICIAL_DUP UNKNOWN_0xf9 DUP10 PUSH1 UNKNOWN_0xf UNKNOWN_0xa8 UNKNOWN_0x2e PUSH4 UNKNOWN_0x4b MSIZE UNKNOWN_0xbf UNKNOWN_0xda CALLVALUE STOP UNKNOWN_0x29",
  "opcode_entropy": 4.746696429420748,
  "opcode_count": 2070,
  "unique_opcodes": 76,
  "byte_entropy": 5.8432496439609345,
  "byte_60": 0.12301838934686113,
  "byte_40": 0.015218769816106531,
  "byte_52": 0.032974001268230815,
  "byte_04": 0.01077996195307546,
  "byte_36": 0.0003170577045022194,
  "byte_10": 0.003804692454026633,
  "byte_61": 0.03804692454026633,
  "byte_00": 0.04438807863031072,
  "byte_e5": 0.0015852885225110971,
  "byte_57": 0.017755231452124286,
  "byte_63": 0.01109701965757768,
  "byte_ff": 0.02187698161065314,
  "byte_7c": 0.0009511731135066582,
  "byte_01": 0.04026632847178187,
  "byte_35": 0.006658211794546607,
  "byte_16": 0.03170577045022194,
  "byte_06": 0.0022194039315155357,
  "byte_fd": 0.01046290424857324,
  "byte_de": 0.0006341154090044388,
  "byte_03": 0.02631578947368421,
  "byte_81": 0.03424223208623969,
  "byte_14": 0.007609384908053266,
  "byte_ea": 0.0009511731135066582,
  "byte_80": 0.03614457831325301,
  "byte_09": 0.0025364616360177552,
  "byte_5e": 0.0006341154090044388,
  "byte_a7": 0.0019023462270133164,
  "byte_b3": 0.0012682308180088776,
  "byte_74": 0.0006341154090044388,
  "byte_18": 0.0009511731135066582,
  "byte_0d": 0.0003170577045022194,
  "byte_dd": 0.0028535193405199747,
  "byte_aa": 0.0015852885225110971,
  "byte_23": 0.0015852885225110971,
  "byte_b8": 0.0006341154090044388,
  "byte_72": 0.0006341154090044388,
  "byte_cf": 0.0003170577045022194,
  "byte_31": 0.0006341154090044388,
  "byte_3c": 0.0003170577045022194,
  "byte_67": 0.0009511731135066582,
  "byte_f7": 0.0015852885225110971,
  "byte_3e": 0.0009511731135066582,
  "byte_f8": 0.0003170577045022194,
  "byte_6b": 0.0006341154090044388,
  "byte_02": 0.02568167406467977,
  "byte_0a": 0.018389346861128725,
  "byte_66": 0.0006341154090044388,
  "byte_84": 0.0050729232720355105,
  "byte_1d": 0.0003170577045022194,
  "byte_70": 0.0003170577045022194,
  "byte_a0": 0.015218769816106531,
  "byte_82": 0.009828788839568801,
  "byte_3f": 0.0003170577045022194,
  "byte_8d": 0.0015852885225110971,
  "byte_a5": 0.0003170577045022194,
  "byte_cb": 0.0006341154090044388,
  "byte_5b": 0.031071655041217502,
  "byte_95": 0.0012682308180088776,
  "byte_d8": 0.0006341154090044388,
  "byte_9b": 0.0015852885225110971,
  "byte_41": 0.0006341154090044388,
  "byte_a9": 0.0006341154090044388,
  "byte_05": 0.006975269499048827,
  "byte_9c": 0.0009511731135066582,
  "byte_bb": 0.0012682308180088776,
  "byte_c6": 0.0006341154090044388,
  "byte_c3": 0.0012682308180088776,
  "byte_e6": 0.0003170577045022194,
  "byte_c2": 0.0015852885225110971,
  "byte_d7": 0.0003170577045022194,
  "byte_3d": 0.0003170577045022194,
  "byte_d6": 0.0003170577045022194,
  "byte_ec": 0.0015852885225110971,
  "byte_dc": 0.0003170577045022194,
  "byte_39": 0.0006341154090044388,
  "byte_d0": 0.0009511731135066582,
  "byte_6d": 0.0003170577045022194,
  "byte_0e": 0.0003170577045022194,
  "byte_62": 0.0009511731135066582,
  "byte_ed": 0.0006341154090044388,
  "byte_30": 0.0006341154090044388,
  "byte_f2": 0.0015852885225110971,
  "byte_e3": 0.0012682308180088776,
  "byte_8b": 0.0006341154090044388,
  "byte_55": 0.004438807863031071,
  "byte_34": 0.0057070386810399495,
  "byte_15": 0.013950538998097653,
  "byte_f5": 0.0022194039315155357,
  "byte_56": 0.014901712111604312,
  "byte_51": 0.01046290424857324,
  "byte_20": 0.029803424223208624,
  "byte_90": 0.05009511731135067,
  "byte_83": 0.013633481293595434,
  "byte_91": 0.016487000634115408,
  "byte_50": 0.014901712111604312,
  "byte_21": 0.0003170577045022194,
  "byte_1f": 0.0028535193405199747,
  "byte_19": 0.0012682308180088776,
  "byte_92": 0.006658211794546607,
  "byte_f3": 0.0022194039315155357,
  "byte_7f": 0.0031705770450221942,
  "byte_96": 0.0019023462270133164,
  "byte_24": 0.0028535193405199747,
  "byte_12": 0.0003170577045022194,
  "byte_b5": 0.0009511731135066582,
  "byte_bd": 0.0015852885225110971,
  "byte_7e": 0.0006341154090044388,
  "byte_da": 0.0012682308180088776,
  "byte_44": 0.0012682308180088776,
  "byte_b0": 0.0012682308180088776,
  "byte_32": 0.0009511731135066582,
  "byte_38": 0.0009511731135066582,
  "byte_28": 0.0015852885225110971,
  "byte_4a": 0.0003170577045022194,
  "byte_07": 0.00538998097653773,
  "byte_69": 0.0012682308180088776,
  "byte_71": 0.0012682308180088776,
  "byte_53": 0.0006341154090044388,
  "byte_98": 0.0006341154090044388,
  "byte_ab": 0.0009511731135066582,
  "byte_cd": 0.0009511731135066582,
  "byte_08": 0.0015852885225110971,
  "byte_c8": 0.0022194039315155357,
  "byte_3b": 0.0006341154090044388,
  "byte_0b": 0.003804692454026633,
  "byte_54": 0.01109701965757768,
  "byte_df": 0.0006341154090044388,
  "byte_11": 0.0019023462270133164,
  "byte_33": 0.00538998097653773,
  "byte_94": 0.0034876347495244133,
  "byte_87": 0.0009511731135066582,
  "byte_85": 0.004438807863031071,
  "byte_8c": 0.0009511731135066582,
  "byte_e1": 0.0009511731135066582,
  "byte_eb": 0.0012682308180088776,
  "byte_7d": 0.0022194039315155357,
  "byte_d1": 0.0012682308180088776,
  "byte_4f": 0.0009511731135066582,
  "byte_42": 0.0009511731135066582,
  "byte_1e": 0.0019023462270133164,
  "byte_c0": 0.0009511731135066582,
  "byte_b2": 0.0009511731135066582,
  "byte_29": 0.0012682308180088776,
  "byte_c7": 0.0012682308180088776,
  "byte_b9": 0.0009511731135066582,
  "byte_25": 0.0009511731135066582,
  "byte_a3": 0.0025364616360177552,
  "byte_cc": 0.0006341154090044388,
  "byte_9d": 0.0003170577045022194,
  "byte_4d": 0.0012682308180088776,
  "byte_8f": 0.0003170577045022194,
  "byte_b1": 0.0006341154090044388,
  "byte_6e": 0.0003170577045022194,
  "byte_4c": 0.0003170577045022194,
  "byte_9a": 0.0003170577045022194,
  "byte_f1": 0.0015852885225110971,
  "byte_b4": 0.0006341154090044388,
  "byte_fb": 0.0003170577045022194,
  "byte_47": 0.0003170577045022194,
  "byte_d9": 0.0003170577045022194,
  "byte_a8": 0.0006341154090044388,
  "byte_49": 0.0006341154090044388,
  "byte_97": 0.0006341154090044388,
  "byte_46": 0.0003170577045022194,
  "byte_bc": 0.0003170577045022194,
  "byte_48": 0.0003170577045022194,
  "byte_fe": 0.0025364616360177552,
  "byte_86": 0.0019023462270133164,
  "byte_93": 0.007609384908053266,
  "byte_0c": 0.0022194039315155357,
  "byte_c5": 0.0003170577045022194,
  "byte_ad": 0.0009511731135066582,
  "byte_1b": 0.0009511731135066582,
  "byte_e2": 0.0009511731135066582,
  "byte_68": 0.0009511731135066582,
  "byte_fc": 0.0009511731135066582,
  "byte_37": 0.0009511731135066582,
  "byte_2b": 0.0009511731135066582,
  "byte_c4": 0.0009511731135066582,
  "byte_a1": 0.0012682308180088776,
  "byte_5a": 0.0012682308180088776,
  "byte_ef": 0.0009511731135066582,
  "byte_88": 0.0003170577045022194,
  "byte_d2": 0.0003170577045022194,
  "byte_89": 0.0012682308180088776,
  "byte_e4": 0.0003170577045022194,
  "byte_17": 0.0006341154090044388,
  "byte_e0": 0.0006341154090044388,
  "byte_59": 0.0006341154090044388,
  "byte_13": 0.0003170577045022194,
  "byte_a4": 0.0003170577045022194,
  "byte_22": 0.0006341154090044388,
  "byte_af": 0.0003170577045022194,
  "byte_6f": 0.0003170577045022194,
  "byte_64": 0.0003170577045022194,
  "byte_73": 0.0003170577045022194,
  "byte_65": 0.0003170577045022194,
  "byte_7a": 0.0006341154090044388,
  "byte_58": 0.0003170577045022194,
  "byte_2f": 0.0003170577045022194,
  "byte_5c": 0.0003170577045022194,
  "byte_f9": 0.0003170577045022194,
  "byte_0f": 0.0003170577045022194,
  "byte_2e": 0.0003170577045022194,
  "byte_d3": 0.0003170577045022194,
  "byte_4b": 0.0003170577045022194,
  "byte_bf": 0.0003170577045022194,
  "num_nodes": 5,
  "num_edges": 4,
  "avg_degree": 1.6,
  "density": 0.2,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 23,
  "event_nums": 51,
  "creation_block": 5119374,
  "creation_timestamp": 1519054988,
  "life_time": 2993484.0,
  "duration_seconds": 43563759.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 6,
  "num_buyers": 1,
  "num_sellers": 4,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 7.683352346846568e-06,
  "avg_gas_limit": 368708.0,
  "std_gas_limit": 376705.99624052335,
  "avg_gas_used": 77640.82608695653,
  "std_gas_used": 148597.001968602,
  "avg_gas_price": 40260869565.21739,
  "std_gas_price": 17116524919.819818,
  "transfer_num": 22,
  "timeline_sequence": [
    [
      5162004,
      1519684258,
      0,
      20,
      0,
      300000,
      40000000000,
      0,
      1,
      1159445,
      52133,
      17959046
    ],
    [
      5167067,
      1519758908,
      1,
      8,
      0,
      500000,
      40000000000,
      0,
      1,
      419959,
      52133,
      17953983
    ],
    [
      5167127,
      1519759589,
      2,
      147,
      0,
      500000,
      40000000000,
      0,
      1,
      4026761,
      52133,
      17953923
    ],
    [
      5170768,
      1519813034,
      3,
      51,
      0,
      400000,
      40000000000,
      0,
      1,
      1941569,
      52069,
      17950282
    ],
    [
      5195068,
      1520168997,
      4,
      21,
      0,
      300000,
      40000000000,
      0,
      1,
      714851,
      52133,
      17925982
    ],
    [
      5200641,
      1520250517,
      5,
      49,
      0,
      300000,
      40000000000,
      0,
      1,
      1998593,
      52197,
      17920409
    ],
    [
      5206890,
      1520342928,
      6,
      10,
      0,
      300000,
      40000000000,
      0,
      1,
      402490,
      37197,
      17914160
    ],
    [
      5235980,
      1520769334,
      7,
      144,
      0,
      200000,
      40000000000,
      0,
      1,
      3428646,
      52133,
      17885070
    ],
    [
      5258402,
      1521099160,
      8,
      17,
      0,
      200000,
      40000000000,
      0,
      1,
      727232,
      52197,
      17862648
    ],
    [
      5282821,
      1521456153,
      9,
      168,
      0,
      300000,
      40000000000,
      0,
      1,
      4139019,
      52133,
      17838229
    ],
    [
      5319329,
      1521983715,
      10,
      49,
      0,
      300000,
      40000000000,
      0,
      1,
      1562705,
      52133,
      17801721
    ],
    [
      5319333,
      1521983773,
      11,
      12,
      0,
      300000,
      40000000000,
      0,
      1,
      403286,
      37133,
      17801717
    ],
    [
      5332081,
      1522167942,
      12,
      28,
      0,
      300000,
      40000000000,
      0,
      1,
      974403,
      52133,
      17788969
    ],
    [
      5333252,
      1522184445,
      13,
      7,
      0,
      300000,
      40000000000,
      0,
      1,
      233746,
      52133,
      17787798
    ],
    [
      5333310,
      1522185395,
      14,
      1,
      0,
      300000,
      60000000000,
      0,
      1,
      58133,
      37133,
      17787740
    ],
    [
      5339137,
      1522270432,
      15,
      2,
      0,
      300000,
      60000000000,
      0,
      1,
      94133,
      52133,
      17781913
    ],
    [
      5474400,
      1524231661,
      36,
      103,
      0,
      52197,
      2000000000,
      0,
      1,
      7811625,
      37197,
      17646650
    ],
    [
      5485088,
      1524389824,
      16,
      3,
      0,
      300000,
      60000000000,
      0,
      1,
      117145,
      37197,
      17635962
    ],
    [
      5544141,
      1525274722,
      17,
      3,
      0,
      300000,
      60000000000,
      0,
      1,
      115197,
      52197,
      17576909
    ],
    [
      5786215,
      1528961448,
      18,
      9,
      0,
      300000,
      60000000000,
      0,
      1,
      303983,
      37133,
      17334835
    ],
    [
      5786225,
      1528961627,
      19,
      10,
      0,
      300000,
      60000000000,
      0,
      1,
      411566,
      37133,
      17334825
    ],
    [
      8112858,
      1562618747,
      2,
      34,
      0,
      55699,
      4000000000,
      0,
      1,
      2479299,
      22133,
      15008192
    ],
    [
      5119374,
      1519054988,
      0,
      0,
      0,
      2072388,
      0,
      0,
      0,
      0,
      773493,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.18;\n\n \nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract ERC20Interface {\n     function totalSupply() public constant returns (uint);\n     function balanceOf(address tokenOwner) public constant returns (uint balance);\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n     function transfer(address to, uint tokens) public returns (bool success);\n     function approve(address spender, uint tokens) public returns (bool success);\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n     event Transfer(address indexed from, address indexed to, uint tokens);\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract HypeRideToken is ERC20Interface,Ownable {\n\n   using SafeMath for uint256;\n   \n   string public name;\n   string public symbol;\n   uint256 public decimals;\n\n   uint256 public _totalSupply;\n   mapping(address => uint256) tokenBalances;\n   address ownerWallet;\n   // Owner of account approves the transfer of an amount to another account\n   mapping (address => mapping (address => uint256)) allowed;\n   \n   /**\n   * @dev Contructor that gives msg.sender all of existing tokens.\n   */\n    function HypeRideToken(address wallet) public {\n        owner = msg.sender;\n        ownerWallet = wallet;\n        name  = \"HYPERIDE\";\n        symbol = \"HYPE\";\n        decimals = 18;\n        _totalSupply = 150000000 * 10 ** uint(decimals);\n        tokenBalances[wallet] = _totalSupply;   //Since we divided the token into 10^18 parts\n    }\n    \n     // Get the token balance for account `tokenOwner`\n     function balanceOf(address tokenOwner) public constant returns (uint balance) {\n         return tokenBalances[tokenOwner];\n     }\n  \n     // Transfer the balance from owner's account to another account\n     function transfer(address to, uint tokens) public returns (bool success) {\n         require(to != address(0));\n         require(tokens <= tokenBalances[msg.sender]);\n         tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokens);\n         tokenBalances[to] = tokenBalances[to].add(tokens);\n         Transfer(msg.sender, to, tokens);\n         return true;\n     }\n  \n     /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= tokenBalances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    tokenBalances[_from] = tokenBalances[_from].sub(_value);\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n  \n     /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n     // ------------------------------------------------------------------------\n     // Total supply\n     // ------------------------------------------------------------------------\n     function totalSupply() public constant returns (uint) {\n         return _totalSupply  - tokenBalances[address(0)];\n     }\n     \n    \n     \n     // ------------------------------------------------------------------------\n     // Returns the amount of tokens approved by the owner that can be\n     // transferred to the spender's account\n     // ------------------------------------------------------------------------\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n         return allowed[tokenOwner][spender];\n     }\n     \n     /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n     \n     // ------------------------------------------------------------------------\n     // Don't accept ETH\n     // ------------------------------------------------------------------------\n     function () public payable {\n         revert();\n     }\n \n \n     // ------------------------------------------------------------------------\n     // Owner can transfer out any accidentally sent ERC20 tokens\n     // ------------------------------------------------------------------------\n     function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n         return ERC20Interface(tokenAddress).transfer(owner, tokens);\n     }\n     \n     //only to be used by the ICO\n     \n     function mint(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\n      require(tokenBalances[wallet] >= tokenAmount);               // checks if it has enough to sell\n      tokenBalances[buyer] = tokenBalances[buyer].add(tokenAmount);                  // adds the amount to buyer's balance\n      tokenBalances[wallet] = tokenBalances[wallet].sub(tokenAmount);                        // subtracts amount from seller's balance\n      Transfer(wallet, buyer, tokenAmount); \n      _totalSupply = _totalSupply.sub(tokenAmount);\n    }\n}"
}