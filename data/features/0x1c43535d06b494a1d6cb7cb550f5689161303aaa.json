{
  "opcode_sequence": "",
  "opcode_entropy": 0.0,
  "opcode_count": 0,
  "unique_opcodes": 0,
  "byte_entropy": 0.0,
  "byte_0x": 1.0,
  "num_nodes": 5,
  "num_edges": 4,
  "avg_degree": 1.6,
  "density": 0.2,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 23,
  "event_nums": 51,
  "creation_block": 5119374,
  "creation_timestamp": 1519054988,
  "life_time": 2993484.0,
  "duration_seconds": 43563759.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 6,
  "num_buyers": 1,
  "num_sellers": 4,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 7.683352346846568e-06,
  "avg_gas_limit": 368708.0,
  "std_gas_limit": 376705.99624052335,
  "avg_gas_used": 77640.82608695653,
  "std_gas_used": 148597.001968602,
  "avg_gas_price": 40260869565.21739,
  "std_gas_price": 17116524919.819818,
  "transfer_num": 22,
  "timeline_sequence": [
    [
      5162004,
      1519684258,
      0,
      20,
      0,
      300000,
      40000000000,
      0,
      1,
      1159445,
      52133,
      17930913
    ],
    [
      5167067,
      1519758908,
      1,
      8,
      0,
      500000,
      40000000000,
      0,
      1,
      419959,
      52133,
      17925850
    ],
    [
      5167127,
      1519759589,
      2,
      147,
      0,
      500000,
      40000000000,
      0,
      1,
      4026761,
      52133,
      17925790
    ],
    [
      5170768,
      1519813034,
      3,
      51,
      0,
      400000,
      40000000000,
      0,
      1,
      1941569,
      52069,
      17922149
    ],
    [
      5195068,
      1520168997,
      4,
      21,
      0,
      300000,
      40000000000,
      0,
      1,
      714851,
      52133,
      17897849
    ],
    [
      5200641,
      1520250517,
      5,
      49,
      0,
      300000,
      40000000000,
      0,
      1,
      1998593,
      52197,
      17892276
    ],
    [
      5206890,
      1520342928,
      6,
      10,
      0,
      300000,
      40000000000,
      0,
      1,
      402490,
      37197,
      17886027
    ],
    [
      5235980,
      1520769334,
      7,
      144,
      0,
      200000,
      40000000000,
      0,
      1,
      3428646,
      52133,
      17856937
    ],
    [
      5258402,
      1521099160,
      8,
      17,
      0,
      200000,
      40000000000,
      0,
      1,
      727232,
      52197,
      17834515
    ],
    [
      5282821,
      1521456153,
      9,
      168,
      0,
      300000,
      40000000000,
      0,
      1,
      4139019,
      52133,
      17810096
    ],
    [
      5319329,
      1521983715,
      10,
      49,
      0,
      300000,
      40000000000,
      0,
      1,
      1562705,
      52133,
      17773588
    ],
    [
      5319333,
      1521983773,
      11,
      12,
      0,
      300000,
      40000000000,
      0,
      1,
      403286,
      37133,
      17773584
    ],
    [
      5332081,
      1522167942,
      12,
      28,
      0,
      300000,
      40000000000,
      0,
      1,
      974403,
      52133,
      17760836
    ],
    [
      5333252,
      1522184445,
      13,
      7,
      0,
      300000,
      40000000000,
      0,
      1,
      233746,
      52133,
      17759665
    ],
    [
      5333310,
      1522185395,
      14,
      1,
      0,
      300000,
      60000000000,
      0,
      1,
      58133,
      37133,
      17759607
    ],
    [
      5339137,
      1522270432,
      15,
      2,
      0,
      300000,
      60000000000,
      0,
      1,
      94133,
      52133,
      17753780
    ],
    [
      5474400,
      1524231661,
      36,
      103,
      0,
      52197,
      2000000000,
      0,
      1,
      7811625,
      37197,
      17618517
    ],
    [
      5485088,
      1524389824,
      16,
      3,
      0,
      300000,
      60000000000,
      0,
      1,
      117145,
      37197,
      17607829
    ],
    [
      5544141,
      1525274722,
      17,
      3,
      0,
      300000,
      60000000000,
      0,
      1,
      115197,
      52197,
      17548776
    ],
    [
      5786215,
      1528961448,
      18,
      9,
      0,
      300000,
      60000000000,
      0,
      1,
      303983,
      37133,
      17306702
    ],
    [
      5786225,
      1528961627,
      19,
      10,
      0,
      300000,
      60000000000,
      0,
      1,
      411566,
      37133,
      17306692
    ],
    [
      8112858,
      1562618747,
      2,
      34,
      0,
      55699,
      4000000000,
      0,
      1,
      2479299,
      22133,
      14980059
    ],
    [
      5119374,
      1519054988,
      0,
      0,
      0,
      2072388,
      0,
      0,
      0,
      0,
      773493,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.18;\n\n \nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract ERC20Interface {\n     function totalSupply() public constant returns (uint);\n     function balanceOf(address tokenOwner) public constant returns (uint balance);\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n     function transfer(address to, uint tokens) public returns (bool success);\n     function approve(address spender, uint tokens) public returns (bool success);\n     function transferFrom(address from, address to, uint tokens) public returns (bool success);\n     event Transfer(address indexed from, address indexed to, uint tokens);\n     event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract HypeRideToken is ERC20Interface,Ownable {\n\n   using SafeMath for uint256;\n   \n   string public name;\n   string public symbol;\n   uint256 public decimals;\n\n   uint256 public _totalSupply;\n   mapping(address => uint256) tokenBalances;\n   address ownerWallet;\n   // Owner of account approves the transfer of an amount to another account\n   mapping (address => mapping (address => uint256)) allowed;\n   \n   /**\n   * @dev Contructor that gives msg.sender all of existing tokens.\n   */\n    function HypeRideToken(address wallet) public {\n        owner = msg.sender;\n        ownerWallet = wallet;\n        name  = \"HYPERIDE\";\n        symbol = \"HYPE\";\n        decimals = 18;\n        _totalSupply = 150000000 * 10 ** uint(decimals);\n        tokenBalances[wallet] = _totalSupply;   //Since we divided the token into 10^18 parts\n    }\n    \n     // Get the token balance for account `tokenOwner`\n     function balanceOf(address tokenOwner) public constant returns (uint balance) {\n         return tokenBalances[tokenOwner];\n     }\n  \n     // Transfer the balance from owner's account to another account\n     function transfer(address to, uint tokens) public returns (bool success) {\n         require(to != address(0));\n         require(tokens <= tokenBalances[msg.sender]);\n         tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(tokens);\n         tokenBalances[to] = tokenBalances[to].add(tokens);\n         Transfer(msg.sender, to, tokens);\n         return true;\n     }\n  \n     /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= tokenBalances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    tokenBalances[_from] = tokenBalances[_from].sub(_value);\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n  \n     /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n     // ------------------------------------------------------------------------\n     // Total supply\n     // ------------------------------------------------------------------------\n     function totalSupply() public constant returns (uint) {\n         return _totalSupply  - tokenBalances[address(0)];\n     }\n     \n    \n     \n     // ------------------------------------------------------------------------\n     // Returns the amount of tokens approved by the owner that can be\n     // transferred to the spender's account\n     // ------------------------------------------------------------------------\n     function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n         return allowed[tokenOwner][spender];\n     }\n     \n     /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n     \n     // ------------------------------------------------------------------------\n     // Don't accept ETH\n     // ------------------------------------------------------------------------\n     function () public payable {\n         revert();\n     }\n \n \n     // ------------------------------------------------------------------------\n     // Owner can transfer out any accidentally sent ERC20 tokens\n     // ------------------------------------------------------------------------\n     function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n         return ERC20Interface(tokenAddress).transfer(owner, tokens);\n     }\n     \n     //only to be used by the ICO\n     \n     function mint(address wallet, address buyer, uint256 tokenAmount) public onlyOwner {\n      require(tokenBalances[wallet] >= tokenAmount);               // checks if it has enough to sell\n      tokenBalances[buyer] = tokenBalances[buyer].add(tokenAmount);                  // adds the amount to buyer's balance\n      tokenBalances[wallet] = tokenBalances[wallet].sub(tokenAmount);                        // subtracts amount from seller's balance\n      Transfer(wallet, buyer, tokenAmount); \n      _totalSupply = _totalSupply.sub(tokenAmount);\n    }\n}"
}