{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH3 PUSH1 SSTORE PUSH4 PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH3 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP5 ISZERO ISZERO DUP6 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP4 AND PUSH1 DUP6 ADD MSTORE DUP4 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 DUP2 ADD SWAP2 MUL DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP10 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 AND DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP9 AND PUSH1 DUP10 ADD MSTORE POP PUSH1 DUP1 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 DUP8 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP6 ADD MSTORE PUSH1 DUP5 ADD MSTORE PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH2 ADD SWAP2 POP RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD TIMESTAMP LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 NOT AND PUSH1 DUP4 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 MLOAD DUP2 SWAP1 PUSH32 SWAP1 PUSH1 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH3 MUL PUSH1 SSTORE JUMP JUMPDEST PUSH1 DUP1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP5 DUP5 MSTORE PUSH1 ADD SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD ADD TIMESTAMP LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP6 DUP5 MSTORE PUSH1 ADD SWAP1 SWAP2 MSTORE SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH1 DUP1 SLOAD PUSH2 SWAP2 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP3 SHA3 PUSH1 PUSH1 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH1 MLOAD SWAP1 SWAP2 CALLER SWAP2 DUP5 SWAP2 PUSH32 SWAP2 LOG4 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP5 SHA3 DUP7 DUP6 MSTORE SWAP1 SWAP3 ADD SWAP1 MSTORE SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 SWAP1 SWAP3 ADD SLOAD PUSH1 DUP3 AND SWAP3 PUSH2 SWAP1 SWAP3 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP2 SWAP1 DUP5 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DIV AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE MLOAD PUSH32 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH3 MUL PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP5 SHA3 DUP7 DUP6 MSTORE SWAP1 SWAP3 ADD SWAP1 MSTORE DUP2 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP7 DUP5 MSTORE PUSH1 ADD SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 PUSH1 ADD DUP1 SLOAD DUP4 MLOAD DUP2 DUP5 MUL DUP2 ADD DUP5 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH1 SWAP4 SWAP3 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 GT PUSH2 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP2 PUSH32 SWAP2 LOG2 PUSH1 DUP1 SLOAD PUSH20 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DIV AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE MLOAD PUSH32 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD CALLVALUE EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD TIMESTAMP LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 PUSH1 SWAP1 SWAP3 MUL ADD ADD SLOAD LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND EQ DUP1 ISZERO PUSH2 JUMPI POP CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP5 SHA3 DUP6 DUP6 MSTORE SWAP1 SWAP3 ADD SWAP1 MSTORE SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 NOT AND PUSH1 DUP4 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 SWAP1 SWAP4 MUL ADD SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 DUP2 DUP2 ADD DUP4 SSTORE SWAP2 DUP5 MSTORE DUP3 DUP5 SHA3 ADD DUP1 SLOAD PUSH20 NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP1 DUP5 MSTORE PUSH1 DUP1 DUP5 MSTORE PUSH1 DUP1 DUP7 SHA3 DUP8 DUP8 MSTORE DUP1 DUP4 ADD DUP7 MSTORE DUP2 DUP8 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP7 OR SWAP1 SSTORE SWAP2 DUP6 MSTORE PUSH1 SWAP1 SWAP2 ADD DUP1 SLOAD SWAP4 DUP5 ADD DUP2 SSTORE DUP6 MSTORE SWAP3 DUP5 SHA3 SWAP1 SWAP2 ADD DUP5 SWAP1 SSTORE SWAP1 MLOAD CALLVALUE SWAP3 DUP5 SWAP2 PUSH32 SWAP2 SWAP1 LOG4 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST ADDRESS BALANCE DUP2 LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND SWAP1 DUP3 ISZERO PUSH2 MUL SWAP1 DUP4 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 DUP4 ADD SLOAD PUSH1 DUP5 ADD SLOAD PUSH1 DUP6 ADD SLOAD PUSH1 DUP7 ADD SLOAD PUSH1 SWAP1 SWAP7 ADD SLOAD PUSH1 DUP7 AND SWAP8 POP PUSH2 SWAP1 SWAP6 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 DUP9 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 DUP6 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST POP PUSH1 DUP1 DUP5 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 NOT AND PUSH1 DUP4 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH2 SWAP1 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP8 DUP5 MSTORE PUSH1 ADD SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE MLOAD DUP4 ISZERO PUSH2 MUL SWAP2 DUP5 SWAP2 SWAP1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP DUP1 DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP5 PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DIV AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP5 SHA3 DUP7 DUP6 MSTORE SWAP1 SWAP3 ADD SWAP1 MSTORE SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP7 DUP5 MSTORE PUSH1 ADD SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE MLOAD DUP5 SWAP2 PUSH32 SWAP2 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD DUP1 SLOAD DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DIV AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH21 NOT AND PUSH2 DUP6 MUL OR DUP2 SSTORE PUSH1 DUP2 ADD DUP4 SWAP1 SSTORE PUSH1 ADD DUP3 SWAP1 SSTORE MLOAD PUSH32 SWAP2 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH3 DUP6 MUL SWAP3 POP DUP3 LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP PUSH3 DUP4 MUL DUP2 ADD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 CALLVALUE GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP4 GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP6 GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 DUP3 MSTORE CALLER PUSH1 DUP4 ADD MSTORE PUSH1 DUP1 SLOAD PUSH1 DUP5 ADD DUP2 SWAP1 MSTORE CALLVALUE PUSH1 DUP6 ADD DUP2 SWAP1 MSTORE PUSH1 DUP6 ADD MSTORE PUSH1 DUP5 ADD DUP9 SWAP1 MSTORE TIMESTAMP DUP6 ADD PUSH1 DUP6 ADD MSTORE PUSH1 DUP5 ADD DUP7 SWAP1 MSTORE PUSH1 DUP1 DUP3 ADD DUP1 DUP5 SSTORE SWAP4 DUP4 SWAP1 MSTORE DUP5 MLOAD PUSH1 SWAP1 SWAP3 MUL PUSH32 ADD DUP1 SLOAD DUP7 SWAP5 SWAP2 SWAP4 SWAP3 DUP5 SWAP3 PUSH1 NOT SWAP1 SWAP3 AND SWAP2 DUP5 SWAP1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 DUP3 DUP2 ADD MLOAD DUP3 SLOAD PUSH21 NOT AND PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MUL OR DUP4 SSTORE PUSH1 DUP5 ADD MLOAD PUSH1 DUP5 ADD SSTORE PUSH1 DUP5 ADD MLOAD PUSH1 DUP5 ADD SSTORE PUSH1 DUP5 ADD MLOAD PUSH1 DUP5 ADD SSTORE PUSH1 DUP5 ADD MLOAD PUSH1 DUP5 ADD SSTORE PUSH1 DUP5 ADD MLOAD PUSH1 DUP5 ADD SSTORE PUSH1 DUP5 ADD MLOAD PUSH1 DUP5 ADD SSTORE DUP4 ADD MLOAD DUP1 MLOAD PUSH2 SWAP3 PUSH1 DUP6 ADD SWAP3 ADD SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP DUP1 PUSH1 ADD MLOAD PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 SWAP2 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH2 DUP2 ADD SWAP1 SWAP2 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD DUP3 DUP3 SSTORE SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 DUP2 ADD SWAP3 DUP3 ISZERO PUSH2 JUMPI SWAP2 PUSH1 MUL DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND OR DUP3 SSTORE PUSH1 SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 SWAP2 POP PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI DUP1 SLOAD PUSH20 NOT AND DUP2 SSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST SWAP1 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xaf UNKNOWN_0x5e PUSH1 JUMPI LOG0 UNKNOWN_0xc8 UNKNOWN_0xd5 UNKNOWN_0x4f PUSH5 SWAP1 BLOCKHASH UNKNOWN_0x5e EXTCODECOPY UNKNOWN_0xfc UNKNOWN_0xfe UNKNOWN_0x5c UNKNOWN_0x1f UNKNOWN_0xcd UNKNOWN_0x22 DUP16 INVALID_0x7c",
  "opcode_entropy": 4.845175622309845,
  "opcode_count": 3586,
  "unique_opcodes": 84,
  "byte_entropy": 5.895768797048712,
  "byte_0x": 0.0001864975755315181,
  "byte_60": 0.12513987318164863,
  "byte_80": 0.04028347631480791,
  "byte_40": 0.00988437150317046,
  "byte_52": 0.025923162998881016,
  "byte_62": 0.001864975755315181,
  "byte_76": 0.0003729951510630362,
  "byte_a7": 0.0009324878776575904,
  "byte_00": 0.03879149571055576,
  "byte_01": 0.04960835509138381,
  "byte_55": 0.007832898172323759,
  "byte_63": 0.005594927265945543,
  "byte_e1": 0.0003729951510630362,
  "byte_33": 0.00484893696381947,
  "byte_02": 0.023125699365908244,
  "byte_54": 0.01976874300634092,
  "byte_a0": 0.011935844834017158,
  "byte_0a": 0.013054830287206266,
  "byte_03": 0.02144722118612458,
  "byte_19": 0.0039164490861618795,
  "byte_16": 0.019022752704214847,
  "byte_17": 0.0029839612085042896,
  "byte_90": 0.041588959343528534,
  "byte_61": 0.03991048116374487,
  "byte_14": 0.00969787392763894,
  "byte_bd": 0.0005594927265945542,
  "byte_34": 0.005594927265945543,
  "byte_39": 0.0005594927265945542,
  "byte_f3": 0.0013054830287206266,
  "byte_04": 0.013614323013800821,
  "byte_36": 0.0009324878776575904,
  "byte_10": 0.006154419992540097,
  "byte_31": 0.0007459903021260724,
  "byte_57": 0.02424468481909735,
  "byte_ff": 0.033942558746736295,
  "byte_7c": 0.0007459903021260724,
  "byte_35": 0.005408429690414025,
  "byte_ae": 0.0005594927265945542,
  "byte_a5": 0.0007459903021260724,
  "byte_9b": 0.0003729951510630362,
  "byte_81": 0.03021260723610593,
  "byte_1e": 0.0003729951510630362,
  "byte_6b": 0.0007459903021260724,
  "byte_4c": 0.0001864975755315181,
  "byte_6f": 0.0007459903021260724,
  "byte_50": 0.021074226035061545,
  "byte_25": 0.0005594927265945542,
  "byte_d5": 0.0013054830287206266,
  "byte_97": 0.0007459903021260724,
  "byte_1f": 0.0007459903021260724,
  "byte_68": 0.0005594927265945542,
  "byte_d6": 0.0007459903021260724,
  "byte_09": 0.002051473330846699,
  "byte_ac": 0.0005594927265945542,
  "byte_47": 0.0005594927265945542,
  "byte_f9": 0.0013054830287206266,
  "byte_aa": 0.0005594927265945542,
  "byte_9f": 0.0003729951510630362,
  "byte_b8": 0.0003729951510630362,
  "byte_4b": 0.0001864975755315181,
  "byte_d3": 0.0007459903021260724,
  "byte_b4": 0.0003729951510630362,
  "byte_c6": 0.0005594927265945542,
  "byte_4f": 0.0007459903021260724,
  "byte_32": 0.0005594927265945542,
  "byte_2a": 0.0005594927265945542,
  "byte_18": 0.0014919806042521448,
  "byte_6c": 0.0009324878776575904,
  "byte_99": 0.0013054830287206266,
  "byte_42": 0.001864975755315181,
  "byte_64": 0.0007459903021260724,
  "byte_05": 0.004662439388287952,
  "byte_8e": 0.0005594927265945542,
  "byte_66": 0.0003729951510630362,
  "byte_71": 0.0007459903021260724,
  "byte_a6": 0.0005594927265945542,
  "byte_d7": 0.0001864975755315181,
  "byte_8d": 0.0003729951510630362,
  "byte_cb": 0.0003729951510630362,
  "byte_5b": 0.03263707571801567,
  "byte_ec": 0.0007459903021260724,
  "byte_94": 0.002237970906378217,
  "byte_c4": 0.0007459903021260724,
  "byte_67": 0.0007459903021260724,
  "byte_d0": 0.0005594927265945542,
  "byte_1d": 0.0005594927265945542,
  "byte_fc": 0.0011189854531891085,
  "byte_3a": 0.0007459903021260724,
  "byte_3e": 0.0014919806042521448,
  "byte_c1": 0.0005594927265945542,
  "byte_49": 0.0011189854531891085,
  "byte_a9": 0.0005594927265945542,
  "byte_9c": 0.0009324878776575904,
  "byte_bb": 0.0007459903021260724,
  "byte_70": 0.0005594927265945542,
  "byte_b6": 0.0005594927265945542,
  "byte_0e": 0.0011189854531891085,
  "byte_73": 0.0016784781797836627,
  "byte_db": 0.0007459903021260724,
  "byte_69": 0.0005594927265945542,
  "byte_9a": 0.0007459903021260724,
  "byte_07": 0.0031704587840358073,
  "byte_c3": 0.0007459903021260724,
  "byte_1c": 0.0003729951510630362,
  "byte_ca": 0.0011189854531891085,
  "byte_5c": 0.0005594927265945542,
  "byte_43": 0.0001864975755315181,
  "byte_d4": 0.0003729951510630362,
  "byte_2d": 0.0005594927265945542,
  "byte_e4": 0.0005594927265945542,
  "byte_29": 0.0007459903021260724,
  "byte_ce": 0.0001864975755315181,
  "byte_f1": 0.0011189854531891085,
  "byte_7f": 0.0026109660574412533,
  "byte_e9": 0.0009324878776575904,
  "byte_44": 0.0009324878776575904,
  "byte_5d": 0.0007459903021260724,
  "byte_5a": 0.0011189854531891085,
  "byte_f2": 0.0007459903021260724,
  "byte_fd": 0.011562849682954122,
  "byte_e3": 0.0005594927265945542,
  "byte_8b": 0.0009324878776575904,
  "byte_b1": 0.0009324878776575904,
  "byte_15": 0.019022752704214847,
  "byte_4e": 0.0033569563595673255,
  "byte_d2": 0.0003729951510630362,
  "byte_56": 0.012122342409548676,
  "byte_dd": 0.0003729951510630362,
  "byte_74": 0.0007459903021260724,
  "byte_fe": 0.006340917568071615,
  "byte_8c": 0.0005594927265945542,
  "byte_a4": 0.0014919806042521448,
  "byte_24": 0.0014919806042521448,
  "byte_51": 0.00988437150317046,
  "byte_91": 0.017903767251025736,
  "byte_82": 0.013241327862737785,
  "byte_20": 0.025177172696754943,
  "byte_d9": 0.0003729951510630362,
  "byte_8a": 0.0007459903021260724,
  "byte_85": 0.005221932114882507,
  "byte_93": 0.0026109660574412533,
  "byte_83": 0.008578888474449832,
  "byte_be": 0.0001864975755315181,
  "byte_08": 0.005967922417008579,
  "byte_6a": 0.0005594927265945542,
  "byte_72": 0.0003729951510630362,
  "byte_87": 0.0016784781797836627,
  "byte_92": 0.006900410294666169,
  "byte_ab": 0.0003729951510630362,
  "byte_4a": 0.0001864975755315181,
  "byte_f8": 0.0009324878776575904,
  "byte_c5": 0.0005594927265945542,
  "byte_53": 0.0005594927265945542,
  "byte_5e": 0.0009324878776575904,
  "byte_0c": 0.0011189854531891085,
  "byte_0d": 0.002051473330846699,
  "byte_38": 0.0005594927265945542,
  "byte_89": 0.0003729951510630362,
  "byte_11": 0.005594927265945543,
  "byte_bc": 0.0001864975755315181,
  "byte_98": 0.0007459903021260724,
  "byte_88": 0.002237970906378217,
  "byte_96": 0.0007459903021260724,
  "byte_86": 0.0026109660574412533,
  "byte_c0": 0.0009324878776575904,
  "byte_84": 0.00988437150317046,
  "byte_e0": 0.0009324878776575904,
  "byte_13": 0.001864975755315181,
  "byte_28": 0.0007459903021260724,
  "byte_0f": 0.0013054830287206266,
  "byte_e5": 0.0001864975755315181,
  "byte_12": 0.0016784781797836627,
  "byte_22": 0.0013054830287206266,
  "byte_30": 0.0007459903021260724,
  "byte_3c": 0.0005594927265945542,
  "byte_e8": 0.0003729951510630362,
  "byte_b5": 0.0005594927265945542,
  "byte_cf": 0.0001864975755315181,
  "byte_c7": 0.0003729951510630362,
  "byte_d1": 0.0003729951510630362,
  "byte_e6": 0.0005594927265945542,
  "byte_ed": 0.0005594927265945542,
  "byte_b3": 0.0003729951510630362,
  "byte_59": 0.0013054830287206266,
  "byte_a2": 0.0013054830287206266,
  "byte_f4": 0.0003729951510630362,
  "byte_06": 0.002237970906378217,
  "byte_2c": 0.0005594927265945542,
  "byte_cc": 0.0001864975755315181,
  "byte_3d": 0.0016784781797836627,
  "byte_fa": 0.0007459903021260724,
  "byte_da": 0.0007459903021260724,
  "byte_41": 0.0007459903021260724,
  "byte_2f": 0.0007459903021260724,
  "byte_f7": 0.0003729951510630362,
  "byte_bf": 0.0001864975755315181,
  "byte_21": 0.0003729951510630362,
  "byte_c2": 0.0005594927265945542,
  "byte_27": 0.0005594927265945542,
  "byte_dc": 0.0007459903021260724,
  "byte_75": 0.0003729951510630362,
  "byte_5f": 0.0005594927265945542,
  "byte_1b": 0.0003729951510630362,
  "byte_7e": 0.0005594927265945542,
  "byte_79": 0.0003729951510630362,
  "byte_df": 0.0001864975755315181,
  "byte_4d": 0.0007459903021260724,
  "byte_45": 0.0001864975755315181,
  "byte_9d": 0.0005594927265945542,
  "byte_b2": 0.0003729951510630362,
  "byte_48": 0.0001864975755315181,
  "byte_58": 0.0009324878776575904,
  "byte_a8": 0.0003729951510630362,
  "byte_e7": 0.0003729951510630362,
  "byte_f0": 0.0005594927265945542,
  "byte_b7": 0.0003729951510630362,
  "byte_8f": 0.0005594927265945542,
  "byte_ad": 0.0001864975755315181,
  "byte_0b": 0.0026109660574412533,
  "byte_95": 0.0009324878776575904,
  "byte_c8": 0.0005594927265945542,
  "byte_cd": 0.0007459903021260724,
  "byte_7b": 0.0005594927265945542,
  "byte_ef": 0.0001864975755315181,
  "byte_7d": 0.0009324878776575904,
  "byte_46": 0.0003729951510630362,
  "byte_c9": 0.0005594927265945542,
  "byte_d8": 0.0005594927265945542,
  "byte_3b": 0.0005594927265945542,
  "byte_f5": 0.0001864975755315181,
  "byte_6d": 0.0003729951510630362,
  "byte_78": 0.0001864975755315181,
  "byte_26": 0.0001864975755315181,
  "byte_eb": 0.0003729951510630362,
  "byte_a3": 0.0005594927265945542,
  "byte_f6": 0.0003729951510630362,
  "byte_6e": 0.0001864975755315181,
  "byte_9e": 0.0001864975755315181,
  "byte_de": 0.0001864975755315181,
  "byte_af": 0.0003729951510630362,
  "byte_a1": 0.0001864975755315181,
  "byte_65": 0.0001864975755315181,
  "byte_7a": 0.0003729951510630362,
  "byte_fb": 0.0001864975755315181,
  "num_nodes": 12,
  "num_edges": 17,
  "avg_degree": 2.8333333333333335,
  "density": 0.12878787878787878,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 92,
  "event_nums": 62,
  "creation_block": 6035053,
  "creation_timestamp": 1532633366,
  "life_time": 784480.0,
  "duration_seconds": 11222170.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 13,
  "num_buyers": 8,
  "num_sellers": 11,
  "num_creator_transfers": 19,
  "buy_amt": 4.3999e+19,
  "sell_amt": 4.52e+19,
  "avg_value": 9.591290322580645e+17,
  "txn_per_block": 0.00011727498817689657,
  "avg_gas_limit": 375980.97826086957,
  "std_gas_limit": 1348895.259786141,
  "avg_gas_used": 72028.5,
  "std_gas_used": 159365.57576681714,
  "avg_gas_price": 4360228260.869565,
  "std_gas_price": 6247205876.479048,
  "addedauditor_num": 15,
  "auditorstaked_num": 19,
  "auditorrewarded_num": 18,
  "atinversebrah_num": 1,
  "addauditor_num": 15,
  "createaudit_num": 4,
  "stake_num": 21,
  "rewardauditor_num": 18,
  "withdrawstake_num": 4,
  "slashstake_num": 6,
  "banauditor_num": 2,
  "owner_num": 1,
  "transfer_num": 1,
  "timeline_sequence": [
    [
      6035053,
      1532633366,
      5,
      19,
      0,
      1527416,
      4200000000,
      0,
      1,
      2919726,
      1527416,
      17057017
    ],
    [
      6035066,
      1532633594,
      6,
      132,
      0,
      55554,
      1900000000,
      0,
      1,
      4637737,
      55554,
      17057004
    ],
    [
      6035068,
      1532633632,
      7,
      164,
      0,
      55554,
      1200000000,
      0,
      1,
      7918094,
      55554,
      17057002
    ],
    [
      6035070,
      1532633668,
      8,
      146,
      0,
      55554,
      1200000000,
      0,
      1,
      6347016,
      55554,
      17057000
    ],
    [
      6035110,
      1532634132,
      9,
      115,
      1500000000000000000,
      181470,
      1000000000,
      0,
      1,
      7375404,
      181470,
      17056960
    ],
    [
      6035872,
      1532645270,
      10,
      51,
      200000000000000000,
      179190,
      1100000000,
      0,
      1,
      4429706,
      119460,
      17056198
    ],
    [
      6036675,
      1532656702,
      11,
      139,
      0,
      55554,
      1300000000,
      0,
      1,
      7991135,
      55554,
      17055395
    ],
    [
      6036758,
      1532657966,
      0,
      28,
      200000000000000000,
      105006,
      41000000000,
      0,
      1,
      1092346,
      105006,
      17055312
    ],
    [
      6040733,
      1532717033,
      12,
      72,
      0,
      55554,
      1000000000,
      0,
      1,
      4001679,
      55554,
      17051337
    ],
    [
      6041155,
      1532722808,
      14,
      116,
      200000000000000000,
      157509,
      1000000000,
      0,
      1,
      5063293,
      105006,
      17050915
    ],
    [
      6057719,
      1532961195,
      13,
      124,
      0,
      55554,
      1001000000,
      0,
      1,
      7954082,
      55554,
      17034351
    ],
    [
      6057757,
      1532961810,
      14,
      114,
      0,
      55554,
      1010000000,
      0,
      1,
      6435182,
      55554,
      17034313
    ],
    [
      6058327,
      1532969999,
      3,
      52,
      200000000000000000,
      157509,
      1200000000,
      0,
      1,
      2132903,
      105006,
      17033743
    ],
    [
      6064674,
      1533062774,
      15,
      27,
      0,
      55554,
      1000000000,
      0,
      1,
      2479313,
      55554,
      17027396
    ],
    [
      6084536,
      1533353908,
      16,
      114,
      0,
      55554,
      1200000000,
      0,
      1,
      6167561,
      55554,
      17007534
    ],
    [
      6084538,
      1533353918,
      17,
      89,
      0,
      55554,
      1200000000,
      0,
      1,
      6128738,
      55554,
      17007532
    ],
    [
      6085579,
      1533368750,
      60,
      34,
      200000000000000000,
      157509,
      40000000000,
      0,
      1,
      1140394,
      105006,
      17006491
    ],
    [
      6088101,
      1533405332,
      0,
      120,
      200000000000000000,
      157509,
      1400000000,
      0,
      1,
      6703547,
      105006,
      17003969
    ],
    [
      6112142,
      1533755760,
      18,
      109,
      0,
      55554,
      10000000000,
      0,
      1,
      6024944,
      55554,
      16979928
    ],
    [
      6112931,
      1533767453,
      19,
      73,
      0,
      55554,
      5000000000,
      0,
      1,
      7074056,
      55554,
      16979139
    ],
    [
      6123421,
      1533920377,
      20,
      109,
      0,
      55554,
      8000000000,
      0,
      1,
      7431630,
      55554,
      16968649
    ],
    [
      6123428,
      1533920452,
      21,
      69,
      0,
      55554,
      8000000000,
      0,
      1,
      5357303,
      55554,
      16968642
    ],
    [
      6141908,
      1534192014,
      22,
      25,
      0,
      61432,
      5000000000,
      0,
      1,
      1768932,
      61169,
      16950162
    ],
    [
      6141913,
      1534192097,
      23,
      134,
      0,
      61432,
      4000000000,
      0,
      1,
      7025741,
      61169,
      16950157
    ],
    [
      6141915,
      1534192143,
      24,
      51,
      0,
      61432,
      3200000000,
      0,
      1,
      6236440,
      61169,
      16950155
    ],
    [
      6141917,
      1534192166,
      25,
      61,
      0,
      61432,
      3200000000,
      0,
      1,
      3104717,
      61169,
      16950153
    ],
    [
      6230229,
      1535480494,
      28,
      96,
      0,
      61432,
      2100000000,
      0,
      1,
      7800341,
      61169,
      16861841
    ],
    [
      6563871,
      1540231693,
      31,
      46,
      10000000000000000000,
      181470,
      3400000000,
      0,
      1,
      5962453,
      181470,
      16528199
    ],
    [
      6564224,
      1540236328,
      32,
      83,
      0,
      55560,
      7000000000,
      0,
      1,
      3521385,
      55554,
      16527846
    ],
    [
      6564261,
      1540237070,
      0,
      94,
      500000000000000000,
      201786,
      3300000000,
      0,
      1,
      4909591,
      134524,
      16527809
    ],
    [
      6564404,
      1540238804,
      1,
      31,
      500000000000000000,
      157605,
      5000000000,
      0,
      1,
      1301585,
      105070,
      16527666
    ],
    [
      6564559,
      1540241025,
      15,
      66,
      500000000000000000,
      157605,
      3300000000,
      0,
      1,
      3796435,
      105070,
      16527511
    ],
    [
      6565052,
      1540248286,
      17,
      39,
      500000000000000000,
      157605,
      2500000000,
      0,
      1,
      2401660,
      105070,
      16527018
    ],
    [
      6570503,
      1540324640,
      6,
      108,
      500000000000000000,
      157605,
      3000000000,
      0,
      1,
      7435363,
      105070,
      16521567
    ],
    [
      6674149,
      1541791926,
      33,
      10,
      9000000000000000000,
      181470,
      5000000000,
      0,
      1,
      6934389,
      181470,
      16417921
    ],
    [
      6674411,
      1541795678,
      16,
      144,
      500000000000000000,
      179286,
      5000000000,
      0,
      1,
      6898016,
      119524,
      16417659
    ],
    [
      6674420,
      1541795784,
      2,
      34,
      500000000000000000,
      157605,
      5000000000,
      0,
      1,
      1828434,
      105070,
      16417650
    ],
    [
      6674499,
      1541797084,
      18,
      103,
      500000000000000000,
      157605,
      5000000000,
      0,
      1,
      7198063,
      105070,
      16417571
    ],
    [
      6674564,
      1541798057,
      1,
      59,
      500000000000000000,
      157605,
      5000000000,
      0,
      1,
      4668844,
      105070,
      16417506
    ],
    [
      6674566,
      1541798065,
      2,
      19,
      500000000000000000,
      157605,
      5000000000,
      1,
      0,
      1421046,
      23927,
      16417504
    ],
    [
      6692746,
      1542054416,
      34,
      75,
      0,
      61496,
      3000000000,
      0,
      1,
      6404786,
      61233,
      16399324
    ],
    [
      6692749,
      1542054458,
      35,
      49,
      0,
      61496,
      3000000000,
      0,
      1,
      6998480,
      61233,
      16399321
    ],
    [
      6692751,
      1542054492,
      36,
      74,
      0,
      61496,
      3000000000,
      0,
      1,
      5010896,
      61233,
      16399319
    ],
    [
      6692755,
      1542054525,
      37,
      39,
      0,
      61496,
      3000000000,
      0,
      1,
      6985878,
      61233,
      16399315
    ],
    [
      6692759,
      1542054635,
      38,
      110,
      0,
      61496,
      3000000000,
      0,
      1,
      6020049,
      61233,
      16399311
    ],
    [
      6693373,
      1542062944,
      3,
      4,
      0,
      7600027,
      2000000000,
      1,
      0,
      270309,
      23310,
      16398697
    ],
    [
      6693384,
      1542063055,
      4,
      6,
      0,
      7600000,
      3000000000,
      1,
      0,
      232925,
      23246,
      16398686
    ],
    [
      6695184,
      1542088195,
      3,
      8,
      0,
      7600027,
      3000000000,
      1,
      0,
      249667,
      23310,
      16396886
    ],
    [
      6705092,
      1542229301,
      39,
      82,
      0,
      31515,
      5000000000,
      0,
      1,
      7983553,
      16515,
      16386978
    ],
    [
      6705101,
      1542229426,
      40,
      78,
      0,
      31515,
      5000000000,
      0,
      1,
      5411863,
      31515,
      16386969
    ],
    [
      6705109,
      1542229559,
      41,
      134,
      0,
      31515,
      3180000000,
      0,
      1,
      7965519,
      16515,
      16386961
    ],
    [
      6705109,
      1542229559,
      42,
      135,
      0,
      31515,
      3180000000,
      0,
      1,
      7982034,
      16515,
      16386961
    ],
    [
      6705120,
      1542229735,
      43,
      77,
      0,
      31515,
      3000000000,
      0,
      1,
      7740394,
      16515,
      16386950
    ],
    [
      6705122,
      1542229758,
      44,
      142,
      0,
      31515,
      3000000000,
      0,
      1,
      7603223,
      31515,
      16386948
    ],
    [
      6759479,
      1543000638,
      45,
      69,
      15000000000000000000,
      181470,
      5500000000,
      0,
      1,
      7197132,
      181470,
      16332591
    ],
    [
      6759567,
      1543001653,
      17,
      22,
      700000000000000000,
      143428,
      10000000000,
      0,
      1,
      1272731,
      119524,
      16332503
    ],
    [
      6759587,
      1543001823,
      4,
      80,
      700000000000000000,
      157605,
      3000000000,
      0,
      1,
      7724610,
      105070,
      16332483
    ],
    [
      6759591,
      1543001918,
      5,
      35,
      700000000000000000,
      157605,
      10000000000,
      1,
      0,
      2399864,
      26108,
      16332479
    ],
    [
      6759635,
      1543002449,
      19,
      36,
      700000000000000000,
      157605,
      5000000000,
      0,
      1,
      6622542,
      105070,
      16332435
    ],
    [
      6763389,
      1543055301,
      42,
      128,
      0,
      1000000,
      5000000000,
      1,
      0,
      6986199,
      22018,
      16328681
    ],
    [
      6764300,
      1543068102,
      7,
      126,
      700000000000000000,
      157605,
      3000000000,
      0,
      1,
      5949685,
      105070,
      16327770
    ],
    [
      6764731,
      1543073934,
      3,
      10,
      0,
      1000000,
      6000000000,
      1,
      0,
      442600,
      22018,
      16327339
    ],
    [
      6765228,
      1543081330,
      9,
      58,
      0,
      1000000,
      6000000000,
      0,
      1,
      3348204,
      22029,
      16326842
    ],
    [
      6765228,
      1543081330,
      10,
      67,
      0,
      1000000,
      6000000000,
      1,
      0,
      3601086,
      22381,
      16326842
    ],
    [
      6819385,
      1543853355,
      46,
      136,
      0,
      61496,
      10000000000,
      0,
      1,
      5846347,
      61233,
      16272685
    ],
    [
      6819390,
      1543853454,
      47,
      87,
      0,
      61496,
      10000000000,
      0,
      1,
      5749662,
      61233,
      16272680
    ],
    [
      6819392,
      1543853511,
      48,
      55,
      0,
      61496,
      12000000000,
      0,
      1,
      5827907,
      61233,
      16272678
    ],
    [
      6819392,
      1543853511,
      49,
      63,
      0,
      61496,
      12000000000,
      0,
      1,
      6295475,
      61233,
      16272678
    ],
    [
      6819476,
      1543854825,
      50,
      103,
      0,
      61432,
      9000000000,
      0,
      1,
      5397812,
      61169,
      16272594
    ],
    [
      6819486,
      1543855006,
      51,
      98,
      0,
      61432,
      9000000000,
      0,
      1,
      6815894,
      61169,
      16272584
    ],
    [
      6819487,
      1543855012,
      52,
      97,
      0,
      61496,
      9000000000,
      0,
      1,
      6776646,
      61233,
      16272583
    ],
    [
      6819492,
      1543855067,
      53,
      32,
      0,
      61496,
      9000000000,
      0,
      1,
      1260322,
      61233,
      16272578
    ],
    [
      6819533,
      1543855536,
      54,
      60,
      0,
      34322,
      7370000000,
      0,
      1,
      5352592,
      32071,
      16272537
    ],
    [
      6141908,
      1534192014,
      0,
      0,
      490000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6141913,
      1534192097,
      0,
      0,
      490000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6141915,
      1534192143,
      0,
      0,
      490000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6141917,
      1534192166,
      0,
      0,
      490000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6230229,
      1535480494,
      0,
      0,
      490000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6692746,
      1542054416,
      0,
      0,
      2000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6692749,
      1542054458,
      0,
      0,
      2000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6692751,
      1542054492,
      0,
      0,
      2000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6692755,
      1542054525,
      0,
      0,
      2000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6692759,
      1542054635,
      0,
      0,
      2000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6819385,
      1543853355,
      0,
      0,
      2300000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6819390,
      1543853454,
      0,
      0,
      2300000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6819392,
      1543853511,
      0,
      0,
      3200000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6819392,
      1543853511,
      0,
      0,
      3200000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6819476,
      1543854825,
      0,
      0,
      5200000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6819486,
      1543855006,
      0,
      0,
      5200000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6819487,
      1543855012,
      0,
      0,
      3700000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6819492,
      1543855067,
      0,
      0,
      3700000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6819533,
      1543855536,
      0,
      0,
      2749000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity 0.4.24;\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipRenounced(address indexed previousOwner);\n  event OwnershipTransferred(\n    address indexed previousOwner,\n    address indexed newOwner\n  );\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to relinquish control of the contract.\n   * @notice Renouncing to ownership will leave the contract without an owner.\n   * It will not be possible to call the functions with the `onlyOwner`\n   * modifier anymore.\n   */\n  function renounceOwnership() public onlyOwner {\n    emit OwnershipRenounced(owner);\n    owner = address(0);\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address _newOwner) public onlyOwner {\n    _transferOwnership(_newOwner);\n  }\n\n  /**\n   * @dev Transfers control of the contract to a newOwner.\n   * @param _newOwner The address to transfer ownership to.\n   */\n  function _transferOwnership(address _newOwner) internal {\n    require(_newOwner != address(0));\n    emit OwnershipTransferred(owner, _newOwner);\n    owner = _newOwner;\n  }\n}\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n    c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract BGAudit is Ownable {\n\n    using SafeMath for uint;\n\n    event AddedAuditor(address indexed auditor);\n    event BannedAuditor(address indexed auditor);\n    event AllowedAuditor(address indexed auditor);\n\n    event CreatedAudit(uint indexed id);\n    event ReviewingAudit(uint indexed id);\n    event AuditorRewarded(uint indexed id, address indexed auditor, uint indexed reward);\n\n    event AuditorStaked(uint indexed id, address indexed auditor, uint indexed amount);\n    event WithdrawedStake(uint indexed id, address indexed auditor, uint indexed amount);\n    event SlashedStake(uint indexed id, address indexed auditor);\n\n    enum AuditStatus { New, InProgress, InReview, Completed }\n\n    struct Auditor {\n        bool banned;\n        address addr;\n        uint totalEarned;\n        uint completedAudits;\n        uint[] stakedAudits; // array of audit IDs they've staked\n        mapping(uint => bool) stakedInAudit; // key is AuditID; useful so we don't need to loop through the audits array above\n        mapping(uint => bool) canWithdrawStake; // Audit ID => can withdraw stake or not\n    }\n\n    struct Audit {\n        AuditStatus status;\n        address owner;\n        uint id;\n        uint totalReward; // total reward shared b/w all auditors\n        uint remainingReward; // keep track of how much reward is left\n        uint stake; // required stake for each auditor in wei\n        uint endTime; // scheduled end time for the audit\n        uint maxAuditors; // max auditors allowed for this Audit\n        address[] participants; // array of auditor that have staked\n    }\n\n    //=== Storage\n    uint public stakePeriod = 90 days; // number of days to wait before stake can be withdrawn\n    uint public maxAuditDuration = 365 days; // max amount of time for a security audit\n    Audit[] public audits;\n    mapping(address => Auditor) public auditors;\n\n    //=== Owner related\n    function transfer(address _to, uint _amountInWei) external onlyOwner {\n        require(address(this).balance > _amountInWei);\n        _to.transfer(_amountInWei);\n    }\n\n    function setStakePeriod(uint _days) external onlyOwner {\n        stakePeriod = _days * 1 days;\n    }\n\n    function setMaxAuditDuration(uint _days) external onlyOwner {\n        maxAuditDuration = _days * 1 days;\n    }\n\n\n    //=== Auditors\n    function addAuditor(address _auditor) external onlyOwner {\n        require(auditors[_auditor].addr == address(0)); // Only add if they're not already added\n\n        auditors[_auditor].banned = false;\n        auditors[_auditor].addr = _auditor;\n        auditors[_auditor].completedAudits = 0;\n        auditors[_auditor].totalEarned = 0;\n        emit AddedAuditor(_auditor);\n    }\n\n    function banAuditor(address _auditor) external onlyOwner {\n        require(auditors[_auditor].addr != address(0));\n        auditors[_auditor].banned = true;\n        emit BannedAuditor(_auditor);\n    }\n\n    function allowAuditor(address _auditor) external onlyOwner {\n        require(auditors[_auditor].addr != address(0));\n        auditors[_auditor].banned = false;\n        emit AllowedAuditor(_auditor);\n    }\n\n\n    //=== Audits and Rewards\n    function createAudit(uint _stake, uint _endTimeInDays, uint _maxAuditors) external payable onlyOwner {\n        uint endTime = _endTimeInDays * 1 days;\n        require(endTime < maxAuditDuration);\n        require(block.timestamp + endTime * 1 days > block.timestamp);\n        require(msg.value > 0 && _maxAuditors > 0 && _stake > 0);\n\n        Audit memory audit;\n        audit.status = AuditStatus.New;\n        audit.owner = msg.sender;\n        audit.id = audits.length;\n        audit.totalReward = msg.value;\n        audit.remainingReward = audit.totalReward;\n        audit.stake = _stake;\n        audit.endTime = block.timestamp + endTime;\n        audit.maxAuditors = _maxAuditors;\n\n        audits.push(audit); // push into storage\n        emit CreatedAudit(audit.id);\n    }\n\n    function reviewAudit(uint _id) external onlyOwner {\n        require(audits[_id].status == AuditStatus.InProgress);\n        require(block.timestamp >= audits[_id].endTime);\n        audits[_id].endTime = block.timestamp; // override the endTime to when it actually ended\n        audits[_id].status = AuditStatus.InReview;\n        emit ReviewingAudit(_id);\n    }\n\n    function rewardAuditor(uint _id, address _auditor, uint _reward) external onlyOwner {\n\n        audits[_id].remainingReward.sub(_reward);\n        audits[_id].status = AuditStatus.Completed;\n\n        auditors[_auditor].totalEarned.add(_reward);\n        auditors[_auditor].completedAudits.add(1);\n        auditors[_auditor].canWithdrawStake[_id] = true; // allow them to withdraw their stake after stakePeriod\n        _auditor.transfer(_reward);\n        emit AuditorRewarded(_id, _auditor, _reward);\n    }\n\n    function slashStake(uint _id, address _auditor) external onlyOwner {\n        require(auditors[_auditor].addr != address(0));\n        require(auditors[_auditor].stakedInAudit[_id]); // participated in audit\n        auditors[_auditor].canWithdrawStake[_id] = false;\n        emit SlashedStake(_id, _auditor);\n    }\n\n    //=== User Actions\n    function stake(uint _id) public payable {\n        // Check conditions of the Audit\n        require(msg.value == audits[_id].stake);\n        require(block.timestamp < audits[_id].endTime);\n        require(audits[_id].participants.length < audits[_id].maxAuditors);\n        require(audits[_id].status == AuditStatus.New || audits[_id].status == AuditStatus.InProgress);\n\n        // Check conditions of the Auditor\n        require(auditors[msg.sender].addr == msg.sender && !auditors[msg.sender].banned); // auditor is authorized\n        require(!auditors[msg.sender].stakedInAudit[_id]); //check if auditor has staked for this audit already\n\n        // Update audit's states\n        audits[_id].status = AuditStatus.InProgress;\n        audits[_id].participants.push(msg.sender);\n\n        // Update auditor's states\n        auditors[msg.sender].stakedInAudit[_id] = true;\n        auditors[msg.sender].stakedAudits.push(_id);\n        emit AuditorStaked(_id, msg.sender, msg.value);\n    }\n\n    function withdrawStake(uint _id) public {\n        require(audits[_id].status == AuditStatus.Completed);\n        require(auditors[msg.sender].canWithdrawStake[_id]);\n        require(block.timestamp >= audits[_id].endTime + stakePeriod);\n\n        auditors[msg.sender].canWithdrawStake[_id] = false; //prevent replay attack\n        address(msg.sender).transfer(audits[_id].stake); // do this last to prevent re-entrancy\n        emit WithdrawedStake(_id, msg.sender, audits[_id].stake);\n    }\n\n    //=== Getters\n    function auditorHasStaked(uint _id, address _auditor) public view returns(bool) {\n        return auditors[_auditor].stakedInAudit[_id];\n    }\n\n    function auditorCanWithdrawStake(uint _id, address _auditor) public view returns(bool) {\n        if(auditors[_auditor].stakedInAudit[_id] && auditors[_auditor].canWithdrawStake[_id]) {\n            return true;\n        }\n        return false;\n    }\n\n    // return a list of ids that _auditor has staked in\n    function getStakedAudits(address _auditor) public view returns(uint[]) {\n        return auditors[_auditor].stakedAudits;\n    }\n\n    // return a list of auditors that participated in this audit\n    function getAuditors(uint _id) public view returns(address[]) {\n        return audits[_id].participants;\n    }\n}"
}