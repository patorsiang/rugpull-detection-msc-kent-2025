{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH3 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 CALLVALUE PUSH1 PUSH2 JUMP JUMPDEST POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 CALLER DUP2 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 PUSH2 DUP13 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 JUMP JUMPDEST SWAP7 POP PUSH2 PUSH2 DUP9 PUSH1 PUSH2 JUMP JUMPDEST SWAP6 POP PUSH2 DUP8 DUP8 PUSH2 JUMP JUMPDEST SWAP5 POP PUSH2 DUP12 DUP9 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH9 DUP6 MUL SWAP2 POP PUSH1 DUP4 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 DUP5 DUP3 PUSH2 JUMP JUMPDEST GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP11 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP DUP8 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP11 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP12 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP8 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP12 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP6 DUP8 PUSH2 JUMP JUMPDEST SWAP5 POP PUSH9 DUP6 MUL SWAP2 POP JUMPDEST PUSH1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH9 DUP7 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 SLOAD PUSH9 DUP7 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP4 MUL DUP3 SUB DUP3 SUB SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 DUP4 SWAP1 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP11 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP6 SWAP1 SWAP6 SSTORE PUSH1 SLOAD PUSH1 SWAP1 SWAP2 MSTORE SWAP4 SWAP1 SHA3 DUP1 SLOAD SWAP4 DUP8 MUL DUP7 SWAP1 SUB SWAP4 DUP5 ADD SWAP1 SSTORE SWAP2 SWAP3 POP DUP12 AND SWAP1 PUSH32 DUP14 DUP7 TIMESTAMP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP SWAP1 SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SHA3 SLOAD PUSH1 SLOAD PUSH9 SWAP2 MUL SWAP2 SWAP1 SWAP2 SUB DIV SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 PUSH2 PUSH2 DUP7 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP6 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SLOAD DUP6 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH2 DUP5 PUSH1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH1 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER SWAP2 POP PUSH2 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH9 DUP8 MUL ADD SWAP1 SSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE SWAP1 MLOAD SWAP4 ADD SWAP4 POP SWAP1 SWAP2 DUP4 ISZERO PUSH2 MUL SWAP2 DUP5 SWAP2 SWAP1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SLOAD PUSH1 EQ ISZERO PUSH2 JUMPI PUSH5 SWAP4 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH8 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH2 DUP5 PUSH1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 SWAP4 POP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 CALLER DUP3 PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 DUP3 PUSH2 JUMP JUMPDEST ADD JUMPDEST SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST ADDRESS BALANCE SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SLOAD PUSH1 EQ ISZERO PUSH2 JUMPI PUSH5 SWAP4 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH8 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH2 DUP5 PUSH1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP5 DUP7 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP5 POP DUP7 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 PUSH1 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 DUP8 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP7 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 PUSH1 SLOAD DUP5 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP8 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP10 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP9 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP6 SWAP1 SWAP6 SSTORE PUSH1 DUP1 SLOAD SWAP5 DUP11 AND DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP5 DUP3 SHA3 DUP1 SLOAD SWAP5 DUP13 MUL SWAP1 SWAP5 SUB SWAP1 SWAP4 SSTORE DUP3 SLOAD SWAP2 DUP2 MSTORE SWAP3 SWAP1 SWAP3 SHA3 DUP1 SLOAD SWAP3 DUP6 MUL SWAP1 SWAP3 ADD SWAP1 SWAP2 SSTORE SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH9 DUP5 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP11 AND SWAP3 SWAP1 DUP8 AND SWAP2 PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP PUSH1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP7 POP DUP8 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP7 SWAP5 POP PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 PUSH2 DUP6 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 SLOAD DUP7 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SLOAD PUSH1 SWAP1 SWAP2 MSTORE SWAP2 DUP2 SHA3 DUP1 SLOAD SWAP3 DUP9 MUL PUSH9 DUP7 MUL ADD SWAP3 DUP4 SWAP1 SUB SWAP1 SSTORE PUSH1 SLOAD SWAP2 SWAP3 POP LT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH9 DUP7 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SSTORE JUMPDEST DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP7 DUP5 TIMESTAMP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH2 CALLVALUE DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH2 PUSH1 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH9 DUP8 MUL ADD SWAP1 SSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP2 SHA3 DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP5 POP SWAP3 POP PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP5 DUP4 PUSH1 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP4 ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH13 SWAP1 DUP3 SWAP1 PUSH5 PUSH2 PUSH2 PUSH20 DUP9 MUL PUSH9 PUSH1 DUP7 EXP MUL ADD PUSH17 DUP6 MUL ADD PUSH25 ADD PUSH2 JUMP JUMPDEST DUP6 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SUB SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH8 DUP4 DUP2 ADD SWAP2 DUP2 ADD SWAP1 DUP4 SWAP1 PUSH2 PUSH5 DUP3 DUP6 DIV PUSH5 MUL ADD DUP8 MUL PUSH1 DUP4 PUSH8 NOT DUP3 DUP10 EXP DUP12 SWAP1 SUB ADD DIV PUSH5 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 PUSH1 DUP3 ADD DIV JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP1 SWAP2 POP PUSH1 DUP2 DUP3 DUP6 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV ADD DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP PUSH2 JUMP STOP LOG1 PUSH6 SHA3 DUP10 SWAP10 UNKNOWN_0xa7 NOT LOG4 CHAINID GASPRICE RETURN SWAP14 NUMBER ADD PC SWAP12 UNKNOWN_0x2d INVALID_0x7c",
  "opcode_entropy": 4.9201646896282885,
  "opcode_count": 2560,
  "unique_opcodes": 84,
  "byte_entropy": 6.012230107028176,
  "byte_60": 0.08667004561581348,
  "byte_80": 0.040293968575772936,
  "byte_40": 0.008616320324379118,
  "byte_52": 0.01900658895083629,
  "byte_04": 0.013684744044602128,
  "byte_36": 0.0010136847440446021,
  "byte_10": 0.002787633046122656,
  "byte_61": 0.06588950836289914,
  "byte_01": 0.03573238722757222,
  "byte_57": 0.021287379624936646,
  "byte_63": 0.005828687278256462,
  "byte_ff": 0.0030410542321338066,
  "byte_7c": 0.0005068423720223011,
  "byte_00": 0.06183476938672073,
  "byte_35": 0.002787633046122656,
  "byte_16": 0.010643689812468323,
  "byte_62": 0.0007602635580334517,
  "byte_65": 0.0005068423720223011,
  "byte_31": 0.0010136847440446021,
  "byte_8b": 0.0015205271160669033,
  "byte_81": 0.0240750126710593,
  "byte_14": 0.007349214394323365,
  "byte_1e": 0.0007602635580334517,
  "byte_06": 0.00937658388241257,
  "byte_fd": 0.008109477952356817,
  "byte_de": 0.0007602635580334517,
  "byte_03": 0.023568170299037,
  "byte_51": 0.006842372022301064,
  "byte_d0": 0.0005068423720223011,
  "byte_dd": 0.0007602635580334517,
  "byte_db": 0.0012671059300557526,
  "byte_18": 0.00025342118601115053,
  "byte_0d": 0.00963000506842372,
  "byte_f3": 0.0015205271160669033,
  "byte_22": 0.0010136847440446021,
  "byte_93": 0.006842372022301064,
  "byte_73": 0.0012671059300557526,
  "byte_02": 0.02280790674100355,
  "byte_08": 0.007602635580334516,
  "byte_3c": 0.0012671059300557526,
  "byte_e5": 0.0005068423720223011,
  "byte_67": 0.0012671059300557526,
  "byte_20": 0.017486061834769386,
  "byte_cf": 0.00025342118601115053,
  "byte_d6": 0.0005068423720223011,
  "byte_0b": 0.003801317790167258,
  "byte_4b": 0.0010136847440446021,
  "byte_75": 0.0012671059300557526,
  "byte_34": 0.005575266092245312,
  "byte_56": 0.027622909275215407,
  "byte_d3": 0.0010136847440446021,
  "byte_99": 0.0010136847440446021,
  "byte_e8": 0.0010136847440446021,
  "byte_77": 0.0005068423720223011,
  "byte_68": 0.0040547389761784085,
  "byte_8a": 0.002280790674100355,
  "byte_bb": 0.0010136847440446021,
  "byte_f7": 0.00025342118601115053,
  "byte_8c": 0.0007602635580334517,
  "byte_6b": 0.0015205271160669033,
  "byte_2f": 0.00025342118601115053,
  "byte_46": 0.0010136847440446021,
  "byte_32": 0.0015205271160669033,
  "byte_a6": 0.0005068423720223011,
  "byte_70": 0.0005068423720223011,
  "byte_a0": 0.007856056766345666,
  "byte_82": 0.011150532184490624,
  "byte_86": 0.00506842372022301,
  "byte_41": 0.0005068423720223011,
  "byte_dc": 0.0005068423720223011,
  "byte_94": 0.00481500253421186,
  "byte_9e": 0.0005068423720223011,
  "byte_cd": 0.002534211860111505,
  "byte_f1": 0.0015205271160669033,
  "byte_95": 0.002787633046122656,
  "byte_d8": 0.0012671059300557526,
  "byte_9b": 0.0010136847440446021,
  "byte_a9": 0.0012671059300557526,
  "byte_05": 0.00456158134820071,
  "byte_9c": 0.0005068423720223011,
  "byte_1b": 0.0007602635580334517,
  "byte_e4": 0.0053218449062341616,
  "byte_84": 0.008362899138367968,
  "byte_53": 0.0007602635580334517,
  "byte_e9": 0.0007602635580334517,
  "byte_fa": 0.00025342118601115053,
  "byte_ee": 0.00025342118601115053,
  "byte_f0": 0.0010136847440446021,
  "byte_88": 0.002787633046122656,
  "byte_d5": 0.0007602635580334517,
  "byte_47": 0.0007602635580334517,
  "byte_b5": 0.0005068423720223011,
  "byte_3e": 0.0010136847440446021,
  "byte_5b": 0.043841865179929045,
  "byte_50": 0.03775975671566143,
  "byte_15": 0.02027369488089204,
  "byte_2a": 0.0005068423720223011,
  "byte_3f": 0.0035478966041561076,
  "byte_0a": 0.009883426254434871,
  "byte_0c": 0.003801317790167258,
  "byte_91": 0.015458692346680182,
  "byte_90": 0.03775975671566143,
  "byte_5d": 0.0005068423720223011,
  "byte_66": 0.0005068423720223011,
  "byte_83": 0.01419158641662443,
  "byte_92": 0.007602635580334516,
  "byte_85": 0.005575266092245312,
  "byte_1f": 0.0017739483020780538,
  "byte_19": 0.0017739483020780538,
  "byte_e7": 0.00025342118601115053,
  "byte_07": 0.005828687278256462,
  "byte_0e": 0.005575266092245312,
  "byte_2c": 0.0005068423720223011,
  "byte_4a": 0.0007602635580334517,
  "byte_4f": 0.0010136847440446021,
  "byte_6e": 0.0005068423720223011,
  "byte_79": 0.0005068423720223011,
  "byte_98": 0.0005068423720223011,
  "byte_7f": 0.0030410542321338066,
  "byte_b2": 0.00025342118601115053,
  "byte_c2": 0.0010136847440446021,
  "byte_c7": 0.0012671059300557526,
  "byte_e2": 0.0010136847440446021,
  "byte_09": 0.00456158134820071,
  "byte_2d": 0.0015205271160669033,
  "byte_12": 0.0017739483020780538,
  "byte_27": 0.0005068423720223011,
  "byte_24": 0.0005068423720223011,
  "byte_5f": 0.00025342118601115053,
  "byte_a8": 0.0005068423720223011,
  "byte_e1": 0.0005068423720223011,
  "byte_33": 0.002280790674100355,
  "byte_c8": 0.0005068423720223011,
  "byte_c1": 0.002534211860111505,
  "byte_97": 0.002787633046122656,
  "byte_64": 0.002787633046122656,
  "byte_96": 0.0007602635580334517,
  "byte_21": 0.0005068423720223011,
  "byte_87": 0.0040547389761784085,
  "byte_fb": 0.0007602635580334517,
  "byte_f6": 0.0010136847440446021,
  "byte_11": 0.003801317790167258,
  "byte_25": 0.0005068423720223011,
  "byte_54": 0.01444500760263558,
  "byte_23": 0.0005068423720223011,
  "byte_8e": 0.0020273694880892043,
  "byte_30": 0.0010136847440446021,
  "byte_5a": 0.0005068423720223011,
  "byte_c6": 0.0007602635580334517,
  "byte_55": 0.005575266092245312,
  "byte_45": 0.00025342118601115053,
  "byte_f8": 0.0005068423720223011,
  "byte_fe": 0.0035478966041561076,
  "byte_37": 0.0007602635580334517,
  "byte_28": 0.0005068423720223011,
  "byte_9d": 0.0017739483020780538,
  "byte_7a": 0.0010136847440446021,
  "byte_ec": 0.0007602635580334517,
  "byte_b6": 0.0012671059300557526,
  "byte_29": 0.0005068423720223011,
  "byte_0f": 0.0017739483020780538,
  "byte_b7": 0.0010136847440446021,
  "byte_e6": 0.00025342118601115053,
  "byte_ab": 0.0007602635580334517,
  "byte_8d": 0.0007602635580334517,
  "byte_42": 0.0005068423720223011,
  "byte_a3": 0.0005068423720223011,
  "byte_a2": 0.0012671059300557526,
  "byte_b0": 0.0005068423720223011,
  "byte_f4": 0.0007602635580334517,
  "byte_2e": 0.0005068423720223011,
  "byte_5e": 0.0007602635580334517,
  "byte_fc": 0.0005068423720223011,
  "byte_3d": 0.0012671059300557526,
  "byte_cc": 0.0005068423720223011,
  "byte_ad": 0.0007602635580334517,
  "byte_7d": 0.00025342118601115053,
  "byte_89": 0.0012671059300557526,
  "byte_43": 0.0007602635580334517,
  "byte_78": 0.0012671059300557526,
  "byte_bd": 0.0007602635580334517,
  "byte_71": 0.00025342118601115053,
  "byte_c9": 0.0010136847440446021,
  "byte_6d": 0.0010136847440446021,
  "byte_e0": 0.0012671059300557526,
  "byte_b3": 0.0012671059300557526,
  "byte_a7": 0.0015205271160669033,
  "byte_b9": 0.00025342118601115053,
  "byte_39": 0.00025342118601115053,
  "byte_aa": 0.0007602635580334517,
  "byte_b4": 0.0005068423720223011,
  "byte_df": 0.0007602635580334517,
  "byte_ed": 0.0005068423720223011,
  "byte_e3": 0.0005068423720223011,
  "byte_f2": 0.0005068423720223011,
  "byte_69": 0.00025342118601115053,
  "byte_2b": 0.0007602635580334517,
  "byte_c4": 0.00025342118601115053,
  "byte_a1": 0.0007602635580334517,
  "byte_f5": 0.0007602635580334517,
  "byte_4d": 0.0005068423720223011,
  "byte_ef": 0.00025342118601115053,
  "byte_59": 0.0007602635580334517,
  "byte_ae": 0.0005068423720223011,
  "byte_d4": 0.0007602635580334517,
  "byte_44": 0.00025342118601115053,
  "byte_3a": 0.0005068423720223011,
  "byte_6a": 0.00025342118601115053,
  "byte_c0": 0.00025342118601115053,
  "byte_b1": 0.00025342118601115053,
  "byte_d1": 0.00025342118601115053,
  "byte_bc": 0.0005068423720223011,
  "byte_be": 0.0007602635580334517,
  "byte_9f": 0.00025342118601115053,
  "byte_1c": 0.00025342118601115053,
  "byte_d2": 0.00025342118601115053,
  "byte_58": 0.0010136847440446021,
  "byte_ba": 0.00025342118601115053,
  "byte_6c": 0.00025342118601115053,
  "byte_72": 0.0005068423720223011,
  "byte_17": 0.00025342118601115053,
  "byte_ca": 0.0005068423720223011,
  "byte_7b": 0.00025342118601115053,
  "byte_76": 0.00025342118601115053,
  "byte_a4": 0.00025342118601115053,
  "byte_7e": 0.00025342118601115053,
  "num_nodes": 5,
  "num_edges": 8,
  "avg_degree": 3.2,
  "density": 0.4,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 13,
  "event_nums": 12,
  "creation_block": 6642072,
  "creation_timestamp": 1541336521,
  "life_time": 1885.0,
  "duration_seconds": 26961.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 6,
  "num_buyers": 5,
  "num_sellers": 5,
  "num_creator_transfers": 4,
  "buy_amt": 5.592858401390714e+17,
  "sell_amt": 5.6e+17,
  "avg_value": 7.994898858136226e+16,
  "txn_per_block": 0.006892895015906681,
  "avg_gas_limit": 225383.61538461538,
  "std_gas_limit": 306575.56507818087,
  "avg_gas_used": 136401.53846153847,
  "std_gas_used": 302400.7906182723,
  "avg_gas_price": 6538461538.461538,
  "std_gas_price": 5183040162.437851,
  "ontokenpurchase_num": 4,
  "ontokensell_num": 4,
  "onwithdraw_num": 4,
  "exit_num": 4,
  "timeline_sequence": [
    [
      6642072,
      1541336521,
      0,
      13,
      0,
      1175629,
      15000000000,
      0,
      1,
      1707759,
      1175629,
      16478996
    ],
    [
      6642097,
      1541336836,
      33,
      29,
      200000000000000000,
      400000,
      15000000000,
      0,
      1,
      1950726,
      101495,
      16478971
    ],
    [
      6642106,
      1541336921,
      1,
      76,
      30000000000000000,
      400000,
      10000000000,
      0,
      1,
      3834774,
      92327,
      16478962
    ],
    [
      6642261,
      1541338998,
      1,
      46,
      130000000000000000,
      200000,
      8000000000,
      0,
      1,
      2336622,
      92448,
      16478807
    ],
    [
      6642464,
      1541341689,
      256,
      61,
      200000000000000000,
      300000,
      9000000000,
      0,
      1,
      3807448,
      92448,
      16478604
    ],
    [
      6643328,
      1541354815,
      34,
      63,
      0,
      108061,
      10000000000,
      0,
      1,
      3018214,
      56316,
      16477740
    ],
    [
      6643336,
      1541354975,
      260,
      80,
      0,
      108061,
      7000000000,
      0,
      1,
      7054188,
      56316,
      16477732
    ],
    [
      6643355,
      1541355272,
      2,
      50,
      0,
      130561,
      6000000000,
      0,
      1,
      2098064,
      71316,
      16477713
    ],
    [
      6643957,
      1541363482,
      2,
      55,
      0,
      98475,
      5000000000,
      0,
      1,
      3225526,
      34925,
      16477111
    ],
    [
      6643328,
      1541354815,
      0,
      0,
      449427980293838603,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6643336,
      1541354975,
      0,
      0,
      70606942432704680,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6643355,
      1541355272,
      0,
      0,
      11774636268735780,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6643957,
      1541363482,
      0,
      0,
      27476281143792331,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.25;\n/*\n* [\u2713] 4% Withdraw fee\n* [\u2713] 10% Deposit fee\n* [\u2713] 1% Token transfer\n* [\u2713] 33% Referal link\n\n*/\n\ncontract CryptoMoonProject {\n\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n);\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n);\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n);\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n);\n\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n);\n\n    string public name = \"CryptoMoonProject\";\n    string public symbol = \"CMP\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal entryFee_ = 10;\n    uint8 constant internal transferFee_ = 1;\n    uint8 constant internal exitFee_ = 4;\n    uint8 constant internal refferalFee_ = 33;\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2 ** 64;\n    uint256 public stakingRequirement = 50e18;\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n\n    function buy(address _referredBy) public payable returns (uint256) {\n        purchaseTokens(msg.value, _referredBy);\n    }\n\n    function() payable public {\n        purchaseTokens(msg.value, 0x0);\n    }\n\n    function reinvest() onlyStronghands public {\n        uint256 _dividends = myDividends(false);\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    function exit() public {\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n        withdraw();\n    }\n\n    function withdraw() onlyStronghands public {\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false);\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        _customerAddress.transfer(_dividends);\n        emit onWithdraw(_customerAddress, _dividends);\n    }\n\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        address _customerAddress = msg.sender;\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        if (tokenSupply_ > 0) {\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n    }\n\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\n        address _customerAddress = msg.sender;\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        if (myDividends(true) > 0) {\n            withdraw();\n        }\n\n        uint256 _tokenFee = SafeMath.div(SafeMath.mul(_amountOfTokens, transferFee_), 100);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        emit Transfer(_customerAddress, _toAddress, _taxedTokens);\n        return true;\n    }\n\n\n    function totalEthereumBalance() public view returns (uint256) {\n        return address (this).balance;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    function sellPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    function buyPrice() public view returns (uint256) {\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n\n        return _amountOfTokens;\n    }\n\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy) internal returns (uint256) {\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n        if (\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n            _referredBy != _customerAddress &&\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ) {\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        if (tokenSupply_ > 0) {\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n\n        return _amountOfTokens;\n    }\n\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n            (\n                (\n                    SafeMath.sub(\n                        (sqrt\n                            (\n                                (_tokenPriceInitial ** 2)\n                                +\n                                (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n                                +\n                                ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\n                                +\n                                (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\n                            )\n                        ), _tokenPriceInitial\n                    )\n                ) / (tokenPriceIncremental_)\n            ) - (tokenSupply_);\n\n        return _tokensReceived;\n    }\n\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n            (\n                SafeMath.sub(\n                    (\n                        (\n                            (\n                                tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n                            ) - tokenPriceIncremental_\n                        ) * (tokens_ - 1e18)\n                    ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n                )\n                / 1e18);\n\n        return _etherReceived;\n    }\n\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n\n}\n\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a / b;\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}"
}