{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH20 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP4 PUSH20 AND PUSH4 DUP5 DUP5 PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST GAS CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP1 POP PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD SWAP1 PUSH1 MUL NOT AND SWAP1 SSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD SWAP1 PUSH20 MUL NOT AND SWAP1 SSTORE PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 MLOAD DUP6 MLOAD EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP5 MLOAD SWAP2 POP PUSH1 SWAP1 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH2 CALLER DUP7 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH2 JUMP JUMPDEST POP DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP6 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD SWAP1 PUSH1 MUL NOT AND SWAP1 SSTORE DUP4 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH20 AND PUSH32 PUSH1 PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 DUP7 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP DUP4 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH20 AND PUSH32 PUSH1 PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP2 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 DUP2 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH32 DUP3 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD SWAP1 PUSH1 MUL NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 DUP3 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH20 SWAP1 POP PUSH2 DUP3 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD SWAP1 PUSH1 MUL NOT AND SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 SUB SWAP1 POP DUP3 DUP2 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 ADD SWAP1 POP DUP3 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP3 EQ ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 MUL SWAP1 POP PUSH1 DUP4 EQ DUP1 PUSH2 JUMPI POP DUP2 DUP4 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 SWAP5 UNKNOWN_0x5c UNKNOWN_0x5c DUP9 GT MULMOD UNKNOWN_0xce UNKNOWN_0x24 UNKNOWN_0xb3 SIGNEXTEND INVALID_0x7a",
  "opcode_entropy": 4.722799571088083,
  "opcode_count": 3428,
  "unique_opcodes": 64,
  "byte_entropy": 4.804148346337918,
  "byte_60": 0.06720890410958905,
  "byte_40": 0.010844748858447488,
  "byte_52": 0.014412100456621004,
  "byte_04": 0.008561643835616438,
  "byte_36": 0.0005707762557077625,
  "byte_10": 0.0024257990867579907,
  "byte_61": 0.027968036529680364,
  "byte_01": 0.032248858447488586,
  "byte_33": 0.002711187214611872,
  "byte_57": 0.012557077625570776,
  "byte_00": 0.043949771689497714,
  "byte_35": 0.0045662100456621,
  "byte_7c": 0.0004280821917808219,
  "byte_90": 0.04123858447488585,
  "byte_63": 0.005136986301369863,
  "byte_ff": 0.3134988584474886,
  "byte_16": 0.020833333333333332,
  "byte_80": 0.03210616438356165,
  "byte_06": 0.001997716894977169,
  "byte_fd": 0.007277397260273972,
  "byte_de": 0.00028538812785388126,
  "byte_03": 0.008561643835616438,
  "byte_14": 0.006563926940639269,
  "byte_09": 0.0009988584474885844,
  "byte_5e": 0.0005707762557077625,
  "byte_a7": 0.00028538812785388126,
  "byte_b3": 0.0007134703196347032,
  "byte_c3": 0.0007134703196347032,
  "byte_0b": 0.0007134703196347032,
  "byte_7a": 0.0007134703196347032,
  "byte_bf": 0.00028538812785388126,
  "byte_77": 0.00028538812785388126,
  "byte_02": 0.007990867579908675,
  "byte_1d": 0.0004280821917808219,
  "byte_11": 0.0018550228310502282,
  "byte_78": 0.00028538812785388126,
  "byte_e3": 0.0004280821917808219,
  "byte_46": 0.0004280821917808219,
  "byte_18": 0.00228310502283105,
  "byte_0d": 0.001141552511415525,
  "byte_dd": 0.0012842465753424657,
  "byte_9b": 0.0008561643835616438,
  "byte_23": 0.0005707762557077625,
  "byte_b8": 0.00028538812785388126,
  "byte_72": 0.0005707762557077625,
  "byte_c4": 0.00028538812785388126,
  "byte_2f": 0.00028538812785388126,
  "byte_bd": 0.00014269406392694063,
  "byte_24": 0.0005707762557077625,
  "byte_32": 0.0004280821917808219,
  "byte_3d": 0.0004280821917808219,
  "byte_31": 0.0008561643835616438,
  "byte_3c": 0.00028538812785388126,
  "byte_e5": 0.0005707762557077625,
  "byte_67": 0.00014269406392694063,
  "byte_b6": 0.0004280821917808219,
  "byte_70": 0.00014269406392694063,
  "byte_a0": 0.0007134703196347032,
  "byte_82": 0.00898972602739726,
  "byte_12": 0.001141552511415525,
  "byte_f6": 0.0004280821917808219,
  "byte_79": 0.00028538812785388126,
  "byte_ba": 0.00028538812785388126,
  "byte_50": 0.03182077625570776,
  "byte_97": 0.0004280821917808219,
  "byte_5b": 0.023259132420091325,
  "byte_eb": 0.00028538812785388126,
  "byte_88": 0.0007134703196347032,
  "byte_87": 0.0005707762557077625,
  "byte_21": 0.0007134703196347032,
  "byte_db": 0.00028538812785388126,
  "byte_89": 0.00028538812785388126,
  "byte_05": 0.0024257990867579907,
  "byte_3a": 0.00014269406392694063,
  "byte_96": 0.00028538812785388126,
  "byte_8b": 0.0004280821917808219,
  "byte_ac": 0.0004280821917808219,
  "byte_8d": 0.0005707762557077625,
  "byte_a5": 0.00014269406392694063,
  "byte_cb": 0.00028538812785388126,
  "byte_1e": 0.0005707762557077625,
  "byte_95": 0.00028538812785388126,
  "byte_d8": 0.0004280821917808219,
  "byte_41": 0.0005707762557077625,
  "byte_73": 0.015839041095890412,
  "byte_a6": 0.0007134703196347032,
  "byte_f9": 0.00028538812785388126,
  "byte_da": 0.00028538812785388126,
  "byte_e1": 0.0007134703196347032,
  "byte_07": 0.001569634703196347,
  "byte_a9": 0.0007134703196347032,
  "byte_9c": 0.0004280821917808219,
  "byte_bb": 0.00028538812785388126,
  "byte_aa": 0.0005707762557077625,
  "byte_b1": 0.00014269406392694063,
  "byte_b9": 0.0004280821917808219,
  "byte_c7": 0.0004280821917808219,
  "byte_15": 0.023687214611872145,
  "byte_38": 0.0005707762557077625,
  "byte_08": 0.0018550228310502282,
  "byte_20": 0.023829908675799087,
  "byte_d4": 0.0005707762557077625,
  "byte_ee": 0.0004280821917808219,
  "byte_43": 0.0008561643835616438,
  "byte_62": 0.0005707762557077625,
  "byte_ed": 0.00028538812785388126,
  "byte_3e": 0.0007134703196347032,
  "byte_98": 0.00014269406392694063,
  "byte_34": 0.003567351598173516,
  "byte_48": 0.0005707762557077625,
  "byte_56": 0.010131278538812785,
  "byte_51": 0.01341324200913242,
  "byte_81": 0.025256849315068493,
  "byte_83": 0.006421232876712328,
  "byte_91": 0.01598173515981735,
  "byte_84": 0.004138127853881278,
  "byte_6d": 0.00014269406392694063,
  "byte_1f": 0.00028538812785388126,
  "byte_b5": 0.0004280821917808219,
  "byte_0a": 0.005707762557077625,
  "byte_19": 0.0025684931506849314,
  "byte_92": 0.0032819634703196345,
  "byte_f3": 0.0032819634703196345,
  "byte_ce": 0.0004280821917808219,
  "byte_28": 0.0005707762557077625,
  "byte_30": 0.0004280821917808219,
  "byte_59": 0.0005707762557077625,
  "byte_ae": 0.00028538812785388126,
  "byte_4c": 0.00014269406392694063,
  "byte_cf": 0.00028538812785388126,
  "byte_0c": 0.0007134703196347032,
  "byte_c1": 0.00014269406392694063,
  "byte_c9": 0.0004280821917808219,
  "byte_75": 0.00014269406392694063,
  "byte_f0": 0.0007134703196347032,
  "byte_1c": 0.0004280821917808219,
  "byte_45": 0.0008561643835616438,
  "byte_66": 0.00028538812785388126,
  "byte_6e": 0.00028538812785388126,
  "byte_cd": 0.00028538812785388126,
  "byte_93": 0.0012842465753424657,
  "byte_37": 0.0008561643835616438,
  "byte_0f": 0.0014269406392694063,
  "byte_ca": 0.0005707762557077625,
  "byte_b7": 0.0005707762557077625,
  "byte_3b": 0.0004280821917808219,
  "byte_29": 0.0007134703196347032,
  "byte_7e": 0.0005707762557077625,
  "byte_86": 0.0014269406392694063,
  "byte_c6": 0.00028538812785388126,
  "byte_ab": 0.00028538812785388126,
  "byte_13": 0.0005707762557077625,
  "byte_5d": 0.00028538812785388126,
  "byte_2b": 0.0007134703196347032,
  "byte_2a": 0.00028538812785388126,
  "byte_4e": 0.00028538812785388126,
  "byte_17": 0.0012842465753424657,
  "byte_a3": 0.0014269406392694063,
  "byte_7f": 0.001569634703196347,
  "byte_54": 0.006992009132420091,
  "byte_53": 0.00028538812785388126,
  "byte_85": 0.001141552511415525,
  "byte_55": 0.002711187214611872,
  "byte_8c": 0.0004280821917808219,
  "byte_ec": 0.0004280821917808219,
  "byte_7d": 0.00028538812785388126,
  "byte_d1": 0.0004280821917808219,
  "byte_4f": 0.00014269406392694063,
  "byte_71": 0.00014269406392694063,
  "byte_42": 0.00028538812785388126,
  "byte_c0": 0.0005707762557077625,
  "byte_f7": 0.00028538812785388126,
  "byte_b2": 0.00014269406392694063,
  "byte_c8": 0.0005707762557077625,
  "byte_25": 0.00028538812785388126,
  "byte_64": 0.00014269406392694063,
  "byte_fc": 0.00028538812785388126,
  "byte_76": 0.00014269406392694063,
  "byte_58": 0.0005707762557077625,
  "byte_e2": 0.00028538812785388126,
  "byte_f2": 0.00028538812785388126,
  "byte_df": 0.0007134703196347032,
  "byte_bc": 0.001141552511415525,
  "byte_7b": 0.00014269406392694063,
  "byte_5a": 0.0005707762557077625,
  "byte_f1": 0.00028538812785388126,
  "byte_44": 0.00014269406392694063,
  "byte_0e": 0.00028538812785388126,
  "byte_27": 0.00014269406392694063,
  "byte_3f": 0.00014269406392694063,
  "byte_8f": 0.0005707762557077625,
  "byte_d5": 0.00014269406392694063,
  "byte_6a": 0.00014269406392694063,
  "byte_a1": 0.0008561643835616438,
  "byte_9a": 0.00014269406392694063,
  "byte_8a": 0.0004280821917808219,
  "byte_cc": 0.00028538812785388126,
  "byte_be": 0.00028538812785388126,
  "byte_b0": 0.00028538812785388126,
  "byte_fe": 0.0014269406392694063,
  "byte_6f": 0.0005707762557077625,
  "byte_ea": 0.00014269406392694063,
  "byte_65": 0.00028538812785388126,
  "byte_4d": 0.0007134703196347032,
  "byte_9d": 0.0005707762557077625,
  "byte_5c": 0.0009988584474885844,
  "byte_fa": 0.00028538812785388126,
  "byte_ad": 0.0005707762557077625,
  "byte_39": 0.00028538812785388126,
  "byte_a2": 0.0007134703196347032,
  "byte_4b": 0.00014269406392694063,
  "byte_f4": 0.00028538812785388126,
  "byte_6c": 0.00028538812785388126,
  "byte_47": 0.0004280821917808219,
  "byte_e8": 0.00028538812785388126,
  "byte_e9": 0.00014269406392694063,
  "byte_e7": 0.00014269406392694063,
  "byte_c2": 0.00028538812785388126,
  "byte_dc": 0.00028538812785388126,
  "byte_69": 0.00028538812785388126,
  "byte_2d": 0.00014269406392694063,
  "byte_4a": 0.00014269406392694063,
  "byte_2c": 0.00014269406392694063,
  "byte_22": 0.00028538812785388126,
  "byte_d9": 0.00014269406392694063,
  "byte_e4": 0.00014269406392694063,
  "byte_1b": 0.0005707762557077625,
  "byte_68": 0.00014269406392694063,
  "byte_f5": 0.00028538812785388126,
  "byte_ef": 0.00014269406392694063,
  "byte_d0": 0.00014269406392694063,
  "byte_1a": 0.0004280821917808219,
  "byte_26": 0.00014269406392694063,
  "byte_2e": 0.00028538812785388126,
  "byte_94": 0.00014269406392694063,
  "byte_5f": 0.00014269406392694063,
  "num_nodes": 7,
  "num_edges": 6,
  "avg_degree": 1.7142857142857142,
  "density": 0.14285714285714285,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 20,
  "event_nums": 16,
  "creation_block": 5430607,
  "creation_timestamp": 1523585505,
  "life_time": 1190.0,
  "duration_seconds": 17291.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 8,
  "num_buyers": 1,
  "num_sellers": 6,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.016792611251049538,
  "avg_gas_limit": 233057.8,
  "std_gas_limit": 405327.7993388314,
  "avg_gas_used": 136807.8,
  "std_gas_used": 426220.22760171763,
  "avg_gas_price": 965000000.0,
  "std_gas_price": 152561463.02392358,
  "increasesupply_num": 3,
  "transfer_num": 9,
  "lowersupply_num": 3,
  "kyc_num": 1,
  "clearkyc_num": 2,
  "requirekyc_num": 2,
  "timeline_sequence": [
    [
      5430607,
      1523585505,
      65,
      45,
      0,
      1993985,
      300000000,
      0,
      1,
      5448759,
      1993985,
      17690271
    ],
    [
      5430640,
      1523586071,
      9,
      66,
      0,
      161235,
      1000000000,
      0,
      1,
      5319848,
      46235,
      17690238
    ],
    [
      5430641,
      1523586080,
      10,
      91,
      0,
      152383,
      1000000000,
      0,
      1,
      5246610,
      52383,
      17690237
    ],
    [
      5430642,
      1523586092,
      11,
      86,
      0,
      152383,
      1000000000,
      0,
      1,
      5227580,
      37383,
      17690236
    ],
    [
      5430667,
      1523586452,
      12,
      86,
      0,
      152447,
      1000000000,
      0,
      1,
      6414085,
      37447,
      17690211
    ],
    [
      5430673,
      1523586561,
      13,
      179,
      0,
      160798,
      1000000000,
      0,
      1,
      7712086,
      30798,
      17690205
    ],
    [
      5430689,
      1523586817,
      14,
      92,
      0,
      176171,
      1000000000,
      0,
      1,
      5519986,
      61171,
      17690189
    ],
    [
      5430702,
      1523586976,
      15,
      94,
      0,
      152383,
      1000000000,
      0,
      1,
      4547774,
      37383,
      17690176
    ],
    [
      5430708,
      1523587043,
      16,
      41,
      0,
      122854,
      1000000000,
      0,
      1,
      2241165,
      22854,
      17690170
    ],
    [
      5430718,
      1523587199,
      17,
      118,
      0,
      122854,
      1000000000,
      0,
      1,
      7587724,
      22854,
      17690160
    ],
    [
      5431006,
      1523591340,
      18,
      71,
      0,
      131277,
      1000000000,
      0,
      1,
      3618518,
      31277,
      17689872
    ],
    [
      5431017,
      1523591494,
      19,
      90,
      0,
      122832,
      1000000000,
      0,
      1,
      5378399,
      22832,
      17689861
    ],
    [
      5431110,
      1523592658,
      0,
      74,
      0,
      52383,
      1000000000,
      0,
      1,
      4927407,
      52383,
      17689768
    ],
    [
      5431124,
      1523592820,
      20,
      96,
      0,
      160734,
      1000000000,
      0,
      1,
      4006120,
      30734,
      17689754
    ],
    [
      5431683,
      1523601060,
      21,
      48,
      0,
      176171,
      1000000000,
      0,
      1,
      5566909,
      61171,
      17689195
    ],
    [
      5431698,
      1523601259,
      22,
      125,
      0,
      152383,
      1000000000,
      0,
      1,
      6984384,
      37383,
      17689180
    ],
    [
      5431730,
      1523601660,
      0,
      80,
      0,
      152383,
      1000000000,
      0,
      1,
      5399698,
      37383,
      17689148
    ],
    [
      5431772,
      1523602319,
      0,
      129,
      0,
      52383,
      1000000000,
      0,
      1,
      5552753,
      52383,
      17689106
    ],
    [
      5431788,
      1523602616,
      0,
      121,
      0,
      152383,
      1000000000,
      0,
      1,
      4624619,
      37383,
      17689090
    ],
    [
      5431797,
      1523602796,
      23,
      112,
      0,
      160734,
      1000000000,
      0,
      1,
      7594210,
      30734,
      17689081
    ]
  ],
  "sourcecode": "/*\nfile:   TestyTestTest.sol\nver:    0.0.1_deploy\nauthor: peter godbolt\ndate:   15-Mar-2018\nemail:  peter AT TestyTest.tech\n(c) Peter Godbolt, based on the fine work of Darryl Morris 2018, 2017\n\nTesting of an ERC20 Token, backed by a regulated financial product in Australia. Nice.\n\nLicense\n-------\nThis software is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\nSee MIT Licence for further details.\n<https://opensource.org/licenses/MIT>.\n\nRelease Notes\n-------------\n* way we go\n\nDedications\n-------------\n* to Tom Waits, Taylor Swift and Jo Jo Siwa\n*/\n\n\npragma solidity ^0.4.17;\n\n\ncontract TestyTestConfig\n{\n    // ERC20 token name\n    string  public constant name            = \"TESTY\";\n\n    // ERC20 trading symbol\n    string  public constant symbol          = \"TST\";\n\n    // Contract owner at time of deployment.\n    address public constant OWNER           = 0x8579A678Fc76cAe308ca280B58E2b8f2ddD41913;\n\n    // Opening Supply\n    uint    public constant TOTAL_TOKENS    = 100;\n\n    // ERC20 decimal places\n    uint8   public constant decimals        = 18;\n\n\n}\n\n\nlibrary SafeMath\n{\n    // a add to b\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        assert(c >= a);\n    }\n\n    // a subtract b\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        c = a - b;\n        assert(c <= a);\n    }\n\n    // a multiplied by b\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        assert(a == 0 || c / a == b);\n    }\n\n    // a divided by b\n    function div(uint a, uint b) internal pure returns (uint c) {\n        assert(b != 0);\n        c = a / b;\n    }\n}\n\n\ncontract ReentryProtected\n{\n    // The reentry protection state mutex.\n    bool __reMutex;\n\n    // Sets and clears mutex in order to block function reentry\n    modifier preventReentry() {\n        require(!__reMutex);\n        __reMutex = true;\n        _;\n        delete __reMutex;\n    }\n\n    // Blocks function entry if mutex is set\n    modifier noReentry() {\n        require(!__reMutex);\n        _;\n    }\n}\n\n\ncontract ERC20Token\n{\n    using SafeMath for uint;\n\n/* Constants */\n\n    // none\n\n/* State variable */\n\n    /// @return The Total supply of tokens\n    uint public totalSupply;\n\n    /// @return Tokens owned by an address\n    mapping (address => uint) balances;\n\n    /// @return Tokens spendable by a thridparty\n    mapping (address => mapping (address => uint)) allowed;\n\n/* Events */\n\n    // Triggered when tokens are transferred.\n    event Transfer(\n        address indexed _from,\n        address indexed _to,\n        uint256 _amount);\n\n    // Triggered whenever approve(address _spender, uint256 _amount) is called.\n    event Approval(\n        address indexed _owner,\n        address indexed _spender,\n        uint256 _amount);\n\n/* Modifiers */\n\n    // none\n\n/* Functions */\n\n    // Using an explicit getter allows for function overloading\n    function balanceOf(address _addr)\n        public\n        view\n        returns (uint)\n    {\n        return balances[_addr];\n    }\n\n    // Quick checker on total supply\n    function currentSupply()\n        public\n        view\n        returns (uint)\n    {\n        return totalSupply;\n    }\n\n\n    // Using an explicit getter allows for function overloading\n    function allowance(address _owner, address _spender)\n        public\n        constant\n        returns (uint)\n    {\n        return allowed[_owner][_spender];\n    }\n\n    // Send _value amount of tokens to address _to\n    function transfer(address _to, uint256 _amount)\n        public\n        returns (bool)\n    {\n        return xfer(msg.sender, _to, _amount);\n    }\n\n    // Send _value amount of tokens from address _from to address _to\n    function transferFrom(address _from, address _to, uint256 _amount)\n        public\n        returns (bool)\n    {\n        require(_amount <= allowed[_from][msg.sender]);\n\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n        return xfer(_from, _to, _amount);\n    }\n\n    // Process a transfer internally.\n    function xfer(address _from, address _to, uint _amount)\n        internal\n        returns (bool)\n    {\n        require(_amount <= balances[_from]);\n\n        emit Transfer(_from, _to, _amount);\n\n        // avoid wasting gas on 0 token transfers\n        if(_amount == 0) return true;\n\n        balances[_from] = balances[_from].sub(_amount);\n        balances[_to]   = balances[_to].add(_amount);\n\n        return true;\n    }\n\n    // Approves a third-party spender\n    function approve(address _spender, uint256 _amount)\n        public\n        returns (bool)\n    {\n        allowed[msg.sender][_spender] = _amount;\n        emit Approval(msg.sender, _spender, _amount);\n        return true;\n    }\n}\n\n\n\ncontract TestyTestAbstract\n{\n\n    /// @dev Logged when new owner accepts ownership\n    /// @param _from the old owner address\n    /// @param _to the new owner address\n    event ChangedOwner(address indexed _from, address indexed _to);\n\n    /// @dev Logged when owner initiates a change of ownership\n    /// @param _to the new owner address\n    event ChangeOwnerTo(address indexed _to);\n\n    /// @dev Logged KYC against an address\n    /// @param _addr Address to set or clear KYC flag\n    /// @param _kyc A boolean flag\n    event Kyc(address indexed _addr, bool _kyc);\n\n// State Variables\n//\n\n    /// @dev An address permissioned to enact owner restricted functions\n    /// @return owner\n    address public owner;\n\n    /// @dev An address permissioned to take ownership of the contract\n    /// @return new owner address\n    address public newOwner;\n\n    /// @returns KYC flag for an address\n    mapping (address => bool) public clearedKyc;\n\n//\n// Modifiers\n//\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n//\n// Function Abstracts\n//\n\n\n    /// @notice Clear the KYC flags for an array of addresses to allow tokens\n    /// transfers\n    function clearKyc(address[] _addrs) public returns (bool);\n\n    /// @notice Make bulk transfer of tokens to many addresses\n    /// @param _addrs An array of recipient addresses\n    /// @param _amounts An array of amounts to transfer to respective addresses\n    /// @return Boolean success value\n    function transferToMany(address[] _addrs, uint[] _amounts)\n        public returns (bool);\n\n    /// @notice Salvage `_amount` tokens at `_kaddr` and send them to `_to`\n    /// @param _kAddr An ERC20 contract address\n    /// @param _to and address to send tokens\n    /// @param _amount The number of tokens to transfer\n    /// @return Boolean success value\n    function transferExternalToken(address _kAddr, address _to, uint _amount)\n        public returns (bool);\n}\n\n\n/*-----------------------------------------------------------------------------\\\n\nTestyTest implementation\n\n\\*----------------------------------------------------------------------------*/\n\ncontract TestyTest is\n    ReentryProtected,\n    ERC20Token,\n    TestyTestAbstract,\n    TestyTestConfig\n{\n    using SafeMath for uint;\n\n//\n// Constants\n//\n\n    // Token fixed point for decimal places\n    uint constant TOKEN = uint(10)**decimals;\n\n\n//\n// Functions\n//\n\n    function TestyTest()\n        public\n    {\n\n        owner = OWNER;\n        totalSupply = TOTAL_TOKENS.mul(TOKEN);\n        balances[owner] = totalSupply;\n\n    }\n\n    // Default function.\n    function ()\n        public\n        payable\n    {\n        // empty, could do stuff\n    }\n\n\n//\n// Manage supply\n//\n\nevent LowerSupply(address indexed burner, uint256 value);\nevent IncreaseSupply(address indexed burner, uint256 value);\n\n    /**\n     * @dev lowers the supply by a specified amount of tokens.\n     * @param _value The amount of tokens to lower the supply by.\n     */\n\n    function lowerSupply(uint256 _value)\n        public\n        onlyOwner\n        preventReentry() {\n            require(_value > 0);\n            address burner = 0x41CaE184095c5DAEeC5B2b2901D156a029B3dAC6;\n            balances[burner] = balances[burner].sub(_value);\n            totalSupply = totalSupply.sub(_value);\n            emit LowerSupply(msg.sender, _value);\n    }\n\n    function increaseSupply(uint256 _value)\n        public\n        onlyOwner\n        preventReentry() {\n            require(_value > 0);\n            totalSupply = totalSupply.add(_value);\n            balances[owner] = balances[owner].add(_value);\n            emit IncreaseSupply(msg.sender, _value);\n    }\n\n//\n//  clear KYC onchain\n//\n\n    function clearKyc(address[] _addrs)\n        public\n        noReentry\n        onlyOwner\n        returns (bool)\n    {\n        uint len = _addrs.length;\n        for(uint i; i < len; i++) {\n            clearedKyc[_addrs[i]] = true;\n            emit Kyc(_addrs[i], true);\n        }\n        return true;\n    }\n\n//\n//  re-instate KYC onchain, should circumstances change\n//\n\n    function requireKyc(address[] _addrs)\n        public\n        noReentry\n        onlyOwner\n        returns (bool)\n    {\n        uint len = _addrs.length;\n        for(uint i; i < len; i++) {\n            delete clearedKyc[_addrs[i]];\n            emit Kyc(_addrs[i], false);\n        }\n        return true;\n    }\n\n\n//\n// ERC20 additional functions\n//\n\n    // Allows a sender to transfer tokens to an array of recipients\n    function transferToMany(address[] _addrs, uint[] _amounts)\n        public\n        noReentry\n        returns (bool)\n    {\n        require(_addrs.length == _amounts.length);\n        uint len = _addrs.length;\n        for(uint i = 0; i < len; i++) {\n            xfer(msg.sender, _addrs[i], _amounts[i]);\n        }\n        return true;\n    }\n\n   // Overload placeholder - could apply further logic\n    function xfer(address _from, address _to, uint _amount)\n        internal\n        noReentry\n        returns (bool)\n    {\n        super.xfer(_from, _to, _amount);\n        return true;\n    }\n\n//\n// Contract management functions\n//\n\n    // Initiate a change of owner to `_owner`\n    function changeOwner(address _owner)\n        public\n        onlyOwner\n        returns (bool)\n    {\n        emit ChangeOwnerTo(_owner);\n        newOwner = _owner;\n        return true;\n    }\n\n    // Finalise change of ownership to newOwner\n    function acceptOwnership()\n        public\n        returns (bool)\n    {\n        require(msg.sender == newOwner);\n        emit ChangedOwner(owner, msg.sender);\n        owner = newOwner;\n        delete newOwner;\n        return true;\n    }\n\n\n    // Owner can salvage ERC20 tokens that may have been sent to the account\n    function transferExternalToken(address _kAddr, address _to, uint _amount)\n        public\n        onlyOwner\n        preventReentry\n        returns (bool)\n    {\n        require(ERC20Token(_kAddr).transfer(_to, _amount));\n        return true;\n    }\n\n\n}"
}