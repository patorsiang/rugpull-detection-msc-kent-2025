{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH3 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP1 CALLDATALOAD DUP1 DUP3 ADD CALLDATALOAD DUP4 DUP2 MUL DUP1 DUP7 ADD DUP6 ADD SWAP1 SWAP7 MSTORE DUP1 DUP6 MSTORE PUSH2 SWAP6 CALLDATASIZE SWAP6 SWAP4 SWAP5 PUSH1 SWAP5 SWAP4 DUP6 ADD SWAP3 SWAP2 DUP3 SWAP2 DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP1 CALLDATALOAD DUP1 DUP3 ADD CALLDATALOAD DUP4 DUP2 MUL DUP1 DUP7 ADD DUP6 ADD SWAP1 SWAP7 MSTORE DUP1 DUP6 MSTORE PUSH2 SWAP6 CALLDATASIZE SWAP6 SWAP4 SWAP5 PUSH1 SWAP5 SWAP4 DUP6 ADD SWAP3 SWAP2 DUP3 SWAP2 DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP POP SWAP4 CALLDATALOAD SWAP5 POP PUSH2 SWAP4 POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 CALLDATALOAD DUP2 DUP2 ADD CALLDATALOAD PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 SWAP5 DUP3 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP5 PUSH1 DUP1 CALLDATALOAD SWAP6 CALLDATASIZE SWAP6 SWAP5 PUSH1 SWAP5 SWAP3 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLVALUE SWAP3 POP PUSH2 PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 SLOAD SWAP2 SWAP4 POP PUSH2 SWAP2 DUP5 PUSH2 JUMP JUMPDEST PUSH1 CALLVALUE DIV MUL SWAP1 POP DUP2 PUSH1 EXP DUP2 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 DUP4 ADD SWAP3 POP PUSH2 ADDRESS CALLER PUSH1 SLOAD DUP7 MUL PUSH2 JUMP JUMPDEST POP POP PUSH1 DUP1 SLOAD CALLVALUE ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 DUP7 GT PUSH2 JUMPI PUSH1 SWAP3 POP PUSH2 JUMP JUMPDEST DUP4 PUSH1 ADD PUSH1 EXP DUP7 MUL SWAP2 POP PUSH1 PUSH1 DUP7 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SUB DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 SWAP3 POP JUMPDEST POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SSTORE JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP5 DUP7 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 DUP2 SWAP1 SSTORE PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND SWAP1 DUP4 ISZERO PUSH2 MUL SWAP1 DUP5 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND DUP2 SSTORE PUSH1 MLOAD PUSH32 SWAP2 SWAP1 LOG1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP2 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE SWAP2 BALANCE PUSH1 SSTORE SWAP1 SWAP7 POP SWAP5 POP JUMPDEST DUP7 MLOAD DUP6 LT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH2 JUMP JUMPDEST SWAP4 POP PUSH1 SLOAD PUSH2 PUSH1 PUSH1 DUP11 DUP10 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 SLOAD DUP8 PUSH2 JUMP JUMPDEST MUL SWAP3 POP DUP4 PUSH1 EXP DUP4 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP3 POP DUP3 ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE SWAP2 POP DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP9 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP DUP1 PUSH1 PUSH1 DUP10 DUP9 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP1 SLOAD SWAP2 SWAP1 SWAP2 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE DUP7 MLOAD DUP8 SWAP1 DUP7 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 DUP5 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP JUMPDEST PUSH1 SWAP1 SWAP5 ADD SWAP4 PUSH2 JUMP JUMPDEST POP POP PUSH1 SLOAD PUSH1 SSTORE POP POP POP POP PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE PUSH1 SSTORE POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP1 SWAP5 AND SWAP4 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP9 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP3 MSTORE DUP1 DUP4 SHA3 CALLER SWAP1 SWAP6 AND DUP4 MSTORE SWAP4 DUP2 MSTORE SWAP1 DUP4 SWAP1 SHA3 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE DUP3 MLOAD DUP6 DUP2 MSTORE SWAP3 MLOAD SWAP2 SWAP3 PUSH32 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP2 JUMPDEST DUP2 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 SWAP2 SWAP1 SWAP2 MUL SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND PUSH1 PUSH1 EXP OR DUP2 SSTORE PUSH1 MLOAD PUSH32 SWAP2 SWAP1 LOG1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP5 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP4 AND DUP5 SWAP1 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 CALLER DUP4 DUP4 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP3 POP JUMPDEST DUP5 MLOAD DUP4 LT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH2 JUMP JUMPDEST SWAP2 POP DUP4 PUSH2 PUSH1 PUSH1 DUP9 DUP8 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 SLOAD DUP6 PUSH2 JUMP JUMPDEST MUL SWAP1 POP DUP2 PUSH1 EXP DUP2 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 ISZERO PUSH2 JUMPI PUSH2 DUP6 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD DUP3 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 SWAP3 ADD SWAP2 PUSH2 JUMP JUMPDEST POP POP PUSH1 SLOAD PUSH1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP DUP4 PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI DUP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 CALLER DUP7 ADDRESS DUP8 PUSH1 MLOAD DUP6 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP3 DUP4 MSTORE PUSH1 DUP1 DUP5 SHA3 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP6 SWAP5 POP PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP2 SWAP5 POP PUSH2 SWAP2 DUP6 PUSH2 JUMP JUMPDEST PUSH1 DUP7 DIV MUL SWAP2 POP DUP3 PUSH1 EXP DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP4 DUP5 SWAP1 SUB SWAP4 SWAP2 POP PUSH1 DUP5 DIV DUP5 SUB SWAP4 POP PUSH1 SLOAD DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP4 POP POP PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLER ADDRESS DUP8 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND SWAP1 DUP6 ISZERO PUSH2 MUL SWAP1 DUP7 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 DUP1 SLOAD SWAP4 SWAP1 SWAP4 SUB SWAP1 SWAP3 SSTORE POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 DUP2 ADD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE SWAP4 DUP7 AND DUP1 DUP4 MSTORE SWAP2 DUP5 SWAP1 SHA3 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE DUP4 MLOAD DUP6 DUP2 MSTORE SWAP4 MLOAD SWAP2 SWAP4 PUSH32 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP STOP LOG1 PUSH6 SHA3 SWAP8 EXP UNKNOWN_0xe6 COINBASE DUP13 DUP4 UNKNOWN_0x23 INVALID_0x7a",
  "opcode_entropy": 4.850180335953369,
  "opcode_count": 3855,
  "unique_opcodes": 73,
  "byte_entropy": 5.887415791961312,
  "byte_60": 0.11532214401732539,
  "byte_80": 0.04529868254827649,
  "byte_40": 0.008482223425374481,
  "byte_52": 0.020032485110990796,
  "byte_04": 0.014618299945858148,
  "byte_36": 0.0009023641941887746,
  "byte_10": 0.005594658003970403,
  "byte_61": 0.04547915538711424,
  "byte_01": 0.0384407146724418,
  "byte_9f": 0.0009023641941887746,
  "byte_57": 0.024363833243096916,
  "byte_63": 0.006857967875834687,
  "byte_ff": 0.009745533297238766,
  "byte_7c": 0.0010828370330265296,
  "byte_00": 0.045659628225951994,
  "byte_35": 0.006857967875834687,
  "byte_16": 0.02237863201588161,
  "byte_62": 0.0009023641941887746,
  "byte_2c": 0.00036094567767550983,
  "byte_1a": 0.0005414185165132648,
  "byte_9e": 0.00036094567767550983,
  "byte_81": 0.03302652950730915,
  "byte_14": 0.009745533297238766,
  "byte_a9": 0.0009023641941887746,
  "byte_05": 0.004692293809781628,
  "byte_fe": 0.0025266197437285687,
  "byte_fd": 0.01353546291283162,
  "byte_a7": 0.0030680382602418337,
  "byte_d9": 0.00018047283883775492,
  "byte_06": 0.006316549359321422,
  "byte_de": 0.0007218913553510197,
  "byte_03": 0.022920050532394876,
  "byte_f4": 0.0009023641941887746,
  "byte_09": 0.0028875654214040787,
  "byte_5e": 0.00018047283883775492,
  "byte_b3": 0.0009023641941887746,
  "byte_02": 0.024002887565421405,
  "byte_7e": 0.0005414185165132648,
  "byte_18": 0.0005414185165132648,
  "byte_0d": 0.0010828370330265296,
  "byte_dd": 0.0010828370330265296,
  "byte_b6": 0.0005414185165132648,
  "byte_23": 0.0016242555495397943,
  "byte_b8": 0.00018047283883775492,
  "byte_72": 0.00036094567767550983,
  "byte_cb": 0.0007218913553510197,
  "byte_2e": 0.0005414185165132648,
  "byte_7d": 0.00018047283883775492,
  "byte_4d": 0.0009023641941887746,
  "byte_f5": 0.0016242555495397943,
  "byte_31": 0.0014437827107020393,
  "byte_3c": 0.0009023641941887746,
  "byte_e5": 0.00036094567767550983,
  "byte_67": 0.0005414185165132648,
  "byte_9c": 0.0005414185165132648,
  "byte_38": 0.0007218913553510197,
  "byte_3f": 0.0005414185165132648,
  "byte_4b": 0.00036094567767550983,
  "byte_a8": 0.00036094567767550983,
  "byte_3a": 0.0007218913553510197,
  "byte_42": 0.00036094567767550983,
  "byte_96": 0.0010828370330265296,
  "byte_6c": 0.0005414185165132648,
  "byte_68": 0.0012633098718642843,
  "byte_75": 0.00036094567767550983,
  "byte_34": 0.006857967875834687,
  "byte_7a": 0.0012633098718642843,
  "byte_71": 0.0005414185165132648,
  "byte_ac": 0.0005414185165132648,
  "byte_8f": 0.0009023641941887746,
  "byte_5c": 0.0007218913553510197,
  "byte_97": 0.0010828370330265296,
  "byte_5a": 0.0009023641941887746,
  "byte_bb": 0.0005414185165132648,
  "byte_e4": 0.00036094567767550983,
  "byte_70": 0.0007218913553510197,
  "byte_a0": 0.015159718462371413,
  "byte_82": 0.010828370330265295,
  "byte_f9": 0.0007218913553510197,
  "byte_79": 0.0005414185165132648,
  "byte_c6": 0.00018047283883775492,
  "byte_50": 0.03555314925103772,
  "byte_cc": 0.0012633098718642843,
  "byte_90": 0.0440353726764122,
  "byte_3e": 0.0010828370330265296,
  "byte_ef": 0.0009023641941887746,
  "byte_f7": 0.00036094567767550983,
  "byte_84": 0.007940804908861216,
  "byte_56": 0.016423028334235697,
  "byte_59": 0.0007218913553510197,
  "byte_86": 0.005414185165132647,
  "byte_20": 0.018588702400288756,
  "byte_41": 0.0005414185165132648,
  "byte_0b": 0.0027070925825663237,
  "byte_8d": 0.0007218913553510197,
  "byte_a5": 0.0007218913553510197,
  "byte_5b": 0.034831257895686696,
  "byte_a4": 0.00036094567767550983,
  "byte_95": 0.0025266197437285687,
  "byte_1e": 0.0009023641941887746,
  "byte_17": 0.0009023641941887746,
  "byte_a1": 0.0016242555495397943,
  "byte_d5": 0.00018047283883775492,
  "byte_d8": 0.00036094567767550983,
  "byte_9b": 0.0014437827107020393,
  "byte_ea": 0.00018047283883775492,
  "byte_a6": 0.00018047283883775492,
  "byte_f2": 0.0010828370330265296,
  "byte_ae": 0.00036094567767550983,
  "byte_b4": 0.0007218913553510197,
  "byte_d4": 0.0005414185165132648,
  "byte_b5": 0.0007218913553510197,
  "byte_1d": 0.00018047283883775492,
  "byte_fa": 0.00036094567767550983,
  "byte_9d": 0.0007218913553510197,
  "byte_44": 0.0014437827107020393,
  "byte_c2": 0.0009023641941887746,
  "byte_64": 0.0010828370330265296,
  "byte_ca": 0.0005414185165132648,
  "byte_e9": 0.00018047283883775492,
  "byte_51": 0.010467424652589786,
  "byte_b0": 0.0010828370330265296,
  "byte_ed": 0.00036094567767550983,
  "byte_19": 0.001804728388377549,
  "byte_32": 0.0009023641941887746,
  "byte_e7": 0.00036094567767550983,
  "byte_24": 0.002346146904890814,
  "byte_58": 0.0005414185165132648,
  "byte_e3": 0.00018047283883775492,
  "byte_8b": 0.0005414185165132648,
  "byte_15": 0.0220176863382061,
  "byte_c7": 0.001804728388377549,
  "byte_07": 0.004331348132106118,
  "byte_2b": 0.001804728388377549,
  "byte_91": 0.013354990073993864,
  "byte_f3": 0.0009023641941887746,
  "byte_74": 0.0005414185165132648,
  "byte_9a": 0.00036094567767550983,
  "byte_83": 0.011911207363291824,
  "byte_92": 0.007579859231185706,
  "byte_85": 0.005594658003970403,
  "byte_43": 0.00018047283883775492,
  "byte_1f": 0.0025266197437285687,
  "byte_0a": 0.018949648077964266,
  "byte_8a": 0.0005414185165132648,
  "byte_a2": 0.0016242555495397943,
  "byte_08": 0.0034289839379173436,
  "byte_27": 0.0007218913553510197,
  "byte_d7": 0.00018047283883775492,
  "byte_76": 0.0005414185165132648,
  "byte_22": 0.0005414185165132648,
  "byte_73": 0.0007218913553510197,
  "byte_6e": 0.0009023641941887746,
  "byte_fc": 0.0014437827107020393,
  "byte_93": 0.005775130842808157,
  "byte_94": 0.004150875293268363,
  "byte_37": 0.0014437827107020393,
  "byte_f0": 0.00018047283883775492,
  "byte_0c": 0.0027070925825663237,
  "byte_bc": 0.00036094567767550983,
  "byte_26": 0.00018047283883775492,
  "byte_4a": 0.00036094567767550983,
  "byte_b1": 0.00036094567767550983,
  "byte_0e": 0.001985201227215304,
  "byte_af": 0.0009023641941887746,
  "byte_d3": 0.0005414185165132648,
  "byte_0f": 0.002346146904890814,
  "byte_b9": 0.00036094567767550983,
  "byte_e1": 0.00018047283883775492,
  "byte_f6": 0.0005414185165132648,
  "byte_6d": 0.00018047283883775492,
  "byte_c5": 0.00018047283883775492,
  "byte_2f": 0.0007218913553510197,
  "byte_13": 0.0016242555495397943,
  "byte_28": 0.0007218913553510197,
  "byte_65": 0.00036094567767550983,
  "byte_11": 0.0034289839379173436,
  "byte_25": 0.00036094567767550983,
  "byte_12": 0.002346146904890814,
  "byte_4c": 0.00018047283883775492,
  "byte_98": 0.00018047283883775492,
  "byte_54": 0.016062082656560187,
  "byte_c9": 0.00018047283883775492,
  "byte_30": 0.0027070925825663237,
  "byte_33": 0.004331348132106118,
  "byte_55": 0.005775130842808157,
  "byte_6b": 0.0005414185165132648,
  "byte_8e": 0.00018047283883775492,
  "byte_c1": 0.00036094567767550983,
  "byte_88": 0.001804728388377549,
  "byte_f1": 0.0012633098718642843,
  "byte_3d": 0.0016242555495397943,
  "byte_7f": 0.0016242555495397943,
  "byte_78": 0.00018047283883775492,
  "byte_df": 0.00018047283883775492,
  "byte_ad": 0.0007218913553510197,
  "byte_d1": 0.00018047283883775492,
  "byte_e0": 0.0005414185165132648,
  "byte_8c": 0.0005414185165132648,
  "byte_db": 0.0007218913553510197,
  "byte_87": 0.001804728388377549,
  "byte_bd": 0.0005414185165132648,
  "byte_cf": 0.0005414185165132648,
  "byte_b7": 0.00036094567767550983,
  "byte_5d": 0.0005414185165132648,
  "byte_39": 0.00036094567767550983,
  "byte_ec": 0.00018047283883775492,
  "byte_3b": 0.0005414185165132648,
  "byte_89": 0.0007218913553510197,
  "byte_1b": 0.0007218913553510197,
  "byte_e2": 0.0007218913553510197,
  "byte_c8": 0.0005414185165132648,
  "byte_69": 0.0009023641941887746,
  "byte_aa": 0.0005414185165132648,
  "byte_c4": 0.0005414185165132648,
  "byte_a3": 0.0007218913553510197,
  "byte_ee": 0.00018047283883775492,
  "byte_e6": 0.00036094567767550983,
  "byte_66": 0.0005414185165132648,
  "byte_bf": 0.00018047283883775492,
  "byte_dc": 0.00036094567767550983,
  "byte_4e": 0.00036094567767550983,
  "byte_4f": 0.00018047283883775492,
  "byte_49": 0.00018047283883775492,
  "byte_ce": 0.00018047283883775492,
  "byte_29": 0.0005414185165132648,
  "byte_45": 0.00018047283883775492,
  "byte_48": 0.00018047283883775492,
  "byte_5f": 0.00018047283883775492,
  "byte_6f": 0.00018047283883775492,
  "byte_6a": 0.00018047283883775492,
  "byte_1c": 0.00018047283883775492,
  "byte_d2": 0.00018047283883775492,
  "byte_d0": 0.00018047283883775492,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 5,
  "event_nums": 8,
  "creation_block": 5475638,
  "creation_timestamp": 1524249568,
  "life_time": 2031.0,
  "duration_seconds": 30031.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.0024606299212598425,
  "avg_gas_limit": 490250.0,
  "std_gas_limit": 671553.3991041963,
  "avg_gas_used": 409082.0,
  "std_gas_used": 712172.9033064934,
  "avg_gas_price": 1800000000.0,
  "std_gas_price": 400000000.0,
  "transfer_num": 2,
  "pause_num": 1,
  "atinversebrah_num": 1,
  "airdrop_num": 1,
  "timeline_sequence": [
    [
      5475638,
      1524249568,
      0,
      10,
      0,
      1832406,
      2000000000,
      0,
      1,
      2248676,
      1832406,
      17645242
    ],
    [
      5477517,
      1524277332,
      1,
      116,
      0,
      144000,
      1000000000,
      1,
      0,
      4383859,
      28587,
      17643363
    ],
    [
      5477591,
      1524278548,
      2,
      110,
      0,
      144000,
      2000000000,
      0,
      1,
      5914352,
      53573,
      17643289
    ],
    [
      5477644,
      1524279307,
      3,
      150,
      0,
      128459,
      2000000000,
      0,
      1,
      7029785,
      28459,
      17643236
    ],
    [
      5477669,
      1524279599,
      4,
      89,
      0,
      202385,
      2000000000,
      0,
      1,
      3490671,
      102385,
      17643211
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.16;\n\n  /**\n  * @title SafeMath\n  * @dev Math operations with safety checks that throw on error\n  */\n  library SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    // uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return a / b;\n  }\n\n  /**\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n    address public owner;\n\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    emit Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    emit Unpause();\n  }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 is Pausable{\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n    uint256 public totalSupplyForDivision;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf; \n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;\n    }\n    \n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal whenNotPaused{\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public whenNotPaused {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public whenNotPaused\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) whenNotPaused\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public whenPaused returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        totalSupplyForDivision -= _value;                              // Update totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public whenPaused returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        totalSupplyForDivision -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract DunkPayToken is TokenERC20 {\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n    uint256 public buySupply;\n    uint256 public totalEth;\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function DunkPayToken() TokenERC20(totalSupply, name, symbol) public {\n\n        buyPrice = 1000;\n        sellPrice = 1000;\n        \n        name = \"BitcoinYo Token\";\n        symbol = \"BTY\";\n        totalSupply = buyPrice * 10000 * 10 ** uint256(decimals);\n        balanceOf[msg.sender] = buyPrice * 5100 * 10 ** uint256(decimals);              \n        balanceOf[this] = totalSupply - balanceOf[msg.sender];\n        buySupply = balanceOf[this];\n        totalSupplyForDivision = totalSupply;// Set the symbol for display purposes\n        totalEth = address(this).balance;\n    }\n\n    function percent(uint256 numerator, uint256 denominator , uint precision) returns(uint256 quotient) {\n        if(numerator <= 0)\n        {\n            return 0;\n        }\n        // caution, check safe-to-multiply here\n        uint256 _numerator  = numerator * 10 ** uint256(precision+1);\n        // with rounding of last digit\n        uint256 _quotient =  ((_numerator / denominator) - 5) / 10;\n        return  _quotient;\n    }\n    \n    function getZero(uint256 number) returns(uint num_len) {\n        uint i = 1;\n        uint _num_len = 0;\n        while( number > i )\n        {\n            i *= 10;\n            _num_len++;\n        }\n        return _num_len;\n    }\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to] + _value > balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        totalSupplyForDivision += mintedAmount;\n        emit Transfer(0, this, mintedAmount);\n        emit Transfer(this, target, mintedAmount);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newSellPrice Price the users can sell to the contract\n    /// @param newBuyPrice Price users can buy from the contract\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n        \n    }\n\n    function transfer(address _to, uint256 _value) public whenNotPaused {\n        if(_to == address(this)){\n            sell(_value);\n        }else{\n            _transfer(msg.sender, _to, _value);\n        }\n    }\n\n    function () payable public {\n     buy();\n    }\n\n    /// @notice Buy tokens from contract by sending ether\n    function buy() payable whenNotPaused public {\n        uint256 dnkForBuy = msg.value;\n        uint zeros = getZero(buySupply);\n        uint256 interest = msg.value / 2 * percent(balanceOf[this] , buySupply , zeros);\n        interest = interest / 10 ** uint256(zeros);\n        dnkForBuy = dnkForBuy + interest;\n        _transfer(this, msg.sender, dnkForBuy * buyPrice);              // makes the transfers\n        totalEth += msg.value;\n    }\n\n    /// @notice Sell `amount` tokens to contract\n    /// @param amount amount of tokens to be sold\n    function sell(uint256 amount) whenNotPaused public {\n        uint256 ethForSell =  amount;\n        uint zeros = getZero(balanceOf[this]);\n        uint256 interest = amount / 2 * percent( buySupply , balanceOf[this] ,zeros);\n        interest = interest / 10 ** uint256(zeros);\n        ethForSell = ethForSell - interest;\n        ethForSell = ethForSell - (ethForSell/100); // minus 1% for refund fee.   \n        ethForSell = ethForSell / sellPrice;\n        uint256 minimumAmount = address(this).balance; \n        require(minimumAmount >= ethForSell);      // checks if the contract has enough ether to buy\n        _transfer(msg.sender, this, amount);              // makes the transfers\n        msg.sender.transfer(ethForSell);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n        totalEth -= ethForSell;\n    } \n\n    /// @notice withDraw `amount` ETH to contract\n    /// @param amount amount of ETH to be sent\n    function withdraw(uint256 amount) onlyOwner public {\n        uint256 minimumAmount = address(this).balance; \n        require(minimumAmount >= amount);      // checks if the contract has enough ether to buy\n        msg.sender.transfer(amount);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n\n    function airdrop(address[] _holders, uint256 mintedAmount) onlyOwner whenPaused public {\n        for (uint i = 0; i < _holders.length; i++) {\n            uint zeros = getZero(totalSupplyForDivision);\n            uint256 amount = percent(balanceOf[_holders[i]],totalSupplyForDivision,zeros)  * mintedAmount;\n            amount = amount / 10 ** uint256(zeros);\n            if(amount != 0){\n                mintToken(_holders[i], amount);\n            }\n        }\n        totalSupplyForDivision = totalSupply;\n    }\n\n    function bankrupt(address[] _holders) onlyOwner whenPaused public {\n        uint256 restBalance = balanceOf[this];\n        balanceOf[this] -= restBalance;                        // Subtract from the targeted balance\n        totalSupply -= restBalance;                              // Update totalSupply\n        totalSupplyForDivision -= restBalance;                             // Update totalSupply\n        totalEth = address(this).balance;\n        \n        for (uint i = 0; i < _holders.length; i++) {\n          uint zeros = getZero(totalSupplyForDivision);\n          uint256 amount = percent(balanceOf[_holders[i]],totalSupplyForDivision , zeros) * totalEth;\n          amount = amount / 10 ** uint256(zeros);\n        \n          if(amount != 0){\n            uint256 minimumAmount = address(this).balance; \n            require(minimumAmount >= amount);      // checks if the contract has enough ether to buy\n            uint256 holderBalance = balanceOf[_holders[i]];\n            balanceOf[_holders[i]] -= holderBalance;                        // Subtract from the targeted balance\n            totalSupply -= holderBalance;            \n            _holders[i].transfer(amount);          // sends ether to the seller. It's important to do this last to \n          } \n        }\n        totalSupplyForDivision = totalSupply;\n        totalEth = address(this).balance;\n    }    \n}"
}