{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 DUP2 CALLDATALOAD DUP2 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 DUP2 DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP2 ISZERO DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 DUP6 SWAP1 SSTORE PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP5 DUP3 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 PUSH1 DUP8 DUP6 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 DUP5 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 ADD PUSH1 SHA3 SSTORE DUP4 DUP2 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP6 DUP5 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 ADD PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP8 DUP4 AND DUP3 MSTORE PUSH1 DUP2 MSTORE DUP4 DUP3 SHA3 CALLER SWAP1 SWAP4 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND SWAP2 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SWAP2 SWAP1 SWAP2 SSTORE SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH32 DUP4 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SLOAD DUP1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP10 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 SLOAD PUSH32 SWAP2 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 DUP2 MSTORE DUP4 DUP3 SHA3 CALLER SWAP1 SWAP4 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SWAP2 SWAP1 SWAP2 SSTORE SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH32 DUP4 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP6 DUP6 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI POP DUP4 PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH4 CALLER DUP7 ADDRESS DUP8 PUSH1 MLOAD DUP6 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST GAS CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SLOAD PUSH2 DUP2 DUP5 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 DUP5 SWAP1 SSTORE SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 SWAP2 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND SWAP2 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 DUP2 ADD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SLOAD SWAP3 DUP9 AND DUP3 MSTORE SWAP1 SHA3 SLOAD PUSH2 SWAP2 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 SWAP1 DUP8 AND SWAP1 PUSH32 SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SLOAD SWAP3 DUP9 AND DUP3 MSTORE SWAP1 SHA3 SLOAD ADD DUP2 EQ PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0x4c DUP13 UNKNOWN_0xfb UNOFFICIAL_SWAP UNKNOWN_0xf8 MSIZE PUSH23 EXTCODEHASH UNKNOWN_0x49 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.722659808953156,
  "opcode_count": 3044,
  "unique_opcodes": 71,
  "byte_entropy": 5.754642180996123,
  "byte_60": 0.12773559624832515,
  "byte_40": 0.016748548459133542,
  "byte_52": 0.03394372487717731,
  "byte_04": 0.008485931219294328,
  "byte_36": 0.00044662795891022776,
  "byte_10": 0.005582849486377847,
  "byte_61": 0.03662349263063868,
  "byte_00": 0.037516748548459135,
  "byte_f0": 0.00022331397945511388,
  "byte_57": 0.01786511835640911,
  "byte_63": 0.008932559178204555,
  "byte_ff": 0.020768200089325593,
  "byte_7c": 0.0008932559178204555,
  "byte_01": 0.04756587762393926,
  "byte_35": 0.006476105404198303,
  "byte_16": 0.029030817329164807,
  "byte_06": 0.006252791424743189,
  "byte_fd": 0.009379187137114784,
  "byte_de": 0.00044662795891022776,
  "byte_03": 0.024787851719517643,
  "byte_81": 0.04108977221974096,
  "byte_14": 0.005359535506922733,
  "byte_f7": 0.0008932559178204555,
  "byte_80": 0.034613666815542656,
  "byte_09": 0.002009825815096025,
  "byte_5e": 0.0008932559178204555,
  "byte_a7": 0.0008932559178204555,
  "byte_b3": 0.0011165698972755694,
  "byte_18": 0.0011165698972755694,
  "byte_0d": 0.002009825815096025,
  "byte_dd": 0.0024564537740062527,
  "byte_b7": 0.0006699419383653417,
  "byte_20": 0.03707012058954891,
  "byte_d2": 0.00044662795891022776,
  "byte_dc": 0.00022331397945511388,
  "byte_23": 0.0013398838767306833,
  "byte_b8": 0.00022331397945511388,
  "byte_72": 0.00044662795891022776,
  "byte_02": 0.023671281822242072,
  "byte_6b": 0.00044662795891022776,
  "byte_31": 0.0006699419383653417,
  "byte_3c": 0.00022331397945511388,
  "byte_e5": 0.0011165698972755694,
  "byte_67": 0.0006699419383653417,
  "byte_93": 0.005806163465832961,
  "byte_42": 0.0011165698972755694,
  "byte_96": 0.0006699419383653417,
  "byte_6c": 0.0008932559178204555,
  "byte_68": 0.0008932559178204555,
  "byte_bc": 0.00022331397945511388,
  "byte_66": 0.00022331397945511388,
  "byte_84": 0.006699419383653417,
  "byte_70": 0.00022331397945511388,
  "byte_a0": 0.015185350602947744,
  "byte_82": 0.011165698972755694,
  "byte_f4": 0.00022331397945511388,
  "byte_79": 0.00022331397945511388,
  "byte_cc": 0.0013398838767306833,
  "byte_90": 0.05158552925413131,
  "byte_13": 0.00044662795891022776,
  "byte_8d": 0.0008932559178204555,
  "byte_a5": 0.0008932559178204555,
  "byte_cb": 0.00022331397945511388,
  "byte_5b": 0.030147387226440375,
  "byte_95": 0.0015631978561857973,
  "byte_d8": 0.00044662795891022776,
  "byte_9b": 0.0008932559178204555,
  "byte_41": 0.00044662795891022776,
  "byte_64": 0.0008932559178204555,
  "byte_a9": 0.00044662795891022776,
  "byte_05": 0.0073693613220187585,
  "byte_9c": 0.00044662795891022776,
  "byte_bb": 0.00022331397945511388,
  "byte_77": 0.00022331397945511388,
  "byte_ca": 0.0011165698972755694,
  "byte_e9": 0.00022331397945511388,
  "byte_51": 0.014292094685127288,
  "byte_99": 0.00044662795891022776,
  "byte_d7": 0.00044662795891022776,
  "byte_3d": 0.00022331397945511388,
  "byte_d6": 0.00022331397945511388,
  "byte_fe": 0.0029030817329164806,
  "byte_62": 0.00044662795891022776,
  "byte_ed": 0.00044662795891022776,
  "byte_3e": 0.00044662795891022776,
  "byte_f2": 0.0013398838767306833,
  "byte_e3": 0.00044662795891022776,
  "byte_8b": 0.0006699419383653417,
  "byte_45": 0.00022331397945511388,
  "byte_34": 0.004242965609647164,
  "byte_15": 0.012505582849486378,
  "byte_0a": 0.01719517641804377,
  "byte_56": 0.013398838767306834,
  "byte_83": 0.01786511835640911,
  "byte_91": 0.016301920500223315,
  "byte_50": 0.021661456007146047,
  "byte_46": 0.00044662795891022776,
  "byte_2e": 0.00022331397945511388,
  "byte_1f": 0.0022331397945511387,
  "byte_73": 0.0008932559178204555,
  "byte_19": 0.0008932559178204555,
  "byte_92": 0.006029477445288075,
  "byte_f3": 0.0022331397945511387,
  "byte_8c": 0.0011165698972755694,
  "byte_a3": 0.003796337650736936,
  "byte_24": 0.002009825815096025,
  "byte_c2": 0.0008932559178204555,
  "byte_a8": 0.00022331397945511388,
  "byte_e7": 0.00044662795891022776,
  "byte_37": 0.0013398838767306833,
  "byte_94": 0.003573023671281822,
  "byte_ae": 0.00022331397945511388,
  "byte_76": 0.00044662795891022776,
  "byte_44": 0.0011165698972755694,
  "byte_07": 0.002009825815096025,
  "byte_aa": 0.0011165698972755694,
  "byte_9e": 0.0024564537740062527,
  "byte_a6": 0.00022331397945511388,
  "byte_c7": 0.0008932559178204555,
  "byte_0f": 0.005359535506922733,
  "byte_d3": 0.00022331397945511388,
  "byte_cd": 0.00044662795891022776,
  "byte_1e": 0.0022331397945511387,
  "byte_e8": 0.00022331397945511388,
  "byte_48": 0.00022331397945511388,
  "byte_0c": 0.001786511835640911,
  "byte_33": 0.006252791424743189,
  "byte_6f": 0.00044662795891022776,
  "byte_ad": 0.0011165698972755694,
  "byte_a4": 0.00044662795891022776,
  "byte_c1": 0.00044662795891022776,
  "byte_fa": 0.0011165698972755694,
  "byte_2b": 0.0008932559178204555,
  "byte_0e": 0.0013398838767306833,
  "byte_f5": 0.002009825815096025,
  "byte_54": 0.009602501116569897,
  "byte_cf": 0.0008932559178204555,
  "byte_11": 0.0024564537740062527,
  "byte_87": 0.0022331397945511387,
  "byte_3f": 0.00044662795891022776,
  "byte_88": 0.0008932559178204555,
  "byte_85": 0.003796337650736936,
  "byte_55": 0.003796337650736936,
  "byte_7f": 0.0022331397945511387,
  "byte_e1": 0.0008932559178204555,
  "byte_eb": 0.0006699419383653417,
  "byte_ec": 0.0006699419383653417,
  "byte_7d": 0.0015631978561857973,
  "byte_d1": 0.0006699419383653417,
  "byte_4f": 0.0008932559178204555,
  "byte_71": 0.0011165698972755694,
  "byte_c0": 0.0006699419383653417,
  "byte_b2": 0.0011165698972755694,
  "byte_29": 0.0008932559178204555,
  "byte_c8": 0.0013398838767306833,
  "byte_c3": 0.0008932559178204555,
  "byte_b9": 0.0006699419383653417,
  "byte_25": 0.0006699419383653417,
  "byte_c9": 0.00022331397945511388,
  "byte_21": 0.00022331397945511388,
  "byte_2f": 0.00022331397945511388,
  "byte_43": 0.00022331397945511388,
  "byte_b0": 0.002009825815096025,
  "byte_86": 0.0026797677534613666,
  "byte_1b": 0.0006699419383653417,
  "byte_e2": 0.0008932559178204555,
  "byte_69": 0.0006699419383653417,
  "byte_fc": 0.0008932559178204555,
  "byte_f1": 0.0008932559178204555,
  "byte_c4": 0.0008932559178204555,
  "byte_a1": 0.0008932559178204555,
  "byte_28": 0.0006699419383653417,
  "byte_5a": 0.0008932559178204555,
  "byte_4d": 0.0006699419383653417,
  "byte_ef": 0.0006699419383653417,
  "byte_e6": 0.00022331397945511388,
  "byte_08": 0.0006699419383653417,
  "byte_1c": 0.00022331397945511388,
  "byte_db": 0.00044662795891022776,
  "byte_b4": 0.0006699419383653417,
  "byte_32": 0.00044662795891022776,
  "byte_5c": 0.00044662795891022776,
  "byte_e0": 0.0008932559178204555,
  "byte_9d": 0.00044662795891022776,
  "byte_bd": 0.00044662795891022776,
  "byte_12": 0.00044662795891022776,
  "byte_7a": 0.0008932559178204555,
  "byte_5d": 0.00044662795891022776,
  "byte_39": 0.00044662795891022776,
  "byte_a2": 0.00044662795891022776,
  "byte_30": 0.0006699419383653417,
  "byte_89": 0.0006699419383653417,
  "byte_0b": 0.0013398838767306833,
  "byte_6a": 0.00022331397945511388,
  "byte_ea": 0.00022331397945511388,
  "byte_ba": 0.00044662795891022776,
  "byte_bf": 0.00022331397945511388,
  "byte_ce": 0.00022331397945511388,
  "byte_8f": 0.00044662795891022776,
  "byte_b1": 0.00022331397945511388,
  "byte_6e": 0.00022331397945511388,
  "byte_3b": 0.00022331397945511388,
  "byte_d4": 0.00022331397945511388,
  "byte_2c": 0.00022331397945511388,
  "byte_53": 0.00022331397945511388,
  "byte_59": 0.00044662795891022776,
  "byte_d0": 0.00044662795891022776,
  "byte_49": 0.00044662795891022776,
  "byte_97": 0.00022331397945511388,
  "byte_22": 0.00022331397945511388,
  "byte_da": 0.00044662795891022776,
  "byte_af": 0.00022331397945511388,
  "byte_17": 0.00022331397945511388,
  "byte_47": 0.00044662795891022776,
  "byte_65": 0.00022331397945511388,
  "byte_58": 0.00022331397945511388,
  "byte_4c": 0.00022331397945511388,
  "byte_fb": 0.00022331397945511388,
  "byte_f8": 0.00044662795891022776,
  "byte_4b": 0.00022331397945511388,
  "byte_c6": 0.00022331397945511388,
  "byte_d9": 0.00022331397945511388,
  "byte_e4": 0.00022331397945511388,
  "num_nodes": 4,
  "num_edges": 3,
  "avg_degree": 1.5,
  "density": 0.25,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 6,
  "event_nums": 4,
  "creation_block": 5594140,
  "creation_timestamp": 1526028861,
  "life_time": 62975.0,
  "duration_seconds": 957618.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 5,
  "num_buyers": 1,
  "num_sellers": 3,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 9.527439024390244e-05,
  "avg_gas_limit": 403034.8333333333,
  "std_gas_limit": 519099.8828133229,
  "avg_gas_used": 268700.5,
  "std_gas_used": 523565.0339368071,
  "avg_gas_price": 14457860778.666666,
  "std_gas_price": 4605752806.133459,
  "transfer_num": 3,
  "burn_num": 1,
  "timeline_sequence": [
    [
      5594140,
      1526028861,
      626,
      60,
      0,
      1539140,
      20000000000,
      0,
      1,
      4634084,
      1439140,
      17526740
    ],
    [
      5595001,
      1526042397,
      627,
      107,
      0,
      153974,
      15000000000,
      0,
      1,
      3198738,
      53974,
      17525879
    ],
    [
      5595029,
      1526042792,
      629,
      228,
      0,
      400000,
      15000000000,
      0,
      1,
      6566655,
      38974,
      17525851
    ],
    [
      5595051,
      1526043317,
      398,
      88,
      0,
      60000,
      18747164672,
      0,
      1,
      3187809,
      38974,
      17525829
    ],
    [
      5648034,
      1526847734,
      52,
      40,
      0,
      130000,
      6000000000,
      1,
      0,
      1943069,
      21046,
      17472846
    ],
    [
      5657115,
      1526986479,
      735,
      176,
      0,
      135095,
      12000000000,
      0,
      1,
      7854230,
      20095,
      17463765
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.18;\n/** ----------------------------------------------------------------------------------------------\n * ZJLTToken by ZJLT Distributed Factoring Network Limited.\n * An ERC20 standard\n *\n * author: ZJLT Distributed Factoring Network Team\n */\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error.\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract ERC20 {\n\n    uint256 public totalSupply;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n\n    function allowance(address owner, address spender) public view returns (uint256);\n    function approve(address spender, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\ninterface TokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n}\n\n\n\ncontract TokenERC20 is ERC20, Ownable{\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8  public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    using SafeMath for uint256;\n    // Balances\n    mapping (address => uint256) balances;\n    // Allowances\n    mapping (address => mapping (address => uint256)) allowances;\n\n\n    // ----- Events -----\n    event Burn(address indexed from, uint256 value);\n\n\n    /**\n     * Constructor function\n     */\n    function TokenERC20(uint256 _initialSupply, string _tokenName, string _tokenSymbol, uint8 _decimals) public {\n        name = _tokenName;                                   // Set the name for display purposes\n        symbol = _tokenSymbol;                               // Set the symbol for display purposes\n        decimals = _decimals;\n\n        totalSupply = _initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balances[msg.sender] = totalSupply;                // Give the creator all initial tokens\n    }\n\n        /**\n     * @dev Fix for the ERC20 short address attack.\n     */\n    modifier onlyPayloadSize(uint size) {\n      if(msg.data.length < size + 4) {\n        revert();\n      }\n      _;\n    }\n    \n\n    function balanceOf(address _owner) public view returns(uint256) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowances[_owner][_spender];\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal returns(bool) {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balances[_from] >= _value);\n        // Check for overflows\n        require(balances[_to] + _value > balances[_to]);\n\n        require(_value >= 0);\n        // Save this for an assertion in the future\n        uint previousBalances = balances[_from].add(balances[_to]);\n         // SafeMath.sub will throw if there is not enough balance.\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balances[_from] + balances[_to] == previousBalances);\n\n        return true;\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        return _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value > 0);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        require((_value == 0) || (allowances[msg.sender][_spender] == 0));\n        allowances[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns(bool) {\n        if (approve(_spender, _value)) {\n            TokenRecipient spender = TokenRecipient(_spender);\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n        return false;\n    }\n\n\n  /**\n   * @dev Transfer tokens to multiple addresses\n   * @param _addresses The addresses that will receieve tokens\n   * @param _amounts The quantity of tokens that will be transferred\n   * @return True if the tokens are transferred correctly\n   */\n  function transferForMultiAddresses(address[] _addresses, uint256[] _amounts)  public returns (bool) {\n    for (uint256 i = 0; i < _addresses.length; i++) {\n      require(_addresses[i] != address(0));\n      require(_amounts[i] <= balances[msg.sender]);\n      require(_amounts[i] > 0);\n\n      // SafeMath.sub will throw if there is not enough balance.\n      balances[msg.sender] = balances[msg.sender].sub(_amounts[i]);\n      balances[_addresses[i]] = balances[_addresses[i]].add(_amounts[i]);\n      emit Transfer(msg.sender, _addresses[i], _amounts[i]);\n    }\n    return true;\n  }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns(bool) {\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n        balances[msg.sender] = balances[msg.sender].sub(_value);            // Subtract from the sender\n        totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n        /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns(bool) {\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowances[_from][msg.sender]);    // Check allowance\n        balances[_from] = balances[_from].sub(_value);                         // Subtract from the targeted balance\n        allowances[_from][msg.sender] = allowances[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n        totalSupply = totalSupply.sub(_value);                                 // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n\n\n    /**\n     * approve should be called when allowances[_spender] == 0. To increment\n     * allowances value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n        // Check for overflows\n        require(allowances[msg.sender][_spender].add(_addedValue) > allowances[msg.sender][_spender]);\n\n        allowances[msg.sender][_spender] =allowances[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n        uint oldValue = allowances[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowances[msg.sender][_spender] = 0;\n        } else {\n            allowances[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowances[msg.sender][_spender]);\n        return true;\n    }\n\n\n}\n\n\ncontract ZJLTToken is TokenERC20 {\n\n    function ZJLTToken() TokenERC20(2500000000, \"ZJLTToken\", \"ZJLT Distributed Factoring Network\", 18) public {\n\n    }\n\t\n\tfunction () payable public {\n      //if ether is sent to this address, send it back.\n      //throw;\n      require(false);\n    }\n}"
}