{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 DUP1 SLOAD PUSH2 PUSH1 PUSH1 EXP SUB NOT AND CALLER PUSH2 MUL OR SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 PUSH12 SWAP1 DUP2 SWAP1 SSTORE PUSH1 SSTORE PUSH12 PUSH1 SSTORE PUSH12 PUSH1 DUP2 SWAP1 SSTORE PUSH1 SSTORE DUP2 MLOAD DUP1 DUP4 ADD SWAP1 SWAP3 MSTORE PUSH1 DUP1 DUP4 MSTORE PUSH32 SWAP3 SWAP1 SWAP2 ADD SWAP2 DUP3 MSTORE PUSH2 SWAP2 PUSH1 SWAP2 PUSH2 JUMP JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR DUP2 SSTORE PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE DUP2 DUP2 MSTORE PUSH32 PUSH1 SWAP1 SWAP2 ADD SWAP1 DUP2 MSTORE PUSH2 SWAP2 PUSH1 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH3 PUSH1 SSTORE PUSH7 PUSH1 SSTORE PUSH1 PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND CALLER OR SWAP1 SSTORE PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 SWAP2 POP PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD CALLVALUE SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH1 SLOAD PUSH1 SLOAD SWAP1 DUP3 MUL SWAP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE CALLER DUP1 DUP5 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP4 SLOAD DUP5 MLOAD DUP7 DUP2 MSTORE SWAP5 MLOAD SWAP3 SWAP5 SWAP4 AND SWAP3 PUSH32 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 MUL SWAP2 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD DUP3 ADD SWAP1 DUP2 SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE PUSH1 SLOAD GT PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMPDEST POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP1 CALLDATALOAD DUP1 DUP3 ADD CALLDATALOAD DUP4 DUP2 MUL DUP1 DUP7 ADD DUP6 ADD SWAP1 SWAP7 MSTORE DUP1 DUP6 MSTORE PUSH2 SWAP6 CALLDATASIZE SWAP6 SWAP4 SWAP5 PUSH1 SWAP5 SWAP4 DUP6 ADD SWAP3 SWAP2 DUP3 SWAP2 DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP POP SWAP4 CALLDATALOAD SWAP5 POP PUSH2 SWAP4 POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP2 MLOAD DUP4 SWAP3 PUSH32 SWAP3 SWAP1 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 POP PUSH1 SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 JUMPI PUSH2 DUP4 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST ISZERO PUSH2 JUMPI CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP1 DUP5 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 POP PUSH1 SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD DUP6 ADD DUP2 SSTORE PUSH1 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE SLOAD DUP3 MLOAD DUP6 DUP2 MSTORE SWAP2 DUP3 ADD MSTORE DUP2 MLOAD PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0x1f CALLVALUE DUP2 DUP1 UNKNOWN_0xee SHA3 CHAINID UNOFFICIAL_PUSH DUP7 EXTCODEHASH DUP13 UNKNOWN_0xa7 CALLCODE UNKNOWN_0xf7 SHR UNKNOWN_0xd9 SELFDESTRUCT BALANCE UNKNOWN_0xdc DUP15 MOD SELFBALANCE UNKNOWN_0xe3 UNKNOWN_0xde SDIV UNKNOWN_0x2b UNKNOWN_0x5c UNKNOWN_0xb4 SWAP15 SGT BASEFEE INVALID_0x7d",
  "opcode_entropy": 4.957532831390858,
  "opcode_count": 1880,
  "unique_opcodes": 90,
  "byte_entropy": 6.002319631328913,
  "byte_0x": 0.00035161744022503517,
  "byte_60": 0.09212376933895922,
  "byte_80": 0.049578059071729956,
  "byte_40": 0.008438818565400843,
  "byte_52": 0.020042194092827006,
  "byte_0e": 0.004571026722925457,
  "byte_54": 0.020042194092827006,
  "byte_61": 0.0509845288326301,
  "byte_01": 0.04289732770745429,
  "byte_00": 0.06364275668073137,
  "byte_a8": 0.0007032348804500703,
  "byte_02": 0.021448663853727144,
  "byte_0a": 0.007383966244725738,
  "byte_03": 0.019338959212376935,
  "byte_19": 0.004571026722925457,
  "byte_16": 0.014767932489451477,
  "byte_33": 0.004571026722925457,
  "byte_17": 0.0028129395218002813,
  "byte_90": 0.044655414908579466,
  "byte_55": 0.010548523206751054,
  "byte_34": 0.00808720112517581,
  "byte_15": 0.017229254571026722,
  "byte_27": 0.0028129395218002813,
  "byte_57": 0.024261603375527425,
  "byte_fd": 0.01230661040787623,
  "byte_5b": 0.03727144866385373,
  "byte_50": 0.026371308016877638,
  "byte_81": 0.03305203938115331,
  "byte_20": 0.015119549929676512,
  "byte_91": 0.015471167369901548,
  "byte_82": 0.01617440225035162,
  "byte_6b": 0.0010548523206751054,
  "byte_4f": 0.0010548523206751054,
  "byte_ce": 0.00035161744022503517,
  "byte_5e": 0.00035161744022503517,
  "byte_3e": 0.0007032348804500703,
  "byte_25": 0.0007032348804500703,
  "byte_10": 0.0035161744022503515,
  "byte_04": 0.014767932489451477,
  "byte_d8": 0.0017580872011251757,
  "byte_c5": 0.0010548523206751054,
  "byte_5a": 0.0014064697609001407,
  "byte_ef": 0.0010548523206751054,
  "byte_b8": 0.0007032348804500703,
  "byte_c0": 0.00035161744022503517,
  "byte_5c": 0.0010548523206751054,
  "byte_e7": 0.00035161744022503517,
  "byte_2f": 0.0007032348804500703,
  "byte_1f": 0.003867791842475387,
  "byte_12": 0.0014064697609001407,
  "byte_30": 0.0017580872011251757,
  "byte_88": 0.0017580872011251757,
  "byte_0b": 0.0017580872011251757,
  "byte_0c": 0.0014064697609001407,
  "byte_51": 0.011603375527426161,
  "byte_83": 0.010196905766526019,
  "byte_92": 0.009142053445850914,
  "byte_06": 0.007735583684950774,
  "byte_7f": 0.0035161744022503515,
  "byte_6c": 0.0014064697609001407,
  "byte_75": 0.0014064697609001407,
  "byte_6d": 0.0007032348804500703,
  "byte_69": 0.0014064697609001407,
  "byte_78": 0.0010548523206751054,
  "byte_b3": 0.0014064697609001407,
  "byte_56": 0.0189873417721519,
  "byte_ff": 0.005977496483825597,
  "byte_4c": 0.00035161744022503517,
  "byte_58": 0.0007032348804500703,
  "byte_05": 0.006329113924050633,
  "byte_62": 0.0007032348804500703,
  "byte_98": 0.00035161744022503517,
  "byte_96": 0.002109704641350211,
  "byte_66": 0.0007032348804500703,
  "byte_23": 0.0014064697609001407,
  "byte_86": 0.0028129395218002813,
  "byte_f2": 0.002109704641350211,
  "byte_6f": 0.0007032348804500703,
  "byte_c1": 0.0007032348804500703,
  "byte_07": 0.003867791842475387,
  "byte_0d": 0.002109704641350211,
  "byte_09": 0.0014064697609001407,
  "byte_a0": 0.006329113924050633,
  "byte_db": 0.0010548523206751054,
  "byte_85": 0.006329113924050633,
  "byte_ae": 0.0017580872011251757,
  "byte_11": 0.003867791842475387,
  "byte_93": 0.005274261603375527,
  "byte_ba": 0.003867791842475387,
  "byte_be": 0.00035161744022503517,
  "byte_c4": 0.0010548523206751054,
  "byte_31": 0.0017580872011251757,
  "byte_ea": 0.00035161744022503517,
  "byte_39": 0.0007032348804500703,
  "byte_f3": 0.002109704641350211,
  "byte_36": 0.0014064697609001407,
  "byte_63": 0.00808720112517581,
  "byte_7c": 0.0010548523206751054,
  "byte_35": 0.004922644163150493,
  "byte_de": 0.0010548523206751054,
  "byte_14": 0.008790436005625879,
  "byte_1b": 0.0014064697609001407,
  "byte_0f": 0.0007032348804500703,
  "byte_1e": 0.0007032348804500703,
  "byte_a5": 0.0007032348804500703,
  "byte_18": 0.0010548523206751054,
  "byte_dd": 0.0017580872011251757,
  "byte_cc": 0.0017580872011251757,
  "byte_53": 0.0007032348804500703,
  "byte_e1": 0.0007032348804500703,
  "byte_3c": 0.00035161744022503517,
  "byte_e5": 0.00035161744022503517,
  "byte_67": 0.0007032348804500703,
  "byte_42": 0.00035161744022503517,
  "byte_68": 0.0017580872011251757,
  "byte_4a": 0.00035161744022503517,
  "byte_46": 0.0014064697609001407,
  "byte_4d": 0.0024613220815752463,
  "byte_64": 0.0007032348804500703,
  "byte_c7": 0.00035161744022503517,
  "byte_73": 0.0007032348804500703,
  "byte_65": 0.0007032348804500703,
  "byte_bc": 0.0007032348804500703,
  "byte_2e": 0.0007032348804500703,
  "byte_22": 0.0007032348804500703,
  "byte_d7": 0.00035161744022503517,
  "byte_9d": 0.0007032348804500703,
  "byte_70": 0.0007032348804500703,
  "byte_f4": 0.0007032348804500703,
  "byte_7b": 0.00035161744022503517,
  "byte_5f": 0.0007032348804500703,
  "byte_e3": 0.0010548523206751054,
  "byte_97": 0.0014064697609001407,
  "byte_87": 0.0024613220815752463,
  "byte_c6": 0.0007032348804500703,
  "byte_8b": 0.00035161744022503517,
  "byte_2a": 0.00035161744022503517,
  "byte_3b": 0.0007032348804500703,
  "byte_a4": 0.0007032348804500703,
  "byte_13": 0.0007032348804500703,
  "byte_3f": 0.0010548523206751054,
  "byte_95": 0.0017580872011251757,
  "byte_9b": 0.0014064697609001407,
  "byte_41": 0.0007032348804500703,
  "byte_99": 0.00035161744022503517,
  "byte_a9": 0.0014064697609001407,
  "byte_9c": 0.00035161744022503517,
  "byte_bb": 0.00035161744022503517,
  "byte_7e": 0.0014064697609001407,
  "byte_a2": 0.0010548523206751054,
  "byte_f1": 0.0014064697609001407,
  "byte_38": 0.0007032348804500703,
  "byte_f9": 0.00035161744022503517,
  "byte_b7": 0.0007032348804500703,
  "byte_08": 0.004219409282700422,
  "byte_3a": 0.00035161744022503517,
  "byte_49": 0.00035161744022503517,
  "byte_84": 0.004219409282700422,
  "byte_94": 0.0031645569620253164,
  "byte_ad": 0.002109704641350211,
  "byte_e2": 0.0007032348804500703,
  "byte_c8": 0.0007032348804500703,
  "byte_c2": 0.0010548523206751054,
  "byte_b0": 0.0010548523206751054,
  "byte_fc": 0.0010548523206751054,
  "byte_37": 0.0017580872011251757,
  "byte_8d": 0.0007032348804500703,
  "byte_aa": 0.0010548523206751054,
  "byte_2b": 0.0010548523206751054,
  "byte_a7": 0.0010548523206751054,
  "byte_a1": 0.0024613220815752463,
  "byte_28": 0.0010548523206751054,
  "byte_f5": 0.0017580872011251757,
  "byte_a3": 0.0010548523206751054,
  "byte_ee": 0.0007032348804500703,
  "byte_3d": 0.0007032348804500703,
  "byte_6a": 0.00035161744022503517,
  "byte_b1": 0.00035161744022503517,
  "byte_ed": 0.00035161744022503517,
  "byte_f6": 0.0014064697609001407,
  "byte_24": 0.0010548523206751054,
  "byte_a6": 0.00035161744022503517,
  "byte_21": 0.0010548523206751054,
  "byte_4b": 0.00035161744022503517,
  "byte_2d": 0.00035161744022503517,
  "byte_8a": 0.00035161744022503517,
  "byte_8e": 0.0007032348804500703,
  "byte_c3": 0.00035161744022503517,
  "byte_b4": 0.0010548523206751054,
  "byte_32": 0.00035161744022503517,
  "byte_e0": 0.0007032348804500703,
  "byte_bd": 0.00035161744022503517,
  "byte_44": 0.00035161744022503517,
  "byte_cf": 0.00035161744022503517,
  "byte_7a": 0.0014064697609001407,
  "byte_71": 0.00035161744022503517,
  "byte_5d": 0.00035161744022503517,
  "byte_ab": 0.00035161744022503517,
  "byte_d5": 0.00035161744022503517,
  "byte_8f": 0.00035161744022503517,
  "byte_e4": 0.00035161744022503517,
  "byte_b6": 0.00035161744022503517,
  "byte_eb": 0.00035161744022503517,
  "byte_74": 0.0007032348804500703,
  "byte_fb": 0.00035161744022503517,
  "byte_fe": 0.00035161744022503517,
  "byte_c9": 0.00035161744022503517,
  "byte_1d": 0.00035161744022503517,
  "byte_9e": 0.0007032348804500703,
  "byte_d4": 0.00035161744022503517,
  "byte_29": 0.0007032348804500703,
  "byte_f7": 0.0007032348804500703,
  "byte_d2": 0.0010548523206751054,
  "byte_72": 0.0014064697609001407,
  "byte_9f": 0.00035161744022503517,
  "byte_cd": 0.00035161744022503517,
  "byte_ec": 0.00035161744022503517,
  "byte_b9": 0.00035161744022503517,
  "byte_8c": 0.00035161744022503517,
  "byte_1c": 0.00035161744022503517,
  "byte_d9": 0.00035161744022503517,
  "byte_dc": 0.00035161744022503517,
  "byte_47": 0.00035161744022503517,
  "byte_48": 0.00035161744022503517,
  "byte_7d": 0.00035161744022503517,
  "num_nodes": 4,
  "num_edges": 4,
  "avg_degree": 2.0,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 19,
  "event_nums": 133,
  "creation_block": 6518393,
  "creation_timestamp": 1539588623,
  "life_time": 210440.0,
  "duration_seconds": 2975712.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 5,
  "num_buyers": 2,
  "num_sellers": 4,
  "num_creator_transfers": 1,
  "buy_amt": 1e+16,
  "sell_amt": 4e+16,
  "avg_value": 2500000000000000.0,
  "txn_per_block": 9.028658864004638e-05,
  "avg_gas_limit": 297167.6842105263,
  "std_gas_limit": 398984.51374577545,
  "avg_gas_used": 275356.5789473684,
  "std_gas_used": 410101.4119279479,
  "avg_gas_price": 8467105263.157895,
  "std_gas_price": 7511815485.197738,
  "airdrop_num": 125,
  "transfer_num": 6,
  "distrstarted_num": 1,
  "atinversebrah_num": 1,
  "adminclaimairdrop_num": 1,
  "adminclaimairdropmultiple_num": 5,
  "startdistribution_num": 1,
  "timeline_sequence": [
    [
      6518393,
      1539588623,
      0,
      131,
      0,
      958188,
      10000000000,
      0,
      1,
      6764673,
      958188,
      16574729
    ],
    [
      6531815,
      1539778619,
      2,
      18,
      0,
      51695,
      1000000000,
      0,
      1,
      3071848,
      51695,
      16561307
    ],
    [
      6533234,
      1539798464,
      3,
      30,
      0,
      111040,
      5000000000,
      0,
      1,
      1586317,
      111040,
      16559888
    ],
    [
      6537262,
      1539854960,
      4,
      146,
      0,
      51694,
      5000000000,
      0,
      1,
      6034910,
      51694,
      16555860
    ],
    [
      6537423,
      1539857158,
      5,
      53,
      0,
      1253290,
      5000000000,
      0,
      1,
      7908329,
      1253290,
      16555699
    ],
    [
      6537448,
      1539857454,
      6,
      114,
      0,
      550327,
      5000000000,
      0,
      1,
      5600499,
      550327,
      16555674
    ],
    [
      6537492,
      1539858071,
      7,
      178,
      0,
      51694,
      5000000000,
      0,
      1,
      5778882,
      51694,
      16555630
    ],
    [
      6539745,
      1539889552,
      1662,
      15,
      10000000000000000,
      90000,
      24000000000,
      1,
      0,
      441536,
      21277,
      16553377
    ],
    [
      6542719,
      1539931957,
      1673,
      28,
      10000000000000000,
      90000,
      24000000000,
      1,
      0,
      825979,
      21277,
      16550403
    ],
    [
      6542742,
      1539932292,
      1674,
      9,
      10000000000000000,
      90000,
      24000000000,
      1,
      0,
      278858,
      21277,
      16550380
    ],
    [
      6543285,
      1539940131,
      8,
      82,
      0,
      667295,
      5000000000,
      0,
      1,
      4575448,
      667295,
      16549837
    ],
    [
      6543536,
      1539943955,
      9,
      42,
      0,
      1165292,
      5000000000,
      0,
      1,
      3934579,
      1165292,
      16549586
    ],
    [
      6556108,
      1540121094,
      10,
      42,
      0,
      51694,
      4000000000,
      0,
      1,
      6131870,
      51694,
      16537014
    ],
    [
      6568066,
      1540290083,
      11,
      79,
      0,
      51822,
      5000000000,
      0,
      1,
      6348600,
      51822,
      16525056
    ],
    [
      6570817,
      1540328966,
      12,
      91,
      0,
      28138,
      5000000000,
      0,
      1,
      7950889,
      28138,
      16522305
    ],
    [
      6573752,
      1540370298,
      291,
      8,
      10000000000000000,
      134517,
      16000000000,
      0,
      1,
      481224,
      103475,
      16519370
    ],
    [
      6580860,
      1540470735,
      305,
      17,
      0,
      187200,
      10000000000,
      0,
      1,
      6663984,
      36758,
      16512262
    ],
    [
      6728833,
      1542564335,
      42,
      20,
      0,
      60000,
      2875000000,
      0,
      1,
      2254628,
      35542,
      16364289
    ],
    [
      6573752,
      1540370298,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.24;\n\ncontract Token {\n\n    /// @return total amount of tokens\n    function totalSupply() constant returns (uint256 supply) {}\n    \n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) constant returns (uint256 balance) {}\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) returns (bool success) {}\n\n\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n}\n\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n\n    function balanceOf(address _owner) constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply;\n}\n\ncontract Plumix is StandardToken { \n\n    /* Public variables of the token */\n\n   \n    string public name;                   \n    uint8 public decimals;                \n    string public symbol;                 \n    uint256 public unitsOneEthCanBuy;     // How many units of your coin can be bought by 1 ETH?\n    uint256 public minSales;                 // Minimum amount to be bought (0.01ETH)\n    uint256 public totalEthInWei;         \n    address internal fundsWallet;           \n    uint256 public airDropBal;\n    uint256 public icoSales;\n    uint256 public icoSalesBal;\n    uint256 public icoSalesCount;\n    bool public distributionClosed;\n\n    \n    modifier canDistr() {\n        require(!distributionClosed);\n        _;\n    }\n    \n    address owner = msg.sender;\n    \n     modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    \n    event Airdrop(address indexed _owner, uint _amount, uint _balance);\n    event DistrClosed();\n    event DistrStarted();\n    event Burn(address indexed burner, uint256 value);\n    \n    \n    function endDistribution() onlyOwner canDistr public returns (bool) {\n        distributionClosed = true;\n        emit DistrClosed();\n        return true;\n    }\n    \n    function startDistribution() onlyOwner public returns (bool) {\n        distributionClosed = false;\n        emit DistrStarted();\n        return true;\n    }\n    \n\n    function Plumix() {\n        balances[msg.sender] = 10000000000e18;               \n        totalSupply = 10000000000e18;                        \n        airDropBal = 1500000000e18;\n        icoSales = 5000000000e18;\n        icoSalesBal = 5000000000e18;\n        name = \"Plumix\";                                   \n        decimals = 18;                                               \n        symbol = \"PLXT\";                                             \n        unitsOneEthCanBuy = 10000000;\n        minSales = 1 ether / 100; // 0.01ETH\n        icoSalesCount = 0;\n        fundsWallet = msg.sender;                                   \n        distributionClosed = true;\n        \n    }\n\n    function() public canDistr payable{\n        totalEthInWei = totalEthInWei + msg.value;\n        uint256 amount = msg.value * unitsOneEthCanBuy;\n        require(msg.value >= minSales);\n        require(amount <= icoSalesBal);\n        \n\n        balances[fundsWallet] = balances[fundsWallet] - amount;\n        balances[msg.sender] = balances[msg.sender] + amount;\n\n        Transfer(fundsWallet, msg.sender, amount); // Broadcast a message to the blockchain\n\n        \n        fundsWallet.transfer(msg.value);\n        \n        icoSalesCount = icoSalesCount + amount;\n        icoSalesBal = icoSalesBal - amount;\n        if (icoSalesCount >= icoSales) {\n            distributionClosed = true;\n        }\n    }\n    \n    \n function doAirdrop(address _participant, uint _amount) internal {\n\n        require( _amount > 0 );      \n\n        require( _amount <= airDropBal );\n        \n        balances[_participant] = balances[_participant] + _amount;\n        airDropBal = airDropBal - _amount ;\n     \n     // Airdrop log\n    emit Airdrop(_participant, _amount, balances[_participant]);  \n     }\n     \n     \n         function adminClaimAirdrop(address _participant, uint _amount) public onlyOwner {        \n        doAirdrop(_participant, _amount);\n    }\n\n    function adminClaimAirdropMultiple(address[] _addresses, uint _amount) public onlyOwner {        \n        for (uint i = 0; i < _addresses.length; i++) doAirdrop(_addresses[i], _amount);\n    }\n     \n    \n    function burn(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n\n\n        address burner = msg.sender;\n        balances[burner] = balances[burner] - _value;\n        totalSupply = totalSupply - _value;\n        emit Burn(burner, _value);\n    }\n\n}"
}