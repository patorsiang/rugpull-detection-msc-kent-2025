{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST JUMPDEST CALLDATASIZE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP1 PUSH1 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD DUP4 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP5 POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 CALLER CALLVALUE PUSH1 PUSH2 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 MUL PUSH1 ADD DUP3 ADD PUSH1 MSTORE JUMPDEST POP PUSH1 SLOAD SWAP1 SWAP5 POP PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 MUL PUSH1 ADD DUP3 ADD PUSH1 MSTORE JUMPDEST POP SWAP3 POP PUSH1 SWAP2 POP JUMPDEST PUSH1 SLOAD DUP3 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 ADD PUSH1 JUMPDEST SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 POP DUP1 DUP5 DUP4 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP1 SWAP3 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SWAP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE JUMPDEST PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH2 JUMP JUMPDEST DUP4 DUP4 SWAP6 POP SWAP6 POP JUMPDEST POP POP POP POP SWAP1 SWAP2 JUMP JUMPDEST PUSH10 DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 ADD PUSH1 JUMPDEST SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH3 DUP2 JUMP JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD CALLVALUE SWAP1 PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 DUP3 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 CALLER CALLVALUE PUSH1 PUSH2 JUMP JUMPDEST JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 DUP2 JUMP JUMPDEST PUSH4 DUP2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH7 DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND PUSH21 OR SWAP1 SSTORE PUSH7 DUP9 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH4 PUSH2 PUSH2 JUMP JUMPDEST LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH4 PUSH2 PUSH2 JUMP JUMPDEST LT JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS DUP2 AND BALANCE SWAP2 AND BALANCE PUSH2 JUMP JUMPDEST SWAP6 POP PUSH2 PUSH1 SLOAD PUSH2 PUSH2 JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP5 POP DUP5 ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP9 ISZERO PUSH2 MUL DUP10 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 JUMP JUMPDEST DUP8 DUP6 LT ISZERO PUSH2 JUMPI PUSH2 DUP9 DUP7 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP4 POP DUP5 SWAP8 POP JUMPDEST PUSH1 SWAP3 POP PUSH2 DUP9 PUSH2 JUMP JUMPDEST DUP4 ADD SWAP3 POP DUP7 ISZERO PUSH2 JUMPI PUSH1 DUP4 ADD SWAP3 POP JUMPDEST PUSH2 PUSH1 PUSH2 PUSH3 DUP7 DUP4 ADD PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP PUSH2 DUP9 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP11 DUP4 PUSH1 MLOAD PUSH29 PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 POP DUP9 ISZERO PUSH2 MUL DUP10 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP10 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH32 DUP10 DUP10 PUSH1 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE ISZERO ISZERO PUSH1 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 SWAP1 SWAP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP5 ISZERO PUSH2 MUL DUP6 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP6 SWAP1 PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS DUP2 AND BALANCE SWAP2 AND BALANCE PUSH2 JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST DUP7 EQ PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 DUP1 DUP1 JUMPDEST DUP7 DUP5 LT ISZERO PUSH2 JUMPI GAS SWAP3 POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 CREATE DUP1 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD SWAP3 SWAP5 POP SWAP2 SWAP1 DUP2 ADD PUSH2 DUP4 DUP3 PUSH2 JUMP JUMPDEST SWAP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 ADD PUSH1 JUMPDEST DUP2 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH2 SWAP4 SWAP1 SWAP4 EXP SWAP3 DUP4 MUL SWAP3 MUL NOT AND OR SWAP1 SSTORE POP PUSH1 SWAP5 SWAP1 SWAP5 ADD SWAP4 PUSH2 GAS DUP5 SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP GAS PUSH2 DUP3 PUSH2 PUSH4 PUSH2 AND JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 SWAP1 SWAP4 ADD SWAP3 PUSH2 JUMP JUMPDEST DUP5 SWAP6 POP JUMPDEST POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST TIMESTAMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH10 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH9 DUP3 GT ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH9 DUP3 GT ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH9 DUP3 GT ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH9 DUP3 GT ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 MLOAD PUSH2 DUP1 PUSH2 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 ISZERO GT PUSH2 JUMPI PUSH1 DUP4 DUP2 MSTORE PUSH1 SWAP1 SHA3 PUSH2 SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP STOP PUSH1 PUSH1 MSTORE CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND OR SWAP1 SSTORE JUMPDEST JUMPDEST PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI JUMPDEST JUMPDEST PUSH1 SLOAD PUSH20 AND PUSH4 CALLVALUE CALLER PUSH1 MLOAD PUSH29 PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH20 SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP POP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH20 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 SLOAD PUSH20 AND DUP2 JUMP STOP LOG1 PUSH6 SHA3 PUSH17 UNKNOWN_0x2a UNKNOWN_0xd8 PUSH17 PUSH27 UNKNOWN_0xd UNKNOWN_0xd UNOFFICIAL_SWAP DUP12 DELEGATECALL UNKNOWN_0xcd UNKNOWN_0xd7 ADDRESS SWAP10 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.824048135949987,
  "opcode_count": 2687,
  "unique_opcodes": 81,
  "byte_entropy": 5.792010505975263,
  "byte_60": 0.09615384615384616,
  "byte_40": 0.01706730769230769,
  "byte_52": 0.01658653846153846,
  "byte_36": 0.0014423076923076924,
  "byte_15": 0.020432692307692308,
  "byte_61": 0.05504807692307692,
  "byte_01": 0.04158653846153846,
  "byte_1a": 0.0004807692307692308,
  "byte_57": 0.023317307692307693,
  "byte_63": 0.010096153846153847,
  "byte_ff": 0.03870192307692308,
  "byte_7c": 0.0009615384615384616,
  "byte_00": 0.07572115384615384,
  "byte_35": 0.0021634615384615386,
  "byte_04": 0.008173076923076924,
  "byte_16": 0.01730769230769231,
  "byte_03": 0.020913461538461537,
  "byte_3c": 0.001201923076923077,
  "byte_44": 0.004086538461538462,
  "byte_c3": 0.0007211538461538462,
  "byte_81": 0.026201923076923078,
  "byte_14": 0.0069711538461538465,
  "byte_31": 0.0014423076923076924,
  "byte_80": 0.035096153846153846,
  "byte_10": 0.0045673076923076926,
  "byte_e9": 0.0004807692307692308,
  "byte_6b": 0.0004807692307692308,
  "byte_56": 0.025240384615384616,
  "byte_19": 0.0026442307692307694,
  "byte_0e": 0.0021634615384615386,
  "byte_f6": 0.001201923076923077,
  "byte_1d": 0.0002403846153846154,
  "byte_7e": 0.0002403846153846154,
  "byte_39": 0.0014423076923076924,
  "byte_54": 0.010096153846153847,
  "byte_a3": 0.0004807692307692308,
  "byte_89": 0.002403846153846154,
  "byte_02": 0.018990384615384614,
  "byte_2c": 0.0007211538461538462,
  "byte_4e": 0.0002403846153846154,
  "byte_4a": 0.0004807692307692308,
  "byte_b8": 0.0002403846153846154,
  "byte_30": 0.0019230769230769232,
  "byte_51": 0.01658653846153846,
  "byte_66": 0.001201923076923077,
  "byte_2e": 0.0016826923076923078,
  "byte_4d": 0.0009615384615384616,
  "byte_b0": 0.0021634615384615386,
  "byte_78": 0.0002403846153846154,
  "byte_6a": 0.0002403846153846154,
  "byte_eb": 0.0004807692307692308,
  "byte_1c": 0.0007211538461538462,
  "byte_e7": 0.0002403846153846154,
  "byte_9d": 0.0002403846153846154,
  "byte_6c": 0.0007211538461538462,
  "byte_f3": 0.005048076923076923,
  "byte_82": 0.009134615384615385,
  "byte_cf": 0.0004807692307692308,
  "byte_6d": 0.0002403846153846154,
  "byte_ee": 0.0014423076923076924,
  "byte_27": 0.0007211538461538462,
  "byte_5a": 0.0019230769230769232,
  "byte_fe": 0.003125,
  "byte_74": 0.001201923076923077,
  "byte_5c": 0.0009615384615384616,
  "byte_e3": 0.001201923076923077,
  "byte_bb": 0.001201923076923077,
  "byte_23": 0.0009615384615384616,
  "byte_7d": 0.0004807692307692308,
  "byte_1e": 0.0002403846153846154,
  "byte_a6": 0.0009615384615384616,
  "byte_d4": 0.0002403846153846154,
  "byte_8a": 0.0004807692307692308,
  "byte_ea": 0.0002403846153846154,
  "byte_12": 0.0004807692307692308,
  "byte_b6": 0.0002403846153846154,
  "byte_68": 0.001201923076923077,
  "byte_8d": 0.0004807692307692308,
  "byte_a5": 0.0004807692307692308,
  "byte_cb": 0.0007211538461538462,
  "byte_5b": 0.05552884615384615,
  "byte_8f": 0.0002403846153846154,
  "byte_ba": 0.0002403846153846154,
  "byte_bc": 0.0007211538461538462,
  "byte_f2": 0.0009615384615384616,
  "byte_ae": 0.0009615384615384616,
  "byte_3a": 0.0004807692307692308,
  "byte_26": 0.0004807692307692308,
  "byte_ad": 0.0004807692307692308,
  "byte_87": 0.0009615384615384616,
  "byte_62": 0.001201923076923077,
  "byte_f7": 0.0002403846153846154,
  "byte_af": 0.0004807692307692308,
  "byte_3f": 0.0007211538461538462,
  "byte_be": 0.0002403846153846154,
  "byte_ca": 0.0009615384615384616,
  "byte_0a": 0.012259615384615384,
  "byte_41": 0.0004807692307692308,
  "byte_7b": 0.0004807692307692308,
  "byte_fd": 0.009375,
  "byte_8b": 0.0009615384615384616,
  "byte_cd": 0.0004807692307692308,
  "byte_a8": 0.0004807692307692308,
  "byte_05": 0.0057692307692307696,
  "byte_13": 0.0004807692307692308,
  "byte_34": 0.006009615384615385,
  "byte_22": 0.0004807692307692308,
  "byte_90": 0.036778846153846155,
  "byte_20": 0.01706730769230769,
  "byte_91": 0.01706730769230769,
  "byte_28": 0.0009615384615384616,
  "byte_83": 0.011057692307692308,
  "byte_85": 0.002403846153846154,
  "byte_50": 0.03341346153846154,
  "byte_d6": 0.0007211538461538462,
  "byte_84": 0.003605769230769231,
  "byte_bd": 0.0004807692307692308,
  "byte_94": 0.0014423076923076924,
  "byte_37": 0.0002403846153846154,
  "byte_06": 0.0045673076923076926,
  "byte_64": 0.0004807692307692308,
  "byte_7a": 0.001201923076923077,
  "byte_9e": 0.0009615384615384616,
  "byte_b3": 0.0009615384615384616,
  "byte_a0": 0.009615384615384616,
  "byte_da": 0.0009615384615384616,
  "byte_d5": 0.0002403846153846154,
  "byte_09": 0.003605769230769231,
  "byte_e4": 0.0004807692307692308,
  "byte_07": 0.004086538461538462,
  "byte_86": 0.0026442307692307694,
  "byte_73": 0.0019230769230769232,
  "byte_95": 0.001201923076923077,
  "byte_98": 0.0002403846153846154,
  "byte_9a": 0.0009615384615384616,
  "byte_c7": 0.0002403846153846154,
  "byte_a9": 0.0002403846153846154,
  "byte_c2": 0.0009615384615384616,
  "byte_4c": 0.0002403846153846154,
  "byte_71": 0.0002403846153846154,
  "byte_79": 0.0002403846153846154,
  "byte_d2": 0.0004807692307692308,
  "byte_b9": 0.0002403846153846154,
  "byte_92": 0.0045673076923076926,
  "byte_d8": 0.0009615384615384616,
  "byte_08": 0.0033653846153846156,
  "byte_3b": 0.0007211538461538462,
  "byte_f9": 0.0004807692307692308,
  "byte_93": 0.002403846153846154,
  "byte_1f": 0.0004807692307692308,
  "byte_33": 0.0021634615384615386,
  "byte_0c": 0.004326923076923077,
  "byte_11": 0.003125,
  "byte_5e": 0.0007211538461538462,
  "byte_0d": 0.006730769230769231,
  "byte_fb": 0.001201923076923077,
  "byte_6e": 0.0009615384615384616,
  "byte_76": 0.0002403846153846154,
  "byte_59": 0.0021634615384615386,
  "byte_5d": 0.0002403846153846154,
  "byte_e1": 0.0002403846153846154,
  "byte_47": 0.0007211538461538462,
  "byte_c9": 0.0009615384615384616,
  "byte_69": 0.0004807692307692308,
  "byte_b1": 0.001201923076923077,
  "byte_f5": 0.0007211538461538462,
  "byte_96": 0.0004807692307692308,
  "byte_fc": 0.0021634615384615386,
  "byte_55": 0.0026442307692307694,
  "byte_7f": 0.001201923076923077,
  "byte_de": 0.001201923076923077,
  "byte_e0": 0.0004807692307692308,
  "byte_8e": 0.0007211538461538462,
  "byte_17": 0.0014423076923076924,
  "byte_6f": 0.0004807692307692308,
  "byte_c1": 0.0007211538461538462,
  "byte_88": 0.003125,
  "byte_2f": 0.0004807692307692308,
  "byte_70": 0.0007211538461538462,
  "byte_8c": 0.0004807692307692308,
  "byte_1b": 0.0007211538461538462,
  "byte_2a": 0.0009615384615384616,
  "byte_f1": 0.0016826923076923078,
  "byte_c6": 0.0009615384615384616,
  "byte_0b": 0.0028846153846153848,
  "byte_e6": 0.0004807692307692308,
  "byte_97": 0.0004807692307692308,
  "byte_2d": 0.0002403846153846154,
  "byte_21": 0.0002403846153846154,
  "byte_df": 0.0002403846153846154,
  "byte_0f": 0.0004807692307692308,
  "byte_24": 0.0007211538461538462,
  "byte_e8": 0.0004807692307692308,
  "byte_42": 0.0009615384615384616,
  "byte_a7": 0.0004807692307692308,
  "byte_49": 0.0002403846153846154,
  "byte_d7": 0.0009615384615384616,
  "byte_53": 0.0002403846153846154,
  "byte_c5": 0.0009615384615384616,
  "byte_2b": 0.0004807692307692308,
  "byte_a1": 0.0007211538461538462,
  "byte_f0": 0.0002403846153846154,
  "byte_e2": 0.0007211538461538462,
  "byte_18": 0.0002403846153846154,
  "byte_75": 0.0002403846153846154,
  "byte_ef": 0.0004807692307692308,
  "byte_cc": 0.0004807692307692308,
  "byte_ed": 0.0004807692307692308,
  "byte_5f": 0.0002403846153846154,
  "byte_3e": 0.0002403846153846154,
  "byte_f4": 0.0004807692307692308,
  "byte_99": 0.0007211538461538462,
  "byte_25": 0.0002403846153846154,
  "byte_d3": 0.0002403846153846154,
  "byte_e5": 0.0002403846153846154,
  "byte_65": 0.0004807692307692308,
  "byte_72": 0.0004807692307692308,
  "byte_58": 0.0007211538461538462,
  "byte_43": 0.0002403846153846154,
  "byte_45": 0.0002403846153846154,
  "byte_29": 0.0004807692307692308,
  "byte_67": 0.0002403846153846154,
  "byte_ab": 0.0002403846153846154,
  "byte_a4": 0.0002403846153846154,
  "byte_b2": 0.0002403846153846154,
  "num_nodes": 64,
  "num_edges": 63,
  "avg_degree": 1.96875,
  "density": 0.015625,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 72,
  "event_nums": 0,
  "creation_block": 4353690,
  "creation_timestamp": 1507647063,
  "life_time": 1963.0,
  "duration_seconds": 57740.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 62,
  "buy_amt": 0.0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.03665987780040733,
  "avg_gas_limit": 1692567.1666666667,
  "std_gas_limit": 939595.2239178433,
  "avg_gas_used": 243791.93055555556,
  "std_gas_used": 578325.2964681566,
  "avg_gas_price": 3472222222.2222223,
  "std_gas_price": 10503930775.114384,
  "createmorepaymentchannels_num": 9,
  "timeline_sequence": [
    [
      4353690,
      1507647063,
      27,
      25,
      0,
      4712388,
      22000000000,
      0,
      0,
      2776780,
      1230999,
      18767191
    ],
    [
      4353728,
      1507647988,
      29,
      27,
      0,
      306405,
      50000000000,
      0,
      0,
      1562701,
      206405,
      18767153
    ],
    [
      4353729,
      1507648032,
      30,
      6,
      0,
      291405,
      50000000000,
      0,
      0,
      771051,
      191405,
      18767152
    ],
    [
      4355137,
      1507688984,
      31,
      51,
      0,
      3000000,
      8000000000,
      0,
      0,
      5212750,
      2562068,
      18765744
    ],
    [
      4355479,
      1507699722,
      32,
      2,
      0,
      3000000,
      8000000000,
      0,
      0,
      2856422,
      2562068,
      18765402
    ],
    [
      4355585,
      1507702437,
      33,
      20,
      0,
      3000000,
      8000000000,
      0,
      0,
      3659457,
      2562068,
      18765296
    ],
    [
      4355602,
      1507702992,
      34,
      25,
      0,
      3000000,
      8000000000,
      0,
      0,
      4647868,
      2562068,
      18765279
    ],
    [
      4355630,
      1507704037,
      35,
      11,
      0,
      30000,
      32000000000,
      0,
      0,
      623706,
      22018,
      18765251
    ],
    [
      4355652,
      1507704767,
      36,
      5,
      0,
      30000,
      32000000000,
      0,
      0,
      399007,
      22018,
      18765229
    ],
    [
      4355653,
      1507704803,
      37,
      28,
      0,
      30000,
      32000000000,
      0,
      0,
      1075734,
      22018,
      18765228
    ],
    [
      4353728,
      1507647988,
      0,
      0,
      0,
      248328,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4353729,
      1507648032,
      0,
      0,
      0,
      233562,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      2899835,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      2733151,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      2566467,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      2399783,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      2233098,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      2066414,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      1899730,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      1733046,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      1566362,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      1399677,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      1232993,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      1066309,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      899625,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      732941,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355137,
      1507688984,
      0,
      0,
      0,
      566256,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      2899835,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      2733151,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      2566467,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      2399783,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      2233098,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      2066414,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      1899730,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      1733046,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      1566362,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      1399677,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      1232993,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      1066309,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      899625,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      732941,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355479,
      1507699722,
      0,
      0,
      0,
      566256,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      2899835,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      2733151,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      2566467,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      2399783,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      2233098,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      2066414,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      1899730,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      1733046,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      1566362,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      1399677,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      1232993,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      1066309,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      899625,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      732941,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355585,
      1507702437,
      0,
      0,
      0,
      566256,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      2899835,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      2733151,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      2566467,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      2399783,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      2233098,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      2066414,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      1899730,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      1733046,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      1566362,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      1399677,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      1232993,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      1066309,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      899625,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      732941,
      0,
      0,
      0,
      0,
      90482,
      0
    ],
    [
      4355602,
      1507702992,
      0,
      0,
      0,
      566256,
      0,
      0,
      0,
      0,
      90482,
      0
    ]
  ],
  "sourcecode": "pragma solidity 0.4.15;\n\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n/*\n * @title This is proxy for analytics. Target contract can be found at field m_analytics (see \"read contract\").\n * @author Eenae\n\n * FIXME after fix of truffle issue #560: refactor to a separate contract file which uses InvestmentAnalytics interface\n */\ncontract AnalyticProxy {\n\n    function AnalyticProxy() {\n        m_analytics = InvestmentAnalytics(msg.sender);\n    }\n\n    /// @notice forward payment to analytics-capable contract\n    function() payable {\n        m_analytics.iaInvestedBy.value(msg.value)(msg.sender);\n    }\n\n    InvestmentAnalytics public m_analytics;\n}\n\n\n/*\n * @title Mixin contract which supports different payment channels and provides analytical per-channel data.\n * @author Eenae\n */\ncontract InvestmentAnalytics {\n    using SafeMath for uint256;\n\n    function InvestmentAnalytics(){\n    }\n\n    /// @dev creates more payment channels, up to the limit but not exceeding gas stipend\n    function createMorePaymentChannelsInternal(uint limit) internal returns (uint) {\n        uint paymentChannelsCreated;\n        for (uint i = 0; i < limit; i++) {\n            uint startingGas = msg.gas;\n            /*\n             * ~170k of gas per paymentChannel,\n             * using gas price = 4Gwei 2k paymentChannels will cost ~1.4 ETH.\n             */\n\n            address paymentChannel = new AnalyticProxy();\n            m_validPaymentChannels[paymentChannel] = true;\n            m_paymentChannels.push(paymentChannel);\n            paymentChannelsCreated++;\n\n            // cost of creating one channel\n            uint gasPerChannel = startingGas.sub(msg.gas);\n            if (gasPerChannel.add(50000) > msg.gas)\n                break;  // enough proxies for this call\n        }\n        return paymentChannelsCreated;\n    }\n\n\n    /// @dev process payments - record analytics and pass control to iaOnInvested callback\n    function iaInvestedBy(address investor) external payable {\n        address paymentChannel = msg.sender;\n        if (m_validPaymentChannels[paymentChannel]) {\n            // payment received by one of our channels\n            uint value = msg.value;\n            m_investmentsByPaymentChannel[paymentChannel] = m_investmentsByPaymentChannel[paymentChannel].add(value);\n            // We know for sure that investment came from specified investor (see AnalyticProxy).\n            iaOnInvested(investor, value, true);\n        } else {\n            // Looks like some user has paid to this method, this payment is not included in the analytics,\n            // but, of course, processed.\n            iaOnInvested(msg.sender, msg.value, false);\n        }\n    }\n\n    /// @dev callback\n    function iaOnInvested(address investor, uint payment, bool usingPaymentChannel) internal {\n    }\n\n\n    function paymentChannelsCount() external constant returns (uint) {\n        return m_paymentChannels.length;\n    }\n\n    function readAnalyticsMap() external constant returns (address[], uint[]) {\n        address[] memory keys = new address[](m_paymentChannels.length);\n        uint[] memory values = new uint[](m_paymentChannels.length);\n\n        for (uint i = 0; i < m_paymentChannels.length; i++) {\n            address key = m_paymentChannels[i];\n            keys[i] = key;\n            values[i] = m_investmentsByPaymentChannel[key];\n        }\n\n        return (keys, values);\n    }\n\n    function readPaymentChannels() external constant returns (address[]) {\n        return m_paymentChannels;\n    }\n\n\n    mapping(address => uint256) public m_investmentsByPaymentChannel;\n    mapping(address => bool) m_validPaymentChannels;\n\n    address[] public m_paymentChannels;\n}\n\n/**\n * @title Helps contracts guard agains rentrancy attacks.\n * @author Remco Bloemen <remco@2\u03c0.com>\n * @notice If you mark a function `nonReentrant`, you should also\n * mark it `external`.\n */\ncontract ReentrancyGuard {\n\n  /**\n   * @dev We use a single lock for the whole contract.\n   */\n  bool private rentrancy_lock = false;\n\n  /**\n   * @dev Prevents a contract from calling itself, directly or indirectly.\n   * @notice If you mark a function `nonReentrant`, you should also\n   * mark it `external`. Calling one nonReentrant function from\n   * another is not supported. Instead, you can implement a\n   * `private` function doing the actual work, and a `external`\n   * wrapper marked as `nonReentrant`.\n   */\n  modifier nonReentrant() {\n    require(!rentrancy_lock);\n    rentrancy_lock = true;\n    _;\n    rentrancy_lock = false;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\ncontract STQToken {\n    function mint(address _to, uint256 _amount) external;\n}\n\n/// @title Storiqa pre-ICO contract\ncontract STQPreICO is Ownable, ReentrancyGuard, InvestmentAnalytics {\n    using SafeMath for uint256;\n\n    event FundTransfer(address backer, uint amount, bool isContribution);\n\n    function STQPreICO(address token, address funds) {\n        require(address(0) != address(token) && address(0) != address(funds));\n\n        m_token = STQToken(token);\n        m_funds = funds;\n    }\n\n\n    // PUBLIC interface: payments\n\n    // fallback function as a shortcut\n    function() payable {\n        require(0 == msg.data.length);\n        buy();  // only internal call here!\n    }\n\n    /// @notice ICO participation\n    function buy() public payable {     // dont mark as external!\n        iaOnInvested(msg.sender, msg.value, false);\n    }\n\n\n    // PUBLIC interface: maintenance\n\n    function createMorePaymentChannels(uint limit) external onlyOwner returns (uint) {\n        return createMorePaymentChannelsInternal(limit);\n    }\n\n    /// @notice Tests ownership of the current caller.\n    /// @return true if it's an owner\n    // It's advisable to call it by new owner to make sure that the same erroneous address is not copy-pasted to\n    // addOwner/changeOwner and to isOwner.\n    function amIOwner() external constant onlyOwner returns (bool) {\n        return true;\n    }\n\n\n    // INTERNAL\n\n    /// @dev payment callback\n    function iaOnInvested(address investor, uint payment, bool usingPaymentChannel)\n        internal\n        nonReentrant\n    {\n        require(payment >= c_MinInvestment);\n        require(getCurrentTime() >= c_startTime && getCurrentTime() < c_endTime || msg.sender == owner);\n\n        uint startingInvariant = this.balance.add(m_funds.balance);\n\n        // return or update payment if needed\n        uint paymentAllowed = getMaximumFunds().sub(m_totalInvested);\n        if (0 == paymentAllowed) {\n            investor.transfer(payment);\n            return;\n        }\n        uint change;\n        if (paymentAllowed < payment) {\n            change = payment.sub(paymentAllowed);\n            payment = paymentAllowed;\n        }\n\n        // calculate rate\n        uint bonusPercent = c_preICOBonusPercent;\n        bonusPercent += getLargePaymentBonus(payment);\n        if (usingPaymentChannel)\n            bonusPercent += c_paymentChannelBonusPercent;\n\n        uint rate = c_STQperETH.mul(100 + bonusPercent).div(100);\n\n        // issue tokens\n        uint stq = payment.mul(rate);\n        m_token.mint(investor, stq);\n\n        // record payment\n        m_funds.transfer(payment);\n        m_totalInvested = m_totalInvested.add(payment);\n        assert(m_totalInvested <= getMaximumFunds());\n        FundTransfer(investor, payment, true);\n\n        if (change > 0)\n            investor.transfer(change);\n\n        assert(startingInvariant == this.balance.add(m_funds.balance).add(change));\n    }\n\n    function getLargePaymentBonus(uint payment) private constant returns (uint) {\n        if (payment > 1000 ether) return 10;\n        if (payment > 800 ether) return 8;\n        if (payment > 500 ether) return 5;\n        if (payment > 200 ether) return 2;\n        return 0;\n    }\n\n    /// @dev to be overridden in tests\n    function getCurrentTime() internal constant returns (uint) {\n        return now;\n    }\n\n    /// @dev to be overridden in tests\n    function getMaximumFunds() internal constant returns (uint) {\n        return c_MaximumFunds;\n    }\n\n\n    // FIELDS\n\n    /// @notice start time of the pre-ICO\n    uint public constant c_startTime = 1507766400;\n\n    /// @notice end time of the pre-ICO\n    uint public constant c_endTime = c_startTime + (1 days);\n\n    /// @notice minimum investment\n    uint public constant c_MinInvestment = 10 finney;\n\n    /// @notice maximum investments to be accepted during pre-ICO\n    uint public constant c_MaximumFunds = 8000 ether;\n\n\n    /// @notice starting exchange rate of STQ\n    uint public constant c_STQperETH = 100000;\n\n    /// @notice pre-ICO bonus\n    uint public constant c_preICOBonusPercent = 40;\n\n    /// @notice authorised payment bonus\n    uint public constant c_paymentChannelBonusPercent = 2;\n\n\n    /// @dev total investments amount\n    uint public m_totalInvested;\n\n    /// @dev contract responsible for token accounting\n    STQToken public m_token;\n\n    /// @dev address responsible for investments accounting\n    address public m_funds;\n}"
}