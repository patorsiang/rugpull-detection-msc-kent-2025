{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 DUP1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH7 PUSH1 SSTORE PUSH1 PUSH1 SSTORE PUSH1 PUSH1 SSTORE PUSH7 PUSH1 SSTORE PUSH1 MLOAD PUSH1 DUP1 PUSH2 DUP4 CODECOPY DUP2 ADD PUSH1 MSTORE DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP CALLER PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP4 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP3 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP POP POP POP PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH3 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP10 DUP2 MSTORE PUSH1 ADD DUP9 DUP2 MSTORE PUSH1 ADD DUP8 DUP2 MSTORE PUSH1 ADD DUP7 DUP2 MSTORE PUSH1 ADD DUP6 DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP DUP3 LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP4 PUSH1 PUSH1 MLOAD PUSH2 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH2 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 POP DUP7 PUSH2 AND SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 POP SWAP1 SWAP2 SWAP3 SWAP4 POP SWAP1 SWAP2 SWAP3 POP SWAP1 SWAP2 POP SWAP1 POP POP DUP1 SWAP2 POP POP PUSH1 DUP2 EQ DUP1 PUSH2 JUMPI POP PUSH1 DUP2 EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH1 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP DUP10 LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP11 PUSH1 PUSH1 MLOAD PUSH2 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH2 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP DUP8 PUSH4 AND SWAP8 POP DUP7 PUSH2 AND SWAP7 POP DUP6 PUSH2 AND SWAP6 POP DUP5 PUSH4 AND SWAP5 POP DUP4 PUSH4 AND SWAP4 POP DUP3 PUSH16 AND SWAP3 POP DUP1 SWAP9 POP DUP2 SWAP10 POP DUP3 SWAP11 POP DUP4 SWAP12 POP DUP5 SWAP13 POP DUP6 SWAP14 POP DUP7 SWAP15 POP DUP8 SWAP16 POP POP POP POP POP POP POP POP POP SWAP2 SWAP4 SWAP6 SWAP8 POP SWAP2 SWAP4 SWAP6 SWAP8 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 CALLER SWAP2 POP PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP PUSH1 DUP2 EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 ADDRESS PUSH20 AND BALANCE LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND PUSH2 DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP DUP4 LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP5 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP DUP2 PUSH8 AND SWAP2 POP DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP DUP3 LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP4 PUSH1 PUSH1 MLOAD PUSH2 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH2 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 POP DUP7 PUSH2 AND SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 POP SWAP1 SWAP2 SWAP3 SWAP4 POP SWAP1 SWAP2 SWAP3 POP SWAP1 SWAP2 POP SWAP1 POP POP DUP1 SWAP2 POP POP PUSH1 DUP2 EQ DUP1 PUSH2 JUMPI POP PUSH1 DUP2 EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH1 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND SELFDESTRUCT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP DUP3 LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP4 PUSH1 PUSH1 MLOAD PUSH2 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH2 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 POP DUP7 PUSH2 AND SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 POP SWAP1 SWAP2 SWAP3 SWAP4 POP SWAP1 SWAP2 SWAP3 POP SWAP1 SWAP2 POP SWAP1 POP POP DUP1 SWAP2 POP POP PUSH1 DUP2 EQ DUP1 PUSH2 JUMPI POP PUSH1 DUP2 EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH1 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP DUP3 LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP4 PUSH1 PUSH1 MLOAD PUSH2 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH2 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 POP DUP7 PUSH2 AND SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 POP SWAP1 SWAP2 SWAP3 SWAP4 POP SWAP1 SWAP2 SWAP3 POP SWAP1 SWAP2 POP SWAP1 POP POP DUP1 SWAP2 POP POP PUSH1 DUP2 EQ DUP1 PUSH2 JUMPI POP PUSH1 DUP2 EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP8 PUSH1 PUSH1 MLOAD PUSH2 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH2 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 POP DUP6 PUSH2 AND SWAP6 POP SWAP1 SWAP2 SWAP3 SWAP4 POP SWAP1 SWAP2 SWAP3 POP SWAP1 SWAP2 POP POP DUP1 SWAP6 POP DUP2 SWAP7 POP POP POP PUSH1 SLOAD DUP6 MUL SWAP3 POP DUP3 CALLVALUE LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP8 DUP6 PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH2 CALLER DUP5 CALLVALUE SUB PUSH2 JUMP JUMPDEST PUSH2 DUP7 DUP5 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH20 AND PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH20 AND SELFDESTRUCT JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP11 PUSH1 PUSH1 MLOAD PUSH2 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH2 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 POP DUP6 PUSH2 AND SWAP6 POP DUP5 PUSH4 AND SWAP5 POP SWAP1 SWAP2 SWAP3 POP DUP3 PUSH16 AND SWAP3 POP DUP1 SWAP8 POP DUP2 SWAP9 POP DUP3 SWAP10 POP DUP4 SWAP11 POP DUP5 SWAP12 POP POP POP POP POP POP PUSH1 DUP9 LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP8 PUSH1 SLOAD DUP9 MUL MUL SWAP2 POP DUP2 CALLVALUE LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 CALLER PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP6 CALLER PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 CALLER PUSH1 DUP1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP1 POP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP11 DUP5 PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH2 CALLER DUP4 CALLVALUE SUB PUSH2 JUMP JUMPDEST PUSH2 DUP10 DUP10 DUP4 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP14 PUSH1 PUSH1 MLOAD PUSH2 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH2 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 POP DUP5 PUSH4 AND SWAP5 POP SWAP1 SWAP2 SWAP3 POP DUP3 PUSH16 AND SWAP3 POP SWAP1 POP DUP1 SWAP11 POP DUP2 SWAP12 POP DUP3 SWAP13 POP POP POP POP DUP11 PUSH16 AND DUP10 ADD SWAP7 POP PUSH2 DUP13 PUSH2 JUMP JUMPDEST SWAP6 POP PUSH2 DUP7 DUP10 PUSH2 JUMP JUMPDEST SWAP5 POP DUP5 ISZERO PUSH2 JUMPI PUSH2 DUP13 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH1 PUSH1 SLOAD DUP9 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP3 POP PUSH1 PUSH1 SLOAD DUP9 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP2 POP PUSH1 PUSH1 SLOAD PUSH1 SLOAD PUSH1 SUB SUB DUP9 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP14 DUP4 DUP8 PUSH1 MLOAD DUP5 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH2 CALLER PUSH1 PUSH1 SLOAD DUP11 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 PUSH1 SLOAD DUP11 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH2 JUMP JUMPDEST JUMPDEST DUP12 CALLER PUSH20 AND PUSH32 TIMESTAMP DUP10 DUP15 DUP14 DUP12 DUP12 DUP12 DUP12 PUSH1 MLOAD DUP1 DUP10 DUP2 MSTORE PUSH1 ADD DUP9 DUP2 MSTORE PUSH1 ADD DUP8 DUP2 MSTORE PUSH1 ADD DUP7 DUP2 MSTORE PUSH1 ADD DUP6 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP15 PUSH1 PUSH1 MLOAD PUSH2 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH2 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 POP DUP5 PUSH4 AND SWAP5 POP SWAP1 SWAP2 SWAP3 POP SWAP1 SWAP2 POP SWAP1 POP DUP1 SWAP11 POP DUP2 SWAP12 POP POP POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP13 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP SWAP1 POP DUP1 SWAP9 POP POP PUSH2 DUP9 PUSH2 JUMP JUMPDEST SWAP7 POP DUP8 SWAP6 POP DUP7 SWAP5 POP PUSH1 SWAP4 POP JUMPDEST DUP12 DUP5 LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP8 DUP12 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP3 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 JUMPI DUP3 SWAP6 POP DUP2 SWAP5 POP JUMPDEST DUP4 DUP1 PUSH1 ADD SWAP5 POP POP PUSH2 JUMP JUMPDEST DUP7 DUP6 GT SWAP1 POP DUP1 ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP13 DUP9 PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP JUMPDEST DUP13 CALLER PUSH20 AND PUSH32 TIMESTAMP DUP12 DUP15 DUP15 DUP8 DUP14 PUSH1 MLOAD DUP1 DUP8 DUP2 MSTORE PUSH1 ADD DUP7 DUP2 MSTORE PUSH1 ADD DUP6 DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP7 POP POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP6 PUSH1 PUSH1 MLOAD PUSH2 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH2 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 POP SWAP1 SWAP2 SWAP3 SWAP4 POP SWAP1 SWAP2 SWAP3 POP SWAP1 SWAP2 POP POP DUP1 SWAP3 POP POP PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 CALLER PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP4 CALLER PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 CALLER PUSH1 DUP1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP1 POP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP3 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 DUP1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP SWAP1 POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP9 PUSH1 PUSH1 MLOAD PUSH2 ADD MSTORE PUSH1 MLOAD DUP3 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH2 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 SWAP7 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 SWAP6 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 POP SWAP1 SWAP2 SWAP3 SWAP4 POP SWAP1 SWAP2 SWAP3 POP SWAP1 SWAP2 POP DUP1 SWAP6 POP DUP2 SWAP7 POP POP POP PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP6 DUP8 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 JUMPI DUP4 SWAP2 POP JUMPDEST DUP2 SWAP6 POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 SWAP5 POP JUMPDEST PUSH1 DUP6 LT ISZERO PUSH2 JUMPI PUSH1 DUP9 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD DUP7 ADD SWAP6 POP PUSH3 DUP9 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP8 POP DUP5 DUP1 PUSH1 ADD SWAP6 POP POP PUSH2 JUMP JUMPDEST PUSH1 SWAP3 POP PUSH1 SWAP2 POP JUMPDEST PUSH1 DUP3 LT ISZERO PUSH2 JUMPI PUSH1 DUP9 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD SWAP1 POP DUP1 DUP5 ADD SWAP4 POP PUSH3 DUP9 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP8 POP PUSH1 DUP3 SUB DUP2 MUL DUP5 EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP3 POP JUMPDEST DUP2 DUP1 PUSH1 ADD SWAP3 POP POP PUSH2 JUMP JUMPDEST DUP3 ISZERO PUSH2 JUMPI PUSH1 DUP5 MUL SWAP4 POP JUMPDEST PUSH1 DUP5 DUP8 ADD ADD SWAP7 POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP STOP LOG1 PUSH6 SHA3 BALANCE UNKNOWN_0x2f UNKNOWN_0xd7 UNKNOWN_0xfb UNKNOWN_0x1e UNKNOWN_0xe6 EXTCODEHASH UNKNOWN_0xe7 SWAP5 DUP8 UNKNOWN_0xdb SLOAD SWAP10 MUL UNKNOWN_0x27 UNKNOWN_0xfe SDIV UNKNOWN_0x4d UNKNOWN_0x5e UNKNOWN_0xdb SUB UNKNOWN_0x4e XOR UNKNOWN_0xb3 PC PUSH30 DUP16 UNKNOWN_0xec UNKNOWN_0xe1 UNKNOWN_0xd7 PUSH25 UNKNOWN_0x5c SWAP14 DUP1 UNKNOWN_0xa7 CALLDATACOPY UNKNOWN_0x5f UNKNOWN_0x5c CREATE UNKNOWN_0x2b SWAP7 POP UNKNOWN_0x2b STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP ISZERO EXP UNKNOWN_0x25 DUP10 LOG4 UNKNOWN_0x5d MSTORE UNKNOWN_0xd6 PUSH19 STOP STOP STOP STOP PUSH2 DUP7 SWAP12 INVALID_0x73",
  "opcode_entropy": 4.920841254841626,
  "opcode_count": 6907,
  "unique_opcodes": 115,
  "byte_entropy": 4.824101621196619,
  "byte_0x": 7.185456635769203e-05,
  "byte_60": 0.06323201839476898,
  "byte_40": 0.01199971258173457,
  "byte_52": 0.01056262125458073,
  "byte_00": 0.10268017532514191,
  "byte_80": 0.038442193001365234,
  "byte_14": 0.005532801609542287,
  "byte_61": 0.03161600919738449,
  "byte_01": 0.028813681109434504,
  "byte_0a": 0.005963929007688438,
  "byte_81": 0.017173241359488396,
  "byte_54": 0.006826183803980743,
  "byte_ff": 0.273909606955522,
  "byte_02": 0.009412948192857656,
  "byte_19": 0.0016526550262269167,
  "byte_16": 0.018322914421211468,
  "byte_90": 0.0351368829489114,
  "byte_83": 0.007041747503053819,
  "byte_15": 0.021915642739096068,
  "byte_17": 0.0015089458935115326,
  "byte_55": 0.0018682187252999929,
  "byte_50": 0.04268161241646907,
  "byte_66": 0.0002155636990730761,
  "byte_03": 0.009484802759215347,
  "byte_8d": 0.0007185456635769203,
  "byte_7e": 0.00028741826543076814,
  "byte_a4": 0.00035927283178846016,
  "byte_c6": 0.002443055256161529,
  "byte_07": 0.0010059639290076884,
  "byte_08": 0.0010778184953653806,
  "byte_09": 0.0008622547962923044,
  "byte_1a": 0.0005029819645038442,
  "byte_fd": 0.00955665732557304,
  "byte_49": 0.00028741826543076814,
  "byte_51": 0.019760005748365308,
  "byte_35": 0.0015089458935115326,
  "byte_dc": 0.00035927283178846016,
  "byte_39": 0.00035927283178846016,
  "byte_20": 0.015736150032334556,
  "byte_91": 0.010347057555507652,
  "byte_33": 0.0033053100524538335,
  "byte_73": 0.012933821944384565,
  "byte_82": 0.006323201839476899,
  "byte_04": 0.01099374865272688,
  "byte_05": 0.0017963641589423009,
  "byte_06": 0.0015808004598692248,
  "byte_34": 0.002443055256161529,
  "byte_10": 0.0018682187252999929,
  "byte_cc": 0.00028741826543076814,
  "byte_f3": 0.0012215276280807645,
  "byte_36": 0.00028741826543076814,
  "byte_8a": 0.0013652367607961487,
  "byte_57": 0.013508658475246103,
  "byte_7c": 0.002514909822519221,
  "byte_63": 0.007616584033915355,
  "byte_62": 0.0006466910972192282,
  "byte_5b": 0.020694115111015304,
  "byte_44": 0.00014370913271538407,
  "byte_87": 0.0035927283178846018,
  "byte_8f": 0.00035927283178846016,
  "byte_0c": 0.0008622547962923044,
  "byte_d0": 0.00028741826543076814,
  "byte_23": 0.0008622547962923044,
  "byte_b8": 7.185456635769203e-05,
  "byte_3d": 0.00035927283178846016,
  "byte_27": 0.0007904002299346124,
  "byte_95": 0.0038082920169576775,
  "byte_0d": 0.0010059639290076884,
  "byte_1c": 0.00028741826543076814,
  "byte_11": 0.0007904002299346124,
  "byte_d5": 0.00014370913271538407,
  "byte_25": 0.0005748365308615363,
  "byte_a6": 0.0002155636990730761,
  "byte_3f": 0.00028741826543076814,
  "byte_4b": 0.0002155636990730761,
  "byte_a8": 0.0004311273981461522,
  "byte_3a": 0.00028741826543076814,
  "byte_b0": 0.0002155636990730761,
  "byte_42": 0.00035927283178846016,
  "byte_72": 0.00028741826543076814,
  "byte_f2": 0.00028741826543076814,
  "byte_c5": 0.0002155636990730761,
  "byte_12": 0.0007185456635769203,
  "byte_41": 0.0002155636990730761,
  "byte_6c": 0.00028741826543076814,
  "byte_56": 0.007257311202126895,
  "byte_ba": 7.185456635769203e-05,
  "byte_53": 0.00014370913271538407,
  "byte_5c": 0.0004311273981461522,
  "byte_97": 0.0006466910972192282,
  "byte_5a": 0.002371200689803837,
  "byte_bb": 0.0002155636990730761,
  "byte_8c": 0.0007185456635769203,
  "byte_d7": 0.00035927283178846016,
  "byte_0b": 0.0005748365308615363,
  "byte_b9": 0.00028741826543076814,
  "byte_96": 0.0017963641589423009,
  "byte_ce": 0.0002155636990730761,
  "byte_9f": 0.00028741826543076814,
  "byte_e2": 0.0005748365308615363,
  "byte_a7": 0.0005029819645038442,
  "byte_f0": 0.0002155636990730761,
  "byte_24": 0.0009341093626499964,
  "byte_e9": 0.0002155636990730761,
  "byte_f7": 0.0002155636990730761,
  "byte_84": 0.002299346123446145,
  "byte_45": 0.0002155636990730761,
  "byte_cb": 0.00028741826543076814,
  "byte_59": 0.0004311273981461522,
  "byte_74": 0.0002155636990730761,
  "byte_a5": 0.00014370913271538407,
  "byte_89": 0.0007904002299346124,
  "byte_94": 0.002658618955234605,
  "byte_cf": 0.00014370913271538407,
  "byte_de": 7.185456635769203e-05,
  "byte_68": 0.0002155636990730761,
  "byte_e3": 0.00035927283178846016,
  "byte_a9": 0.0002155636990730761,
  "byte_e8": 0.00014370913271538407,
  "byte_99": 0.00035927283178846016,
  "byte_ef": 0.00035927283178846016,
  "byte_ab": 0.00014370913271538407,
  "byte_d9": 0.00028741826543076814,
  "byte_a0": 0.0007904002299346124,
  "byte_b3": 0.00014370913271538407,
  "byte_7d": 0.0002155636990730761,
  "byte_7b": 0.00014370913271538407,
  "byte_9b": 0.0005029819645038442,
  "byte_c7": 0.00014370913271538407,
  "byte_98": 0.0005029819645038442,
  "byte_2c": 0.0007185456635769203,
  "byte_21": 0.0002155636990730761,
  "byte_c2": 0.00035927283178846016,
  "byte_29": 0.00035927283178846016,
  "byte_ed": 0.00028741826543076814,
  "byte_8b": 0.0010059639290076884,
  "byte_f5": 7.185456635769203e-05,
  "byte_4f": 0.0005029819645038442,
  "byte_c4": 0.00035927283178846016,
  "byte_fe": 0.0012215276280807645,
  "byte_c1": 0.0002155636990730761,
  "byte_9a": 0.0005748365308615363,
  "byte_a2": 7.185456635769203e-05,
  "byte_26": 0.0009341093626499964,
  "byte_c3": 0.00014370913271538407,
  "byte_30": 0.0006466910972192282,
  "byte_46": 0.0002155636990730761,
  "byte_88": 0.0012933821944384565,
  "byte_86": 0.0014370913271538406,
  "byte_85": 0.0012933821944384565,
  "byte_ae": 0.00014370913271538407,
  "byte_64": 0.0006466910972192282,
  "byte_c9": 0.00014370913271538407,
  "byte_d8": 0.00014370913271538407,
  "byte_ad": 0.00014370913271538407,
  "byte_5e": 0.0002155636990730761,
  "byte_4c": 0.00035927283178846016,
  "byte_eb": 7.185456635769203e-05,
  "byte_0f": 0.0004311273981461522,
  "byte_1d": 0.0007904002299346124,
  "byte_92": 0.004886110512323058,
  "byte_22": 0.0007185456635769203,
  "byte_2f": 0.0005748365308615363,
  "byte_37": 0.00014370913271538407,
  "byte_13": 0.0005029819645038442,
  "byte_7f": 0.0007185456635769203,
  "byte_b1": 7.185456635769203e-05,
  "byte_9c": 0.00035927283178846016,
  "byte_71": 0.00014370913271538407,
  "byte_38": 7.185456635769203e-05,
  "byte_fb": 0.0004311273981461522,
  "byte_4d": 0.0002155636990730761,
  "byte_79": 0.00028741826543076814,
  "byte_8e": 0.00035927283178846016,
  "byte_1b": 0.0010778184953653806,
  "byte_af": 0.00035927283178846016,
  "byte_d2": 0.0002155636990730761,
  "byte_da": 0.00014370913271538407,
  "byte_f1": 0.002514909822519221,
  "byte_e7": 0.00028741826543076814,
  "byte_6d": 0.00014370913271538407,
  "byte_75": 0.00014370913271538407,
  "byte_1e": 0.0002155636990730761,
  "byte_a1": 0.0004311273981461522,
  "byte_1f": 0.0005748365308615363,
  "byte_6e": 0.0009341093626499964,
  "byte_18": 0.0008622547962923044,
  "byte_dd": 0.0004311273981461522,
  "byte_3b": 0.0027304735215922973,
  "byte_d3": 0.00028741826543076814,
  "byte_93": 0.0030897463533807574,
  "byte_3e": 0.00014370913271538407,
  "byte_b6": 0.00028741826543076814,
  "byte_6f": 0.00035927283178846016,
  "byte_9d": 0.0002155636990730761,
  "byte_9e": 0.00014370913271538407,
  "byte_bf": 0.00028741826543076814,
  "byte_78": 0.00014370913271538407,
  "byte_df": 0.00014370913271538407,
  "byte_f4": 7.185456635769203e-05,
  "byte_d1": 0.00028741826543076814,
  "byte_ac": 0.00014370913271538407,
  "byte_e0": 0.0002155636990730761,
  "byte_2e": 0.0004311273981461522,
  "byte_0e": 0.00028741826543076814,
  "byte_31": 0.0008622547962923044,
  "byte_fc": 0.00014370913271538407,
  "byte_d6": 0.00028741826543076814,
  "byte_d4": 0.0002155636990730761,
  "byte_67": 0.00014370913271538407,
  "byte_2a": 0.0006466910972192282,
  "byte_b5": 7.185456635769203e-05,
  "byte_3c": 0.0002155636990730761,
  "byte_47": 0.0002155636990730761,
  "byte_28": 0.0004311273981461522,
  "byte_69": 0.00014370913271538407,
  "byte_e6": 0.00014370913271538407,
  "byte_db": 0.0002155636990730761,
  "byte_70": 0.00028741826543076814,
  "byte_f9": 0.0002155636990730761,
  "byte_2b": 0.0006466910972192282,
  "byte_76": 0.0002155636990730761,
  "byte_a3": 0.0004311273981461522,
  "byte_f6": 0.00014370913271538407,
  "byte_c0": 0.00014370913271538407,
  "byte_bc": 7.185456635769203e-05,
  "byte_65": 0.00014370913271538407,
  "byte_cd": 7.185456635769203e-05,
  "byte_b4": 7.185456635769203e-05,
  "byte_6b": 0.00014370913271538407,
  "byte_e4": 0.00014370913271538407,
  "byte_4e": 0.00028741826543076814,
  "byte_b7": 0.0002155636990730761,
  "byte_5d": 0.0002155636990730761,
  "byte_43": 0.00014370913271538407,
  "byte_ee": 0.0002155636990730761,
  "byte_ec": 0.00014370913271538407,
  "byte_ca": 0.00014370913271538407,
  "byte_b2": 7.185456635769203e-05,
  "byte_c8": 7.185456635769203e-05,
  "byte_6a": 0.00014370913271538407,
  "byte_be": 7.185456635769203e-05,
  "byte_f8": 7.185456635769203e-05,
  "byte_bd": 7.185456635769203e-05,
  "byte_2d": 0.00014370913271538407,
  "byte_32": 0.0002155636990730761,
  "byte_e5": 7.185456635769203e-05,
  "byte_4a": 7.185456635769203e-05,
  "byte_7a": 0.00014370913271538407,
  "byte_58": 0.00014370913271538407,
  "byte_e1": 7.185456635769203e-05,
  "byte_48": 7.185456635769203e-05,
  "byte_5f": 7.185456635769203e-05,
  "byte_aa": 7.185456635769203e-05,
  "byte_77": 7.185456635769203e-05,
  "num_nodes": 44,
  "num_edges": 54,
  "avg_degree": 2.4545454545454546,
  "density": 0.02854122621564482,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 546,
  "event_nums": 474,
  "creation_block": 5006364,
  "creation_timestamp": 1517412780,
  "life_time": 212452.0,
  "duration_seconds": 3104135.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 45,
  "num_buyers": 12,
  "num_sellers": 44,
  "num_creator_transfers": 28,
  "buy_amt": 3.096e+18,
  "sell_amt": 3.248e+18,
  "avg_value": 1.159780621572212e+16,
  "txn_per_block": 0.0025699801838524284,
  "avg_gas_limit": 318852.23626373627,
  "std_gas_limit": 187352.00135533855,
  "avg_gas_used": 207312.71794871794,
  "std_gas_used": 174118.96387116713,
  "avg_gas_price": 7666318681.318682,
  "std_gas_price": 6717130375.182306,
  "train1_num": 227,
  "challenge_num": 260,
  "withdrawpayments_num": 28,
  "destroy_num": 1,
  "timeline_sequence": [
    [
      5006364,
      1517412780,
      1704,
      51,
      0,
      3763131,
      5100000000,
      0,
      1,
      7645499,
      3763131,
      18085709
    ],
    [
      5006395,
      1517413320,
      1708,
      198,
      8000000000000000,
      484129,
      5100000000,
      0,
      1,
      7431726,
      320682,
      18085678
    ],
    [
      5006413,
      1517413510,
      2015,
      63,
      8000000000000000,
      482449,
      5100000000,
      0,
      1,
      6906052,
      310052,
      18085660
    ],
    [
      5006417,
      1517413617,
      2016,
      203,
      8000000000000000,
      268777,
      5100000000,
      0,
      1,
      6607010,
      190110,
      18085656
    ],
    [
      5006429,
      1517413824,
      2017,
      220,
      4000000000000000,
      446424,
      5100000000,
      0,
      1,
      7530598,
      293358,
      18085644
    ],
    [
      5006541,
      1517415396,
      2238,
      28,
      8000000000000000,
      479752,
      5000000000,
      0,
      1,
      6240430,
      309145,
      18085532
    ],
    [
      5006548,
      1517415590,
      20,
      190,
      8000000000000000,
      481642,
      6100000000,
      0,
      1,
      7305803,
      322199,
      18085525
    ],
    [
      5006549,
      1517415617,
      0,
      188,
      8000000000000000,
      481642,
      5100000000,
      0,
      1,
      6538427,
      319456,
      18085524
    ],
    [
      5006549,
      1517415617,
      3966,
      189,
      8000000000000000,
      482739,
      5000000000,
      0,
      1,
      6857883,
      319456,
      18085524
    ],
    [
      5006553,
      1517415664,
      2239,
      275,
      8000000000000000,
      287058,
      5000000000,
      0,
      1,
      7735712,
      190477,
      18085520
    ],
    [
      5006554,
      1517415672,
      19,
      73,
      8000000000000000,
      482739,
      4000000000,
      0,
      1,
      7647467,
      319420,
      18085519
    ],
    [
      5006560,
      1517415777,
      3967,
      158,
      8000000000000000,
      272362,
      15000000000,
      0,
      1,
      4637257,
      190447,
      18085513
    ],
    [
      5006560,
      1517415777,
      2240,
      196,
      4000000000000000,
      393853,
      7000000000,
      0,
      1,
      6850236,
      261351,
      18085513
    ],
    [
      5006560,
      1517415777,
      64,
      202,
      8000000000000000,
      482874,
      5100000000,
      0,
      1,
      7410139,
      321793,
      18085513
    ],
    [
      5006560,
      1517415777,
      1,
      203,
      8000000000000000,
      481038,
      5100000000,
      0,
      1,
      7599616,
      189477,
      18085513
    ],
    [
      5006561,
      1517415781,
      3968,
      84,
      8000000000000000,
      272362,
      10000000000,
      0,
      1,
      6535681,
      191748,
      18085512
    ],
    [
      5006564,
      1517415811,
      81,
      58,
      8000000000000000,
      469075,
      5100000000,
      0,
      1,
      6952028,
      310937,
      18085509
    ],
    [
      5006568,
      1517415926,
      3969,
      156,
      4000000000000000,
      397723,
      10000000000,
      0,
      1,
      7407566,
      264572,
      18085505
    ],
    [
      5006569,
      1517415944,
      2241,
      114,
      4000000000000000,
      376278,
      7000000000,
      0,
      1,
      4699273,
      246283,
      18085504
    ],
    [
      5006569,
      1517415944,
      65,
      122,
      4000000000000000,
      124680,
      5100000000,
      0,
      1,
      5209157,
      83120,
      18085504
    ],
    [
      5006569,
      1517415944,
      2,
      123,
      8000000000000000,
      282894,
      5100000000,
      0,
      1,
      5392802,
      183645,
      18085504
    ],
    [
      5006570,
      1517415953,
      66,
      61,
      4000000000000000,
      124680,
      5100000000,
      0,
      1,
      7134231,
      83120,
      18085503
    ],
    [
      5006578,
      1517416035,
      67,
      82,
      4000000000000000,
      124680,
      9000000000,
      0,
      1,
      7824936,
      83120,
      18085495
    ],
    [
      5006580,
      1517416056,
      3970,
      157,
      4000000000000000,
      397723,
      15000000000,
      0,
      1,
      4391645,
      249919,
      18085493
    ],
    [
      5006580,
      1517416056,
      3,
      167,
      8000000000000000,
      272461,
      5100000000,
      0,
      1,
      4992733,
      192943,
      18085493
    ],
    [
      5006581,
      1517416086,
      2242,
      173,
      4000000000000000,
      373596,
      6000000000,
      0,
      1,
      6600760,
      83104,
      18085492
    ],
    [
      5006581,
      1517416086,
      21,
      175,
      4000000000000000,
      396060,
      5100000000,
      0,
      1,
      6729601,
      83080,
      18085492
    ],
    [
      5006590,
      1517416269,
      68,
      6,
      8000000000000000,
      288292,
      10890000000,
      0,
      1,
      397661,
      180974,
      18085483
    ],
    [
      5006590,
      1517416269,
      2243,
      19,
      8000000000000000,
      271597,
      6000000000,
      0,
      1,
      1298683,
      190128,
      18085483
    ],
    [
      5006600,
      1517416393,
      3971,
      51,
      4000000000000000,
      373138,
      10000000000,
      0,
      1,
      7222012,
      249072,
      18085473
    ],
    [
      5006601,
      1517416404,
      69,
      100,
      8000000000000000,
      283267,
      8100000000,
      0,
      1,
      4416379,
      182534,
      18085472
    ],
    [
      5006601,
      1517416404,
      22,
      120,
      8000000000000000,
      287085,
      6100000000,
      0,
      1,
      5996490,
      191037,
      18085472
    ],
    [
      5006602,
      1517416413,
      3972,
      73,
      0,
      63867,
      10000000000,
      0,
      1,
      7420483,
      25322,
      18085471
    ],
    [
      5006603,
      1517416439,
      70,
      159,
      8000000000000000,
      273801,
      9100000000,
      0,
      1,
      5957997,
      190960,
      18085470
    ],
    [
      5006612,
      1517416495,
      3973,
      74,
      4000000000000000,
      376620,
      15000000000,
      0,
      1,
      2744460,
      267086,
      18085461
    ],
    [
      5006613,
      1517416497,
      270,
      33,
      8000000000000000,
      483193,
      5100000000,
      0,
      1,
      7361238,
      321540,
      18085460
    ],
    [
      5006614,
      1517416503,
      23,
      54,
      4000000000000000,
      124668,
      5100000000,
      0,
      1,
      5902308,
      83112,
      18085459
    ],
    [
      5006619,
      1517416597,
      71,
      146,
      8000000000000000,
      277570,
      9100000000,
      0,
      1,
      4790730,
      186207,
      18085454
    ],
    [
      5006619,
      1517416597,
      24,
      154,
      8000000000000000,
      283779,
      7100000000,
      0,
      1,
      5383641,
      180706,
      18085454
    ],
    [
      5006619,
      1517416597,
      2244,
      159,
      4000000000000000,
      124680,
      6000000000,
      0,
      1,
      6079718,
      83120,
      18085454
    ],
    [
      5006619,
      1517416597,
      271,
      165,
      8000000000000000,
      272031,
      5100000000,
      0,
      1,
      6739706,
      189913,
      18085454
    ],
    [
      5006631,
      1517416802,
      3974,
      200,
      8000000000000000,
      270516,
      10000000000,
      0,
      1,
      6859786,
      189803,
      18085442
    ],
    [
      5006632,
      1517416805,
      72,
      27,
      4000000000000000,
      124668,
      8100000000,
      0,
      1,
      5468217,
      83112,
      18085441
    ],
    [
      5006632,
      1517416805,
      25,
      61,
      8000000000000000,
      286648,
      7000000000,
      0,
      1,
      7809203,
      191079,
      18085441
    ],
    [
      5006635,
      1517416867,
      3975,
      265,
      4000000000000000,
      373108,
      15000000000,
      0,
      1,
      7472190,
      248729,
      18085438
    ],
    [
      5006637,
      1517416897,
      2245,
      165,
      8000000000000000,
      288148,
      6000000000,
      0,
      1,
      6516307,
      193333,
      18085436
    ],
    [
      5006639,
      1517416915,
      74,
      184,
      8000000000000000,
      285970,
      9100000000,
      0,
      1,
      6265612,
      191871,
      18085434
    ],
    [
      5006639,
      1517416915,
      272,
      198,
      4000000000000000,
      393393,
      5100000000,
      0,
      1,
      7468916,
      265223,
      18085434
    ],
    [
      5006647,
      1517416983,
      3976,
      157,
      4000000000000000,
      376167,
      15000000000,
      0,
      1,
      4752492,
      247067,
      18085426
    ],
    [
      5006647,
      1517416983,
      26,
      178,
      4000000000000000,
      399241,
      8000000000,
      0,
      1,
      6834549,
      262067,
      18085426
    ],
    [
      5006652,
      1517417058,
      2246,
      147,
      8000000000000000,
      286539,
      6000000000,
      0,
      1,
      6336340,
      183058,
      18085421
    ],
    [
      5006652,
      1517417058,
      273,
      149,
      8000000000000000,
      274935,
      5100000000,
      0,
      1,
      6610002,
      180676,
      18085421
    ],
    [
      5006660,
      1517417271,
      3977,
      196,
      8000000000000000,
      273685,
      15000000000,
      0,
      1,
      6499598,
      193299,
      18085413
    ],
    [
      5006661,
      1517417291,
      3978,
      194,
      4000000000000000,
      374494,
      15000000000,
      0,
      1,
      6234651,
      250286,
      18085412
    ],
    [
      5006661,
      1517417291,
      75,
      228,
      4000000000000000,
      124680,
      8100000000,
      0,
      1,
      7892576,
      83120,
      18085412
    ],
    [
      5006662,
      1517417299,
      3979,
      108,
      4000000000000000,
      374800,
      15000000000,
      0,
      1,
      7825630,
      250964,
      18085411
    ],
    [
      5006667,
      1517417363,
      274,
      93,
      8000000000000000,
      268737,
      5100000000,
      0,
      1,
      7743392,
      182439,
      18085406
    ],
    [
      5006668,
      1517417373,
      27,
      68,
      4000000000000000,
      374800,
      5100000000,
      0,
      1,
      7381657,
      249926,
      18085405
    ],
    [
      5006670,
      1517417381,
      3980,
      121,
      0,
      63867,
      15000000000,
      0,
      1,
      3713507,
      25322,
      18085403
    ],
    [
      5006670,
      1517417381,
      275,
      133,
      8000000000000000,
      273655,
      5100000000,
      0,
      1,
      4928412,
      182582,
      18085403
    ],
    [
      5006670,
      1517417381,
      2247,
      155,
      8000000000000000,
      287233,
      5000000000,
      0,
      1,
      6744986,
      182134,
      18085403
    ],
    [
      5006673,
      1517417433,
      2248,
      126,
      0,
      63867,
      5100000000,
      0,
      1,
      5409523,
      25322,
      18085400
    ],
    [
      5006673,
      1517417433,
      276,
      128,
      4000000000000000,
      370746,
      5100000000,
      0,
      1,
      5687385,
      250454,
      18085400
    ],
    [
      5006682,
      1517417518,
      277,
      137,
      4000000000000000,
      376260,
      5100000000,
      0,
      1,
      4274195,
      252055,
      18085391
    ],
    [
      5006691,
      1517417631,
      278,
      41,
      8000000000000000,
      275740,
      7100000000,
      0,
      1,
      6516570,
      191279,
      18085382
    ],
    [
      5006692,
      1517417637,
      279,
      108,
      8000000000000000,
      288061,
      7100000000,
      0,
      1,
      7429285,
      183645,
      18085381
    ],
    [
      5006695,
      1517417698,
      280,
      52,
      0,
      63867,
      6100000000,
      0,
      1,
      6151357,
      25322,
      18085378
    ],
    [
      5006724,
      1517418014,
      28,
      73,
      8000000000000000,
      284782,
      6100000000,
      0,
      1,
      7022594,
      182652,
      18085349
    ],
    [
      5006733,
      1517418137,
      67,
      196,
      8000000000000000,
      487602,
      7100000000,
      0,
      1,
      6190762,
      323431,
      18085340
    ],
    [
      5006739,
      1517418189,
      29,
      49,
      8000000000000000,
      273897,
      6100000000,
      0,
      1,
      6754639,
      183489,
      18085334
    ],
    [
      5006746,
      1517418354,
      3981,
      173,
      4000000000000000,
      396018,
      15000000000,
      0,
      1,
      7137056,
      264076,
      18085327
    ],
    [
      5006747,
      1517418362,
      30,
      55,
      8000000000000000,
      269770,
      7100000000,
      0,
      1,
      6922196,
      188610,
      18085326
    ],
    [
      5006754,
      1517418418,
      68,
      151,
      8000000000000000,
      284194,
      7100000000,
      0,
      1,
      5452627,
      183461,
      18085319
    ],
    [
      5006754,
      1517418418,
      4,
      153,
      8000000000000000,
      285685,
      7100000000,
      0,
      1,
      5674852,
      189108,
      18085319
    ],
    [
      5006757,
      1517418472,
      3982,
      273,
      4000000000000000,
      373584,
      15000000000,
      0,
      1,
      7652494,
      247874,
      18085316
    ],
    [
      5006758,
      1517418497,
      31,
      140,
      4000000000000000,
      373584,
      10100000000,
      0,
      1,
      4483103,
      250222,
      18085315
    ],
    [
      5006758,
      1517418497,
      5,
      159,
      8000000000000000,
      271080,
      7100000000,
      0,
      1,
      5522802,
      183669,
      18085315
    ],
    [
      5006763,
      1517418554,
      3983,
      45,
      8000000000000000,
      272895,
      15000000000,
      0,
      1,
      6267661,
      191749,
      18085310
    ],
    [
      5006763,
      1517418554,
      6,
      46,
      8000000000000000,
      275980,
      7100000000,
      0,
      1,
      6448931,
      181270,
      18085310
    ],
    [
      5006767,
      1517418570,
      69,
      18,
      4000000000000000,
      124656,
      5100000000,
      0,
      1,
      5544370,
      83104,
      18085306
    ],
    [
      5006773,
      1517418616,
      3984,
      69,
      4000000000000000,
      378444,
      15000000000,
      0,
      1,
      7432361,
      247553,
      18085300
    ],
    [
      5006774,
      1517418620,
      32,
      24,
      4000000000000000,
      373572,
      8100000000,
      0,
      1,
      5382327,
      250246,
      18085299
    ],
    [
      5006774,
      1517418620,
      7,
      27,
      8000000000000000,
      285856,
      5100000000,
      0,
      1,
      6122861,
      184326,
      18085299
    ],
    [
      5006779,
      1517418656,
      8,
      114,
      8000000000000000,
      273744,
      5100000000,
      0,
      1,
      5805994,
      183138,
      18085294
    ],
    [
      5006782,
      1517418669,
      3985,
      14,
      8000000000000000,
      271401,
      15000000000,
      0,
      1,
      651546,
      183233,
      18085291
    ],
    [
      5006782,
      1517418669,
      79,
      19,
      8000000000000000,
      283425,
      8100000000,
      0,
      1,
      5212209,
      191065,
      18085291
    ],
    [
      5006783,
      1517418701,
      3986,
      122,
      0,
      63867,
      15000000000,
      0,
      1,
      4198430,
      25322,
      18085290
    ],
    [
      5006784,
      1517418710,
      3987,
      111,
      4000000000000000,
      375892,
      15000000000,
      0,
      1,
      7452217,
      266114,
      18085289
    ],
    [
      5006788,
      1517418735,
      70,
      45,
      8000000000000000,
      283861,
      5100000000,
      0,
      1,
      5985491,
      190412,
      18085285
    ],
    [
      5006788,
      1517418735,
      9,
      46,
      8000000000000000,
      271456,
      5100000000,
      0,
      1,
      6169789,
      184298,
      18085285
    ],
    [
      5006791,
      1517418761,
      3988,
      152,
      8000000000000000,
      272257,
      15000000000,
      0,
      1,
      4741965,
      181267,
      18085282
    ],
    [
      5006791,
      1517418761,
      33,
      164,
      4000000000000000,
      375391,
      7000000000,
      0,
      1,
      5763390,
      248389,
      18085282
    ],
    [
      5006796,
      1517418850,
      10,
      48,
      8000000000000000,
      280959,
      5100000000,
      0,
      1,
      6517452,
      190635,
      18085277
    ],
    [
      5006796,
      1517418850,
      71,
      49,
      8000000000000000,
      287299,
      5100000000,
      0,
      1,
      6700533,
      183081,
      18085277
    ],
    [
      5006800,
      1517418888,
      3989,
      54,
      8000000000000000,
      273409,
      15000000000,
      0,
      1,
      1519979,
      182951,
      18085273
    ],
    [
      5006800,
      1517418888,
      11,
      67,
      8000000000000000,
      286507,
      5100000000,
      0,
      1,
      3813709,
      182477,
      18085273
    ],
    [
      5006803,
      1517418923,
      3990,
      97,
      4000000000000000,
      372256,
      15000000000,
      0,
      1,
      7694258,
      250384,
      18085270
    ],
    [
      5006805,
      1517418943,
      72,
      70,
      8000000000000000,
      277089,
      5100000000,
      0,
      1,
      2961233,
      185469,
      18085268
    ],
    [
      5006807,
      1517418976,
      34,
      100,
      4000000000000000,
      375576,
      7100000000,
      0,
      1,
      4634837,
      249855,
      18085266
    ],
    [
      5006809,
      1517419031,
      3991,
      172,
      4000000000000000,
      375916,
      15000000000,
      0,
      1,
      5671410,
      250348,
      18085264
    ],
    [
      5006811,
      1517419049,
      12,
      150,
      8000000000000000,
      272904,
      5100000000,
      0,
      1,
      5112533,
      183679,
      18085262
    ],
    [
      5006816,
      1517419128,
      3992,
      145,
      8000000000000000,
      281566,
      15000000000,
      0,
      1,
      4811810,
      181915,
      18085257
    ],
    [
      5006818,
      1517419154,
      281,
      35,
      8000000000000000,
      274552,
      5100000000,
      0,
      1,
      6658398,
      182267,
      18085255
    ],
    [
      5006818,
      1517419154,
      13,
      36,
      8000000000000000,
      275518,
      5100000000,
      0,
      1,
      6849144,
      190746,
      18085255
    ],
    [
      5006821,
      1517419208,
      3993,
      140,
      4000000000000000,
      373222,
      15000000000,
      0,
      1,
      4884838,
      247300,
      18085252
    ],
    [
      5006826,
      1517419272,
      14,
      45,
      8000000000000000,
      287304,
      5100000000,
      0,
      1,
      7325734,
      189208,
      18085247
    ],
    [
      5006826,
      1517419272,
      35,
      46,
      8000000000000000,
      271950,
      5100000000,
      0,
      1,
      7505340,
      179606,
      18085247
    ],
    [
      5006828,
      1517419313,
      36,
      152,
      4000000000000000,
      373480,
      6100000000,
      0,
      1,
      5366947,
      252785,
      18085245
    ],
    [
      5006828,
      1517419313,
      15,
      166,
      8000000000000000,
      286356,
      5100000000,
      0,
      1,
      6130347,
      182004,
      18085245
    ],
    [
      5006829,
      1517419317,
      16,
      66,
      8000000000000000,
      286356,
      5100000000,
      0,
      1,
      6777035,
      181718,
      18085244
    ],
    [
      5006830,
      1517419333,
      3994,
      189,
      8000000000000000,
      271546,
      15000000000,
      0,
      1,
      6151536,
      180253,
      18085243
    ],
    [
      5006833,
      1517419364,
      3995,
      161,
      4000000000000000,
      379177,
      15000000000,
      0,
      1,
      5430341,
      253482,
      18085240
    ],
    [
      5006835,
      1517419373,
      37,
      49,
      8000000000000000,
      272572,
      5100000000,
      0,
      1,
      6470198,
      181003,
      18085238
    ],
    [
      5006837,
      1517419398,
      82,
      63,
      4000000000000000,
      398076,
      9100000000,
      0,
      1,
      6823319,
      265017,
      18085236
    ],
    [
      5006840,
      1517419418,
      3996,
      15,
      8000000000000000,
      270495,
      15000000000,
      0,
      1,
      934310,
      185184,
      18085233
    ],
    [
      5006840,
      1517419418,
      83,
      20,
      4000000000000000,
      396661,
      12000000000,
      0,
      1,
      5874671,
      249947,
      18085233
    ],
    [
      5006841,
      1517419437,
      38,
      129,
      4000000000000000,
      376263,
      7100000000,
      0,
      1,
      4147851,
      250173,
      18085232
    ],
    [
      5006845,
      1517419476,
      39,
      33,
      8000000000000000,
      273714,
      5100000000,
      0,
      1,
      5853796,
      180926,
      18085228
    ],
    [
      5006850,
      1517419558,
      84,
      203,
      4000000000000000,
      370462,
      5100000000,
      0,
      1,
      6838395,
      247719,
      18085223
    ],
    [
      5006854,
      1517419597,
      3997,
      52,
      4000000000000000,
      374065,
      5000000000,
      0,
      1,
      6322305,
      252056,
      18085219
    ],
    [
      5006863,
      1517419719,
      73,
      141,
      8000000000000000,
      285972,
      5100000000,
      0,
      1,
      6751855,
      190998,
      18085210
    ],
    [
      5006863,
      1517419719,
      282,
      142,
      8000000000000000,
      286320,
      5100000000,
      0,
      1,
      6941593,
      189738,
      18085210
    ],
    [
      5006871,
      1517419830,
      3998,
      266,
      0,
      63867,
      5100000000,
      0,
      1,
      7602988,
      25322,
      18085202
    ],
    [
      5006871,
      1517419830,
      40,
      267,
      8000000000000000,
      273727,
      5100000000,
      0,
      1,
      7784639,
      181651,
      18085202
    ],
    [
      5006872,
      1517419834,
      74,
      87,
      8000000000000000,
      282927,
      5100000000,
      0,
      1,
      7540184,
      182682,
      18085201
    ],
    [
      5006872,
      1517419834,
      283,
      88,
      4000000000000000,
      392442,
      5100000000,
      0,
      1,
      7806690,
      266506,
      18085201
    ],
    [
      5006876,
      1517419890,
      85,
      40,
      4000000000000000,
      371256,
      5100000000,
      0,
      1,
      1920507,
      248167,
      18085197
    ],
    [
      5006876,
      1517419890,
      3999,
      41,
      4000000000000000,
      369942,
      5100000000,
      0,
      1,
      2183674,
      263167,
      18085197
    ],
    [
      5006876,
      1517419890,
      2249,
      76,
      8000000000000000,
      273228,
      4000000000,
      0,
      1,
      7660419,
      192128,
      18085197
    ],
    [
      5006877,
      1517419907,
      41,
      0,
      4000000000000000,
      371256,
      6100000000,
      0,
      1,
      249706,
      249706,
      18085196
    ],
    [
      5006877,
      1517419907,
      4000,
      78,
      8000000000000000,
      274074,
      10000000000,
      0,
      1,
      3948655,
      183285,
      18085196
    ],
    [
      5006877,
      1517419907,
      86,
      94,
      4000000000000000,
      375886,
      5100000000,
      0,
      1,
      5293485,
      249706,
      18085196
    ],
    [
      5006883,
      1517420022,
      4001,
      158,
      4000000000000000,
      374559,
      10000000000,
      0,
      1,
      5346013,
      248524,
      18085190
    ],
    [
      5006883,
      1517420022,
      284,
      173,
      4000000000000000,
      375438,
      5100000000,
      0,
      1,
      6327415,
      248524,
      18085190
    ],
    [
      5006883,
      1517420022,
      87,
      174,
      4000000000000000,
      374559,
      5100000000,
      0,
      1,
      6575939,
      248524,
      18085190
    ],
    [
      5006883,
      1517420022,
      75,
      175,
      4000000000000000,
      397059,
      5100000000,
      0,
      1,
      6839463,
      263524,
      18085190
    ],
    [
      5006883,
      1517420022,
      2018,
      176,
      8000000000000000,
      287304,
      5100000000,
      0,
      1,
      7031518,
      192055,
      18085190
    ],
    [
      5006883,
      1517420022,
      42,
      177,
      8000000000000000,
      277749,
      5100000000,
      0,
      1,
      7215017,
      183499,
      18085190
    ],
    [
      5006883,
      1517420022,
      2250,
      181,
      8000000000000000,
      285546,
      5000000000,
      0,
      1,
      7513340,
      182857,
      18085190
    ],
    [
      5006886,
      1517420075,
      43,
      190,
      4000000000000000,
      373531,
      5100000000,
      0,
      1,
      7189651,
      250478,
      18085187
    ],
    [
      5006886,
      1517420075,
      2019,
      191,
      8000000000000000,
      284914,
      5100000000,
      0,
      1,
      7377989,
      188338,
      18085187
    ],
    [
      5006886,
      1517420075,
      2251,
      195,
      8000000000000000,
      291448,
      5000000000,
      0,
      1,
      7789915,
      180037,
      18085187
    ],
    [
      5006889,
      1517420114,
      4002,
      146,
      4000000000000000,
      374559,
      10000000000,
      0,
      1,
      5123957,
      248498,
      18085184
    ],
    [
      5006890,
      1517420119,
      285,
      73,
      4000000000000000,
      374559,
      5100000000,
      0,
      1,
      7830674,
      249604,
      18085183
    ],
    [
      5006891,
      1517420121,
      2252,
      11,
      8000000000000000,
      285561,
      5000000000,
      0,
      1,
      7616207,
      191012,
      18085182
    ],
    [
      5006893,
      1517420162,
      4003,
      138,
      4000000000000000,
      373965,
      10000000000,
      0,
      1,
      5707004,
      249977,
      18085180
    ],
    [
      5006893,
      1517420162,
      44,
      147,
      4000000000000000,
      374406,
      6100000000,
      0,
      1,
      6351366,
      249977,
      18085180
    ],
    [
      5006893,
      1517420162,
      88,
      152,
      4000000000000000,
      373965,
      5100000000,
      0,
      1,
      6947590,
      249977,
      18085180
    ],
    [
      5006896,
      1517420210,
      4004,
      117,
      4000000000000000,
      373935,
      10000000000,
      0,
      1,
      4721998,
      249417,
      18085177
    ],
    [
      5006898,
      1517420258,
      2020,
      180,
      4000000000000000,
      374941,
      5100000000,
      0,
      1,
      7179189,
      250451,
      18085175
    ],
    [
      5006898,
      1517420258,
      2253,
      181,
      4000000000000000,
      396180,
      5100000000,
      0,
      1,
      7444656,
      265467,
      18085175
    ],
    [
      5006898,
      1517420258,
      286,
      182,
      4000000000000000,
      372634,
      5100000000,
      0,
      1,
      7695123,
      250467,
      18085175
    ],
    [
      5006908,
      1517420383,
      4005,
      62,
      4000000000000000,
      373090,
      6000000000,
      0,
      1,
      6850967,
      252050,
      18085165
    ],
    [
      5006916,
      1517420477,
      89,
      138,
      4000000000000000,
      374152,
      5100000000,
      0,
      1,
      5158904,
      249417,
      18085157
    ],
    [
      5006916,
      1517420477,
      287,
      139,
      4000000000000000,
      377181,
      5100000000,
      0,
      1,
      5408321,
      249417,
      18085157
    ],
    [
      5006919,
      1517420491,
      403,
      32,
      8000000000000000,
      480052,
      7000000000,
      0,
      1,
      5875029,
      320383,
      18085154
    ],
    [
      5006920,
      1517420518,
      404,
      226,
      8000000000000000,
      485598,
      10000000000,
      0,
      1,
      6958921,
      191675,
      18085153
    ],
    [
      5006922,
      1517420559,
      288,
      204,
      4000000000000000,
      375372,
      5100000000,
      0,
      1,
      6028940,
      249335,
      18085151
    ],
    [
      5006922,
      1517420559,
      45,
      205,
      4000000000000000,
      372286,
      5100000000,
      0,
      1,
      6278275,
      249335,
      18085151
    ],
    [
      5006925,
      1517420590,
      405,
      140,
      8000000000000000,
      287106,
      6000000000,
      0,
      1,
      3902877,
      183136,
      18085148
    ],
    [
      5006925,
      1517420590,
      2254,
      141,
      4000000000000000,
      376413,
      5100000000,
      0,
      1,
      4152552,
      249675,
      18085148
    ],
    [
      5006927,
      1517420621,
      2021,
      137,
      8000000000000000,
      272995,
      5100000000,
      0,
      1,
      5836672,
      183788,
      18085146
    ],
    [
      5006929,
      1517420634,
      4006,
      46,
      4000000000000000,
      376413,
      15000000000,
      0,
      1,
      6003230,
      250531,
      18085144
    ],
    [
      5006930,
      1517420642,
      289,
      8,
      4000000000000000,
      374512,
      5100000000,
      0,
      1,
      651007,
      251243,
      18085143
    ],
    [
      5006934,
      1517420680,
      4007,
      61,
      4000000000000000,
      375796,
      12000000000,
      0,
      1,
      6688753,
      250737,
      18085139
    ],
    [
      5006934,
      1517420680,
      406,
      64,
      8000000000000000,
      270264,
      7000000000,
      0,
      1,
      6914436,
      183683,
      18085139
    ],
    [
      5006934,
      1517420680,
      90,
      66,
      0,
      63867,
      5100000000,
      0,
      1,
      7048064,
      25322,
      18085139
    ],
    [
      5006938,
      1517420753,
      407,
      123,
      8000000000000000,
      273828,
      7000000000,
      0,
      1,
      5367107,
      184061,
      18085135
    ],
    [
      5006938,
      1517420753,
      290,
      129,
      4000000000000000,
      378180,
      5100000000,
      0,
      1,
      5848871,
      248711,
      18085135
    ],
    [
      5006938,
      1517420753,
      76,
      130,
      8000000000000000,
      276082,
      5100000000,
      0,
      1,
      6041333,
      192462,
      18085135
    ],
    [
      5006938,
      1517420753,
      2255,
      131,
      8000000000000000,
      275461,
      5100000000,
      0,
      1,
      6224537,
      183204,
      18085135
    ],
    [
      5006938,
      1517420753,
      46,
      132,
      4000000000000000,
      372325,
      5100000000,
      0,
      1,
      6473248,
      248711,
      18085135
    ],
    [
      5006939,
      1517420785,
      91,
      116,
      4000000000000000,
      398605,
      5100000000,
      0,
      1,
      4735979,
      265391,
      18085134
    ],
    [
      5006945,
      1517420878,
      92,
      161,
      4000000000000000,
      375586,
      5100000000,
      0,
      1,
      5089646,
      248714,
      18085128
    ],
    [
      5006945,
      1517420878,
      291,
      162,
      0,
      63867,
      5100000000,
      0,
      1,
      5114968,
      25322,
      18085128
    ],
    [
      5006947,
      1517420889,
      408,
      88,
      8000000000000000,
      284830,
      7000000000,
      0,
      1,
      7277951,
      183960,
      18085126
    ],
    [
      5006947,
      1517420889,
      2022,
      89,
      8000000000000000,
      274924,
      5100000000,
      0,
      1,
      7457950,
      179999,
      18085126
    ],
    [
      5006951,
      1517420945,
      4008,
      37,
      4000000000000000,
      376105,
      10000000000,
      0,
      1,
      1979937,
      253826,
      18085122
    ],
    [
      5006951,
      1517420945,
      2256,
      49,
      4000000000000000,
      375586,
      5100000000,
      0,
      1,
      3086834,
      253826,
      18085122
    ],
    [
      5006951,
      1517420945,
      77,
      50,
      4000000000000000,
      375574,
      5100000000,
      0,
      1,
      3340652,
      253818,
      18085122
    ],
    [
      5006952,
      1517420951,
      4009,
      47,
      4000000000000000,
      375586,
      8000000000,
      0,
      1,
      6896320,
      248428,
      18085121
    ],
    [
      5006952,
      1517420951,
      292,
      50,
      4000000000000000,
      396550,
      5100000000,
      0,
      1,
      7275294,
      263428,
      18085121
    ],
    [
      5006952,
      1517420951,
      93,
      51,
      4000000000000000,
      374050,
      5100000000,
      0,
      1,
      7523722,
      248428,
      18085121
    ],
    [
      5006953,
      1517420981,
      78,
      132,
      4000000000000000,
      380727,
      5100000000,
      0,
      1,
      5253368,
      250864,
      18085120
    ],
    [
      5006954,
      1517420991,
      4010,
      55,
      4000000000000000,
      374050,
      10000000000,
      0,
      1,
      2781092,
      250625,
      18085119
    ],
    [
      5006957,
      1517421058,
      409,
      165,
      8000000000000000,
      285294,
      6000000000,
      0,
      1,
      6439472,
      179868,
      18085116
    ],
    [
      5006957,
      1517421058,
      293,
      166,
      4000000000000000,
      376308,
      5100000000,
      0,
      1,
      6687743,
      248271,
      18085116
    ],
    [
      5006957,
      1517421058,
      47,
      167,
      4000000000000000,
      374050,
      5100000000,
      0,
      1,
      6936014,
      248271,
      18085116
    ],
    [
      5006958,
      1517421074,
      94,
      82,
      4000000000000000,
      373653,
      5100000000,
      0,
      1,
      7668961,
      252882,
      18085115
    ],
    [
      5006969,
      1517421268,
      4011,
      75,
      4000000000000000,
      377695,
      5100000000,
      0,
      1,
      3722491,
      250525,
      18085104
    ],
    [
      5006972,
      1517421313,
      2257,
      35,
      4000000000000000,
      373653,
      5100000000,
      0,
      1,
      2293287,
      247830,
      18085101
    ],
    [
      5006972,
      1517421313,
      294,
      36,
      4000000000000000,
      375828,
      5100000000,
      0,
      1,
      2541117,
      247830,
      18085101
    ],
    [
      5006972,
      1517421313,
      95,
      37,
      4000000000000000,
      372618,
      5100000000,
      0,
      1,
      2788947,
      247830,
      18085101
    ],
    [
      5006972,
      1517421313,
      79,
      38,
      4000000000000000,
      373369,
      5100000000,
      0,
      1,
      3036769,
      247822,
      18085101
    ],
    [
      5006976,
      1517421338,
      2258,
      38,
      0,
      63867,
      5100000000,
      0,
      1,
      6967059,
      25322,
      18085097
    ],
    [
      5006977,
      1517421349,
      48,
      72,
      8000000000000000,
      275613,
      5100000000,
      0,
      1,
      7275262,
      186057,
      18085096
    ],
    [
      5006979,
      1517421375,
      80,
      72,
      4000000000000000,
      371398,
      5100000000,
      0,
      1,
      7745716,
      250254,
      18085094
    ],
    [
      5006986,
      1517421448,
      2259,
      33,
      4000000000000000,
      373653,
      7000000000,
      0,
      1,
      1307934,
      262487,
      18085087
    ],
    [
      5006986,
      1517421448,
      295,
      35,
      4000000000000000,
      371410,
      5100000000,
      0,
      1,
      1633407,
      247487,
      18085087
    ],
    [
      5006986,
      1517421448,
      2023,
      36,
      8000000000000000,
      275431,
      5100000000,
      0,
      1,
      1814788,
      181381,
      18085087
    ],
    [
      5006986,
      1517421448,
      49,
      37,
      4000000000000000,
      373815,
      5100000000,
      0,
      1,
      2062275,
      247487,
      18085087
    ],
    [
      5006986,
      1517421448,
      81,
      38,
      4000000000000000,
      370330,
      5100000000,
      0,
      1,
      2309754,
      247479,
      18085087
    ],
    [
      5006986,
      1517421448,
      2260,
      98,
      4000000000000000,
      397893,
      7000000000,
      0,
      1,
      6649402,
      247487,
      18085087
    ],
    [
      5006996,
      1517421536,
      96,
      56,
      0,
      63867,
      5100000000,
      0,
      1,
      3815879,
      25322,
      18085077
    ],
    [
      5006996,
      1517421536,
      82,
      57,
      4000000000000000,
      376275,
      5100000000,
      0,
      1,
      4066167,
      250288,
      18085077
    ],
    [
      5006996,
      1517421536,
      296,
      58,
      4000000000000000,
      374400,
      5100000000,
      0,
      1,
      4316463,
      250296,
      18085077
    ],
    [
      5006996,
      1517421536,
      97,
      95,
      4000000000000000,
      376287,
      5100000000,
      0,
      1,
      7325417,
      265296,
      18085077
    ],
    [
      5006996,
      1517421536,
      83,
      96,
      4000000000000000,
      372801,
      5100000000,
      0,
      1,
      7575705,
      250288,
      18085077
    ],
    [
      5007005,
      1517421618,
      2261,
      27,
      4000000000000000,
      372813,
      7000000000,
      0,
      1,
      6033739,
      251090,
      18085068
    ],
    [
      5007005,
      1517421618,
      297,
      32,
      4000000000000000,
      374220,
      5100000000,
      0,
      1,
      6419297,
      251090,
      18085068
    ],
    [
      5007005,
      1517421618,
      98,
      33,
      4000000000000000,
      370995,
      5100000000,
      0,
      1,
      6670387,
      251090,
      18085068
    ],
    [
      5007007,
      1517421641,
      298,
      139,
      4000000000000000,
      374182,
      5100000000,
      0,
      1,
      5854725,
      249670,
      18085066
    ],
    [
      5007007,
      1517421641,
      4012,
      140,
      8000000000000000,
      270330,
      5100000000,
      0,
      1,
      6036578,
      181853,
      18085066
    ],
    [
      5007010,
      1517421699,
      84,
      132,
      4000000000000000,
      374604,
      5100000000,
      0,
      1,
      5191555,
      249108,
      18085063
    ],
    [
      5007012,
      1517421718,
      99,
      203,
      4000000000000000,
      374092,
      5100000000,
      0,
      1,
      6508869,
      251030,
      18085061
    ],
    [
      5007017,
      1517421839,
      2262,
      183,
      4000000000000000,
      373584,
      7000000000,
      0,
      1,
      6812641,
      250655,
      18085056
    ],
    [
      5007017,
      1517421839,
      50,
      184,
      4000000000000000,
      373584,
      7000000000,
      0,
      1,
      7063296,
      250655,
      18085056
    ],
    [
      5007017,
      1517421839,
      85,
      189,
      4000000000000000,
      373714,
      5100000000,
      0,
      1,
      7503034,
      250647,
      18085056
    ],
    [
      5007017,
      1517421839,
      299,
      190,
      4000000000000000,
      373584,
      5100000000,
      0,
      1,
      7753689,
      250655,
      18085056
    ],
    [
      5007018,
      1517421842,
      4013,
      35,
      4000000000000000,
      373584,
      5100000000,
      0,
      1,
      6122122,
      249734,
      18085055
    ],
    [
      5007025,
      1517421944,
      325,
      163,
      8000000000000000,
      481053,
      10100000000,
      0,
      1,
      7425734,
      321296,
      18085048
    ],
    [
      5007026,
      1517421947,
      100,
      25,
      4000000000000000,
      376545,
      5100000000,
      0,
      1,
      5830460,
      250219,
      18085047
    ],
    [
      5007026,
      1517421947,
      410,
      26,
      8000000000000000,
      287349,
      5100000000,
      0,
      1,
      6013173,
      182713,
      18085047
    ],
    [
      5007026,
      1517421947,
      86,
      27,
      4000000000000000,
      375970,
      5100000000,
      0,
      1,
      6263384,
      250211,
      18085047
    ],
    [
      5007026,
      1517421947,
      300,
      28,
      4000000000000000,
      374601,
      5100000000,
      0,
      1,
      6513603,
      250219,
      18085047
    ],
    [
      5007031,
      1517422065,
      51,
      193,
      8000000000000000,
      272064,
      5100000000,
      0,
      1,
      6291309,
      182142,
      18085042
    ],
    [
      5007031,
      1517422065,
      301,
      194,
      4000000000000000,
      373120,
      5100000000,
      0,
      1,
      6539060,
      247751,
      18085042
    ],
    [
      5007031,
      1517422065,
      87,
      195,
      4000000000000000,
      373108,
      5100000000,
      0,
      1,
      6786803,
      247743,
      18085042
    ],
    [
      5007031,
      1517422065,
      4014,
      198,
      4000000000000000,
      377671,
      5000000000,
      0,
      1,
      7135539,
      247751,
      18085042
    ],
    [
      5007035,
      1517422122,
      101,
      186,
      4000000000000000,
      375328,
      5100000000,
      0,
      1,
      6671154,
      251816,
      18085038
    ],
    [
      5007037,
      1517422145,
      326,
      105,
      8000000000000000,
      283357,
      10000000000,
      0,
      1,
      4462941,
      182776,
      18085036
    ],
    [
      5007037,
      1517422145,
      302,
      113,
      4000000000000000,
      375264,
      5100000000,
      0,
      1,
      4952144,
      249700,
      18085036
    ],
    [
      5007037,
      1517422145,
      102,
      114,
      4000000000000000,
      373120,
      5100000000,
      0,
      1,
      5201844,
      249700,
      18085036
    ],
    [
      5007039,
      1517422176,
      88,
      188,
      4000000000000000,
      375252,
      5100000000,
      0,
      1,
      7583168,
      250587,
      18085034
    ],
    [
      5007042,
      1517422231,
      103,
      72,
      4000000000000000,
      374550,
      5100000000,
      0,
      1,
      7429338,
      251132,
      18085031
    ],
    [
      5007042,
      1517422231,
      89,
      73,
      4000000000000000,
      375880,
      5100000000,
      0,
      1,
      7680462,
      251124,
      18085031
    ],
    [
      5007047,
      1517422334,
      4015,
      116,
      0,
      63867,
      15000000000,
      0,
      1,
      4330087,
      25322,
      18085026
    ],
    [
      5007047,
      1517422334,
      327,
      127,
      8000000000000000,
      286410,
      10000000000,
      0,
      1,
      5374167,
      179568,
      18085026
    ],
    [
      5007049,
      1517422366,
      303,
      38,
      4000000000000000,
      375312,
      5100000000,
      0,
      1,
      4362265,
      247894,
      18085024
    ],
    [
      5007049,
      1517422366,
      90,
      39,
      4000000000000000,
      376686,
      5100000000,
      0,
      1,
      4610151,
      247886,
      18085024
    ],
    [
      5007049,
      1517422366,
      104,
      40,
      4000000000000000,
      375892,
      5100000000,
      0,
      1,
      4858045,
      247894,
      18085024
    ],
    [
      5007049,
      1517422366,
      75,
      41,
      8000000000000000,
      479265,
      5100000000,
      0,
      1,
      5180477,
      322432,
      18085024
    ],
    [
      5007052,
      1517422418,
      328,
      152,
      8000000000000000,
      287439,
      12000000000,
      0,
      1,
      7071896,
      181900,
      18085021
    ],
    [
      5007055,
      1517422493,
      329,
      145,
      8000000000000000,
      281434,
      10000000000,
      0,
      1,
      5833688,
      189249,
      18085018
    ],
    [
      5007055,
      1517422493,
      105,
      160,
      4000000000000000,
      376698,
      5100000000,
      0,
      1,
      6810037,
      249391,
      18085018
    ],
    [
      5007055,
      1517422493,
      4016,
      161,
      4000000000000000,
      396108,
      5100000000,
      0,
      1,
      7074428,
      264391,
      18085018
    ],
    [
      5007055,
      1517422493,
      207,
      162,
      8000000000000000,
      479286,
      5100000000,
      0,
      1,
      7396498,
      322070,
      18085018
    ],
    [
      5007055,
      1517422493,
      91,
      163,
      4000000000000000,
      373596,
      5100000000,
      0,
      1,
      7645881,
      249383,
      18085018
    ],
    [
      5007057,
      1517422520,
      52,
      34,
      4000000000000000,
      371757,
      5100000000,
      0,
      1,
      2002171,
      251720,
      18085016
    ],
    [
      5007057,
      1517422520,
      304,
      35,
      4000000000000000,
      371757,
      5100000000,
      0,
      1,
      2253891,
      251720,
      18085016
    ],
    [
      5007057,
      1517422520,
      106,
      36,
      4000000000000000,
      376698,
      5100000000,
      0,
      1,
      2505611,
      251720,
      18085016
    ],
    [
      5007058,
      1517422534,
      412,
      83,
      8000000000000000,
      272082,
      6000000000,
      0,
      1,
      5944505,
      190435,
      18085015
    ],
    [
      5007059,
      1517422546,
      107,
      53,
      4000000000000000,
      373608,
      5100000000,
      0,
      1,
      7057360,
      250316,
      18085014
    ],
    [
      5007062,
      1517422585,
      108,
      44,
      4000000000000000,
      377580,
      5100000000,
      0,
      1,
      7397372,
      250791,
      18085011
    ],
    [
      5007062,
      1517422585,
      2,
      45,
      8000000000000000,
      482290,
      5100000000,
      0,
      1,
      7718995,
      321623,
      18085011
    ],
    [
      5007063,
      1517422603,
      305,
      108,
      4000000000000000,
      370495,
      5100000000,
      0,
      1,
      6805762,
      250591,
      18085010
    ],
    [
      5007063,
      1517422603,
      92,
      109,
      4000000000000000,
      375462,
      5100000000,
      0,
      1,
      7056345,
      250583,
      18085010
    ],
    [
      5007071,
      1517422700,
      330,
      50,
      8000000000000000,
      283342,
      10000000000,
      0,
      1,
      6368731,
      191540,
      18085002
    ],
    [
      5007071,
      1517422700,
      413,
      64,
      8000000000000000,
      282588,
      6000000000,
      0,
      1,
      7021002,
      184077,
      18085002
    ],
    [
      5007071,
      1517422700,
      109,
      68,
      4000000000000000,
      375474,
      5100000000,
      0,
      1,
      7421931,
      247486,
      18085002
    ],
    [
      5007071,
      1517422700,
      93,
      69,
      4000000000000000,
      378586,
      5100000000,
      0,
      1,
      7669409,
      247478,
      18085002
    ],
    [
      5007073,
      1517422746,
      110,
      73,
      4000000000000000,
      376186,
      5100000000,
      0,
      1,
      7478204,
      249537,
      18085000
    ],
    [
      5007074,
      1517422759,
      111,
      70,
      4000000000000000,
      378598,
      5100000000,
      0,
      1,
      6767137,
      249977,
      18084999
    ],
    [
      5007075,
      1517422786,
      2,
      87,
      8000000000000000,
      482692,
      5100000000,
      0,
      1,
      3558575,
      320933,
      18084998
    ],
    [
      5007075,
      1517422786,
      94,
      88,
      4000000000000000,
      374293,
      5100000000,
      0,
      1,
      3808771,
      250196,
      18084998
    ],
    [
      5007078,
      1517422814,
      112,
      97,
      4000000000000000,
      371328,
      5100000000,
      0,
      1,
      4390045,
      250216,
      18084995
    ],
    [
      5007080,
      1517422842,
      113,
      92,
      4000000000000000,
      373638,
      5100000000,
      0,
      1,
      4334012,
      250167,
      18084993
    ],
    [
      5007080,
      1517422842,
      95,
      93,
      4000000000000000,
      375312,
      5100000000,
      0,
      1,
      4584171,
      250159,
      18084993
    ],
    [
      5007084,
      1517422893,
      331,
      72,
      8000000000000000,
      286096,
      10000000000,
      0,
      1,
      4245365,
      188954,
      18084989
    ],
    [
      5007084,
      1517422893,
      114,
      82,
      4000000000000000,
      375324,
      5100000000,
      0,
      1,
      5032671,
      247527,
      18084989
    ],
    [
      5007084,
      1517422893,
      96,
      83,
      4000000000000000,
      379525,
      5100000000,
      0,
      1,
      5280190,
      247519,
      18084989
    ],
    [
      5007093,
      1517423062,
      332,
      24,
      8000000000000000,
      283111,
      10000000000,
      0,
      1,
      6021607,
      185428,
      18084980
    ],
    [
      5007093,
      1517423062,
      115,
      30,
      4000000000000000,
      379537,
      5100000000,
      0,
      1,
      6710463,
      251165,
      18084980
    ],
    [
      5007093,
      1517423062,
      116,
      31,
      4000000000000000,
      370899,
      5100000000,
      0,
      1,
      6961628,
      251165,
      18084980
    ],
    [
      5007093,
      1517423062,
      3,
      32,
      8000000000000000,
      286027,
      5100000000,
      0,
      1,
      7142993,
      181365,
      18084980
    ],
    [
      5007093,
      1517423062,
      97,
      33,
      4000000000000000,
      370887,
      5100000000,
      0,
      1,
      7394150,
      251157,
      18084980
    ],
    [
      5007096,
      1517423110,
      98,
      93,
      4000000000000000,
      375019,
      5100000000,
      0,
      1,
      3835419,
      248189,
      18084977
    ],
    [
      5007100,
      1517423131,
      5,
      38,
      8000000000000000,
      482458,
      10000000000,
      0,
      1,
      5970983,
      321527,
      18084973
    ],
    [
      5007101,
      1517423147,
      5,
      110,
      8000000000000000,
      479542,
      2000000000,
      0,
      1,
      7202042,
      321910,
      18084972
    ],
    [
      5007102,
      1517423156,
      333,
      52,
      8000000000000000,
      286431,
      12000000000,
      0,
      1,
      2293499,
      180716,
      18084971
    ],
    [
      5007102,
      1517423156,
      4,
      57,
      8000000000000000,
      284836,
      5100000000,
      0,
      1,
      6915293,
      188954,
      18084971
    ],
    [
      5007108,
      1517423333,
      4020,
      77,
      4000000000000000,
      370896,
      15000000000,
      0,
      1,
      4674343,
      251874,
      18084965
    ],
    [
      5007108,
      1517423333,
      334,
      84,
      8000000000000000,
      271074,
      10000000000,
      0,
      1,
      5100856,
      191265,
      18084965
    ],
    [
      5007108,
      1517423333,
      53,
      105,
      4000000000000000,
      370896,
      7100000000,
      0,
      1,
      6399139,
      251874,
      18084965
    ],
    [
      5007110,
      1517423375,
      16,
      66,
      8000000000000000,
      483505,
      18000000000,
      0,
      1,
      2642128,
      322435,
      18084963
    ],
    [
      5007111,
      1517423378,
      4021,
      95,
      4000000000000000,
      375684,
      20000000000,
      0,
      1,
      5731517,
      247037,
      18084962
    ],
    [
      5007111,
      1517423378,
      117,
      151,
      4000000000000000,
      375031,
      5100000000,
      0,
      1,
      7825914,
      247037,
      18084962
    ],
    [
      5007112,
      1517423388,
      99,
      46,
      4000000000000000,
      373129,
      5100000000,
      0,
      1,
      6690139,
      250842,
      18084961
    ],
    [
      5007113,
      1517423398,
      335,
      157,
      4000000000000000,
      397230,
      10000000000,
      0,
      1,
      4117943,
      83112,
      18084960
    ],
    [
      5007113,
      1517423398,
      0,
      163,
      8000000000000000,
      483165,
      4100000000,
      0,
      1,
      4599844,
      323666,
      18084960
    ],
    [
      5007121,
      1517423556,
      336,
      127,
      8000000000000000,
      272307,
      10000000000,
      0,
      1,
      4303498,
      193154,
      18084952
    ],
    [
      5007121,
      1517423556,
      5,
      144,
      8000000000000000,
      286006,
      5100000000,
      0,
      1,
      5314114,
      190651,
      18084952
    ],
    [
      5007121,
      1517423556,
      100,
      145,
      4000000000000000,
      373255,
      5100000000,
      0,
      1,
      5561113,
      246999,
      18084952
    ],
    [
      5007125,
      1517423644,
      337,
      173,
      4000000000000000,
      397378,
      15000000000,
      0,
      1,
      5050222,
      266032,
      18084948
    ],
    [
      5007125,
      1517423644,
      101,
      192,
      0,
      63867,
      5100000000,
      0,
      1,
      6355636,
      25322,
      18084948
    ],
    [
      5007125,
      1517423644,
      6,
      193,
      8000000000000000,
      276727,
      5100000000,
      0,
      1,
      6546105,
      190469,
      18084948
    ],
    [
      5007126,
      1517423675,
      4022,
      135,
      8000000000000000,
      400000,
      15100000000,
      0,
      1,
      3913794,
      192979,
      18084947
    ],
    [
      5007130,
      1517423784,
      4023,
      189,
      4000000000000000,
      300000,
      15100000000,
      0,
      1,
      6516805,
      249671,
      18084943
    ],
    [
      5007130,
      1517423784,
      338,
      190,
      4000000000000000,
      375777,
      15000000000,
      0,
      1,
      6766468,
      249663,
      18084943
    ],
    [
      5007132,
      1517423792,
      4024,
      21,
      4000000000000000,
      300000,
      15100000000,
      0,
      1,
      1965645,
      250683,
      18084941
    ],
    [
      5007133,
      1517423805,
      7,
      115,
      8000000000000000,
      272730,
      5100000000,
      0,
      1,
      4401943,
      180942,
      18084940
    ],
    [
      5007133,
      1517423805,
      102,
      116,
      8000000000000000,
      275073,
      5100000000,
      0,
      1,
      4585125,
      183182,
      18084940
    ],
    [
      5007136,
      1517423817,
      339,
      67,
      4000000000000000,
      372657,
      12000000000,
      0,
      1,
      2003649,
      250868,
      18084937
    ],
    [
      5007138,
      1517423829,
      4025,
      141,
      8000000000000000,
      450000,
      15100000000,
      0,
      1,
      5496474,
      182190,
      18084935
    ],
    [
      5007138,
      1517423829,
      8,
      145,
      8000000000000000,
      287676,
      5100000000,
      0,
      1,
      6196675,
      181352,
      18084935
    ],
    [
      5007140,
      1517423866,
      4026,
      253,
      4000000000000000,
      350000,
      15100000000,
      0,
      1,
      7569191,
      250462,
      18084933
    ],
    [
      5007142,
      1517423901,
      9,
      99,
      4000000000000000,
      398802,
      5100000000,
      0,
      1,
      7195912,
      264053,
      18084931
    ],
    [
      5007148,
      1517423961,
      103,
      111,
      8000000000000000,
      276358,
      5100000000,
      0,
      1,
      4936311,
      182314,
      18084925
    ],
    [
      5007158,
      1517424042,
      340,
      59,
      4000000000000000,
      376840,
      12000000000,
      0,
      1,
      2127196,
      252016,
      18084915
    ],
    [
      5007158,
      1517424042,
      104,
      67,
      4000000000000000,
      398545,
      5100000000,
      0,
      1,
      6903409,
      267016,
      18084915
    ],
    [
      5007159,
      1517424052,
      4027,
      44,
      4000000000000000,
      350000,
      15100000000,
      0,
      1,
      1706873,
      250773,
      18084914
    ],
    [
      5007162,
      1517424092,
      414,
      74,
      8000000000000000,
      275758,
      5100000000,
      0,
      1,
      7696628,
      181009,
      18084911
    ],
    [
      5007168,
      1517424230,
      341,
      227,
      4000000000000000,
      375949,
      10100000000,
      0,
      1,
      7411033,
      253888,
      18084905
    ],
    [
      5007171,
      1517424266,
      105,
      176,
      4000000000000000,
      375949,
      5100000000,
      0,
      1,
      7743344,
      250305,
      18084902
    ],
    [
      5007196,
      1517424790,
      342,
      166,
      4000000000000000,
      375457,
      8000000000,
      0,
      1,
      6117416,
      251751,
      18084877
    ],
    [
      5007199,
      1517424829,
      106,
      148,
      4000000000000000,
      375457,
      5100000000,
      0,
      1,
      6728242,
      249700,
      18084874
    ],
    [
      5007211,
      1517425069,
      343,
      180,
      4000000000000000,
      374281,
      5100000000,
      0,
      1,
      6253062,
      250864,
      18084862
    ],
    [
      5007211,
      1517425069,
      107,
      181,
      4000000000000000,
      377169,
      5100000000,
      0,
      1,
      6503926,
      250864,
      18084862
    ],
    [
      5007217,
      1517425146,
      108,
      177,
      4000000000000000,
      375220,
      5100000000,
      0,
      1,
      6594586,
      249042,
      18084856
    ],
    [
      5007219,
      1517425171,
      344,
      173,
      4000000000000000,
      371503,
      5100000000,
      0,
      1,
      5558993,
      250643,
      18084854
    ],
    [
      5007224,
      1517425285,
      109,
      133,
      4000000000000000,
      374091,
      5100000000,
      0,
      1,
      5694566,
      250294,
      18084849
    ],
    [
      5007237,
      1517425496,
      110,
      128,
      8000000000000000,
      275443,
      5100000000,
      0,
      1,
      7562613,
      182893,
      18084836
    ],
    [
      5007237,
      1517425496,
      345,
      129,
      8000000000000000,
      273937,
      5100000000,
      0,
      1,
      7746304,
      183691,
      18084836
    ],
    [
      5007241,
      1517425537,
      2024,
      165,
      8000000000000000,
      269493,
      5100000000,
      0,
      1,
      7061779,
      182439,
      18084832
    ],
    [
      5007252,
      1517425685,
      346,
      103,
      4000000000000000,
      372646,
      5100000000,
      0,
      1,
      7856480,
      250583,
      18084821
    ],
    [
      5007256,
      1517425751,
      111,
      145,
      8000000000000000,
      274950,
      5100000000,
      0,
      1,
      7852658,
      182514,
      18084817
    ],
    [
      5007261,
      1517425810,
      118,
      89,
      0,
      63867,
      15100000000,
      0,
      1,
      4468050,
      25322,
      18084812
    ],
    [
      5007262,
      1517425816,
      112,
      83,
      4000000000000000,
      374308,
      5100000000,
      0,
      1,
      4357682,
      248050,
      18084811
    ],
    [
      5007265,
      1517425894,
      119,
      33,
      8000000000000000,
      284770,
      5100000000,
      0,
      1,
      3664083,
      181679,
      18084808
    ],
    [
      5007265,
      1517425894,
      113,
      34,
      4000000000000000,
      372075,
      5100000000,
      0,
      1,
      3914064,
      249981,
      18084808
    ],
    [
      5007279,
      1517426167,
      120,
      85,
      8000000000000000,
      274722,
      5100000000,
      0,
      1,
      6371734,
      190385,
      18084794
    ],
    [
      5007279,
      1517426167,
      114,
      86,
      4000000000000000,
      375868,
      5100000000,
      0,
      1,
      6624089,
      252355,
      18084794
    ],
    [
      5007279,
      1517426167,
      417,
      87,
      8000000000000000,
      269610,
      5100000000,
      0,
      1,
      6813171,
      189082,
      18084794
    ],
    [
      5007280,
      1517426169,
      2025,
      72,
      8000000000000000,
      272443,
      5100000000,
      0,
      1,
      7487779,
      181787,
      18084793
    ],
    [
      5007290,
      1517426385,
      4028,
      171,
      4000000000000000,
      350000,
      15000000000,
      0,
      1,
      5477646,
      247149,
      18084783
    ],
    [
      5007290,
      1517426385,
      121,
      182,
      4000000000000000,
      398691,
      14100000000,
      0,
      1,
      6108359,
      262133,
      18084783
    ],
    [
      5007292,
      1517426409,
      418,
      71,
      8000000000000000,
      274606,
      5100000000,
      0,
      1,
      7479356,
      192996,
      18084781
    ],
    [
      5007292,
      1517426409,
      115,
      72,
      4000000000000000,
      375501,
      5100000000,
      0,
      1,
      7729316,
      249960,
      18084781
    ],
    [
      5007295,
      1517426435,
      2026,
      73,
      8000000000000000,
      284556,
      4100000000,
      0,
      1,
      7546686,
      191840,
      18084778
    ],
    [
      5007297,
      1517426462,
      116,
      94,
      0,
      63867,
      5100000000,
      0,
      1,
      3634044,
      25322,
      18084776
    ],
    [
      5007297,
      1517426462,
      2027,
      95,
      8000000000000000,
      287071,
      5100000000,
      0,
      1,
      3818981,
      184937,
      18084776
    ],
    [
      5007302,
      1517426513,
      4029,
      60,
      4000000000000000,
      350000,
      25100000000,
      0,
      1,
      2393386,
      250079,
      18084771
    ],
    [
      5007313,
      1517426693,
      122,
      142,
      4000000000000000,
      375781,
      5100000000,
      0,
      1,
      6806477,
      249567,
      18084760
    ],
    [
      5007313,
      1517426693,
      419,
      143,
      4000000000000000,
      399595,
      5100000000,
      0,
      1,
      7071060,
      264583,
      18084760
    ],
    [
      5007313,
      1517426693,
      117,
      144,
      4000000000000000,
      398293,
      5100000000,
      0,
      1,
      7335635,
      264575,
      18084760
    ],
    [
      5007315,
      1517426736,
      123,
      176,
      4000000000000000,
      374314,
      5100000000,
      0,
      1,
      7416047,
      251673,
      18084758
    ],
    [
      5007320,
      1517426776,
      68,
      141,
      8000000000000000,
      482623,
      4000000000,
      0,
      1,
      7533092,
      320250,
      18084753
    ],
    [
      5007322,
      1517426810,
      420,
      140,
      4000000000000000,
      373518,
      7000000000,
      0,
      1,
      5228834,
      247808,
      18084751
    ],
    [
      5007322,
      1517426810,
      2028,
      143,
      8000000000000000,
      286464,
      5100000000,
      0,
      1,
      5485867,
      189560,
      18084751
    ],
    [
      5007323,
      1517426822,
      118,
      111,
      8000000000000000,
      285178,
      5100000000,
      0,
      1,
      4237584,
      185610,
      18084750
    ],
    [
      5007330,
      1517426926,
      4030,
      161,
      4000000000000000,
      350000,
      15100000000,
      0,
      1,
      6352054,
      249282,
      18084743
    ],
    [
      5007332,
      1517426932,
      421,
      37,
      4000000000000000,
      375196,
      8000000000,
      0,
      1,
      6983595,
      248452,
      18084741
    ],
    [
      5007340,
      1517427067,
      422,
      65,
      0,
      63867,
      7000000000,
      0,
      1,
      6568850,
      25322,
      18084733
    ],
    [
      5007340,
      1517427067,
      119,
      72,
      4000000000000000,
      371670,
      5100000000,
      0,
      1,
      7058184,
      252181,
      18084733
    ],
    [
      5007358,
      1517427363,
      120,
      159,
      8000000000000000,
      276801,
      5100000000,
      0,
      1,
      7100800,
      183615,
      18084715
    ],
    [
      5007358,
      1517427363,
      124,
      160,
      4000000000000000,
      371892,
      5100000000,
      0,
      1,
      7351933,
      251133,
      18084715
    ],
    [
      5007360,
      1517427378,
      121,
      104,
      4000000000000000,
      379086,
      5100000000,
      0,
      1,
      5350958,
      248791,
      18084713
    ],
    [
      5007362,
      1517427395,
      2029,
      59,
      8000000000000000,
      283665,
      5100000000,
      0,
      1,
      7484403,
      181766,
      18084711
    ],
    [
      5007364,
      1517427414,
      732,
      138,
      8000000000000000,
      483246,
      5100000000,
      0,
      1,
      4019124,
      320433,
      18084709
    ],
    [
      5007369,
      1517427522,
      4031,
      240,
      4000000000000000,
      350000,
      15100000000,
      0,
      1,
      5848277,
      249835,
      18084704
    ],
    [
      5007371,
      1517427539,
      423,
      91,
      4000000000000000,
      397252,
      7000000000,
      0,
      1,
      4436815,
      262976,
      18084702
    ],
    [
      5007371,
      1517427539,
      733,
      100,
      8000000000000000,
      287224,
      5100000000,
      0,
      1,
      5160010,
      191186,
      18084702
    ],
    [
      5007371,
      1517427539,
      122,
      101,
      4000000000000000,
      373549,
      5100000000,
      0,
      1,
      5407978,
      247968,
      18084702
    ],
    [
      5007371,
      1517427539,
      125,
      103,
      4000000000000000,
      376807,
      5100000000,
      0,
      1,
      5686355,
      247960,
      18084702
    ],
    [
      5007374,
      1517427577,
      327,
      118,
      8000000000000000,
      484107,
      10000000000,
      0,
      1,
      4686044,
      321681,
      18084699
    ],
    [
      5007375,
      1517427595,
      126,
      94,
      4000000000000000,
      373074,
      5100000000,
      0,
      1,
      7711038,
      248771,
      18084698
    ],
    [
      5007377,
      1517427646,
      4032,
      134,
      4000000000000000,
      350000,
      15100000000,
      0,
      1,
      5211153,
      250611,
      18084696
    ],
    [
      5007377,
      1517427646,
      734,
      165,
      8000000000000000,
      274537,
      5100000000,
      0,
      1,
      7136383,
      195863,
      18084696
    ],
    [
      5007377,
      1517427646,
      123,
      166,
      4000000000000000,
      374769,
      5100000000,
      0,
      1,
      7386986,
      250603,
      18084696
    ],
    [
      5007381,
      1517427672,
      127,
      65,
      4000000000000000,
      373156,
      5100000000,
      0,
      1,
      7448039,
      247294,
      18084692
    ],
    [
      5007382,
      1517427696,
      1599,
      127,
      8000000000000000,
      479514,
      5100000000,
      0,
      1,
      5653650,
      321330,
      18084691
    ],
    [
      5007385,
      1517427722,
      124,
      102,
      4000000000000000,
      374553,
      5100000000,
      0,
      1,
      7779048,
      249941,
      18084688
    ],
    [
      5007387,
      1517427730,
      2030,
      89,
      8000000000000000,
      277188,
      5100000000,
      0,
      1,
      7090540,
      182334,
      18084686
    ],
    [
      5007390,
      1517427772,
      4033,
      227,
      4000000000000000,
      350000,
      15100000000,
      0,
      1,
      6514636,
      251959,
      18084683
    ],
    [
      5007392,
      1517427804,
      128,
      31,
      4000000000000000,
      374541,
      5100000000,
      0,
      1,
      6584357,
      249956,
      18084681
    ],
    [
      5007392,
      1517427804,
      125,
      32,
      4000000000000000,
      373936,
      5100000000,
      0,
      1,
      6834321,
      249964,
      18084681
    ],
    [
      5007393,
      1517427818,
      129,
      75,
      4000000000000000,
      373924,
      5100000000,
      0,
      1,
      3765882,
      253721,
      18084680
    ],
    [
      5007394,
      1517427850,
      424,
      152,
      4000000000000000,
      376045,
      7000000000,
      0,
      1,
      5944752,
      251571,
      18084679
    ],
    [
      5007395,
      1517427857,
      130,
      44,
      4000000000000000,
      374934,
      5100000000,
      0,
      1,
      5845325,
      249601,
      18084678
    ],
    [
      5007396,
      1517427891,
      126,
      148,
      4000000000000000,
      374946,
      5100000000,
      0,
      1,
      5487436,
      250173,
      18084677
    ],
    [
      5007396,
      1517427891,
      1600,
      149,
      8000000000000000,
      284751,
      5100000000,
      0,
      1,
      5678350,
      190914,
      18084677
    ],
    [
      5007396,
      1517427891,
      131,
      150,
      4000000000000000,
      377332,
      5100000000,
      0,
      1,
      5928515,
      250165,
      18084677
    ],
    [
      5007402,
      1517427934,
      1601,
      38,
      8000000000000000,
      288273,
      5100000000,
      0,
      1,
      6484622,
      184608,
      18084671
    ],
    [
      5007404,
      1517427971,
      127,
      157,
      4000000000000000,
      377229,
      5100000000,
      0,
      1,
      6065605,
      253795,
      18084669
    ],
    [
      5007404,
      1517427971,
      132,
      158,
      4000000000000000,
      375247,
      5100000000,
      0,
      1,
      6319392,
      253787,
      18084669
    ],
    [
      5007416,
      1517428146,
      4034,
      89,
      4000000000000000,
      350000,
      15100000000,
      0,
      1,
      4431276,
      250876,
      18084657
    ],
    [
      5007421,
      1517428219,
      425,
      136,
      4000000000000000,
      373731,
      7000000000,
      0,
      1,
      7137307,
      249581,
      18084652
    ],
    [
      5007423,
      1517428233,
      5742,
      177,
      8000000000000000,
      480817,
      5100000000,
      0,
      1,
      6091329,
      324581,
      18084650
    ],
    [
      5007423,
      1517428233,
      2031,
      178,
      8000000000000000,
      273649,
      5100000000,
      0,
      1,
      6272406,
      181077,
      18084650
    ],
    [
      5007423,
      1517428233,
      1602,
      179,
      8000000000000000,
      286497,
      5100000000,
      0,
      1,
      6461372,
      188966,
      18084650
    ],
    [
      5007423,
      1517428233,
      128,
      180,
      4000000000000000,
      374641,
      5100000000,
      0,
      1,
      6711068,
      249696,
      18084650
    ],
    [
      5007423,
      1517428233,
      735,
      181,
      8000000000000000,
      274083,
      5100000000,
      0,
      1,
      6901603,
      190535,
      18084650
    ],
    [
      5007423,
      1517428233,
      133,
      182,
      4000000000000000,
      373707,
      5100000000,
      0,
      1,
      7151291,
      249688,
      18084650
    ],
    [
      5007426,
      1517428264,
      134,
      189,
      4000000000000000,
      375312,
      5100000000,
      0,
      1,
      6392988,
      246909,
      18084647
    ],
    [
      5007428,
      1517428287,
      2032,
      77,
      8000000000000000,
      276837,
      5100000000,
      0,
      1,
      7470280,
      192099,
      18084645
    ],
    [
      5007428,
      1517428287,
      1603,
      78,
      8000000000000000,
      275452,
      5100000000,
      0,
      1,
      7650864,
      180584,
      18084645
    ],
    [
      5007432,
      1517428314,
      129,
      8,
      4000000000000000,
      370375,
      5100000000,
      0,
      1,
      631265,
      251349,
      18084641
    ],
    [
      5007436,
      1517428371,
      4035,
      174,
      4000000000000000,
      372684,
      15100000000,
      0,
      1,
      4783347,
      249607,
      18084637
    ],
    [
      5007436,
      1517428371,
      426,
      181,
      4000000000000000,
      372684,
      9000000000,
      0,
      1,
      5248559,
      249607,
      18084637
    ],
    [
      5007436,
      1517428371,
      130,
      197,
      4000000000000000,
      377514,
      5100000000,
      0,
      1,
      7405321,
      249599,
      18084637
    ],
    [
      5007438,
      1517428408,
      736,
      138,
      4000000000000000,
      395160,
      5100000000,
      0,
      1,
      6254921,
      265551,
      18084635
    ],
    [
      5007448,
      1517428614,
      1604,
      267,
      8000000000000000,
      273973,
      5100000000,
      0,
      1,
      7844847,
      181629,
      18084625
    ],
    [
      5007449,
      1517428618,
      131,
      71,
      4000000000000000,
      375838,
      5100000000,
      0,
      1,
      7339802,
      249341,
      18084624
    ],
    [
      5007449,
      1517428618,
      135,
      72,
      4000000000000000,
      376231,
      5100000000,
      0,
      1,
      7589135,
      249333,
      18084624
    ],
    [
      5007449,
      1517428618,
      737,
      73,
      8000000000000000,
      270501,
      5100000000,
      0,
      1,
      7772350,
      183215,
      18084624
    ],
    [
      5007455,
      1517428785,
      132,
      126,
      4000000000000000,
      374217,
      5100000000,
      0,
      1,
      5200475,
      249660,
      18084618
    ],
    [
      5007455,
      1517428785,
      136,
      127,
      4000000000000000,
      374205,
      5100000000,
      0,
      1,
      5450127,
      249652,
      18084618
    ],
    [
      5007459,
      1517428826,
      427,
      229,
      4000000000000000,
      377662,
      6000000000,
      0,
      1,
      7705080,
      246620,
      18084614
    ],
    [
      5007470,
      1517428991,
      308,
      124,
      8000000000000000,
      485935,
      6000000000,
      0,
      1,
      6356923,
      324083,
      18084603
    ],
    [
      5007470,
      1517428991,
      133,
      132,
      4000000000000000,
      375331,
      5100000000,
      0,
      1,
      7453699,
      250924,
      18084603
    ],
    [
      5007470,
      1517428991,
      137,
      133,
      4000000000000000,
      372603,
      5100000000,
      0,
      1,
      7704615,
      250916,
      18084603
    ],
    [
      5007488,
      1517429245,
      307,
      143,
      8000000000000000,
      484617,
      6000000000,
      0,
      1,
      7230295,
      321956,
      18084585
    ],
    [
      5007488,
      1517429245,
      428,
      147,
      0,
      63867,
      6000000000,
      0,
      1,
      7786391,
      25322,
      18084585
    ],
    [
      5007489,
      1517429251,
      738,
      118,
      4000000000000000,
      377638,
      5100000000,
      0,
      1,
      4974127,
      248942,
      18084584
    ],
    [
      5007489,
      1517429251,
      134,
      119,
      4000000000000000,
      373005,
      5100000000,
      0,
      1,
      5223077,
      248950,
      18084584
    ],
    [
      5007489,
      1517429251,
      138,
      120,
      4000000000000000,
      372993,
      5100000000,
      0,
      1,
      5472019,
      248942,
      18084584
    ],
    [
      5007494,
      1517429337,
      139,
      89,
      4000000000000000,
      373413,
      5100000000,
      0,
      1,
      5675681,
      249257,
      18084579
    ],
    [
      5007500,
      1517429410,
      739,
      82,
      8000000000000000,
      273706,
      10100000000,
      0,
      1,
      5374689,
      181300,
      18084573
    ],
    [
      5007505,
      1517429512,
      4036,
      217,
      4000000000000000,
      372196,
      16100000000,
      0,
      1,
      7237479,
      249078,
      18084568
    ],
    [
      5007572,
      1517430620,
      4037,
      198,
      0,
      63867,
      16100000000,
      0,
      1,
      7592098,
      25322,
      18084501
    ],
    [
      5007599,
      1517431120,
      347,
      166,
      4000000000000000,
      374580,
      20000000000,
      0,
      1,
      5720344,
      252678,
      18084474
    ],
    [
      5007604,
      1517431192,
      740,
      158,
      4000000000000000,
      374947,
      9810000000,
      0,
      1,
      7759734,
      253367,
      18084469
    ],
    [
      5007624,
      1517431534,
      348,
      35,
      4000000000000000,
      372136,
      22100000000,
      0,
      1,
      6804877,
      251379,
      18084449
    ],
    [
      5007640,
      1517431854,
      349,
      170,
      8000000000000000,
      271963,
      20000000000,
      0,
      1,
      6553083,
      184528,
      18084433
    ],
    [
      5007645,
      1517431876,
      445,
      52,
      8000000000000000,
      484617,
      6100000000,
      0,
      1,
      3400419,
      325604,
      18084428
    ],
    [
      5007655,
      1517432001,
      4039,
      88,
      4000000000000000,
      302325,
      25000000000,
      0,
      1,
      2691517,
      267663,
      18084418
    ],
    [
      5007656,
      1517432008,
      350,
      44,
      8000000000000000,
      272719,
      19000000000,
      0,
      1,
      2660747,
      179760,
      18084417
    ],
    [
      5007659,
      1517432049,
      741,
      104,
      4000000000000000,
      376335,
      7100000000,
      0,
      1,
      5368499,
      251888,
      18084414
    ],
    [
      5007659,
      1517432049,
      135,
      110,
      4000000000000000,
      373425,
      7000000000,
      0,
      1,
      5960696,
      251896,
      18084414
    ],
    [
      5007662,
      1517432081,
      136,
      80,
      8000000000000000,
      275361,
      6100000000,
      0,
      1,
      4348756,
      182344,
      18084411
    ],
    [
      5007662,
      1517432081,
      252,
      81,
      8000000000000000,
      484617,
      6100000000,
      0,
      1,
      4675056,
      326300,
      18084411
    ],
    [
      5007662,
      1517432081,
      1,
      82,
      8000000000000000,
      484830,
      6100000000,
      0,
      1,
      5001356,
      326300,
      18084411
    ],
    [
      5007663,
      1517432110,
      351,
      109,
      8000000000000000,
      272119,
      23100000000,
      0,
      1,
      5633629,
      184445,
      18084410
    ],
    [
      5007666,
      1517432131,
      137,
      96,
      0,
      63867,
      7000000000,
      0,
      1,
      5684263,
      25322,
      18084407
    ],
    [
      5007666,
      1517432131,
      108,
      99,
      8000000000000000,
      479722,
      6100000000,
      0,
      1,
      7697015,
      322738,
      18084407
    ],
    [
      5007673,
      1517432220,
      352,
      196,
      8000000000000000,
      276472,
      20000000000,
      0,
      1,
      7117366,
      181350,
      18084400
    ],
    [
      5007681,
      1517432325,
      353,
      106,
      8000000000000000,
      273582,
      10100000000,
      0,
      1,
      6187212,
      182748,
      18084392
    ],
    [
      5007686,
      1517432377,
      93,
      38,
      8000000000000000,
      484534,
      6100000000,
      0,
      1,
      7645983,
      321151,
      18084387
    ],
    [
      5007689,
      1517432422,
      632,
      23,
      8000000000000000,
      481516,
      6100000000,
      0,
      1,
      2075265,
      323718,
      18084384
    ],
    [
      5007689,
      1517432422,
      674,
      24,
      8000000000000000,
      482338,
      6100000000,
      0,
      1,
      2398983,
      323718,
      18084384
    ],
    [
      5007689,
      1517432422,
      395,
      25,
      8000000000000000,
      484830,
      6100000000,
      0,
      1,
      2722701,
      323718,
      18084384
    ],
    [
      5007689,
      1517432422,
      404,
      26,
      8000000000000000,
      485943,
      6100000000,
      0,
      1,
      3046419,
      323718,
      18084384
    ],
    [
      5007689,
      1517432422,
      352,
      27,
      8000000000000000,
      486058,
      6100000000,
      0,
      1,
      3370137,
      323718,
      18084384
    ],
    [
      5007696,
      1517432654,
      4040,
      104,
      4000000000000000,
      371341,
      55000000000,
      0,
      1,
      4327952,
      248980,
      18084377
    ],
    [
      5007703,
      1517432778,
      4041,
      72,
      4000000000000000,
      373594,
      55000000000,
      0,
      1,
      1986611,
      250220,
      18084370
    ],
    [
      5007706,
      1517432868,
      4042,
      50,
      0,
      63867,
      55000000000,
      0,
      1,
      1739161,
      25322,
      18084367
    ],
    [
      5007729,
      1517433272,
      306,
      73,
      8000000000000000,
      272430,
      10100000000,
      0,
      1,
      4839210,
      185065,
      18084344
    ],
    [
      5007729,
      1517433272,
      354,
      76,
      8000000000000000,
      269860,
      10100000000,
      0,
      1,
      5139845,
      183150,
      18084344
    ],
    [
      5007731,
      1517433279,
      307,
      165,
      8000000000000000,
      285358,
      10100000000,
      0,
      1,
      5184606,
      192899,
      18084342
    ],
    [
      5007735,
      1517433316,
      308,
      58,
      8000000000000000,
      274525,
      14100000000,
      0,
      1,
      3214113,
      185291,
      18084338
    ],
    [
      5007740,
      1517433401,
      4043,
      47,
      4000000000000000,
      396090,
      35000000000,
      0,
      1,
      2191853,
      264937,
      18084333
    ],
    [
      5007743,
      1517433437,
      355,
      113,
      8000000000000000,
      284173,
      17100000000,
      0,
      1,
      3649514,
      183728,
      18084330
    ],
    [
      5007749,
      1517433562,
      4044,
      125,
      4000000000000000,
      374056,
      25000000000,
      0,
      1,
      7780768,
      250460,
      18084324
    ],
    [
      5007754,
      1517433625,
      356,
      63,
      8000000000000000,
      276126,
      21000000000,
      0,
      1,
      5923799,
      182701,
      18084319
    ],
    [
      5007762,
      1517433730,
      357,
      236,
      8000000000000000,
      274489,
      22000000000,
      0,
      1,
      7852444,
      182189,
      18084311
    ],
    [
      5007770,
      1517433791,
      309,
      186,
      0,
      320000,
      12100000000,
      0,
      1,
      6334167,
      25322,
      18084303
    ],
    [
      5007772,
      1517433818,
      2,
      97,
      8000000000000000,
      484830,
      6100000000,
      0,
      1,
      6244715,
      322729,
      18084301
    ],
    [
      5007772,
      1517433818,
      3,
      104,
      8000000000000000,
      489201,
      5100000000,
      0,
      1,
      6879406,
      322729,
      18084301
    ],
    [
      5007774,
      1517433839,
      358,
      55,
      0,
      63867,
      25000000000,
      0,
      1,
      2612322,
      25322,
      18084299
    ],
    [
      5007777,
      1517433864,
      882,
      30,
      8000000000000000,
      480148,
      6100000000,
      0,
      1,
      3109080,
      323885,
      18084296
    ],
    [
      5007783,
      1517433951,
      140,
      32,
      4000000000000000,
      373885,
      5100000000,
      1,
      0,
      3671961,
      29939,
      18084290
    ],
    [
      5007784,
      1517433963,
      359,
      114,
      8000000000000000,
      273496,
      18000000000,
      0,
      1,
      4643872,
      191281,
      18084289
    ],
    [
      5007789,
      1517434071,
      360,
      142,
      8000000000000000,
      273105,
      18000000000,
      0,
      1,
      6368307,
      191726,
      18084284
    ],
    [
      5007790,
      1517434079,
      141,
      140,
      4000000000000000,
      374947,
      6100000000,
      1,
      0,
      6571958,
      29939,
      18084283
    ],
    [
      5007791,
      1517434105,
      4047,
      17,
      4000000000000000,
      350000,
      52100000000,
      1,
      0,
      1163434,
      29939,
      18084282
    ],
    [
      5007801,
      1517434315,
      4048,
      191,
      4000000000000000,
      350000,
      32100000000,
      1,
      0,
      7440446,
      29939,
      18084272
    ],
    [
      5007809,
      1517434472,
      361,
      158,
      8000000000000000,
      274563,
      16000000000,
      0,
      1,
      5726439,
      182313,
      18084264
    ],
    [
      5007809,
      1517434472,
      1712,
      184,
      100000000000000000,
      299992,
      12100000000,
      1,
      0,
      7327879,
      21046,
      18084264
    ],
    [
      5007809,
      1517434472,
      310,
      185,
      8000000000000000,
      272784,
      12100000000,
      0,
      1,
      7511501,
      183622,
      18084264
    ],
    [
      5007813,
      1517434554,
      4049,
      53,
      4000000000000000,
      400000,
      50100000000,
      1,
      0,
      1911987,
      29939,
      18084260
    ],
    [
      5007825,
      1517434744,
      4050,
      63,
      0,
      70000,
      32100000000,
      0,
      1,
      3122515,
      25322,
      18084248
    ],
    [
      5007828,
      1517434785,
      311,
      41,
      8000000000000000,
      284653,
      12100000000,
      0,
      1,
      3880239,
      191166,
      18084245
    ],
    [
      5007828,
      1517434785,
      362,
      42,
      8000000000000000,
      285589,
      12100000000,
      0,
      1,
      4071787,
      191548,
      18084245
    ],
    [
      5007835,
      1517434891,
      312,
      176,
      8000000000000000,
      271329,
      12100000000,
      0,
      1,
      6275178,
      182549,
      18084238
    ],
    [
      5007840,
      1517434950,
      313,
      95,
      8000000000000000,
      274317,
      25100000000,
      0,
      1,
      4890078,
      183670,
      18084233
    ],
    [
      5007846,
      1517435005,
      314,
      37,
      8000000000000000,
      274914,
      25100000000,
      0,
      1,
      1997548,
      181344,
      18084227
    ],
    [
      5007851,
      1517435097,
      142,
      103,
      4000000000000000,
      375880,
      6100000000,
      1,
      0,
      5466258,
      29939,
      18084222
    ],
    [
      5007851,
      1517435097,
      48,
      112,
      300000000000000000,
      336626,
      5400000000,
      0,
      1,
      6350639,
      336309,
      18084222
    ],
    [
      5007854,
      1517435121,
      143,
      76,
      4000000000000000,
      376014,
      23100000000,
      1,
      0,
      2178155,
      29939,
      18084219
    ],
    [
      5007855,
      1517435132,
      315,
      54,
      8000000000000000,
      274132,
      12100000000,
      0,
      1,
      2545062,
      184482,
      18084218
    ],
    [
      5007856,
      1517435145,
      144,
      27,
      4000000000000000,
      374293,
      25410000000,
      1,
      0,
      1492999,
      29939,
      18084217
    ],
    [
      5007858,
      1517435211,
      145,
      120,
      0,
      63867,
      25100000000,
      0,
      1,
      5531987,
      25322,
      18084215
    ],
    [
      5007886,
      1517435700,
      429,
      97,
      8000000000000000,
      276160,
      10000000000,
      0,
      1,
      5404962,
      180616,
      18084187
    ],
    [
      5007941,
      1517436568,
      432,
      65,
      8000000000000000,
      274866,
      5000000000,
      0,
      1,
      7642633,
      182652,
      18084132
    ],
    [
      5007993,
      1517437310,
      434,
      116,
      8000000000000000,
      273030,
      12100000000,
      0,
      1,
      6992520,
      181278,
      18084080
    ],
    [
      5008025,
      1517437780,
      742,
      68,
      4000000000000000,
      200000,
      16100000000,
      1,
      0,
      3574433,
      29939,
      18084048
    ],
    [
      5008027,
      1517437818,
      743,
      176,
      0,
      63867,
      5100000000,
      0,
      1,
      6859232,
      25322,
      18084046
    ],
    [
      5008194,
      1517440244,
      69,
      65,
      8000000000000000,
      283201,
      4000000000,
      0,
      1,
      5932319,
      184337,
      18083879
    ],
    [
      5008259,
      1517441079,
      2033,
      91,
      4000000000000000,
      376443,
      2100000000,
      1,
      0,
      5029361,
      29939,
      18083814
    ],
    [
      5008274,
      1517441265,
      2034,
      124,
      4000000000000000,
      376443,
      2100000000,
      1,
      0,
      5472677,
      29939,
      18083799
    ],
    [
      5008329,
      1517442030,
      71,
      70,
      8000000000000000,
      275953,
      4000000000,
      0,
      1,
      4263021,
      191480,
      18083744
    ],
    [
      5008855,
      1517449611,
      2265,
      68,
      8000000000000000,
      272853,
      4000000000,
      0,
      1,
      4149908,
      183923,
      18083218
    ],
    [
      5008876,
      1517449855,
      2266,
      177,
      8000000000000000,
      288357,
      5000000000,
      0,
      1,
      7376648,
      180933,
      18083197
    ],
    [
      5009001,
      1517451651,
      10,
      51,
      0,
      63867,
      5100000000,
      0,
      1,
      2130583,
      25322,
      18083072
    ],
    [
      5009002,
      1517451652,
      11,
      12,
      4000000000000000,
      376462,
      5100000000,
      1,
      0,
      484856,
      29939,
      18083071
    ],
    [
      5009067,
      1517452691,
      1626,
      62,
      8000000000000000,
      273592,
      2100000000,
      0,
      1,
      2791862,
      180443,
      18083006
    ],
    [
      5009067,
      1517452691,
      17,
      63,
      8000000000000000,
      285750,
      2100000000,
      0,
      1,
      2973993,
      182131,
      18083006
    ],
    [
      5009071,
      1517452770,
      1629,
      58,
      8000000000000000,
      273805,
      5100000000,
      0,
      1,
      2568024,
      183772,
      18083002
    ],
    [
      5009074,
      1517452808,
      18,
      160,
      8000000000000000,
      275065,
      2100000000,
      0,
      1,
      5603619,
      182526,
      18082999
    ],
    [
      5009080,
      1517452918,
      1630,
      163,
      8000000000000000,
      276493,
      2100000000,
      0,
      1,
      6499997,
      183274,
      18082993
    ],
    [
      5009080,
      1517452918,
      19,
      164,
      8000000000000000,
      285280,
      2100000000,
      0,
      1,
      6685071,
      185074,
      18082993
    ],
    [
      5009094,
      1517453144,
      1631,
      187,
      8000000000000000,
      270781,
      2100000000,
      0,
      1,
      7866937,
      185490,
      18082979
    ],
    [
      5009095,
      1517453158,
      20,
      147,
      8000000000000000,
      276867,
      2100000000,
      0,
      1,
      6962472,
      184645,
      18082978
    ],
    [
      5009096,
      1517453170,
      21,
      87,
      8000000000000000,
      276867,
      2100000000,
      0,
      1,
      5138025,
      182781,
      18082977
    ],
    [
      5009142,
      1517453712,
      0,
      206,
      8000000000000000,
      484476,
      2100000000,
      0,
      1,
      7346100,
      318967,
      18082931
    ],
    [
      5009153,
      1517453865,
      1,
      104,
      8000000000000000,
      285159,
      2100000000,
      0,
      1,
      5293013,
      195321,
      18082920
    ],
    [
      5009246,
      1517455153,
      1632,
      64,
      8000000000000000,
      274135,
      2100000000,
      0,
      1,
      3210079,
      182416,
      18082827
    ],
    [
      5009258,
      1517455283,
      1633,
      61,
      8000000000000000,
      272551,
      2100000000,
      0,
      1,
      2284842,
      180244,
      18082815
    ],
    [
      5009266,
      1517455425,
      1634,
      123,
      8000000000000000,
      273160,
      2100000000,
      0,
      1,
      5283424,
      183111,
      18082807
    ],
    [
      5009282,
      1517455590,
      1636,
      67,
      8000000000000000,
      272805,
      2100000000,
      0,
      1,
      4098575,
      181222,
      18082791
    ],
    [
      5009291,
      1517455714,
      2267,
      210,
      8000000000000000,
      276544,
      4000000000,
      0,
      1,
      7680119,
      190582,
      18082782
    ],
    [
      5009294,
      1517455760,
      1637,
      166,
      8000000000000000,
      271810,
      2100000000,
      0,
      1,
      7384772,
      181878,
      18082779
    ],
    [
      5009326,
      1517456174,
      54,
      179,
      0,
      63867,
      2100000000,
      0,
      1,
      6947906,
      25322,
      18082747
    ],
    [
      5009334,
      1517456373,
      55,
      151,
      0,
      63867,
      2100000000,
      1,
      0,
      7870674,
      21959,
      18082739
    ],
    [
      5009345,
      1517456452,
      2268,
      112,
      8000000000000000,
      276544,
      7000000000,
      0,
      1,
      5598004,
      184666,
      18082728
    ],
    [
      5009778,
      1517462637,
      4088,
      33,
      4000000000000000,
      350000,
      5100000000,
      1,
      0,
      3098984,
      38308,
      18082295
    ],
    [
      5010393,
      1517471541,
      2282,
      128,
      0,
      63867,
      3000000000,
      0,
      1,
      5166515,
      25322,
      18081680
    ],
    [
      5218816,
      1520516915,
      2621,
      63,
      0,
      40797,
      5100000000,
      0,
      1,
      2434612,
      13599,
      17873257
    ],
    [
      5006602,
      1517416413,
      0,
      0,
      92928096600064000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5006670,
      1517417381,
      0,
      0,
      131716085453307622,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5006673,
      1517417433,
      0,
      0,
      62643240960000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5006695,
      1517417698,
      0,
      0,
      59717749605615333,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5006783,
      1517418701,
      0,
      0,
      90395110586563207,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5006871,
      1517419830,
      0,
      0,
      137696025457434962,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5006934,
      1517420680,
      0,
      0,
      94635129155293254,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5006945,
      1517420878,
      0,
      0,
      104946237440303473,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5006976,
      1517421338,
      0,
      0,
      37357529133103985,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5006996,
      1517421536,
      0,
      0,
      40690135171231974,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5007047,
      1517422334,
      0,
      0,
      142637706169556811,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5007125,
      1517423644,
      0,
      0,
      243967826304999950,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5007261,
      1517425810,
      0,
      0,
      208313274281795822,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5007297,
      1517426462,
      0,
      0,
      104986299229488293,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5007340,
      1517427067,
      0,
      0,
      30680455220160277,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5007488,
      1517429245,
      0,
      0,
      40019465537191191,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5007572,
      1517430620,
      0,
      0,
      237001112380497019,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5007666,
      1517432131,
      0,
      0,
      194033538702635972,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5007706,
      1517432868,
      0,
      0,
      117604234317945378,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5007770,
      1517433791,
      0,
      0,
      128965440478490796,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5007774,
      1517433839,
      0,
      0,
      125820271419299567,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5007825,
      1517434744,
      0,
      0,
      52298961198673566,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5007858,
      1517435211,
      0,
      0,
      182218866822104911,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5008027,
      1517437818,
      0,
      0,
      42442987052784145,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5009001,
      1517451651,
      0,
      0,
      10801192729212614,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5009326,
      1517456174,
      0,
      0,
      259602850790656204,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5010393,
      1517471541,
      0,
      0,
      30690432995700369,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5218816,
      1520516915,
      0,
      0,
      91189744805889305,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.19;\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title EjectableOwnable\n * @dev The EjectableOwnable contract provides the function to remove the ownership of the contract.\n */\ncontract EjectableOwnable is Ownable {\n\n    /**\n     * @dev Remove the ownership by setting the owner address to null,\n     * after calling this function, all onlyOwner function will be be able to be called by anyone anymore,\n     * the contract will achieve truly decentralisation.\n    */\n    function removeOwnership() onlyOwner public {\n        owner = 0x0;\n    }\n\n}\n\n/**\n * @title JointOwnable\n * @dev Extension for the Ownable contract, where the owner can assign another address\n *  to manage some functions of the contract, using the eitherOwner modifier.\n *  Note that onlyOwner modifier would still be accessible only for the original owner.\n */\ncontract JointOwnable is Ownable {\n\n  event AnotherOwnerAssigned(address indexed anotherOwner);\n\n  address public anotherOwner;\n\n  /**\n   * @dev Throws if called by any account other than the owner or anotherOwner.\n   */\n  modifier eitherOwner() {\n    require(msg.sender == owner || msg.sender == anotherOwner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to assign another owner.\n   * @param _anotherOwner The address to another owner.\n   */\n  function assignAnotherOwner(address _anotherOwner) onlyOwner public {\n    require(_anotherOwner != 0);\n    AnotherOwnerAssigned(_anotherOwner);\n    anotherOwner = _anotherOwner;\n  }\n\n}\n\n/**\n * @title Destructible\n * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.\n */\ncontract Destructible is Ownable {\n\n  function Destructible() public payable { }\n\n  /**\n   * @dev Transfers the current balance to the owner and terminates the contract.\n   */\n  function destroy() onlyOwner public {\n    selfdestruct(owner);\n  }\n\n  function destroyAndSend(address _recipient) onlyOwner public {\n    selfdestruct(_recipient);\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n}\n\n/**\n * @title PullPayment\n * @dev Base contract supporting async send for pull payments. Inherit from this\n * contract and use asyncSend instead of send.\n */\ncontract PullPayment {\n\n  using SafeMath for uint256;\n\n  mapping(address => uint256) public payments;\n  uint256 public totalPayments;\n\n  /**\n   * @dev withdraw accumulated balance, called by payee.\n   */\n  function withdrawPayments() public {\n    address payee = msg.sender;\n    uint256 payment = payments[payee];\n\n    require(payment != 0);\n    require(this.balance >= payment);\n\n    totalPayments = totalPayments.sub(payment);\n    payments[payee] = 0;\n\n    assert(payee.send(payment));\n  }\n\n  /**\n   * @dev Called by the payer to store the sent amount as credit to be pulled.\n   * @param dest The destination address of the funds.\n   * @param amount The amount to transfer.\n   */\n  function asyncSend(address dest, uint256 amount) internal {\n    payments[dest] = payments[dest].add(amount);\n    totalPayments = totalPayments.add(amount);\n  }\n\n}\n\ncontract DungeonStructs {\n\n    /**\n     * @dev The main Dungeon struct. Every dungeon in the game is represented by this structure.\n     * A dungeon is consists of an unlimited number of floors for your heroes to challenge,\n     * the power level of a dungeon is encoded in the floorGenes. Some dungeons are in fact more \"challenging\" than others,\n     * the secret formula for that is left for user to find out.\n     *\n     * Each dungeon also has a \"training area\", heroes can perform trainings and upgrade their stat,\n     * and some dungeons are more effective in the training, which is also a secret formula!\n     *\n     * When player challenge or do training in a dungeon, the fee will be collected as the dungeon rewards,\n     * which will be rewarded to the player who successfully challenged the current floor.\n     *\n     * Each dungeon fits in fits into three 256-bit words.\n     */\n    struct Dungeon {\n\n        // The timestamp from the block when this dungeon is created.\n        uint32 creationTime;\n\n        // The status of the dungeon, each dungeon can have 4 status, namely:\n        // 0: Active | 1: Challenge Only | 2: Train Only | 3: InActive\n        uint16 status;\n\n        // The dungeon's difficulty, the higher the difficulty,\n        // normally, the \"rarer\" the seedGenes, the higher the diffculty,\n        // and the higher the contribution fee it is to challenge and train with the dungeon,\n        // the formula for the contribution fee is in DungeonChallenge and DungeonTraining contracts.\n        // A dungeon's difficulty never change.\n        uint16 difficulty;\n\n        // The current floor number, a dungeon is consists of an umlimited number of floors,\n        // when there is heroes successfully challenged a floor, the next floor will be\n        // automatically generated. 32-bit unsigned integers can have 4 billion floors.\n        uint32 floorNumber;\n\n        // The timestamp from the block when the current floor is generated.\n        uint32 floorCreationTime;\n\n        // Current accumulated rewards, successful challenger will get a large proportion of it.\n        uint128 rewards;\n\n        // The seed genes of the dungeon, it is used as the base gene for first floor,\n        // some dungeons are rarer and some are more common, the exact details are,\n        // of course, top secret of the game!\n        // A dungeon's seedGenes never change.\n        uint seedGenes;\n\n        // The genes for current floor, it encodes the difficulty level of the current floor.\n        // We considered whether to store the entire array of genes for all floors, but\n        // in order to save some precious gas we're willing to sacrifice some functionalities with that.\n        uint floorGenes;\n\n    }\n\n    /**\n     * @dev The main Hero struct. Every hero in the game is represented by this structure.\n     */\n    struct Hero {\n\n        // The timestamp from the block when this dungeon is created.\n        uint64 creationTime;\n\n        // The seed of the hero, the gene encodes the power level of the hero.\n        // This is another top secret of the game! Hero's gene can be upgraded via\n        // training in a dungeon.\n        uint genes;\n\n    }\n\n}\n\n/**\n * @title A simplified interface of ERC-721, but without approval functions\n */\ncontract ERC721 {\n\n    // Events\n    event Transfer(address indexed from, address indexed to, uint tokenId);\n\n    // ERC20 compatible functions\n    // function name() public view returns (string);\n    // function symbol() public view returns (string);\n    function totalSupply() public view returns (uint);\n    function balanceOf(address _owner) public view returns (uint);\n\n    // Functions that define ownership\n    function ownerOf(uint _tokenId) external view returns (address);\n    function transfer(address _to, uint _tokenId) external;\n\n}\n\n/**\n * @title The ERC-721 compliance token contract for the Dungeon tokens.\n * @dev See the DungeonStructs contract to see the details of the Dungeon token data structure.\n */\ncontract DungeonToken is ERC721, DungeonStructs, Pausable, JointOwnable {\n\n    /**\n     * @notice Limits the number of dungeons the contract owner can ever create.\n     */\n    uint public constant DUNGEON_CREATION_LIMIT = 1024;\n\n    /**\n     * @dev The Mint event is fired whenever a new dungeon is created.\n     */\n    event Mint(address indexed owner, uint newTokenId, uint difficulty, uint seedGenes);\n\n    /**\n     * @dev The NewDungeonFloor event is fired whenever a new dungeon floor is added.\n     */\n    event NewDungeonFloor(uint timestamp, uint indexed dungeonId, uint32 newFloorNumber, uint128 newRewards , uint newFloorGenes);\n\n    /**\n     * @dev Transfer event as defined in current draft of ERC721. Emitted every time a token\n     *  ownership (Dungeon Master) is assigned, including token creation.\n     */\n    event Transfer(address indexed from, address indexed to, uint tokenId);\n\n    /**\n     * @dev Name of token.\n     */\n    string public constant name = \"Dungeon\";\n\n    /**\n     * @dev Symbol of token.\n     */\n    string public constant symbol = \"DUNG\";\n\n    /**\n     * @dev An array containing the Dungeon struct, which contains all the dungeons in existance.\n     *  The ID for each dungeon is the index of this array.\n     */\n    Dungeon[] public dungeons;\n\n    /**\n     * @dev A mapping from token IDs to the address that owns them.\n     */\n    mapping(uint => address) tokenIndexToOwner;\n\n    /**\n     * @dev A mapping from owner address to count of tokens that address owns.\n     */\n    mapping(address => uint) ownershipTokenCount;\n\n    /**\n     * Each non-fungible token owner can own more than one token at one time.\n     * Because each token is referenced by its unique ID, however,\n     * it can get difficult to keep track of the individual tokens that a user may own.\n     * To do this, the contract keeps a record of the IDs of each token that each user owns.\n     */\n    mapping(address => uint[]) public ownerTokens;\n\n    /**\n     * @notice Returns the total number of tokens currently in existence.\n     */\n    function totalSupply() public view returns (uint) {\n        return dungeons.length;\n    }\n\n    /**\n     * @notice Returns the number of tokens owned by a specific address.\n     * @param _owner The owner address to check.\n     */\n    function balanceOf(address _owner) public view returns (uint) {\n        return ownershipTokenCount[_owner];\n    }\n\n    /**\n     * @dev Checks if a given address is the current owner of a particular token.\n     * @param _claimant The address we are validating against.\n     * @param _tokenId Token ID\n     */\n    function _owns(address _claimant, uint _tokenId) internal view returns (bool) {\n        return tokenIndexToOwner[_tokenId] == _claimant;\n    }\n\n    /**\n     * @notice Returns the address currently assigned ownership of a given token.\n     */\n    function ownerOf(uint _tokenId) external view returns (address) {\n        require(tokenIndexToOwner[_tokenId] != address(0));\n\n        return tokenIndexToOwner[_tokenId];\n    }\n\n    /**\n     * @dev Assigns ownership of a specific token to an address.\n     */\n    function _transfer(address _from, address _to, uint _tokenId) internal {\n        // Increment the ownershipTokenCount.\n        ownershipTokenCount[_to]++;\n\n        // Transfer ownership.\n        tokenIndexToOwner[_tokenId] = _to;\n\n        // Add the _tokenId to ownerTokens[_to]\n        ownerTokens[_to].push(_tokenId);\n\n        // When creating new token, _from is 0x0, but we can't account that address.\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n\n            // Remove the _tokenId from ownerTokens[_from]\n            uint[] storage fromTokens = ownerTokens[_from];\n            bool iFound = false;\n\n            for (uint i = 0; i < fromTokens.length - 1; i++) {\n                if (iFound) {\n                    fromTokens[i] = fromTokens[i + 1];\n                } else if (fromTokens[i] == _tokenId) {\n                    iFound = true;\n                }\n            }\n        }\n\n        // Emit the Transfer event.\n        Transfer(_from, _to, _tokenId);\n    }\n\n    /**\n     * @notice External function to transfers a token to another address.\n     * @param _to The address of the recipient, can be a user or contract.\n     * @param _tokenId The ID of the token to transfer.\n     */\n    function transfer(address _to, uint _tokenId) whenNotPaused external {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n\n        // Disallow transfers to this contract to prevent accidental misuse.\n        require(_to != address(this));\n\n        // You can only send your own token.\n        require(_owns(msg.sender, _tokenId));\n\n        // Reassign ownership, clear pending approvals, emit Transfer event.\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    /**\n     * @dev The external function that creates a new dungeon and stores it, only contract owners\n     *  can create new token, and will be restricted by the DUNGEON_CREATION_LIMIT.\n     *  Will generate a Mint event, a  NewDungeonFloor event, and a Transfer event.\n     * @param _difficulty The difficulty of the new dungeon.\n     * @param _seedGenes The seed genes of the new dungeon.\n     * @return The dungeon ID of the new dungeon.\n     */\n    function createDungeon(uint _difficulty, uint _seedGenes, address _owner) eitherOwner external returns (uint) {\n        // Ensure the total supply is within the fixed limit.\n        require(totalSupply() < DUNGEON_CREATION_LIMIT);\n\n        // UPDATE STORAGE\n        // Create a new dungeon.\n        dungeons.push(Dungeon(uint32(now), 0, uint16(_difficulty), 0, 0, 0, _seedGenes, 0));\n\n        // Token id is the index in the storage array.\n        uint newTokenId = dungeons.length - 1;\n\n        // Emit the token mint event.\n        Mint(_owner, newTokenId, _difficulty, _seedGenes);\n\n        // Initialize the fist floor with using the seedGenes, this will emit the NewDungeonFloor event.\n        addDungeonNewFloor(newTokenId, 0, _seedGenes);\n\n        // This will assign ownership, and also emit the Transfer event.\n        _transfer(0, _owner, newTokenId);\n\n        return newTokenId;\n    }\n\n    /**\n     * @dev The external function to set dungeon status by its ID,\n     *  refer to DungeonStructs for more information about dungeon status.\n     *  Only contract owners can alter dungeon state.\n     */\n    function setDungeonStatus(uint _id, uint _newStatus) eitherOwner external {\n        require(_id < totalSupply());\n\n        dungeons[_id].status = uint16(_newStatus);\n    }\n\n    /**\n     * @dev The external function to add additional dungeon rewards by its ID,\n     *  only contract owners can alter dungeon state.\n     */\n    function addDungeonRewards(uint _id, uint _additinalRewards) eitherOwner external {\n        require(_id < totalSupply());\n\n        dungeons[_id].rewards += uint64(_additinalRewards);\n    }\n\n    /**\n     * @dev The external function to add another dungeon floor by its ID,\n     *  only contract owners can alter dungeon state.\n     *  Will generate both a NewDungeonFloor event.\n     */\n    function addDungeonNewFloor(uint _id, uint _newRewards, uint _newFloorGenes) eitherOwner public {\n        require(_id < totalSupply());\n\n        Dungeon storage dungeon = dungeons[_id];\n\n        dungeon.floorNumber++;\n        dungeon.floorCreationTime = uint32(now);\n        dungeon.rewards = uint128(_newRewards);\n        dungeon.floorGenes = _newFloorGenes;\n\n        // Emit the NewDungeonFloor event.\n        NewDungeonFloor(now, _id, dungeon.floorNumber, dungeon.rewards, dungeon.floorGenes);\n    }\n\n}\n\n/**\n * @title The ERC-721 compliance token contract for the Hero tokens.\n * @dev See the DungeonStructs contract to see the details of the Hero token data structure.\n */\ncontract HeroToken is ERC721, DungeonStructs, Pausable, JointOwnable {\n\n    /**\n     * @dev The Mint event is fired whenever a new hero is created.\n     */\n    event Mint(address indexed owner, uint newTokenId, uint _genes);\n\n    /**\n     * @dev Transfer event as defined in current draft of ERC721. Emitted every time a token\n     *  ownership is assigned, including token creation.\n     */\n    event Transfer(address indexed from, address indexed to, uint tokenId);\n\n    /**\n     * @dev Name of token.\n     */\n    string public constant name = \"Hero\";\n\n    /**\n     * @dev Symbol of token.\n     */\n    string public constant symbol = \"HERO\";\n\n    /**\n     * @dev An array containing the Hero struct, which contains all the heroes in existance.\n     *  The ID for each hero is the index of this array.\n     */\n    Hero[] public heroes;\n\n    /**\n     * @dev A mapping from token IDs to the address that owns them.\n     */\n    mapping(uint => address) tokenIndexToOwner;\n\n    /**\n     * @dev A mapping from owner address to count of tokens that address owns.\n     */\n    mapping(address => uint) ownershipTokenCount;\n\n    /**\n     * Each non-fungible token owner can own more than one token at one time.\n     * Because each token is referenced by its unique ID, however,\n     * it can get difficult to keep track of the individual tokens that a user may own.\n     * To do this, the contract keeps a record of the IDs of each token that each user owns.\n     */\n    mapping(address => uint[]) public ownerTokens;\n\n    /**\n     * @notice Returns the total number of tokens currently in existence.\n     */\n    function totalSupply() public view returns (uint) {\n        return heroes.length;\n    }\n\n    /**\n     * @notice Returns the number of tokens owned by a specific address.\n     * @param _owner The owner address to check.\n     */\n    function balanceOf(address _owner) public view returns (uint) {\n        return ownershipTokenCount[_owner];\n    }\n\n    /**\n     * @dev Checks if a given address is the current owner of a particular token.\n     * @param _claimant The address we are validating against.\n     * @param _tokenId Token ID\n     */\n    function _owns(address _claimant, uint _tokenId) internal view returns (bool) {\n        return tokenIndexToOwner[_tokenId] == _claimant;\n    }\n\n    /**\n     * @notice Returns the address currently assigned ownership of a given token.\n     */\n    function ownerOf(uint _tokenId) external view returns (address) {\n        require(tokenIndexToOwner[_tokenId] != address(0));\n\n        return tokenIndexToOwner[_tokenId];\n    }\n\n    /**\n     * @dev Assigns ownership of a specific token to an address.\n     */\n    function _transfer(address _from, address _to, uint _tokenId) internal {\n        // Increment the ownershipTokenCount.\n        ownershipTokenCount[_to]++;\n\n        // Transfer ownership.\n        tokenIndexToOwner[_tokenId] = _to;\n\n        // Add the _tokenId to ownerTokens[_to]\n        ownerTokens[_to].push(_tokenId);\n\n        // When creating new token, _from is 0x0, but we can't account that address.\n        if (_from != address(0)) {\n            ownershipTokenCount[_from]--;\n\n            // Remove the _tokenId from ownerTokens[_from]\n            uint[] storage fromTokens = ownerTokens[_from];\n            bool iFound = false;\n\n            for (uint i = 0; i < fromTokens.length - 1; i++) {\n                if (iFound) {\n                    fromTokens[i] = fromTokens[i + 1];\n                } else if (fromTokens[i] == _tokenId) {\n                    iFound = true;\n                }\n            }\n        }\n\n        // Emit the Transfer event.\n        Transfer(_from, _to, _tokenId);\n    }\n\n    /**\n     * @notice External function to transfers a token to another address.\n     * @param _to The address of the recipient, can be a user or contract.\n     * @param _tokenId The ID of the token to transfer.\n     */\n    function transfer(address _to, uint _tokenId) whenNotPaused external {\n        // Safety check to prevent against an unexpected 0x0 default.\n        require(_to != address(0));\n\n        // Disallow transfers to this contract to prevent accidental misuse.\n        require(_to != address(this));\n\n        // You can only send your own token.\n        require(_owns(msg.sender, _tokenId));\n\n        // Reassign ownership, clear pending approvals, emit Transfer event.\n        _transfer(msg.sender, _to, _tokenId);\n    }\n\n    /**\n     * @dev An external function that creates a new hero and stores it,\n     *  only contract owners can create new token.\n     *  method doesn't do any checking and should only be called when the\n     *  input data is known to be valid.\n     * @param _genes The gene of the new hero.\n     * @param _owner The inital owner of this hero.\n     * @return The hero ID of the new hero.\n     */\n    function createHero(uint _genes, address _owner) external returns (uint) {\n        // UPDATE STORAGE\n        // Create a new hero.\n        heroes.push(Hero(uint64(now), _genes));\n\n        // Token id is the index in the storage array.\n        uint newTokenId = heroes.length - 1;\n\n        // Emit the token mint event.\n        Mint(_owner, newTokenId, _genes);\n\n        // This will assign ownership, and also emit the Transfer event.\n        _transfer(0, _owner, newTokenId);\n\n        return newTokenId;\n    }\n\n    /**\n     * @dev The external function to set the hero genes by its ID,\n     *  only contract owners can alter hero state.\n     */\n    function setHeroGenes(uint _id, uint _newGenes) eitherOwner external {\n        require(_id < totalSupply());\n\n        Hero storage hero = heroes[_id];\n\n        hero.genes = _newGenes;\n    }\n\n}\n\n/**\n * SECRET\n */\ncontract ChallengeScienceInterface {\n\n    /**\n     * @dev given genes of current floor and dungeon seed, return a genetic combination - may have a random factor\n     * @param _floorGenes genes of floor\n     * @param _seedGenes seed genes of dungeon\n     * @return the resulting genes\n     */\n    function mixGenes(uint _floorGenes, uint _seedGenes) external pure returns (uint);\n\n}\n\n/**\n * SECRET\n */\ncontract TrainingScienceInterface {\n\n    /**\n     * @dev given genes of hero and current floor, return a genetic combination - may have a random factor\n     * @param _heroGenes genes of hero\n     * @param _floorGenes genes of current floor\n     * @return the resulting genes\n     */\n    function mixGenes(uint _heroGenes, uint _floorGenes) external pure returns (uint);\n\n}\n\n/**\n * @title DungeonBase\n * @dev Base contract for Ether Dungeon. It implements all necessary sub-classes,\n * holds all the base storage variables, and some commonly used functions.\n */\ncontract DungeonBase is EjectableOwnable, Pausable, PullPayment, DungeonStructs {\n\n    /* ======== TOKEN CONTRACTS ======== */\n\n    /**\n     * @dev The address of the ERC721 token contract managing all Dungeon tokens.\n     */\n    DungeonToken public dungeonTokenContract;\n\n    /**\n     * @dev The address of the ERC721 token contract managing all Hero tokens.\n     */\n    HeroToken public heroTokenContract;\n\n\n    /* ======== CLOSED SOURCE CONTRACTS ======== */\n\n    /**\n     * @dev The address of the ChallengeScience contract that handles the floor generation mechanics after challenge success.\n     */\n    ChallengeScienceInterface challengeScienceContract;\n\n    /**\n     * @dev The address of the TrainingScience contract that handles the hero training mechanics.\n     */\n    TrainingScienceInterface trainingScienceContract;\n\n\n    /* ======== SETTER FUNCTIONS ======== */\n\n    /**\n     * @dev Set the address of the dungeon token contract.\n     * @param _newDungeonTokenContract An address of a DungeonToken contract.\n     */\n    function setDungeonTokenContract(address _newDungeonTokenContract) onlyOwner external {\n        dungeonTokenContract = DungeonToken(_newDungeonTokenContract);\n    }\n\n    /**\n     * @dev Set the address of the hero token contract.\n     * @param _newHeroTokenContract An address of a HeroToken contract.\n     */\n    function setHeroTokenContract(address _newHeroTokenContract) onlyOwner external {\n        heroTokenContract = HeroToken(_newHeroTokenContract);\n    }\n\n    /**\n     * @dev Set the address of the secret dungeon challenge formula contract.\n     * @param _newChallengeScienceAddress An address of a ChallengeScience contract.\n     */\n    function setChallengeScienceContract(address _newChallengeScienceAddress) onlyOwner external {\n        challengeScienceContract = ChallengeScienceInterface(_newChallengeScienceAddress);\n    }\n\n    /**\n     * @dev Set the address of the secret hero training formula contract.\n     * @param _newTrainingScienceAddress An address of a TrainingScience contract.\n     */\n    function setTrainingScienceContract(address _newTrainingScienceAddress) onlyOwner external {\n        trainingScienceContract = TrainingScienceInterface(_newTrainingScienceAddress);\n    }\n\n\n    /* ======== MODIFIERS ======== */\n    /**\n     * @dev Throws if _dungeonId is not created yet.\n     */\n    modifier dungeonExists(uint _dungeonId) {\n        require(_dungeonId < dungeonTokenContract.totalSupply());\n        _;\n    }\n\n    /**\n     * @dev Throws if dungeon status do not allow challenge, also check for dungeon existence.\n     */\n    modifier canChallenge(uint _dungeonId) {\n        require(_dungeonId < dungeonTokenContract.totalSupply());\n        uint status;\n        (,status,,,,,,) = dungeonTokenContract.dungeons(_dungeonId);\n        require(status == 0 || status == 1);\n        _;\n    }\n\n    /**\n     * @dev Throws if dungeon status do not allow training, also check for dungeon existence.\n     */\n    modifier canTrain(uint _dungeonId) {\n        require(_dungeonId < dungeonTokenContract.totalSupply());\n        uint status;\n        (,status,,,,,,) = dungeonTokenContract.dungeons(_dungeonId);\n        require(status == 0 || status == 2);\n        _;\n    }\n\n\n    /* ======== HELPER FUNCTIONS ======== */\n\n    /**\n     * @dev An internal function to calculate the power of player, or difficulty of a dungeon floor,\n     *  if the total heroes power is larger than the current dungeon floor difficulty, the heroes win the challenge.\n     */\n    function _getGenesPower(uint _genes) internal pure returns (uint) {\n        // Calculate total stats power.\n        uint statsPower;\n\n        for (uint i = 0; i < 4; i++) {\n            statsPower += _genes % 32;\n            _genes /= 32 ** 4;\n        }\n\n        // Calculate total stats power.\n        uint equipmentPower;\n        bool isSuper = true;\n\n        for (uint j = 4; j < 12; j++) {\n            uint curGene = _genes % 32;\n            equipmentPower += curGene;\n            _genes /= 32 ** 4;\n\n            if (equipmentPower != curGene * (j - 3)) {\n                isSuper = false;\n            }\n        }\n\n        // Calculate super power\n        if (isSuper) {\n            equipmentPower *= 2;\n        }\n\n        return statsPower + equipmentPower + 12;\n    }\n\n}\n\ncontract DungeonChallenge is DungeonBase {\n\n    /**\n     * @dev The DungeonChallenged event is fired when user finished a dungeon challenge.\n     */\n    event DungeonChallenged(uint timestamp, address indexed playerAddress, uint indexed dungeonId, uint heroGenes, uint floorNumber, uint floorGenes, bool success, uint newFloorGenes, uint successRewards, uint masterRewards);\n\n    /**\n     * @notice The actual fee contribution required to call challenge() is calculated by this feeMultiplier,\n     *  times the dungeon difficulty. The payment is accumulated to the dungeon rewards,\n     *  and a large proportion will be claimed by whoever successfully challenged the floor.\n     *  1 finney = 0.001 ether\n     */\n    uint256 public challengeFeeMultiplier = 1 finney;\n\n    /**\n     * @dev The percentage for which successful challenger be rewarded of the dungeons' accumulated rewards.\n     *  The remaining rewards subtracted by developer fee will be used as the base rewards for new floor.\n     */\n    uint public challengeRewardsPercent = 64;\n\n    /**\n     * @dev The developer fee for owner\n     *  Note that when Ether Dungeon becomes truly decentralised, contract ownership will be ejected,\n     *  and the master rewards will be rewarded to the dungeon owner (Dungeon Masters).\n     */\n    uint public masterRewardsPercent = 8;\n\n    /**\n     * @dev The main public function to call when a player challenge a dungeon,\n     *  it determines whether if the player successfully challenged the current floor.\n     *  Will generate a DungeonChallenged event.\n     */\n    function challenge(uint _dungeonId) external payable whenNotPaused canChallenge(_dungeonId) {\n        // Get the dungeon details from the token contract.\n        uint difficulty;\n        uint seedGenes;\n        (,,difficulty,,,,seedGenes,) = dungeonTokenContract.dungeons(_dungeonId);\n\n        // Checks for payment, any exceeding funds will be transferred back to the player.\n        uint requiredFee = difficulty * challengeFeeMultiplier;\n        require(msg.value >= requiredFee);\n\n        // ** STORAGE UPDATE **\n        // Increment the accumulated rewards for the dungeon.\n        dungeonTokenContract.addDungeonRewards(_dungeonId, requiredFee);\n\n        // Calculate any excess funds and make it available to be withdrawed by the player.\n        asyncSend(msg.sender, msg.value - requiredFee);\n\n        // Split the challenge function into multiple parts because of stack too deep error.\n        _challengePart2(_dungeonId, requiredFee);\n    }\n\n    /**\n     * Split the challenge function into multiple parts because of stack too deep error.\n     */\n    function _challengePart2(uint _dungeonId, uint _requiredFee) private {\n        uint floorNumber;\n        uint rewards;\n        uint floorGenes;\n        (,,,floorNumber,,rewards,,floorGenes) = dungeonTokenContract.dungeons(_dungeonId);\n\n        // The original dungeon rewards plus the required fee of this callenge call.\n        uint _addedRewards = rewards + uint128(_requiredFee);\n\n        // Get the first hero gene, or initialize first hero with current dungeon's seed genes.\n        // TODO: implement multiple heroes in next phase\n        uint heroGenes = _getFirstHeroGenesAndInitialize(_dungeonId);\n\n        bool success = _getChallengeSuccess(heroGenes, floorGenes);\n\n        uint newFloorGenes;\n        uint successRewards;\n        uint masterRewards;\n\n        // Whether a challenge is success or not is determined by a simple comparison between hero power and floor power.\n        if (success) {\n            newFloorGenes = _getNewFloorGene(_dungeonId);\n            successRewards = _addedRewards * challengeRewardsPercent / 100;\n            masterRewards = _addedRewards * masterRewardsPercent / 100;\n\n            // The dungeon rewards for new floor as total rewards - challenge rewards - devleoper fee.\n            uint newRewards = _addedRewards * (100 - challengeRewardsPercent - masterRewardsPercent) / 100;\n\n            // ** STORAGE UPDATE **\n            // Add new floor with the new floor genes and new rewards.\n            dungeonTokenContract.addDungeonNewFloor(_dungeonId, newRewards, newFloorGenes);\n\n            // Mark the challenge rewards available to be withdrawed by the player.\n            asyncSend(msg.sender, _addedRewards * challengeRewardsPercent / 100);\n\n            // Mark the master rewards available to be withdrawed by the dungeon master.\n            asyncSend(owner, _addedRewards * masterRewardsPercent / 100);\n        }\n\n        // Emit the DungeonChallenged event.\n        DungeonChallenged(now, msg.sender, _dungeonId, heroGenes, floorNumber, floorGenes, success, newFloorGenes, successRewards, masterRewards);\n    }\n\n    /**\n     * Split the challenge function into multiple parts because of stack too deep error.\n     */\n    function _getFirstHeroGenesAndInitialize(uint _dungeonId) private returns (uint heroGenes) {\n        uint seedGenes;\n        (,,,,,,seedGenes,) = dungeonTokenContract.dungeons(_dungeonId);\n\n        // Get the first hero of the player.\n        uint heroId;\n\n        if (heroTokenContract.balanceOf(msg.sender) == 0) {\n            // Assign the first hero using the seed genes of the dungeon for new player.\n            heroId = heroTokenContract.createHero(seedGenes, msg.sender);\n        } else {\n            heroId = heroTokenContract.ownerTokens(msg.sender, 0);\n        }\n\n        // Get the hero genes from token storage.\n        (,heroGenes) = heroTokenContract.heroes(heroId);\n    }\n\n    /**\n     * Split the challenge function into multiple parts because of stack too deep error.\n     */\n    function _getChallengeSuccess(uint heroGenes, uint floorGenes) private pure returns (bool) {\n        // Determine if the player challenge successfuly the dungeon or not, and the new floor genes.\n        uint heroPower = _getGenesPower(heroGenes);\n        uint floorPower = _getGenesPower(floorGenes);\n\n        return heroPower > floorPower;\n    }\n\n    /**\n     * Split the challenge function into multiple parts because of stack too deep error.\n     */\n    function _getNewFloorGene(uint _dungeonId) private view returns (uint) {\n        uint seedGenes;\n        uint floorGenes;\n        (,,,,,seedGenes,floorGenes) = dungeonTokenContract.dungeons(_dungeonId);\n\n        // Calculate the new floor gene.\n        uint floorPower = _getGenesPower(floorGenes);\n        uint newFloorGenes = challengeScienceContract.mixGenes(floorGenes, seedGenes);\n        uint newFloorPower = _getGenesPower(newFloorGenes);\n\n        // If the power decreased, rollback to the current floor genes.\n        if (newFloorPower < floorPower) {\n            newFloorGenes = floorGenes;\n        }\n\n        return newFloorGenes;\n    }\n\n\n    /* ======== SETTER FUNCTIONS ======== */\n\n    /**\n     * @dev Updates the fee contribution multiplier required for calling challenge().\n     */\n    function setChallengeFeeMultiplier(uint _newChallengeFeeMultiplier) external onlyOwner {\n        challengeFeeMultiplier = _newChallengeFeeMultiplier;\n    }\n\n    /**\n     * @dev Updates the challenge rewards pecentage.\n     */\n    function setChallengeRewardsPercent(uint _newChallengeRewardsPercent) onlyOwner external {\n        challengeRewardsPercent = _newChallengeRewardsPercent;\n    }\n\n    /**\n     * @dev Updates the master rewards percentage.\n     */\n    function setMasterRewardsPercent(uint _newMasterRewardsPercent) onlyOwner external {\n        masterRewardsPercent = _newMasterRewardsPercent;\n    }\n\n}\n\ncontract DungeonTraining is DungeonChallenge {\n\n    /// @dev The HeroTrained event is fired when user finished a training.\n    event HeroTrained(uint timestamp, address indexed playerAddress, uint indexed dungeonId, uint heroGenes, uint floorNumber, uint floorGenes, bool success, uint newHeroGenes);\n\n    /// @notice The actual fee contribution required to call trainX() is calculated by this feeMultiplier,\n    ///  times the dungeon difficulty, times X. The payment is accumulated to the dungeon rewards,\n    ///  and a large proportion will be claimed by whoever successfully challenged the floor.\n    ///  1 finney = 0.001 ether\n    uint256 public trainingFeeMultiplier = 2 finney;\n\n    /// @dev Updates the fee contribution multiplier required for calling trainX().\n    function setTrainingFeeMultiplier(uint _newTrainingFeeMultiplier) external onlyOwner {\n        trainingFeeMultiplier = _newTrainingFeeMultiplier;\n    }\n\n    /// @dev The public function to call when a hero train with a dungeon,\n    ///  it determines whether whether a training is successfully, and the resulting genes.\n    ///  Will generate a DungeonChallenged event.\n    function train1(uint _dungeonId) external payable whenNotPaused canTrain(_dungeonId) {\n        _train(_dungeonId, 1);\n    }\n\n    function train2(uint _dungeonId) external payable whenNotPaused canTrain(_dungeonId) {\n        _train(_dungeonId, 2);\n    }\n\n    function train3(uint _dungeonId) external payable whenNotPaused canTrain(_dungeonId) {\n        _train(_dungeonId, 3);\n    }\n\n    /// @dev An internal function of a hero train with dungeon,\n    ///  it determines whether whether a training is successfully, and the resulting genes.\n    ///  Will generate a DungeonChallenged event.\n    function _train(uint _dungeonId, uint _trainingTimes) private {\n        // Get the dungeon details from the token contract.\n        uint difficulty;\n        uint floorNumber;\n        uint rewards;\n        uint seedGenes;\n        uint floorGenes;\n        (,,difficulty,floorNumber,,rewards,seedGenes,floorGenes) = dungeonTokenContract.dungeons(_dungeonId);\n\n        // Check for _trainingTimes abnormality, we probably won't have any feature that train a hero 10 times with a single call.\n        require(_trainingTimes < 10);\n\n        // Checks for payment, any exceeding funds will be transferred back to the player.\n        uint requiredFee = difficulty * trainingFeeMultiplier * _trainingTimes;\n        require(msg.value >= requiredFee);\n\n        // Get the first hero of the player.\n        // TODO: implement multiple heroes in next phase\n        uint heroId;\n\n        if (heroTokenContract.balanceOf(msg.sender) == 0) {\n            // Assign the first hero using the seed genes of the dungeon for new player.\n            heroId = heroTokenContract.createHero(seedGenes, msg.sender);\n        } else {\n            heroId = heroTokenContract.ownerTokens(msg.sender, 0);\n        }\n\n        // ** STORAGE UPDATE **\n        // Increment the accumulated rewards for the dungeon.\n        dungeonTokenContract.addDungeonRewards(_dungeonId, requiredFee);\n\n        // Calculate any excess funds and make it available to be withdrawed by the player.\n        asyncSend(msg.sender, msg.value - requiredFee);\n\n        // Split the _train function into multiple parts because of stack too deep error.\n        _trainPart2(_dungeonId, _trainingTimes, heroId);\n    }\n\n    /**\n     * Split the _train function into multiple parts because of stack too deep error.\n     */\n    function _trainPart2(uint _dungeonId, uint _trainingTimes, uint _heroId) private {\n        // Get the dungeon details from the token contract.\n        uint floorNumber;\n        uint floorGenes;\n        (,,,floorNumber,,,,floorGenes) = dungeonTokenContract.dungeons(_dungeonId);\n\n        uint heroGenes;\n        (,heroGenes) = heroTokenContract.heroes(_heroId);\n\n        // Determine if the hero training is successful or not, and the resulting genes.\n        uint heroPower = _getGenesPower(heroGenes);\n\n        uint newHeroGenes = heroGenes;\n        uint newHeroPower = heroPower;\n\n        // Train the hero multiple times according to _trainingTimes,\n        // each time if the resulting power is larger, update new hero power.\n        for (uint i = 0; i < _trainingTimes; i++) {\n            uint tmpHeroGenes = trainingScienceContract.mixGenes(newHeroGenes, floorGenes);\n            uint tmpHeroPower = _getGenesPower(tmpHeroGenes);\n\n            if (tmpHeroPower > newHeroPower) {\n                newHeroGenes = tmpHeroGenes;\n                newHeroPower = tmpHeroPower;\n            }\n        }\n\n        // Prevent reduced power.\n        bool success = newHeroPower > heroPower;\n\n        if (success) {\n            // ** STORAGE UPDATE **\n            // Set the upgraded hero genes.\n            heroTokenContract.setHeroGenes(_heroId, newHeroGenes);\n        }\n\n        // Emit the HeroTrained event.\n        HeroTrained(now, msg.sender, _dungeonId, heroGenes, floorNumber, floorGenes, success, newHeroGenes);\n    }\n\n}\n\n/**\n * @title DungeonCoreAlpha\n * @dev Base contract for Ether Dungeon. Holds all common structs, events and base variables.\n *  When Beta launches, DungeonCoreBeta contract will be deployed and DungeonCoreAlpha will be destroyed.\n *  Since all dungeons and heroes are stored as tokens in external contracts, they remains immutable.\n */\ncontract DungeonCoreAlpha is Destructible, DungeonTraining {\n\n    /**\n     * Initialize the DungeonCore(Alpha) contract with all the required contract addresses.\n     */\n    function DungeonCoreAlpha(\n        address _dungeonTokenAddress,\n        address _heroTokenAddress,\n        address _challengeScienceAddress,\n        address _trainingScienceAddress\n    ) public payable {\n        dungeonTokenContract = DungeonToken(_dungeonTokenAddress);\n        heroTokenContract = HeroToken(_heroTokenAddress);\n        challengeScienceContract = ChallengeScienceInterface(_challengeScienceAddress);\n        trainingScienceContract = TrainingScienceInterface(_trainingScienceAddress);\n    }\n\n    /**\n     * @dev The external function to get all the relevant information about a specific dungeon by its ID.\n     * @param _id The ID of the dungeon.\n     */\n    function getDungeonDetails(uint _id) external view returns (uint creationTime, uint status, uint difficulty, uint floorNumber, uint floorCreationTime, uint rewards, uint seedGenes, uint floorGenes) {\n        require(_id < dungeonTokenContract.totalSupply());\n\n        (creationTime, status, difficulty, floorNumber, floorCreationTime, rewards, seedGenes, floorGenes) = dungeonTokenContract.dungeons(_id);\n    }\n\n    /**\n     * @dev The external function to get all the relevant information about a specific hero by its ID.\n     * @param _id The ID of the hero.\n     */\n    function getHeroDetails(uint _id) external view returns (uint creationTime, uint genes) {\n        require(_id < heroTokenContract.totalSupply());\n\n        (creationTime, genes) = heroTokenContract.heroes(_id);\n    }\n\n}"
}