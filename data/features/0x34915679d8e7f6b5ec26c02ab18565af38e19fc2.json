{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH3 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP3 EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ JUMPDEST SWAP3 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ SWAP2 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ JUMPDEST SWAP1 POP DUP3 DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP6 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD DUP7 GT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP7 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP6 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO PUSH2 JUMPI DUP6 PUSH1 SLOAD LT ISZERO ISZERO PUSH2 JUMPI PUSH2 DUP7 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST DUP6 PUSH1 SLOAD PUSH1 SLOAD ADD LT ISZERO ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD DUP8 SUB PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 SWAP4 POP PUSH2 JUMP JUMPDEST JUMPDEST PUSH2 JUMP JUMPDEST DUP2 DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP6 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD DUP7 GT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP7 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST DUP3 DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP6 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD DUP7 GT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP7 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST DUP3 DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP6 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD DUP7 GT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP7 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST DUP3 DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP6 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD DUP7 GT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP7 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST DUP1 DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP6 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD DUP7 GT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP7 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 SWAP4 POP PUSH2 JUMP JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST PUSH2 DUP7 PUSH1 PUSH1 DUP11 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 SWAP4 POP JUMPDEST JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP3 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMPDEST DUP4 PUSH20 AND CALLER PUSH20 AND PUSH32 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SLOAD EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH3 PUSH1 SLOAD TIMESTAMP SUB LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH3 PUSH2 PUSH1 SLOAD TIMESTAMP PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP3 POP PUSH1 SLOAD SWAP2 POP PUSH1 SLOAD SWAP1 POP DUP1 DUP3 EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP DUP2 DUP4 GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP4 POP PUSH1 SLOAD DUP5 GT ISZERO PUSH2 JUMPI PUSH1 SWAP5 POP PUSH2 JUMP JUMPDEST PUSH2 DUP5 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP5 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH2 PUSH1 DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 PUSH2 PUSH1 DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 SWAP5 POP JUMPDEST JUMPDEST POP POP POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH20 AND DUP5 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP PUSH2 DUP4 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 DUP3 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 AND DUP6 PUSH20 AND PUSH32 DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 MUL SWAP1 POP PUSH1 DUP5 EQ DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xee SELFDESTRUCT UNKNOWN_0xe5 MSIZE BLOCKHASH CALLVALUE UNKNOWN_0xaf UNKNOWN_0xcb SWAP7 LOG3 UNKNOWN_0xe7 SWAP14 CALL UNKNOWN_0x4a UNKNOWN_0xdc INVALID_0x75",
  "opcode_entropy": 4.705080694132084,
  "opcode_count": 5267,
  "unique_opcodes": 70,
  "byte_entropy": 4.57597432776213,
  "byte_60": 0.06009218192886338,
  "byte_40": 0.008522480215670928,
  "byte_52": 0.012435863988172884,
  "byte_36": 0.00026089225150013044,
  "byte_15": 0.020697451952343682,
  "byte_61": 0.03408992086268371,
  "byte_02": 0.003652491521001826,
  "byte_38": 0.0003478563353335073,
  "byte_57": 0.01556657100617445,
  "byte_00": 0.03278545960518306,
  "byte_35": 0.0020871380120010435,
  "byte_7c": 0.0003478563353335073,
  "byte_01": 0.02104530828767719,
  "byte_90": 0.03382902861118358,
  "byte_04": 0.006435342203669884,
  "byte_63": 0.006957126706670145,
  "byte_ff": 0.36890164362118444,
  "byte_16": 0.02295851813201148,
  "byte_80": 0.027393686407513697,
  "byte_62": 0.0005217845030002609,
  "byte_de": 0.00026089225150013044,
  "byte_1e": 0.001826245760500913,
  "byte_b4": 0.0005217845030002609,
  "byte_14": 0.009913905557004957,
  "byte_3d": 0.0006087485868336377,
  "byte_06": 0.003652491521001826,
  "byte_99": 0.0003478563353335073,
  "byte_3c": 0.00026089225150013044,
  "byte_97": 0.00017392816766675364,
  "byte_66": 0.00026089225150013044,
  "byte_fd": 0.006261414036003131,
  "byte_03": 0.0073919471258370294,
  "byte_8f": 0.00026089225150013044,
  "byte_09": 0.0013044612575006521,
  "byte_a3": 0.0011305330898338985,
  "byte_5e": 0.00026089225150013044,
  "byte_a7": 0.0004348204191668841,
  "byte_b3": 0.0005217845030002609,
  "byte_47": 0.00026089225150013044,
  "byte_18": 0.0010435690060005217,
  "byte_0d": 0.0013044612575006521,
  "byte_dd": 0.0010435690060005217,
  "byte_a1": 0.0007826767545003914,
  "byte_20": 0.017914601269675624,
  "byte_f0": 0.00017392816766675364,
  "byte_67": 0.00026089225150013044,
  "byte_a8": 0.0003478563353335073,
  "byte_ca": 0.0003478563353335073,
  "byte_22": 0.0003478563353335073,
  "byte_e9": 8.696408383337682e-05,
  "byte_af": 0.0004348204191668841,
  "byte_f3": 0.003913383772501957,
  "byte_23": 0.0013914253413340291,
  "byte_7d": 0.0008696408383337682,
  "byte_26": 0.0008696408383337682,
  "byte_28": 0.0008696408383337682,
  "byte_1c": 0.0012174971736672753,
  "byte_b8": 0.00017392816766675364,
  "byte_72": 0.0016523175928341595,
  "byte_82": 0.006957126706670145,
  "byte_31": 0.0004348204191668841,
  "byte_e5": 0.0006087485868336377,
  "byte_fb": 0.00017392816766675364,
  "byte_f9": 0.00026089225150013044,
  "byte_3a": 0.00026089225150013044,
  "byte_05": 0.0025219584311679277,
  "byte_2a": 0.0006087485868336377,
  "byte_39": 0.00026089225150013044,
  "byte_a5": 0.0003478563353335073,
  "byte_da": 0.00026089225150013044,
  "byte_53": 0.00017392816766675364,
  "byte_41": 0.00026089225150013044,
  "byte_7e": 0.00026089225150013044,
  "byte_a2": 0.00017392816766675364,
  "byte_dc": 0.0003478563353335073,
  "byte_46": 0.00026089225150013044,
  "byte_4d": 0.0004348204191668841,
  "byte_4b": 0.00026089225150013044,
  "byte_c8": 0.0006957126706670146,
  "byte_ce": 0.00026089225150013044,
  "byte_51": 0.009218192886337942,
  "byte_29": 0.0007826767545003914,
  "byte_6e": 8.696408383337682e-05,
  "byte_34": 0.004522132359335594,
  "byte_78": 0.00026089225150013044,
  "byte_56": 0.012696756239673016,
  "byte_6f": 0.0003478563353335073,
  "byte_6b": 0.00026089225150013044,
  "byte_b1": 0.00017392816766675364,
  "byte_59": 0.00017392816766675364,
  "byte_b7": 0.00026089225150013044,
  "byte_96": 0.00017392816766675364,
  "byte_10": 0.0013914253413340291,
  "byte_65": 0.00026089225150013044,
  "byte_2c": 0.0005217845030002609,
  "byte_f4": 0.00026089225150013044,
  "byte_ef": 0.0004348204191668841,
  "byte_84": 0.0020871380120010435,
  "byte_07": 0.0013044612575006521,
  "byte_0f": 0.0007826767545003914,
  "byte_2e": 0.00026089225150013044,
  "byte_70": 0.00026089225150013044,
  "byte_a0": 0.0004348204191668841,
  "byte_ab": 0.0003478563353335073,
  "byte_75": 0.0003478563353335073,
  "byte_8d": 0.0006957126706670146,
  "byte_95": 0.0006957126706670146,
  "byte_f8": 0.0003478563353335073,
  "byte_93": 0.0008696408383337682,
  "byte_e4": 8.696408383337682e-05,
  "byte_08": 0.0016523175928341595,
  "byte_21": 0.0007826767545003914,
  "byte_86": 0.0021741020958344205,
  "byte_85": 0.001478389425167406,
  "byte_2f": 0.00017392816766675364,
  "byte_d7": 0.0003478563353335073,
  "byte_5a": 0.0006957126706670146,
  "byte_94": 0.00026089225150013044,
  "byte_19": 0.0013914253413340291,
  "byte_83": 0.002956778850334812,
  "byte_d8": 0.0003478563353335073,
  "byte_9b": 0.0006087485868336377,
  "byte_bc": 0.00026089225150013044,
  "byte_cf": 0.00026089225150013044,
  "byte_e1": 0.0006957126706670146,
  "byte_db": 8.696408383337682e-05,
  "byte_fe": 0.002000173928167667,
  "byte_ba": 0.00026089225150013044,
  "byte_42": 0.0005217845030002609,
  "byte_cd": 0.00017392816766675364,
  "byte_a9": 0.00026089225150013044,
  "byte_9c": 8.696408383337682e-05,
  "byte_bb": 0.00026089225150013044,
  "byte_fa": 0.00026089225150013044,
  "byte_b0": 0.0005217845030002609,
  "byte_71": 0.0004348204191668841,
  "byte_0a": 0.005652665449169493,
  "byte_54": 0.01008783372467171,
  "byte_74": 0.00017392816766675364,
  "byte_b5": 8.696408383337682e-05,
  "byte_37": 0.0006087485868336377,
  "byte_1a": 0.0005217845030002609,
  "byte_b6": 0.00026089225150013044,
  "byte_13": 0.0021741020958344205,
  "byte_df": 0.00026089225150013044,
  "byte_c2": 0.0006087485868336377,
  "byte_69": 0.0004348204191668841,
  "byte_f2": 0.0006087485868336377,
  "byte_0b": 0.001478389425167406,
  "byte_5d": 8.696408383337682e-05,
  "byte_d6": 0.00017392816766675364,
  "byte_d3": 0.00017392816766675364,
  "byte_92": 0.0016523175928341595,
  "byte_cc": 8.696408383337682e-05,
  "byte_d9": 0.00026089225150013044,
  "byte_2d": 8.696408383337682e-05,
  "byte_f5": 0.0008696408383337682,
  "byte_ed": 0.00017392816766675364,
  "byte_3e": 8.696408383337682e-05,
  "byte_0c": 0.0010435690060005217,
  "byte_8a": 0.00017392816766675364,
  "byte_f7": 0.0003478563353335073,
  "byte_c9": 0.0003478563353335073,
  "byte_ad": 0.0005217845030002609,
  "byte_68": 0.0006087485868336377,
  "byte_5b": 0.03200278285068267,
  "byte_48": 0.00017392816766675364,
  "byte_50": 0.024523871641012263,
  "byte_81": 0.020958344203843814,
  "byte_91": 0.014001217497173667,
  "byte_79": 0.00017392816766675364,
  "byte_4c": 8.696408383337682e-05,
  "byte_9a": 0.00017392816766675364,
  "byte_e3": 0.00026089225150013044,
  "byte_c7": 0.0004348204191668841,
  "byte_1f": 0.0005217845030002609,
  "byte_8b": 0.00017392816766675364,
  "byte_87": 0.0006087485868336377,
  "byte_73": 0.017914601269675624,
  "byte_ac": 0.00017392816766675364,
  "byte_d5": 0.00026089225150013044,
  "byte_25": 0.0003478563353335073,
  "byte_27": 0.0026089225150013043,
  "byte_2b": 0.0006957126706670146,
  "byte_0e": 0.0005217845030002609,
  "byte_bf": 0.00017392816766675364,
  "byte_c4": 0.0005217845030002609,
  "byte_d0": 8.696408383337682e-05,
  "byte_17": 0.001478389425167406,
  "byte_58": 0.00026089225150013044,
  "byte_1d": 0.0005217845030002609,
  "byte_e2": 0.0005217845030002609,
  "byte_1b": 0.0011305330898338985,
  "byte_6d": 0.00017392816766675364,
  "byte_8e": 0.00017392816766675364,
  "byte_43": 0.00017392816766675364,
  "byte_e0": 8.696408383337682e-05,
  "byte_24": 0.0006087485868336377,
  "byte_5f": 8.696408383337682e-05,
  "byte_88": 0.00026089225150013044,
  "byte_c1": 8.696408383337682e-05,
  "byte_4f": 0.0003478563353335073,
  "byte_ea": 0.0004348204191668841,
  "byte_55": 0.0031307070180015655,
  "byte_3f": 8.696408383337682e-05,
  "byte_7b": 0.00017392816766675364,
  "byte_b2": 0.0003478563353335073,
  "byte_12": 0.0025219584311679277,
  "byte_9d": 0.00026089225150013044,
  "byte_44": 0.0004348204191668841,
  "byte_7f": 0.0007826767545003914,
  "byte_4e": 0.0003478563353335073,
  "byte_33": 0.0033915992695016956,
  "byte_8c": 0.0010435690060005217,
  "byte_eb": 0.00026089225150013044,
  "byte_ec": 0.00026089225150013044,
  "byte_d1": 0.0004348204191668841,
  "byte_c0": 0.0003478563353335073,
  "byte_c3": 0.00026089225150013044,
  "byte_b9": 0.00026089225150013044,
  "byte_32": 8.696408383337682e-05,
  "byte_11": 0.0037394556048352032,
  "byte_89": 0.00017392816766675364,
  "byte_76": 0.00017392816766675364,
  "byte_9e": 8.696408383337682e-05,
  "byte_f1": 0.0006087485868336377,
  "byte_7a": 0.0003478563353335073,
  "byte_6c": 8.696408383337682e-05,
  "byte_77": 8.696408383337682e-05,
  "byte_fc": 0.0003478563353335073,
  "byte_aa": 0.0003478563353335073,
  "byte_4a": 0.00017392816766675364,
  "byte_5c": 8.696408383337682e-05,
  "byte_98": 0.0003478563353335073,
  "byte_e6": 8.696408383337682e-05,
  "byte_a6": 0.00017392816766675364,
  "byte_30": 8.696408383337682e-05,
  "byte_ee": 8.696408383337682e-05,
  "byte_cb": 8.696408383337682e-05,
  "byte_e7": 8.696408383337682e-05,
  "byte_ae": 8.696408383337682e-05,
  "byte_45": 8.696408383337682e-05,
  "num_nodes": 10,
  "num_edges": 9,
  "avg_degree": 1.8,
  "density": 0.1,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 22,
  "event_nums": 0,
  "creation_block": 4761691,
  "creation_timestamp": 1513713499,
  "life_time": 2017442.0,
  "duration_seconds": 29564269.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 11,
  "num_buyers": 1,
  "num_sellers": 9,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 1.0904892975910595e-05,
  "avg_gas_limit": 1198461.0909090908,
  "std_gas_limit": 2474515.6153074214,
  "avg_gas_used": 191097.18181818182,
  "std_gas_used": 757488.696250652,
  "avg_gas_price": 29727272727.272728,
  "std_gas_price": 26917689044.02966,
  "changeallocator_num": 2,
  "changecrowdfundcontract_num": 2,
  "transfer_num": 14,
  "timeline_sequence": [
    [
      4761691,
      1513713499,
      6,
      64,
      0,
      4394687,
      6000000000,
      0,
      1,
      5875558,
      3662239,
      18359192
    ],
    [
      4897872,
      1515789257,
      10,
      2,
      0,
      53342,
      99000000000,
      0,
      1,
      86452,
      44452,
      18223011
    ],
    [
      4937342,
      1516404166,
      14,
      174,
      0,
      44061,
      20000000000,
      0,
      1,
      7041574,
      44061,
      18183541
    ],
    [
      5004615,
      1517386977,
      16,
      222,
      0,
      100000,
      21000000000,
      1,
      0,
      6797170,
      24425,
      18116268
    ],
    [
      5309741,
      1521845569,
      10,
      16,
      0,
      25000,
      41000000000,
      1,
      0,
      665963,
      24553,
      17811142
    ],
    [
      5596793,
      1526069021,
      71,
      78,
      0,
      100000,
      8000000000,
      1,
      0,
      3402738,
      23785,
      17524090
    ],
    [
      5596841,
      1526069667,
      72,
      80,
      0,
      100000,
      8000000000,
      1,
      0,
      3502822,
      24435,
      17524042
    ],
    [
      5964948,
      1531603193,
      330,
      30,
      0,
      50000,
      37000000000,
      1,
      0,
      5114340,
      24553,
      17155935
    ],
    [
      6106073,
      1533667552,
      21,
      13,
      0,
      210000,
      30000000000,
      1,
      0,
      392691,
      24489,
      17014810
    ],
    [
      6198285,
      1535013983,
      165,
      63,
      0,
      98000,
      5000000000,
      1,
      0,
      3462843,
      21043,
      16922598
    ],
    [
      6222779,
      1535371549,
      88,
      4,
      0,
      25000,
      41000000000,
      1,
      0,
      140503,
      24425,
      16898104
    ],
    [
      6222785,
      1535371652,
      89,
      15,
      0,
      25000,
      41000000000,
      1,
      0,
      598284,
      24425,
      16898098
    ],
    [
      6230554,
      1535485039,
      22,
      13,
      0,
      7600027,
      2000000000,
      1,
      0,
      324713,
      24489,
      16890329
    ],
    [
      6238109,
      1535595273,
      39,
      102,
      0,
      100000,
      3000000000,
      1,
      0,
      7293242,
      21043,
      16882774
    ],
    [
      6263750,
      1535968889,
      23,
      45,
      0,
      5600000,
      3000000000,
      1,
      0,
      2202650,
      24489,
      16857133
    ],
    [
      6264522,
      1535980270,
      90,
      17,
      0,
      25000,
      41000000000,
      1,
      0,
      507968,
      24425,
      16856361
    ],
    [
      6265931,
      1536000460,
      58,
      95,
      0,
      90000,
      3000000000,
      1,
      0,
      6106503,
      21043,
      16854952
    ],
    [
      6330864,
      1536938629,
      33,
      2,
      0,
      24000,
      61000000000,
      1,
      0,
      98151,
      24000,
      16790019
    ],
    [
      6330963,
      1536939781,
      34,
      1,
      0,
      31000,
      61000000000,
      1,
      0,
      45425,
      24425,
      16789920
    ],
    [
      6335228,
      1537000587,
      58,
      124,
      0,
      41000,
      80000000000,
      1,
      0,
      2758758,
      24425,
      16785655
    ],
    [
      6353584,
      1537262126,
      91,
      30,
      0,
      30000,
      41000000000,
      1,
      0,
      884951,
      24425,
      16767299
    ],
    [
      6779133,
      1543277768,
      24,
      1,
      0,
      7600027,
      2000000000,
      1,
      0,
      76203,
      24489,
      16341750
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.15;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    require(_to != address(0));\n\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   */\n  function increaseApproval (address _spender, uint _addedValue)\n    returns (bool success) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  function decreaseApproval (address _spender, uint _subtractedValue)\n    returns (bool success) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n}\n\ncontract DNNToken is StandardToken {\n\n    using SafeMath for uint256;\n\n    ////////////////////////////////////////////////////////////\n    // Used to indicate which allocation we issue tokens from //\n    ////////////////////////////////////////////////////////////\n    enum DNNSupplyAllocations {\n        EarlyBackerSupplyAllocation,\n        PRETDESupplyAllocation,\n        TDESupplyAllocation,\n        BountySupplyAllocation,\n        WriterAccountSupplyAllocation,\n        AdvisorySupplyAllocation,\n        PlatformSupplyAllocation\n    }\n\n    /////////////////////////////////////////////////////////////////////\n    // Smart-Contract with permission to allocate tokens from supplies //\n    /////////////////////////////////////////////////////////////////////\n    address public allocatorAddress;\n    address public crowdfundContract;\n\n    /////////////////////\n    // Token Meta Data //\n    /////////////////////\n    string constant public name = \"DNN\";\n    string constant public symbol = \"DNN\";\n    uint8 constant public decimals = 18; // 1 DNN = 1 * 10^18 atto-DNN\n\n    /////////////////////////////////////////\n    // Addresses of the co-founders of DNN //\n    /////////////////////////////////////////\n    address public cofounderA;\n    address public cofounderB;\n\n    /////////////////////////\n    // Address of Platform //\n    /////////////////////////\n    address public platform;\n\n    /////////////////////////////////////////////\n    // Token Distributions (% of total supply) //\n    /////////////////////////////////////////////\n    uint256 public earlyBackerSupply; // 10%\n    uint256 public PRETDESupply; // 10%\n    uint256 public TDESupply; // 40%\n    uint256 public bountySupply; // 1%\n    uint256 public writerAccountSupply; // 4%\n    uint256 public advisorySupply; // 14%\n    uint256 public cofoundersSupply; // 10%\n    uint256 public platformSupply; // 11%\n\n    uint256 public earlyBackerSupplyRemaining; // 10%\n    uint256 public PRETDESupplyRemaining; // 10%\n    uint256 public TDESupplyRemaining; // 40%\n    uint256 public bountySupplyRemaining; // 1%\n    uint256 public writerAccountSupplyRemaining; // 4%\n    uint256 public advisorySupplyRemaining; // 14%\n    uint256 public cofoundersSupplyRemaining; // 10%\n    uint256 public platformSupplyRemaining; // 11%\n\n    ////////////////////////////////////////////////////////////////////////////////////\n    // Amount of CoFounder Supply that has been distributed based on vesting schedule //\n    ////////////////////////////////////////////////////////////////////////////////////\n    uint256 public cofoundersSupplyVestingTranches = 10;\n    uint256 public cofoundersSupplyVestingTranchesIssued = 0;\n    uint256 public cofoundersSupplyVestingStartDate; // Epoch\n    uint256 public cofoundersSupplyDistributed = 0;  // # of atto-DNN distributed to founders\n\n    //////////////////////////////////////////////\n    // Prevents tokens from being transferrable //\n    //////////////////////////////////////////////\n    bool public tokensLocked = true;\n\n    /////////////////////////////////////////////////////////////////////////////\n    // Event triggered when tokens are transferred from one address to another //\n    /////////////////////////////////////////////////////////////////////////////\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    ////////////////////////////////////////////////////////////\n    // Checks if tokens can be issued to founder at this time //\n    ////////////////////////////////////////////////////////////\n    modifier CofoundersTokensVested()\n    {\n        // Make sure that a starting vesting date has been set and 4 weeks have passed since vesting date\n        require (cofoundersSupplyVestingStartDate != 0 && (now-cofoundersSupplyVestingStartDate) >= 4 weeks);\n\n        // Get current tranche based on the amount of time that has passed since vesting start date\n        uint256 currentTranche = now.sub(cofoundersSupplyVestingStartDate) / 4 weeks;\n\n        // Amount of tranches that have been issued so far\n        uint256 issuedTranches = cofoundersSupplyVestingTranchesIssued;\n\n        // Amount of tranches that cofounders are entitled to\n        uint256 maxTranches = cofoundersSupplyVestingTranches;\n\n        // Make sure that we still have unvested tokens and that\n        // the tokens for the current tranche have not been issued.\n        require (issuedTranches != maxTranches && currentTranche > issuedTranches);\n\n        _;\n    }\n\n    ///////////////////////////////////\n    // Checks if tokens are unlocked //\n    ///////////////////////////////////\n    modifier TokensUnlocked()\n    {\n        require (tokensLocked == false);\n        _;\n    }\n\n    /////////////////////////////////\n    // Checks if tokens are locked //\n    /////////////////////////////////\n    modifier TokensLocked()\n    {\n       require (tokensLocked == true);\n       _;\n    }\n\n    ////////////////////////////////////////////////////\n    // Checks if CoFounders are performing the action //\n    ////////////////////////////////////////////////////\n    modifier onlyCofounders()\n    {\n        require (msg.sender == cofounderA || msg.sender == cofounderB);\n        _;\n    }\n\n    ////////////////////////////////////////////////////\n    // Checks if CoFounder A is performing the action //\n    ////////////////////////////////////////////////////\n    modifier onlyCofounderA()\n    {\n        require (msg.sender == cofounderA);\n        _;\n    }\n\n    ////////////////////////////////////////////////////\n    // Checks if CoFounder B is performing the action //\n    ////////////////////////////////////////////////////\n    modifier onlyCofounderB()\n    {\n        require (msg.sender == cofounderB);\n        _;\n    }\n\n    /////////////////////////////////////////////////////////////////////\n    // Checks to see if we are allowed to change the allocator address //\n    /////////////////////////////////////////////////////////////////////\n    modifier CanSetAllocator()\n    {\n       require (allocatorAddress == address(0x0) || tokensLocked == false);\n       _;\n    }\n\n    //////////////////////////////////////////////////////////////////////\n    // Checks to see if we are allowed to change the crowdfund contract //\n    //////////////////////////////////////////////////////////////////////\n    modifier CanSetCrowdfundContract()\n    {\n       require (crowdfundContract == address(0x0));\n       _;\n    }\n\n    //////////////////////////////////////////////////\n    // Checks if Allocator is performing the action //\n    //////////////////////////////////////////////////\n    modifier onlyAllocator()\n    {\n        require (msg.sender == allocatorAddress && tokensLocked == false);\n        _;\n    }\n\n    ///////////////////////////////////////////////////////////\n    // Checks if Crowdfund Contract is performing the action //\n    ///////////////////////////////////////////////////////////\n    modifier onlyCrowdfundContract()\n    {\n        require (msg.sender == crowdfundContract);\n        _;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////\n    // Checks if Crowdfund Contract, Platform, or Allocator is performing the action //\n    ///////////////////////////////////////////////////////////////////////////////////\n    modifier onlyAllocatorOrCrowdfundContractOrPlatform()\n    {\n        require (msg.sender == allocatorAddress || msg.sender == crowdfundContract || msg.sender == platform);\n        _;\n    }\n\n    ///////////////////////////////////////////////////////////////////////\n    //  @des Function to change address that is manage platform holding  //\n    //  @param newAddress Address of new issuance contract.              //\n    ///////////////////////////////////////////////////////////////////////\n    function changePlatform(address newAddress)\n        onlyCofounders\n    {\n        platform = newAddress;\n    }\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //  @des Function to change address that is allowed to do token issuance. Crowdfund contract can only be set once.   //\n    //  @param newAddress Address of new issuance contract.                                                              //\n    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    function changeCrowdfundContract(address newAddress)\n        onlyCofounders\n        CanSetCrowdfundContract\n    {\n        crowdfundContract = newAddress;\n    }\n\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    //  @des Function to change address that is allowed to do token issuance. Allocator can only be set once.  //\n    //  @param newAddress Address of new issuance contract.                                                    //\n    /////////////////////////////////////////////////////////////////////////////////////////////////////////////\n    function changeAllocator(address newAddress)\n        onlyCofounders\n        CanSetAllocator\n    {\n        allocatorAddress = newAddress;\n    }\n\n    ///////////////////////////////////////////////////////\n    //  @des Function to change founder A address.       //\n    //  @param newAddress Address of new founder A.      //\n    ///////////////////////////////////////////////////////\n    function changeCofounderA(address newAddress)\n        onlyCofounderA\n    {\n        cofounderA = newAddress;\n    }\n\n    //////////////////////////////////////////////////////\n    //  @des Function to change founder B address.      //\n    //  @param newAddress Address of new founder B.     //\n    //////////////////////////////////////////////////////\n    function changeCofounderB(address newAddress)\n        onlyCofounderB\n    {\n        cofounderB = newAddress;\n    }\n\n\n    //////////////////////////////////////////////////////////////\n    // Transfers tokens from senders address to another address //\n    //////////////////////////////////////////////////////////////\n    function transfer(address _to, uint256 _value)\n      TokensUnlocked\n      returns (bool)\n    {\n          Transfer(msg.sender, _to, _value);\n          return BasicToken.transfer(_to, _value);\n    }\n\n    //////////////////////////////////////////////////////////\n    // Transfers tokens from one address to another address //\n    //////////////////////////////////////////////////////////\n    function transferFrom(address _from, address _to, uint256 _value)\n      TokensUnlocked\n      returns (bool)\n    {\n          Transfer(_from, _to, _value);\n          return StandardToken.transferFrom(_from, _to, _value);\n    }\n\n\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    //  @des Cofounders issue tokens to themsleves if within vesting period. Returns success.    //\n    //  @param beneficiary Address of receiver.                                                  //\n    //  @param tokenCount Number of tokens to issue.                                             //\n    ///////////////////////////////////////////////////////////////////////////////////////////////\n    function issueCofoundersTokensIfPossible()\n        onlyCofounders\n        CofoundersTokensVested\n        returns (bool)\n    {\n        // Compute total amount of vested tokens to issue\n        uint256 tokenCount = cofoundersSupply.div(cofoundersSupplyVestingTranches);\n\n        // Make sure that there are cofounder tokens left\n        if (tokenCount > cofoundersSupplyRemaining) {\n           return false;\n        }\n\n        // Decrease cofounders supply\n        cofoundersSupplyRemaining = cofoundersSupplyRemaining.sub(tokenCount);\n\n        // Update how many tokens have been distributed to cofounders\n        cofoundersSupplyDistributed = cofoundersSupplyDistributed.add(tokenCount);\n\n        // Split tokens between both founders\n        balances[cofounderA] = balances[cofounderA].add(tokenCount.div(2));\n        balances[cofounderB] = balances[cofounderB].add(tokenCount.div(2));\n\n        // Update that a tranche has been issued\n        cofoundersSupplyVestingTranchesIssued += 1;\n\n        return true;\n    }\n\n\n    //////////////////\n    // Issue tokens //\n    //////////////////\n    function issueTokens(address beneficiary, uint256 tokenCount, DNNSupplyAllocations allocationType)\n      onlyAllocatorOrCrowdfundContractOrPlatform\n      returns (bool)\n    {\n        // We'll use the following to determine whether the allocator, platform,\n        // or the crowdfunding contract can allocate specified supply\n        bool canAllocatorPerform = msg.sender == allocatorAddress && tokensLocked == false;\n        bool canCrowdfundContractPerform = msg.sender == crowdfundContract;\n        bool canPlatformPerform = msg.sender == platform && tokensLocked == false;\n\n        // Early Backers\n        if (canAllocatorPerform && allocationType == DNNSupplyAllocations.EarlyBackerSupplyAllocation && tokenCount <= earlyBackerSupplyRemaining) {\n            earlyBackerSupplyRemaining = earlyBackerSupplyRemaining.sub(tokenCount);\n        }\n\n        // PRE-TDE\n        else if (canCrowdfundContractPerform && msg.sender == crowdfundContract && allocationType == DNNSupplyAllocations.PRETDESupplyAllocation) {\n\n              // Check to see if we have enough tokens to satisfy this purchase\n              // using just the pre-tde.\n              if (PRETDESupplyRemaining >= tokenCount) {\n\n                    // Decrease pre-tde supply\n                    PRETDESupplyRemaining = PRETDESupplyRemaining.sub(tokenCount);\n              }\n\n              // Check to see if we can satisfy this using pre-tde and tde supply combined\n              else if (PRETDESupplyRemaining+TDESupplyRemaining >= tokenCount) {\n\n                    // Decrease tde supply\n                    TDESupplyRemaining = TDESupplyRemaining.sub(tokenCount-PRETDESupplyRemaining);\n\n                    // Decrease pre-tde supply by its' remaining tokens\n                    PRETDESupplyRemaining = 0;\n              }\n\n              // Otherwise, we can't satisfy this sale because we don't have enough tokens.\n              else {\n                  return false;\n              }\n        }\n\n        // TDE\n        else if (canCrowdfundContractPerform && allocationType == DNNSupplyAllocations.TDESupplyAllocation && tokenCount <= TDESupplyRemaining) {\n            TDESupplyRemaining = TDESupplyRemaining.sub(tokenCount);\n        }\n\n        // Bounty\n        else if (canAllocatorPerform && allocationType == DNNSupplyAllocations.BountySupplyAllocation && tokenCount <= bountySupplyRemaining) {\n            bountySupplyRemaining = bountySupplyRemaining.sub(tokenCount);\n        }\n\n        // Writer Accounts\n        else if (canAllocatorPerform && allocationType == DNNSupplyAllocations.WriterAccountSupplyAllocation && tokenCount <= writerAccountSupplyRemaining) {\n            writerAccountSupplyRemaining = writerAccountSupplyRemaining.sub(tokenCount);\n        }\n\n        // Advisory\n        else if (canAllocatorPerform && allocationType == DNNSupplyAllocations.AdvisorySupplyAllocation && tokenCount <= advisorySupplyRemaining) {\n            advisorySupplyRemaining = advisorySupplyRemaining.sub(tokenCount);\n        }\n\n        // Platform (Also makes sure that the beneficiary is the platform address specified in this contract)\n        else if (canPlatformPerform && allocationType == DNNSupplyAllocations.PlatformSupplyAllocation && tokenCount <= platformSupplyRemaining) {\n            platformSupplyRemaining = platformSupplyRemaining.sub(tokenCount);\n        }\n\n        else {\n            return false;\n        }\n\n        // Credit tokens to the address specified\n        balances[beneficiary] = balances[beneficiary].add(tokenCount);\n\n        return true;\n    }\n\n    /////////////////////////////////////////////////\n    // Transfer Unsold tokens from TDE to Platform //\n    /////////////////////////////////////////////////\n    function sendUnsoldTDETokensToPlatform()\n      external\n      onlyCrowdfundContract\n    {\n        // Make sure we have tokens to send from TDE\n        if (TDESupplyRemaining > 0) {\n\n            // Add remaining tde tokens to platform remaining tokens\n            platformSupplyRemaining = platformSupplyRemaining.add(TDESupplyRemaining);\n\n            // Clear remaining tde token count\n            TDESupplyRemaining = 0;\n        }\n    }\n\n    /////////////////////////////////////////////////////\n    // Transfer Unsold tokens from pre-TDE to Platform //\n    /////////////////////////////////////////////////////\n    function sendUnsoldPRETDETokensToTDE()\n      external\n      onlyCrowdfundContract\n    {\n          // Make sure we have tokens to send from pre-TDE\n          if (PRETDESupplyRemaining > 0) {\n\n              // Add remaining pre-tde tokens to tde remaining tokens\n              TDESupplyRemaining = TDESupplyRemaining.add(PRETDESupplyRemaining);\n\n              // Clear remaining pre-tde token count\n              PRETDESupplyRemaining = 0;\n        }\n    }\n\n    ////////////////////////////////////////////////////////////////\n    // @des Allows tokens to be transferrable. Returns lock state //\n    ////////////////////////////////////////////////////////////////\n    function unlockTokens()\n        external\n        onlyCrowdfundContract\n    {\n        // Make sure tokens are currently locked before proceeding to unlock them\n        require(tokensLocked == true);\n\n        tokensLocked = false;\n    }\n\n    ///////////////////////////////////////////////////////////////////////\n    //  @des Contract constructor function sets initial token balances.  //\n    ///////////////////////////////////////////////////////////////////////\n    function DNNToken(address founderA, address founderB, address platformAddress, uint256 vestingStartDate)\n    {\n          // Set cofounder addresses\n          cofounderA = founderA;\n          cofounderB = founderB;\n\n          // Sets platform address\n          platform = platformAddress;\n\n          // Set total supply - 1 Billion DNN Tokens = (1,000,000,000 * 10^18) atto-DNN\n          // 1 DNN = 10^18 atto-DNN\n          totalSupply = uint256(1000000000).mul(uint256(10)**decimals);\n\n          // Set Token Distributions (% of total supply)\n          earlyBackerSupply = totalSupply.mul(10).div(100); // 10%\n          PRETDESupply = totalSupply.mul(10).div(100); // 10%\n          TDESupply = totalSupply.mul(40).div(100); // 40%\n          bountySupply = totalSupply.mul(1).div(100); // 1%\n          writerAccountSupply = totalSupply.mul(4).div(100); // 4%\n          advisorySupply = totalSupply.mul(14).div(100); // 14%\n          cofoundersSupply = totalSupply.mul(10).div(100); // 10%\n          platformSupply = totalSupply.mul(11).div(100); // 11%\n\n          // Set each remaining token count equal to its' respective supply\n          earlyBackerSupplyRemaining = earlyBackerSupply;\n          PRETDESupplyRemaining = PRETDESupply;\n          TDESupplyRemaining = TDESupply;\n          bountySupplyRemaining = bountySupply;\n          writerAccountSupplyRemaining = writerAccountSupply;\n          advisorySupplyRemaining = advisorySupply;\n          cofoundersSupplyRemaining = cofoundersSupply;\n          platformSupplyRemaining = platformSupply;\n\n          // Sets cofounder vesting start date (Ensures that it is a date in the future, otherwise it will default to now)\n          cofoundersSupplyVestingStartDate = vestingStartDate >= now ? vestingStartDate : now;\n    }\n}"
}