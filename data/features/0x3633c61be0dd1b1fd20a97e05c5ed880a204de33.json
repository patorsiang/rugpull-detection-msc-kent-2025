{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP2 DUP4 ISZERO PUSH2 MUL SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 DUP4 MSTORE DUP2 DUP5 SHA3 SLOAD DUP2 DUP6 MSTORE PUSH1 SWAP1 SWAP4 MSTORE SWAP3 SHA3 SLOAD PUSH1 SLOAD SWAP2 SWAP4 SWAP1 SWAP3 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD DUP4 MSTORE PUSH1 DUP3 MSTORE DUP1 DUP4 SHA3 SLOAD PUSH1 DUP4 MSTORE DUP2 DUP5 SHA3 SLOAD PUSH1 SWAP1 SWAP4 MSTORE SWAP3 SHA3 SLOAD SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 DUP1 DUP1 CALLER DUP1 EXTCODESIZE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 SLOAD NUMBER LT ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 DUP10 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO ISZERO DUP1 PUSH2 JUMPI POP DUP9 ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH8 CALLVALUE LT ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 SWAP8 POP ISZERO ISZERO PUSH2 JUMPI PUSH1 SLOAD CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 SWAP5 DUP6 ADD SWAP1 DUP2 SWAP1 SSTORE DUP1 DUP5 MSTORE PUSH1 DUP4 MSTORE DUP2 DUP5 SHA3 DUP15 SWAP1 SSTORE PUSH1 DUP4 MSTORE DUP2 DUP5 SHA3 PUSH1 SWAP1 SSTORE PUSH1 DUP4 MSTORE DUP2 DUP5 SHA3 PUSH1 SWAP1 SSTORE PUSH1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SSTORE SWAP1 SWAP8 POP SWAP6 POP PUSH2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP1 DUP6 MSTORE PUSH1 DUP5 MSTORE DUP3 DUP6 SHA3 SLOAD PUSH1 DUP6 MSTORE DUP4 DUP7 SHA3 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE DUP3 SLOAD DUP7 MSTORE PUSH1 DUP6 MSTORE DUP4 DUP7 SHA3 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE SWAP2 SLOAD DUP6 MSTORE PUSH1 SWAP1 SWAP4 MSTORE SWAP3 SHA3 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE SWAP1 SWAP10 POP SWAP6 POP JUMPDEST PUSH1 SWAP5 POP PUSH1 SWAP4 POP PUSH1 SWAP3 POP PUSH1 PUSH1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP10 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP10 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT ADD SWAP1 SSTORE DUP9 SWAP5 POP DUP7 ISZERO PUSH2 JUMPI PUSH1 DUP6 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE JUMPDEST PUSH1 DUP6 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 DUP10 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP6 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD DUP1 DUP5 MSTORE PUSH1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SHA3 DUP1 SLOAD PUSH1 NOT ADD SWAP1 SSTORE SWAP4 POP DUP7 ISZERO PUSH2 JUMPI PUSH1 DUP5 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE JUMPDEST PUSH1 DUP5 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 DUP10 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP5 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD DUP1 DUP5 MSTORE PUSH1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SHA3 DUP1 SLOAD PUSH1 NOT ADD SWAP1 SSTORE SWAP3 POP DUP7 ISZERO PUSH2 JUMPI PUSH1 DUP4 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD DUP4 MSTORE PUSH1 DUP3 MSTORE DUP1 DUP4 SHA3 DUP1 SLOAD PUSH20 NOT SWAP1 DUP2 AND DUP7 OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD DUP6 MSTORE PUSH1 DUP5 MSTORE DUP3 DUP6 SHA3 DUP1 SLOAD SWAP1 SWAP3 AND SWAP1 SWAP6 OR SWAP1 SSTORE DUP4 SLOAD DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SWAP1 SHA3 DUP8 SWAP1 SSTORE PUSH1 DUP8 SWAP1 SSTORE DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE DUP7 ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE JUMPDEST PUSH1 DUP1 MLOAD DUP8 DUP2 MSTORE CALLVALUE PUSH1 DUP3 ADD MSTORE DUP2 MLOAD CALLER SWAP3 PUSH32 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG2 PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 DUP1 PUSH2 PUSH9 PUSH2 CALLVALUE PUSH9 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP5 POP PUSH2 PUSH9 PUSH2 CALLVALUE PUSH9 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP4 POP PUSH2 PUSH9 PUSH2 CALLVALUE PUSH9 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP3 POP PUSH2 PUSH9 PUSH2 CALLVALUE PUSH8 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP PUSH2 PUSH9 PUSH2 CALLVALUE PUSH8 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP DUP8 ISZERO PUSH2 JUMPI PUSH1 DUP9 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SLOAD SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP2 DUP8 ISZERO PUSH2 MUL SWAP2 DUP9 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH1 DUP9 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP7 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP10 DUP2 MSTORE PUSH1 PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP5 SHA3 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND DUP7 MSTORE PUSH1 DUP5 MSTORE DUP3 DUP7 SHA3 SWAP7 SWAP1 SWAP7 SSTORE SWAP4 DUP14 SWAP1 MSTORE SWAP2 DUP2 MSTORE SWAP2 SLOAD DUP2 MLOAD DUP13 DUP2 MSTORE SWAP3 DUP4 ADD DUP10 SWAP1 MSTORE DUP2 MLOAD SWAP4 AND SWAP3 PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 JUMPDEST DUP7 ISZERO PUSH2 JUMPI PUSH1 DUP8 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SLOAD SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP2 DUP7 ISZERO PUSH2 MUL SWAP2 DUP8 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH1 DUP8 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP6 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP9 DUP2 MSTORE PUSH1 PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP5 SHA3 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND DUP7 MSTORE PUSH1 DUP5 MSTORE DUP3 DUP7 SHA3 SWAP7 SWAP1 SWAP7 SSTORE SWAP4 DUP13 SWAP1 MSTORE SWAP2 DUP2 MSTORE SWAP2 SLOAD DUP2 MLOAD DUP12 DUP2 MSTORE SWAP3 DUP4 ADD DUP9 SWAP1 MSTORE DUP2 MLOAD SWAP4 AND SWAP3 PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 JUMPDEST DUP6 ISZERO PUSH2 JUMPI PUSH1 DUP7 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SLOAD SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP2 DUP6 ISZERO PUSH2 MUL SWAP2 DUP7 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH1 DUP7 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP8 DUP2 MSTORE PUSH1 PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP5 SHA3 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND DUP7 MSTORE PUSH1 DUP5 MSTORE DUP3 DUP7 SHA3 SWAP7 SWAP1 SWAP7 SSTORE SWAP4 DUP12 SWAP1 MSTORE SWAP2 DUP2 MSTORE SWAP2 SLOAD DUP2 MLOAD DUP11 DUP2 MSTORE SWAP3 DUP4 ADD DUP8 SWAP1 MSTORE DUP2 MLOAD SWAP4 AND SWAP3 PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP1 DUP4 ISZERO PUSH2 MUL SWAP1 DUP5 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP1 DUP3 ISZERO PUSH2 MUL SWAP1 DUP4 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe STOP LOG1 PUSH6 SHA3 UNKNOWN_0xdc UNKNOWN_0x4a UNKNOWN_0xf8 INVALID_0x7f",
  "opcode_entropy": 4.925292295912036,
  "opcode_count": 2040,
  "unique_opcodes": 73,
  "byte_entropy": 5.895887535608188,
  "byte_60": 0.09965200885795635,
  "byte_80": 0.036380892122745964,
  "byte_40": 0.012654223347042075,
  "byte_52": 0.042708003796267005,
  "byte_04": 0.006327111673521037,
  "byte_36": 0.0009490667510281556,
  "byte_10": 0.004428978171464726,
  "byte_61": 0.03511546978804176,
  "byte_00": 0.08509965200885795,
  "byte_a3": 0.0006327111673521037,
  "byte_57": 0.017715912685858905,
  "byte_63": 0.008225245175577349,
  "byte_ff": 0.025624802277760202,
  "byte_7c": 0.00031635558367605187,
  "byte_01": 0.03005378044922493,
  "byte_35": 0.0015817779183802593,
  "byte_16": 0.012021512179689971,
  "byte_0c": 0.004745333755140778,
  "byte_79": 0.002530844669408415,
  "byte_af": 0.0006327111673521037,
  "byte_3d": 0.004428978171464726,
  "byte_81": 0.03701360329009807,
  "byte_14": 0.004112622587788674,
  "byte_a8": 0.0006327111673521037,
  "byte_2b": 0.0006327111673521037,
  "byte_b1": 0.0012654223347042075,
  "byte_41": 0.00031635558367605187,
  "byte_c2": 0.00031635558367605187,
  "byte_56": 0.011072445428661816,
  "byte_ee": 0.00031635558367605187,
  "byte_b3": 0.0006327111673521037,
  "byte_b0": 0.0006327111673521037,
  "byte_fd": 0.007908889591901298,
  "byte_6f": 0.0015817779183802593,
  "byte_59": 0.00031635558367605187,
  "byte_a5": 0.0006327111673521037,
  "byte_cc": 0.00031635558367605187,
  "byte_24": 0.002847200253084467,
  "byte_43": 0.0006327111673521037,
  "byte_eb": 0.00031635558367605187,
  "byte_2d": 0.002214489085732363,
  "byte_39": 0.00031635558367605187,
  "byte_8d": 0.0009490667510281556,
  "byte_cb": 0.00031635558367605187,
  "byte_5b": 0.026573869028788357,
  "byte_62": 0.0006327111673521037,
  "byte_95": 0.0012654223347042075,
  "byte_e8": 0.0006327111673521037,
  "byte_73": 0.0015817779183802593,
  "byte_85": 0.008857956342929452,
  "byte_93": 0.008225245175577349,
  "byte_f2": 0.0006327111673521037,
  "byte_e3": 0.0018981335020563112,
  "byte_8b": 0.0012654223347042075,
  "byte_c6": 0.0012654223347042075,
  "byte_f6": 0.0018981335020563112,
  "byte_dc": 0.002214489085732363,
  "byte_e7": 0.0006327111673521037,
  "byte_f9": 0.00031635558367605187,
  "byte_5a": 0.00031635558367605187,
  "byte_55": 0.008225245175577349,
  "byte_fc": 0.002214489085732363,
  "byte_34": 0.00506168933881683,
  "byte_15": 0.021512179689971527,
  "byte_b4": 0.00031635558367605187,
  "byte_50": 0.02689022461246441,
  "byte_c0": 0.0006327111673521037,
  "byte_02": 0.012654223347042075,
  "byte_07": 0.005378044922492882,
  "byte_ce": 0.0006327111673521037,
  "byte_d7": 0.00031635558367605187,
  "byte_51": 0.009490667510281556,
  "byte_94": 0.0018981335020563112,
  "byte_20": 0.029421069281872825,
  "byte_90": 0.047453337551407786,
  "byte_83": 0.012970578930718128,
  "byte_91": 0.01518506801645049,
  "byte_03": 0.012970578930718128,
  "byte_f3": 0.0018981335020563112,
  "byte_09": 0.004112622587788674,
  "byte_12": 0.0015817779183802593,
  "byte_8c": 0.0012654223347042075,
  "byte_82": 0.011072445428661816,
  "byte_30": 0.0012654223347042075,
  "byte_92": 0.009807023093957609,
  "byte_45": 0.0018981335020563112,
  "byte_4e": 0.0012654223347042075,
  "byte_98": 0.00031635558367605187,
  "byte_6e": 0.0018981335020563112,
  "byte_77": 0.0006327111673521037,
  "byte_a1": 0.0006327111673521037,
  "byte_a0": 0.007908889591901298,
  "byte_0a": 0.008857956342929452,
  "byte_9f": 0.00031635558367605187,
  "byte_84": 0.008225245175577349,
  "byte_d2": 0.00031635558367605187,
  "byte_e4": 0.00031635558367605187,
  "byte_3f": 0.0006327111673521037,
  "byte_54": 0.021195824106295474,
  "byte_33": 0.0031635558367605187,
  "byte_1e": 0.0015817779183802593,
  "byte_08": 0.008541600759253401,
  "byte_88": 0.0060107560898449855,
  "byte_f1": 0.002847200253084467,
  "byte_3e": 0.0018981335020563112,
  "byte_0d": 0.002530844669408415,
  "byte_0e": 0.0015817779183802593,
  "byte_06": 0.004745333755140778,
  "byte_05": 0.002847200253084467,
  "byte_0b": 0.005694400506168934,
  "byte_fb": 0.00031635558367605187,
  "byte_19": 0.0018981335020563112,
  "byte_17": 0.002214489085732363,
  "byte_3b": 0.00031635558367605187,
  "byte_bc": 0.0006327111673521037,
  "byte_7f": 0.0034799114204365706,
  "byte_c3": 0.0009490667510281556,
  "byte_11": 0.0018981335020563112,
  "byte_72": 0.002530844669408415,
  "byte_68": 0.0031635558367605187,
  "byte_75": 0.0015817779183802593,
  "byte_6d": 0.0015817779183802593,
  "byte_6c": 0.00031635558367605187,
  "byte_44": 0.0009490667510281556,
  "byte_64": 0.0009490667510281556,
  "byte_74": 0.0015817779183802593,
  "byte_53": 0.00031635558367605187,
  "byte_89": 0.002214489085732363,
  "byte_66": 0.0006327111673521037,
  "byte_67": 0.0012654223347042075,
  "byte_78": 0.0006327111673521037,
  "byte_5d": 0.00031635558367605187,
  "byte_8a": 0.0009490667510281556,
  "byte_dd": 0.00031635558367605187,
  "byte_4d": 0.0015817779183802593,
  "byte_69": 0.0009490667510281556,
  "byte_3a": 0.00031635558367605187,
  "byte_2e": 0.00031635558367605187,
  "byte_31": 0.0006327111673521037,
  "byte_65": 0.0009490667510281556,
  "byte_97": 0.0006327111673521037,
  "byte_8e": 0.0009490667510281556,
  "byte_d8": 0.0006327111673521037,
  "byte_a4": 0.0006327111673521037,
  "byte_86": 0.006643467257197089,
  "byte_99": 0.00031635558367605187,
  "byte_a2": 0.002214489085732363,
  "byte_ea": 0.0006327111673521037,
  "byte_0f": 0.0018981335020563112,
  "byte_87": 0.0031635558367605187,
  "byte_58": 0.0006327111673521037,
  "byte_2c": 0.0006327111673521037,
  "byte_38": 0.00031635558367605187,
  "byte_e5": 0.0012654223347042075,
  "byte_70": 0.00031635558367605187,
  "byte_f7": 0.00031635558367605187,
  "byte_fe": 0.002530844669408415,
  "byte_ed": 0.0009490667510281556,
  "byte_6b": 0.0018981335020563112,
  "byte_76": 0.00031635558367605187,
  "byte_ab": 0.00031635558367605187,
  "byte_b7": 0.0006327111673521037,
  "byte_ef": 0.00031635558367605187,
  "byte_c7": 0.0015817779183802593,
  "byte_5e": 0.0015817779183802593,
  "byte_1c": 0.00031635558367605187,
  "byte_27": 0.00031635558367605187,
  "byte_9d": 0.00031635558367605187,
  "byte_b8": 0.0006327111673521037,
  "byte_46": 0.00031635558367605187,
  "byte_13": 0.002214489085732363,
  "byte_d0": 0.00031635558367605187,
  "byte_e9": 0.0009490667510281556,
  "byte_29": 0.0006327111673521037,
  "byte_1a": 0.00031635558367605187,
  "byte_7e": 0.0012654223347042075,
  "byte_d9": 0.00031635558367605187,
  "byte_96": 0.002214489085732363,
  "byte_7a": 0.0015817779183802593,
  "byte_4a": 0.0012654223347042075,
  "byte_c4": 0.0009490667510281556,
  "byte_3c": 0.0009490667510281556,
  "byte_37": 0.0015817779183802593,
  "byte_28": 0.0009490667510281556,
  "byte_5f": 0.0012654223347042075,
  "byte_b2": 0.0009490667510281556,
  "byte_9a": 0.0009490667510281556,
  "byte_f8": 0.0015817779183802593,
  "byte_e1": 0.0009490667510281556,
  "byte_5c": 0.0012654223347042075,
  "byte_cd": 0.0009490667510281556,
  "byte_c8": 0.00031635558367605187,
  "byte_d1": 0.00031635558367605187,
  "byte_f5": 0.00031635558367605187,
  "byte_cf": 0.00031635558367605187,
  "byte_db": 0.00031635558367605187,
  "byte_2f": 0.00031635558367605187,
  "byte_d5": 0.00031635558367605187,
  "num_nodes": 4,
  "num_edges": 4,
  "avg_degree": 2.0,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 8,
  "event_nums": 3,
  "creation_block": 6423169,
  "creation_timestamp": 1538251097,
  "life_time": 891.0,
  "duration_seconds": 13036.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 5,
  "num_buyers": 3,
  "num_sellers": 3,
  "num_creator_transfers": 5,
  "buy_amt": 6e+16,
  "sell_amt": 2e+17,
  "avg_value": 2.888888888888889e+16,
  "txn_per_block": 0.008968609865470852,
  "avg_gas_limit": 281068.625,
  "std_gas_limit": 381362.7706537889,
  "avg_gas_used": 190603.125,
  "std_gas_used": 333483.40585793677,
  "avg_gas_price": 3945312500.0,
  "std_gas_price": 5346347824.318368,
  "buyevt_num": 2,
  "rewardevt_num": 1,
  "atinversebrah_num": 1,
  "buyandearn_num": 2,
  "timeline_sequence": [
    [
      6423169,
      1538251097,
      49,
      12,
      0,
      1037049,
      14000000000,
      0,
      1,
      1397061,
      1027049,
      16697920
    ],
    [
      6423814,
      1538260212,
      50,
      94,
      100000000000000000,
      600000,
      10000000000,
      0,
      1,
      7413945,
      220553,
      16697275
    ],
    [
      6424060,
      1538264133,
      745,
      19,
      100000000000000000,
      600000,
      7562500000,
      0,
      1,
      6975096,
      277223,
      16697029
    ],
    [
      6423814,
      1538260212,
      0,
      0,
      7000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6423814,
      1538260212,
      0,
      0,
      3000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6424060,
      1538264133,
      0,
      0,
      40000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6424060,
      1538264133,
      0,
      0,
      7000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6424060,
      1538264133,
      0,
      0,
      3000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.24;\n\ncontract Ownable {\n  address public owner;\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    //emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n  \n    /**\n    * @dev prevents contracts from interacting with others\n    */\n    modifier isHuman() {\n        address _addr = msg.sender;\n        uint256 _codeLength;\n    \n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"sorry humans only\");\n        _;\n    }\n\n\n}\n\ncontract PyramidEvents{\n\n    event buyEvt(\n        address indexed addr,\n        uint refCode,\n        uint amount\n        );\n    \n    event rewardEvt(\n        address indexed addr,\n        uint refCode,\n        uint rewardAmount\n        );\n}\n\n/*\n\nDiscord: https://discord.gg/9gBhKDc\n ____    __    __                     ______                               \n/\\  _`\\ /\\ \\__/\\ \\                   /\\__  _\\                              \n\\ \\ \\L\\_\\ \\ ,_\\ \\ \\___      __   _ __\\/_/\\ \\/    __     __      ___ ___    \n \\ \\  _\\L\\ \\ \\/\\ \\  _ `\\  /'__`\\/\\`'__\\ \\ \\ \\  /'__`\\ /'__`\\  /' __` __`\\  \n  \\ \\ \\L\\ \\ \\ \\_\\ \\ \\ \\ \\/\\  __/\\ \\ \\/   \\ \\ \\/\\  __//\\ \\L\\.\\_/\\ \\/\\ \\/\\ \\ \n   \\ \\____/\\ \\__\\\\ \\_\\ \\_\\ \\____\\\\ \\_\\    \\ \\_\\ \\____\\ \\__/.\\_\\ \\_\\ \\_\\ \\_\\\n    \\/___/  \\/__/ \\/_/\\/_/\\/____/ \\/_/     \\/_/\\/____/\\/__/\\/_/\\/_/\\/_/\\/_/\n                                                                           \n                                                                           \n*/\n\ncontract EtherTeam is Ownable,PyramidEvents{\n    using SafeMath for uint;\n\n    address private wallet1;\n    address private wallet2;\n\n    uint public startAtBlockNumber;\n    uint public curBubbleNumber= 1000;\n    bool public gameOpened=false;\n    uint public totalPlayers=0;\n    \n    mapping(address=>uint) playerRefCode;    //address=> refCode;\n    mapping(uint=>address) playerRefxAddr;    //refCode=>address;\n    \n    mapping(uint=>uint) parentRefCode;    //player refCode=> parent refCode;\n\n    /* refCode=>bubbles numOfBubbles */\n    mapping(uint=>uint) numOfBubblesL1;\n    mapping(uint=>uint) numOfBubblesL2;\n    mapping(uint=>uint) numOfBubblesL3;\n    \n    \n    mapping(address=>uint) playerRewards;\n    mapping(uint=>uint) referees;\n    \n    uint gameRound=1;\n    mapping(uint=>address) roundxAddr;\n    mapping(uint=>uint) roundxRefCode;\n    \n\n    constructor(address _addr1,address _addr2)public {\n        wallet1=_addr1;\n        wallet2=_addr2;\n        \n        startAtBlockNumber = block.number+633;\n    }\n    \n    function buyandearn(uint refCode) isHuman payable public returns(uint){\n        require(block.number>=startAtBlockNumber,\"Not Start\");\n        require(playerRefxAddr[refCode]!= 0x0 || (refCode==0 && totalPlayers==0));\n        require(msg.value >= 0.1 ether,\"Minima amoun:0.1 ether\");\n        \n        bool _firstJoin=false;\n        uint selfRefCode;\n        \n        /* Joining the game */\n        if(playerRefCode[msg.sender]==0){\n            selfRefCode=curBubbleNumber+1;\n            playerRefCode[msg.sender]=selfRefCode;\n            \n            parentRefCode[selfRefCode]=refCode;\n            \n            numOfBubblesL1[selfRefCode]=6;\n            numOfBubblesL2[selfRefCode]=6*6;\n            numOfBubblesL3[selfRefCode]=6*6*6;\n            _firstJoin=true;\n        }else{\n            //Referral Stays the same\n            selfRefCode=playerRefCode[msg.sender];\n            refCode=parentRefCode[selfRefCode];\n            \n            numOfBubblesL1[playerRefCode[msg.sender]]+=6;\n            numOfBubblesL2[playerRefCode[msg.sender]]+=36;\n            numOfBubblesL3[playerRefCode[msg.sender]]+=216;    \n        }\n        \n        \n        uint up1RefCode=0;\n        uint up2RefCode=0;\n        uint up3RefCode=0;\n        \n        if(totalPlayers>0 && numOfBubblesL1[refCode]>0 ){\n            //if not first player\n            up1RefCode=refCode;\n            numOfBubblesL1[up1RefCode]-=1;\n            \n            if(_firstJoin) referees[up1RefCode]+=1;\n        }\n        \n        if(parentRefCode[up1RefCode]!=0 && numOfBubblesL2[refCode]>0){\n            //up 2 layer\n            up2RefCode=parentRefCode[up1RefCode];\n            numOfBubblesL2[up2RefCode]-=1;\n            \n            if(_firstJoin) referees[up2RefCode]+=1;\n        }\n        \n        if(parentRefCode[up2RefCode]!=0 && numOfBubblesL3[refCode]>0){\n            //up 2 layer\n            up3RefCode=parentRefCode[up2RefCode];\n            numOfBubblesL3[up3RefCode]-=1;\n            \n            if(_firstJoin) referees[up3RefCode]+=1;\n        }\n\n        playerRefxAddr[playerRefCode[msg.sender]]=msg.sender;\n        \n        roundxAddr[gameRound]=msg.sender;\n        roundxRefCode[gameRound]=selfRefCode;\n        \n        curBubbleNumber=selfRefCode;\n        gameRound+=1;\n        \n         if(_firstJoin) totalPlayers+=1;\n        \n        emit buyEvt(msg.sender,selfRefCode,msg.value);\n        \n        /* =========================================\n       distribute\n       =========================================*/\n        distribute(up1RefCode,up2RefCode,up3RefCode);\n        \n    }\n    \n/*\n\n\nDiscord: https://discord.gg/9gBhKDc\n ____    __    __                     ______                               \n/\\  _`\\ /\\ \\__/\\ \\                   /\\__  _\\                              \n\\ \\ \\L\\_\\ \\ ,_\\ \\ \\___      __   _ __\\/_/\\ \\/    __     __      ___ ___    \n \\ \\  _\\L\\ \\ \\/\\ \\  _ `\\  /'__`\\/\\`'__\\ \\ \\ \\  /'__`\\ /'__`\\  /' __` __`\\  \n  \\ \\ \\L\\ \\ \\ \\_\\ \\ \\ \\ \\/\\  __/\\ \\ \\/   \\ \\ \\/\\  __//\\ \\L\\.\\_/\\ \\/\\ \\/\\ \\ \n   \\ \\____/\\ \\__\\\\ \\_\\ \\_\\ \\____\\\\ \\_\\    \\ \\_\\ \\____\\ \\__/.\\_\\ \\_\\ \\_\\ \\_\\\n    \\/___/  \\/__/ \\/_/\\/_/\\/____/ \\/_/     \\/_/\\/____/\\/__/\\/_/\\/_/\\/_/\\/_/\n                                                                           \n     \n*/\n    \n    function distribute(uint up1RefCode,uint up2RefCode,uint up3RefCode) internal{\n        \n        uint v1;\n        uint v2;\n        uint v3;\n        uint w1;\n        uint w2;\n        \n        v1 = msg.value.mul(40 ether).div(100 ether);\n        v2 = msg.value.mul(30 ether).div(100 ether);\n        v3 = msg.value.mul(20 ether).div(100 ether);\n        w1 = msg.value.mul(7 ether).div(100 ether);\n        w2 = msg.value.mul(3 ether).div(100 ether);\n        \n        if(up1RefCode!=0){\n            playerRefxAddr[up1RefCode].transfer(v1);\n            playerRewards[playerRefxAddr[up1RefCode]]=playerRewards[playerRefxAddr[up1RefCode]].add(v1);\n            \n            emit rewardEvt(playerRefxAddr[up1RefCode],up1RefCode,v1);\n        }\n        if(up2RefCode!=0){\n            playerRefxAddr[up2RefCode].transfer(v2);\n            playerRewards[playerRefxAddr[up2RefCode]]=playerRewards[playerRefxAddr[up2RefCode]].add(v2);\n            \n            emit rewardEvt(playerRefxAddr[up2RefCode],up2RefCode,v2);\n        }\n        if(up3RefCode!=0){\n            playerRefxAddr[up3RefCode].transfer(v3);\n            playerRewards[playerRefxAddr[up3RefCode]]=playerRewards[playerRefxAddr[up3RefCode]].add(v3);\n            \n            emit rewardEvt(playerRefxAddr[up3RefCode],up3RefCode,v3);\n        }\n\n        wallet1.transfer(w1);\n        wallet2.transfer(w2);\n    }\n    \n    function witrhdraw(uint _val) public onlyOwner{\n        owner.transfer(_val);\n    }\n    \n    function myData() public view returns(uint,uint,uint,uint){\n        /*return rewards,referees,refCode,totalPlayers  */\n        \n        uint refCode=playerRefCode[msg.sender];\n        return (playerRewards[msg.sender],referees[refCode],refCode,totalPlayers);\n    }\n\n    function availableRef() public view returns(uint,uint,uint){\n        return (numOfBubblesL1[playerRefCode[msg.sender]],numOfBubblesL2[playerRefCode[msg.sender]],numOfBubblesL3[playerRefCode[msg.sender]]);\n    }\n}\n\n\n\n/*\n=====================================================\nLibrary\n=====================================================\n*/\n\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}"
}