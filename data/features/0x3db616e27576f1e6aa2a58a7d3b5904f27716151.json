{
  "opcode_sequence": "PUSH1 DUP1 SLOAD PUSH1 PUSH1 EXP PUSH1 MUL NOT AND SWAP1 SSTORE PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 DUP2 SWAP1 MSTORE PUSH32 PUSH1 SWAP1 DUP2 MSTORE PUSH3 SWAP2 PUSH1 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP1 DUP3 MSTORE PUSH32 PUSH1 SWAP1 SWAP3 ADD SWAP2 DUP3 MSTORE PUSH3 SWAP2 PUSH1 SWAP2 PUSH3 JUMP JUMPDEST POP PUSH1 PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND CALLER OR SWAP1 SSTORE PUSH3 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH3 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH3 JUMP JUMPDEST POP PUSH3 SWAP3 SWAP2 POP PUSH3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 DUP1 PUSH3 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP1 CALLDATALOAD DUP1 DUP3 ADD CALLDATALOAD DUP4 DUP2 MUL DUP1 DUP7 ADD DUP6 ADD SWAP1 SWAP7 MSTORE DUP1 DUP6 MSTORE PUSH2 SWAP6 CALLDATASIZE SWAP6 SWAP4 SWAP5 PUSH1 SWAP5 SWAP4 DUP6 ADD SWAP3 SWAP2 DUP3 SWAP2 DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP POP PUSH1 DUP1 MLOAD DUP8 CALLDATALOAD DUP10 ADD DUP1 CALLDATALOAD PUSH1 DUP2 DUP2 MUL DUP5 DUP2 ADD DUP3 ADD SWAP1 SWAP6 MSTORE DUP2 DUP5 MSTORE SWAP9 SWAP12 SWAP11 SWAP10 DUP10 ADD SWAP9 SWAP3 SWAP8 POP SWAP1 DUP3 ADD SWAP6 POP SWAP4 POP DUP4 SWAP3 POP DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 MLOAD DUP6 MLOAD EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SWAP1 POP DUP1 JUMPDEST DUP5 MLOAD DUP3 LT ISZERO PUSH2 JUMPI DUP5 MLOAD PUSH1 SWAP1 DUP7 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD DUP3 SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SWAP1 SWAP3 ADD SWAP2 SWAP1 POP PUSH2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP2 POP JUMPDEST DUP5 MLOAD DUP3 LT ISZERO PUSH2 JUMPI PUSH2 DUP5 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD DUP2 ADD MLOAD CALLER PUSH1 SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE PUSH1 SWAP1 SWAP2 SHA3 SLOAD SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SSTORE DUP4 MLOAD PUSH2 SWAP1 DUP6 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 DUP1 DUP9 DUP7 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP1 DUP8 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 ADD PUSH1 SHA3 SSTORE DUP5 MLOAD DUP6 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 DUP6 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 PUSH32 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG2 PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND SWAP2 PUSH1 SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD CALLER SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 SWAP2 CALLER SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 POP PUSH1 SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND PUSH1 PUSH1 EXP OR SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE MLOAD PUSH32 SWAP2 SWAP1 LOG2 POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE MLOAD PUSH32 SWAP2 SWAP1 LOG2 POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 SHA3 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP8 AND DUP2 MSTORE PUSH1 DUP3 MSTORE DUP3 DUP2 SHA3 CALLER DUP3 MSTORE SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP8 AND SWAP4 SWAP2 SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD DUP1 DUP4 GT ISZERO PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SSTORE JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH32 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP STOP UNKNOWN_0xdd CALLCODE MSTORE UNKNOWN_0xad SHL UNKNOWN_0xe2 UNKNOWN_0xc8 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef LOG1 PUSH6 SHA3 BLOCKHASH UNKNOWN_0xde UNKNOWN_0x28 SWAP5 UNKNOWN_0xeb UNKNOWN_0xac UNKNOWN_0x26 PUSH11 UNKNOWN_0xe UNKNOWN_0xfc UNKNOWN_0xc9 MSTORE8 UNKNOWN_0xdf ADDMOD SWAP10 SHA3 INVALID_0x69",
  "opcode_entropy": 4.869150446113833,
  "opcode_count": 3524,
  "unique_opcodes": 92,
  "byte_entropy": 5.87716798955663,
  "byte_0x": 0.00019098548510313216,
  "byte_60": 0.11707410236822001,
  "byte_03": 0.023682200152788387,
  "byte_80": 0.0374331550802139,
  "byte_54": 0.012987012987012988,
  "byte_a0": 0.013368983957219251,
  "byte_02": 0.021772345301757066,
  "byte_0a": 0.014705882352941176,
  "byte_ff": 0.01680672268907563,
  "byte_19": 0.003246753246753247,
  "byte_16": 0.02215431627196333,
  "byte_90": 0.05290297937356761,
  "byte_55": 0.006111535523300229,
  "byte_05": 0.00439266615737204,
  "byte_c0": 0.001336898395721925,
  "byte_40": 0.01241405653170359,
  "byte_52": 0.028456837280366694,
  "byte_10": 0.00439266615737204,
  "byte_81": 0.033231474407944994,
  "byte_7f": 0.0028647822765469825,
  "byte_53": 0.0007639419404125286,
  "byte_61": 0.03972498090145149,
  "byte_6e": 0.0005729564553093965,
  "byte_67": 0.001145912910618793,
  "byte_70": 0.0009549274255156608,
  "byte_79": 0.0005729564553093965,
  "byte_65": 0.0007639419404125286,
  "byte_6f": 0.0019098548510313217,
  "byte_74": 0.0009549274255156608,
  "byte_62": 0.004010695187165776,
  "byte_00": 0.05385790679908327,
  "byte_5a": 0.0005729564553093965,
  "byte_91": 0.01757066462948816,
  "byte_06": 0.0030557677616501145,
  "byte_bf": 0.0005729564553093965,
  "byte_56": 0.016042780748663103,
  "byte_5b": 0.033995416348357524,
  "byte_50": 0.019862490450725745,
  "byte_51": 0.014323911382734911,
  "byte_82": 0.01413292589763178,
  "byte_01": 0.04125286478227655,
  "byte_04": 0.01145912910618793,
  "byte_42": 0.0007639419404125286,
  "byte_20": 0.026355996944232237,
  "byte_92": 0.007639419404125287,
  "byte_a1": 0.0015278838808250573,
  "byte_07": 0.003246753246753247,
  "byte_12": 0.0019098548510313217,
  "byte_08": 0.003246753246753247,
  "byte_33": 0.00783040488922842,
  "byte_17": 0.0017188693659281895,
  "byte_64": 0.0007639419404125286,
  "byte_15": 0.018143621084797557,
  "byte_1f": 0.0017188693659281895,
  "byte_57": 0.02024446142093201,
  "byte_83": 0.012987012987012988,
  "byte_85": 0.005729564553093965,
  "byte_32": 0.001336898395721925,
  "byte_11": 0.0030557677616501145,
  "byte_44": 0.001145912910618793,
  "byte_4b": 0.0005729564553093965,
  "byte_39": 0.001336898395721925,
  "byte_f3": 0.002291825821237586,
  "byte_36": 0.0005729564553093965,
  "byte_63": 0.008403361344537815,
  "byte_7c": 0.0005729564553093965,
  "byte_35": 0.004774637127578304,
  "byte_d2": 0.0003819709702062643,
  "byte_14": 0.008403361344537815,
  "byte_37": 0.0009549274255156608,
  "byte_fd": 0.01145912910618793,
  "byte_de": 0.001145912910618793,
  "byte_96": 0.0005729564553093965,
  "byte_93": 0.0053475935828877,
  "byte_7e": 0.0019098548510313217,
  "byte_ea": 0.0009549274255156608,
  "byte_09": 0.0015278838808250573,
  "byte_5e": 0.0003819709702062643,
  "byte_a7": 0.0005729564553093965,
  "byte_b3": 0.0003819709702062643,
  "byte_78": 0.0007639419404125286,
  "byte_18": 0.0007639419404125286,
  "byte_0d": 0.0015278838808250573,
  "byte_dd": 0.0015278838808250573,
  "byte_9c": 0.0005729564553093965,
  "byte_23": 0.001145912910618793,
  "byte_b8": 0.0009549274255156608,
  "byte_72": 0.0007639419404125286,
  "byte_c3": 0.001145912910618793,
  "byte_31": 0.0005729564553093965,
  "byte_3c": 0.0005729564553093965,
  "byte_e5": 0.001145912910618793,
  "byte_ed": 0.0015278838808250573,
  "byte_3f": 0.0003819709702062643,
  "byte_a8": 0.0005729564553093965,
  "byte_3a": 0.0009549274255156608,
  "byte_c1": 0.0005729564553093965,
  "byte_0f": 0.0019098548510313217,
  "byte_48": 0.0003819709702062643,
  "byte_38": 0.0005729564553093965,
  "byte_d1": 0.0009549274255156608,
  "byte_3d": 0.0005729564553093965,
  "byte_5c": 0.0003819709702062643,
  "byte_97": 0.001145912910618793,
  "byte_bb": 0.0005729564553093965,
  "byte_66": 0.0009549274255156608,
  "byte_84": 0.008594346829640947,
  "byte_73": 0.0003819709702062643,
  "byte_76": 0.0005729564553093965,
  "byte_22": 0.0003819709702062643,
  "byte_3b": 0.0009549274255156608,
  "byte_7d": 0.0021008403361344537,
  "byte_bc": 0.0003819709702062643,
  "byte_b4": 0.0015278838808250573,
  "byte_d0": 0.0003819709702062643,
  "byte_cb": 0.0005729564553093965,
  "byte_59": 0.0003819709702062643,
  "byte_8d": 0.0003819709702062643,
  "byte_a5": 0.0003819709702062643,
  "byte_fa": 0.0009549274255156608,
  "byte_95": 0.001336898395721925,
  "byte_d8": 0.00019098548510313216,
  "byte_9b": 0.0005729564553093965,
  "byte_41": 0.0005729564553093965,
  "byte_2b": 0.0007639419404125286,
  "byte_a9": 0.0007639419404125286,
  "byte_c2": 0.0007639419404125286,
  "byte_df": 0.0005729564553093965,
  "byte_86": 0.00267379679144385,
  "byte_d9": 0.0003819709702062643,
  "byte_d7": 0.00019098548510313216,
  "byte_d6": 0.0003819709702062643,
  "byte_a6": 0.0003819709702062643,
  "byte_3e": 0.0005729564553093965,
  "byte_ca": 0.0003819709702062643,
  "byte_34": 0.004583651642475172,
  "byte_43": 0.0003819709702062643,
  "byte_4c": 0.0030557677616501145,
  "byte_f1": 0.001145912910618793,
  "byte_6c": 0.0005729564553093965,
  "byte_75": 0.0005729564553093965,
  "byte_af": 0.00019098548510313216,
  "byte_dc": 0.0003819709702062643,
  "byte_f6": 0.0007639419404125286,
  "byte_94": 0.003246753246753247,
  "byte_24": 0.0017188693659281895,
  "byte_87": 0.0009549274255156608,
  "byte_89": 0.001145912910618793,
  "byte_98": 0.0005729564553093965,
  "byte_9a": 0.00019098548510313216,
  "byte_99": 0.0003819709702062643,
  "byte_88": 0.0005729564553093965,
  "byte_b1": 0.001145912910618793,
  "byte_f4": 0.0003819709702062643,
  "byte_cf": 0.00019098548510313216,
  "byte_f9": 0.0005729564553093965,
  "byte_49": 0.0009549274255156608,
  "byte_0e": 0.004583651642475172,
  "byte_4f": 0.0007639419404125286,
  "byte_25": 0.0009549274255156608,
  "byte_c7": 0.001336898395721925,
  "byte_6a": 0.0007639419404125286,
  "byte_cd": 0.00019098548510313216,
  "byte_a3": 0.0019098548510313217,
  "byte_c4": 0.0003819709702062643,
  "byte_0b": 0.0015278838808250573,
  "byte_0c": 0.0017188693659281895,
  "byte_b2": 0.0007639419404125286,
  "byte_fe": 0.002291825821237586,
  "byte_28": 0.0005729564553093965,
  "byte_d5": 0.00019098548510313216,
  "byte_1b": 0.0007639419404125286,
  "byte_8a": 0.0003819709702062643,
  "byte_ac": 0.0005729564553093965,
  "byte_e3": 0.00019098548510313216,
  "byte_2f": 0.0005729564553093965,
  "byte_68": 0.0009549274255156608,
  "byte_9e": 0.0003819709702062643,
  "byte_13": 0.0005729564553093965,
  "byte_9f": 0.0003819709702062643,
  "byte_ad": 0.0005729564553093965,
  "byte_e0": 0.00019098548510313216,
  "byte_2e": 0.00019098548510313216,
  "byte_8c": 0.0007639419404125286,
  "byte_e1": 0.0007639419404125286,
  "byte_30": 0.0005729564553093965,
  "byte_1e": 0.001336898395721925,
  "byte_a2": 0.0009549274255156608,
  "byte_21": 0.00019098548510313216,
  "byte_f7": 0.0007639419404125286,
  "byte_71": 0.0009549274255156608,
  "byte_8b": 0.0003819709702062643,
  "byte_f2": 0.0005729564553093965,
  "byte_6d": 0.00019098548510313216,
  "byte_6b": 0.0003819709702062643,
  "byte_5f": 0.0003819709702062643,
  "byte_2c": 0.0003819709702062643,
  "byte_aa": 0.0005729564553093965,
  "byte_4d": 0.0003819709702062643,
  "byte_ae": 0.00019098548510313216,
  "byte_fb": 0.00019098548510313216,
  "byte_2a": 0.00019098548510313216,
  "byte_f0": 0.0003819709702062643,
  "byte_d3": 0.0009549274255156608,
  "byte_9d": 0.00019098548510313216,
  "byte_69": 0.0007639419404125286,
  "byte_e6": 0.00019098548510313216,
  "byte_b6": 0.00019098548510313216,
  "byte_db": 0.00019098548510313216,
  "byte_a4": 0.0005729564553093965,
  "byte_e7": 0.00019098548510313216,
  "byte_1d": 0.00019098548510313216,
  "byte_4a": 0.00019098548510313216,
  "byte_26": 0.0003819709702062643,
  "byte_b5": 0.00019098548510313216,
  "byte_d4": 0.0003819709702062643,
  "byte_ba": 0.00019098548510313216,
  "byte_1a": 0.0003819709702062643,
  "byte_eb": 0.0007639419404125286,
  "byte_ec": 0.0005729564553093965,
  "byte_29": 0.0007639419404125286,
  "byte_c8": 0.0007639419404125286,
  "byte_b9": 0.0005729564553093965,
  "byte_b0": 0.0003819709702062643,
  "byte_4e": 0.00019098548510313216,
  "byte_e2": 0.00019098548510313216,
  "byte_fc": 0.0003819709702062643,
  "byte_f5": 0.0003819709702062643,
  "byte_ef": 0.00019098548510313216,
  "byte_7a": 0.0003819709702062643,
  "byte_58": 0.00019098548510313216,
  "byte_2d": 0.00019098548510313216,
  "byte_c9": 0.00019098548510313216,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 2,
  "event_nums": 2,
  "creation_block": 6568544,
  "creation_timestamp": 1540296486,
  "life_time": 25.0,
  "duration_seconds": 313.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.07692307692307693,
  "avg_gas_limit": 762575.5,
  "std_gas_limit": 693887.5,
  "avg_gas_used": 762575.5,
  "std_gas_used": 693887.5,
  "avg_gas_price": 3925000000.0,
  "std_gas_price": 825000000.0,
  "transfer_num": 1,
  "mint_num": 1,
  "timeline_sequence": [
    [
      6568544,
      1540296486,
      3,
      142,
      0,
      1456463,
      3100000000,
      0,
      1,
      7962073,
      1456463,
      16523531
    ],
    [
      6568569,
      1540296799,
      4,
      89,
      0,
      68688,
      4750000000,
      0,
      1,
      7203869,
      68688,
      16523506
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.24;\n\nlibrary SafeMath {\n    \n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\ncontract ERC20Basic {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool); \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    uint256 totalSupply_;\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n    \n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256) {\n        return balances[_owner];\n    }\n}\n\ncontract Ownable {\n    \n    address public owner;\n\n    constructor() public {\n        owner    = msg.sender;\n    }\n\n    modifier onlyOwner() { require(msg.sender == owner); _; }\n}\n\ncontract BlackList is Ownable {\n\n    event Lock(address indexed LockedAddress);\n    event Unlock(address indexed UnLockedAddress);\n\n    mapping( address => bool ) public blackList;\n\n    modifier CheckBlackList { require(blackList[msg.sender] != true); _; }\n\n    function SetLockAddress(address _lockAddress) external onlyOwner returns (bool) {\n        require(_lockAddress != address(0));\n        require(_lockAddress != owner);\n        require(blackList[_lockAddress] != true);\n        \n        blackList[_lockAddress] = true;\n        \n        emit Lock(_lockAddress);\n\n        return true;\n    }\n\n    function UnLockAddress(address _unlockAddress) external onlyOwner returns (bool) {\n        require(blackList[_unlockAddress] != false);\n        \n        blackList[_unlockAddress] = false;\n        \n        emit Unlock(_unlockAddress);\n\n        return true;\n    }\n}\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    modifier whenNotPaused() { require(!paused); _; }\n    modifier whenPaused() { require(paused); _; }\n\n    function pause() onlyOwner whenNotPaused public {\n        paused = true;\n        emit Pause();\n    }\n\n    function unpause() onlyOwner whenPaused public {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract StandardToken is ERC20, BasicToken {\n  \n    mapping (address => mapping (address => uint256)) internal allowed;\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    \n        emit Transfer(_from, _to, _value);\n    \n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n    \n        emit Approval(msg.sender, _spender, _value);\n    \n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {\n        allowed[msg.sender][_spender] = (allowed[msg.sender][_spender].add(_addedValue));\n    \n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    \n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {\n        uint256 oldValue = allowed[msg.sender][_spender];\n    \n        if (_subtractedValue > oldValue) {\n        allowed[msg.sender][_spender] = 0;\n        } else {\n        allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n    \n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n}\n\ncontract MultiTransferToken is StandardToken, Ownable {\n\n    function MultiTransfer(address[] _to, uint256[] _amount) onlyOwner public returns (bool) {\n        require(_to.length == _amount.length);\n\n        uint256 ui;\n        uint256 amountSum = 0;\n    \n        for (ui = 0; ui < _to.length; ui++) {\n            require(_to[ui] != address(0));\n\n            amountSum = amountSum.add(_amount[ui]);\n        }\n\n        require(amountSum <= balances[msg.sender]);\n\n        for (ui = 0; ui < _to.length; ui++) {\n            balances[msg.sender] = balances[msg.sender].sub(_amount[ui]);\n            balances[_to[ui]] = balances[_to[ui]].add(_amount[ui]);\n        \n            emit Transfer(msg.sender, _to[ui], _amount[ui]);\n        }\n    \n        return true;\n    }\n}\n\ncontract BurnableToken is StandardToken, Ownable {\n\n    event BurnAdminAmount(address indexed burner, uint256 value);\n\n    function burnAdminAmount(uint256 _value) onlyOwner public {\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n    \n        emit BurnAdminAmount(msg.sender, _value);\n        emit Transfer(msg.sender, address(0), _value);\n    }\n}\n\ncontract MintableToken is StandardToken, Ownable {\n    event Mint(address indexed to, uint256 amount);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n\n    modifier canMint() { require(!mintingFinished); _; }\n    modifier cannotMint() { require(mintingFinished); _; }\n\n    function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n    \n        emit Mint(_to, _amount);\n        emit Transfer(address(0), _to, _amount);\n    \n        return true;\n    }\n\n    function finishMinting() onlyOwner canMint public returns (bool) {\n        mintingFinished = true;\n        emit MintFinished();\n        return true;\n    }\n}\n\ncontract PausableToken is StandardToken, Pausable, BlackList {\n\n    function transfer(address _to, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\n        return super.transfer(_to, _value);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\n        return super.transferFrom(_from, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public whenNotPaused CheckBlackList returns (bool) {\n        return super.approve(_spender, _value);\n    }\n\n    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused CheckBlackList returns (bool success) {\n        return super.increaseApproval(_spender, _addedValue);\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused CheckBlackList returns (bool success) {\n        return super.decreaseApproval(_spender, _subtractedValue);\n    }\n}\n// ----------------------------------------------------------------------------\n// @Project Community \ud65c\uc131\ud654\ub97c \uc704\ud55c\uc0c1\ud3c9\ud1b5\ubcf4\n// @Creator Ryan_KIM\n// @Source \n// ----------------------------------------------------------------------------\ncontract Sangpyeongtongbo is PausableToken, MintableToken, BurnableToken, MultiTransferToken {\n    string public name = \"Sangpyeongtongbo\";\n    string public symbol = \"SPTB\";\n    uint256 public decimals = 18;\n}"
}