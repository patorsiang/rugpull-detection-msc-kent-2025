{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 CALLDATALOAD AND SWAP2 PUSH1 DUP2 ADD CALLDATALOAD SWAP2 DUP2 ADD SWAP1 PUSH1 DUP2 ADD PUSH1 DUP3 ADD CALLDATALOAD PUSH5 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 DUP3 ADD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP2 DUP5 PUSH1 DUP4 MUL DUP5 ADD GT PUSH5 DUP4 GT OR ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP SWAP1 SWAP3 POP SWAP1 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 ADD CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 DUP2 ADD DUP1 DUP4 MSTORE PUSH1 DUP1 DUP4 MSTORE SWAP3 MLOAD PUSH32 DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP11 DUP2 AND SWAP7 DUP3 ADD SWAP7 DUP8 MSTORE PUSH1 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 PUSH1 DUP4 ADD SWAP1 DUP2 MSTORE DUP5 MLOAD PUSH1 DUP5 ADD MSTORE DUP5 MLOAD SWAP2 SWAP1 SWAP7 AND SWAP7 PUSH4 SWAP7 DUP13 SWAP7 DUP12 SWAP7 SWAP6 SWAP3 SWAP5 SWAP2 SWAP4 PUSH1 SWAP1 SWAP3 ADD SWAP3 SWAP2 SWAP1 DUP2 SWAP1 DUP5 SWAP1 DUP5 SWAP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND SWAP4 POP PUSH32 SWAP3 POP SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE PUSH1 DUP3 ADD DUP4 SWAP1 MSTORE DUP1 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 SSTORE JUMP JUMPDEST PUSH2 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 JUMP JUMPDEST PUSH2 CALLER DUP3 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 DUP5 ADD DUP6 SWAP1 MSTORE MLOAD SWAP2 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND PUSH1 PUSH1 EXP OR SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 DUP2 ADD DUP1 DUP4 MSTORE PUSH1 DUP1 DUP4 MSTORE SWAP3 MLOAD PUSH32 DUP2 MSTORE CALLER SWAP6 DUP2 ADD DUP7 DUP2 MSTORE PUSH1 DUP3 ADD DUP10 SWAP1 MSTORE PUSH1 PUSH1 DUP4 ADD SWAP1 DUP2 MSTORE DUP5 MLOAD PUSH1 DUP5 ADD MSTORE DUP5 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP8 AND SWAP8 PUSH4 SWAP8 SWAP1 SWAP7 DUP12 SWAP7 SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 PUSH1 SWAP1 SWAP4 ADD SWAP3 SWAP2 SWAP1 DUP2 SWAP1 DUP5 SWAP1 DUP5 SWAP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD CALLER SWAP4 POP PUSH32 SWAP3 POP SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 JUMPDEST POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH20 NOT SWAP1 SWAP2 AND DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND SWAP5 DUP2 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 DUP5 ADD DUP8 SWAP1 MSTORE MLOAD SWAP2 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE SWAP1 MLOAD PUSH1 SWAP4 PUSH2 SWAP4 PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP3 PUSH4 SWAP3 DUP2 DUP4 ADD SWAP3 PUSH1 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP9 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 SLOAD PUSH1 SWAP1 SWAP2 AND PUSH1 EXP SWAP1 PUSH2 SWAP1 PUSH2 SWAP1 DUP3 SWAP1 PUSH2 DUP11 PUSH8 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP2 POP DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP8 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 SLOAD DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP3 SWAP5 SWAP4 AND SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 SHA3 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP6 DUP2 MSTORE SWAP4 MLOAD SWAP2 SWAP4 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP POP JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD DUP1 DUP4 LT PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SSTORE JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SSTORE PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ISZERO ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH32 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 SWAP1 PUSH1 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP8 AND DUP2 MSTORE PUSH1 DUP3 MSTORE DUP3 DUP2 SHA3 CALLER DUP3 MSTORE SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP8 AND SWAP4 SWAP2 SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP UNKNOWN_0xfe UNKNOWN_0xdd CALLCODE MSTORE UNKNOWN_0xad SHL UNKNOWN_0xe2 UNKNOWN_0xc8 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef LOG1 PUSH6 SHA3 PUSH7 SWAP3 MULMOD UNKNOWN_0xf SELFDESTRUCT UNKNOWN_0xf6 MUL COINBASE PUSH6 UNKNOWN_0xbc UNKNOWN_0xe5 UNKNOWN_0xd8 JUMPDEST UNKNOWN_0x5d DUP5 UNKNOWN_0xb9 UNKNOWN_0xd9 UNKNOWN_0xbc RETURN STOP UNKNOWN_0x29",
  "opcode_entropy": 4.900029893550941,
  "opcode_count": 3606,
  "unique_opcodes": 95,
  "byte_entropy": 5.937976061153051,
  "byte_60": 0.10748422001803426,
  "byte_80": 0.03787195671776375,
  "byte_40": 0.011541929666366095,
  "byte_52": 0.025608656447249776,
  "byte_34": 0.0009017132551848512,
  "byte_15": 0.017132551848512173,
  "byte_61": 0.04021641118124437,
  "byte_00": 0.0703336339044184,
  "byte_10": 0.005590622182146078,
  "byte_57": 0.019296663660955816,
  "byte_fd": 0.012082957619477006,
  "byte_5b": 0.033002705139765554,
  "byte_50": 0.02398557258791704,
  "byte_04": 0.009197475202885483,
  "byte_36": 0.0030658250676284943,
  "byte_01": 0.032822362488728586,
  "byte_90": 0.045987376014427414,
  "byte_35": 0.004869251577998197,
  "byte_7c": 0.0009017132551848512,
  "byte_63": 0.009197475202885483,
  "byte_5c": 0.000721370604147881,
  "byte_97": 0.0012623985572587917,
  "byte_5a": 0.002344454463480613,
  "byte_bb": 0.0016230838593327321,
  "byte_11": 0.006853020739404869,
  "byte_fb": 0.0003606853020739405,
  "byte_95": 0.0019837691614066726,
  "byte_d8": 0.000721370604147881,
  "byte_9b": 0.000721370604147881,
  "byte_41": 0.0005410279531109107,
  "byte_b4": 0.0005410279531109107,
  "byte_c0": 0.0019837691614066726,
  "byte_ee": 0.0012623985572587917,
  "byte_0b": 0.002705139765554554,
  "byte_8a": 0.001442741208295762,
  "byte_8e": 0.0005410279531109107,
  "byte_14": 0.008115419296663661,
  "byte_3d": 0.0030658250676284943,
  "byte_d7": 0.0005410279531109107,
  "byte_d6": 0.00018034265103697024,
  "byte_23": 0.000721370604147881,
  "byte_c2": 0.000721370604147881,
  "byte_dd": 0.0012623985572587917,
  "byte_62": 0.0009017132551848512,
  "byte_ed": 0.0003606853020739405,
  "byte_3e": 0.002344454463480613,
  "byte_f2": 0.0009017132551848512,
  "byte_e3": 0.0005410279531109107,
  "byte_8b": 0.0009017132551848512,
  "byte_05": 0.004869251577998197,
  "byte_1c": 0.0003606853020739405,
  "byte_56": 0.016411181244364293,
  "byte_a9": 0.0010820559062218215,
  "byte_9c": 0.001442741208295762,
  "byte_03": 0.028133453561767358,
  "byte_eb": 0.002164111812443643,
  "byte_ba": 0.000721370604147881,
  "byte_c9": 0.0003606853020739405,
  "byte_7d": 0.001442741208295762,
  "byte_17": 0.0012623985572587917,
  "byte_55": 0.003787195671776375,
  "byte_66": 0.000721370604147881,
  "byte_18": 0.0012623985572587917,
  "byte_84": 0.009558160504959423,
  "byte_5d": 0.0010820559062218215,
  "byte_70": 0.0003606853020739405,
  "byte_a0": 0.014427412082957619,
  "byte_82": 0.013345356176735799,
  "byte_31": 0.001442741208295762,
  "byte_89": 0.0010820559062218215,
  "byte_79": 0.000721370604147881,
  "byte_cc": 0.0005410279531109107,
  "byte_67": 0.0009017132551848512,
  "byte_af": 0.0005410279531109107,
  "byte_cb": 0.0009017132551848512,
  "byte_59": 0.0003606853020739405,
  "byte_db": 0.0005410279531109107,
  "byte_8d": 0.0005410279531109107,
  "byte_a5": 0.000721370604147881,
  "byte_fc": 0.000721370604147881,
  "byte_f4": 0.000721370604147881,
  "byte_37": 0.000721370604147881,
  "byte_4d": 0.0010820559062218215,
  "byte_02": 0.020919747520288547,
  "byte_c8": 0.0009017132551848512,
  "byte_c5": 0.0003606853020739405,
  "byte_d0": 0.0005410279531109107,
  "byte_08": 0.002164111812443643,
  "byte_e7": 0.00018034265103697024,
  "byte_71": 0.0010820559062218215,
  "byte_6e": 0.0005410279531109107,
  "byte_ef": 0.0005410279531109107,
  "byte_3f": 0.00018034265103697024,
  "byte_4b": 0.0005410279531109107,
  "byte_a8": 0.00018034265103697024,
  "byte_3a": 0.000721370604147881,
  "byte_13": 0.0019837691614066726,
  "byte_42": 0.0012623985572587917,
  "byte_96": 0.0025247971145175834,
  "byte_6c": 0.0005410279531109107,
  "byte_68": 0.000721370604147881,
  "byte_1b": 0.000721370604147881,
  "byte_a6": 0.0003606853020739405,
  "byte_22": 0.0005410279531109107,
  "byte_38": 0.0003606853020739405,
  "byte_06": 0.0018034265103697023,
  "byte_de": 0.000721370604147881,
  "byte_09": 0.0025247971145175834,
  "byte_5e": 0.0010820559062218215,
  "byte_a7": 0.0010820559062218215,
  "byte_b3": 0.0005410279531109107,
  "byte_12": 0.002344454463480613,
  "byte_16": 0.02128043282236249,
  "byte_0d": 0.0018034265103697023,
  "byte_b8": 0.0005410279531109107,
  "byte_72": 0.0005410279531109107,
  "byte_2c": 0.00018034265103697024,
  "byte_4e": 0.0003606853020739405,
  "byte_2e": 0.000721370604147881,
  "byte_a2": 0.000721370604147881,
  "byte_3c": 0.000721370604147881,
  "byte_e5": 0.002885482416591524,
  "byte_aa": 0.0003606853020739405,
  "byte_9d": 0.0018034265103697023,
  "byte_51": 0.014066726780883679,
  "byte_20": 0.02236248872858431,
  "byte_83": 0.01460775473399459,
  "byte_81": 0.03588818755635708,
  "byte_91": 0.01424706943192065,
  "byte_92": 0.010640216411181245,
  "byte_85": 0.002705139765554554,
  "byte_bf": 0.0003606853020739405,
  "byte_1f": 0.000721370604147881,
  "byte_0a": 0.01550946798917944,
  "byte_19": 0.0016230838593327321,
  "byte_f3": 0.0019837691614066726,
  "byte_28": 0.0003606853020739405,
  "byte_ac": 0.000721370604147881,
  "byte_07": 0.002164111812443643,
  "byte_1e": 0.0018034265103697023,
  "byte_b2": 0.0009017132551848512,
  "byte_24": 0.0010820559062218215,
  "byte_ff": 0.02055906221821461,
  "byte_29": 0.001442741208295762,
  "byte_8f": 0.00018034265103697024,
  "byte_f7": 0.0010820559062218215,
  "byte_a4": 0.0010820559062218215,
  "byte_e9": 0.0005410279531109107,
  "byte_73": 0.0010820559062218215,
  "byte_f9": 0.0003606853020739405,
  "byte_9f": 0.0005410279531109107,
  "byte_1d": 0.00018034265103697024,
  "byte_46": 0.0005410279531109107,
  "byte_c3": 0.0009017132551848512,
  "byte_d2": 0.00018034265103697024,
  "byte_2d": 0.000721370604147881,
  "byte_53": 0.0003606853020739405,
  "byte_64": 0.0010820559062218215,
  "byte_b7": 0.0003606853020739405,
  "byte_0e": 0.0019837691614066726,
  "byte_4f": 0.000721370604147881,
  "byte_32": 0.0003606853020739405,
  "byte_9e": 0.0005410279531109107,
  "byte_7f": 0.0036068530207394047,
  "byte_58": 0.0005410279531109107,
  "byte_54": 0.010640216411181245,
  "byte_93": 0.005229936880072137,
  "byte_be": 0.0003606853020739405,
  "byte_b9": 0.0010820559062218215,
  "byte_0f": 0.0018034265103697023,
  "byte_87": 0.002344454463480613,
  "byte_44": 0.0010820559062218215,
  "byte_8c": 0.0009017132551848512,
  "byte_94": 0.004508566275924256,
  "byte_3b": 0.0010820559062218215,
  "byte_bc": 0.000721370604147881,
  "byte_f1": 0.0012623985572587917,
  "byte_88": 0.000721370604147881,
  "byte_99": 0.0003606853020739405,
  "byte_6d": 0.0009017132551848512,
  "byte_c4": 0.0005410279531109107,
  "byte_5f": 0.0003606853020739405,
  "byte_0c": 0.0010820559062218215,
  "byte_c7": 0.0010820559062218215,
  "byte_33": 0.005229936880072137,
  "byte_4a": 0.0003606853020739405,
  "byte_2a": 0.00018034265103697024,
  "byte_f8": 0.00018034265103697024,
  "byte_75": 0.00018034265103697024,
  "byte_ae": 0.00018034265103697024,
  "byte_b5": 0.0003606853020739405,
  "byte_ad": 0.0009017132551848512,
  "byte_4c": 0.00018034265103697024,
  "byte_86": 0.0019837691614066726,
  "byte_a1": 0.0012623985572587917,
  "byte_27": 0.000721370604147881,
  "byte_d3": 0.0005410279531109107,
  "byte_74": 0.0005410279531109107,
  "byte_78": 0.0005410279531109107,
  "byte_2f": 0.0005410279531109107,
  "byte_df": 0.00018034265103697024,
  "byte_d1": 0.000721370604147881,
  "byte_e0": 0.0009017132551848512,
  "byte_26": 0.0005410279531109107,
  "byte_c6": 0.00018034265103697024,
  "byte_dc": 0.0003606853020739405,
  "byte_69": 0.0005410279531109107,
  "byte_e6": 0.0003606853020739405,
  "byte_b6": 0.0003606853020739405,
  "byte_2b": 0.0003606853020739405,
  "byte_76": 0.0003606853020739405,
  "byte_a3": 0.0018034265103697023,
  "byte_f6": 0.0003606853020739405,
  "byte_25": 0.000721370604147881,
  "byte_bd": 0.0003606853020739405,
  "byte_98": 0.00018034265103697024,
  "byte_e1": 0.0009017132551848512,
  "byte_7a": 0.000721370604147881,
  "byte_39": 0.0010820559062218215,
  "byte_77": 0.0003606853020739405,
  "byte_ce": 0.00018034265103697024,
  "byte_1a": 0.00018034265103697024,
  "byte_da": 0.0003606853020739405,
  "byte_6a": 0.00018034265103697024,
  "byte_ab": 0.00018034265103697024,
  "byte_ec": 0.0005410279531109107,
  "byte_49": 0.0003606853020739405,
  "byte_f5": 0.0005410279531109107,
  "byte_cf": 0.00018034265103697024,
  "byte_7b": 0.00018034265103697024,
  "byte_b0": 0.0003606853020739405,
  "byte_fe": 0.0005410279531109107,
  "byte_d5": 0.00018034265103697024,
  "byte_e2": 0.0003606853020739405,
  "byte_fa": 0.00018034265103697024,
  "byte_cd": 0.00018034265103697024,
  "byte_6f": 0.0003606853020739405,
  "byte_6b": 0.00018034265103697024,
  "byte_65": 0.0005410279531109107,
  "byte_c1": 0.0003606853020739405,
  "byte_30": 0.00018034265103697024,
  "byte_d9": 0.00018034265103697024,
  "num_nodes": 19,
  "num_edges": 18,
  "avg_degree": 1.894736842105263,
  "density": 0.05263157894736842,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 43,
  "event_nums": 44,
  "creation_block": 7416982,
  "creation_timestamp": 1553236543,
  "life_time": 8166579.0,
  "duration_seconds": 110548756.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 20,
  "num_buyers": 1,
  "num_sellers": 18,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 5.265361999759997e-06,
  "avg_gas_limit": 114727.69767441861,
  "std_gas_limit": 229995.2909805637,
  "avg_gas_used": 78308.06976744186,
  "std_gas_used": 235240.43934588777,
  "avg_gas_price": 21546325020.697674,
  "std_gas_price": 16845933590.876984,
  "transfer_num": 42,
  "atinversebrah_num": 1,
  "timeline_sequence": [
    [
      7416982,
      1553236543,
      2,
      91,
      0,
      1600619,
      2000000000,
      0,
      1,
      5814632,
      1600619,
      15703905
    ],
    [
      7416994,
      1553236712,
      3,
      55,
      0,
      78972,
      10000000000,
      0,
      1,
      2755986,
      52648,
      15703893
    ],
    [
      7423210,
      1553320282,
      4,
      18,
      0,
      55800,
      10000000000,
      0,
      1,
      987459,
      52776,
      15697677
    ],
    [
      7475426,
      1554026063,
      0,
      17,
      0,
      60000,
      6000000000,
      0,
      1,
      587010,
      52648,
      15645461
    ],
    [
      7486400,
      1554172960,
      1745,
      1,
      0,
      90000,
      38000000000,
      0,
      1,
      73635,
      52584,
      15634487
    ],
    [
      7488311,
      1554199917,
      1,
      89,
      0,
      60000,
      10000000000,
      0,
      1,
      4892773,
      52648,
      15632576
    ],
    [
      7884115,
      1559532995,
      6,
      166,
      0,
      55800,
      10000000000,
      0,
      1,
      5730662,
      52712,
      15236772
    ],
    [
      7884136,
      1559533297,
      0,
      175,
      0,
      93280,
      2000000000,
      0,
      1,
      6980936,
      37712,
      15236751
    ],
    [
      7884228,
      1559534704,
      7,
      144,
      0,
      55800,
      10000000000,
      0,
      1,
      7806330,
      52712,
      15236659
    ],
    [
      7884352,
      1559536070,
      0,
      74,
      0,
      93280,
      2000000000,
      0,
      1,
      7537504,
      22712,
      15236535
    ],
    [
      7955305,
      1560495357,
      1968,
      36,
      0,
      90000,
      37228923656,
      0,
      1,
      1216335,
      52520,
      15165582
    ],
    [
      8135330,
      1562921393,
      5788,
      23,
      0,
      90000,
      1000000000,
      0,
      1,
      7861801,
      52648,
      14985557
    ],
    [
      8135389,
      1562922234,
      5799,
      80,
      0,
      52712,
      3300000000,
      0,
      1,
      4069966,
      52712,
      14985498
    ],
    [
      8507999,
      1567928412,
      322988,
      3,
      0,
      90000,
      42000000000,
      0,
      1,
      115648,
      52648,
      14612888
    ],
    [
      8508000,
      1567928417,
      322989,
      1,
      0,
      90000,
      43400000000,
      0,
      1,
      92012,
      52648,
      14612887
    ],
    [
      8508019,
      1567928700,
      0,
      51,
      0,
      90000,
      10000000000,
      0,
      1,
      6966114,
      37584,
      14612868
    ],
    [
      8508019,
      1567928700,
      0,
      52,
      0,
      90000,
      10000000000,
      0,
      1,
      6988698,
      22584,
      14612868
    ],
    [
      8513028,
      1567996559,
      8454,
      183,
      0,
      90000,
      6000000000,
      0,
      1,
      7695820,
      22712,
      14607859
    ],
    [
      8513112,
      1567997681,
      324479,
      3,
      0,
      90000,
      45000000000,
      0,
      1,
      115712,
      52712,
      14607775
    ],
    [
      8513112,
      1567997681,
      324480,
      4,
      0,
      90000,
      45000000000,
      0,
      1,
      153360,
      37648,
      14607775
    ],
    [
      8513112,
      1567997681,
      324481,
      5,
      0,
      90000,
      45000000000,
      0,
      1,
      206008,
      52648,
      14607775
    ],
    [
      8513141,
      1567998081,
      1,
      117,
      0,
      90000,
      10000000000,
      0,
      1,
      6574653,
      22648,
      14607746
    ],
    [
      8513142,
      1567998092,
      1,
      81,
      0,
      90000,
      10000000000,
      0,
      1,
      4036954,
      22584,
      14607745
    ],
    [
      8531987,
      1568251618,
      329910,
      21,
      0,
      90000,
      46000000000,
      0,
      1,
      1016974,
      52776,
      14588900
    ],
    [
      8531987,
      1568251618,
      329912,
      23,
      0,
      90000,
      46000000000,
      0,
      1,
      1092632,
      37712,
      14588900
    ],
    [
      8532020,
      1568252335,
      1,
      142,
      0,
      52776,
      13019531250,
      0,
      1,
      7846264,
      37776,
      14588867
    ],
    [
      8535364,
      1568297116,
      331521,
      33,
      0,
      90000,
      16500000000,
      0,
      1,
      3308303,
      52776,
      14585523
    ],
    [
      8831973,
      1572323591,
      3,
      12,
      0,
      60000,
      15000000000,
      0,
      1,
      428033,
      52712,
      14288914
    ],
    [
      8831986,
      1572323718,
      5,
      106,
      0,
      90000,
      20000000000,
      0,
      1,
      5864090,
      22648,
      14288901
    ],
    [
      8838872,
      1572418925,
      43233,
      19,
      0,
      90000,
      44000000000,
      0,
      1,
      868176,
      52776,
      14282015
    ],
    [
      8838885,
      1572419065,
      1,
      102,
      0,
      90000,
      20000000000,
      0,
      1,
      3366254,
      22712,
      14282002
    ],
    [
      8932992,
      1573742802,
      94853,
      76,
      0,
      90000,
      36440000000,
      0,
      1,
      2988079,
      52712,
      14187895
    ],
    [
      8933000,
      1573742983,
      3,
      231,
      0,
      90000,
      20000000000,
      0,
      1,
      8996941,
      22648,
      14187887
    ],
    [
      9013540,
      1574914778,
      326,
      220,
      0,
      37200,
      1100000000,
      0,
      1,
      9912806,
      37200,
      14107347
    ],
    [
      9019476,
      1575005584,
      110575,
      52,
      0,
      90000,
      36000000000,
      0,
      1,
      1399588,
      52776,
      14101411
    ],
    [
      9019484,
      1575005683,
      2,
      25,
      0,
      90000,
      20000000000,
      0,
      1,
      923456,
      22712,
      14101403
    ],
    [
      9028868,
      1575149334,
      5,
      68,
      0,
      120000,
      1300000000,
      0,
      1,
      3609226,
      22648,
      14092019
    ],
    [
      9042429,
      1575357729,
      331824,
      126,
      0,
      37648,
      5000000000,
      0,
      1,
      8262200,
      22648,
      14078458
    ],
    [
      9245364,
      1578558252,
      155025,
      101,
      0,
      90000,
      20000000000,
      0,
      1,
      4122834,
      39072,
      13875523
    ],
    [
      9990730,
      1588475385,
      57771,
      29,
      0,
      90000,
      20000000000,
      0,
      1,
      1235875,
      39072,
      13130157
    ],
    [
      13463669,
      1634854833,
      286791,
      430,
      0,
      56472,
      53482364885,
      0,
      1,
      28245067,
      51672,
      9657218
    ],
    [
      14790219,
      1652758960,
      490564,
      183,
      0,
      56460,
      54215909541,
      0,
      1,
      15837512,
      56460,
      8330668
    ],
    [
      15583561,
      1663785299,
      16684,
      68,
      0,
      56472,
      30505246558,
      0,
      1,
      7644622,
      51672,
      7537326
    ]
  ],
  "sourcecode": "pragma solidity 0.5.4;\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n     * @dev Multiplies two unsigned integers, reverts on overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n     * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Adds two unsigned integers, reverts on overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\n\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n     * @dev called by the owner to pause, triggers stopped state\n     */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n\n    /**\n     * @dev called by the owner to unpause, returns to normal state\n     */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\n\ncontract StandardToken {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) internal balances;\n\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    uint256 public totalSupply;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed owner,uint256 amount);\n    event Approval(address indexed owner, address indexed spender, uint256 vaule);\n\n    /**\n     * @dev Gets the balance of the specified address.\n     * @param _owner The address to query the the balance of.\n     * @return An uint256 representing the amount owned by the passed address.\n     */\n    function balanceOf(address _owner) public view returns(uint256) {\n        return balances[_owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public view returns(uint256) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * @dev Transfer token for a specified address\n     * @param _to The address to transfer to.\n     * @param _value The amount to be transferred.\n     */\n    function transfer(address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns(bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns(bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseApproval(address _spender, uint256 _addedValue) public returns(bool) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * @param _spender The address which will spend the funds.\n     * @param _subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns(bool) {\n        uint256 oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue >= oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n        totalSupply = totalSupply.sub(value);\n        balances[account] = balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n        emit Burn(account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n        // this function needs to emit an event with the updated approval.\n        allowed[account][msg.sender] = allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n    }\n\n}\n\n\ncontract BurnableToken is StandardToken {\n\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n\n/**\n * @title Pausable token\n * @dev ERC20 modified with pausable transfers.\n */\ncontract PausableToken is StandardToken, Pausable {\n    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transfer(to, value);\n    }\n\n    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {\n        return super.transferFrom(from, to, value);\n    }\n\n    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {\n        return super.approve(spender, value);\n    }\n\n    function increaseApproval(address spender, uint256 addedValue) public whenNotPaused returns (bool success) {\n        return super.increaseApproval(spender, addedValue);\n    }\n\n    function decreaseApproval(address spender, uint256 subtractedValue) public whenNotPaused returns (bool success) {\n        return super.decreaseApproval(spender, subtractedValue);\n    }\n}\n\ncontract Token is PausableToken, BurnableToken {\n    string public constant name = \"XMT\"; // name of Token \n    string public constant symbol = \"XMT\"; // symbol of Token \n    uint8 public constant decimals = 18;\n\n    uint256 internal constant INIT_TOTALSUPPLY = 1000000000; // Total amount of tokens\n\n    constructor() public {\n        totalSupply = INIT_TOTALSUPPLY * 10 ** uint256(decimals);\n        balances[msg.sender] = totalSupply;\n    }\n}\n\n/**\n * @dev Interface of Pair contract\n */\ninterface PairContract {\n    function tokenFallback(address _from, uint256 _value, bytes calldata _data) external;\n    function transfer(address _to, uint256 _value) external returns (bool);\n    function decimals() external returns (uint8);\n}\n\ncontract XMT is Token {\n    // The address of Pair contract\n    PairContract public pairInstance;\n    /// @notice revoking rate precise\n    /// @notice for example: RATE_PRECISE is 3, meaning that the revoking fee ratio is 3/10000\n    uint public rate = 10000;  // default rate is 1:1\n    uint public constant RATE_PRECISE = 10000;\n\n    // events\n    event ExchangePair(address indexed from, uint256 value);\n    event SetPairContract(address PairToken);\n    event RateChanged(uint256 previousOwner,uint256 newRate);\n\n    /**\n     * @dev Throws if called by any account other than the Pair contract\n     */\n    modifier onlyPairContract() {\n        require(msg.sender == address(pairInstance));\n        _;\n    }\n\n    /**\n     * @dev Sets the address of pair contract\n     */\n    function setPairContract(address pairAddress) public onlyOwner {\n        require(pairAddress != address(0));\n        pairInstance = PairContract(pairAddress);\n        emit SetPairContract(pairAddress);\n    }\n\n    /**\n     * @dev Function Set the exchange rate of pair token.\n     * for example: RATE_PRECISE is 300, means that the rate is 300/10000: 1 PT = 0.003 XMT\n     * for example: RATE_PRECISE is 30000, means that the rate is 30000/10000: 1 PT = 3 XMT\n     */\n     function setRate(uint256 _newRate) public onlyOwner {\n        require(_newRate > 0);\n        emit RateChanged(rate,_newRate);\n        rate = _newRate;\n     }\n\n    /**\n     * @dev Transfers token to a specified address.\n     *      If the target address of transferring is Pair contract, the operation of changing Pair tokens will be executed.\n     * @param to The target address of transfer, which may be the  contract\n     * @param value The amount of tokens transferred\n     */\n    function transfer(address to, uint value) public returns (bool) {\n        super.transfer(to, value); // Transfers tokens to address 'to'\n        if(to == address(pairInstance)) {\n            pairInstance.tokenFallback(msg.sender, value, bytes(\"\")); // Calls 'tokenFallback' function in Pair contract to exchange tokens\n            emit ExchangePair(msg.sender, value);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Transfers tokens from one address to another.\n     *      If the target address of transferring is  Pair contract, the operation of changing Pair tokens will be executed.\n     * @param from The address which you want to send tokens from\n     * @param to The address which you want to transfer to\n     * @param value The amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint value) public returns (bool) {\n        super.transferFrom(from, to, value); // Transfers token to address 'to'\n        if(to == address(pairInstance)) {\n            pairInstance.tokenFallback(from, value, bytes(\"\")); // Calls 'tokenFallback' function in Pair contract to exchange tokens\n            emit ExchangePair(from, value);\n        }\n        return true;\n    }\n\n    /**\n     * @dev Function that is called by the Pair contract to exchange 'XMT' tokens\n     */\n    function tokenFallback(address from, uint256 value, bytes calldata) external onlyPairContract {\n        require(from != address(0));\n        require(value != uint256(0));\n        require(pairInstance.transfer(owner,value)); // Transfers Pair tokens belonging to this contract to 'owner'\n        uint256 XMTValue = value.mul(10**uint256(decimals)).mul(rate).div(RATE_PRECISE).div(10**uint256(pairInstance.decimals())); // Calculates the number of 'XMT' tokens that can be exchanged\n        require(XMTValue <= balances[owner]);\n        balances[owner] = balances[owner].sub(XMTValue);\n        balances[from] = balances[from].add(XMTValue); \n        emit Transfer(owner, from, XMTValue);\n    }\n    \n    /**\n     * @dev Function that is used to withdraw the 'Pair' tokens in this contract\n     */\n    function withdrawToken(uint256 value) public onlyOwner {\n        require(pairInstance.transfer(owner,value));\n    }    \n}"
}