{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH4 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH4 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH4 SWAP1 SWAP2 AND PUSH1 DUP4 ADD MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 DUP2 ISZERO DUP1 PUSH2 JUMPI POP CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP7 SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH2 PUSH2 CALLER PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP1 JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH4 DUP3 AND LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD TIMESTAMP SWAP2 SWAP1 PUSH4 DUP5 AND SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 PUSH1 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH4 AND GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH4 DUP4 AND SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD DUP3 ADD SWAP2 POP JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 POP PUSH1 SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST TIMESTAMP PUSH4 DUP5 AND GT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP2 POP PUSH1 SWAP1 POP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH4 DUP3 AND LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD TIMESTAMP SWAP2 SWAP1 PUSH4 DUP5 AND SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 PUSH1 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH4 AND LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD DUP5 SWAP2 SWAP1 PUSH4 DUP5 AND SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 SWAP3 SWAP1 SWAP3 MUL SWAP1 SWAP2 ADD PUSH1 ADD DUP1 SLOAD PUSH4 NOT AND PUSH4 SWAP5 DUP6 AND OR SWAP1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP3 MSTORE PUSH1 SWAP1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD DUP7 SWAP3 DUP5 AND SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH4 DUP7 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND SWAP3 CALLER SWAP3 PUSH32 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP3 ISZERO ISZERO EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD SWAP1 PUSH2 SWAP1 PUSH1 DUP4 ADD PUSH2 JUMP JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD DUP5 SWAP2 SWAP1 PUSH1 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 SWAP3 SWAP1 SWAP3 MUL SWAP1 SWAP2 ADD PUSH1 ADD DUP1 SLOAD PUSH4 NOT AND PUSH4 SWAP5 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP2 MSTORE PUSH1 SWAP1 SWAP2 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD DUP6 SWAP2 SWAP1 PUSH1 NOT DUP2 ADD SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 DUP1 MLOAD DUP7 DUP2 MSTORE PUSH4 DUP7 AND SWAP3 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND SWAP3 CALLER SWAP3 PUSH32 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO DUP2 ISZERO ISZERO EQ ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND PUSH1 PUSH1 EXP OR SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 POP PUSH1 SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH2 PUSH2 CALLER PUSH2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP2 SWAP1 PUSH4 DUP5 AND LT PUSH2 JUMPI POP PUSH1 SWAP1 POP DUP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH4 DUP6 AND SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 SWAP1 SWAP3 MUL SWAP1 SWAP2 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE PUSH1 SWAP1 SWAP2 SHA3 DUP1 SLOAD SWAP2 SWAP4 POP SWAP1 PUSH4 DUP6 AND SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 PUSH1 SWAP1 SWAP3 MUL ADD ADD SLOAD PUSH4 AND SWAP1 POP JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 SWAP1 PUSH1 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SLOAD SWAP4 DUP7 AND DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP8 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 DUP2 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP8 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP9 AND SWAP4 SWAP2 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 MUL DUP2 PUSH1 MUL DUP4 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 DUP2 ADD DUP1 SLOAD PUSH4 NOT AND SWAP1 SSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP SWAP1 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xfe REVERT DUP9 MUL DUP1 INVALID_0x7f",
  "opcode_entropy": 4.7329614112083105,
  "opcode_count": 2524,
  "unique_opcodes": 55,
  "byte_entropy": 5.821858848180309,
  "byte_60": 0.11737570476678626,
  "byte_80": 0.033828805740645826,
  "byte_40": 0.011532547411583802,
  "byte_52": 0.028190671450538187,
  "byte_04": 0.010507432086109688,
  "byte_36": 0.0007688364941055869,
  "byte_10": 0.004869297796002051,
  "byte_61": 0.038954382368016405,
  "byte_01": 0.038954382368016405,
  "byte_11": 0.0020502306509482316,
  "byte_57": 0.020246027678113787,
  "byte_63": 0.013582778062532035,
  "byte_ff": 0.040492055356227574,
  "byte_7c": 0.00025627883136852895,
  "byte_00": 0.04946181445412609,
  "byte_35": 0.006406970784213224,
  "byte_16": 0.027934392619169655,
  "byte_06": 0.0025627883136852894,
  "byte_fd": 0.008713480266529985,
  "byte_de": 0.00025627883136852895,
  "byte_03": 0.02409021014864172,
  "byte_81": 0.025627883136852898,
  "byte_14": 0.008200922603792926,
  "byte_09": 0.0023065094823167607,
  "byte_5e": 0.00025627883136852895,
  "byte_a7": 0.0007688364941055869,
  "byte_b3": 0.0007688364941055869,
  "byte_a0": 0.015120451050743208,
  "byte_18": 0.0005125576627370579,
  "byte_0d": 0.0015376729882111738,
  "byte_dd": 0.0015376729882111738,
  "byte_d8": 0.0007688364941055869,
  "byte_1f": 0.0010251153254741158,
  "byte_49": 0.0015376729882111738,
  "byte_ca": 0.00025627883136852895,
  "byte_ac": 0.0012813941568426447,
  "byte_23": 0.0010251153254741158,
  "byte_b8": 0.0007688364941055869,
  "byte_72": 0.0005125576627370579,
  "byte_02": 0.02716555612506407,
  "byte_31": 0.0005125576627370579,
  "byte_3c": 0.0007688364941055869,
  "byte_e5": 0.0010251153254741158,
  "byte_67": 0.00025627883136852895,
  "byte_3e": 0.0005125576627370579,
  "byte_39": 0.00025627883136852895,
  "byte_9d": 0.00025627883136852895,
  "byte_64": 0.0007688364941055869,
  "byte_65": 0.0010251153254741158,
  "byte_53": 0.0007688364941055869,
  "byte_3f": 0.0007688364941055869,
  "byte_4b": 0.0007688364941055869,
  "byte_a8": 0.00025627883136852895,
  "byte_3a": 0.0010251153254741158,
  "byte_74": 0.0007688364941055869,
  "byte_47": 0.0007688364941055869,
  "byte_ec": 0.0005125576627370579,
  "byte_38": 0.00025627883136852895,
  "byte_89": 0.0005125576627370579,
  "byte_56": 0.01717068170169144,
  "byte_f2": 0.0012813941568426447,
  "byte_f1": 0.0007688364941055869,
  "byte_5c": 0.0007688364941055869,
  "byte_97": 0.0010251153254741158,
  "byte_5a": 0.0015376729882111738,
  "byte_bb": 0.0007688364941055869,
  "byte_d9": 0.00025627883136852895,
  "byte_6e": 0.0007688364941055869,
  "byte_90": 0.05228088159917991,
  "byte_9a": 0.00025627883136852895,
  "byte_ee": 0.00025627883136852895,
  "byte_70": 0.0005125576627370579,
  "byte_82": 0.011276268580215274,
  "byte_84": 0.00743208610968734,
  "byte_cb": 0.0005125576627370579,
  "byte_59": 0.0007688364941055869,
  "byte_8d": 0.0010251153254741158,
  "byte_a5": 0.0012813941568426447,
  "byte_5b": 0.03357252690927729,
  "byte_4a": 0.0007688364941055869,
  "byte_95": 0.0015376729882111738,
  "byte_9b": 0.0007688364941055869,
  "byte_41": 0.0005125576627370579,
  "byte_a9": 0.0005125576627370579,
  "byte_05": 0.005894413121476166,
  "byte_9c": 0.0007688364941055869,
  "byte_7b": 0.00025627883136852895,
  "byte_85": 0.004356740133264992,
  "byte_db": 0.0005125576627370579,
  "byte_9f": 0.0010251153254741158,
  "byte_62": 0.0005125576627370579,
  "byte_ed": 0.0020502306509482316,
  "byte_e7": 0.00025627883136852895,
  "byte_e3": 0.0005125576627370579,
  "byte_8b": 0.0007688364941055869,
  "byte_0e": 0.0033316248077908763,
  "byte_34": 0.005125576627370579,
  "byte_15": 0.015633008713480268,
  "byte_22": 0.0012813941568426447,
  "byte_50": 0.01922091235263967,
  "byte_2b": 0.0015376729882111738,
  "byte_2f": 0.0010251153254741158,
  "byte_51": 0.007175807278318811,
  "byte_20": 0.02665299846232701,
  "byte_83": 0.008713480266529985,
  "byte_91": 0.01973347001537673,
  "byte_92": 0.012813941568426449,
  "byte_4d": 0.0010251153254741158,
  "byte_0a": 0.016914402870322913,
  "byte_19": 0.0033316248077908763,
  "byte_f3": 0.0017939518195797027,
  "byte_c4": 0.0025627883136852894,
  "byte_24": 0.0017939518195797027,
  "byte_66": 0.0007688364941055869,
  "byte_e4": 0.00025627883136852895,
  "byte_08": 0.0017939518195797027,
  "byte_0b": 0.0028190671450538185,
  "byte_44": 0.0010251153254741158,
  "byte_25": 0.0007688364941055869,
  "byte_8c": 0.0012813941568426447,
  "byte_5f": 0.0005125576627370579,
  "byte_b6": 0.0015376729882111738,
  "byte_b5": 0.0005125576627370579,
  "byte_d0": 0.0005125576627370579,
  "byte_fa": 0.00025627883136852895,
  "byte_e0": 0.0017939518195797027,
  "byte_ea": 0.00025627883136852895,
  "byte_87": 0.0023065094823167607,
  "byte_f9": 0.0015376729882111738,
  "byte_ab": 0.00025627883136852895,
  "byte_c9": 0.00025627883136852895,
  "byte_55": 0.0046130189646335215,
  "byte_0c": 0.0030753459764223477,
  "byte_1a": 0.00025627883136852895,
  "byte_7f": 0.0028190671450538185,
  "byte_42": 0.0012813941568426447,
  "byte_96": 0.0005125576627370579,
  "byte_33": 0.005125576627370579,
  "byte_54": 0.013582778062532035,
  "byte_a1": 0.0028190671450538185,
  "byte_88": 0.0017939518195797027,
  "byte_86": 0.0035879036391594054,
  "byte_93": 0.0035879036391594054,
  "byte_e1": 0.00025627883136852895,
  "byte_eb": 0.0010251153254741158,
  "byte_7d": 0.0005125576627370579,
  "byte_d1": 0.0005125576627370579,
  "byte_4f": 0.00025627883136852895,
  "byte_71": 0.0005125576627370579,
  "byte_1e": 0.0007688364941055869,
  "byte_c0": 0.00025627883136852895,
  "byte_f7": 0.0005125576627370579,
  "byte_b2": 0.00025627883136852895,
  "byte_29": 0.0005125576627370579,
  "byte_c8": 0.0012813941568426447,
  "byte_c7": 0.0007688364941055869,
  "byte_c3": 0.00025627883136852895,
  "byte_b9": 0.00025627883136852895,
  "byte_a3": 0.0025627883136852894,
  "byte_4c": 0.00025627883136852895,
  "byte_d4": 0.0017939518195797027,
  "byte_79": 0.0005125576627370579,
  "byte_fe": 0.004356740133264992,
  "byte_e6": 0.0005125576627370579,
  "byte_94": 0.0023065094823167607,
  "byte_12": 0.0007688364941055869,
  "byte_e9": 0.00025627883136852895,
  "byte_73": 0.0005125576627370579,
  "byte_78": 0.0007688364941055869,
  "byte_68": 0.0010251153254741158,
  "byte_9e": 0.00025627883136852895,
  "byte_13": 0.0007688364941055869,
  "byte_df": 0.00025627883136852895,
  "byte_f4": 0.0007688364941055869,
  "byte_ad": 0.0007688364941055869,
  "byte_2e": 0.00025627883136852895,
  "byte_07": 0.0017939518195797027,
  "byte_21": 0.00025627883136852895,
  "byte_d5": 0.0007688364941055869,
  "byte_17": 0.0012813941568426447,
  "byte_cc": 0.0005125576627370579,
  "byte_28": 0.0015376729882111738,
  "byte_3b": 0.0007688364941055869,
  "byte_dc": 0.0005125576627370579,
  "byte_1c": 0.0005125576627370579,
  "byte_b4": 0.0010251153254741158,
  "byte_b1": 0.0007688364941055869,
  "byte_ae": 0.0007688364941055869,
  "byte_69": 0.0007688364941055869,
  "byte_d3": 0.0005125576627370579,
  "byte_a4": 0.0007688364941055869,
  "byte_76": 0.00025627883136852895,
  "byte_0f": 0.0005125576627370579,
  "byte_3d": 0.00025627883136852895,
  "byte_bf": 0.00025627883136852895,
  "byte_f6": 0.00025627883136852895,
  "byte_4e": 0.0005125576627370579,
  "byte_f5": 0.0012813941568426447,
  "byte_f0": 0.00025627883136852895,
  "byte_6b": 0.0005125576627370579,
  "byte_cd": 0.00025627883136852895,
  "byte_da": 0.00025627883136852895,
  "byte_af": 0.0005125576627370579,
  "byte_6f": 0.00025627883136852895,
  "byte_1b": 0.0005125576627370579,
  "byte_e2": 0.0005125576627370579,
  "byte_c2": 0.0005125576627370579,
  "byte_b0": 0.0005125576627370579,
  "byte_fc": 0.0007688364941055869,
  "byte_37": 0.0005125576627370579,
  "byte_aa": 0.0005125576627370579,
  "byte_ef": 0.0005125576627370579,
  "byte_7a": 0.0005125576627370579,
  "byte_30": 0.00025627883136852895,
  "byte_58": 0.00025627883136852895,
  "byte_43": 0.00025627883136852895,
  "byte_d6": 0.00025627883136852895,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 3,
  "event_nums": 2,
  "creation_block": 6262613,
  "creation_timestamp": 1535952325,
  "life_time": 359021.0,
  "duration_seconds": 5095075.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 8.356033892073466e-06,
  "avg_gas_limit": 425070.0,
  "std_gas_limit": 519036.4783423223,
  "avg_gas_used": 416646.3333333333,
  "std_gas_used": 525025.5937077947,
  "avg_gas_price": 7206773760.0,
  "std_gas_price": 4535062942.854164,
  "transfer_num": 2,
  "atinversebrah_num": 1,
  "timeline_sequence": [
    [
      6262613,
      1535952325,
      0,
      31,
      0,
      1159095,
      4000000000,
      0,
      1,
      3022544,
      1159095,
      16858275
    ],
    [
      6262700,
      1535953476,
      3,
      128,
      0,
      56115,
      4000000000,
      0,
      1,
      7822020,
      37986,
      16858188
    ],
    [
      6621634,
      1541047400,
      94,
      14,
      0,
      60000,
      13620321280,
      0,
      1,
      449529,
      52858,
      16499254
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.11;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value)public  returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender)public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value)public  returns (bool);\n  function approve(address spender, uint256 value)public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev modifier to allow actions only when the contract IS paused\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev modifier to allow actions only when the contract IS NOT paused\n   */\n  modifier whenPaused {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() public onlyOwner whenNotPaused returns (bool) {\n    paused = true;\n    emit Pause();\n    return true;\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause()public onlyOwner whenPaused returns (bool) {\n    paused = false;\n    emit Unpause();\n    return true;\n  }\n}\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value)public returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value)public returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    emit Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender)public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n/**\n * @title BIMG Token\n * @dev BIMG is PausableToken\n */\ncontract BIMGToken is StandardToken, Pausable {\n\n  string public constant name = \"BIMG\";\n  string public constant symbol = \"BIMG\";\n  uint256 public constant decimals = 18;\n  \n  // lock\n  struct LockToken{\n      uint256 amount;\n      uint32  time;\n  }\n  struct LockTokenSet{\n      LockToken[] lockList;\n  }\n  mapping ( address => LockTokenSet ) addressTimeLock;\n  mapping ( address => bool ) lockAdminList;\n  event TransferWithLockEvt(address indexed from, address indexed to, uint256 value,uint32 lockTime );\n  /**\n    * @dev Creates a new MPKToken instance\n    */\n  constructor() public {\n    totalSupply = 10 * (10 ** 8) * (10 ** 18);\n    balances[msg.sender] = totalSupply;\n  }\n  \n  function transfer(address _to, uint256 _value)public whenNotPaused returns (bool) {\n    assert ( balances[msg.sender].sub( getLockAmount( msg.sender ) ) >= _value );\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value)public whenNotPaused returns (bool) {\n    assert ( balances[_from].sub( getLockAmount( msg.sender ) ) >= _value );\n    return super.transferFrom(_from, _to, _value);\n  }\n  function getLockAmount( address myaddress ) public view returns ( uint256 lockSum ) {\n        uint256 lockAmount = 0;\n        for( uint32 i = 0; i < addressTimeLock[myaddress].lockList.length; i ++ ){\n            if( addressTimeLock[myaddress].lockList[i].time > now ){\n                lockAmount += addressTimeLock[myaddress].lockList[i].amount;\n            }\n        }\n        return lockAmount;\n  }\n  \n  function getLockListLen( address myaddress ) public view returns ( uint256 lockAmount  ){\n      return addressTimeLock[myaddress].lockList.length;\n  }\n  \n  function getLockByIdx( address myaddress,uint32 idx ) public view returns ( uint256 lockAmount, uint32 lockTime ){\n      if( idx >= addressTimeLock[myaddress].lockList.length ){\n        return (0,0);          \n      }\n      lockAmount = addressTimeLock[myaddress].lockList[idx].amount;\n      lockTime = addressTimeLock[myaddress].lockList[idx].time;\n      return ( lockAmount,lockTime );\n  }\n  \n  function transferWithLock( address _to, uint256 _value,uint32 _lockTime )public whenNotPaused {\n      assert( lockAdminList[msg.sender] == true  );\n      assert( _lockTime > now  );\n      transfer( _to, _value );\n      bool needNewLock = true;\n      for( uint32 i = 0 ; i< addressTimeLock[_to].lockList.length; i ++ ){\n          if( addressTimeLock[_to].lockList[i].time < now ){\n              addressTimeLock[_to].lockList[i].time = _lockTime;\n              addressTimeLock[_to].lockList[i].amount = _value;\n              emit TransferWithLockEvt( msg.sender,_to,_value,_lockTime );\n              needNewLock = false;\n              break;\n          }\n      }\n      if( needNewLock == true ){\n          // add a lock\n          addressTimeLock[_to].lockList.length ++ ;\n          addressTimeLock[_to].lockList[(addressTimeLock[_to].lockList.length-1)].time = _lockTime;\n          addressTimeLock[_to].lockList[(addressTimeLock[_to].lockList.length-1)].amount = _value;\n          emit TransferWithLockEvt( msg.sender,_to,_value,_lockTime);\n      }\n  }\n  function setLockAdmin(address _to,bool canUse)public onlyOwner{\n      assert( lockAdminList[_to] != canUse );\n      lockAdminList[_to] = canUse;\n  }\n  function canUseLock()  public view returns (bool){\n      return lockAdminList[msg.sender];\n  }\n\n}"
}