{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH4 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH4 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH4 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH4 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH4 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH4 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH4 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH4 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI DUP1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP5 SWAP1 POP PUSH2 DUP6 DUP6 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI DUP1 PUSH20 AND PUSH4 CALLER DUP7 ADDRESS DUP8 PUSH1 MLOAD DUP6 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP5 PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST GAS CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH4 AND PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH4 AND PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND SUB SWAP3 POP PUSH2 EXP DUP2 SLOAD DUP2 PUSH4 MUL NOT AND SWAP1 DUP4 PUSH4 AND MUL OR SWAP1 SSTORE POP CALLER PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLER DUP4 DUP4 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 PUSH4 AND GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH4 AND PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH4 AND PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH4 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH4 MUL NOT AND SWAP1 DUP4 PUSH4 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND PUSH4 AND PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH2 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH2 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 DUP3 DUP3 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP2 PUSH4 AND PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 PUSH4 AND GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH4 AND PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH4 AND PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH4 AND SUB SWAP3 POP PUSH2 EXP DUP2 SLOAD DUP2 PUSH4 MUL NOT AND SWAP1 DUP4 PUSH4 AND MUL OR SWAP1 SSTORE POP DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH4 AND PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 PUSH4 AND PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD SWAP1 POP DUP2 PUSH4 AND PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH4 AND PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 PUSH4 AND PUSH4 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 PUSH1 SWAP1 SSTORE POP PUSH1 ADD PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xc SWAP2 PUSH6 UNKNOWN_0xd9 MSTORE8 MULMOD UNKNOWN_0xc9 UNKNOWN_0xa9 DUP11 UNKNOWN_0xd9 UNKNOWN_0xe0 UNKNOWN_0xed CODECOPY INVALID_0x7d",
  "opcode_entropy": 4.708253182104862,
  "opcode_count": 3267,
  "unique_opcodes": 68,
  "byte_entropy": 4.6451019590154,
  "byte_0x": 0.0001567152483936687,
  "byte_60": 0.0720890142610876,
  "byte_40": 0.009246199655226453,
  "byte_52": 0.01943269080081492,
  "byte_04": 0.010029775897194797,
  "byte_36": 0.0006268609935746748,
  "byte_10": 0.002194013477511362,
  "byte_61": 0.023820717755837644,
  "byte_00": 0.04293997805986523,
  "byte_fc": 0.0004701457451810061,
  "byte_57": 0.010813352139163141,
  "byte_35": 0.005798464190565742,
  "byte_7c": 0.0006268609935746748,
  "byte_01": 0.04199968656950321,
  "byte_90": 0.041372825575928536,
  "byte_63": 0.010029775897194797,
  "byte_ff": 0.3140573577809121,
  "byte_16": 0.025544585488167997,
  "byte_80": 0.03494750039178812,
  "byte_06": 0.002037298229117693,
  "byte_fd": 0.005328318445384736,
  "byte_de": 0.0006268609935746748,
  "byte_03": 0.009873060648801129,
  "byte_14": 0.004388026955022724,
  "byte_18": 0.0025074439742986993,
  "byte_0d": 0.0007835762419683435,
  "byte_dd": 0.0003134304967873374,
  "byte_8f": 0.0003134304967873374,
  "byte_2c": 0.0003134304967873374,
  "byte_8a": 0.0007835762419683435,
  "byte_ce": 0.0006268609935746748,
  "byte_6c": 0.0001567152483936687,
  "byte_c4": 0.0007835762419683435,
  "byte_98": 0.0001567152483936687,
  "byte_68": 0.0004701457451810061,
  "byte_df": 0.0003134304967873374,
  "byte_02": 0.005955179438959411,
  "byte_9e": 0.0003134304967873374,
  "byte_31": 0.0003134304967873374,
  "byte_3c": 0.0003134304967873374,
  "byte_e5": 0.0001567152483936687,
  "byte_67": 0.0004701457451810061,
  "byte_41": 0.0006268609935746748,
  "byte_70": 0.0004701457451810061,
  "byte_a0": 0.0001567152483936687,
  "byte_82": 0.01332079611346184,
  "byte_7a": 0.0007835762419683435,
  "byte_59": 0.0003134304967873374,
  "byte_84": 0.0034477354646607113,
  "byte_bd": 0.0003134304967873374,
  "byte_09": 0.0012537219871493496,
  "byte_74": 0.0007835762419683435,
  "byte_fe": 0.0004701457451810061,
  "byte_26": 0.0003134304967873374,
  "byte_d9": 0.0004701457451810061,
  "byte_46": 0.0001567152483936687,
  "byte_8d": 0.0001567152483936687,
  "byte_a5": 0.0003134304967873374,
  "byte_cb": 0.0003134304967873374,
  "byte_5b": 0.019119260304027583,
  "byte_c5": 0.0001567152483936687,
  "byte_95": 0.0006268609935746748,
  "byte_d8": 0.0004701457451810061,
  "byte_9b": 0.0003134304967873374,
  "byte_05": 0.0025074439742986993,
  "byte_1a": 0.0004701457451810061,
  "byte_a7": 0.0003134304967873374,
  "byte_e9": 0.0001567152483936687,
  "byte_45": 0.0001567152483936687,
  "byte_42": 0.0001567152483936687,
  "byte_a8": 0.0001567152483936687,
  "byte_b4": 0.0003134304967873374,
  "byte_d4": 0.0003134304967873374,
  "byte_b6": 0.0003134304967873374,
  "byte_08": 0.0018805829807240243,
  "byte_bb": 0.0001567152483936687,
  "byte_4e": 0.0004701457451810061,
  "byte_3a": 0.0003134304967873374,
  "byte_62": 0.0003134304967873374,
  "byte_ed": 0.0003134304967873374,
  "byte_3e": 0.0004701457451810061,
  "byte_07": 0.0018805829807240243,
  "byte_e7": 0.0007835762419683435,
  "byte_24": 0.0001567152483936687,
  "byte_9c": 0.0003134304967873374,
  "byte_f2": 0.0006268609935746748,
  "byte_e3": 0.0001567152483936687,
  "byte_8b": 0.0003134304967873374,
  "byte_b8": 0.0004701457451810061,
  "byte_f6": 0.0004701457451810061,
  "byte_2e": 0.0001567152483936687,
  "byte_e1": 0.0006268609935746748,
  "byte_af": 0.0003134304967873374,
  "byte_f1": 0.0006268609935746748,
  "byte_34": 0.0029775897194797055,
  "byte_15": 0.01692524682651622,
  "byte_0c": 0.001097006738755681,
  "byte_51": 0.009873060648801129,
  "byte_56": 0.00861933866165178,
  "byte_20": 0.03040275818837173,
  "byte_81": 0.028678890456041373,
  "byte_83": 0.007522331922896097,
  "byte_91": 0.01708196207490989,
  "byte_50": 0.03416392414981978,
  "byte_54": 0.007365616674502429,
  "byte_39": 0.0003134304967873374,
  "byte_1f": 0.0025074439742986993,
  "byte_0a": 0.004544742203416392,
  "byte_19": 0.001567152483936687,
  "byte_92": 0.003917881209841718,
  "byte_f3": 0.0023507287259050304,
  "byte_9a": 0.0003134304967873374,
  "byte_a2": 0.0006268609935746748,
  "byte_ef": 0.0003134304967873374,
  "byte_cf": 0.0004701457451810061,
  "byte_93": 0.001097006738755681,
  "byte_37": 0.001097006738755681,
  "byte_73": 0.014261087603823852,
  "byte_a9": 0.0007835762419683435,
  "byte_27": 0.0001567152483936687,
  "byte_6d": 0.0003134304967873374,
  "byte_4c": 0.0001567152483936687,
  "byte_7b": 0.0001567152483936687,
  "byte_0b": 0.0004701457451810061,
  "byte_c8": 0.0003134304967873374,
  "byte_e4": 0.0001567152483936687,
  "byte_1e": 0.0001567152483936687,
  "byte_44": 0.0003134304967873374,
  "byte_ab": 0.0004701457451810061,
  "byte_d0": 0.0001567152483936687,
  "byte_0e": 0.0012537219871493496,
  "byte_25": 0.0001567152483936687,
  "byte_2d": 0.0001567152483936687,
  "byte_b3": 0.0001567152483936687,
  "byte_ee": 0.0003134304967873374,
  "byte_13": 0.0007835762419683435,
  "byte_3f": 0.0003134304967873374,
  "byte_0f": 0.0004701457451810061,
  "byte_64": 0.0004701457451810061,
  "byte_77": 0.0001567152483936687,
  "byte_5e": 0.0003134304967873374,
  "byte_7f": 0.001097006738755681,
  "byte_ba": 0.0001567152483936687,
  "byte_c3": 0.0001567152483936687,
  "byte_11": 0.0014104372355430183,
  "byte_12": 0.0004701457451810061,
  "byte_7d": 0.0004701457451810061,
  "byte_bc": 0.0004701457451810061,
  "byte_ca": 0.0001567152483936687,
  "byte_66": 0.0004701457451810061,
  "byte_17": 0.001097006738755681,
  "byte_55": 0.0028208744710860366,
  "byte_85": 0.002194013477511362,
  "byte_ea": 0.0001567152483936687,
  "byte_eb": 0.0003134304967873374,
  "byte_e2": 0.0001567152483936687,
  "byte_b5": 0.0003134304967873374,
  "byte_33": 0.0023507287259050304,
  "byte_86": 0.0009402914903620122,
  "byte_30": 0.0003134304967873374,
  "byte_87": 0.0006268609935746748,
  "byte_b0": 0.0001567152483936687,
  "byte_3b": 0.0001567152483936687,
  "byte_d1": 0.0001567152483936687,
  "byte_5a": 0.0001567152483936687,
  "byte_58": 0.0004701457451810061,
  "byte_5f": 0.0006268609935746748,
  "byte_69": 0.0003134304967873374,
  "byte_65": 0.0007835762419683435,
  "byte_76": 0.0003134304967873374,
  "byte_f4": 0.0003134304967873374,
  "byte_99": 0.0003134304967873374,
  "byte_cd": 0.0003134304967873374,
  "byte_96": 0.0003134304967873374,
  "byte_72": 0.0006268609935746748,
  "byte_43": 0.0004701457451810061,
  "byte_b9": 0.0004701457451810061,
  "byte_9f": 0.0001567152483936687,
  "byte_c0": 0.0001567152483936687,
  "byte_e6": 0.0003134304967873374,
  "byte_ac": 0.0004701457451810061,
  "byte_e8": 0.0003134304967873374,
  "byte_a6": 0.0003134304967873374,
  "byte_1b": 0.0003134304967873374,
  "byte_48": 0.0001567152483936687,
  "byte_38": 0.0001567152483936687,
  "byte_7e": 0.0001567152483936687,
  "byte_8c": 0.0001567152483936687,
  "byte_6f": 0.0003134304967873374,
  "byte_6e": 0.0003134304967873374,
  "byte_6a": 0.0001567152483936687,
  "byte_4a": 0.0001567152483936687,
  "byte_a1": 0.0006268609935746748,
  "byte_d3": 0.0001567152483936687,
  "byte_5c": 0.0004701457451810061,
  "byte_f0": 0.0001567152483936687,
  "byte_2f": 0.0001567152483936687,
  "byte_f8": 0.0001567152483936687,
  "byte_b7": 0.0004701457451810061,
  "byte_d5": 0.0003134304967873374,
  "byte_c2": 0.0001567152483936687,
  "byte_dc": 0.0001567152483936687,
  "byte_a3": 0.0001567152483936687,
  "byte_89": 0.0001567152483936687,
  "byte_97": 0.0001567152483936687,
  "byte_c6": 0.0001567152483936687,
  "byte_4f": 0.0003134304967873374,
  "byte_53": 0.0001567152483936687,
  "byte_c9": 0.0001567152483936687,
  "byte_e0": 0.0001567152483936687,
  "byte_ec": 0.0001567152483936687,
  "byte_29": 0.0001567152483936687,
  "num_nodes": 189,
  "num_edges": 154,
  "avg_degree": 1.6296296296296295,
  "density": 0.004334121355397951,
  "connected_components": 49,
  "avg_clustering": 0.01234567901234568,
  "timeline_sequence": [],
  "sourcecode": "pragma solidity ^0.4.16;\n\ninterface tokenRecipient { function receiveApproval(address _from, uint32 _value, address _token, bytes _extraData) public; }\n\ncontract owned {\n    address public owner;\n\n    function owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    // \u5be6\u73fe\u6240\u6709\u6b0a\u8f49\u79fb\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}    \n    contract x32323 is owned {\n        function TokenERC20(\n            uint32 initialSupply,\n            string tokenName,\n            uint8 decimalUnits,\n            string tokenSymbol,\n            address centralMinter\n        ) {\n        if(centralMinter != 0 ) owner = centralMinter;\n        }\n        \n        // Public variables of the token\n        string public name;\n        string public symbol;\n        uint8 public decimals = 0;\n        // 18 decimals is the strongly suggested default, avoid changing it\n        uint32 public totalSupply;\n\n        // This creates an array with all balances\n        mapping (address => uint256) public balanceOf;\n        mapping (address => mapping (address => uint256)) public allowance;\n\n        // This generates a public event on the blockchain that will notify clients\n        event Transfer(address indexed from, address indexed to, uint32 value);\n\n        // This notifies clients about the amount burnt\n        event Burn(address indexed from, uint32 value);\n\n\n\n            /**\n           * Constructor function\n            *\n            * Initializes contract with initial supply tokens to the creator of the contract\n            */\n        function TokenERC20(\n            uint32 initialSupply,\n            string tokenName,\n            string tokenSymbol\n        ) public {\n            totalSupply =  23000000 ;  // Update total supply with the decimal amount\n            balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n            name = \"\u6e2c\u8a66\";                                   // Set the name for display purposes\n            symbol = \"\u6e2c\u8a66\";                               // Set the symbol for display purposes\n        }\n\n        /**\n        * Internal transfer, only can be called by this contract\n        */\n    \n        mapping (address => bool) public frozenAccount;\n        event FrozenFunds(address target, bool frozen);\n\n        function freezeAccount(address target, bool freeze) onlyOwner {\n            frozenAccount[target] = freeze;\n            FrozenFunds(target, freeze);\n        }\n    \n        function _transfer(address _from, address _to, uint32 _value) internal {\n            // Prevent transfer to 0x0 address. Use burn() instead\n            require(_to != 0x0);\n            // Check if the sender has enough\n            require(balanceOf[_from] >= _value);\n            // Check for overflows\n            require(balanceOf[_to] + _value > balanceOf[_to]);\n            // Save this for an assertion in the future\n            uint previousBalances = balanceOf[_from] + balanceOf[_to];\n            // Subtract from the sender\n            balanceOf[_from] -= _value;\n            // Add the same to the recipient\n            balanceOf[_to] += _value;\n            Transfer(_from, _to , _value);\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n            assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n        }\n\n        /**\n        * Transfer tokens\n        *\n        * Send `_value` tokens to `_to` from your account\n        *\n        * @param _to The address of the recipient\n        * @param _value the amount to send\n        */\n        function transfer(address _to, uint32 _value) public {\n            require(!frozenAccount[msg.sender]);\n            _transfer(msg.sender, _to, _value);\n        }\n\n        /**\n        * Transfer tokens from other address\n        *\n        * Send `_value` tokens to `_to` on behalf of `_from`\n        *\n        * @param _from The address of the sender\n        * @param _to The address of the recipient\n        * @param _value the amount to send\n        */\n        function transferFrom(address _from, address _to, uint32 _value) public returns (bool success) {\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n            allowance[_from][msg.sender] -= _value;\n            _transfer(_from, _to, _value);\n            return true;\n        }\n\n        /**\n        * Set allowance for other address\n        *\n        * Allows `_spender` to spend no more than `_value` tokens on your behalf\n        *\n        * @param _spender The address authorized to spend\n        * @param _value the max amount they can spend\n        */\n        function approve(address _spender, uint32 _value) public\n            returns (bool success) {\n            allowance[msg.sender][_spender] = _value;\n            return true;\n        }\n\n        /**\n        * Set allowance for other address and notify\n        *\n        * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it\n        *\n        * @param _spender The address authorized to spend\n        * @param _value the max amount they can spend\n        * @param _extraData some extra information to send to the approved contract\n        */\n        function approveAndCall(address _spender, uint32 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n            }\n        }\n\n         /**\n        * Destroy tokens\n        *\n        * Remove `_value` tokens from the system irreversibly\n        *\n        * @param _value the amount of money to burn\n        */\n        function burn(uint32 _value) public returns (bool success) {\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n            balanceOf[msg.sender] -= _value;            // Subtract from the sender\n            totalSupply -= _value;                      // Updates totalSupply\n            Burn(msg.sender,  _value);\n            return true;\n        }\n\n        /**\n        * Destroy tokens from other account\n        *\n        * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n        *\n        * @param _from the address of the sender\n        * @param _value the amount of money to burn\n        */\n        function burnFrom(address _from, uint32 _value) public returns (bool success) {\n            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n            balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n            allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n            totalSupply -= _value;                              // Update totalSupply\n            Burn(_from,  _value);\n            return true;\n        }\n    }"
}