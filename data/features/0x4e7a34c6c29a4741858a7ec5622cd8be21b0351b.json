{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST STOP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 CALLER PUSH2 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH32 DUP2 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 JUMPI POP PUSH3 PUSH1 SLOAD SUB TIMESTAMP LT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SELFDESTRUCT JUMPDEST JUMPDEST JUMP JUMPDEST PUSH3 DUP2 JUMP JUMPDEST PUSH1 DUP1 JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP2 POP DUP2 ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH32 CALLER DUP4 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND DUP3 ISZERO PUSH2 MUL DUP4 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND PUSH1 PUSH1 EXP OR SWAP1 SSTORE JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH3 MUL PUSH2 PUSH1 SLOAD PUSH2 JUMP JUMPDEST LT ISZERO SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 DUP1 JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 CALLVALUE GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 SLOAD CALLVALUE PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH4 DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH3 MUL PUSH2 PUSH1 SLOAD PUSH2 JUMP JUMPDEST LT ISZERO SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH4 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 SWAP1 SSTORE PUSH1 DUP3 SWAP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND SWAP1 SSTORE JUMPDEST JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 JUMPDEST POP DUP1 SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP3 POP DUP4 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD ISZERO DUP1 PUSH2 JUMPI POP PUSH1 PUSH2 DUP3 TIMESTAMP PUSH2 JUMP JUMPDEST GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD ISZERO DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD PUSH2 DUP5 PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH1 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH32 PUSH1 SLOAD DUP4 PUSH1 MLOAD SWAP2 DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 DUP3 SWAP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH1 JUMPDEST DUP5 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLVALUE SWAP3 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 JUMPDEST DUP5 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 DUP4 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 ADD MLOAD PUSH2 JUMP JUMPDEST PUSH1 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 POP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SWAP1 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH2 DUP6 DUP4 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 DUP4 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP4 ISZERO PUSH2 MUL DUP5 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH32 DUP6 DUP5 DUP5 PUSH1 MLOAD DUP1 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMPDEST POP POP POP POP POP JUMP JUMPDEST JUMPDEST JUMP JUMPDEST DUP2 DUP2 ADD DUP1 JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 DUP4 PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH8 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 DUP4 SUB DUP2 DUP2 SLT ISZERO PUSH2 JUMPI PUSH1 SUB JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP3 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP PUSH1 EXP SWAP2 POP PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 PUSH2 DUP5 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 JUMPDEST PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI TIMESTAMP PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 JUMPDEST POP SLOAD GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP TIMESTAMP PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 JUMPDEST POP PUSH1 ADD SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 JUMPDEST POP PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE SWAP1 DUP2 PUSH1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 ADD PUSH1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 ADD PUSH1 DUP3 ADD SLOAD DUP2 MSTORE POP POP SWAP2 POP PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP1 JUMP JUMPDEST DUP2 DUP2 MUL DUP1 JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP4 DUP4 PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE POP SWAP1 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0x4a ORIGIN CHAINID UNKNOWN_0xd0 SLT CALL UNKNOWN_0x2d AND UNKNOWN_0x4b UNKNOWN_0xce RETURNDATASIZE UNKNOWN_0x4d DUP11 INVALID_0x7a",
  "opcode_entropy": 4.584524876569693,
  "opcode_count": 3191,
  "unique_opcodes": 69,
  "byte_entropy": 5.842193331697372,
  "byte_60": 0.11635679966576144,
  "byte_40": 0.018383120952579903,
  "byte_52": 0.015040735324838104,
  "byte_36": 0.0006266973052015876,
  "byte_15": 0.024232295801128054,
  "byte_61": 0.06329642782536035,
  "byte_01": 0.029245874242740756,
  "byte_c7": 0.0012533946104031752,
  "byte_57": 0.030081470649676208,
  "byte_63": 0.010027156883225401,
  "byte_ff": 0.013578441612701065,
  "byte_e0": 0.0008355964069354502,
  "byte_02": 0.02360559849592647,
  "byte_0a": 0.014831836223104241,
  "byte_00": 0.04177982034677251,
  "byte_35": 0.003551284729475663,
  "byte_04": 0.008564863171088365,
  "byte_16": 0.015249634426571965,
  "byte_03": 0.02465009400459578,
  "byte_f9": 0.0004177982034677251,
  "byte_93": 0.002297890119072488,
  "byte_81": 0.027365782327135994,
  "byte_14": 0.011071652391894714,
  "byte_d3": 0.00020889910173386254,
  "byte_80": 0.03697514100689367,
  "byte_08": 0.007938165865886776,
  "byte_39": 0.0004177982034677251,
  "byte_de": 0.00020889910173386254,
  "byte_e9": 0.0006266973052015876,
  "byte_d2": 0.0014622937121370379,
  "byte_fc": 0.0008355964069354502,
  "byte_8a": 0.0012533946104031752,
  "byte_18": 0.0008355964069354502,
  "byte_65": 0.0008355964069354502,
  "byte_c5": 0.0004177982034677251,
  "byte_7d": 0.0006266973052015876,
  "byte_22": 0.0004177982034677251,
  "byte_1a": 0.0006266973052015876,
  "byte_ae": 0.0004177982034677251,
  "byte_34": 0.008355964069354502,
  "byte_59": 0.0006266973052015876,
  "byte_3b": 0.0010444955086693127,
  "byte_a0": 0.011280551493628577,
  "byte_b9": 0.0010444955086693127,
  "byte_a9": 0.00020889910173386254,
  "byte_42": 0.0020889910173386254,
  "byte_b6": 0.0008355964069354502,
  "byte_6f": 0.0004177982034677251,
  "byte_af": 0.0010444955086693127,
  "byte_41": 0.0004177982034677251,
  "byte_c0": 0.0008355964069354502,
  "byte_e1": 0.0010444955086693127,
  "byte_b5": 0.0006266973052015876,
  "byte_d4": 0.00020889910173386254,
  "byte_45": 0.0006266973052015876,
  "byte_ad": 0.0004177982034677251,
  "byte_55": 0.004595780238144976,
  "byte_cc": 0.00020889910173386254,
  "byte_4b": 0.0006266973052015876,
  "byte_b2": 0.0004177982034677251,
  "byte_78": 0.004177982034677251,
  "byte_f3": 0.005849174848548151,
  "byte_0e": 0.005013578441612701,
  "byte_51": 0.016085230833507415,
  "byte_a8": 0.0006266973052015876,
  "byte_23": 0.00020889910173386254,
  "byte_e3": 0.0008355964069354502,
  "byte_48": 0.0010444955086693127,
  "byte_5d": 0.0004177982034677251,
  "byte_9a": 0.0006266973052015876,
  "byte_5e": 0.0006266973052015876,
  "byte_d7": 0.0004177982034677251,
  "byte_ca": 0.0008355964069354502,
  "byte_5b": 0.0674744098600376,
  "byte_82": 0.006058073950282013,
  "byte_77": 0.0004177982034677251,
  "byte_df": 0.0004177982034677251,
  "byte_ec": 0.0006266973052015876,
  "byte_3c": 0.0010444955086693127,
  "byte_97": 0.0008355964069354502,
  "byte_79": 0.0008355964069354502,
  "byte_94": 0.0004177982034677251,
  "byte_37": 0.0008355964069354502,
  "byte_bc": 0.0008355964069354502,
  "byte_7c": 0.00020889910173386254,
  "byte_2e": 0.0006266973052015876,
  "byte_a3": 0.0004177982034677251,
  "byte_87": 0.0008355964069354502,
  "byte_21": 0.0012533946104031752,
  "byte_8d": 0.0012533946104031752,
  "byte_85": 0.001880091915604763,
  "byte_9f": 0.0004177982034677251,
  "byte_3e": 0.0008355964069354502,
  "byte_12": 0.0014622937121370379,
  "byte_a5": 0.0008355964069354502,
  "byte_cb": 0.0008355964069354502,
  "byte_90": 0.030708167954877793,
  "byte_75": 0.0006266973052015876,
  "byte_be": 0.0008355964069354502,
  "byte_cf": 0.0004177982034677251,
  "byte_66": 0.0008355964069354502,
  "byte_96": 0.0006266973052015876,
  "byte_95": 0.0004177982034677251,
  "byte_b1": 0.0006266973052015876,
  "byte_50": 0.021725506580321706,
  "byte_ba": 0.0006266973052015876,
  "byte_9d": 0.0006266973052015876,
  "byte_1c": 0.0004177982034677251,
  "byte_3f": 0.0010444955086693127,
  "byte_eb": 0.00020889910173386254,
  "byte_a1": 0.0020889910173386254,
  "byte_05": 0.003760183831209526,
  "byte_a6": 0.0006266973052015876,
  "byte_f2": 0.0008355964069354502,
  "byte_3a": 0.00020889910173386254,
  "byte_46": 0.0012533946104031752,
  "byte_86": 0.0006266973052015876,
  "byte_b3": 0.0008355964069354502,
  "byte_f0": 0.0004177982034677251,
  "byte_17": 0.0010444955086693127,
  "byte_43": 0.0006266973052015876,
  "byte_b8": 0.0004177982034677251,
  "byte_0b": 0.006475872153749739,
  "byte_c2": 0.0004177982034677251,
  "byte_c6": 0.0008355964069354502,
  "byte_25": 0.00020889910173386254,
  "byte_62": 0.001880091915604763,
  "byte_64": 0.001880091915604763,
  "byte_fd": 0.015249634426571965,
  "byte_06": 0.007102569458951326,
  "byte_e6": 0.00020889910173386254,
  "byte_4c": 0.0010444955086693127,
  "byte_e8": 0.0008355964069354502,
  "byte_9e": 0.0004177982034677251,
  "byte_4e": 0.0008355964069354502,
  "byte_d6": 0.0004177982034677251,
  "byte_8b": 0.0006266973052015876,
  "byte_f4": 0.0014622937121370379,
  "byte_f7": 0.0006266973052015876,
  "byte_f5": 0.0008355964069354502,
  "byte_bb": 0.0006266973052015876,
  "byte_6b": 0.0004177982034677251,
  "byte_0c": 0.003760183831209526,
  "byte_54": 0.016920827240442866,
  "byte_6a": 0.0008355964069354502,
  "byte_fb": 0.0006266973052015876,
  "byte_d0": 0.0033423856277418006,
  "byte_07": 0.004386881136411114,
  "byte_2a": 0.0004177982034677251,
  "byte_56": 0.02778358053060372,
  "byte_9b": 0.0004177982034677251,
  "byte_2d": 0.0010444955086693127,
  "byte_11": 0.008147064967620639,
  "byte_fe": 0.0025067892208063504,
  "byte_20": 0.014205138917902652,
  "byte_91": 0.012533946104031753,
  "byte_d5": 0.00020889910173386254,
  "byte_e7": 0.0004177982034677251,
  "byte_ed": 0.00020889910173386254,
  "byte_09": 0.004177982034677251,
  "byte_1f": 0.0004177982034677251,
  "byte_19": 0.001880091915604763,
  "byte_26": 0.0004177982034677251,
  "byte_53": 0.00020889910173386254,
  "byte_ab": 0.00020889910173386254,
  "byte_68": 0.0004177982034677251,
  "byte_99": 0.00020889910173386254,
  "byte_a2": 0.0004177982034677251,
  "byte_e2": 0.0004177982034677251,
  "byte_ee": 0.0012533946104031752,
  "byte_1d": 0.0008355964069354502,
  "byte_4a": 0.0010444955086693127,
  "byte_71": 0.0008355964069354502,
  "byte_f6": 0.0008355964069354502,
  "byte_89": 0.0012533946104031752,
  "byte_98": 0.0006266973052015876,
  "byte_24": 0.0010444955086693127,
  "byte_44": 0.0006266973052015876,
  "byte_db": 0.00020889910173386254,
  "byte_33": 0.003760183831209526,
  "byte_8f": 0.00020889910173386254,
  "byte_84": 0.0027156883225402132,
  "byte_83": 0.006684771255483601,
  "byte_0d": 0.003969082932943388,
  "byte_0f": 0.0029245874242740757,
  "byte_73": 0.0004177982034677251,
  "byte_10": 0.008147064967620639,
  "byte_c3": 0.0006266973052015876,
  "byte_7f": 0.0010444955086693127,
  "byte_27": 0.0010444955086693127,
  "byte_bf": 0.00020889910173386254,
  "byte_9c": 0.00020889910173386254,
  "byte_c8": 0.0004177982034677251,
  "byte_8e": 0.0004177982034677251,
  "byte_5c": 0.0004177982034677251,
  "byte_dc": 0.00020889910173386254,
  "byte_a7": 0.0004177982034677251,
  "byte_70": 0.00020889910173386254,
  "byte_67": 0.0006266973052015876,
  "byte_76": 0.00020889910173386254,
  "byte_c1": 0.0006266973052015876,
  "byte_ce": 0.0014622937121370379,
  "byte_32": 0.0004177982034677251,
  "byte_3d": 0.0004177982034677251,
  "byte_47": 0.00020889910173386254,
  "byte_c4": 0.00020889910173386254,
  "byte_1b": 0.0016711928138709003,
  "byte_28": 0.0004177982034677251,
  "byte_6e": 0.0004177982034677251,
  "byte_4d": 0.0004177982034677251,
  "byte_2c": 0.0004177982034677251,
  "byte_f1": 0.0012533946104031752,
  "byte_6d": 0.0006266973052015876,
  "byte_92": 0.002297890119072488,
  "byte_88": 0.0008355964069354502,
  "byte_74": 0.0004177982034677251,
  "byte_2b": 0.00020889910173386254,
  "byte_38": 0.0006266973052015876,
  "byte_31": 0.0004177982034677251,
  "byte_dd": 0.00020889910173386254,
  "byte_a4": 0.0006266973052015876,
  "byte_1e": 0.0004177982034677251,
  "byte_b0": 0.00020889910173386254,
  "byte_cd": 0.0004177982034677251,
  "byte_b7": 0.00020889910173386254,
  "byte_da": 0.0008355964069354502,
  "byte_13": 0.00020889910173386254,
  "byte_8c": 0.00020889910173386254,
  "byte_5f": 0.00020889910173386254,
  "byte_e5": 0.00020889910173386254,
  "byte_5a": 0.0004177982034677251,
  "byte_c9": 0.0006266973052015876,
  "byte_7a": 0.0006266973052015876,
  "byte_72": 0.00020889910173386254,
  "byte_30": 0.0004177982034677251,
  "byte_58": 0.00020889910173386254,
  "byte_6c": 0.0004177982034677251,
  "byte_29": 0.00020889910173386254,
  "num_nodes": 20,
  "num_edges": 19,
  "avg_degree": 1.9,
  "density": 0.05,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 77,
  "event_nums": 24,
  "creation_block": 4333154,
  "creation_timestamp": 1507030957,
  "life_time": 1085666.0,
  "duration_seconds": 16382619.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 21,
  "num_buyers": 2,
  "num_sellers": 19,
  "num_creator_transfers": 14,
  "buy_amt": 5.272945818633241e+18,
  "sell_amt": 2.176186098641102e+19,
  "avg_value": 3.466000872441572e+17,
  "txn_per_block": 7.092414156458656e-05,
  "avg_gas_limit": 158180.5064935065,
  "std_gas_limit": 347292.06277308584,
  "avg_gas_used": 104162.61038961039,
  "std_gas_used": 220913.86413590837,
  "avg_gas_price": 20907357282.597404,
  "std_gas_price": 12445737840.905138,
  "exchangeratechanged_num": 10,
  "invested_num": 14,
  "setexchangerateagent_num": 1,
  "setexchangerate_num": 21,
  "invest_num": 1,
  "refund_num": 5,
  "loadrefund_num": 2,
  "timeline_sequence": [
    [
      4333154,
      1507030957,
      0,
      11,
      0,
      3037840,
      44000000000,
      0,
      0,
      2072846,
      1837839,
      18787994
    ],
    [
      4333309,
      1507035973,
      1,
      36,
      100000000000000000,
      21000,
      40000000000,
      1,
      0,
      1242475,
      21000,
      18787839
    ],
    [
      4333412,
      1507039090,
      2,
      2,
      0,
      143677,
      44000000000,
      0,
      0,
      300698,
      43676,
      18787736
    ],
    [
      4333465,
      1507040668,
      3,
      11,
      0,
      165302,
      44000000000,
      0,
      0,
      639343,
      65301,
      18787683
    ],
    [
      4333794,
      1507050454,
      0,
      74,
      215807370000000000,
      210000,
      21000000000,
      1,
      0,
      6004936,
      210000,
      18787354
    ],
    [
      4333807,
      1507050827,
      2,
      49,
      1000000000000000000,
      365032,
      21000000000,
      1,
      0,
      2361592,
      365032,
      18787341
    ],
    [
      4333833,
      1507051371,
      3,
      19,
      1000000000000000000,
      21000,
      21000000000,
      1,
      0,
      420000,
      21000,
      18787315
    ],
    [
      4333849,
      1507051855,
      4,
      2,
      1000000000000000000,
      21000,
      32000000000,
      1,
      0,
      63000,
      21000,
      18787299
    ],
    [
      4333859,
      1507052151,
      5,
      129,
      1000000000000000000,
      22000,
      20000000000,
      1,
      0,
      5041166,
      22000,
      18787289
    ],
    [
      4333867,
      1507052393,
      6,
      87,
      1000000000000000000,
      24000,
      20000000000,
      1,
      0,
      4270189,
      24000,
      18787281
    ],
    [
      4333881,
      1507052759,
      7,
      112,
      1000000000000000000,
      40000,
      20000000000,
      1,
      0,
      5471828,
      40000,
      18787267
    ],
    [
      4333887,
      1507053059,
      8,
      158,
      1000000000000000000,
      374311,
      20000000000,
      1,
      0,
      6592507,
      374311,
      18787261
    ],
    [
      4333898,
      1507053444,
      9,
      157,
      1000000000000000000,
      25000,
      20000000000,
      1,
      0,
      3383904,
      25000,
      18787250
    ],
    [
      4333908,
      1507053717,
      10,
      151,
      1000000000000000000,
      50000,
      25000000000,
      1,
      0,
      3340971,
      50000,
      18787240
    ],
    [
      4333918,
      1507053928,
      11,
      25,
      1000000000000000000,
      50000,
      25000000000,
      1,
      0,
      1500189,
      50000,
      18787230
    ],
    [
      4333926,
      1507054087,
      12,
      27,
      1000000000000000000,
      500000,
      25000000000,
      1,
      0,
      2006006,
      500000,
      18787222
    ],
    [
      4333941,
      1507054537,
      13,
      28,
      1000000000000000000,
      376772,
      21000000000,
      1,
      0,
      2857867,
      376772,
      18787207
    ],
    [
      4333944,
      1507054585,
      87,
      146,
      100000000000000000,
      200000,
      25000000000,
      1,
      0,
      5466359,
      200000,
      18787204
    ],
    [
      4333984,
      1507055918,
      14,
      66,
      1000000000000000000,
      29000,
      25000000000,
      1,
      0,
      1415051,
      29000,
      18787164
    ],
    [
      4334064,
      1507058332,
      0,
      99,
      3435363633240579,
      321270,
      21000000000,
      0,
      0,
      5844170,
      221269,
      18787084
    ],
    [
      4334215,
      1507063232,
      15,
      32,
      1000000000000000000,
      216648,
      25000000000,
      0,
      0,
      1847540,
      144431,
      18786933
    ],
    [
      4334353,
      1507066952,
      88,
      37,
      100000000000000000,
      200000,
      25000000000,
      0,
      0,
      4816091,
      144431,
      18786795
    ],
    [
      4335329,
      1507096695,
      6,
      6,
      0,
      135940,
      25000000000,
      1,
      0,
      749601,
      135940,
      18785819
    ],
    [
      4335377,
      1507097920,
      7,
      81,
      0,
      50946,
      25000000000,
      1,
      0,
      6678437,
      50946,
      18785771
    ],
    [
      4335527,
      1507103111,
      8,
      47,
      0,
      135946,
      25000000000,
      1,
      0,
      2033033,
      135946,
      18785621
    ],
    [
      4335545,
      1507103639,
      9,
      30,
      0,
      135946,
      25000000000,
      0,
      0,
      1452459,
      35945,
      18785603
    ],
    [
      4335826,
      1507111894,
      10,
      30,
      0,
      65952,
      25000000000,
      1,
      0,
      1203709,
      65952,
      18785322
    ],
    [
      4335831,
      1507111979,
      11,
      43,
      0,
      65952,
      25000000000,
      0,
      0,
      4525761,
      35951,
      18785317
    ],
    [
      4335917,
      1507114154,
      89,
      32,
      100000000000000000,
      200000,
      25000000000,
      0,
      0,
      1261081,
      94216,
      18785231
    ],
    [
      4335991,
      1507116439,
      12,
      95,
      0,
      135952,
      25000000000,
      1,
      0,
      6665658,
      135952,
      18785157
    ],
    [
      4335997,
      1507116622,
      13,
      6,
      0,
      65952,
      25000000000,
      0,
      0,
      287045,
      35951,
      18785151
    ],
    [
      4336555,
      1507132594,
      14,
      83,
      0,
      65940,
      25000000000,
      0,
      0,
      6582825,
      35945,
      18784593
    ],
    [
      4336846,
      1507141589,
      0,
      7,
      100000000000000000,
      210000,
      40000000000,
      0,
      0,
      862394,
      144431,
      18784302
    ],
    [
      4337024,
      1507146768,
      15,
      3,
      0,
      65952,
      40000000000,
      0,
      0,
      171302,
      35951,
      18784124
    ],
    [
      4337086,
      1507148354,
      28,
      24,
      100000000000000000,
      250000,
      21000000000,
      0,
      0,
      4242958,
      144431,
      18784062
    ],
    [
      4338287,
      1507184178,
      16,
      6,
      0,
      65946,
      40000000000,
      1,
      0,
      531670,
      65946,
      18782861
    ],
    [
      4338320,
      1507184975,
      17,
      17,
      0,
      65946,
      40000000000,
      1,
      0,
      1920608,
      65946,
      18782828
    ],
    [
      4341579,
      1507282375,
      1900281,
      50,
      61752100000000000,
      244432,
      31000000000,
      0,
      0,
      4850814,
      144431,
      18779569
    ],
    [
      4344679,
      1507377154,
      18,
      13,
      0,
      65940,
      31000000000,
      0,
      0,
      467109,
      35945,
      18776469
    ],
    [
      4345121,
      1507390402,
      19,
      62,
      0,
      65946,
      21000000000,
      1,
      0,
      2428214,
      65946,
      18776027
    ],
    [
      4345128,
      1507390633,
      20,
      75,
      0,
      65940,
      21000000000,
      1,
      0,
      2796442,
      65940,
      18776020
    ],
    [
      4345134,
      1507390762,
      21,
      64,
      0,
      135940,
      21000000000,
      0,
      0,
      2558827,
      35945,
      18776014
    ],
    [
      4345445,
      1507399486,
      22,
      223,
      0,
      135946,
      31000000000,
      0,
      0,
      6302986,
      35951,
      18775703
    ],
    [
      4345743,
      1507408395,
      23,
      15,
      0,
      135940,
      31000000000,
      1,
      0,
      1196498,
      135940,
      18775405
    ],
    [
      4347299,
      1507455025,
      24,
      24,
      0,
      135940,
      31000000000,
      0,
      0,
      1684104,
      35945,
      18773849
    ],
    [
      4350373,
      1507546747,
      41,
      32,
      500000000000000000,
      200000,
      21000000000,
      0,
      0,
      1226382,
      144431,
      18770775
    ],
    [
      4355273,
      1507693140,
      1,
      144,
      1500000000000000000,
      218619,
      25866510760,
      0,
      0,
      6252343,
      145745,
      18765875
    ],
    [
      4356019,
      1507716254,
      1,
      68,
      85149000000000000,
      210000,
      21000000000,
      0,
      0,
      4764416,
      145745,
      18765129
    ],
    [
      4359206,
      1507811753,
      2,
      128,
      781609355000000000,
      210000,
      21000000000,
      0,
      0,
      6151410,
      95530,
      18761942
    ],
    [
      4363090,
      1507925830,
      14,
      71,
      200000000000000000,
      145745,
      30000000000,
      0,
      0,
      3392258,
      145745,
      18758058
    ],
    [
      4363842,
      1507948507,
      0,
      137,
      342000000000000000,
      218617,
      24000000000,
      0,
      0,
      5580224,
      145745,
      18757306
    ],
    [
      4364557,
      1507970072,
      25,
      102,
      0,
      135946,
      21000000000,
      1,
      0,
      4040897,
      135946,
      18756591
    ],
    [
      4380661,
      1508294693,
      0,
      45,
      399000000000000000,
      220588,
      1000000000,
      0,
      1,
      1693580,
      147059,
      18740487
    ],
    [
      4388373,
      1508401486,
      827568,
      6,
      513107790000000000,
      125000,
      42000000000,
      0,
      0,
      397316,
      124984,
      18732775
    ],
    [
      4522688,
      1510269637,
      6,
      76,
      0,
      210000,
      21000000000,
      0,
      0,
      2323881,
      25315,
      18598460
    ],
    [
      4522730,
      1510270234,
      7,
      2,
      0,
      210000,
      21000000000,
      0,
      0,
      296315,
      25315,
      18598418
    ],
    [
      4534099,
      1510427350,
      114,
      2,
      0,
      200000,
      25000000000,
      0,
      0,
      393800,
      25315,
      18587049
    ],
    [
      4540392,
      1510514170,
      115,
      3,
      0,
      200000,
      25000000000,
      0,
      0,
      176404,
      25315,
      18580756
    ],
    [
      4540709,
      1510518447,
      11,
      4,
      300000000000000000,
      68569,
      21000000000,
      0,
      1,
      145842,
      45713,
      18580439
    ],
    [
      4540751,
      1510518944,
      26,
      22,
      2200000000000000000,
      46069,
      21000000000,
      0,
      1,
      1238488,
      30713,
      18580397
    ],
    [
      4541084,
      1510523452,
      8,
      137,
      0,
      210000,
      21000000000,
      0,
      0,
      4969624,
      25315,
      18580064
    ],
    [
      4541153,
      1510524551,
      2,
      31,
      60000000000000000,
      200000,
      15000000000,
      0,
      0,
      947266,
      25036,
      18579995
    ],
    [
      4334064,
      1507058332,
      0,
      0,
      3435363633240579,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4334215,
      1507063232,
      0,
      0,
      1000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4334353,
      1507066952,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4335917,
      1507114154,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4336846,
      1507141589,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4337086,
      1507148354,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4341579,
      1507282375,
      0,
      0,
      61752100000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4350373,
      1507546747,
      0,
      0,
      500000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4355273,
      1507693140,
      0,
      0,
      1500000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4356019,
      1507716254,
      0,
      0,
      85149000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4359206,
      1507811753,
      0,
      0,
      781609355000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4363090,
      1507925830,
      0,
      0,
      200000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4363842,
      1507948507,
      0,
      0,
      342000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4380661,
      1508294693,
      0,
      0,
      399000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5418820,
      1523413576,
      0,
      0,
      7777777777,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.13;\n/// @title Ownable contract - base contract with an owner\ncontract Ownable {\n    address public owner;\n\n    function Ownable() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\n/// @title Killable contract - base contract that can be killed by owner. All funds in contract will be sent to the owner.\ncontract Killable is Ownable {\n    function kill() onlyOwner {\n        selfdestruct(owner);\n    }\n}\n\n/// @title Haltable contract - abstract contract that allows children to implement an emergency stop mechanism.\n/// Originally envisioned in FirstBlood ICO contract.\ncontract Haltable is Ownable {\n    bool public halted;\n\n    modifier stopInEmergency {\n        require(!halted);\n        _;\n    }\n\n    modifier onlyInEmergency {\n        require(halted);\n        _;\n    }\n\n    /// called by the owner on emergency, triggers stopped state\n    function halt() external onlyOwner {\n        halted = true;\n    }\n\n    /// called by the owner on end of emergency, returns to normal state\n    function unhalt() external onlyOwner onlyInEmergency {\n        halted = false;\n    }\n}\n\n/// @title Migrations contract - abstract contract that allows migrate to new address.\ncontract Migrations is Ownable {\n    uint public lastCompletedMigration;\n\n    function setCompleted(uint completed) onlyOwner {\n        lastCompletedMigration = completed;\n    }\n\n    function upgrade(address newAddress) onlyOwner {\n        Migrations upgraded = Migrations(newAddress);\n        upgraded.setCompleted(lastCompletedMigration);\n    }\n}\n/// @title Pausable contract - abstract contract that allows children to implement an emergency stop mechanism.\ncontract Pausable is Ownable {\n    bool public stopped;\n\n    modifier stopInEmergency {\n        if (!stopped) {\n            _;\n        }\n    }\n\n    modifier onlyInEmergency {\n        if (stopped) {\n            _;\n        }\n    }\n\n    /// called by the owner on emergency, triggers stopped state\n    function emergencyStop() external onlyOwner {\n        stopped = true;\n    }\n\n    /// called by the owner on end of emergency, returns to normal state\n    function release() external onlyOwner onlyInEmergency {\n        stopped = false;\n    }\n}\n\n/// @title ERC20 interface see https://github.com/ethereum/EIPs/issues/20\ncontract ERC20 {\n    uint public totalSupply;\n    function balanceOf(address who) constant returns (uint);\n    function allowance(address owner, address spender) constant returns (uint);\n    function mint(address receiver, uint amount);\n    function transfer(address to, uint value) returns (bool ok);\n    function transferFrom(address from, address to, uint value) returns (bool ok);\n    function approve(address spender, uint value) returns (bool ok);\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n}\n\n\n/// @title SafeMath contract - math operations with safety checks\ncontract SafeMath {\n    function safeMul(uint a, uint b) internal returns (uint) {\n        uint c = a * b;\n        return c;\n    }\n\n    function safeDiv(uint a, uint b) internal returns (uint) {\n        uint c = a / b;\n        return c;\n    }\n\n    function safeSub(uint a, uint b) internal returns (uint) {\n        return a - b;\n    }\n\n    function safeAdd(uint a, uint b) internal returns (uint) {\n        uint c = a + b;\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\n/// @title ShareEstateToken contract - ERC20 token with Short Hand Attack and approve() race condition mitigation.\ncontract ShareEstateToken is SafeMath, ERC20, Ownable {\n    string public name = \"ShareEstate Token\";\n    string public symbol = \"SRE\";\n    uint public decimals = 4;\n\n    /// contract that is allowed to create new tokens and allows unlift the transfer limits on this token\n    address public crowdsaleAgent;\n    /// A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.\n    bool public released = false;\n    /// approve() allowances\n    mapping (address => mapping (address => uint)) allowed;\n    /// holder balances\n    mapping(address => uint) balances;\n\n    /// @dev Limit token transfer until the crowdsale is over.\n    modifier canTransfer() {\n        if(!released) {\n            require(msg.sender == crowdsaleAgent);\n        }\n        _;\n    }\n\n    /// @dev The function can be called only before or after the tokens have been releasesd\n    /// @param _released token transfer and mint state\n    modifier inReleaseState(bool _released) {\n        require(_released == released);\n        _;\n    }\n\n    /// @dev The function can be called only by release agent.\n    modifier onlyCrowdsaleAgent() {\n        require(msg.sender == crowdsaleAgent);\n        _;\n    }\n\n    /// @dev Fix for the ERC20 short address attack http://vessenes.com/the-erc20-short-address-attack-explained/\n    /// @param size payload size\n    modifier onlyPayloadSize(uint size) {\n        require(msg.data.length >= size + 4);\n        _;\n    }\n\n    /// @dev Make sure we are not done yet.\n    modifier canMint() {\n        require(!released);\n        _;\n    }\n\n    /// @dev Main Constructor\n    function ShareEstateToken() {\n        owner = msg.sender;\n    }\n\n    /// Fallback method will buyout tokens\n    function() payable {\n        revert();\n    }\n\n    /// @dev Create new tokens and allocate them to an address. Only callable by a crowdsale contract\n    /// @param receiver Address of receiver\n    /// @param amount  Number of tokens to issue.\n    function mint(address receiver, uint amount) onlyCrowdsaleAgent canMint public {\n        totalSupply = safeAdd(totalSupply, amount);\n        balances[receiver] = safeAdd(balances[receiver], amount);\n        Transfer(0, receiver, amount);\n    }\n\n    /// @dev Set the contract that can call release and make the token transferable.\n    /// @param _crowdsaleAgent crowdsale contract address\n    function setCrowdsaleAgent(address _crowdsaleAgent) onlyOwner inReleaseState(false) public {\n        crowdsaleAgent = _crowdsaleAgent;\n    }\n    /// @dev One way function to release the tokens to the wild. Can be called only from the release agent that is the final ICO contract. It is only called if the crowdsale has been success (first milestone reached).\n    function releaseTokenTransfer() public onlyCrowdsaleAgent {\n        released = true;\n    }\n    /// @dev Tranfer tokens to address\n    /// @param _to dest address\n    /// @param _value tokens amount\n    /// @return transfer result\n    function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) canTransfer returns (bool success) {\n        balances[msg.sender] = safeSub(balances[msg.sender], _value);\n        balances[_to] = safeAdd(balances[_to], _value);\n\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /// @dev Tranfer tokens from one address to other\n    /// @param _from source address\n    /// @param _to dest address\n    /// @param _value tokens amount\n    /// @return transfer result\n    function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(2 * 32) canTransfer returns (bool success) {\n        var _allowance = allowed[_from][msg.sender];\n\n        balances[_to] = safeAdd(balances[_to], _value);\n        balances[_from] = safeSub(balances[_from], _value);\n        allowed[_from][msg.sender] = safeSub(_allowance, _value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    /// @dev Tokens balance\n    /// @param _owner holder address\n    /// @return balance amount\n    function balanceOf(address _owner) constant returns (uint balance) {\n        return balances[_owner];\n    }\n\n    /// @dev Approve transfer\n    /// @param _spender holder address\n    /// @param _value tokens amount\n    /// @return result\n    function approve(address _spender, uint _value) returns (bool success) {\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require ((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /// @dev Token allowance\n    /// @param _owner holder address\n    /// @param _spender spender address\n    /// @return remain amount\n    function allowance(address _owner, address _spender) constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n/// @title ShareEstateTokenCrowdsale contract - contract for token sales.\ncontract ShareEstateTokenCrowdsale is Haltable, Killable, SafeMath {\n\n    /// Prefunding goal in USD cents, if the prefunding goal is reached, pre ICO will stop\n    uint public constant PRE_FUNDING_GOAL = 1e6 * PRICE;\n\n    /// Miminal tokens funding goal in USD cents, if this goal isn't reached during ICO, refund will begin\n    uint public constant MIN_PRE_FUNDING_GOAL = 2e5 * PRICE;\n\n    /// Percent of bonus tokens team receives from each investment\n    uint public constant TEAM_BONUS_PERCENT = 24;\n\n    /// The token price in USD cents\n    uint constant public PRICE = 100;\n\n    /// Duration of the pre-ICO stage\n    uint constant public PRE_ICO_DURATION = 5 weeks;\n\n    /// The token we are selling\n\n    ShareEstateToken public token;\n\n    /// tokens will be transfered from this address\n    address public multisigWallet;\n\n    /// the UNIX timestamp start date of the crowdsale\n    uint public startsAt;\n\n    /// the UNIX timestamp end date of the crowdsale\n    uint public preIcoEndsAt;\n\n    /// the number of tokens already sold through this contract\n    uint public tokensSold = 0;\n\n    /// How many wei of funding we have raised\n    uint public weiRaised = 0;\n\n    /// How many distinct addresses have invested\n    uint public investorCount = 0;\n\n    /// How much wei we have returned back to the contract after a failed crowdfund.\n    uint public loadedRefund = 0;\n\n    /// How much wei we have given back to investors.\n    uint public weiRefunded = 0;\n\n    /// Has this crowdsale been finalized\n    bool public finalized;\n\n    /// USD to Ether rate in cents\n    uint public exchangeRate;\n\n    /// exchangeRate timestamp\n    uint public exchangeRateTimestamp;\n\n    /// External agent that will can change exchange rate\n    address public exchangeRateAgent;\n\n    /// How much ETH each address has invested to this crowdsale\n    mapping (address => uint256) public investedAmountOf;\n\n    /// How much tokens this crowdsale has credited for each investor address\n    mapping (address => uint256) public tokenAmountOf;\n\n    /// Define preICO pricing schedule using milestones.\n    struct Milestone {\n    // UNIX timestamp when this milestone kicks in\n    uint start;\n    // UNIX timestamp when this milestone kicks out\n    uint end;\n    // How many % tokens will add\n    uint bonus;\n    }\n\n    Milestone[] public milestones;\n\n    /// State machine\n    /// Preparing: All contract initialization calls and variables have not been set yet\n    /// Prefunding: We have not passed start time yet\n    /// PreFundingSuccess: Minimum funding goal reached\n    /// Failure: Minimum funding goal not reached before ending time\n    /// Finalized: The finalized has been called and succesfully executed\\\n    /// Refunding: Refunds are loaded on the contract for reclaim.\n    enum State{Unknown, Preparing, PreFunding, PreFundingSuccess, Failure, Finalized, Refunding}\n\n    /// A new investment was made\n    event Invested(address investor, uint weiAmount, uint tokenAmount);\n    /// Refund was processed for a contributor\n    event Refund(address investor, uint weiAmount);\n    /// Crowdsale end time has been changed\n    event preIcoEndsAtChanged(uint endsAt);\n    /// Calculated new\n    event ExchangeRateChanged(uint oldValue, uint newValue);\n\n    /// @dev Modified allowing execution only if the crowdsale is currently running\n    modifier inState(State state) {\n        require(getState() == state);\n        _;\n    }\n\n    modifier onlyExchangeRateAgent() {\n        require(msg.sender == exchangeRateAgent);\n        _;\n    }\n\n    /// @dev Constructor\n    /// @param _token Solar Dao token address\n    /// @param _multisigWallet team wallet\n    /// @param _preInvestStart preICO start date\n    /// @param _preInvestStop token ICO end date\n    function ShareEstateTokenCrowdsale(address _token, address _multisigWallet, uint _preInvestStart, uint _preInvestStop) {\n        require(_multisigWallet != 0);\n        require(_preInvestStart != 0);\n        require(_preInvestStop != 0);\n        require(_preInvestStart < _preInvestStop);\n\n        token = ShareEstateToken(_token);\n\n        multisigWallet = _multisigWallet;\n        startsAt = _preInvestStart;\n        preIcoEndsAt = _preInvestStop;\n        var preIcoBonuses = [uint(65), 50, 40, 35, 30];\n        for (uint i = 0; i < preIcoBonuses.length; i++) {\n            milestones.push(Milestone(_preInvestStart + i * 1 weeks, _preInvestStart + (i + 1) * 1 weeks, preIcoBonuses[i]));\n        }\n    }\n\n    function() payable {\n        buy();\n    }\n\n    /// @dev Get the current milestone or bail out if we are not in the milestone periods.\n    /// @return Milestone current bonus milestone\n    function getCurrentMilestone() private constant returns (Milestone) {\n        for (uint i = 0; i < milestones.length; i++) {\n            if (milestones[i].start <= now && milestones[i].end > now) {\n                return milestones[i];\n            }\n        }\n    }\n\n    /// @dev Make an investment. Crowdsale must be running for one to invest.\n    /// @param receiver The Ethereum address who receives the tokens\n    function investInternal(address receiver) stopInEmergency private {\n        var state = getState();\n        require(state == State.PreFunding);\n\n        uint weiAmount = msg.value;\n        uint tokensAmount = calculateTokens(weiAmount);\n\n        if(state == State.PreFunding) {\n            tokensAmount += safeDiv(safeMul(tokensAmount, getCurrentMilestone().bonus), 100);\n        }\n\n        if(investedAmountOf[receiver] == 0) {\n            // A new investor\n            investorCount++;\n        }\n\n        // Update investor\n        investedAmountOf[receiver] = safeAdd(investedAmountOf[receiver], weiAmount);\n        tokenAmountOf[receiver] = safeAdd(tokenAmountOf[receiver], tokensAmount);\n        // Update totals\n        weiRaised = safeAdd(weiRaised, weiAmount);\n        tokensSold = safeAdd(tokensSold, tokensAmount);\n\n        assignTokens(receiver, tokensAmount);\n        var teamBonusTokens = safeDiv(safeMul(tokensAmount, TEAM_BONUS_PERCENT), 100 - TEAM_BONUS_PERCENT);\n        assignTokens(multisigWallet, teamBonusTokens);\n\n        multisigWallet.transfer(weiAmount);\n        // Tell us invest was success\n        Invested(receiver, weiAmount, tokensAmount);\n    }\n\n    /// @dev Allow anonymous contributions to this crowdsale.\n    /// @param receiver The Ethereum address who receives the tokens\n    function invest(address receiver) public payable {\n        investInternal(receiver);\n    }\n\n    /// @dev The basic entry point to participate the crowdsale process.\n    function buy() public payable {\n        invest(msg.sender);\n    }\n\n    /// @dev Finalize a succcesful crowdsale.\n    function finalize() public inState(State.PreFundingSuccess) onlyOwner stopInEmergency {\n        require(!finalized);\n\n        finalized = true;\n        finalizeCrowdsale();\n    }\n\n    /// @dev Finalize a succcesful crowdsale.\n    function finalizeCrowdsale() internal {\n        //assignTokens(owner, safeAdd(safeSub(uint(MAX_TOKENS_TO_SOLD), tokensSold), TEAM_TOKENS_AMOUNT));\n        //token.releaseTokenTransfer(); // Will be released in result of ICO\n    }\n\n    /// @dev Method for setting USD to Ether rate from Poloniex\n    /// @param value USD amout in cents for 1 Ether\n    /// @param time timestamp\n    function setExchangeRate(uint value, uint time) onlyExchangeRateAgent {\n        require(value > 0);\n        require(time > 0);\n        require(exchangeRateTimestamp == 0 || getDifference(int(time), int(now)) <= 1 minutes);\n        require(exchangeRate == 0 || (getDifference(int(value), int(exchangeRate)) * 100 / exchangeRate <= 30));\n\n        ExchangeRateChanged(exchangeRate, value);\n        exchangeRate = value;\n        exchangeRateTimestamp = time;\n    }\n\n    /// @dev Method set exchange rate agent\n    /// @param newAgent new agent\n    function setExchangeRateAgent(address newAgent) onlyOwner {\n        if (newAgent != address(0)) {\n            exchangeRateAgent = newAgent;\n        }\n    }\n\n    function getDifference(int one, int two) private constant returns (uint) {\n        var diff = one - two;\n        if (diff < 0)\n        diff = -diff;\n        return uint(diff);\n    }\n\n    /// @dev Allow crowdsale owner to close early or extend the crowdsale.\n    /// @param time timestamp\n    function setPreIcoEndsAt(uint time) onlyOwner {\n        require(time >= now);\n        preIcoEndsAt = time;\n        preIcoEndsAtChanged(preIcoEndsAt);\n    }\n\n    /// @dev Allow load refunds back on the contract for the refunding.\n    function loadRefund() public payable inState(State.Failure) {\n        require(msg.value > 0);\n        loadedRefund = safeAdd(loadedRefund, msg.value);\n    }\n\n    /// @dev Investors can claim refund.\n    function refund() public inState(State.Refunding) {\n        uint256 weiValue = investedAmountOf[msg.sender];\n        if (weiValue == 0)\n        return;\n        investedAmountOf[msg.sender] = 0;\n        weiRefunded = safeAdd(weiRefunded, weiValue);\n        Refund(msg.sender, weiValue);\n        msg.sender.transfer(weiValue);\n    }\n\n    /// @dev Minimum goal was reached\n    /// @return true if the crowdsale has raised enough money to not initiate the refunding\n    function isMinimumGoalReached() public constant returns (bool reached) {\n        return weiToUsdCents(weiRaised) >= MIN_PRE_FUNDING_GOAL;\n    }\n\n    /// @dev Method set data from migrated contract\n    /// @param _tokensSold tokens sold\n    /// @param _weiRaised _wei raised\n    /// @param _investorCount investor count\n    function setCrowdsaleData(uint _tokensSold, uint _weiRaised, uint _investorCount) onlyOwner {\n        require(_tokensSold > 0);\n        require(_weiRaised > 0);\n        require(_investorCount > 0);\n\n        tokensSold = _tokensSold;\n        weiRaised = _weiRaised;\n        investorCount = _investorCount;\n    }\n\n    /// @dev Crowdfund state machine management.\n    /// @return State current state\n    function getState() public constant returns (State) {\n        if (finalized)\n        return State.Finalized;\n        if (address(token) == 0 || address(multisigWallet) == 0 || now < startsAt)\n        return State.Preparing;\n        if (now > startsAt && now < preIcoEndsAt - 2 days && !isMaximumPreFundingGoalReached())\n        return State.PreFunding;\n        if (isMinimumGoalReached())\n        return State.PreFundingSuccess;\n        if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised)\n        return State.Refunding;\n        return State.Failure;\n    }\n\n    /// @dev Calculating tokens count\n    /// @param weiAmount invested\n    /// @return tokens amount\n    function calculateTokens(uint weiAmount) internal returns (uint tokenAmount) {\n        var multiplier = 10 ** token.decimals();\n\n        uint usdAmount = weiToUsdCents(weiAmount);\n\n        return safeMul(usdAmount, safeDiv(multiplier, PRICE));\n    }\n\n    /// @dev Check if the pre ICO goal was reached.\n    /// @return true if the preICO has raised enough money to be a success\n    function isMaximumPreFundingGoalReached() public constant returns (bool reached) {\n        return weiToUsdCents(weiRaised) >= PRE_FUNDING_GOAL;\n    }\n\n    /// @dev Converts wei value into USD cents according to current exchange rate\n    /// @param weiValue wei value to convert\n    /// @return USD cents equivalent of the wei value\n    function weiToUsdCents(uint weiValue) private returns (uint) {\n        return safeDiv(safeMul(weiValue, exchangeRate), 1e18);\n    }\n\n    /// @dev Dynamically create tokens and assign them to the investor.\n    /// @param receiver investor address\n    /// @param tokenAmount The amount of tokens we try to give to the investor in the current transaction\n    function assignTokens(address receiver, uint tokenAmount) private {\n        token.mint(receiver, tokenAmount);\n    }\n}"
}