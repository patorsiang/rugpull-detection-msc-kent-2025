{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 PUSH1 JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH8 CALLVALUE LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 CALLVALUE DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP2 POP DUP2 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 ADDRESS CALLER DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLVALUE ADD SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 SWAP2 SWAP1 PUSH21 NOT AND PUSH1 PUSH1 EXP DUP4 JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 MLOAD DUP1 DUP3 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SELFDESTRUCT JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 SWAP1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 DUP3 ADD AND DUP5 MUL JUMPDEST DIV SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ DUP1 PUSH2 JUMPI POP PUSH1 JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 SWAP2 SWAP1 PUSH21 NOT AND PUSH1 PUSH1 EXP DUP4 JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 MLOAD DUP1 DUP3 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH4 DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH1 SLOAD DUP5 PUSH8 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 SWAP1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 SWAP1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH8 DUP3 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE DUP2 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLER ADDRESS DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH8 SWAP1 DUP4 MUL JUMPDEST DIV SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH11 DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 SWAP2 SWAP1 PUSH21 NOT AND PUSH1 PUSH1 EXP DUP4 JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 MLOAD DUP1 DUP3 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP3 SHA3 PUSH11 SWAP1 SSTORE DUP2 SLOAD SWAP1 SWAP2 SWAP1 PUSH21 NOT AND PUSH1 PUSH1 EXP DUP4 PUSH2 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 MLOAD DUP1 DUP3 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ DUP1 PUSH2 JUMPI POP PUSH1 JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE DUP2 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 SWAP1 ADDRESS SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 TIMESTAMP SUB DUP2 JUMPDEST PUSH1 DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP3 AND PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 JUMPDEST POP SLOAD DUP3 GT PUSH2 JUMPI PUSH1 PUSH1 DUP3 AND PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD JUMPDEST SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP3 POP PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST DUP3 SWAP4 POP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ DUP1 PUSH2 JUMPI POP PUSH1 JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD DUP2 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 ADDRESS DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 ADDRESS DUP4 DUP4 PUSH2 JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 SWAP2 SWAP1 PUSH21 NOT AND PUSH1 PUSH1 EXP DUP4 PUSH2 JUMP JUMPDEST MUL OR SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH1 MLOAD DUP1 DUP3 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMPDEST JUMP JUMPDEST PUSH8 DUP2 JUMP JUMPDEST PUSH8 DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND BALANCE JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE DUP2 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH8 DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH11 SUB JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND SWAP2 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 DUP2 ADD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE SWAP3 DUP6 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 SHA3 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE SWAP2 PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP JUMP STOP PC GAS UNKNOWN_0xc5 UNKNOWN_0xab MSTORE UNKNOWN_0xc7 DUP15 CALLCODE UNKNOWN_0xcb LOG1 PUSH25 PUSH27 CODESIZE UNKNOWN_0x23 EQ BALANCE UNKNOWN_0xad UNKNOWN_0xdb UNKNOWN_0xe5 UNKNOWN_0x4d SGT STOP UNKNOWN_0x29",
  "opcode_entropy": 4.646225944808448,
  "opcode_count": 3666,
  "unique_opcodes": 77,
  "byte_entropy": 5.724603716686158,
  "byte_60": 0.12158494662565587,
  "byte_40": 0.01574090826850009,
  "byte_52": 0.013750678487425366,
  "byte_36": 0.0005427899402931065,
  "byte_15": 0.020987877691333454,
  "byte_61": 0.052650624208431335,
  "byte_01": 0.028406006875339243,
  "byte_f6": 0.0003618599601954044,
  "byte_57": 0.030034376696218563,
  "byte_63": 0.008503709064592004,
  "byte_ff": 0.018454857969965623,
  "byte_7c": 0.0001809299800977022,
  "byte_00": 0.07164827211869007,
  "byte_35": 0.004342319522344852,
  "byte_04": 0.012665098606839153,
  "byte_16": 0.02243531753211507,
  "byte_09": 0.0032567396417586395,
  "byte_2a": 0.0005427899402931065,
  "byte_5c": 0.0005427899402931065,
  "byte_ce": 0.001085579880586213,
  "byte_81": 0.027682286954948433,
  "byte_14": 0.015559978288402389,
  "byte_02": 0.024606477293287497,
  "byte_80": 0.039080875701103676,
  "byte_93": 0.0009046499004885109,
  "byte_e8": 0.0005427899402931065,
  "byte_7f": 0.0014474398407816175,
  "byte_17": 0.0016283698208793198,
  "byte_0e": 0.0014474398407816175,
  "byte_24": 0.0014474398407816175,
  "byte_c8": 0.0005427899402931065,
  "byte_10": 0.005427899402931066,
  "byte_2f": 0.0003618599601954044,
  "byte_12": 0.0018092998009770218,
  "byte_82": 0.00741812918400579,
  "byte_1b": 0.001085579880586213,
  "byte_5e": 0.0005427899402931065,
  "byte_5d": 0.001085579880586213,
  "byte_18": 0.0005427899402931065,
  "byte_23": 0.001085579880586213,
  "byte_7e": 0.0005427899402931065,
  "byte_0c": 0.002894879681563235,
  "byte_1a": 0.0003618599601954044,
  "byte_9b": 0.0009046499004885109,
  "byte_f9": 0.0001809299800977022,
  "byte_cf": 0.0003618599601954044,
  "byte_9a": 0.0003618599601954044,
  "byte_4c": 0.0016283698208793198,
  "byte_d2": 0.0007237199203908088,
  "byte_de": 0.0003618599601954044,
  "byte_bf": 0.0003618599601954044,
  "byte_30": 0.0034376696218563416,
  "byte_e7": 0.0003618599601954044,
  "byte_6d": 0.0009046499004885109,
  "byte_ae": 0.0003618599601954044,
  "byte_e4": 0.0007237199203908088,
  "byte_31": 0.0014474398407816175,
  "byte_7d": 0.0009046499004885109,
  "byte_94": 0.0003618599601954044,
  "byte_53": 0.0003618599601954044,
  "byte_03": 0.02297810747240818,
  "byte_34": 0.007960919124298896,
  "byte_ab": 0.001085579880586213,
  "byte_6a": 0.001085579880586213,
  "byte_2e": 0.0001809299800977022,
  "byte_3a": 0.0003618599601954044,
  "byte_ec": 0.0001809299800977022,
  "byte_d0": 0.0005427899402931065,
  "byte_e3": 0.0005427899402931065,
  "byte_3d": 0.0003618599601954044,
  "byte_ba": 0.0003618599601954044,
  "byte_97": 0.0005427899402931065,
  "byte_8d": 0.001085579880586213,
  "byte_56": 0.018635787950063324,
  "byte_c2": 0.0009046499004885109,
  "byte_05": 0.007599059164103492,
  "byte_e2": 0.0007237199203908088,
  "byte_b2": 0.0007237199203908088,
  "byte_29": 0.0005427899402931065,
  "byte_27": 0.0003618599601954044,
  "byte_ca": 0.0007237199203908088,
  "byte_69": 0.0005427899402931065,
  "byte_c5": 0.0003618599601954044,
  "byte_70": 0.0003618599601954044,
  "byte_a0": 0.015017188348109282,
  "byte_11": 0.00741812918400579,
  "byte_79": 0.0005427899402931065,
  "byte_a9": 0.0003618599601954044,
  "byte_fa": 0.0005427899402931065,
  "byte_1c": 0.0009046499004885109,
  "byte_42": 0.0009046499004885109,
  "byte_4e": 0.0005427899402931065,
  "byte_48": 0.0001809299800977022,
  "byte_49": 0.0003618599601954044,
  "byte_5a": 0.0007237199203908088,
  "byte_87": 0.0007237199203908088,
  "byte_c0": 0.0001809299800977022,
  "byte_06": 0.005066039442735661,
  "byte_26": 0.0009046499004885109,
  "byte_83": 0.007237199203908087,
  "byte_a5": 0.0007237199203908088,
  "byte_cb": 0.0003618599601954044,
  "byte_5b": 0.059887823412339426,
  "byte_90": 0.03473855617875882,
  "byte_2d": 0.0001809299800977022,
  "byte_55": 0.002894879681563235,
  "byte_da": 0.001085579880586213,
  "byte_67": 0.0018092998009770218,
  "byte_ee": 0.0005427899402931065,
  "byte_98": 0.0005427899402931065,
  "byte_0d": 0.0032567396417586395,
  "byte_9c": 0.0003618599601954044,
  "byte_76": 0.0003618599601954044,
  "byte_a6": 0.0001809299800977022,
  "byte_ac": 0.0003618599601954044,
  "byte_2c": 0.0003618599601954044,
  "byte_a3": 0.0007237199203908088,
  "byte_f4": 0.0001809299800977022,
  "byte_df": 0.0003618599601954044,
  "byte_51": 0.016645558168988602,
  "byte_dc": 0.0003618599601954044,
  "byte_a7": 0.0014474398407816175,
  "byte_c3": 0.001085579880586213,
  "byte_d7": 0.0005427899402931065,
  "byte_aa": 0.0005427899402931065,
  "byte_21": 0.0009046499004885109,
  "byte_25": 0.0001809299800977022,
  "byte_6b": 0.0005427899402931065,
  "byte_22": 0.0009046499004885109,
  "byte_be": 0.0005427899402931065,
  "byte_72": 0.0014474398407816175,
  "byte_6c": 0.0003618599601954044,
  "byte_96": 0.0003618599601954044,
  "byte_e5": 0.0007237199203908088,
  "byte_a8": 0.0003618599601954044,
  "byte_b7": 0.0001809299800977022,
  "byte_e0": 0.0016283698208793198,
  "byte_cc": 0.0003618599601954044,
  "byte_d6": 0.0003618599601954044,
  "byte_ad": 0.0007237199203908088,
  "byte_f1": 0.0012665098606839153,
  "byte_45": 0.0012665098606839153,
  "byte_8e": 0.0007237199203908088,
  "byte_07": 0.002713949701465533,
  "byte_dd": 0.0003618599601954044,
  "byte_d5": 0.0005427899402931065,
  "byte_e6": 0.0001809299800977022,
  "byte_8b": 0.0005427899402931065,
  "byte_47": 0.0003618599601954044,
  "byte_b5": 0.0003618599601954044,
  "byte_1f": 0.0009046499004885109,
  "byte_e9": 0.0001809299800977022,
  "byte_8c": 0.0001809299800977022,
  "byte_fc": 0.0018092998009770218,
  "byte_f2": 0.0007237199203908088,
  "byte_fd": 0.016826488149086303,
  "byte_b3": 0.0014474398407816175,
  "byte_f7": 0.0001809299800977022,
  "byte_6f": 0.0003618599601954044,
  "byte_78": 0.0009046499004885109,
  "byte_d4": 0.0001809299800977022,
  "byte_08": 0.0034376696218563416,
  "byte_5f": 0.0005427899402931065,
  "byte_bd": 0.0012665098606839153,
  "byte_4b": 0.0034376696218563416,
  "byte_20": 0.01320788854713226,
  "byte_91": 0.015198118328206984,
  "byte_f3": 0.0048851094626379595,
  "byte_68": 0.0003618599601954044,
  "byte_0a": 0.017912068029672518,
  "byte_0b": 0.0032567396417586395,
  "byte_ea": 0.0005427899402931065,
  "byte_f0": 0.001085579880586213,
  "byte_ef": 0.0003618599601954044,
  "byte_f8": 0.0001809299800977022,
  "byte_39": 0.0014474398407816175,
  "byte_50": 0.017912068029672518,
  "byte_ed": 0.0001809299800977022,
  "byte_f5": 0.0009046499004885109,
  "byte_4d": 0.0007237199203908088,
  "byte_65": 0.0005427899402931065,
  "byte_d1": 0.0001809299800977022,
  "byte_b6": 0.0012665098606839153,
  "byte_37": 0.0003618599601954044,
  "byte_64": 0.0016283698208793198,
  "byte_a1": 0.001990229781074724,
  "byte_84": 0.0014474398407816175,
  "byte_88": 0.0016283698208793198,
  "byte_19": 0.0018092998009770218,
  "byte_92": 0.0016283698208793198,
  "byte_33": 0.003980459562149448,
  "byte_59": 0.0003618599601954044,
  "byte_c6": 0.0001809299800977022,
  "byte_13": 0.0018092998009770218,
  "byte_99": 0.0003618599601954044,
  "byte_a2": 0.0001809299800977022,
  "byte_3b": 0.0001809299800977022,
  "byte_54": 0.013931608467523069,
  "byte_fe": 0.003980459562149448,
  "byte_8a": 0.0003618599601954044,
  "byte_74": 0.0009046499004885109,
  "byte_d8": 0.0001809299800977022,
  "byte_41": 0.0001809299800977022,
  "byte_cd": 0.0003618599601954044,
  "byte_3c": 0.0003618599601954044,
  "byte_85": 0.0009046499004885109,
  "byte_e1": 0.0007237199203908088,
  "byte_c4": 0.0007237199203908088,
  "byte_fb": 0.0005427899402931065,
  "byte_75": 0.0001809299800977022,
  "byte_73": 0.0005427899402931065,
  "byte_0f": 0.0018092998009770218,
  "byte_7a": 0.0005427899402931065,
  "byte_a4": 0.0005427899402931065,
  "byte_c9": 0.0001809299800977022,
  "byte_32": 0.0001809299800977022,
  "byte_77": 0.0001809299800977022,
  "byte_9d": 0.0001809299800977022,
  "byte_44": 0.0005427899402931065,
  "byte_1e": 0.0003618599601954044,
  "byte_af": 0.0001809299800977022,
  "byte_b4": 0.0001809299800977022,
  "byte_43": 0.0001809299800977022,
  "byte_86": 0.0001809299800977022,
  "byte_b0": 0.0001809299800977022,
  "byte_95": 0.0003618599601954044,
  "byte_2b": 0.0001809299800977022,
  "byte_28": 0.0003618599601954044,
  "byte_58": 0.0005427899402931065,
  "byte_c7": 0.0001809299800977022,
  "byte_66": 0.0003618599601954044,
  "byte_8f": 0.0001809299800977022,
  "byte_4f": 0.0001809299800977022,
  "byte_62": 0.0001809299800977022,
  "byte_1d": 0.0001809299800977022,
  "byte_db": 0.0003618599601954044,
  "byte_38": 0.0001809299800977022,
  "num_nodes": 34,
  "num_edges": 64,
  "avg_degree": 3.764705882352941,
  "density": 0.0570409982174688,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 135,
  "event_nums": 82,
  "creation_block": 4550424,
  "creation_timestamp": 1510653368,
  "life_time": 1556010.0,
  "duration_seconds": 23019807.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 35,
  "num_buyers": 32,
  "num_sellers": 34,
  "num_creator_transfers": 31,
  "buy_amt": 3.9565227302e+19,
  "sell_amt": 3.9846087302e+19,
  "avg_value": 5.839067250294118e+17,
  "txn_per_block": 8.676031210576275e-05,
  "avg_gas_limit": 75572.58518518519,
  "std_gas_limit": 172479.50123598202,
  "avg_gas_used": 46046.51851851852,
  "std_gas_used": 161535.12430991605,
  "avg_gas_price": 12925732434.896296,
  "std_gas_price": 16076114672.868721,
  "transfer_num": 6,
  "startico_num": 1,
  "settrustedsender_num": 6,
  "transfertokens_num": 13,
  "setsellingprice_num": 3,
  "stopico_num": 3,
  "refundinvestment_num": 32,
  "timeline_sequence": [
    [
      4550424,
      1510653368,
      7,
      109,
      0,
      1999696,
      5000000000,
      0,
      1,
      6153512,
      1899696,
      18570724
    ],
    [
      4550446,
      1510653604,
      8,
      66,
      0,
      170297,
      5000000000,
      0,
      1,
      3043145,
      70297,
      18570702
    ],
    [
      4550481,
      1510654184,
      9,
      145,
      0,
      144156,
      5000000000,
      0,
      1,
      5027665,
      44156,
      18570667
    ],
    [
      4550499,
      1510654409,
      10,
      106,
      0,
      129156,
      5000000000,
      0,
      1,
      3995135,
      29156,
      18570649
    ],
    [
      4552527,
      1510683344,
      4,
      8,
      200000000000000000,
      200000,
      21000000000,
      0,
      1,
      321629,
      71862,
      18568621
    ],
    [
      4552700,
      1510686048,
      16,
      4,
      500000000000000000,
      200000,
      21000000000,
      0,
      1,
      643030,
      56862,
      18568448
    ],
    [
      4556015,
      1510731501,
      5,
      100,
      100000000000000000,
      200000,
      21000000000,
      0,
      1,
      2715787,
      56862,
      18565133
    ],
    [
      4558831,
      1510771232,
      11,
      74,
      0,
      127876,
      13000000000,
      0,
      1,
      4174910,
      13938,
      18562317
    ],
    [
      4558833,
      1510771269,
      12,
      126,
      0,
      129156,
      13000000000,
      0,
      1,
      6572418,
      44156,
      18562315
    ],
    [
      4558974,
      1510773401,
      13,
      78,
      0,
      129156,
      13000000000,
      0,
      1,
      2658591,
      29156,
      18562174
    ],
    [
      4559016,
      1510774074,
      15,
      56,
      0,
      129156,
      5000000000,
      0,
      1,
      2654640,
      29156,
      18562132
    ],
    [
      4563734,
      1510839802,
      0,
      25,
      500000000000000000,
      56862,
      21000000000,
      0,
      1,
      1498226,
      56862,
      18557414
    ],
    [
      4563772,
      1510840353,
      1,
      23,
      8133000000000000000,
      41862,
      21000000000,
      0,
      1,
      918238,
      41862,
      18557376
    ],
    [
      4564374,
      1510848585,
      0,
      31,
      0,
      90000,
      14000000000,
      0,
      1,
      745429,
      53785,
      18556774
    ],
    [
      4564407,
      1510849030,
      1,
      96,
      0,
      90000,
      10000000000,
      0,
      1,
      2659164,
      53721,
      18556741
    ],
    [
      4564486,
      1510849988,
      2,
      119,
      0,
      90000,
      16000000000,
      0,
      1,
      3757048,
      53785,
      18556662
    ],
    [
      4564554,
      1510850789,
      2,
      37,
      14200000000000000000,
      41862,
      21000000000,
      0,
      1,
      4173269,
      41862,
      18556594
    ],
    [
      4564564,
      1510850926,
      3,
      45,
      0,
      90000,
      20000000000,
      0,
      1,
      1403600,
      53721,
      18556584
    ],
    [
      4564635,
      1510851894,
      4,
      17,
      0,
      90000,
      20000000000,
      0,
      1,
      838050,
      53721,
      18556513
    ],
    [
      4565075,
      1510858560,
      5,
      44,
      0,
      90000,
      20000000000,
      0,
      1,
      1409516,
      53657,
      18556073
    ],
    [
      4568391,
      1510904214,
      2,
      7,
      1912437410000000000,
      100000,
      21000000000,
      0,
      1,
      394906,
      56862,
      18552757
    ],
    [
      4569352,
      1510917583,
      6,
      17,
      0,
      90000,
      10000000000,
      0,
      1,
      420498,
      53721,
      18551796
    ],
    [
      4570570,
      1510935024,
      7,
      124,
      1100000000000000000,
      100000,
      21000000000,
      0,
      1,
      4694254,
      56862,
      18550578
    ],
    [
      4571780,
      1510951216,
      16,
      106,
      0,
      127344,
      5000000000,
      0,
      1,
      4819690,
      27344,
      18549368
    ],
    [
      4575772,
      1511007260,
      21,
      34,
      300000000000000000,
      56862,
      20000000000,
      0,
      1,
      1550844,
      56862,
      18545376
    ],
    [
      4584022,
      1511121360,
      12,
      36,
      100033135000000000,
      79000,
      20000000000,
      0,
      1,
      1546236,
      56862,
      18537126
    ],
    [
      4584324,
      1511125675,
      7,
      43,
      0,
      90000,
      10000000000,
      0,
      1,
      1276361,
      38721,
      18536824
    ],
    [
      4585268,
      1511138393,
      8,
      26,
      0,
      90000,
      12600000000,
      0,
      1,
      970078,
      53785,
      18535880
    ],
    [
      4587963,
      1511175107,
      28,
      17,
      257000000000000000,
      100000,
      24000000000,
      0,
      1,
      674579,
      57226,
      18533185
    ],
    [
      4589697,
      1511199387,
      17,
      113,
      0,
      127344,
      5000000000,
      0,
      1,
      3568213,
      27344,
      18531451
    ],
    [
      4599900,
      1511343199,
      0,
      32,
      10860000000000000,
      90000,
      20000000000,
      0,
      0,
      941392,
      21644,
      18521248
    ],
    [
      4599911,
      1511343374,
      1,
      99,
      1086400000000000000,
      90000,
      20000000000,
      0,
      1,
      2988603,
      57226,
      18521237
    ],
    [
      4600099,
      1511345881,
      2,
      67,
      100000000000000000,
      100000,
      20000000000,
      0,
      1,
      2928261,
      57226,
      18521049
    ],
    [
      4601384,
      1511363992,
      23,
      38,
      500000000000000000,
      120000,
      5200000000,
      0,
      1,
      1618830,
      57226,
      18519764
    ],
    [
      4609336,
      1511473896,
      20,
      2,
      100000000000000000,
      100000,
      21000000000,
      0,
      1,
      121945,
      57226,
      18511812
    ],
    [
      4613946,
      1511538304,
      0,
      108,
      500000000000000000,
      100000,
      10000000000,
      0,
      1,
      3863394,
      57226,
      18507202
    ],
    [
      4619277,
      1511612109,
      4,
      28,
      135874407000000000,
      100000,
      10000000000,
      0,
      1,
      826747,
      57226,
      18501871
    ],
    [
      4626074,
      1511707043,
      18,
      17,
      0,
      127344,
      20000000000,
      0,
      1,
      479300,
      27344,
      18495074
    ],
    [
      4626089,
      1511707286,
      0,
      19,
      103582350000000000,
      100000,
      20800000000,
      0,
      1,
      857015,
      57226,
      18495059
    ],
    [
      4633261,
      1511808766,
      86,
      80,
      101000000000000000,
      100000,
      20000000000,
      0,
      1,
      3064839,
      57540,
      18487887
    ],
    [
      4633594,
      1511813604,
      87,
      1,
      104000000000000000,
      63810,
      60000000000,
      0,
      1,
      138388,
      42540,
      18487554
    ],
    [
      4638178,
      1511878055,
      1,
      93,
      1070000000000000000,
      57540,
      20000000000,
      0,
      1,
      3128957,
      57540,
      18482970
    ],
    [
      4642563,
      1511940890,
      9,
      22,
      0,
      90000,
      12000000000,
      0,
      1,
      656068,
      53657,
      18478585
    ],
    [
      4642563,
      1511940890,
      10,
      86,
      0,
      90000,
      12000000000,
      0,
      1,
      5183158,
      38657,
      18478585
    ],
    [
      4643582,
      1511954452,
      12,
      199,
      1000000000000000000,
      57540,
      10000000000,
      0,
      1,
      6284714,
      57540,
      18477566
    ],
    [
      4645419,
      1511980724,
      11,
      26,
      0,
      90000,
      15000000000,
      0,
      1,
      832446,
      38593,
      18475729
    ],
    [
      4659891,
      1512184944,
      2,
      25,
      1000000000000000000,
      86310,
      20000000000,
      0,
      1,
      637614,
      57540,
      18461257
    ],
    [
      4670428,
      1512335194,
      15,
      8,
      460000000000000000,
      100000,
      21000000000,
      0,
      1,
      276642,
      57540,
      18450720
    ],
    [
      4690002,
      1512636598,
      36,
      67,
      260000000000000000,
      100000,
      51200000000,
      0,
      1,
      4461989,
      42854,
      18431146
    ],
    [
      4710048,
      1512936053,
      12,
      114,
      0,
      90000,
      30000000000,
      0,
      1,
      6367400,
      53721,
      18411100
    ],
    [
      4712684,
      1512974372,
      230,
      36,
      2000000000000000000,
      100000,
      11000000000,
      0,
      1,
      2318307,
      57854,
      18408464
    ],
    [
      4714793,
      1513005884,
      3,
      79,
      206900000000000000,
      86282,
      24350000055,
      0,
      1,
      6757245,
      57539,
      18406355
    ],
    [
      4731262,
      1513255870,
      18,
      108,
      135000000000000000,
      25200,
      8823880704,
      1,
      0,
      7973406,
      25200,
      18389886
    ],
    [
      4731272,
      1513255998,
      19,
      1,
      135000000000000000,
      25200,
      99999997952,
      1,
      0,
      46200,
      25200,
      18389876
    ],
    [
      4731286,
      1513256172,
      20,
      51,
      135000000000000000,
      100000,
      20000000000,
      0,
      1,
      2710116,
      57539,
      18389862
    ],
    [
      4759646,
      1513681989,
      6,
      40,
      100000000000000000,
      100000,
      21000000000,
      0,
      1,
      1898305,
      42539,
      18361502
    ],
    [
      4783246,
      1514042692,
      0,
      10,
      100000000000000000,
      100000,
      60000000000,
      0,
      1,
      402810,
      57539,
      18337902
    ],
    [
      4787850,
      1514110263,
      3,
      70,
      500000000000000000,
      100000,
      40000000000,
      0,
      1,
      3247277,
      57539,
      18333298
    ],
    [
      4807781,
      1514396536,
      22,
      11,
      100000000000000000,
      100000,
      50000000000,
      0,
      1,
      476860,
      57539,
      18313367
    ],
    [
      4861855,
      1515215666,
      6,
      117,
      1500000000000000000,
      100000,
      22000000000,
      0,
      1,
      5072014,
      57539,
      18259293
    ],
    [
      5044158,
      1517964273,
      30,
      12,
      800000000000000000,
      60000,
      50000000000,
      0,
      1,
      494072,
      57539,
      18076990
    ],
    [
      5521756,
      1524936917,
      54,
      45,
      0,
      23000,
      41000000000,
      1,
      0,
      1440632,
      23000,
      17599392
    ],
    [
      5521771,
      1524937160,
      55,
      1,
      0,
      23000,
      41000000000,
      1,
      0,
      77064,
      23000,
      17599377
    ],
    [
      5521779,
      1524937333,
      56,
      147,
      0,
      23000,
      41000000000,
      1,
      0,
      4298173,
      23000,
      17599369
    ],
    [
      5521787,
      1524937425,
      57,
      149,
      0,
      23000,
      41000000000,
      1,
      0,
      3537072,
      23000,
      17599361
    ],
    [
      5521796,
      1524937569,
      58,
      82,
      0,
      23000,
      41000000000,
      1,
      0,
      1998485,
      23000,
      17599352
    ],
    [
      5521803,
      1524937724,
      59,
      25,
      0,
      23000,
      41000000000,
      1,
      0,
      1204265,
      23000,
      17599345
    ],
    [
      5526942,
      1525013613,
      1,
      63,
      200000000000000000,
      57539,
      15000000000,
      0,
      1,
      2105312,
      57539,
      17594206
    ],
    [
      5596714,
      1526067899,
      1,
      25,
      100000000000000000,
      86308,
      41000000000,
      0,
      1,
      666631,
      57539,
      17524434
    ],
    [
      5952527,
      1531424156,
      13,
      1,
      0,
      30000,
      41000000000,
      1,
      0,
      43385,
      22381,
      17168621
    ],
    [
      6017772,
      1532377609,
      20,
      11,
      0,
      23141,
      10000000000,
      1,
      0,
      837889,
      23141,
      17103376
    ],
    [
      6017813,
      1532378340,
      21,
      34,
      0,
      42000,
      10000000000,
      0,
      1,
      1174152,
      29448,
      17103335
    ],
    [
      6017900,
      1532379541,
      22,
      136,
      0,
      100000,
      3000000000,
      0,
      1,
      6565346,
      32256,
      17103248
    ],
    [
      6029321,
      1532548838,
      23,
      153,
      0,
      72000,
      2000000000,
      0,
      1,
      7022857,
      32256,
      17091827
    ],
    [
      6029337,
      1532548971,
      24,
      25,
      0,
      33000,
      2000000000,
      1,
      0,
      1275058,
      33000,
      17091811
    ],
    [
      6029369,
      1532549393,
      25,
      70,
      0,
      72000,
      2000000000,
      0,
      1,
      4542305,
      32256,
      17091779
    ],
    [
      6029371,
      1532549418,
      26,
      33,
      0,
      72000,
      2000000000,
      0,
      1,
      1534092,
      32256,
      17091777
    ],
    [
      6029391,
      1532549646,
      27,
      35,
      0,
      72000,
      2000000000,
      0,
      1,
      2251354,
      32256,
      17091757
    ],
    [
      6029395,
      1532549716,
      28,
      25,
      0,
      72000,
      2000000000,
      0,
      1,
      1490542,
      32256,
      17091753
    ],
    [
      6029401,
      1532549810,
      29,
      39,
      0,
      72000,
      2000000000,
      0,
      1,
      7283051,
      32256,
      17091747
    ],
    [
      6029452,
      1532550475,
      30,
      80,
      0,
      50000,
      2000000000,
      0,
      1,
      7094573,
      32320,
      17091696
    ],
    [
      6029458,
      1532550545,
      31,
      38,
      0,
      50000,
      2000000000,
      0,
      1,
      2623874,
      32320,
      17091690
    ],
    [
      6029466,
      1532550685,
      32,
      157,
      0,
      50000,
      2000000000,
      0,
      1,
      6791603,
      32256,
      17091682
    ],
    [
      6029470,
      1532550752,
      33,
      100,
      0,
      50000,
      2000000000,
      0,
      1,
      4494346,
      32256,
      17091678
    ],
    [
      6029478,
      1532550881,
      34,
      86,
      0,
      50000,
      2000000000,
      0,
      1,
      6416080,
      32192,
      17091670
    ],
    [
      6029480,
      1532550935,
      35,
      107,
      0,
      50000,
      2000000000,
      0,
      1,
      6149911,
      32256,
      17091668
    ],
    [
      6029485,
      1532551071,
      36,
      85,
      0,
      50000,
      2000000000,
      0,
      1,
      3886980,
      32320,
      17091663
    ],
    [
      6029492,
      1532551176,
      37,
      130,
      0,
      50000,
      2000000000,
      0,
      1,
      6350926,
      32320,
      17091656
    ],
    [
      6029497,
      1532551226,
      38,
      104,
      0,
      50000,
      2000000000,
      0,
      1,
      3460138,
      32320,
      17091651
    ],
    [
      6029507,
      1532551373,
      39,
      69,
      0,
      50000,
      2000000000,
      0,
      1,
      4172860,
      32256,
      17091641
    ],
    [
      6029512,
      1532551444,
      40,
      79,
      0,
      50000,
      2000000000,
      0,
      1,
      4537963,
      32256,
      17091636
    ],
    [
      6029513,
      1532551467,
      41,
      82,
      0,
      50000,
      2000000000,
      0,
      1,
      6227909,
      32256,
      17091635
    ],
    [
      6029515,
      1532551536,
      42,
      80,
      0,
      50000,
      2000000000,
      0,
      1,
      4108826,
      32256,
      17091633
    ],
    [
      6029528,
      1532551701,
      43,
      72,
      0,
      50000,
      2000000000,
      0,
      1,
      6703495,
      32320,
      17091620
    ],
    [
      6029534,
      1532551793,
      44,
      11,
      0,
      50000,
      2000000000,
      0,
      1,
      6541846,
      32320,
      17091614
    ],
    [
      6029541,
      1532551845,
      45,
      25,
      0,
      50000,
      2000000000,
      0,
      1,
      1875484,
      32256,
      17091607
    ],
    [
      6029546,
      1532551943,
      46,
      189,
      0,
      50000,
      2000000000,
      0,
      1,
      6447261,
      32256,
      17091602
    ],
    [
      6029551,
      1532551998,
      47,
      121,
      0,
      50000,
      2000000000,
      0,
      1,
      4021107,
      32256,
      17091597
    ],
    [
      6029556,
      1532552081,
      48,
      31,
      0,
      50000,
      2000000000,
      0,
      1,
      1604056,
      32256,
      17091592
    ],
    [
      6029569,
      1532552256,
      49,
      63,
      0,
      50000,
      2000000000,
      0,
      1,
      6550803,
      32256,
      17091579
    ],
    [
      6106352,
      1533671750,
      50,
      17,
      0,
      70000,
      4000000000,
      0,
      1,
      1393488,
      32256,
      17014796
    ],
    [
      6106429,
      1533673121,
      51,
      159,
      0,
      70000,
      7000000000,
      0,
      1,
      7587640,
      32256,
      17014719
    ],
    [
      6106432,
      1533673154,
      52,
      88,
      0,
      50000,
      20000000000,
      0,
      1,
      7902732,
      32320,
      17014716
    ],
    [
      6106434,
      1533673175,
      53,
      74,
      0,
      50000,
      30000000000,
      0,
      1,
      7760520,
      32384,
      17014714
    ],
    [
      6017900,
      1532379541,
      0,
      0,
      1100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029321,
      1532548838,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029369,
      1532549393,
      0,
      0,
      200000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029371,
      1532549418,
      0,
      0,
      800000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029391,
      1532549646,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029395,
      1532549716,
      0,
      0,
      500000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029401,
      1532549810,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029452,
      1532550475,
      0,
      0,
      135000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029458,
      1532550545,
      0,
      0,
      206900000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029466,
      1532550685,
      0,
      0,
      460000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029470,
      1532550752,
      0,
      0,
      1000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029478,
      1532550881,
      0,
      0,
      1000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029480,
      1532550935,
      0,
      0,
      1070000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029485,
      1532551071,
      0,
      0,
      205000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029492,
      1532551176,
      0,
      0,
      103582350000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029497,
      1532551226,
      0,
      0,
      135874407000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029507,
      1532551373,
      0,
      0,
      500000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029512,
      1532551444,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029513,
      1532551467,
      0,
      0,
      500000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029515,
      1532551536,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029528,
      1532551701,
      0,
      0,
      257000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029534,
      1532551793,
      0,
      0,
      100033135000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029541,
      1532551845,
      0,
      0,
      560000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029546,
      1532551943,
      0,
      0,
      200000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029551,
      1532551998,
      0,
      0,
      500000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029556,
      1532552081,
      0,
      0,
      200000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6029569,
      1532552256,
      0,
      0,
      1086400000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6106352,
      1533671750,
      0,
      0,
      1500000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6106429,
      1533673121,
      0,
      0,
      2000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6106432,
      1533673154,
      0,
      0,
      1912437410000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6106434,
      1533673175,
      0,
      0,
      22833000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.15;\n\n/**\n * Pulsar token contract.\n * Date: 2017-11-14.\n */\n\n\ncontract Ownable {\n\n  address public owner;   // The owner of the contract\n\n  event OwnershipTransferred ( address indexed prev_owner, address indexed new_owner );\n\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  modifier onlyOwner {\n    require(msg.sender == owner);\n    _;\n  }\n\n  function transferOwnership (address new_owner) onlyOwner public {\n    require(new_owner != address(0));\n    OwnershipTransferred(owner, new_owner);\n    owner = new_owner;\n  }\n\n\n} // Ownable\n\n\n/******************************************/\n/*       PULSAR TOKEN STARTS HERE         */\n/******************************************/\n\ncontract PulsarToken is Ownable {\n\n  /******** Public constants ********/\n\n  // Token decimal scale is the same as Ether to Wei scale = 10^18 (18 decimal digits)\n  uint public constant TOKEN_SCALE = 1 ether / 1 wei; // (10 ** 18)\n\n  // Total amount of tokens\n  uint public constant TOTAL_SUPPLY = 34540000 * TOKEN_SCALE;\n\n  // 2017-11-13 08:13:00 UTC = 00:13:00 PST\n  uint public constant ICO_START_TIME = 1510560780;\n\n  // Minimum accepted contribution is 0.1 Ether\n  uint public constant MIN_ACCEPTED_VALUE = 100000000000000000 wei; // 0.1 ether\n\n  // Minimum buyback amount of tokens\n  uint public constant MIN_BUYBACK_VALUE = 1 * TOKEN_SCALE;\n\n  // Public identifiers of the token\n  string public constant NAME = \"Pulsar\";       // token name\n  string public constant SYMBOL = \"PVC\";        // token symbol\n\n\n  /**\n   * Contract state machine.                           _____________\n   *                                                  \u2193             |\n   * Deployed -> ICOStarted -> ICOStopped -> BuybackEnabled -> BuybackPaused -> Destroyed.\n   */\n  enum ContractState { Deployed, ICOStarted, ICOStopped, BuybackEnabled, BuybackPaused, Destroyed }\n\n  // Current state of the contract\n  ContractState private contractState = ContractState.Deployed;\n\n  // Contract state change event\n  event State ( ContractState state );\n\n  // This generates a public event on the blockchain that will notify clients\n  event Transfer ( address indexed from, address indexed to, uint value );\n\n\n  /******** Public variables *********/\n\n  // This creates an array with all balances\n  mapping (address => uint) public balanceOf;\n\n  // Reserved bounty tokens\n  uint public bountyTokens = 40000 * TOKEN_SCALE;\n\n  // Selling price of tokens in Wei\n  uint public sellingPrice = 0;\n\n  // Buyback price of tokens in Wei\n  uint public buybackPrice = 0;\n\n  // Amount of Ether the contract ever received\n  uint public etherAccumulator = 0;\n\n  // ICO start time\n  uint public icoStartTime = ICO_START_TIME;\n\n  // Trusted (authorized) sender of tokens\n  address public trustedSender = address(0);\n\n\n  /******** Private variables ********/\n\n  uint8[4] private bonuses = [ uint8(15), uint8(10), uint8(5), uint8(3) ];  // these are percents\n  uint[4]  private staging = [ 1 weeks,   2 weeks,   3 weeks,  4 weeks ];   // timeframe when the bonuses are effective\n\n\n  /**\n   * The constructor initializes the contract.\n   */\n  function PulsarToken() public\n  {\n    // intentionally left empty\n  }\n\n\n  /******** Helper functions ********/\n\n  /* Calculate current bonus percent. */\n  function calcBonusPercent() public view returns (uint8) {\n    uint8 _bonus = 0;\n    uint _elapsed = now - icoStartTime;\n\n    for (uint8 i = 0; i < staging.length; i++) {\n      if (_elapsed <= staging[i]) {\n          _bonus = bonuses[i];\n          break;\n      }\n    }\n    return _bonus;\n  }\n\n  /* Add bonus to the amount, for example 200 + 15% bonus = 230. */\n  function calcAmountWithBonus(uint token_value, uint8 bonus) public view returns (uint) {\n    return  (token_value * (100 + bonus)) / 100;\n  }\n\n  /* Convert amount in Wei to tokens. */\n  function calcEthersToTokens(uint ether_value, uint8 bonus) public view returns (uint) {\n    return calcAmountWithBonus(TOKEN_SCALE * ether_value/sellingPrice, bonus);\n  }\n\n  /* Convert amount in tokens to Wei. */\n  function calcTokensToEthers(uint token_value) public view returns (uint) {\n      return (buybackPrice * token_value) / TOKEN_SCALE;\n  }\n\n  /**\n   * Internal transfer of tokens, only can be called from within this contract.\n   *\n   * @param _from   Source address\n   * @param _to     Destination address\n   * @param _value  Amount of tokens (do not forget to multiply by scale 10^18)\n   */\n  function _transfer(address _from, address _to, uint _value) internal\n  {\n    require(_to != address(0x0));                       // prevent transfer to 0x0 address\n    require(_value > 0);                                // check if the value is greater than zero\n    require(balanceOf[_from] >= _value);                // check if the sender has enough tokens\n    require(balanceOf[_to] + _value > balanceOf[_to]);  // check for overflows\n\n    balanceOf[_from]  -= _value;                        // subtract from the sender\n    balanceOf[_to]    += _value;                        // add the same to the recipient\n\n    Transfer(_from, _to, _value);                       // fire the event\n  }\n\n\n  /************************* Public interface ********************************/\n\n  /**\n   * View current state of the contract.\n   *\n   * Returns: Current state of the contract as uint8, starting from 0.\n   */\n  function getContractState() public view returns (uint8) {\n    return uint8(contractState);\n  }\n\n  /**\n   * View current token balance of the contract.\n   *\n   * Returns: Current amount of tokens in the contract.\n   */\n  function getContractTokenBalance() public view returns (uint) {\n    return balanceOf[this];\n  }\n\n  /**\n   * View current token balance of the given address.\n   *\n   * Returns: Current amount of tokens hold by the address\n   *\n   * @param holder_address Holder of tokens\n   */\n  function getTokenBalance(address holder_address) public view returns (uint) {\n    require(holder_address != address(0));\n    return balanceOf[holder_address];\n  }\n\n  /**\n   * View total amount of currently distributed tokens.\n   *\n   * Returns: Total amount of distributed tokens.\n   */\n  function getDistributedTokens() public view returns (uint) {\n      return TOTAL_SUPPLY - balanceOf[this];\n  }\n\n  /**\n   * View current Ether balance of the contract.\n   *\n   * Returns: Current amount of Wei at the contract's address.\n   */\n  function getContractEtherBalance() public view returns (uint) {\n    return this.balance;\n  }\n\n  /**\n   * View current Ether balance of the given address.\n   *\n   * Returns: Current amount of Wei at the given address.\n   */\n  function getEtherBalance(address holder_address) public view returns (uint) {\n    require(holder_address != address(0));\n    return holder_address.balance;\n  }\n\n\n  /**\n   * Buy tokens for Ether.\n   * State must be only ICOStarted.\n   */\n  function invest() public payable\n  {\n    require(contractState == ContractState.ICOStarted);   // check state\n    require(now >= icoStartTime);                         // check time\n    require(msg.value >= MIN_ACCEPTED_VALUE);             // check amount of contribution\n\n    uint8 _bonus  = calcBonusPercent();\n    uint  _tokens = calcEthersToTokens(msg.value, _bonus);\n\n    require(balanceOf[this] >= _tokens);                  // check amount of tokens\n\n    _transfer(this, msg.sender, _tokens);                 // tranfer tokens to the investor\n\n    etherAccumulator += msg.value;      // finally update the counter of received Ether\n  }\n\n\n  // Default fallback function handles sending Ether to the contract.\n  function () public payable {\n    invest();\n  }\n\n  /**\n   * Token holders withdraw Ether in exchange of their tokens.\n   * \n   * @param token_value Amount of tokens being returned (do not forget to multiply by scale 10^18)\n   */\n  function buyback(uint token_value) public\n  {\n    require(contractState == ContractState.BuybackEnabled);   // check current state\n    require(buybackPrice > 0);                                // buyback price must be set\n    require(token_value >= MIN_BUYBACK_VALUE);                // minimum allowed amount of tokens\n    require(msg.sender != owner);                             // the owner can't buyback\n\n    uint _ethers = calcTokensToEthers(token_value);\n\n    // Check if the contract has enough ether to buyback the tokens\n    require(this.balance >= _ethers);\n\n    // Transfer the tokens back to the contract\n    _transfer(msg.sender, this, token_value);\n\n    // Send ether to the seller. It's important to do this last to avoid recursion attacks.\n    msg.sender.transfer(_ethers);\n  }\n\n  /************************** Owner's interface *****************************/\n\n  /**\n   * Set ICO start time\n   *\n   * Restricted to the owner.\n   *\n   * @param start_time New start time as number of seconds from Unix Epoch\n   */\n  function setICOStartTime(uint start_time) onlyOwner external {\n    icoStartTime = start_time;\n  }\n\n  /**\n   * Set token selling price in Wei.\n   *\n   * Restricted to the owner.\n   *\n   * @param selling_price New selling price in Wei\n   */\n  function setSellingPrice(uint selling_price) onlyOwner public {\n    require(selling_price != 0);\n    sellingPrice = selling_price;\n  }\n\n  /**\n   * Start selling tokens.\n   *\n   * Restricted to the owner.\n   *\n   * @param selling_price New selling price in Wei\n   */\n  function startICO(uint selling_price) onlyOwner external {\n    require(contractState == ContractState.Deployed);\n    setSellingPrice(selling_price);\n\n    balanceOf[this] = TOTAL_SUPPLY;\n\n    contractState = ContractState.ICOStarted;\n    State(contractState);\n  }\n\n  /**\n   * Stop selling tokens.\n   * Restricted to the owner.\n   */\n  function stopICO() onlyOwner external {\n    require(contractState == ContractState.ICOStarted);\n\n    contractState = ContractState.ICOStopped;\n    State(contractState);\n  }\n\n  /**\n   * Transfer Ether from the contract to the owner.\n   * Restricted to the owner.\n   *\n   * @param ether_value Amount in Wei\n   */\n  function transferEthersToOwner(uint ether_value) onlyOwner external {\n    require(this.balance >= ether_value);\n    msg.sender.transfer(ether_value);\n  }\n\n  /**\n   * Set the trusted sender of tokens.\n   * Pass (0) to remove the truster sender.\n   * Restricted to the owner.\n   *\n   * @param trusted_address New trusted sender\n   */\n  function setTrustedSender(address trusted_address) onlyOwner external {\n    trustedSender = trusted_address;\n  }\n\n  /**\n   * Transfer tokens to an address.\n   * Restricted to the owner or to the trusted address.\n   *\n   * @param recipient_address Recipient address\n   * @param token_value Amount of tokens (do not forget to multiply by scale 10^18)\n   */\n  function transferTokens(address recipient_address, uint token_value) external {\n    require( (msg.sender == owner) || (msg.sender == trustedSender) );  // Restricted to the owner or to trustedSender\n    require(contractState == ContractState.ICOStarted);                 // check state\n    require(now >= icoStartTime);                                       // check time\n\n    _transfer(this, recipient_address, token_value);\n  }\n\n  /**\n   * Grant bounty tokens to an address.\n   * Restricted to the owner.\n   * State must be ICOStarted or ICOStopped.\n   *\n   * @param recipient_address Recipient address\n   * @param token_value Amount of tokens (do not forget to multiply by scale 10^18)\n   */\n  function grantBounty(address recipient_address, uint token_value) onlyOwner external {\n    require((contractState == ContractState.ICOStarted) || (contractState == ContractState.ICOStopped));  // check the state\n    require(bountyTokens >= token_value);  // check remaining amount of bounty tokens\n    require(now >= icoStartTime);     // check time\n\n    _transfer(this, recipient_address, token_value);\n    bountyTokens -= token_value;\n  }\n\n  /**\n   * Refund investment by transferring all tokens back to the contract and sending Ether to the investor.\n   *\n   * This function is a necessary measure, because maximum 99 accredited US investors are allowed \n   * under exemptions from registration with the U.S. Securities and Exchange Commission \n   * pursuant to Regulation D, Section 506(c) of the Securities Act of 1933, as amended (the \u201cSecurities Act\u201d).\n   * \n   * We will select 99 accredited US investors and refund investments to all other US accredited investors to comply with this regulation.\n   *\n   * Investors from other countries (non-US investors) will not be affected.\n   *\n   * State must be ICOStopped or BuybackPaused.\n   *\n   * Restricted to the owner.\n   *\n   * @param investor_address The address of the investor\n   * @param ether_value The amount in Wei\n   */\n  function refundInvestment(address investor_address, uint ether_value) onlyOwner external {\n    require((contractState == ContractState.ICOStopped) || (contractState == ContractState.BuybackPaused));   // check the state\n\n    require(investor_address != owner);                   // do not refund to the owner\n    require(investor_address != address(this));           // do not refund to the contract\n    require(balanceOf[investor_address] > 0);             // investor's token balance must be greater than zero\n    require(this.balance >= ether_value);                 // the contract must have enough ether\n\n    // Transfer the tokens back to the contract\n    _transfer(investor_address, this, balanceOf[investor_address]);\n\n    // Send ether to the investor. It's important to do this last to avoid recursion attacks.\n    investor_address.transfer(ether_value);\n  }\n\n  /**\n   * Set token buyback price in Wei.\n   *\n   * Restricted to the owner.\n   *\n   * @param buyback_price New buyback price in Wei\n   */\n  function setBuybackPrice(uint buyback_price) onlyOwner public {\n    require(buyback_price > 0);\n    buybackPrice = buyback_price;\n  }\n\n  /**\n   * Enable buyback.\n   * State must be ICOStopped or BuybackPaused.\n   * Buyback can be paused with pauseBuyback().\n   *\n   * Restricted to the owner.\n   *\n   * @param buyback_price New buyback price in Wei\n   */\n  function enableBuyback(uint buyback_price) onlyOwner external {\n    require((contractState == ContractState.ICOStopped) || (contractState == ContractState.BuybackPaused));\n    setBuybackPrice(buyback_price);\n\n    contractState = ContractState.BuybackEnabled;\n    State(contractState);\n  }\n\n  /**\n   * Pause buyback.\n   * State must be BuybackEnabled.\n   * Buyback can be re-enabled with enableBuyback().\n   *\n   * Restricted to the owner.\n   */\n  function pauseBuyback() onlyOwner external {\n      require(contractState == ContractState.BuybackEnabled);\n\n      contractState = ContractState.BuybackPaused;\n      State(contractState);\n  }\n\n  /**\n   * Destroy the contract and send all Ether to the owner.\n   * The contract must be in the BuybackPaused state.\n   *\n   * Restricted to the owner.\n   */\n  function destroyContract() onlyOwner external {\n      require(contractState == ContractState.BuybackPaused);\n\n      contractState = ContractState.Destroyed;\n      State(contractState);\n\n      selfdestruct(owner);  // send all money to the owner and destroy the contract!\n  }\n\n} /* ------------------------ end of contract ---------------------- */"
}