{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLER PUSH2 JUMP JUMPDEST JUMPDEST JUMPDEST JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP1 DUP2 ADD SWAP2 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 PUSH7 CALLVALUE LT DUP1 ISZERO SWAP1 DUP2 SWAP1 PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST DUP1 PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST JUMPDEST SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST CALLVALUE PUSH1 DUP1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH12 PUSH2 DUP3 PUSH2 DUP6 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 SWAP1 PUSH2 SWAP1 DUP6 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH32 DUP5 DUP5 PUSH1 MLOAD SWAP2 DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP4 ISZERO PUSH2 MUL DUP5 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH4 SWAP1 DUP7 SWAP1 DUP6 SWAP1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD POP POP DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND SWAP3 PUSH4 SWAP3 SWAP1 SWAP2 AND SWAP1 DUP5 SWAP1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD POP POP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH12 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 TIMESTAMP PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH1 SLOAD SWAP3 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD SWAP3 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP3 POP PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP3 POP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST TIMESTAMP GT SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH1 PUSH2 PUSH12 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 CALLER PUSH2 JUMP JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST SWAP7 POP PUSH2 DUP8 LT ISZERO PUSH2 JUMPI DUP7 SWAP8 POP PUSH2 JUMP JUMPDEST PUSH2 DUP10 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD SWAP1 SWAP7 POP SWAP5 POP PUSH2 DUP7 DUP7 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP4 POP PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP8 SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP3 POP PUSH1 DUP5 GT DUP1 ISZERO PUSH2 JUMPI POP DUP3 ISZERO DUP1 PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO JUMPDEST JUMPDEST ISZERO PUSH2 JUMPI DUP4 SWAP8 POP PUSH2 JUMP JUMPDEST PUSH2 DUP4 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 DUP7 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP8 POP JUMPDEST JUMPDEST POP POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SLOAD TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST SWAP1 POP DUP1 DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO JUMPDEST SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP2 POP DUP2 ISZERO ISZERO PUSH2 JUMPI PUSH2 SWAP3 POP PUSH2 JUMP JUMPDEST PUSH2 DUP3 PUSH2 PUSH2 PUSH2 PUSH1 SLOAD PUSH12 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP DUP1 SWAP3 POP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH12 DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SLOAD TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST SWAP1 POP DUP1 DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO JUMPDEST SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 PUSH4 PUSH2 AND JUMP JUMPDEST LT ISZERO SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP DUP1 ISZERO ISZERO PUSH2 JUMPI POP PUSH1 JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH8 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 PUSH2 PUSH12 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 DUP3 DUP3 PUSH1 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP PUSH1 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 PUSH1 ADD SLOAD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP6 DUP4 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 DUP8 AND DUP1 DUP4 MSTORE DUP2 DUP4 SHA3 DUP6 SLOAD DUP2 SSTORE PUSH1 DUP1 DUP8 ADD DUP1 SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 DUP1 DUP9 ADD DUP1 SLOAD SWAP2 SWAP1 SWAP4 ADD SSTORE DUP6 DUP6 MSTORE SWAP6 DUP5 SWAP1 SSTORE SWAP5 DUP4 SWAP1 SSTORE SWAP2 SWAP1 SWAP4 SSTORE SWAP2 PUSH32 SWAP1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH3 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 PUSH2 PUSH12 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH2 SWAP1 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH2 SWAP1 PUSH14 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP4 POP PUSH2 PUSH1 SLOAD PUSH12 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP3 POP PUSH2 PUSH14 PUSH2 DUP6 DUP8 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 SLOAD PUSH2 DUP5 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH12 SUB SWAP1 POP PUSH2 DUP2 LT ISZERO PUSH2 JUMPI PUSH2 DUP3 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP JUMPDEST DUP2 SWAP5 POP JUMPDEST POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SLOAD TIMESTAMP LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 JUMP JUMPDEST PUSH3 TIMESTAMP PUSH2 PUSH2 JUMP JUMPDEST SUB DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SDIV SWAP1 POP PUSH1 DUP2 SLT ISZERO PUSH2 JUMPI POP PUSH1 JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH1 PUSH2 PUSH2 PUSH8 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH2 PUSH8 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 PUSH2 PUSH8 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH1 PUSH2 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH12 SUB SWAP1 POP PUSH1 DUP2 SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH4 SWAP1 ADDRESS SWAP1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP2 POP PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH1 SLOAD PUSH2 PUSH2 JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 PUSH2 DUP7 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 JUMPI DUP1 SWAP3 POP PUSH2 JUMP JUMPDEST DUP2 SWAP3 POP JUMPDEST JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP6 POP PUSH2 DUP7 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP5 POP PUSH1 SLOAD TIMESTAMP SUB SWAP4 POP PUSH1 DUP5 SGT ISZERO DUP1 PUSH2 JUMPI POP DUP5 ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SWAP7 POP PUSH2 JUMP JUMPDEST DUP5 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD SWAP3 POP PUSH2 DUP5 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 DUP7 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 GT PUSH2 JUMPI DUP1 SWAP7 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP7 POP JUMPDEST JUMPDEST JUMPDEST POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH4 SWAP1 ADDRESS SWAP1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD PUSH1 SLOAD SWAP1 SWAP3 POP PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 POP PUSH32 DUP3 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 PUSH2 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP2 SWAP1 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 PUSH4 PUSH2 AND JUMP JUMPDEST LT ISZERO DUP1 PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 JUMP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH32 DUP3 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH4 SWAP1 DUP5 SWAP1 DUP5 SWAP1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD POP POP JUMPDEST POP POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xdf STOP UNKNOWN_0xc4 UNKNOWN_0x49 UNKNOWN_0xe5 UNKNOWN_0xcf UNKNOWN_0xc5 SWAP12 MULMOD DUP8 UNKNOWN_0x4a UNKNOWN_0xd4 UNKNOWN_0xc8 XOR UNKNOWN_0xbe MOD UNKNOWN_0x2a PUSH12 UNKNOWN_0xdd UNKNOWN_0xe9 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.601831846837176,
  "opcode_count": 4385,
  "unique_opcodes": 86,
  "byte_entropy": 5.907207759483078,
  "byte_60": 0.094869171173805,
  "byte_40": 0.01988013448326268,
  "byte_52": 0.01491010086244701,
  "byte_36": 0.00526238853968718,
  "byte_15": 0.02397310334746382,
  "byte_61": 0.07001900306972665,
  "byte_01": 0.024119280806899575,
  "byte_e8": 0.00087706475661453,
  "byte_57": 0.022511328753106272,
  "byte_63": 0.017979827510597866,
  "byte_ff": 0.042829995614676215,
  "byte_e0": 0.00175412951322906,
  "byte_02": 0.01988013448326268,
  "byte_0a": 0.009209179944452566,
  "byte_00": 0.03479023534570969,
  "byte_35": 0.00146177459435755,
  "byte_04": 0.00555474345855869,
  "byte_16": 0.02514252302294986,
  "byte_06": 0.00497003362081567,
  "byte_de": 0.00087706475661453,
  "byte_b5": 0.001023242216050285,
  "byte_81": 0.018272182429469375,
  "byte_14": 0.00935535740388832,
  "byte_23": 0.00029235491887151,
  "byte_80": 0.03610583248063148,
  "byte_03": 0.019149247186083906,
  "byte_7f": 0.001023242216050285,
  "byte_9c": 0.001023242216050285,
  "byte_f0": 0.001900306972664815,
  "byte_48": 0.000438532378307265,
  "byte_09": 0.002485016810407835,
  "byte_b2": 0.000730887297178775,
  "byte_99": 0.000438532378307265,
  "byte_6a": 0.000438532378307265,
  "byte_6f": 0.000730887297178775,
  "byte_0d": 0.004531501242508405,
  "byte_17": 0.007162695512351995,
  "byte_ac": 0.000730887297178775,
  "byte_94": 0.000730887297178775,
  "byte_1c": 0.00087706475661453,
  "byte_ba": 0.00029235491887151,
  "byte_ee": 0.00116941967548604,
  "byte_2d": 0.000730887297178775,
  "byte_b9": 0.003069726648150855,
  "byte_24": 0.001607952053793305,
  "byte_9b": 0.0029235491887151,
  "byte_7c": 0.00058470983774302,
  "byte_19": 0.00204648443210057,
  "byte_27": 0.000730887297178775,
  "byte_93": 0.00146177459435755,
  "byte_9e": 0.000730887297178775,
  "byte_a2": 0.00087706475661453,
  "byte_d1": 0.00058470983774302,
  "byte_28": 0.000146177459435755,
  "byte_3e": 0.00058470983774302,
  "byte_3d": 0.00029235491887151,
  "byte_ae": 0.00087706475661453,
  "byte_41": 0.00058470983774302,
  "byte_4f": 0.00029235491887151,
  "byte_42": 0.002192661891536325,
  "byte_b6": 0.00087706475661453,
  "byte_74": 0.00058470983774302,
  "byte_4c": 0.00175412951322906,
  "byte_ec": 0.00029235491887151,
  "byte_6d": 0.00116941967548604,
  "byte_4d": 0.00116941967548604,
  "byte_fe": 0.00146177459435755,
  "byte_bf": 0.00058470983774302,
  "byte_c2": 0.00058470983774302,
  "byte_53": 0.001023242216050285,
  "byte_13": 0.002192661891536325,
  "byte_5c": 0.000438532378307265,
  "byte_a0": 0.007747405350095015,
  "byte_df": 0.000438532378307265,
  "byte_64": 0.0029235491887151,
  "byte_aa": 0.00087706475661453,
  "byte_e3": 0.000438532378307265,
  "byte_96": 0.001023242216050285,
  "byte_2b": 0.000146177459435755,
  "byte_68": 0.00058470983774302,
  "byte_8a": 0.00058470983774302,
  "byte_1b": 0.000146177459435755,
  "byte_50": 0.027919894752229207,
  "byte_69": 0.00058470983774302,
  "byte_51": 0.018856892267212395,
  "byte_77": 0.000438532378307265,
  "byte_d5": 0.000730887297178775,
  "byte_d8": 0.000438532378307265,
  "byte_75": 0.00058470983774302,
  "byte_b3": 0.00087706475661453,
  "byte_d7": 0.000438532378307265,
  "byte_c3": 0.00029235491887151,
  "byte_7b": 0.000438532378307265,
  "byte_37": 0.000730887297178775,
  "byte_ea": 0.000438532378307265,
  "byte_05": 0.004823856161379915,
  "byte_70": 0.00116941967548604,
  "byte_e7": 0.000146177459435755,
  "byte_32": 0.000438532378307265,
  "byte_8b": 0.000730887297178775,
  "byte_6c": 0.000438532378307265,
  "byte_e5": 0.00029235491887151,
  "byte_58": 0.00204648443210057,
  "byte_92": 0.003654436485893875,
  "byte_97": 0.001023242216050285,
  "byte_21": 0.00087706475661453,
  "byte_a1": 0.00058470983774302,
  "byte_9a": 0.000438532378307265,
  "byte_d2": 0.00029235491887151,
  "byte_79": 0.00029235491887151,
  "byte_43": 0.000730887297178775,
  "byte_f7": 0.00029235491887151,
  "byte_9f": 0.000730887297178775,
  "byte_a8": 0.00029235491887151,
  "byte_0c": 0.004531501242508405,
  "byte_6e": 0.00029235491887151,
  "byte_25": 0.00029235491887151,
  "byte_49": 0.00087706475661453,
  "byte_b7": 0.000730887297178775,
  "byte_e4": 0.000146177459435755,
  "byte_3a": 0.000146177459435755,
  "byte_84": 0.00497003362081567,
  "byte_c1": 0.000438532378307265,
  "byte_22": 0.000730887297178775,
  "byte_b8": 0.000146177459435755,
  "byte_c4": 0.00058470983774302,
  "byte_88": 0.001315597134921795,
  "byte_fd": 0.010963309457681626,
  "byte_dd": 0.000730887297178775,
  "byte_e2": 0.000438532378307265,
  "byte_fc": 0.000730887297178775,
  "byte_07": 0.00263119426984359,
  "byte_e9": 0.000438532378307265,
  "byte_c0": 0.00029235491887151,
  "byte_6b": 0.00204648443210057,
  "byte_33": 0.00175412951322906,
  "byte_46": 0.000438532378307265,
  "byte_ed": 0.000438532378307265,
  "byte_8f": 0.000438532378307265,
  "byte_f1": 0.004239146323636895,
  "byte_95": 0.00058470983774302,
  "byte_f6": 0.00029235491887151,
  "byte_ad": 0.00116941967548604,
  "byte_f9": 0.000146177459435755,
  "byte_f8": 0.000146177459435755,
  "byte_bd": 0.000438532378307265,
  "byte_fb": 0.00058470983774302,
  "byte_10": 0.005116211080251425,
  "byte_b0": 0.00204648443210057,
  "byte_d3": 0.00058470983774302,
  "byte_08": 0.003946791404765385,
  "byte_54": 0.012425084052039176,
  "byte_29": 0.003069726648150855,
  "byte_89": 0.00029235491887151,
  "byte_5b": 0.061394532963017105,
  "byte_f4": 0.000438532378307265,
  "byte_7d": 0.00029235491887151,
  "byte_56": 0.032305218535301855,
  "byte_1d": 0.000730887297178775,
  "byte_34": 0.00672416313404473,
  "byte_2e": 0.000730887297178775,
  "byte_0b": 0.006577985674608975,
  "byte_71": 0.000730887297178775,
  "byte_90": 0.0422452857769332,
  "byte_20": 0.01315597134921795,
  "byte_91": 0.01549481070019003,
  "byte_f3": 0.005993275836865955,
  "byte_7a": 0.000438532378307265,
  "byte_0e": 0.00672416313404473,
  "byte_39": 0.00029235491887151,
  "byte_5a": 0.001023242216050285,
  "byte_4b": 0.00058470983774302,
  "byte_a4": 0.000146177459435755,
  "byte_87": 0.00204648443210057,
  "byte_dc": 0.000730887297178775,
  "byte_11": 0.00497003362081567,
  "byte_82": 0.00730887297178775,
  "byte_a9": 0.001607952053793305,
  "byte_ce": 0.000438532378307265,
  "byte_18": 0.001315597134921795,
  "byte_0f": 0.003654436485893875,
  "byte_3f": 0.000438532378307265,
  "byte_62": 0.00087706475661453,
  "byte_a3": 0.00058470983774302,
  "byte_2f": 0.00029235491887151,
  "byte_12": 0.00263119426984359,
  "byte_86": 0.001607952053793305,
  "byte_8c": 0.000146177459435755,
  "byte_cb": 0.00087706475661453,
  "byte_c5": 0.00087706475661453,
  "byte_30": 0.00087706475661453,
  "byte_3c": 0.00029235491887151,
  "byte_66": 0.000438532378307265,
  "byte_f2": 0.000146177459435755,
  "byte_d9": 0.000146177459435755,
  "byte_4e": 0.00204648443210057,
  "byte_2c": 0.00146177459435755,
  "byte_85": 0.002485016810407835,
  "byte_83": 0.00409296886420114,
  "byte_55": 0.00204648443210057,
  "byte_7e": 0.00058470983774302,
  "byte_cd": 0.000438532378307265,
  "byte_bc": 0.000146177459435755,
  "byte_5d": 0.001023242216050285,
  "byte_f5": 0.000146177459435755,
  "byte_b4": 0.00029235491887151,
  "byte_ab": 0.000146177459435755,
  "byte_ef": 0.00058470983774302,
  "byte_bb": 0.000730887297178775,
  "byte_44": 0.000438532378307265,
  "byte_3b": 0.00087706475661453,
  "byte_c6": 0.00116941967548604,
  "byte_5f": 0.00029235491887151,
  "byte_a7": 0.001900306972664815,
  "byte_d6": 0.00233883935097208,
  "byte_2a": 0.00058470983774302,
  "byte_c9": 0.00029235491887151,
  "byte_c8": 0.00058470983774302,
  "byte_5e": 0.00029235491887151,
  "byte_98": 0.000146177459435755,
  "byte_eb": 0.000146177459435755,
  "byte_26": 0.000146177459435755,
  "byte_72": 0.00029235491887151,
  "byte_d4": 0.00029235491887151,
  "byte_67": 0.00058470983774302,
  "byte_e1": 0.000146177459435755,
  "byte_31": 0.000438532378307265,
  "byte_59": 0.00029235491887151,
  "byte_a5": 0.000146177459435755,
  "byte_e6": 0.000438532378307265,
  "byte_da": 0.000146177459435755,
  "byte_cf": 0.00029235491887151,
  "byte_78": 0.000146177459435755,
  "byte_1e": 0.000146177459435755,
  "byte_fa": 0.000146177459435755,
  "byte_45": 0.000146177459435755,
  "byte_b1": 0.000146177459435755,
  "byte_76": 0.000146177459435755,
  "byte_1a": 0.000730887297178775,
  "byte_a6": 0.00029235491887151,
  "byte_65": 0.000146177459435755,
  "byte_4a": 0.000146177459435755,
  "byte_be": 0.000146177459435755,
  "num_nodes": 24,
  "num_edges": 23,
  "avg_degree": 1.9166666666666667,
  "density": 0.041666666666666664,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 66,
  "event_nums": 31,
  "creation_block": 4313447,
  "creation_timestamp": 1506434789,
  "life_time": 32004.0,
  "duration_seconds": 964862.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 24,
  "num_buyers": 2,
  "num_sellers": 22,
  "num_creator_transfers": 33,
  "buy_amt": 3.2040243311e+19,
  "sell_amt": 3.2040243311e+19,
  "avg_value": 9.564251734626865e+17,
  "txn_per_block": 0.002062177784721137,
  "avg_gas_limit": 169465.92424242425,
  "std_gas_limit": 450001.08528681623,
  "avg_gas_used": 118254.62121212122,
  "std_gas_used": 365057.59771765716,
  "avg_gas_price": 8939393939.39394,
  "std_gas_price": 11573060133.120012,
  "tokenpurchase_num": 31,
  "timeline_sequence": [
    [
      4313447,
      1506434789,
      0,
      19,
      0,
      3066382,
      42000000000,
      0,
      0,
      3862651,
      2966381,
      18807701
    ],
    [
      4326073,
      1506816674,
      0,
      90,
      1010000000000000000,
      349420,
      11000000000,
      0,
      0,
      4604998,
      249022,
      18795075
    ],
    [
      4326284,
      1506822894,
      15,
      103,
      1150000000000000000,
      249182,
      3000000000,
      0,
      0,
      5386169,
      149022,
      18794864
    ],
    [
      4326330,
      1506824730,
      16,
      135,
      2200000000000000000,
      198881,
      21000000000,
      0,
      0,
      4604857,
      98721,
      18794818
    ],
    [
      4326350,
      1506825369,
      2,
      26,
      1500000000000000000,
      149182,
      21000000000,
      0,
      0,
      1323224,
      149022,
      18794798
    ],
    [
      4326356,
      1506825514,
      3,
      20,
      1500000000000000000,
      98881,
      21000000000,
      0,
      0,
      741857,
      98721,
      18794792
    ],
    [
      4326365,
      1506825858,
      0,
      107,
      996867178000000000,
      149182,
      21000000000,
      0,
      0,
      5082560,
      149022,
      18794783
    ],
    [
      4326367,
      1506825910,
      1,
      11,
      50000000000000000,
      280000,
      21000000000,
      0,
      0,
      850672,
      149022,
      18794781
    ],
    [
      4326480,
      1506829076,
      0,
      126,
      1200000000000000000,
      149182,
      21000000000,
      0,
      0,
      4092451,
      149022,
      18794668
    ],
    [
      4326920,
      1506842496,
      0,
      65,
      1090000000000000000,
      249182,
      5000000000,
      0,
      0,
      6520926,
      149022,
      18794228
    ],
    [
      4327819,
      1506869086,
      11,
      69,
      100000000000000000,
      200000,
      27000000000,
      0,
      0,
      4293201,
      149022,
      18793329
    ],
    [
      4328702,
      1506896031,
      18,
      82,
      1800000000000000000,
      198881,
      5000000000,
      0,
      0,
      6306478,
      98721,
      18792446
    ],
    [
      4328705,
      1506896106,
      19,
      97,
      1700000000000000000,
      198881,
      5000000000,
      0,
      0,
      6173364,
      98721,
      18792443
    ],
    [
      4329144,
      1506909299,
      36,
      18,
      4000000000000000000,
      200000,
      21000000000,
      0,
      0,
      2103880,
      149022,
      18792004
    ],
    [
      4329156,
      1506909681,
      1,
      95,
      396376133000000000,
      98881,
      5000000000,
      0,
      0,
      5957851,
      98721,
      18791992
    ],
    [
      4329339,
      1506914793,
      1,
      25,
      1000000000000000000,
      198881,
      5000000000,
      0,
      0,
      3754510,
      98721,
      18791809
    ],
    [
      4330600,
      1506953131,
      1,
      117,
      50000000000000000,
      149182,
      21000000000,
      0,
      0,
      6640846,
      149022,
      18790548
    ],
    [
      4330701,
      1506956428,
      1,
      51,
      95000000000000000,
      149182,
      21000000000,
      0,
      0,
      2680263,
      149022,
      18790447
    ],
    [
      4330815,
      1506959883,
      121,
      184,
      10000000000000000,
      149182,
      21000000000,
      0,
      0,
      5954167,
      149022,
      18790333
    ],
    [
      4330905,
      1506962265,
      20,
      7,
      1570000000000000000,
      98881,
      42000000000,
      0,
      0,
      443532,
      98721,
      18790243
    ],
    [
      4331112,
      1506968594,
      2,
      20,
      530000000000000000,
      149182,
      21000000000,
      0,
      0,
      703161,
      149022,
      18790036
    ],
    [
      4332061,
      1506997853,
      0,
      71,
      1500000000000000000,
      149182,
      30000000000,
      0,
      0,
      3050918,
      149022,
      18789087
    ],
    [
      4332230,
      1507003500,
      1,
      116,
      1000000000000000000,
      249182,
      10000000000,
      0,
      0,
      6530271,
      98721,
      18788918
    ],
    [
      4332835,
      1507021050,
      21,
      3,
      22000000000000000,
      98881,
      30000000000,
      0,
      0,
      177500,
      98721,
      18788313
    ],
    [
      4332952,
      1507024568,
      9,
      86,
      2500000000000000000,
      210000,
      21000000000,
      0,
      0,
      3015839,
      149022,
      18788196
    ],
    [
      4334188,
      1507062338,
      109,
      94,
      10000000000000000,
      110000,
      21000000000,
      1,
      0,
      3775883,
      110000,
      18786960
    ],
    [
      4334193,
      1507062494,
      110,
      129,
      10000000000000000,
      210000,
      21000000000,
      0,
      0,
      6450994,
      149022,
      18786955
    ],
    [
      4334396,
      1507068371,
      2,
      66,
      490000000000000000,
      198881,
      5000000000,
      0,
      0,
      3509324,
      98721,
      18786752
    ],
    [
      4335772,
      1507110315,
      3,
      20,
      2000000000000000000,
      98881,
      30000000000,
      0,
      0,
      1087304,
      98721,
      18785376
    ],
    [
      4340320,
      1507244565,
      0,
      26,
      1200000000000000000,
      249182,
      11000000000,
      0,
      0,
      2614823,
      149022,
      18780828
    ],
    [
      4340491,
      1507248980,
      0,
      86,
      1000000000000000000,
      249182,
      5000000000,
      0,
      0,
      6218496,
      149022,
      18780657
    ],
    [
      4342946,
      1507323134,
      0,
      49,
      250000000000000000,
      149182,
      21000000000,
      0,
      0,
      3191042,
      149022,
      18778202
    ],
    [
      4345451,
      1507399651,
      4,
      51,
      110000000000000000,
      250000,
      4000000000,
      0,
      0,
      4175764,
      149022,
      18775697
    ],
    [
      4313447,
      1506434789,
      0,
      0,
      0,
      2157991,
      0,
      0,
      0,
      0,
      562053,
      0
    ],
    [
      4326073,
      1506816674,
      0,
      0,
      1010000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4326284,
      1506822894,
      0,
      0,
      1150000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4326330,
      1506824730,
      0,
      0,
      2200000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4326350,
      1506825369,
      0,
      0,
      1500000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4326356,
      1506825514,
      0,
      0,
      1500000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4326365,
      1506825858,
      0,
      0,
      996867178000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4326367,
      1506825910,
      0,
      0,
      50000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4326480,
      1506829076,
      0,
      0,
      1200000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4326920,
      1506842496,
      0,
      0,
      1090000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4327819,
      1506869086,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4328702,
      1506896031,
      0,
      0,
      1800000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4328705,
      1506896106,
      0,
      0,
      1700000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4329144,
      1506909299,
      0,
      0,
      4000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4329156,
      1506909681,
      0,
      0,
      396376133000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4329339,
      1506914793,
      0,
      0,
      1000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4330600,
      1506953131,
      0,
      0,
      50000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4330701,
      1506956428,
      0,
      0,
      95000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4330815,
      1506959883,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4330905,
      1506962265,
      0,
      0,
      1570000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4331112,
      1506968594,
      0,
      0,
      530000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4332061,
      1506997853,
      0,
      0,
      1500000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4332230,
      1507003500,
      0,
      0,
      1000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4332835,
      1507021050,
      0,
      0,
      22000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4332952,
      1507024568,
      0,
      0,
      2500000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4334188,
      1507062338,
      0,
      0,
      10000000000000000,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      4334193,
      1507062494,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4334396,
      1507068371,
      0,
      0,
      490000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4335772,
      1507110315,
      0,
      0,
      2000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4340320,
      1507244565,
      0,
      0,
      1200000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4340491,
      1507248980,
      0,
      0,
      1000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4342946,
      1507323134,
      0,
      0,
      250000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4345451,
      1507399651,
      0,
      0,
      110000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "/*\n\nCopyright (c) 2017 Esperite Ltd. <legal@esperite.co.nz>\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE\nOR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n\n*/\n\npragma solidity ^0.4.13;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a / b;\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC223ReceivingContract {\n    function tokenFallback(address _from, uint256 _value, bytes _data) public;\n}\n\ncontract ERC20ERC223 {\n  uint256 public totalSupply;\n  function balanceOf(address _owner) public constant returns (uint256);\n  function transfer(address _to, uint256 _value) public returns (bool);\n  function transfer(address _to, uint256 _value, bytes _data) public returns (bool);\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool);\n  function approve(address _spender, uint256 _value) public returns (bool success);\n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n  \n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _value);\n  event Transfer(address indexed _from, address indexed _to, uint256 indexed _value, bytes _data);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract Deco is ERC20ERC223 {\n\n  using SafeMath for uint256;\n\n  string public constant name = \"Deco\";\n  string public constant symbol = \"DEC\";\n  uint8 public constant decimals = 18;\n  \n  uint256 public constant totalSupply = 6*10**26; // 600,000,000. 000,000,000,000,000,000 units\n    \n  // Accounts\n  \n  mapping(address => Account) private accounts;\n  \n  struct Account {\n    uint256 balance;\n    mapping(address => uint256) allowed;\n    mapping(address => bool) isAllowanceAuthorized;\n  }  \n  \n  // Fix for the ERC20 short address attack.\n  // http://vessenes.com/the-erc20-short-address-attack-explained/\n  modifier onlyPayloadSize(uint256 size) {\n    require(msg.data.length >= size + 4);\n     _;\n  }\n\n  // Initialization\n\n  function Deco() {\n    accounts[msg.sender].balance = totalSupply;\n    Transfer(this, msg.sender, totalSupply);\n  }\n\n  // Balance\n\n  function balanceOf(address _owner) constant returns (uint256) {\n    return accounts[_owner].balance;\n  }\n\n  // Transfers\n\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) returns (bool) {\n    performTransfer(msg.sender, _to, _value, \"\");\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function transfer(address _to, uint256 _value, bytes _data) onlyPayloadSize(2 * 32) returns (bool) {\n    performTransfer(msg.sender, _to, _value, _data);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) returns (bool) {\n    require(hasApproval(_from, msg.sender));\n    uint256 _allowed = accounts[_from].allowed[msg.sender];    \n    performTransfer(_from, _to, _value, \"\");    \n    accounts[_from].allowed[msg.sender] = _allowed.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function performTransfer(address _from, address _to, uint256 _value, bytes _data) private returns (bool) {\n    require(_to != 0x0);\n    accounts[_from].balance = accounts[_from].balance.sub(_value);    \n    accounts[_to].balance = accounts[_to].balance.add(_value);\n    if (isContract(_to)) {\n      ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n      receiver.tokenFallback(_from, _value, _data);\n    }    \n    return true;\n  }\n\n  function isContract(address _to) private constant returns (bool) {\n    uint256 codeLength;\n    assembly {\n      codeLength := extcodesize(_to)\n    }\n    return codeLength > 0;\n  }\n\n  // Approval & Allowance\n  \n  function approve(address _spender, uint256 _value) returns (bool) {\n    require(msg.sender != _spender);\n    // https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (accounts[msg.sender].allowed[_spender] != 0)) {\n      revert();\n      return false;\n    }\n    accounts[msg.sender].allowed[_spender] = _value;\n    accounts[msg.sender].isAllowanceAuthorized[_spender] = true;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return accounts[_owner].allowed[_spender];\n  }\n\n  function hasApproval(address _owner, address _spender) constant returns (bool) {        \n    return accounts[_owner].isAllowanceAuthorized[_spender];\n  }\n\n  function removeApproval(address _spender) {    \n    delete(accounts[msg.sender].allowed[_spender]);\n    accounts[msg.sender].isAllowanceAuthorized[_spender] = false;\n  }\n\n}\n\ncontract DecoBank {\n  \n  using SafeMath for uint256;\n\n  Deco public token;  \n  \n  address private crowdsaleWallet;\n  address private decoReserveWallet;\n  uint256 public weiRaised;\n\n  uint256 public constant totalSupplyUnits = 6*10**26;\n  uint256 private constant MINIMUM_WEI = 10**16;\n  uint256 private constant BASE = 10**18;\n  uint256 public originalRate = 3000;\n\n  uint256 public crowdsaleDistributedUnits = 0;\n  uint256 public issuerDistributedUnits = 0;\n\n  // Presale\n  uint256 public presaleStartTime;\n  uint256 public presaleEndTime;\n  uint256 private presaleDiscount = 50;\n  uint256 private presalePercentage = 5;\n\n  uint256 public issuerReservedMaximumPercentage = 5;\n\n  // Sale\n  uint256 public saleStartTime;\n  uint256 public saleEndTime;\n  uint256 private saleDiscount = 25;\n\n  // Rewards\n  uint256 public rewardDistributionStart;\n  uint256 public rewardDistributedUnits = 0;  \n\n  // Contributors\n  mapping(address => Contributor) private contributors;\n\n  struct Contributor {    \n    uint256 contributedWei;\n    uint256 decoUnits;\n    uint256 rewardDistributedDecoUnits;\n  }\n\n  uint256 public contributorsCount = 0;\n\n  // Events\n  event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n  event RewardDistributed(address indexed beneficiary, uint256 amount);\n  event RemainingRewardOwnershipChanged(address indexed from, address indexed to);  \n\n  address private contractCreator = msg.sender;\n\n  function DecoBank() {\n    token = new Deco();\n\n    presaleStartTime = 1506816000; // Sunday, October 1, 2017 12:00:00 AM\n    presaleEndTime = presaleStartTime + 30 days;\n\n    saleStartTime = presaleEndTime + 1 days;\n    saleEndTime = saleStartTime + 180 days;\n\n    rewardDistributionStart = saleEndTime + 1 days;\n\n    crowdsaleWallet = 0xEaC4ff9Aa8342d8B5c59370Ac04a55367A788B30;\n    decoReserveWallet = 0xDA01fDeEF573b5cC51D0Ddc2600F476aaC71A600;\n  }\n\n  // Sale events\n\n  modifier validPurchase() {\n    require(isValidPurchase());\n    _;\n  }\n  \n  function isValidPurchase() private returns (bool) {\n    bool minimumContribution = msg.value >= MINIMUM_WEI;\n    return minimumContribution && (presaleActive() || saleActive());\n  }  \n\n  function() payable validPurchase {\n    require(msg.sender != 0x0);\n    buyTokens(msg.sender);\n  }\n\n  function buyTokens(address beneficiary) private {    \n    uint256 weiAmount = msg.value;    \n    uint256 tokens = weiAmount.mul(currentRate());\n    uint256 issuerReserveTokens = unitsForIssuerReserve(tokens);\n    \n    require(crowdsaleDistributedUnits.add(tokens).add(issuerReserveTokens) <= totalSupplyUnits);\n\n    incrementContributorsCount(beneficiary);\n\n    contributors[beneficiary].decoUnits = contributors[beneficiary].decoUnits.add(tokens);\n    contributors[beneficiary].contributedWei = contributors[beneficiary].contributedWei.add(weiAmount);\n\n    issuerDistributedUnits = issuerDistributedUnits.add(issuerReserveTokens);\n    crowdsaleDistributedUnits = crowdsaleDistributedUnits.add(tokens).add(issuerReserveTokens);\n    weiRaised = weiRaised.add(weiAmount);\n            \n    TokenPurchase(beneficiary, weiAmount, tokens);\n    \n    crowdsaleWallet.transfer(weiAmount);\n    token.transfer(beneficiary, tokens);\n    if (issuerReserveTokens != 0) {\n      token.transfer(decoReserveWallet, issuerReserveTokens);\n    }            \n  }\n\n  function incrementContributorsCount(address _address) private {\n    if (contributors[_address].contributedWei == 0) {\n      contributorsCount = contributorsCount.add(1);\n    }\n  }\n\n  function contributedWei(address _address) constant public returns (uint256) {\n    return contributors[_address].contributedWei;\n  }\n\n  function distibutedDecoUnits(address _address) constant public returns (uint256) {\n    return contributors[_address].decoUnits;\n  }\n\n  function circulatingSupply() constant public returns (uint256) {\n    return crowdsaleDistributedUnits.add(rewardDistributedUnits);\n  }\n\n  function currentDiscountPercentage() public constant returns (uint256) {\n    if (presaleStartTime > now) { return presaleDiscount; }\n    if (presaleActive()) { return presaleDiscount; }\n    uint256 discountSub = saleStage().mul(5);\n    uint256 discount = saleDiscount.sub(discountSub);\n    return discount;\n  }\n\n  function currentRate() public constant returns (uint256) {\n    uint256 x = (BASE.mul(100).sub(currentDiscountPercentage().mul(BASE))).div(100);\n    return originalRate.mul(BASE).div(x);\n  }\n\n  // Presale\n\n  function presaleLimitUnits() public constant returns (uint256) {\n    return totalSupplyUnits.div(100).mul(presalePercentage);\n  }\n\n  function shouldEndPresale() private constant returns (bool) {\n    if ((crowdsaleDistributedUnits.sub(issuerDistributedUnits) >= presaleLimitUnits()) || (now >= presaleEndTime)) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  function presaleActive() public constant returns (bool) {\n    bool inRange = now >= presaleStartTime && now < presaleEndTime;\n    return inRange && shouldEndPresale() == false;\n  }\n\n  // Sale\n\n  function unitsLimitForCurrentSaleStage() public constant returns (uint256) {\n    return totalSupplyUnits.div(100).mul(currentMaximumSalePercentage());\n  }\n\n  function maximumSaleLimitUnits() public constant returns (uint256) {\n    return totalSupplyUnits.div(100).mul(50);\n  }\n\n  function currentMaximumSalePercentage() public constant returns (uint256) {\n    return saleStage().mul(8).add(10);\n  }\n\n  function saleLimitReachedForCurrentStage() public constant returns (bool) {\n    return (crowdsaleDistributedUnits.sub(issuerDistributedUnits) >= unitsLimitForCurrentSaleStage());\n  }\n\n  function currentSaleStage() constant public returns (uint256) {\n    return saleStage().add(1);\n  }\n\n  function saleStage() private returns (uint256) {\n    uint256 delta = saleEndTime.sub(saleStartTime);\n    uint256 stageStep = delta.div(6);\n    int256 stageDelta = int256(now - saleStartTime);\n    if ((stageDelta <= 0) || (stageStep == 0)) {\n      return 0;\n    } else {\n      uint256 reminder = uint256(stageDelta) % stageStep;\n      uint256 dividableDelta = uint256(stageDelta).sub(reminder);\n      uint256 stage = dividableDelta.div(stageStep);\n      if (stage <= 5) {\n        return stage;\n      } else {\n        return 5;\n      }\n    }\n  }\n\n  function saleActive() public constant returns (bool) {\n    bool inRange = now >= saleStartTime && now < saleEndTime;        \n    return inRange && saleLimitReachedForCurrentStage() == false;\n  }\n\n  // Issuer Reserve\n\n  function unitsForIssuerReserve(uint256 _tokensForDistribution) private returns (uint256) {\n    uint256 residue = maximumIssuerReservedUnits().sub(issuerDistributedUnits);\n    uint256 toIssuer = _tokensForDistribution.div(100).mul(10);\n    if (residue > toIssuer) {\n      return toIssuer;\n    } else {\n      return residue;\n    }\n  }\n\n  function maximumIssuerReservedUnits() public constant returns (uint256) {\n    return totalSupplyUnits.div(100).mul(issuerReservedMaximumPercentage);\n  }\n\n  // Reward distribution\n\n  modifier afterSale() {\n    require(rewardDistributionStarted());\n    _;\n  }\n\n  function rewardDistributionStarted() public constant returns (bool) {\n    return now >= rewardDistributionStart;\n  }\n\n  function requestReward() afterSale external {\n    if ((msg.sender == contractCreator) && (rewardDistributionEnded())) {\n      sendNotDistributedUnits();\n    } else {\n      rewardDistribution(msg.sender);\n    }    \n  }\n\n  function rewardDistribution(address _address) private {\n    require(contributors[_address].contributedWei > 0);    \n    uint256 reward = payableReward(_address);\n    require(reward > 0);\n    sendReward(_address, reward);\n  }\n\n  function sendNotDistributedUnits() private {\n    require(msg.sender == contractCreator);\n    uint256 balance = token.balanceOf(this);\n    RewardDistributed(contractCreator, balance);\n    sendReward(contractCreator, balance);\n  }\n\n  function payableReward(address _address) afterSale constant public returns (uint256) {\n    uint256 unitsLeft = totalUnitsLeft();\n    if (unitsLeft < 10**4) {\n      return unitsLeft;\n    }\n    uint256 totalReward = contributorTotalReward(_address);\n    uint256 paidBonus = contributors[_address].rewardDistributedDecoUnits;\n    uint256 totalRewardLeft = totalReward.sub(paidBonus);\n    uint256 bonusPerDay = totalReward.div(rewardDays());\n    if ((totalRewardLeft > 0) && ((bonusPerDay == 0) || (rewardDaysLeft() == 0))) {\n      return totalRewardLeft;\n    }\n    uint256 totalPayable = rewardPayableDays().mul(bonusPerDay);\n    uint256 reward = totalPayable.sub(paidBonus);\n    return reward;\n  }\n\n  function sendReward(address _address, uint256 _value) private {\n    contributors[_address].rewardDistributedDecoUnits = contributors[_address].rewardDistributedDecoUnits.add(_value);\n    rewardDistributedUnits = rewardDistributedUnits.add(_value); \n    RewardDistributed(_address, _value);\n    token.transfer(_address, _value);\n  }\n\n  function rewardPayableDays() constant public returns (uint256) {\n    uint256 payableDays = rewardDays().sub(rewardDaysLeft());\n    if (payableDays == 0) {\n      payableDays = 1;\n    }\n    if (payableDays > rewardDays()) {\n      payableDays = rewardDays();\n    }\n    return payableDays;\n  }\n\n  function rewardDays() constant public returns (uint256) {\n    uint256 rate = rewardUnitsRatePerYear();\n    if (rate == 0) {\n      return 80 * 365; // Initial assumption\n    }\n    uint256 daysToComplete = (totalSupplyUnits.sub(crowdsaleDistributedUnits)).mul(365).div(rate);\n    return daysToComplete;\n  }\n\n  function rewardUnitsRatePerYear() constant public returns (uint256) {\n    return crowdsaleDistributedUnits.div(100);\n  }\n\n  function currentRewardReleasePercentageRatePerYear() afterSale constant external returns (uint256) {\n    return rewardUnitsRatePerYear().mul(10**18).div(circulatingSupply()).mul(100); // Divide by 10**18 to get the actual decimal % value\n  }\n\n  function rewardDistributionEnd() constant public returns (uint256) {\n    uint256 secondsToComplete = rewardDays().mul(1 days);\n    return rewardDistributionStart.add(secondsToComplete);\n  }\n\n  function changeRemainingDecoRewardOwner(address _newOwner, string _confirmation) afterSale external {\n    require(_newOwner != 0x0);\n    require(sha3(_confirmation) == sha3(\"CONFIRM\"));\n    require(_newOwner != address(this));\n    require(_newOwner != address(token));    \n    require(contributors[_newOwner].decoUnits == 0);\n    require(contributors[msg.sender].decoUnits > 0);\n    require(token.balanceOf(_newOwner) > 0); // The new owner must have some number of DECO tokens. It proofs that _newOwner address is real.\n    contributors[_newOwner] = contributors[msg.sender];\n    delete(contributors[msg.sender]);\n    RemainingRewardOwnershipChanged(msg.sender, _newOwner);\n  }  \n\n  function totalUnitsLeft() constant public returns (uint256) {\n    int256 units = int256(totalSupplyUnits) - int256((rewardDistributedUnits.add(crowdsaleDistributedUnits))); \n    if (units < 0) {\n      return token.balanceOf(this);\n    }\n    return uint256(units);\n  }\n\n  function rewardDaysLeft() constant public returns (uint256) {\n    if (now < rewardDistributionStart) {\n      return rewardDays();\n    }\n    int256 left = (int256(rewardDistributionEnd()) - int256(now)) / 1 days;\n    if (left < 0) {\n      left = 0;\n    }\n    return uint256(left);\n  }\n\n  function contributorTotalReward(address _address) constant public returns (uint256) {\n    uint256 proportion = contributors[_address].decoUnits.mul(10**32).div(crowdsaleDistributedUnits.sub(issuerDistributedUnits));\n    uint256 leftForBonuses = totalSupplyUnits.sub(crowdsaleDistributedUnits);\n    uint256 reward = leftForBonuses.mul(proportion).div(10**32);\n    uint256 totalLeft = totalSupplyUnits - (rewardDistributedUnits.add(reward).add(crowdsaleDistributedUnits));\n    if (totalLeft < 10**4) {\n      reward = reward.add(totalLeft);\n    }    \n    return reward;\n  }\n\n  function contributorDistributedReward(address _address) constant public returns (uint256) {\n    return contributors[_address].rewardDistributedDecoUnits;\n  }  \n\n  function rewardDistributionEnded() public constant returns (bool) {\n    return now > rewardDistributionEnd();\n  }\n\n}"
}