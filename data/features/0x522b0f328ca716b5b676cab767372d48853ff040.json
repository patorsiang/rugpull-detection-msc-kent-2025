{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 DUP5 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP5 DUP5 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP4 PUSH2 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP6 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI DUP4 PUSH2 CALLER PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 PUSH2 CALLER PUSH2 JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 DUP5 PUSH2 DUP8 PUSH2 JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SWAP2 DUP5 SWAP1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND OR SWAP1 SWAP3 MSTORE POP POP POP SWAP2 SWAP1 SWAP2 ADD SWAP3 POP PUSH1 SWAP2 POP POP MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH1 PUSH1 EXP SWAP1 DIV SWAP1 CALLER DUP8 DUP8 PUSH1 MLOAD DUP6 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP7 DUP7 PUSH1 MLOAD DUP3 DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE SWAP1 DUP3 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SWAP1 EXTCODESIZE GT SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP4 PUSH2 CALLER PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 PUSH2 CALLER PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 DUP5 PUSH2 DUP8 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE DUP7 SWAP3 POP SWAP1 PUSH4 SWAP1 CALLER SWAP1 DUP8 SWAP1 DUP8 SWAP1 MLOAD DUP5 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST GAS CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP7 DUP7 PUSH1 MLOAD DUP3 DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE SWAP1 DUP3 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH2 CALLER PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 CALLER PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 DUP4 PUSH2 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP6 DUP6 PUSH1 MLOAD DUP3 DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE SWAP1 DUP3 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE SWAP1 JUMP STOP LOG1 PUSH6 SHA3 SWAP3 UNKNOWN_0x28 UNKNOWN_0xc8 CALLDATACOPY PUSH26 UNKNOWN_0xca STOP UNKNOWN_0x29",
  "opcode_entropy": 4.700699285947504,
  "opcode_count": 1982,
  "unique_opcodes": 61,
  "byte_entropy": 5.5918524265591225,
  "byte_60": 0.11228197674418605,
  "byte_40": 0.014898255813953489,
  "byte_52": 0.02616279069767442,
  "byte_04": 0.018168604651162792,
  "byte_36": 0.0010901162790697674,
  "byte_10": 0.007630813953488372,
  "byte_61": 0.05050872093023256,
  "byte_00": 0.02507267441860465,
  "byte_7f": 0.0014534883720930232,
  "byte_57": 0.01744186046511628,
  "byte_63": 0.005450581395348837,
  "byte_ff": 0.007994186046511628,
  "byte_e0": 0.0014534883720930232,
  "byte_02": 0.017805232558139535,
  "byte_0a": 0.015988372093023256,
  "byte_35": 0.005813953488372093,
  "byte_16": 0.02071220930232558,
  "byte_06": 0.002543604651162791,
  "byte_fd": 0.0061773255813953485,
  "byte_de": 0.0003633720930232558,
  "byte_03": 0.030886627906976744,
  "byte_81": 0.0377906976744186,
  "byte_14": 0.0032703488372093025,
  "byte_84": 0.010901162790697675,
  "byte_80": 0.040697674418604654,
  "byte_18": 0.0007267441860465116,
  "byte_0d": 0.0003633720930232558,
  "byte_dd": 0.0003633720930232558,
  "byte_01": 0.0650436046511628,
  "byte_0e": 0.0007267441860465116,
  "byte_27": 0.0003633720930232558,
  "byte_e2": 0.0003633720930232558,
  "byte_e3": 0.0007267441860465116,
  "byte_33": 0.005450581395348837,
  "byte_31": 0.0010901162790697674,
  "byte_3c": 0.0003633720930232558,
  "byte_e5": 0.0014534883720930232,
  "byte_67": 0.0003633720930232558,
  "byte_70": 0.002180232558139535,
  "byte_a0": 0.00872093023255814,
  "byte_82": 0.02071220930232558,
  "byte_7b": 0.001816860465116279,
  "byte_95": 0.0014534883720930232,
  "byte_d8": 0.0003633720930232558,
  "byte_9b": 0.0003633720930232558,
  "byte_41": 0.0003633720930232558,
  "byte_9a": 0.0003633720930232558,
  "byte_a9": 0.0003633720930232558,
  "byte_05": 0.0032703488372093025,
  "byte_9c": 0.0014534883720930232,
  "byte_bb": 0.0007267441860465116,
  "byte_ad": 0.0003633720930232558,
  "byte_be": 0.0003633720930232558,
  "byte_45": 0.0007267441860465116,
  "byte_62": 0.0014534883720930232,
  "byte_f6": 0.0007267441860465116,
  "byte_8f": 0.0007267441860465116,
  "byte_8a": 0.0007267441860465116,
  "byte_48": 0.0003633720930232558,
  "byte_5b": 0.0345203488372093,
  "byte_34": 0.0032703488372093025,
  "byte_15": 0.016715116279069766,
  "byte_97": 0.0010901162790697674,
  "byte_ef": 0.0003633720930232558,
  "byte_56": 0.02071220930232558,
  "byte_51": 0.019622093023255814,
  "byte_20": 0.030886627906976744,
  "byte_90": 0.046875,
  "byte_83": 0.022892441860465115,
  "byte_91": 0.01744186046511628,
  "byte_50": 0.051962209302325583,
  "byte_d3": 0.001816860465116279,
  "byte_1f": 0.005450581395348837,
  "byte_19": 0.003633720930232558,
  "byte_92": 0.008357558139534883,
  "byte_f3": 0.0014534883720930232,
  "byte_21": 0.0010901162790697674,
  "byte_3e": 0.0003633720930232558,
  "byte_9d": 0.0010901162790697674,
  "byte_5d": 0.0010901162790697674,
  "byte_65": 0.0007267441860465116,
  "byte_af": 0.001816860465116279,
  "byte_86": 0.003633720930232558,
  "byte_b8": 0.00436046511627907,
  "byte_a5": 0.0003633720930232558,
  "byte_cf": 0.002180232558139535,
  "byte_24": 0.0032703488372093025,
  "byte_46": 0.0003633720930232558,
  "byte_ee": 0.0007267441860465116,
  "byte_64": 0.0007267441860465116,
  "byte_44": 0.0010901162790697674,
  "byte_37": 0.0014534883720930232,
  "byte_94": 0.001816860465116279,
  "byte_96": 0.0007267441860465116,
  "byte_53": 0.0003633720930232558,
  "byte_b6": 0.0003633720930232558,
  "byte_f7": 0.0003633720930232558,
  "byte_54": 0.003997093023255814,
  "byte_8d": 0.0029069767441860465,
  "byte_11": 0.0010901162790697674,
  "byte_db": 0.0007267441860465116,
  "byte_59": 0.0003633720930232558,
  "byte_07": 0.005087209302325582,
  "byte_69": 0.0010901162790697674,
  "byte_2c": 0.002180232558139535,
  "byte_09": 0.0029069767441860465,
  "byte_a4": 0.0003633720930232558,
  "byte_93": 0.00436046511627907,
  "byte_c1": 0.0003633720930232558,
  "byte_85": 0.0032703488372093025,
  "byte_d0": 0.0003633720930232558,
  "byte_f4": 0.0003633720930232558,
  "byte_e8": 0.0010901162790697674,
  "byte_55": 0.0029069767441860465,
  "byte_26": 0.0003633720930232558,
  "byte_1a": 0.0010901162790697674,
  "byte_87": 0.002543604651162791,
  "byte_6f": 0.0003633720930232558,
  "byte_74": 0.0003633720930232558,
  "byte_17": 0.0003633720930232558,
  "byte_ed": 0.0003633720930232558,
  "byte_32": 0.0003633720930232558,
  "byte_88": 0.0003633720930232558,
  "byte_5a": 0.0007267441860465116,
  "byte_f1": 0.0007267441860465116,
  "byte_fe": 0.0010901162790697674,
  "byte_e1": 0.0010901162790697674,
  "byte_f9": 0.0010901162790697674,
  "byte_0c": 0.0010901162790697674,
  "byte_7d": 0.0010901162790697674,
  "byte_f2": 0.0010901162790697674,
  "byte_3a": 0.0010901162790697674,
  "byte_eb": 0.0014534883720930232,
  "byte_2b": 0.0010901162790697674,
  "byte_a2": 0.0010901162790697674,
  "byte_c6": 0.0010901162790697674,
  "byte_78": 0.0010901162790697674,
  "byte_3f": 0.0014534883720930232,
  "byte_39": 0.0014534883720930232,
  "byte_6e": 0.0010901162790697674,
  "byte_4c": 0.0010901162790697674,
  "byte_cb": 0.0003633720930232558,
  "byte_b3": 0.0003633720930232558,
  "byte_f8": 0.0007267441860465116,
  "byte_a3": 0.0010901162790697674,
  "byte_1c": 0.0003633720930232558,
  "byte_3b": 0.0007267441860465116,
  "byte_77": 0.0003633720930232558,
  "byte_c0": 0.0003633720930232558,
  "byte_0b": 0.0003633720930232558,
  "byte_08": 0.002180232558139535,
  "byte_3d": 0.0003633720930232558,
  "byte_6a": 0.0003633720930232558,
  "byte_e6": 0.0003633720930232558,
  "byte_ce": 0.0003633720930232558,
  "byte_13": 0.0003633720930232558,
  "byte_38": 0.0003633720930232558,
  "byte_43": 0.0003633720930232558,
  "byte_76": 0.0003633720930232558,
  "byte_7c": 0.0003633720930232558,
  "byte_a1": 0.0003633720930232558,
  "byte_7a": 0.0007267441860465116,
  "byte_72": 0.0003633720930232558,
  "byte_30": 0.0003633720930232558,
  "byte_58": 0.0003633720930232558,
  "byte_28": 0.0003633720930232558,
  "byte_c8": 0.0003633720930232558,
  "byte_79": 0.0003633720930232558,
  "byte_98": 0.0003633720930232558,
  "byte_d4": 0.0003633720930232558,
  "byte_c9": 0.0003633720930232558,
  "byte_da": 0.0003633720930232558,
  "byte_c3": 0.0003633720930232558,
  "byte_b7": 0.0007267441860465116,
  "byte_c2": 0.0003633720930232558,
  "byte_cd": 0.0003633720930232558,
  "byte_a6": 0.0003633720930232558,
  "byte_ca": 0.0003633720930232558,
  "byte_29": 0.0003633720930232558,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 2,
  "event_nums": 1,
  "creation_block": 5482869,
  "creation_timestamp": 1524356214,
  "life_time": 19.0,
  "duration_seconds": 282.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.1,
  "avg_gas_limit": 482902.5,
  "std_gas_limit": 428685.5,
  "avg_gas_used": 475402.5,
  "std_gas_used": 436185.5,
  "avg_gas_price": 1000000000.0,
  "std_gas_price": 0.0,
  "transfer_num": 1,
  "timeline_sequence": [
    [
      5482869,
      1524356214,
      12,
      153,
      0,
      911588,
      1000000000,
      0,
      1,
      6659220,
      911588,
      17638021
    ],
    [
      5482888,
      1524356496,
      14,
      174,
      0,
      54217,
      1000000000,
      0,
      1,
      7130413,
      39217,
      17638002
    ]
  ],
  "sourcecode": "pragma solidity 0.4.21;\n\n/**\n\n * @title ERC20Basic\n\n * @dev Simpler version of ERC20 interface\n\n * @dev see https://github.com/ethereum/EIPs/issues/179\n\n */\n\ncontract ERC20Basic {\n\n  function totalSupply() public view returns (uint256);\n\n  function balanceOf(address who) public view returns (uint256);\n\n  function transfer(address to, uint256 value) public returns (bool);\n\n  event Transfer(address indexed from, address indexed to, uint256 value);\n\n}\n\n\n\n/**\n\n * @title SafeMath\n\n * @dev Math operations with safety checks that throw on error\n\n */\n\nlibrary SafeMath {\n\n\n\n  /**\n\n  * @dev Multiplies two numbers, throws on overflow.\n\n  */\n\n  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\n    if (a == 0) {\n\n      return 0;\n\n    }\n\n    c = a * b;\n\n    assert(c / a == b);\n\n    return c;\n\n  }\n\n\n\n  /**\n\n  * @dev Integer division of two numbers, truncating the quotient.\n\n  */\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n\n    // uint256 c = a / b;\n\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return a / b;\n\n  }\n\n\n\n  /**\n\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n\n  */\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\n    assert(b <= a);\n\n    return a - b;\n\n  }\n\n\n\n  /**\n\n  * @dev Adds two numbers, throws on overflow.\n\n  */\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {\n\n    c = a + b;\n\n    assert(c >= a);\n\n    return c;\n\n  }\n\n}\n\n\n/**\n* @title ERC223 interface\n* @dev see https://github.com/ethereum/eips/issues/223\n*/\ncontract ERC223 {\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success);\n    function transfer(address _to, uint _value, bytes _data, string _fallback) public returns (bool success);\n    event Transfer(address indexed from, address indexed to, uint value, bytes data);\n}\n\n/**\n * @title Contract that will work with ERC223 tokens.\n */\n \ncontract ERC223ReceivingContract { \n/**\n * @dev Standard ERC223 function that will handle incoming token transfers.\n *\n * @param _from  Token sender address.\n * @param _value Amount of tokens.\n * @param _data  Transaction metadata.\n */\n    function tokenFallback(address _from, uint _value, bytes _data);\n}\n\n/**\n* @title ERC223Token\n* @dev Generic implementation for the required functionality of the ERC223 standard.\n* @dev \n*/\ncontract PGGamePlatform is ERC223, ERC20Basic {\n  using SafeMath for uint256;\n  \n  string public name;\n  string public symbol;\n  uint8 public decimals;\n  uint256 public totalSupply;\n  mapping(address => uint256) public balances;\n\n  /**\n  * @dev Function to access name of token.\n  * @return _name string the name of the token.\n  */\n  function name() public view returns (string _name) {\n    return name;\n  }\n    \n  /**\n  * @dev Function to access symbol of token.\n  * @return _symbol string the symbol of the token.\n  */\n  function symbol() public view returns (string _symbol) {\n    return symbol;\n  }\n    \n  /**\n  * @dev Function to access decimals of token.\n  * @return _decimals uint8 decimal point of token fractions.\n  */\n  function decimals() public view returns (uint8 _decimals) {\n    return decimals;\n  }\n  \n  /**\n  * @dev Function to access total supply of tokens.\n  * @return _totalSupply uint256 total token supply.\n  */\n  function totalSupply() public view returns (uint256 _totalSupply) {\n    return totalSupply;\n  }\n\n  /**\n  * @dev Function to access the balance of a specific address.\n  * @param _owner address the target address to get the balance from.\n  * @return _balance uint256 the balance of the target address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 _balance) {\n    return balances[_owner];\n  }\n  \n  \n  function PGGamePlatform() public{\n      name = \"PG Game Platform\";\n      symbol = \"PGG\";\n      decimals = 4;\n      totalSupply = 10000000000 * 10 ** uint(decimals);\n      balances[msg.sender] = totalSupply;\n\n  }\n\n  /**\n  * @dev Function that is called when a user or another contract wants to transfer funds using custom fallback.\n  * @param _to address to which the tokens are transfered.\n  * @param _value uint256 amount of tokens to be transfered.\n  * @param _data bytes data along token transaction.\n  * @param _fallback string name of the custom fallback function to be called after transaction.\n  */\n  function transfer(address _to, uint256 _value, bytes _data, string _fallback) public returns (bool _success) {\n    if (isContract(_to)) {\n      if (balanceOf(msg.sender) < _value)\n      revert();\n      balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n      balances[_to] = balanceOf(_to).add(_value);\n      \n      // Calls the custom fallback function.\n      // Will fail if not implemented, reverting transaction.\n      assert(_to.call.value(0)(bytes4(keccak256(_fallback)), msg.sender, _value, _data));\n      \n      Transfer(msg.sender, _to, _value, _data);\n      return true;\n    } else {\n      return transferToAddress(_to, _value, _data);\n    }\n  }\n\n  /**\n  * @dev Function that is called when a user or another contract wants to transfer funds using default fallback.\n  * @param _to address to which the tokens are transfered.\n  * @param _value uint256 amount of tokens to be transfered.\n  * @param _data bytes data along token transaction.\n  */\n  function transfer(address _to, uint256 _value, bytes _data) public returns (bool _success) {\n    if (isContract(_to)) {\n      return transferToContract(_to, _value, _data);\n    } else {\n      return transferToAddress(_to, _value, _data);\n    }\n  }\n\n  /**\n  * @dev Standard function transfer similar to ERC20 transfer with no _data.\n  * Added due to backwards compatibility reasons.\n  * @param _to address to which the tokens are transfered.\n  * @param _value uint256 amount of tokens to be transfered.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool _success) {\n    // Adds empty bytes to fill _data param in functions\n    bytes memory empty;\n    if (isContract(_to)) {\n      return transferToContract(_to, _value, empty);\n    } else {\n      return transferToAddress(_to, _value, empty);\n    }\n  }\n\n  /**\n  * @dev Function to test whether target address is a contract.\n  * @param _addr address to be tested as a contract address or something else.\n  * @return _isContract bool true if target address is a contract false otherwise.\n  */\n  function isContract(address _addr) private view returns (bool _isContract) {\n    uint length;\n    assembly {\n      length := extcodesize(_addr)\n    }\n    return (length > 0);\n  }\n    \n  /**\n  * @dev Function that is called when transaction target is an address.\n  * @param _to address to which the tokens are transfered.\n  * @param _value uint256 amount of tokens to be transfered.\n  * @param _data bytes data along token transaction.\n  */\n  function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool _success) {\n    if (balanceOf(msg.sender) < _value)\n    revert();\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n    balances[_to] = balanceOf(_to).add(_value);\n\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n\n  /**\n  * @dev Function that is called when transaction target is a contract.\n  * @param _to address to which the tokens are transfered.\n  * @param _value uint256 amount of tokens to be transfered.\n  * @param _data bytes data along token transaction.\n  */\n  function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool _success) {\n    if (balanceOf(msg.sender) < _value) {\n        revert();\n    }\n    balances[msg.sender] = balanceOf(msg.sender).sub(_value);\n    balances[_to] = balanceOf(_to).add(_value);\n\n    // Calls the default fallback function.\n    // Will fail if not implemented, reverting transaction.\n    ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);\n    receiver.tokenFallback(msg.sender, _value, _data);\n\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n}"
}