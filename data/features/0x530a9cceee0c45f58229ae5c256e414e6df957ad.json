{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLVALUE LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLVALUE SWAP2 POP DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 SLOAD DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 CALLER DUP4 PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH32 CALLER DUP4 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP2 SWAP1 SWAP2 SWAP3 SWAP4 SWAP2 SWAP3 SWAP4 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH32 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 SLOAD PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP JUMPDEST JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH3 PUSH1 SLOAD SUB TIMESTAMP GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 MUL SWAP1 POP PUSH3 DUP2 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 CALLER PUSH1 SLOAD PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD TIMESTAMP LT SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 PUSH1 SLOAD MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 DUP2 PUSH1 SLOAD MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 DUP2 SWAP1 SSTORE POP PUSH32 CALLER DUP3 PUSH1 SLOAD PUSH1 SLOAD PUSH1 MLOAD DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP5 POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH20 AND PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH32 CALLER DUP3 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH20 AND DUP5 PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP5 PUSH20 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 DUP1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 SLOAD TIMESTAMP ADD PUSH1 DUP2 SWAP1 SSTORE POP PUSH32 DUP4 PUSH1 SLOAD PUSH1 SLOAD PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD TIMESTAMP LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 DUP2 GT ISZERO PUSH2 JUMPI CALLER PUSH20 AND PUSH2 DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO PUSH2 JUMPI PUSH32 CALLER DUP3 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI CALLER PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 PUSH1 SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO PUSH2 JUMPI PUSH32 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 SLOAD PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 ADDRESS PUSH20 AND BALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO PUSH2 JUMPI PUSH32 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND ADDRESS PUSH20 AND BALANCE PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0x27 TIMESTAMP PUSH27 DUP6 COINBASE STOP UNKNOWN_0x29",
  "opcode_entropy": 4.8066996227181615,
  "opcode_count": 3017,
  "unique_opcodes": 64,
  "byte_entropy": 4.881746588033774,
  "byte_0x": 0.00015010507355148604,
  "byte_60": 0.057340138096667666,
  "byte_80": 0.03602521765235665,
  "byte_40": 0.011407985589912939,
  "byte_52": 0.008856199339537676,
  "byte_04": 0.010657460222155508,
  "byte_36": 0.0015010507355148605,
  "byte_10": 0.002701891323926749,
  "byte_61": 0.030621435004503154,
  "byte_01": 0.02236565595917142,
  "byte_49": 0.0006004202942059442,
  "byte_57": 0.015460822575803062,
  "byte_00": 0.048784148904232966,
  "byte_35": 0.0015010507355148605,
  "byte_7c": 0.0012008405884118883,
  "byte_90": 0.03257280096067247,
  "byte_63": 0.005553887721404984,
  "byte_ff": 0.3303812668868208,
  "byte_16": 0.01981386970879616,
  "byte_0b": 0.0016511558090663465,
  "byte_97": 0.0007505253677574302,
  "byte_bc": 0.0004503152206544581,
  "byte_86": 0.0009006304413089162,
  "byte_14": 0.007355148604022816,
  "byte_03": 0.007505253677574302,
  "byte_e1": 0.0004503152206544581,
  "byte_1a": 0.0004503152206544581,
  "byte_aa": 0.0007505253677574302,
  "byte_4d": 0.0004503152206544581,
  "byte_0c": 0.003452416691684179,
  "byte_1f": 0.0004503152206544581,
  "byte_7b": 0.0004503152206544581,
  "byte_6d": 0.0012008405884118883,
  "byte_32": 0.0003002101471029721,
  "byte_39": 0.0007505253677574302,
  "byte_20": 0.010507355148604023,
  "byte_e5": 0.0003002101471029721,
  "byte_d1": 0.0006004202942059442,
  "byte_64": 0.0004503152206544581,
  "byte_29": 0.0006004202942059442,
  "byte_dc": 0.00015010507355148604,
  "byte_b0": 0.0006004202942059442,
  "byte_cf": 0.0004503152206544581,
  "byte_93": 0.0010507355148604023,
  "byte_3f": 0.0006004202942059442,
  "byte_4b": 0.0010507355148604023,
  "byte_a8": 0.0004503152206544581,
  "byte_3a": 0.0009006304413089162,
  "byte_be": 0.0003002101471029721,
  "byte_42": 0.0019513659561693185,
  "byte_b6": 0.0006004202942059442,
  "byte_6f": 0.0004503152206544581,
  "byte_d5": 0.0007505253677574302,
  "byte_44": 0.0003002101471029721,
  "byte_38": 0.0004503152206544581,
  "byte_05": 0.003602521765235665,
  "byte_55": 0.003452416691684179,
  "byte_f2": 0.0006004202942059442,
  "byte_de": 0.0004503152206544581,
  "byte_17": 0.002701891323926749,
  "byte_5c": 0.00015010507355148604,
  "byte_5a": 0.0009006304413089162,
  "byte_bb": 0.0009006304413089162,
  "byte_d0": 0.00015010507355148604,
  "byte_27": 0.0003002101471029721,
  "byte_b3": 0.0007505253677574302,
  "byte_71": 0.00015010507355148604,
  "byte_22": 0.00015010507355148604,
  "byte_c8": 0.0010507355148604023,
  "byte_72": 0.0003002101471029721,
  "byte_bf": 0.0007505253677574302,
  "byte_07": 0.003302311618132693,
  "byte_9e": 0.00015010507355148604,
  "byte_f3": 0.002701891323926749,
  "byte_7a": 0.0012008405884118883,
  "byte_0e": 0.0012008405884118883,
  "byte_84": 0.0009006304413089162,
  "byte_06": 0.003002101471029721,
  "byte_56": 0.008405884118883218,
  "byte_cb": 0.0007505253677574302,
  "byte_59": 0.0009006304413089162,
  "byte_88": 0.0015010507355148605,
  "byte_62": 0.0009006304413089162,
  "byte_8a": 0.0004503152206544581,
  "byte_c2": 0.0003002101471029721,
  "byte_c6": 0.0006004202942059442,
  "byte_b9": 0.00015010507355148604,
  "byte_8d": 0.0004503152206544581,
  "byte_a5": 0.0006004202942059442,
  "byte_5b": 0.023566496547583308,
  "byte_e4": 0.0004503152206544581,
  "byte_a6": 0.00015010507355148604,
  "byte_f9": 0.0007505253677574302,
  "byte_da": 0.0004503152206544581,
  "byte_3b": 0.0010507355148604023,
  "byte_b1": 0.00015010507355148604,
  "byte_4f": 0.0004503152206544581,
  "byte_2a": 0.0004503152206544581,
  "byte_7e": 0.0004503152206544581,
  "byte_b8": 0.0004503152206544581,
  "byte_67": 0.0007505253677574302,
  "byte_c1": 0.0003002101471029721,
  "byte_c0": 0.0004503152206544581,
  "byte_ee": 0.0006004202942059442,
  "byte_f0": 0.0004503152206544581,
  "byte_18": 0.0004503152206544581,
  "byte_a1": 0.0019513659561693185,
  "byte_08": 0.003152206544581207,
  "byte_d4": 0.0010507355148604023,
  "byte_24": 0.00015010507355148604,
  "byte_f6": 0.0006004202942059442,
  "byte_28": 0.0006004202942059442,
  "byte_fd": 0.008405884118883218,
  "byte_6b": 0.0003002101471029721,
  "byte_f8": 0.0004503152206544581,
  "byte_af": 0.0004503152206544581,
  "byte_54": 0.012308616031221855,
  "byte_0a": 0.009156409486640649,
  "byte_73": 0.01636145301711198,
  "byte_33": 0.003302311618132693,
  "byte_15": 0.024016811768237768,
  "byte_c5": 0.0007505253677574302,
  "byte_c4": 0.0006004202942059442,
  "byte_34": 0.004353047132993095,
  "byte_e6": 0.0003002101471029721,
  "byte_91": 0.00870609426598619,
  "byte_50": 0.029720804563194234,
  "byte_81": 0.019963974782347644,
  "byte_82": 0.00720504353047133,
  "byte_92": 0.003602521765235665,
  "byte_02": 0.005703992794956469,
  "byte_75": 0.0004503152206544581,
  "byte_74": 0.0003002101471029721,
  "byte_09": 0.0012008405884118883,
  "byte_fe": 0.0007505253677574302,
  "byte_0d": 0.003002101471029721,
  "byte_a9": 0.0003002101471029721,
  "byte_9c": 0.0009006304413089162,
  "byte_83": 0.004353047132993095,
  "byte_51": 0.011708195737015911,
  "byte_87": 0.0010507355148604023,
  "byte_4a": 0.0003002101471029721,
  "byte_f1": 0.0010507355148604023,
  "byte_5e": 0.0004503152206544581,
  "byte_3d": 0.0021014710297208045,
  "byte_3e": 0.0007505253677574302,
  "byte_7f": 0.0021014710297208045,
  "byte_8e": 0.0003002101471029721,
  "byte_47": 0.0006004202942059442,
  "byte_f5": 0.0003002101471029721,
  "byte_cd": 0.0003002101471029721,
  "byte_fa": 0.0009006304413089162,
  "byte_d8": 0.0004503152206544581,
  "byte_8b": 0.0003002101471029721,
  "byte_ad": 0.0006004202942059442,
  "byte_45": 0.0004503152206544581,
  "byte_2d": 0.00015010507355148604,
  "byte_2b": 0.0003002101471029721,
  "byte_9a": 0.0003002101471029721,
  "byte_b7": 0.0004503152206544581,
  "byte_53": 0.0006004202942059442,
  "byte_8f": 0.0006004202942059442,
  "byte_ed": 0.00015010507355148604,
  "byte_41": 0.0003002101471029721,
  "byte_37": 0.0006004202942059442,
  "byte_4e": 0.0006004202942059442,
  "byte_70": 0.0004503152206544581,
  "byte_79": 0.0009006304413089162,
  "byte_a0": 0.0006004202942059442,
  "byte_9f": 0.0003002101471029721,
  "byte_ac": 0.0003002101471029721,
  "byte_ca": 0.00015010507355148604,
  "byte_d3": 0.0013509456619633744,
  "byte_b2": 0.00015010507355148604,
  "byte_ea": 0.0007505253677574302,
  "byte_23": 0.0004503152206544581,
  "byte_2c": 0.0012008405884118883,
  "byte_96": 0.0006004202942059442,
  "byte_7d": 0.00015010507355148604,
  "byte_dd": 0.0003002101471029721,
  "byte_1e": 0.0004503152206544581,
  "byte_db": 0.0003002101471029721,
  "byte_0f": 0.0009006304413089162,
  "byte_6e": 0.0003002101471029721,
  "byte_77": 0.0003002101471029721,
  "byte_ce": 0.0003002101471029721,
  "byte_30": 0.0009006304413089162,
  "byte_11": 0.0013509456619633744,
  "byte_d6": 0.0007505253677574302,
  "byte_12": 0.0004503152206544581,
  "byte_e0": 0.00015010507355148604,
  "byte_fc": 0.0007505253677574302,
  "byte_6a": 0.0007505253677574302,
  "byte_1d": 0.0003002101471029721,
  "byte_8c": 0.0003002101471029721,
  "byte_95": 0.0004503152206544581,
  "byte_48": 0.0004503152206544581,
  "byte_9d": 0.0003002101471029721,
  "byte_e8": 0.0004503152206544581,
  "byte_46": 0.0004503152206544581,
  "byte_a2": 0.0004503152206544581,
  "byte_85": 0.0009006304413089162,
  "byte_d7": 0.0004503152206544581,
  "byte_a7": 0.00015010507355148604,
  "byte_78": 0.0003002101471029721,
  "byte_19": 0.0021014710297208045,
  "byte_1c": 0.0004503152206544581,
  "byte_a4": 0.0004503152206544581,
  "byte_3c": 0.0007505253677574302,
  "byte_1b": 0.00015010507355148604,
  "byte_e2": 0.0003002101471029721,
  "byte_bd": 0.00015010507355148604,
  "byte_ab": 0.0003002101471029721,
  "byte_eb": 0.0003002101471029721,
  "byte_68": 0.0006004202942059442,
  "byte_65": 0.0006004202942059442,
  "byte_9b": 0.0009006304413089162,
  "byte_cc": 0.0003002101471029721,
  "byte_c9": 0.00015010507355148604,
  "byte_43": 0.00015010507355148604,
  "byte_4c": 0.0003002101471029721,
  "byte_66": 0.00015010507355148604,
  "byte_94": 0.0003002101471029721,
  "byte_98": 0.00015010507355148604,
  "byte_69": 0.0003002101471029721,
  "byte_ba": 0.0003002101471029721,
  "byte_99": 0.0007505253677574302,
  "byte_58": 0.0003002101471029721,
  "byte_d9": 0.00015010507355148604,
  "byte_e3": 0.00015010507355148604,
  "byte_2e": 0.00015010507355148604,
  "byte_ec": 0.0003002101471029721,
  "byte_c7": 0.00015010507355148604,
  "byte_ae": 0.00015010507355148604,
  "byte_a3": 0.00015010507355148604,
  "byte_5f": 0.00015010507355148604,
  "byte_13": 0.0006004202942059442,
  "byte_e9": 0.00015010507355148604,
  "byte_b5": 0.00015010507355148604,
  "byte_fb": 0.00015010507355148604,
  "byte_76": 0.0004503152206544581,
  "byte_26": 0.0007505253677574302,
  "byte_d2": 0.0006004202942059442,
  "byte_31": 0.0003002101471029721,
  "byte_25": 0.00015010507355148604,
  "byte_89": 0.00015010507355148604,
  "num_nodes": 252,
  "num_edges": 239,
  "avg_degree": 1.8968253968253967,
  "density": 0.0037785366470625436,
  "connected_components": 28,
  "avg_clustering": 0.024470899470899473,
  "timeline_sequence": [],
  "sourcecode": "pragma solidity ^0.4.24;\ncontract Ownable{\n    address public owner;\n    event ownerTransfer(address indexed oldOwner, address indexed newOwner);\n    event ownerGone(address indexed oldOwner);\n\n    constructor(){\n        owner = msg.sender;\n    }\n    modifier onlyOwner(){\n        require(msg.sender == owner);\n        _;\n    }\n    function changeOwner(address _newOwner) public onlyOwner{\n        require(_newOwner != address(0x0));\n        emit ownerTransfer(owner, _newOwner);\n        owner = _newOwner;\n    }\n}\ncontract Haltable is Ownable{\n    bool public paused;\n    event ContractPaused(address by);\n    event ContractUnpaused(address by);\n\n    /**\n     * @dev Paused by default.\n     */\n    constructor(){\n        paused = true;\n    }\n    function pause() public onlyOwner {\n        paused = true;\n        emit ContractPaused(owner);\n    }\n    function unpause() public onlyOwner {\n        paused = false;\n        emit ContractUnpaused(owner);\n    }\n    modifier stopOnPause(){\n        if(msg.sender != owner){\n            require(paused == false);\n        }\n        _;\n    }\n}\ninterface ABIO_Token {\n    function owner() external returns (address);\n    function transfer(address receiver, uint amount) external;\n    function burnMyBalance() external;\n}\ninterface ABIO_preICO{\n    function weiRaised() external returns (uint);\n    function fundingGoal() external returns (uint);\n    function extGoalReached() external returns (uint);\n}\ncontract ABIO_BaseICO is Haltable{\n    mapping(address => uint256) ethBalances;\n\n    uint public weiRaised;//total raised in wei\n    uint public abioSold;//amount of ABIO sold\n    uint public volume; //total amount of ABIO selling in this preICO\n\n    uint public startDate;\n    uint public length;\n    uint public deadline;\n    bool public restTokensBurned;\n\n    uint public weiPerABIO; //how much wei one ABIO costs\n    uint public minInvestment;\n    uint public fundingGoal;\n    bool public fundingGoalReached;\n    address public treasury;\n\n    ABIO_Token public abioToken;\n\n    event ICOStart(uint volume, uint weiPerABIO, uint minInvestment);\n    event SoftcapReached(address recipient, uint totalAmountRaised);\n    event FundsReceived(address backer, uint amount);\n    event FundsWithdrawn(address receiver, uint amount);\n\n    event ChangeTreasury(address operator, address newTreasury);\n    event PriceAdjust(address operator, uint multipliedBy ,uint newMin, uint newPrice);\n\n         /**\n         * @notice allows owner to change the treasury in case of hack/lost keys.\n         * @dev Marked external because it is never called from this contract.\n         */\n         function changeTreasury(address _newTreasury) external onlyOwner{\n             treasury = _newTreasury;\n             emit ChangeTreasury(msg.sender, _newTreasury);\n         }\n\n         /**\n         * @notice allows owner to adjust `minInvestment` and `weiPerABIO` in case of extreme jumps of Ether's dollar-value.\n         * @param _multiplier Both `minInvestment` and `weiPerABIO` will be multiplied by `_multiplier`. It is supposed to be close to oldEthPrice/newEthPrice\n         * @param _multiplier MULTIPLIER IS SUPPLIED AS PERCENTAGE\n         */\n         function adjustPrice(uint _multiplier) external onlyOwner{\n             require(_multiplier < 400 && _multiplier > 25);\n             minInvestment = minInvestment * _multiplier / 100;\n             weiPerABIO = weiPerABIO * _multiplier / 100;\n             emit PriceAdjust(msg.sender, _multiplier, minInvestment, weiPerABIO);\n         }\n\n         /**\n          * @notice Called everytime we receive a contribution in ETH.\n          * @dev Tokens are immediately transferred to the contributor, even if goal doesn't get reached.\n          */\n         function () payable stopOnPause{\n             require(now < deadline);\n             require(msg.value >= minInvestment);\n             uint amount = msg.value;\n             ethBalances[msg.sender] += amount;\n             weiRaised += amount;\n             if(!fundingGoalReached && weiRaised >= fundingGoal){goalReached();}\n\n             uint ABIOAmount = amount / weiPerABIO ;\n             abioToken.transfer(msg.sender, ABIOAmount);\n             abioSold += ABIOAmount;\n             emit FundsReceived(msg.sender, amount);\n         }\n\n         /**\n         * @notice We implement tokenFallback in case someone decides to send us tokens or we want to increase ICO Volume.\n         * @dev If someone sends random tokens transaction is reverted.\n         * @dev If owner of token sends tokens, we accept them.\n         * @dev Crowdsale opens once this contract gets the tokens.\n         */\n         function tokenFallback(address _from, uint _value, bytes) external{\n             require(msg.sender == address(abioToken));\n             require(_from == abioToken.owner() || _from == owner);\n             volume = _value;\n             paused = false;\n             deadline = now + length;\n             emit ICOStart(_value, weiPerABIO, minInvestment);\n         }\n\n         /**\n         * @notice Burns tokens leftover from an ICO round.\n         * @dev This can be called by anyone after deadline since it's an essential and inevitable part.\n         */\n         function burnRestTokens() afterDeadline{\n                 require(!restTokensBurned);\n                 abioToken.burnMyBalance();\n                 restTokensBurned = true;\n         }\n\n         function isRunning() view returns (bool){\n             return (now < deadline);\n         }\n\n         function goalReached() internal;\n\n         modifier afterDeadline() { if (now >= deadline) _; }\n}\n\n\ncontract ABIO_ICO is ABIO_BaseICO{\n    ABIO_preICO PICO;\n    uint weiRaisedInPICO;\n    uint abioSoldInPICO;\n\n    event Prolonged(address oabiotor, uint newDeadline);\n    bool didProlong;\n    constructor(address _abioAddress, address _treasury, address _PICOAddr, uint _lenInMins,uint _minInvestment, uint _priceInWei){\n         abioToken = ABIO_Token(_abioAddress);\n         treasury = _treasury;\n\n         PICO = ABIO_preICO(_PICOAddr);\n         weiRaisedInPICO = PICO.weiRaised();\n         fundingGoal = PICO.fundingGoal();\n         if (weiRaisedInPICO >= fundingGoal){\n             goalReached();\n         }\n         minInvestment = _minInvestment;\n\n         startDate = now;\n         length = _lenInMins * 1 minutes;\n         weiPerABIO = _priceInWei;\n         fundingGoal = PICO.fundingGoal();\n    }\n\n    /**\n    * @notice a function that changes state if goal reached. If the PICO didn't reach goal, it reports back to it.\n    */\n    function goalReached() internal {\n        emit SoftcapReached(treasury, fundingGoal);\n        fundingGoalReached = true;\n        if (weiRaisedInPICO < fundingGoal){\n            PICO.extGoalReached();\n        }\n    }\n\n    /**\n     * @notice Lets participants withdraw the funds if goal was missed.\n     * @notice Lets treasury collect the funds if goal was reached.\n     * @dev The contract is obligated to return the ETH to contributors if goal isn't reached,\n     *      so we have to wait until the end for a withdrawal.\n     */\n    function safeWithdrawal() afterDeadline stopOnPause{\n        if (!fundingGoalReached) {\n            uint amount = ethBalances[msg.sender];\n            ethBalances[msg.sender] = 0;\n            if (amount > 0) {\n                if (msg.sender.send(amount)) {\n                    emit FundsWithdrawn(msg.sender, amount);\n                } else {\n                    ethBalances[msg.sender] = amount;\n                }\n            }\n        }\n        else if (fundingGoalReached) {\n            require(treasury == msg.sender);\n            if (treasury.send(weiRaised)) {\n                emit FundsWithdrawn(treasury, weiRaised);\n            } else if (treasury.send(address(this).balance)){\n                emit FundsWithdrawn(treasury, address(this).balance);\n            }\n        }\n    }\n\n    /**\n    * @notice Is going to be called in an extreme case where we need to prolong the ICO (e.g. missed Softcap by a few ETH)/\n    * @dev It's only called once, has to be called at least 4 days before ICO end and prolongs the ICO for no more than 3 weeks.\n    */\n    function prolong(uint _timeInMins) external onlyOwner{\n        require(!didProlong);\n        require(now <= deadline - 4 days);\n        uint t = _timeInMins * 1 minutes;\n        require(t <= 3 weeks);\n        deadline += t;\n        length += t;\n\n        didProlong = true;\n        emit Prolonged(msg.sender, deadline);\n    }\n}"
}