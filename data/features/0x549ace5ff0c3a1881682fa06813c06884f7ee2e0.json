{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH1 ISZERO ISZERO EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 SLOAD LT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLVALUE SWAP2 POP PUSH8 DUP3 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP4 SWAP1 SUB LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 ISZERO PUSH2 MUL DUP4 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE PUSH1 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE PUSH32 SWAP2 SWAP1 DUP5 SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SLOAD PUSH2 SWAP1 DUP4 SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 CALLER DUP4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH29 PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD POP POP POP POP STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 DUP4 ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH3 SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 TIMESTAMP GT PUSH2 JUMPI POP PUSH1 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH3 SWAP1 SWAP3 DIV AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 GT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP5 LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 MUL TIMESTAMP ADD PUSH1 SSTORE PUSH1 SLOAD PUSH8 SWAP2 SWAP1 SWAP2 MUL ADD PUSH1 SSTORE PUSH1 SWAP1 DUP2 SSTORE PUSH1 DUP1 SLOAD PUSH21 PUSH21 NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH3 SWAP1 SWAP3 DIV AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH3 MUL PUSH22 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP GT PUSH2 JUMPI PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH3 SWAP1 SWAP3 DIV AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND SWAP1 SSTORE JUMPDEST JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH3 SWAP1 SWAP3 DIV AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH8 DUP3 MUL SWAP1 SSTORE PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0x2f UNKNOWN_0xe2 UNKNOWN_0x4d UNKNOWN_0xfb UNKNOWN_0xc7 UNKNOWN_0xbf DUP1 PUSH11 UNKNOWN_0xa7 SLT SWAP3 INVALID_0x6f",
  "opcode_entropy": 4.725301436188945,
  "opcode_count": 1193,
  "unique_opcodes": 66,
  "byte_entropy": 5.654609493042569,
  "byte_60": 0.10730478589420656,
  "byte_40": 0.011586901763224182,
  "byte_52": 0.012090680100755667,
  "byte_04": 0.02216624685138539,
  "byte_36": 0.005037783375314861,
  "byte_10": 0.004030226700251889,
  "byte_61": 0.05239294710327456,
  "byte_00": 0.11838790931989925,
  "byte_fb": 0.0015113350125944584,
  "byte_57": 0.029219143576826197,
  "byte_63": 0.011586901763224182,
  "byte_ff": 0.018639798488664986,
  "byte_7c": 0.0015113350125944584,
  "byte_01": 0.030226700251889168,
  "byte_35": 0.0055415617128463475,
  "byte_16": 0.018639798488664986,
  "byte_02": 0.023173803526448364,
  "byte_d0": 0.0005037783375314861,
  "byte_5d": 0.0005037783375314861,
  "byte_3f": 0.0005037783375314861,
  "byte_81": 0.017632241813602016,
  "byte_14": 0.012594458438287154,
  "byte_cd": 0.0005037783375314861,
  "byte_80": 0.036272040302267,
  "byte_13": 0.0005037783375314861,
  "byte_b5": 0.0005037783375314861,
  "byte_31": 0.0015113350125944584,
  "byte_53": 0.0020151133501259445,
  "byte_fc": 0.0015113350125944584,
  "byte_29": 0.0010075566750629723,
  "byte_dc": 0.0005037783375314861,
  "byte_b0": 0.0015113350125944584,
  "byte_cf": 0.0015113350125944584,
  "byte_03": 0.034760705289672546,
  "byte_23": 0.0005037783375314861,
  "byte_4b": 0.0005037783375314861,
  "byte_8f": 0.0015113350125944584,
  "byte_eb": 0.0005037783375314861,
  "byte_4f": 0.0005037783375314861,
  "byte_48": 0.0010075566750629723,
  "byte_67": 0.003022670025188917,
  "byte_9a": 0.0015113350125944584,
  "byte_ef": 0.0010075566750629723,
  "byte_ce": 0.0010075566750629723,
  "byte_5b": 0.04231738035264484,
  "byte_69": 0.0005037783375314861,
  "byte_fa": 0.0005037783375314861,
  "byte_2c": 0.0005037783375314861,
  "byte_ae": 0.0010075566750629723,
  "byte_6e": 0.0015113350125944584,
  "byte_6d": 0.0005037783375314861,
  "byte_1a": 0.0005037783375314861,
  "byte_f0": 0.0010075566750629723,
  "byte_18": 0.0010075566750629723,
  "byte_8a": 0.0005037783375314861,
  "byte_66": 0.0010075566750629723,
  "byte_f6": 0.0005037783375314861,
  "byte_e9": 0.0005037783375314861,
  "byte_9d": 0.0010075566750629723,
  "byte_70": 0.0010075566750629723,
  "byte_a0": 0.012090680100755667,
  "byte_82": 0.007052896725440806,
  "byte_74": 0.003022670025188917,
  "byte_58": 0.0010075566750629723,
  "byte_0e": 0.0020151133501259445,
  "byte_2f": 0.0015113350125944584,
  "byte_7a": 0.0020151133501259445,
  "byte_3a": 0.0005037783375314861,
  "byte_84": 0.003022670025188917,
  "byte_7b": 0.0015113350125944584,
  "byte_06": 0.007556675062972292,
  "byte_bc": 0.0005037783375314861,
  "byte_3e": 0.0010075566750629723,
  "byte_5e": 0.0005037783375314861,
  "byte_22": 0.0005037783375314861,
  "byte_88": 0.0015113350125944584,
  "byte_ad": 0.0005037783375314861,
  "byte_bf": 0.0015113350125944584,
  "byte_4d": 0.0015113350125944584,
  "byte_19": 0.0025188916876574307,
  "byte_f8": 0.0010075566750629723,
  "byte_ee": 0.0025188916876574307,
  "byte_55": 0.0055415617128463475,
  "byte_f2": 0.0010075566750629723,
  "byte_a5": 0.0005037783375314861,
  "byte_c1": 0.0005037783375314861,
  "byte_56": 0.020151133501259445,
  "byte_d6": 0.0005037783375314861,
  "byte_05": 0.007052896725440806,
  "byte_9c": 0.0005037783375314861,
  "byte_08": 0.003526448362720403,
  "byte_90": 0.03324937027707808,
  "byte_54": 0.017632241813602016,
  "byte_0a": 0.012090680100755667,
  "byte_15": 0.024181360201511334,
  "byte_24": 0.0025188916876574307,
  "byte_50": 0.013602015113350126,
  "byte_fd": 0.017632241813602016,
  "byte_34": 0.010075566750629723,
  "byte_91": 0.00906801007556675,
  "byte_0d": 0.0015113350125944584,
  "byte_e0": 0.003526448362720403,
  "byte_b6": 0.0015113350125944584,
  "byte_b3": 0.0015113350125944584,
  "byte_a7": 0.0025188916876574307,
  "byte_64": 0.0015113350125944584,
  "byte_47": 0.0010075566750629723,
  "byte_33": 0.004534005037783375,
  "byte_09": 0.0025188916876574307,
  "byte_20": 0.010075566750629723,
  "byte_83": 0.005037783375314861,
  "byte_51": 0.007556675062972292,
  "byte_85": 0.0025188916876574307,
  "byte_f1": 0.0010075566750629723,
  "byte_93": 0.0010075566750629723,
  "byte_a1": 0.0015113350125944584,
  "byte_87": 0.0010075566750629723,
  "byte_7f": 0.0010075566750629723,
  "byte_97": 0.0010075566750629723,
  "byte_c3": 0.0005037783375314861,
  "byte_cb": 0.0005037783375314861,
  "byte_6a": 0.0010075566750629723,
  "byte_bd": 0.0005037783375314861,
  "byte_f3": 0.0020151133501259445,
  "byte_68": 0.0010075566750629723,
  "byte_c2": 0.0025188916876574307,
  "byte_44": 0.0020151133501259445,
  "byte_79": 0.0015113350125944584,
  "byte_4c": 0.0005037783375314861,
  "byte_dd": 0.0010075566750629723,
  "byte_d1": 0.0005037783375314861,
  "byte_b2": 0.0005037783375314861,
  "byte_89": 0.0005037783375314861,
  "byte_43": 0.0005037783375314861,
  "byte_aa": 0.0010075566750629723,
  "byte_f5": 0.0005037783375314861,
  "byte_92": 0.0055415617128463475,
  "byte_af": 0.0005037783375314861,
  "byte_c6": 0.0010075566750629723,
  "byte_3b": 0.0010075566750629723,
  "byte_5a": 0.0005037783375314861,
  "byte_d8": 0.0005037783375314861,
  "byte_e8": 0.0010075566750629723,
  "byte_07": 0.006045340050377834,
  "byte_0f": 0.0015113350125944584,
  "byte_2e": 0.0005037783375314861,
  "byte_1e": 0.0005037783375314861,
  "byte_95": 0.0005037783375314861,
  "byte_2b": 0.0005037783375314861,
  "byte_a8": 0.0005037783375314861,
  "byte_bb": 0.0005037783375314861,
  "byte_da": 0.0010075566750629723,
  "byte_2d": 0.0005037783375314861,
  "byte_c8": 0.0005037783375314861,
  "byte_d7": 0.0005037783375314861,
  "byte_72": 0.0010075566750629723,
  "byte_3d": 0.0005037783375314861,
  "byte_e1": 0.0005037783375314861,
  "byte_d2": 0.0005037783375314861,
  "byte_fe": 0.0005037783375314861,
  "byte_62": 0.003526448362720403,
  "byte_42": 0.0015113350125944584,
  "byte_11": 0.0015113350125944584,
  "byte_6b": 0.0005037783375314861,
  "byte_a6": 0.0005037783375314861,
  "byte_b1": 0.0005037783375314861,
  "byte_c0": 0.0005037783375314861,
  "byte_3c": 0.0010075566750629723,
  "byte_17": 0.0010075566750629723,
  "byte_73": 0.0005037783375314861,
  "byte_75": 0.0005037783375314861,
  "byte_1c": 0.0005037783375314861,
  "byte_65": 0.0005037783375314861,
  "byte_30": 0.0005037783375314861,
  "byte_e2": 0.0005037783375314861,
  "byte_c7": 0.0005037783375314861,
  "byte_ac": 0.0010075566750629723,
  "byte_9e": 0.0005037783375314861,
  "byte_de": 0.0005037783375314861,
  "byte_d9": 0.0005037783375314861,
  "byte_12": 0.0005037783375314861,
  "byte_6f": 0.0005037783375314861,
  "byte_db": 0.0005037783375314861,
  "byte_ba": 0.0005037783375314861,
  "byte_e7": 0.0005037783375314861,
  "num_nodes": 8,
  "num_edges": 7,
  "avg_degree": 1.75,
  "density": 0.125,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 24,
  "event_nums": 7,
  "creation_block": 6927775,
  "creation_timestamp": 1545412147,
  "life_time": 5910.0,
  "duration_seconds": 86919.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 9,
  "num_buyers": 2,
  "num_sellers": 7,
  "num_creator_transfers": 8,
  "buy_amt": 1.077226594e+21,
  "sell_amt": 1.078226594e+21,
  "avg_value": 8.621812752e+19,
  "txn_per_block": 0.004060226695990526,
  "avg_gas_limit": 141318.29166666666,
  "std_gas_limit": 169989.3274707462,
  "avg_gas_used": 71936.95833333333,
  "std_gas_used": 137033.29966486222,
  "avg_gas_price": 11500000000.0,
  "std_gas_price": 13322912594.474228,
  "fundtransfer_num": 7,
  "createmintablesale_num": 1,
  "setupaccreditedaddress_num": 5,
  "timeline_sequence": [
    [
      6927775,
      1545412147,
      126,
      34,
      0,
      704006,
      6000000000,
      0,
      1,
      6472186,
      704006,
      16193380
    ],
    [
      6927792,
      1545412380,
      127,
      132,
      0,
      132858,
      3000000000,
      0,
      1,
      7444520,
      88572,
      16193363
    ],
    [
      6927821,
      1545412832,
      128,
      171,
      0,
      66075,
      3000000000,
      0,
      1,
      4749482,
      44050,
      16193334
    ],
    [
      6927826,
      1545412937,
      129,
      70,
      0,
      66075,
      3000000000,
      0,
      1,
      5123395,
      44050,
      16193329
    ],
    [
      6927834,
      1545413046,
      130,
      172,
      0,
      66075,
      3000000000,
      0,
      1,
      7770565,
      44050,
      16193321
    ],
    [
      6927840,
      1545413106,
      131,
      25,
      0,
      66075,
      3000000000,
      0,
      1,
      1304833,
      44050,
      16193315
    ],
    [
      6927849,
      1545413245,
      132,
      106,
      0,
      66075,
      3000000000,
      0,
      1,
      7073372,
      44050,
      16193306
    ],
    [
      6931007,
      1545460370,
      6,
      43,
      1000000000000000000,
      21000,
      12000000000,
      1,
      0,
      3368735,
      21000,
      16190148
    ],
    [
      6931047,
      1545461207,
      7,
      81,
      1000000000000000000,
      85000,
      30000000000,
      1,
      0,
      2375987,
      84964,
      16190108
    ],
    [
      6931068,
      1545461532,
      8,
      2,
      1000000000000000000,
      300000,
      30000000000,
      0,
      1,
      153854,
      95385,
      16190087
    ],
    [
      6931078,
      1545461774,
      9,
      0,
      357744394000000000000,
      300000,
      30000000000,
      0,
      1,
      65385,
      65385,
      16190077
    ],
    [
      6931640,
      1545469609,
      0,
      13,
      1000000000000000000,
      300000,
      30000000000,
      0,
      1,
      545490,
      95385,
      16189515
    ],
    [
      6931646,
      1545469670,
      0,
      222,
      179371000000000000000,
      300000,
      30000000000,
      0,
      1,
      5589917,
      95385,
      16189509
    ],
    [
      6931677,
      1545470139,
      0,
      41,
      179371000000000000000,
      300000,
      30000000000,
      0,
      1,
      1113556,
      95385,
      16189478
    ],
    [
      6931697,
      1545470341,
      1,
      20,
      178368000000000000000,
      300000,
      30000000000,
      0,
      1,
      614390,
      65385,
      16189458
    ],
    [
      6933685,
      1545499066,
      1,
      23,
      179372200000000000000,
      300000,
      30000000000,
      0,
      1,
      910189,
      95385,
      16187470
    ],
    [
      6931047,
      1545461207,
      0,
      0,
      1000000000000000000,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      6931068,
      1545461532,
      0,
      0,
      1000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6931078,
      1545461774,
      0,
      0,
      357744394000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6931640,
      1545469609,
      0,
      0,
      1000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6931646,
      1545469670,
      0,
      0,
      179371000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6931677,
      1545470139,
      0,
      0,
      179371000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6931697,
      1545470341,
      0,
      0,
      178368000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6933685,
      1545499066,
      0,
      0,
      179372200000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.18;\n \n/**\n * Copyright 2018, Flowchain.co\n *\n * The FlowchainCoin (FLC) smart contract of private sale Round A\n */\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    int256 constant private INT256_MIN = -2**255;\n\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Multiplies two signed integers, reverts on overflow.\n    */\n    function mul(int256 a, int256 b) internal pure returns (int256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        require(!(a == -1 && b == INT256_MIN)); // This is the only case of overflow not detected by the check below\n\n        int256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two signed integers truncating the quotient, reverts on division by zero.\n    */\n    function div(int256 a, int256 b) internal pure returns (int256) {\n        require(b != 0); // Solidity only automatically asserts when dividing by 0\n        require(!(b == -1 && a == INT256_MIN)); // This is the only case of overflow\n\n        int256 c = a / b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two signed integers, reverts on overflow.\n    */\n    function sub(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a - b;\n        require((b >= 0 && c <= a) || (b < 0 && c > a));\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two signed integers, reverts on overflow.\n    */\n    function add(int256 a, int256 b) internal pure returns (int256) {\n        int256 c = a + b;\n        require((b >= 0 && c >= a) || (b < 0 && c < a));\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\ninterface Token {\n    function mintToken(address to, uint amount) external returns (bool success);  \n    function setupMintableAddress(address _mintable) public returns (bool success);\n}\n\ncontract MintableSale {\n    // @notice Create a new mintable sale\n    /// @param rate The exchange rate\n    /// @param fundingGoalInEthers The funding goal in ethers\n    /// @param durationInMinutes The duration of the sale in minutes\n    /// @return \n    function createMintableSale(uint256 rate, uint256 fundingGoalInEthers, uint durationInMinutes) external returns (bool success);\n}\n\ncontract EarlyTokenSale is MintableSale {\n    using SafeMath for uint256;\n    uint256 public fundingGoal;\n    uint256 public tokensPerEther;\n    uint public deadline;\n    address public multiSigWallet;\n    uint256 public amountRaised;\n    Token public tokenReward;\n    mapping(address => uint256) public balanceOf;\n    bool fundingGoalReached = false;\n    bool crowdsaleClosed = false;\n    address public creator;\n    address public addressOfTokenUsedAsReward;\n    bool public isFunding = false;\n\n    /* accredited investors */\n    mapping (address => uint256) public accredited;\n\n    event FundTransfer(address backer, uint amount);\n\n    /* Constrctor function */\n    function EarlyTokenSale(\n        address _addressOfTokenUsedAsReward\n    ) payable {\n        creator = msg.sender;\n        multiSigWallet = 0x9581973c54fce63d0f5c4c706020028af20ff723;\n        // Token Contract\n        addressOfTokenUsedAsReward = _addressOfTokenUsedAsReward;\n        tokenReward = Token(addressOfTokenUsedAsReward);\n        // Setup accredited investors\n        setupAccreditedAddress(0xec7210E3db72651Ca21DA35309A20561a6F374dd, 1000);\n    }\n\n    // @dev Start a new mintable sale.\n    // @param rate The exchange rate in ether, for example 1 ETH = 6400 FLC\n    // @param fundingGoalInEthers\n    // @param durationInMinutes\n    function createMintableSale(uint256 rate, uint256 fundingGoalInEthers, uint durationInMinutes) external returns (bool success) {\n        require(msg.sender == creator);\n        require(isFunding == false);\n        require(rate <= 6400 && rate >= 1);                   // rate must be between 1 and 6400\n        require(fundingGoalInEthers >= 1000);        \n        require(durationInMinutes >= 60 minutes);\n\n        deadline = now + durationInMinutes * 1 minutes;\n        fundingGoal = amountRaised + fundingGoalInEthers * 1 ether;\n        tokensPerEther = rate;\n        isFunding = true;\n        return true;    \n    }\n\n    modifier afterDeadline() { if (now > deadline) _; }\n    modifier beforeDeadline() { if (now <= deadline) _; }\n\n    /// @param _accredited The address of the accredited investor\n    /// @param _amountInEthers The amount of remaining ethers allowed to invested\n    /// @return Amount of remaining tokens allowed to spent\n    function setupAccreditedAddress(address _accredited, uint _amountInEthers) public returns (bool success) {\n        require(msg.sender == creator);    \n        accredited[_accredited] = _amountInEthers * 1 ether;\n        return true;\n    }\n\n    /// @dev This function returns the amount of remaining ethers allowed to invested\n    /// @return The amount\n    function getAmountAccredited(address _accredited) view returns (uint256) {\n        uint256 amount = accredited[_accredited];\n        return amount;\n    }\n\n    function closeSale() beforeDeadline {\n        require(msg.sender == creator);    \n        isFunding = false;\n    }\n\n    // change creator address\n    function changeCreator(address _creator) external {\n        require(msg.sender == creator);\n        creator = _creator;\n    }\n\n    /// @dev This function returns the current exchange rate during the sale\n    /// @return The address of token creator\n    function getRate() beforeDeadline view returns (uint) {\n        return tokensPerEther;\n    }\n\n    /// @dev This function returns the amount raised in wei\n    /// @return The address of token creator\n    function getAmountRaised() view returns (uint) {\n        return amountRaised;\n    }\n\n    function () payable {\n        // check if we can offer the private sale\n        require(isFunding == true && amountRaised < fundingGoal);\n\n        // the minimum deposit is 1 ETH\n        uint256 amount = msg.value;        \n        require(amount >= 1 ether);\n\n        require(accredited[msg.sender] - amount >= 0); \n\n        multiSigWallet.transfer(amount);      \n        balanceOf[msg.sender] += amount;\n        accredited[msg.sender] -= amount;\n        amountRaised += amount;\n        FundTransfer(msg.sender, amount);\n\n        uint256 value = amount.mul(tokensPerEther);        \n        tokenReward.mintToken(msg.sender, value);        \n    }\n}"
}