{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP4 DUP5 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND PUSH1 DUP6 ADD MSTORE SWAP2 AND DUP3 DUP3 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 DUP2 ADD SWAP2 MUL DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP7 DUP8 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP6 AND PUSH1 DUP8 ADD MSTORE DUP6 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 DUP5 ADD MSTORE PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD DUP1 DUP5 MSTORE PUSH1 SWAP1 SWAP3 MSTORE DUP3 SHA3 SLOAD DUP3 SWAP2 DUP3 SWAP2 DUP3 DUP1 DUP1 DUP5 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP4 GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP4 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD SWAP2 DUP4 SWAP1 MSTORE DUP1 DUP4 SHA3 DUP1 SLOAD PUSH1 SWAP2 DUP3 ADD SLOAD DUP5 DUP7 MSTORE SWAP3 SWAP1 SWAP5 SHA3 ADD SLOAD SWAP3 SWAP10 POP PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP9 POP SWAP1 SWAP2 AND SWAP6 POP SWAP2 POP PUSH2 JUMP JUMPDEST POP PUSH1 DUP8 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD SWAP2 DUP4 SWAP1 MSTORE DUP1 DUP4 SHA3 DUP1 SLOAD PUSH1 SWAP2 DUP3 ADD SLOAD DUP5 DUP7 MSTORE SWAP3 SWAP1 SWAP5 SHA3 ADD SLOAD SWAP3 SWAP9 POP PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP8 POP SWAP1 SWAP2 AND SWAP5 POP JUMPDEST POP POP POP POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST CALLER PUSH1 ORIGIN DUP3 EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 DUP2 ADD DUP3 SSTORE PUSH32 ADD DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP1 SLOAD PUSH1 SWAP2 DUP3 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SWAP2 SHA3 SSTORE JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 DUP1 SLOAD SWAP1 SWAP2 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH20 NOT AND SWAP1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND DUP3 MSTORE PUSH1 SWAP1 MSTORE PUSH1 DUP2 SHA3 SSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 CALLER DUP2 ORIGIN DUP3 EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP5 EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 DUP5 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 DUP6 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 DUP5 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 PUSH1 DUP2 ADD DUP1 SLOAD SWAP1 DUP5 SWAP1 SSTORE PUSH1 SWAP1 SWAP2 ADD SLOAD SWAP2 MLOAD SWAP1 SWAP6 POP PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP2 DUP6 ISZERO PUSH2 MUL SWAP2 DUP7 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 DUP1 CALLER DUP2 ORIGIN DUP3 EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST DUP8 ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT ADD SWAP1 SSTORE PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLVALUE EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST SWAP7 POP CALLVALUE ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST CALLVALUE SWAP6 POP PUSH1 DUP9 GT DUP1 ISZERO PUSH2 JUMPI POP DUP7 DUP9 EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP9 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 PUSH1 AND SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP10 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 DUP2 ADD DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE DUP1 SLOAD DUP13 DUP6 MSTORE PUSH1 SWAP4 DUP5 SWAP1 MSTORE DUP3 DUP6 SHA3 SSTORE DUP13 DUP5 MSTORE SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD DUP5 ADD SWAP1 SSTORE DUP2 SHA3 SLOAD SWAP8 DUP3 SWAP1 SUB SWAP8 SWAP2 SWAP7 POP SWAP1 SWAP5 POP DUP5 GT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP2 PUSH2 SWAP1 DIV PUSH1 AND SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP6 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 DUP2 ADD DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE PUSH1 ADD DUP1 SLOAD DUP3 ADD SWAP1 SSTORE SWAP6 DUP7 SWAP1 SUB SWAP6 SWAP3 POP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE SWAP1 SHA3 PUSH1 ADD SLOAD PUSH2 SWAP1 DUP8 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE SWAP1 SHA3 PUSH1 ADD SSTORE JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 CALLER PUSH1 ORIGIN DUP3 EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI JUMPDEST POP POP POP POP POP SWAP3 POP POP POP SWAP1 JUMP JUMPDEST PUSH1 CALLER DUP2 ORIGIN DUP3 EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST POP DUP1 EXTCODESIZE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH4 SWAP3 POP TIMESTAMP DUP4 LT PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SELFDESTRUCT JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 DUP1 DUP3 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD SWAP2 DUP4 SWAP1 MSTORE DUP1 DUP4 SHA3 PUSH1 SWAP1 DUP2 ADD SLOAD SWAP3 DUP5 MSTORE SWAP3 SHA3 SWAP1 SWAP2 ADD SLOAD SWAP2 SWAP6 PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND SWAP6 POP SWAP2 AND SWAP3 POP SWAP1 POP JUMP JUMPDEST CALLER DUP1 EXTCODESIZE SWAP1 PUSH1 DUP1 DUP1 DUP5 GT PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP9 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP9 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP8 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP8 DUP2 AND SWAP1 DUP8 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP8 DUP2 AND SWAP1 DUP7 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 DUP9 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD DUP1 DUP5 MSTORE SWAP2 DUP4 SWAP1 MSTORE SWAP1 SWAP2 SHA3 PUSH1 ADD SLOAD SWAP1 SWAP3 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP7 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 DUP2 GT ISZERO PUSH2 JUMPI DUP1 DUP9 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP9 SWAP1 SSTORE POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 MSTORE SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 DUP4 ADD SLOAD PUSH1 DUP5 ADD SLOAD PUSH1 DUP6 ADD SLOAD PUSH1 SWAP1 SWAP6 ADD SLOAD SWAP4 SWAP5 PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP4 AND SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 DUP7 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP2 SWAP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST POP POP PUSH1 DUP1 SLOAD PUSH1 SWAP1 DUP2 ADD SWAP2 DUP3 SWAP1 SSTORE CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP4 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP7 SWAP1 SSTORE DUP6 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 SHA3 DUP5 DUP2 SSTORE SWAP3 DUP4 ADD DUP1 SLOAD PUSH20 NOT AND SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 DUP3 ADD SSTORE TIMESTAMP PUSH1 SWAP1 SWAP2 ADD SSTORE SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP4 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP4 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 DUP4 DUP6 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP STOP MSTORE8 PUSH6 PUSH16 STOP STOP STOP STOP STOP STOP STOP GASLIMIT PUSH19 STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP STOP LOG1 PUSH6 SHA3 PUSH3 UNKNOWN_0xf7 BALANCE INVALID_0x7b",
  "opcode_entropy": 4.741446286260988,
  "opcode_count": 3263,
  "unique_opcodes": 74,
  "byte_entropy": 5.634930767730277,
  "byte_60": 0.12210822772078053,
  "byte_80": 0.0352041842687588,
  "byte_40": 0.01307583987125327,
  "byte_52": 0.04304968819151076,
  "byte_04": 0.010058338362502514,
  "byte_36": 0.0004023335345001006,
  "byte_10": 0.0018105009052504525,
  "byte_61": 0.0335948501307584,
  "byte_00": 0.08730637698652183,
  "byte_f0": 0.0002011667672500503,
  "byte_57": 0.018306175819754578,
  "byte_63": 0.006035003017501509,
  "byte_ff": 0.014685174009253671,
  "byte_7c": 0.0004023335345001006,
  "byte_01": 0.04888352444176222,
  "byte_35": 0.003419835043250855,
  "byte_16": 0.012472339569503117,
  "byte_11": 0.004828002414001207,
  "byte_6f": 0.0040233353450010055,
  "byte_81": 0.0348018507342587,
  "byte_43": 0.0002011667672500503,
  "byte_14": 0.007644337155501911,
  "byte_f5": 0.0002011667672500503,
  "byte_72": 0.007845503922751962,
  "byte_03": 0.017099175216254276,
  "byte_ef": 0.0004023335345001006,
  "byte_2e": 0.0002011667672500503,
  "byte_1a": 0.0008046670690002012,
  "byte_7d": 0.0004023335345001006,
  "byte_4d": 0.0004023335345001006,
  "byte_5e": 0.0004023335345001006,
  "byte_3e": 0.0008046670690002012,
  "byte_4f": 0.0008046670690002012,
  "byte_b0": 0.0004023335345001006,
  "byte_73": 0.0018105009052504525,
  "byte_76": 0.0006035003017501509,
  "byte_49": 0.0004023335345001006,
  "byte_ea": 0.0008046670690002012,
  "byte_a7": 0.0004023335345001006,
  "byte_b8": 0.0006035003017501509,
  "byte_9d": 0.0006035003017501509,
  "byte_8c": 0.0008046670690002012,
  "byte_85": 0.003419835043250855,
  "byte_a8": 0.0002011667672500503,
  "byte_65": 0.0040233353450010055,
  "byte_ca": 0.0006035003017501509,
  "byte_74": 0.002615167974250654,
  "byte_c0": 0.0004023335345001006,
  "byte_69": 0.002212834439750553,
  "byte_5d": 0.0006035003017501509,
  "byte_99": 0.0006035003017501509,
  "byte_e1": 0.0004023335345001006,
  "byte_78": 0.0002011667672500503,
  "byte_6b": 0.0004023335345001006,
  "byte_84": 0.005431502715751358,
  "byte_4b": 0.0004023335345001006,
  "byte_02": 0.023737678535505933,
  "byte_46": 0.005230335948501308,
  "byte_8f": 0.0002011667672500503,
  "byte_fa": 0.0004023335345001006,
  "byte_5b": 0.025548179440756387,
  "byte_93": 0.0024140012070006035,
  "byte_05": 0.002816334741500704,
  "byte_7b": 0.0004023335345001006,
  "byte_90": 0.04928585797626232,
  "byte_97": 0.0008046670690002012,
  "byte_cb": 0.0002011667672500503,
  "byte_38": 0.0002011667672500503,
  "byte_91": 0.013277006638503319,
  "byte_9f": 0.0002011667672500503,
  "byte_bc": 0.0004023335345001006,
  "byte_c1": 0.0004023335345001006,
  "byte_a4": 0.0002011667672500503,
  "byte_ba": 0.0006035003017501509,
  "byte_f7": 0.0008046670690002012,
  "byte_50": 0.022933011466505733,
  "byte_d6": 0.0002011667672500503,
  "byte_b6": 0.0004023335345001006,
  "byte_df": 0.0002011667672500503,
  "byte_6d": 0.0008046670690002012,
  "byte_b9": 0.0002011667672500503,
  "byte_07": 0.002212834439750553,
  "byte_1d": 0.0002011667672500503,
  "byte_3c": 0.0002011667672500503,
  "byte_0a": 0.01408167370750352,
  "byte_32": 0.0016093341380004024,
  "byte_f1": 0.0004023335345001006,
  "byte_55": 0.005029169181251257,
  "byte_fd": 0.009454838060752363,
  "byte_34": 0.004626835646751157,
  "byte_15": 0.014282840474753571,
  "byte_0d": 0.002615167974250654,
  "byte_9a": 0.0006035003017501509,
  "byte_56": 0.009656004828002414,
  "byte_51": 0.017501508750754374,
  "byte_a0": 0.00724200362100181,
  "byte_92": 0.005230335948501308,
  "byte_83": 0.011265338966002816,
  "byte_20": 0.029973848320257495,
  "byte_82": 0.023737678535505933,
  "byte_f3": 0.0016093341380004024,
  "byte_41": 0.0010058338362502514,
  "byte_5c": 0.0010058338362502514,
  "byte_24": 0.005230335948501308,
  "byte_64": 0.0064373365520016095,
  "byte_6a": 0.0002011667672500503,
  "byte_06": 0.002212834439750553,
  "byte_0c": 0.0018105009052504525,
  "byte_8b": 0.0010058338362502514,
  "byte_08": 0.002212834439750553,
  "byte_3b": 0.001408167370750352,
  "byte_b4": 0.0004023335345001006,
  "byte_0b": 0.0018105009052504525,
  "byte_2c": 0.0004023335345001006,
  "byte_cc": 0.0002011667672500503,
  "byte_ed": 0.0002011667672500503,
  "byte_f6": 0.0004023335345001006,
  "byte_5a": 0.0002011667672500503,
  "byte_67": 0.0002011667672500503,
  "byte_88": 0.002212834439750553,
  "byte_44": 0.005029169181251257,
  "byte_0e": 0.0010058338362502514,
  "byte_45": 0.0024140012070006035,
  "byte_cd": 0.005230335948501308,
  "byte_e2": 0.0002011667672500503,
  "byte_eb": 0.0002011667672500503,
  "byte_13": 0.0024140012070006035,
  "byte_1c": 0.0004023335345001006,
  "byte_4a": 0.0002011667672500503,
  "byte_96": 0.0006035003017501509,
  "byte_87": 0.0024140012070006035,
  "byte_95": 0.0018105009052504525,
  "byte_ac": 0.0006035003017501509,
  "byte_33": 0.0032186682760008047,
  "byte_54": 0.015892174612753975,
  "byte_18": 0.0002011667672500503,
  "byte_86": 0.002816334741500704,
  "byte_94": 0.0012070006035003018,
  "byte_98": 0.0004023335345001006,
  "byte_59": 0.0002011667672500503,
  "byte_e5": 0.005029169181251257,
  "byte_62": 0.005431502715751358,
  "byte_1b": 0.004828002414001207,
  "byte_39": 0.0024140012070006035,
  "byte_9b": 0.0004023335345001006,
  "byte_7f": 0.0032186682760008047,
  "byte_8a": 0.0002011667672500503,
  "byte_fb": 0.0002011667672500503,
  "byte_5f": 0.0002011667672500503,
  "byte_f8": 0.0004023335345001006,
  "byte_ae": 0.0008046670690002012,
  "byte_d7": 0.0002011667672500503,
  "byte_09": 0.002615167974250654,
  "byte_f2": 0.0002011667672500503,
  "byte_8e": 0.0004023335345001006,
  "byte_aa": 0.0006035003017501509,
  "byte_c6": 0.0002011667672500503,
  "byte_fe": 0.001408167370750352,
  "byte_e3": 0.0002011667672500503,
  "byte_d1": 0.0002011667672500503,
  "byte_19": 0.0008046670690002012,
  "byte_17": 0.0004023335345001006,
  "byte_c8": 0.0002011667672500503,
  "byte_9c": 0.0002011667672500503,
  "byte_6e": 0.002615167974250654,
  "byte_de": 0.0002011667672500503,
  "byte_75": 0.0004023335345001006,
  "byte_66": 0.0006035003017501509,
  "byte_6c": 0.0008046670690002012,
  "byte_fc": 0.0002011667672500503,
  "byte_3d": 0.0004023335345001006,
  "byte_d5": 0.0004023335345001006,
  "byte_22": 0.0006035003017501509,
  "byte_79": 0.0008046670690002012,
  "byte_70": 0.0010058338362502514,
  "byte_dd": 0.0006035003017501509,
  "byte_68": 0.0008046670690002012,
  "byte_1e": 0.0002011667672500503,
  "byte_c3": 0.0004023335345001006,
  "byte_12": 0.0030175015087507543,
  "byte_89": 0.0002011667672500503,
  "byte_b5": 0.0004023335345001006,
  "byte_4e": 0.0002011667672500503,
  "byte_30": 0.0004023335345001006,
  "byte_a3": 0.0002011667672500503,
  "byte_42": 0.0004023335345001006,
  "byte_48": 0.0002011667672500503,
  "byte_0f": 0.0010058338362502514,
  "byte_31": 0.0004023335345001006,
  "byte_2a": 0.0002011667672500503,
  "byte_25": 0.0004023335345001006,
  "byte_21": 0.0006035003017501509,
  "byte_c4": 0.0002011667672500503,
  "byte_e8": 0.0002011667672500503,
  "byte_e0": 0.0002011667672500503,
  "byte_53": 0.0002011667672500503,
  "byte_7a": 0.0006035003017501509,
  "byte_a1": 0.0002011667672500503,
  "byte_58": 0.0002011667672500503,
  "byte_bd": 0.0002011667672500503,
  "byte_ee": 0.0002011667672500503,
  "byte_d2": 0.0002011667672500503,
  "byte_8d": 0.0002011667672500503,
  "byte_db": 0.0002011667672500503,
  "byte_c7": 0.0002011667672500503,
  "byte_29": 0.0002011667672500503,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 2,
  "event_nums": 0,
  "creation_block": 6635255,
  "creation_timestamp": 1541241143,
  "life_time": 2224.0,
  "duration_seconds": 30550.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.0008988764044943821,
  "avg_gas_limit": 834159.0,
  "std_gas_limit": 763838.0,
  "avg_gas_used": 834159.0,
  "std_gas_used": 763838.0,
  "avg_gas_price": 3000000000.0,
  "std_gas_price": 0.0,
  "atinversebrah_num": 1,
  "updatecw_num": 1,
  "timeline_sequence": [
    [
      6635255,
      1541241143,
      0,
      46,
      0,
      1597997,
      3000000000,
      0,
      1,
      7055584,
      1597997,
      16485638
    ],
    [
      6637479,
      1541271693,
      5,
      76,
      0,
      70321,
      3000000000,
      0,
      1,
      4942552,
      70321,
      16483414
    ]
  ],
  "sourcecode": "/*\n ______   _________  ___   ___   _______    _______             ________  ______      \n/_____/\\ /________/\\/__/\\ /__/\\ /______/\\  /______/\\           /_______/\\/_____/\\     \n\\::::_\\/_\\__.::.__\\/\\::\\ \\\\  \\ \\\\::::__\\/__\\::::__\\/__         \\__.::._\\/\\:::_ \\ \\    \n \\:\\/___/\\  \\::\\ \\   \\::\\/_\\ .\\ \\\\:\\ /____/\\\\:\\ /____/\\  ___      \\::\\ \\  \\:\\ \\ \\ \\   \n  \\::___\\/_  \\::\\ \\   \\:: ___::\\ \\\\:\\\\_  _\\/ \\:\\\\_  _\\/ /__/\\     _\\::\\ \\__\\:\\ \\ \\ \\  \n   \\:\\____/\\  \\::\\ \\   \\: \\ \\\\::\\ \\\\:\\_\\ \\ \\  \\:\\_\\ \\ \\ \\::\\ \\   /__\\::\\__/\\\\:\\_\\ \\ \\ \n    \\_____\\/   \\__\\/    \\__\\/ \\::\\/ \\_____\\/   \\_____\\/  \\:_\\/   \\________\\/ \\_____\\/ \n  ______ _______ _    _    _____  ____   ____  _____     _____          __  __ ______  _____ \n |  ____|__   __| |  | |  / ____|/ __ \\ / __ \\|  __ \\   / ____|   /\\   |  \\/  |  ____|/ ____|\n | |__     | |  | |__| | | |  __| |  | | |  | | |  | | | |  __   /  \\  | \\  / | |__  | (___  \n |  __|    | |  |  __  | | | |_ | |  | | |  | | |  | | | | |_ | / /\\ \\ | |\\/| |  __|  \\___ \\ \n | |____   | |  | |  | | | |__| | |__| | |__| | |__| | | |__| |/ ____ \\| |  | | |____ ____) |\n |______|  |_|  |_|  |_|  \\_____|\\____/ \\____/|_____/   \\_____/_/    \\_\\_|  |_|______|_____/ \n                                                                                             \n                                                         BY : LmsSky@Gmail.com\n*/                            \n\npragma solidity ^0.4.25;\npragma experimental \"v0.5.0\";\ncontract safeApi{\n    \n   modifier safe(){\n        address _addr = msg.sender;\n        require (_addr == tx.origin,'Error Action!');\n        uint256 _codeLength;\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength == 0, \"Sender not authorized!\");\n            _;\n    }\n\n\n    \n function toBytes(uint256 _num) internal returns (bytes _ret) {\n   assembly {\n        _ret := mload(0x10)\n        mstore(_ret, 0x20)\n        mstore(add(_ret, 0x20), _num)\n    }\n}\n\nfunction subStr(string _s, uint start, uint end) internal pure returns (string){\n        bytes memory s = bytes(_s);\n        string memory copy = new string(end - start);\n//        string memory copy = new string(5);\n          uint k = 0;\n        for (uint i = start; i < end; i++){ \n            bytes(copy)[k++] = bytes(_s)[i];\n        }\n        return copy;\n    }\n     \n\n function safePercent(uint256 a,uint256 b) \n      internal\n      constant\n      returns(uint256)\n      {\n        assert(a>0 && a <=100);\n        return  div(mul(b,a),100);\n      }\n      \n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n \n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\u2202\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n \n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n \n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n}\n\ncontract gameShare is safeApi{\n    struct player\n    {\n        uint256 id;\n        address addr;\n        uint256 balance;//wei\n        uint256 affNumLevel_1;\n        uint256 affNumLevel_2;\n        uint256 timeStamp;\n    }\n \n    mapping (uint256 => player) public player_;\n    mapping (address => uint256) public playAddr_;\n    mapping (uint256 => uint256) public playAff_;\n    \n    mapping (address => uint256) private contractWhite;\n    address [] private contractWhitelist;\n    \n    mapping(address=>uint256) public otherGameAff_;\n    \n    uint256 private autoPlayId_=123456;\n    address public admin_;\n    uint256 public gameTicketWei_=10000000000000000;//0.01 ether\n    uint8 public leve1Rewards_=50;//%\n    uint8 public leve2Rewards_=20;//%\n    uint256 public feeAmount_=200;\n\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    constructor() public {\n        admin_ = msg.sender;\n        getPlayId();\n        contractWhitelist.push(address(0));\n    }\n    \n    /* Send coins */\n    function addGame(uint256 _affCode)\n    safe() \n    isPlay() \n    external\n    payable {\n        \n      if(_affCode == 0 &&  feeAmount_>0){\n             feeAmount_--;\n      }else{\n         require(msg.value == gameTicketWei_,'Please pay the correct eth');\n      }\n       uint256 _pid=getPlayId();\n      if(msg.value==0)\n        return;\n       \n        uint256 adminAmount=msg.value;\n        if(_affCode>0 && _affCode != _pid && player_[_affCode].id >0)\n        {\n             uint256 leve1Amount=safePercent(leve1Rewards_,gameTicketWei_);\n             player_[_affCode].affNumLevel_1++;\n             playAff_[_pid]=player_[_affCode].id;\n             adminAmount-=leve1Amount;\n             player_[_affCode].balance+=leve1Amount;\n             uint256 leve2Pid=playAff_[_affCode];\n              if(leve2Pid>0){\n                uint256 leve2Amount=safePercent(leve2Rewards_,gameTicketWei_);\n                player_[leve2Pid].affNumLevel_2++;\n                adminAmount-=leve2Amount;\n                player_[leve2Pid].balance+=leve2Amount;\n              }\n        }\n        player_[playAddr_[admin_]].balance=add(player_[playAddr_[admin_]].balance,adminAmount);\n    }\n    \n    \n    function withdraw(uint256 pid) safe() external{\n        require(playAddr_[msg.sender] == pid,'Error Action');\n        require(player_[pid].addr == msg.sender,'Error Action');\n        require(player_[pid].balance >= gameTicketWei_,'Insufficient balance');\n        uint256 balance =player_[pid].balance;\n        player_[pid].balance=0;\n        player_[pid].addr.transfer(balance);\n    }\n    \n\n    \n    function getPlayId() private returns(uint256){\n        \n         require(\n                playAddr_[msg.sender] ==0,\n                \"Error Player\"\n            );\n        \n        autoPlayId_++;\n        uint256 _pid=autoPlayId_;\n       \n        playAddr_[msg.sender]=_pid;\n        player_[_pid].id=_pid;\n        player_[_pid].addr=msg.sender;\n        player_[_pid].balance=0;\n        player_[_pid].timeStamp=now;    \n        return _pid;\n   }\n   \n     modifier  isPlay(){\n            require(\n                playAddr_[msg.sender] == 0,\n                \"Everyone can only participate once\"\n                );        \n            _;\n        }\n    \n    function getShareAff(uint256 _affCode) external view returns(uint256,address,address){\n        \n        \n        uint256 pid=playAddr_[msg.sender];\n        uint256 level1pid=playAff_[pid];\n        if(pid>0 && level1pid>0){\n          uint256 level2Pid=playAff_[level1pid];\n          return(\n            player_[level1pid].id,\n            player_[level1pid].addr,\n            player_[level2Pid].addr\n            );\n        }\n        uint256 level2Pid=playAff_[_affCode];\n        return(\n            player_[_affCode].id,\n            player_[_affCode].addr,\n            player_[level2Pid].addr\n            );\n    }\n        \n    function getOtherGameAff() external view returns(uint256,address,address){\n        uint256 pid=otherGameAff_[msg.sender];\n        require(pid>0 && player_[pid].id>0);\n        uint256 level2Pid = playAff_[pid];\n        return(\n            pid,\n            player_[pid].addr,\n            player_[level2Pid].addr\n            );\n    }\n  \n    //Create a user's sharing relationship\n    function addOtherGameAff(uint256 pid,address myAddr,address level1,address level2) public{\n        \n        uint256 _codeLength;\n        address _addr = msg.sender;\n        assembly {_codeLength := extcodesize(_addr)}\n        require(_codeLength > 0, \"Sender not authorized!\");\n        require(contractWhite[_addr]>0,'ERROR');\n        require(address(0)!= myAddr);\n        require(pid >0 && address(0)!= level1 && player_[pid].addr == level1,'Error1');\n        require(myAddr!=level1,'Error4');\n        require(myAddr!=level2,'Error4');\n        uint256  level2Pid=playAff_[pid];\n        require(level2==player_[level2Pid].addr,'Error2');\n        uint256 addfPid=otherGameAff_[myAddr];        \n        if(addfPid>0){\n            require(addfPid ==pid);\n            return;\n        }\n        otherGameAff_[myAddr]=pid;\n    }\n    \n    //update Can get a contract to share information\n    function updateCW(address addr,uint8 status) external safe(){\n        require(msg.sender==admin_);\n        if(status==0){\n            if(contractWhite[addr]==0){\n                contractWhitelist.push(addr);\n                contractWhite[addr]=contractWhitelist.length;\n            }\n        }else{\n           delete contractWhitelist[contractWhite[addr]];\n           delete  contractWhite[addr];\n        }\n    }\n    \n      //2020.01.01 Close Game\n   function closeGame() external safe() {\n        uint256 closeTime=1577808000;\n        require(now > closeTime,'Time has not arrived');\n        require(msg.sender == admin_,'Error');\n        selfdestruct(admin_);\n    }\n    \n    function getCwList() external  safe()  view returns( address []){\n         require(msg.sender==admin_);\n         return contractWhitelist;\n    }\n        \n}"
}