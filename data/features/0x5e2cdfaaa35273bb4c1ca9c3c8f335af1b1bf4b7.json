{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP7 SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SSTORE PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH32 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 CALLER PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 CALLER PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 CALLER PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP4 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP4 MLOAD DUP6 DUP2 MSTORE SWAP4 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH2 PUSH1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND SWAP1 PUSH32 SWAP1 PUSH1 SWAP1 LOG2 POP JUMP JUMPDEST PUSH2 PUSH1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND SWAP1 PUSH32 SWAP1 PUSH1 SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0x49 LOG4 UNKNOWN_0xd1 PUSH12 SLT SWAP15 UNKNOWN_0x4c LOG2 UNKNOWN_0xd3 DUP4 BASEFEE UNKNOWN_0xea UNKNOWN_0xc UNKNOWN_0xcc UNKNOWN_0xbe INVALID_0x71",
  "opcode_entropy": 4.675361875207073,
  "opcode_count": 1420,
  "unique_opcodes": 65,
  "byte_entropy": 5.89086824726452,
  "byte_60": 0.11661413777577667,
  "byte_80": 0.034218820351193155,
  "byte_40": 0.010805943268797838,
  "byte_52": 0.028365601080594327,
  "byte_04": 0.01170643854119766,
  "byte_36": 0.0009004952723998199,
  "byte_10": 0.0031517334533993696,
  "byte_61": 0.046375506528590724,
  "byte_00": 0.045475011256190905,
  "byte_b9": 0.0013507429085997298,
  "byte_57": 0.01891040072039622,
  "byte_63": 0.01125619090499775,
  "byte_ff": 0.021161638901395767,
  "byte_7c": 0.00045024763619990995,
  "byte_01": 0.03556956325979289,
  "byte_35": 0.00945520036019811,
  "byte_16": 0.0270148581719946,
  "byte_09": 0.00045024763619990995,
  "byte_5e": 0.00045024763619990995,
  "byte_a7": 0.0013507429085997298,
  "byte_b3": 0.0013507429085997298,
  "byte_81": 0.02656461053579469,
  "byte_14": 0.006303466906798739,
  "byte_be": 0.0013507429085997298,
  "byte_18": 0.0009004952723998199,
  "byte_0d": 0.00045024763619990995,
  "byte_dd": 0.0031517334533993696,
  "byte_f6": 0.0013507429085997298,
  "byte_23": 0.0018009905447996398,
  "byte_b8": 0.0009004952723998199,
  "byte_72": 0.0022512381809995496,
  "byte_1d": 0.00045024763619990995,
  "byte_39": 0.00045024763619990995,
  "byte_50": 0.01936064835659613,
  "byte_93": 0.00495272399819901,
  "byte_51": 0.007203962179198559,
  "byte_47": 0.00045024763619990995,
  "byte_c1": 0.0009004952723998199,
  "byte_0f": 0.00045024763619990995,
  "byte_19": 0.0013507429085997298,
  "byte_6b": 0.0027014858171994596,
  "byte_70": 0.00045024763619990995,
  "byte_a0": 0.018009905447996397,
  "byte_82": 0.012156686177397569,
  "byte_31": 0.0009004952723998199,
  "byte_8f": 0.0022512381809995496,
  "byte_98": 0.0009004952723998199,
  "byte_3b": 0.00045024763619990995,
  "byte_2d": 0.0009004952723998199,
  "byte_56": 0.02341287708239532,
  "byte_b0": 0.0031517334533993696,
  "byte_65": 0.0009004952723998199,
  "byte_02": 0.024763619990995047,
  "byte_75": 0.0009004952723998199,
  "byte_d3": 0.0009004952723998199,
  "byte_a4": 0.0009004952723998199,
  "byte_c2": 0.0013507429085997298,
  "byte_d7": 0.0009004952723998199,
  "byte_e8": 0.00045024763619990995,
  "byte_a9": 0.0009004952723998199,
  "byte_05": 0.007203962179198559,
  "byte_9c": 0.00045024763619990995,
  "byte_bb": 0.00045024763619990995,
  "byte_0c": 0.0009004952723998199,
  "byte_aa": 0.0022512381809995496,
  "byte_27": 0.00045024763619990995,
  "byte_1e": 0.0022512381809995496,
  "byte_1a": 0.00045024763619990995,
  "byte_30": 0.0009004952723998199,
  "byte_62": 0.0009004952723998199,
  "byte_ed": 0.00045024763619990995,
  "byte_3e": 0.00045024763619990995,
  "byte_5b": 0.03962179198559208,
  "byte_fd": 0.013057181449797388,
  "byte_34": 0.005402971634398919,
  "byte_15": 0.01846015308419631,
  "byte_ca": 0.0009004952723998199,
  "byte_e2": 0.00405222872579919,
  "byte_0a": 0.018009905447996397,
  "byte_03": 0.02656461053579469,
  "byte_24": 0.0031517334533993696,
  "byte_78": 0.0009004952723998199,
  "byte_91": 0.0135074290859973,
  "byte_90": 0.046375506528590724,
  "byte_20": 0.02296262944619541,
  "byte_f3": 0.0022512381809995496,
  "byte_0b": 0.0018009905447996398,
  "byte_29": 0.0022512381809995496,
  "byte_44": 0.0013507429085997298,
  "byte_fc": 0.0018009905447996398,
  "byte_53": 0.00045024763619990995,
  "byte_99": 0.00045024763619990995,
  "byte_77": 0.00045024763619990995,
  "byte_49": 0.0009004952723998199,
  "byte_9b": 0.0013507429085997298,
  "byte_bc": 0.00045024763619990995,
  "byte_d1": 0.0022512381809995496,
  "byte_8d": 0.0013507429085997298,
  "byte_df": 0.0009004952723998199,
  "byte_ad": 0.0022512381809995496,
  "byte_f4": 0.00045024763619990995,
  "byte_3c": 0.00045024763619990995,
  "byte_5d": 0.0022512381809995496,
  "byte_83": 0.0135074290859973,
  "byte_33": 0.00495272399819901,
  "byte_88": 0.00045024763619990995,
  "byte_85": 0.0036019810895992796,
  "byte_92": 0.008554705087798289,
  "byte_86": 0.0009004952723998199,
  "byte_55": 0.00405222872579919,
  "byte_7f": 0.0027014858171994596,
  "byte_8c": 0.0009004952723998199,
  "byte_e1": 0.0018009905447996398,
  "byte_e5": 0.0009004952723998199,
  "byte_eb": 0.0009004952723998199,
  "byte_ec": 0.0009004952723998199,
  "byte_7d": 0.0022512381809995496,
  "byte_4f": 0.0013507429085997298,
  "byte_71": 0.0018009905447996398,
  "byte_42": 0.0009004952723998199,
  "byte_84": 0.00675371454299865,
  "byte_c0": 0.0009004952723998199,
  "byte_f7": 0.0018009905447996398,
  "byte_b2": 0.0009004952723998199,
  "byte_c8": 0.0018009905447996398,
  "byte_c7": 0.0018009905447996398,
  "byte_c3": 0.0013507429085997298,
  "byte_25": 0.0013507429085997298,
  "byte_a3": 0.0022512381809995496,
  "byte_54": 0.009004952723998198,
  "byte_11": 0.0013507429085997298,
  "byte_2c": 0.0009004952723998199,
  "byte_87": 0.0013507429085997298,
  "byte_e4": 0.0009004952723998199,
  "byte_06": 0.00495272399819901,
  "byte_89": 0.00045024763619990995,
  "byte_94": 0.0027014858171994596,
  "byte_5f": 0.0009004952723998199,
  "byte_69": 0.0018009905447996398,
  "byte_76": 0.00045024763619990995,
  "byte_96": 0.00045024763619990995,
  "byte_a1": 0.0022512381809995496,
  "byte_07": 0.004502476361999099,
  "byte_b6": 0.0013507429085997298,
  "byte_68": 0.0013507429085997298,
  "byte_cf": 0.00045024763619990995,
  "byte_64": 0.00045024763619990995,
  "byte_a5": 0.00045024763619990995,
  "byte_ce": 0.00045024763619990995,
  "byte_f2": 0.0009004952723998199,
  "byte_1b": 0.0009004952723998199,
  "byte_37": 0.0009004952723998199,
  "byte_95": 0.0013507429085997298,
  "byte_2b": 0.0009004952723998199,
  "byte_f1": 0.0009004952723998199,
  "byte_c4": 0.0009004952723998199,
  "byte_28": 0.0009004952723998199,
  "byte_f5": 0.0018009905447996398,
  "byte_5a": 0.0009004952723998199,
  "byte_4d": 0.0009004952723998199,
  "byte_ef": 0.0013507429085997298,
  "byte_6f": 0.00045024763619990995,
  "byte_8b": 0.0009004952723998199,
  "byte_9e": 0.0013507429085997298,
  "byte_e7": 0.00045024763619990995,
  "byte_6a": 0.00045024763619990995,
  "byte_7e": 0.00045024763619990995,
  "byte_1f": 0.00045024763619990995,
  "byte_bf": 0.0009004952723998199,
  "byte_cd": 0.00045024763619990995,
  "byte_d4": 0.00045024763619990995,
  "byte_8a": 0.00045024763619990995,
  "byte_d5": 0.00045024763619990995,
  "byte_b4": 0.00045024763619990995,
  "byte_4e": 0.00045024763619990995,
  "byte_a2": 0.0018009905447996398,
  "byte_79": 0.0009004952723998199,
  "byte_08": 0.0027014858171994596,
  "byte_e9": 0.0009004952723998199,
  "byte_b7": 0.00045024763619990995,
  "byte_d9": 0.00045024763619990995,
  "byte_c6": 0.00045024763619990995,
  "byte_58": 0.0009004952723998199,
  "byte_3d": 0.00045024763619990995,
  "byte_48": 0.0013507429085997298,
  "byte_4c": 0.0009004952723998199,
  "byte_66": 0.00045024763619990995,
  "byte_17": 0.00045024763619990995,
  "byte_4a": 0.00045024763619990995,
  "byte_7a": 0.0009004952723998199,
  "byte_67": 0.00045024763619990995,
  "byte_12": 0.00045024763619990995,
  "byte_ea": 0.00045024763619990995,
  "byte_cc": 0.00045024763619990995,
  "byte_59": 0.00045024763619990995,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 3,
  "event_nums": 2,
  "creation_block": 6904113,
  "creation_timestamp": 1545063698,
  "life_time": 3996.0,
  "duration_seconds": 59027.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.0007505629221916438,
  "avg_gas_limit": 2793490.3333333335,
  "std_gas_limit": 3406981.936319234,
  "avg_gas_used": 256888.66666666666,
  "std_gas_used": 299972.2708177467,
  "avg_gas_price": 23333333333.333332,
  "std_gas_price": 4714045207.910316,
  "minteradded_num": 1,
  "transfer_num": 1,
  "atinversebrah_num": 1,
  "mint_num": 1,
  "addminter_num": 1,
  "timeline_sequence": [
    [
      6904113,
      1545063698,
      14,
      78,
      0,
      680382,
      30000000000,
      0,
      1,
      2989819,
      680382,
      16216781
    ],
    [
      6904150,
      1545064153,
      15,
      88,
      0,
      100062,
      20000000000,
      0,
      1,
      2897843,
      66708,
      16216744
    ],
    [
      6908109,
      1545122725,
      0,
      1,
      0,
      7600027,
      20000000000,
      1,
      0,
      44576,
      23576,
      16212785
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.24;\n\n// File: contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n  function totalSupply() external view returns (uint256);\n\n  function balanceOf(address who) external view returns (uint256);\n\n  function allowance(address owner, address spender)\n    external view returns (uint256);\n\n  function transfer(address to, uint256 value) external returns (bool);\n\n  function approve(address spender, uint256 value)\n    external returns (bool);\n\n  function transferFrom(address from, address to, uint256 value)\n    external returns (bool);\n\n  event Transfer(\n    address indexed from,\n    address indexed to,\n    uint256 value\n  );\n\n  event Approval(\n    address indexed owner,\n    address indexed spender,\n    uint256 value\n  );\n}\n\n// File: contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, reverts on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n    // benefit is lost if 'b' is also tested.\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n    if (a == 0) {\n      return 0;\n    }\n\n    uint256 c = a * b;\n    require(c / a == b);\n\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b > 0); // Solidity only automatically asserts when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n    return c;\n  }\n\n  /**\n  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b <= a);\n    uint256 c = a - b;\n\n    return c;\n  }\n\n  /**\n  * @dev Adds two numbers, reverts on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    require(c >= a);\n\n    return c;\n  }\n\n  /**\n  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\n  * reverts when dividing by zero.\n  */\n  function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n    require(b != 0);\n    return a % b;\n  }\n}\n\n// File: contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract ERC20 is IERC20 {\n  using SafeMath for uint256;\n\n  mapping (address => uint256) private _balances;\n\n  mapping (address => mapping (address => uint256)) private _allowed;\n\n  uint256 private _totalSupply;\n\n  /**\n  * @dev Total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return _totalSupply;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param owner The address to query the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address owner) public view returns (uint256) {\n    return _balances[owner];\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param owner address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(\n    address owner,\n    address spender\n   )\n    public\n    view\n    returns (uint256)\n  {\n    return _allowed[owner][spender];\n  }\n\n  /**\n  * @dev Transfer token for a specified address\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function transfer(address to, uint256 value) public returns (bool) {\n    _transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint256 value) public returns (bool) {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(\n    address from,\n    address to,\n    uint256 value\n  )\n    public\n    returns (bool)\n  {\n    require(value <= _allowed[from][msg.sender]);\n\n    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n    _transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseAllowance(\n    address spender,\n    uint256 addedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].add(addedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   * approve should be called when allowed_[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param spender The address which will spend the funds.\n   * @param subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseAllowance(\n    address spender,\n    uint256 subtractedValue\n  )\n    public\n    returns (bool)\n  {\n    require(spender != address(0));\n\n    _allowed[msg.sender][spender] = (\n      _allowed[msg.sender][spender].sub(subtractedValue));\n    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n    return true;\n  }\n\n  /**\n  * @dev Transfer token for a specified addresses\n  * @param from The address to transfer from.\n  * @param to The address to transfer to.\n  * @param value The amount to be transferred.\n  */\n  function _transfer(address from, address to, uint256 value) internal {\n    require(value <= _balances[from]);\n    require(to != address(0));\n\n    _balances[from] = _balances[from].sub(value);\n    _balances[to] = _balances[to].add(value);\n    emit Transfer(from, to, value);\n  }\n\n  /**\n   * @dev Internal function that mints an amount of the token and assigns it to\n   * an account. This encapsulates the modification of balances such that the\n   * proper events are emitted.\n   * @param account The account that will receive the created tokens.\n   * @param value The amount that will be created.\n   */\n  function _mint(address account, uint256 value) internal {\n    require(account != 0);\n    _totalSupply = _totalSupply.add(value);\n    _balances[account] = _balances[account].add(value);\n    emit Transfer(address(0), account, value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burn(address account, uint256 value) internal {\n    require(account != 0);\n    require(value <= _balances[account]);\n\n    _totalSupply = _totalSupply.sub(value);\n    _balances[account] = _balances[account].sub(value);\n    emit Transfer(account, address(0), value);\n  }\n\n  /**\n   * @dev Internal function that burns an amount of the token of a given\n   * account, deducting from the sender's allowance for said account. Uses the\n   * internal burn function.\n   * @param account The account whose tokens will be burnt.\n   * @param value The amount that will be burnt.\n   */\n  function _burnFrom(address account, uint256 value) internal {\n    require(value <= _allowed[account][msg.sender]);\n\n    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,\n    // this function needs to emit an event with the updated approval.\n    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(\n      value);\n    _burn(account, value);\n  }\n}\n\n// File: contracts/access/Roles.sol\n\n/**\n * @title Roles\n * @dev Library for managing addresses assigned to a Role.\n */\nlibrary Roles {\n  struct Role {\n    mapping (address => bool) bearer;\n  }\n\n  /**\n   * @dev give an account access to this role\n   */\n  function add(Role storage role, address account) internal {\n    require(account != address(0));\n    require(!has(role, account));\n\n    role.bearer[account] = true;\n  }\n\n  /**\n   * @dev remove an account's access to this role\n   */\n  function remove(Role storage role, address account) internal {\n    require(account != address(0));\n    require(has(role, account));\n\n    role.bearer[account] = false;\n  }\n\n  /**\n   * @dev check if an account has this role\n   * @return bool\n   */\n  function has(Role storage role, address account)\n    internal\n    view\n    returns (bool)\n  {\n    require(account != address(0));\n    return role.bearer[account];\n  }\n}\n\n// File: contracts/access/roles/MinterRole.sol\n\ncontract MinterRole {\n  using Roles for Roles.Role;\n\n  event MinterAdded(address indexed account);\n  event MinterRemoved(address indexed account);\n\n  Roles.Role private minters;\n\n  constructor() internal {\n    _addMinter(msg.sender);\n  }\n\n  modifier onlyMinter() {\n    require(isMinter(msg.sender));\n    _;\n  }\n\n  function isMinter(address account) public view returns (bool) {\n    return minters.has(account);\n  }\n\n  function addMinter(address account) public onlyMinter {\n    _addMinter(account);\n  }\n\n  function renounceMinter() public {\n    _removeMinter(msg.sender);\n  }\n\n  function _addMinter(address account) internal {\n    minters.add(account);\n    emit MinterAdded(account);\n  }\n\n  function _removeMinter(address account) internal {\n    minters.remove(account);\n    emit MinterRemoved(account);\n  }\n}\n\n// File: contracts/token/ERC20/ERC20Mintable.sol\n\n/**\n * @title ERC20Mintable\n * @dev ERC20 minting logic\n */\ncontract ERC20Mintable is ERC20, MinterRole {\n  /**\n   * @dev Function to mint tokens\n   * @param to The address that will receive the minted tokens.\n   * @param value The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(\n    address to,\n    uint256 value\n  )\n    public\n    onlyMinter\n    returns (bool)\n  {\n    _mint(to, value);\n    return true;\n  }\n}"
}