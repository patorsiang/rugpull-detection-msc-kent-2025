{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP1 MLOAD PUSH3 SWAP3 SWAP2 PUSH1 ADD SWAP1 PUSH3 JUMP JUMPDEST POP PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP1 MLOAD PUSH3 SWAP3 SWAP2 PUSH1 ADD SWAP1 PUSH3 JUMP JUMPDEST POP PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP1 MLOAD PUSH3 SWAP3 SWAP2 PUSH1 ADD SWAP1 PUSH3 JUMP JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND OR PUSH1 PUSH1 EXP PUSH1 MUL NOT AND PUSH21 OR SWAP1 SSTORE PUSH3 PUSH1 SSTORE PUSH7 PUSH1 DUP2 SWAP1 SSTORE PUSH1 SWAP1 DUP2 SSTORE PUSH7 PUSH1 SSTORE PUSH1 SSTORE PUSH8 PUSH1 SSTORE PUSH7 PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH2 NOT AND SWAP1 SSTORE CALLVALUE ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 DUP2 OR DUP3 SSTORE PUSH1 SLOAD SWAP1 DUP3 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SWAP2 SHA3 SSTORE PUSH3 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH3 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH3 JUMP JUMPDEST POP PUSH3 SWAP3 SWAP2 POP PUSH3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 DUP1 PUSH3 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST POP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD PUSH1 EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLVALUE LT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLVALUE DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP2 SWAP1 DIV SWAP2 POP DUP2 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE ADDRESS SWAP1 SWAP2 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE CALLER SWAP1 SWAP2 AND SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP6 SWAP1 SSTORE SWAP1 SWAP3 SWAP2 SWAP1 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD PUSH1 EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD DUP3 LT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 SLOAD PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 SLOAD PUSH2 ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND BALANCE DUP4 PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE CALLER SWAP1 SWAP2 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 ADDRESS SWAP1 SWAP2 AND SWAP1 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 LT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD DUP3 SWAP1 LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 DUP2 ADD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP9 SWAP1 SUB SWAP1 SSTORE DUP8 DUP6 AND DUP1 DUP5 MSTORE DUP2 DUP5 SHA3 DUP1 SLOAD DUP10 ADD SWAP1 SSTORE DUP5 DUP5 MSTORE PUSH1 DUP4 MSTORE DUP2 DUP5 SHA3 CALLER SWAP1 SWAP7 AND DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH8 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE ADDRESS SWAP1 SWAP2 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE CALLER SWAP1 SWAP2 AND SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH2 NOT AND PUSH2 OR SWAP1 SSTORE PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 SLOAD DUP3 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 SWAP1 LT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 DUP2 ADD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SLOAD SWAP1 BALANCE LT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 SLOAD DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND BALANCE LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 CALLER SWAP1 SWAP2 AND SWAP1 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 SLOAD CALLER SWAP1 SWAP2 AND SWAP1 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 PUSH2 SWAP1 DUP7 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND BALANCE LT ISZERO PUSH2 JUMPI CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 PUSH1 SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND BALANCE LT ISZERO PUSH2 JUMPI DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 PUSH1 SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP DUP3 DUP2 LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI UNKNOWN_0xfe STOP UNKNOWN_0xdd CALLCODE MSTORE UNKNOWN_0xad SHL UNKNOWN_0xe2 UNKNOWN_0xc8 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef LOG1 PUSH6 SHA3 CODECOPY UNKNOWN_0xd6 UNKNOWN_0xdf CALLDATALOAD ISZERO UNKNOWN_0xae SWAP6 UNKNOWN_0xaf INVALID_0x7a",
  "opcode_entropy": 4.7505327712216445,
  "opcode_count": 3611,
  "unique_opcodes": 83,
  "byte_entropy": 5.71912066752014,
  "byte_0x": 0.00018615040953090097,
  "byte_60": 0.12639612807148176,
  "byte_40": 0.014333581533879374,
  "byte_52": 0.02345495160089352,
  "byte_80": 0.03778853313477289,
  "byte_51": 0.012844378257632167,
  "byte_90": 0.046537602382725245,
  "byte_81": 0.03145941921072226,
  "byte_01": 0.039463886820551006,
  "byte_03": 0.02643335815338794,
  "byte_7f": 0.0013030528667163069,
  "byte_43": 0.0009307520476545049,
  "byte_4c": 0.0009307520476545049,
  "byte_49": 0.00037230081906180194,
  "byte_00": 0.06161578555472822,
  "byte_20": 0.02475800446760983,
  "byte_82": 0.010982874162323157,
  "byte_04": 0.010982874162323157,
  "byte_62": 0.004281459419210722,
  "byte_4d": 0.00037230081906180194,
  "byte_92": 0.0037230081906180195,
  "byte_91": 0.017870439314966492,
  "byte_a7": 0.0013030528667163069,
  "byte_56": 0.019918093819806405,
  "byte_5b": 0.036299329858525686,
  "byte_50": 0.013588979895755771,
  "byte_0b": 0.004653760238272524,
  "byte_6c": 0.0005584512285927029,
  "byte_69": 0.0007446016381236039,
  "byte_6d": 0.00037230081906180194,
  "byte_61": 0.049329858525688754,
  "byte_74": 0.0013030528667163069,
  "byte_65": 0.0007446016381236039,
  "byte_6f": 0.0005584512285927029,
  "byte_6e": 0.00037230081906180194,
  "byte_05": 0.004653760238272524,
  "byte_97": 0.0005584512285927029,
  "byte_02": 0.03071481757259866,
  "byte_d0": 0.00037230081906180194,
  "byte_9a": 0.00037230081906180194,
  "byte_06": 0.0016753536857781086,
  "byte_e1": 0.0005584512285927029,
  "byte_07": 0.004653760238272524,
  "byte_54": 0.018428890543559198,
  "byte_a0": 0.013775130305286671,
  "byte_0a": 0.01712583767684289,
  "byte_19": 0.0022338049143708115,
  "byte_16": 0.02531645569620253,
  "byte_30": 0.0029784065524944155,
  "byte_17": 0.0016753536857781086,
  "byte_ff": 0.007259865971705138,
  "byte_55": 0.00763216679076694,
  "byte_98": 0.0005584512285927029,
  "byte_96": 0.0007446016381236039,
  "byte_08": 0.0033507073715562173,
  "byte_66": 0.0005584512285927029,
  "byte_8d": 0.0005584512285927029,
  "byte_7e": 0.00037230081906180194,
  "byte_a4": 0.00037230081906180194,
  "byte_c6": 0.0005584512285927029,
  "byte_09": 0.0022338049143708115,
  "byte_11": 0.00390915860014892,
  "byte_c3": 0.0009307520476545049,
  "byte_79": 0.00037230081906180194,
  "byte_37": 0.0005584512285927029,
  "byte_e0": 0.00037230081906180194,
  "byte_0c": 0.0024199553239017124,
  "byte_67": 0.0007446016381236039,
  "byte_8a": 0.00018615040953090097,
  "byte_f0": 0.0005584512285927029,
  "byte_bb": 0.0007446016381236039,
  "byte_14": 0.009865971705137751,
  "byte_0d": 0.0027922561429635146,
  "byte_23": 0.0005584512285927029,
  "byte_86": 0.0007446016381236039,
  "byte_f2": 0.0005584512285927029,
  "byte_c1": 0.0009307520476545049,
  "byte_0e": 0.003536857781087118,
  "byte_0f": 0.0033507073715562173,
  "byte_34": 0.0068875651526433355,
  "byte_15": 0.0191734921816828,
  "byte_73": 0.0007446016381236039,
  "byte_57": 0.024013402829486226,
  "byte_fd": 0.01172747580044676,
  "byte_33": 0.007446016381236039,
  "byte_1f": 0.0024199553239017124,
  "byte_10": 0.005584512285927029,
  "byte_ea": 0.0005584512285927029,
  "byte_83": 0.00967982129560685,
  "byte_85": 0.0037230081906180195,
  "byte_1a": 0.0007446016381236039,
  "byte_28": 0.0011169024571854058,
  "byte_2c": 0.0018615040953090098,
  "byte_12": 0.005398361876396128,
  "byte_9f": 0.0005584512285927029,
  "byte_5c": 0.00018615040953090097,
  "byte_39": 0.0024199553239017124,
  "byte_f3": 0.0013030528667163069,
  "byte_36": 0.00018615040953090097,
  "byte_63": 0.0068875651526433355,
  "byte_7c": 0.0007446016381236039,
  "byte_35": 0.004653760238272524,
  "byte_29": 0.0005584512285927029,
  "byte_a1": 0.0009307520476545049,
  "byte_d3": 0.00037230081906180194,
  "byte_d2": 0.00037230081906180194,
  "byte_f8": 0.00037230081906180194,
  "byte_de": 0.0007446016381236039,
  "byte_5e": 0.00018615040953090097,
  "byte_b3": 0.0005584512285927029,
  "byte_a9": 0.0009307520476545049,
  "byte_e7": 0.00037230081906180194,
  "byte_cb": 0.0009307520476545049,
  "byte_18": 0.0005584512285927029,
  "byte_dd": 0.0009307520476545049,
  "byte_1c": 0.0005584512285927029,
  "byte_75": 0.00018615040953090097,
  "byte_f4": 0.00037230081906180194,
  "byte_b8": 0.00037230081906180194,
  "byte_72": 0.0005584512285927029,
  "byte_24": 0.0020476545048399106,
  "byte_2b": 0.0005584512285927029,
  "byte_f6": 0.00037230081906180194,
  "byte_32": 0.0013030528667163069,
  "byte_2d": 0.00037230081906180194,
  "byte_2e": 0.00018615040953090097,
  "byte_45": 0.00018615040953090097,
  "byte_31": 0.0013030528667163069,
  "byte_3c": 0.0005584512285927029,
  "byte_e5": 0.0007446016381236039,
  "byte_58": 0.00037230081906180194,
  "byte_41": 0.0005584512285927029,
  "byte_71": 0.00037230081906180194,
  "byte_3a": 0.0009307520476545049,
  "byte_a3": 0.0018615040953090098,
  "byte_47": 0.00037230081906180194,
  "byte_f1": 0.0014892032762472078,
  "byte_d8": 0.0005584512285927029,
  "byte_d7": 0.00018615040953090097,
  "byte_b6": 0.0005584512285927029,
  "byte_4b": 0.00037230081906180194,
  "byte_6a": 0.00037230081906180194,
  "byte_c9": 0.0005584512285927029,
  "byte_ca": 0.0005584512285927029,
  "byte_e2": 0.0005584512285927029,
  "byte_5f": 0.00037230081906180194,
  "byte_70": 0.0005584512285927029,
  "byte_7d": 0.0011169024571854058,
  "byte_64": 0.00037230081906180194,
  "byte_bc": 0.0007446016381236039,
  "byte_b4": 0.0005584512285927029,
  "byte_89": 0.0005584512285927029,
  "byte_22": 0.00018615040953090097,
  "byte_42": 0.00037230081906180194,
  "byte_27": 0.00018615040953090097,
  "byte_a5": 0.0007446016381236039,
  "byte_95": 0.0007446016381236039,
  "byte_9b": 0.0013030528667163069,
  "byte_da": 0.00018615040953090097,
  "byte_48": 0.00018615040953090097,
  "byte_ab": 0.00037230081906180194,
  "byte_fb": 0.00037230081906180194,
  "byte_be": 0.00018615040953090097,
  "byte_9c": 0.00018615040953090097,
  "byte_d4": 0.0005584512285927029,
  "byte_1d": 0.00018615040953090097,
  "byte_ad": 0.00037230081906180194,
  "byte_ed": 0.00037230081906180194,
  "byte_3e": 0.00037230081906180194,
  "byte_df": 0.0005584512285927029,
  "byte_84": 0.0029784065524944155,
  "byte_af": 0.0007446016381236039,
  "byte_b7": 0.00037230081906180194,
  "byte_ee": 0.00018615040953090097,
  "byte_e3": 0.00037230081906180194,
  "byte_8b": 0.00018615040953090097,
  "byte_d1": 0.0020476545048399106,
  "byte_c7": 0.0011169024571854058,
  "byte_cf": 0.00018615040953090097,
  "byte_e6": 0.0020476545048399106,
  "byte_88": 0.0018615040953090098,
  "byte_2a": 0.00037230081906180194,
  "byte_d6": 0.00037230081906180194,
  "byte_ec": 0.00037230081906180194,
  "byte_44": 0.0007446016381236039,
  "byte_3d": 0.00018615040953090097,
  "byte_6b": 0.00018615040953090097,
  "byte_7a": 0.0007446016381236039,
  "byte_8c": 0.00037230081906180194,
  "byte_ae": 0.0007446016381236039,
  "byte_59": 0.00037230081906180194,
  "byte_68": 0.0005584512285927029,
  "byte_8e": 0.00018615040953090097,
  "byte_2f": 0.00018615040953090097,
  "byte_4e": 0.00018615040953090097,
  "byte_ac": 0.00018615040953090097,
  "byte_26": 0.00018615040953090097,
  "byte_9e": 0.00018615040953090097,
  "byte_fe": 0.0014892032762472078,
  "byte_93": 0.004281459419210722,
  "byte_94": 0.0011169024571854058,
  "byte_87": 0.00037230081906180194,
  "byte_eb": 0.00018615040953090097,
  "byte_4f": 0.00018615040953090097,
  "byte_1e": 0.0005584512285927029,
  "byte_c0": 0.00018615040953090097,
  "byte_f7": 0.00018615040953090097,
  "byte_b2": 0.00018615040953090097,
  "byte_c8": 0.00037230081906180194,
  "byte_b9": 0.00018615040953090097,
  "byte_25": 0.00018615040953090097,
  "byte_db": 0.00018615040953090097,
  "byte_3b": 0.00018615040953090097,
  "byte_fc": 0.0009307520476545049,
  "byte_8f": 0.00037230081906180194,
  "byte_bf": 0.00037230081906180194,
  "byte_5a": 0.00037230081906180194,
  "byte_cc": 0.00037230081906180194,
  "byte_a2": 0.00037230081906180194,
  "byte_13": 0.00018615040953090097,
  "byte_21": 0.00018615040953090097,
  "byte_a8": 0.00018615040953090097,
  "byte_b1": 0.00018615040953090097,
  "byte_9d": 0.00018615040953090097,
  "byte_fa": 0.00018615040953090097,
  "byte_5d": 0.00018615040953090097,
  "byte_1b": 0.00018615040953090097,
  "byte_c2": 0.00018615040953090097,
  "byte_b0": 0.00018615040953090097,
  "byte_aa": 0.00018615040953090097,
  "byte_c4": 0.00018615040953090097,
  "byte_f5": 0.00037230081906180194,
  "byte_ef": 0.00018615040953090097,
  "byte_c5": 0.00018615040953090097,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 7,
  "event_nums": 2,
  "creation_block": 5107158,
  "creation_timestamp": 1518877916,
  "life_time": 1442.0,
  "duration_seconds": 20954.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.004851004851004851,
  "avg_gas_limit": 375068.0,
  "std_gas_limit": 548917.6217404054,
  "avg_gas_used": 291629.14285714284,
  "std_gas_used": 542412.943593829,
  "avg_gas_price": 7857142857.142858,
  "std_gas_price": 7735420783.24622,
  "mint_num": 2,
  "transfer_num": 4,
  "timeline_sequence": [
    [
      5107158,
      1518877916,
      0,
      34,
      0,
      1719552,
      2000000000,
      0,
      1,
      2839071,
      1619552,
      17984922
    ],
    [
      5107205,
      1518878621,
      1,
      68,
      0,
      136386,
      2000000000,
      0,
      1,
      3400356,
      36386,
      17984875
    ],
    [
      5107229,
      1518878987,
      2,
      146,
      0,
      154506,
      3000000000,
      1,
      0,
      5901075,
      83488,
      17984851
    ],
    [
      5107539,
      1518884066,
      3,
      47,
      0,
      154506,
      3000000000,
      1,
      0,
      2096636,
      83488,
      17984541
    ],
    [
      5107558,
      1518884292,
      4,
      88,
      0,
      154570,
      20000000000,
      1,
      0,
      5275783,
      83552,
      17984522
    ],
    [
      5107581,
      1518884661,
      5,
      97,
      0,
      154570,
      20000000000,
      1,
      0,
      3810550,
      83552,
      17984499
    ],
    [
      5108600,
      1518898870,
      6,
      68,
      0,
      151386,
      5000000000,
      0,
      1,
      2439791,
      51386,
      17983480
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.8;\n\n/**\n * Climatecoin extended ERC20 token contract created on February the 17th, 2018 by Rincker Productions in the Netherlands \n *\n * For terms and conditions visit https://climatecoin.eu\n */\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        if (msg.sender != owner) revert();\n        _;\n    }\n\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner == 0x0) revert();\n        owner = newOwner;\n    }\n}\n\n/**\n * Overflow aware uint math functions.\n */\ncontract SafeMath {\n  //internals\n\n  function safeMul(uint a, uint b) internal pure returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  /*function assert(bool assertion) internal {\n    if (!assertion) revert();\n  }*/\n}\n\ncontract Token {\n    /* This is a slight change to the ERC20 base standard.\n    function totalSupply() constant returns (uint256 supply);\n    is replaced with:\n    uint256 public totalSupply;\n    This automatically creates a getter function for the totalSupply.\n    This is moved to the base contract since public getter functions are not\n    currently recognised as an implementation of the matching abstract\n    function by the compiler.\n    */\n    /// total amount of tokens\n    uint256 public totalSupply;\n\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    /// @notice `msg.sender` approves `_spender` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of tokens to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract StandardToken is Token {\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.\n        //Replace the if with this one instead.\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        //if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        //same as above. Replace this line with the following if you want to protect against wrapping uints.\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {\n        //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_from] -= _value;\n            balances[_to] += _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n    }\n\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n}\n\n/* ClimateCoin Contract */\ncontract ClimateCoinToken is owned, SafeMath, StandardToken {\n    string public code = \"CLI\";                                     // Set the name for display purposes\n    string public name = \"ClimateCoin\";                                     // Set the name for display purposes\n    string public symbol = \"\u041a\";                                             // Set the symbol for display purposes U+041A HTML-code: &#1050;\n    address public ClimateCoinAddress = this;                               // Address of the ClimateCoin token\n    uint8 public decimals = 2;                                              // Amount of decimals for display purposes\n    uint256 public totalSupply = 10000000;                                  // Set total supply of ClimateCoins (eight trillion)\n    uint256 public buyPriceEth = 1 finney;                                  // Buy price for ClimateCoins\n    uint256 public sellPriceEth = 1 finney;                                 // Sell price for ClimateCoins\n    uint256 public gasForCLI = 5 finney;                                    // Eth from contract against CLI to pay tx (10 times sellPriceEth)\n    uint256 public CLIForGas = 10;                                          // CLI to contract against eth to pay tx\n    uint256 public gasReserve = 0.2 ether;                                    // Eth amount that remains in the contract for gas and can't be sold\n    uint256 public minBalanceForAccounts = 10 finney;                       // Minimal eth balance of sender and recipient\n    bool public directTradeAllowed = false;                                 // Halt trading CLI by sending to the contract directly\n    \n    /* include mintable */\n    \n    event Mint(address indexed to, uint value);\n    event MintFinished();\n\n    bool public mintingFinished = false;\n    \n     modifier canMint() {\n    if(mintingFinished) revert();\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint _amount) public onlyOwner canMint returns (bool) {\n    totalSupply = safeAdd(totalSupply,_amount);\n    balances[_to] = safeAdd(balances[_to],_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() public onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n  \n  /* end mintable */\n\n\n/* Initializes contract with initial supply tokens to the creator of the contract */\n    function ClimateCoinToken() public {\n        balances[msg.sender] = totalSupply;                                 // Give the creator all tokens\n    }\n\n\n/* Constructor parameters */\n    function setEtherPrices(uint256 newBuyPriceEth, uint256 newSellPriceEth) onlyOwner public {\n        buyPriceEth = newBuyPriceEth;                                       // Set prices to buy and sell CLI\n        sellPriceEth = newSellPriceEth;\n    }\n    function setGasForCLI(uint newGasAmountInWei) onlyOwner public {\n        gasForCLI = newGasAmountInWei;\n    }\n    function setCLIForGas(uint newCLIAmount) onlyOwner public {\n        CLIForGas = newCLIAmount;\n    }\n    function setGasReserve(uint newGasReserveInWei) onlyOwner public {\n        gasReserve = newGasReserveInWei;\n    }\n    function setMinBalance(uint minimumBalanceInWei) onlyOwner public {\n        minBalanceForAccounts = minimumBalanceInWei;\n    }\n\n\n/* Halts or unhalts direct trades without the sell/buy functions below */\n    function haltDirectTrade() onlyOwner public {\n        directTradeAllowed = false;\n    }\n    function unhaltDirectTrade() onlyOwner public {\n        directTradeAllowed = true;\n    }\n\n\n/* Transfer function extended by check of eth balances and pay transaction costs with CLI if not enough eth */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        if (_value < CLIForGas) revert();                                      // Prevents drain and spam\n        if (msg.sender != owner && _to == ClimateCoinAddress && directTradeAllowed) {\n            sellClimateCoinsAgainstEther(_value);                             // Trade ClimateCoins against eth by sending to the token contract\n            return true;\n        }\n\n        if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {               // Check if sender has enough and for overflows\n            balances[msg.sender] = safeSub(balances[msg.sender], _value);   // Subtract CLI from the sender\n\n            if (msg.sender.balance >= minBalanceForAccounts && _to.balance >= minBalanceForAccounts) {    // Check if sender can pay gas and if recipient could\n                balances[_to] = safeAdd(balances[_to], _value);             // Add the same amount of CLI to the recipient\n                Transfer(msg.sender, _to, _value);                          // Notify anyone listening that this transfer took place\n                return true;\n            } else {\n                balances[this] = safeAdd(balances[this], CLIForGas);        // Pay CLIForGas to the contract\n                balances[_to] = safeAdd(balances[_to], safeSub(_value, CLIForGas));  // Recipient balance -CLIForGas\n                Transfer(msg.sender, _to, safeSub(_value, CLIForGas));      // Notify anyone listening that this transfer took place\n\n                if(msg.sender.balance < minBalanceForAccounts) {\n                    if(!msg.sender.send(gasForCLI)) revert();                  // Send eth to sender\n                  }\n                if(_to.balance < minBalanceForAccounts) {\n                    if(!_to.send(gasForCLI)) revert();                         // Send eth to recipient\n                }\n            }\n        } else { revert(); }\n    }\n\n\n/* User buys ClimateCoins and pays in Ether */\n    function buyClimateCoinsAgainstEther() public payable returns (uint amount) {\n        if (buyPriceEth == 0 || msg.value < buyPriceEth) revert();             // Avoid dividing 0, sending small amounts and spam\n        amount = msg.value / buyPriceEth;                                   // Calculate the amount of ClimateCoins\n        if (balances[this] < amount) revert();                                 // Check if it has enough to sell\n        balances[msg.sender] = safeAdd(balances[msg.sender], amount);       // Add the amount to buyer's balance\n        balances[this] = safeSub(balances[this], amount);                   // Subtract amount from ClimateCoin balance\n        Transfer(this, msg.sender, amount);                                 // Execute an event reflecting the change\n        return amount;\n    }\n\n\n/* User sells ClimateCoins and gets Ether */\n    function sellClimateCoinsAgainstEther(uint256 amount) public returns (uint revenue) {\n        if (sellPriceEth == 0 || amount < CLIForGas) revert();                // Avoid selling and spam\n        if (balances[msg.sender] < amount) revert();                           // Check if the sender has enough to sell\n        revenue = safeMul(amount, sellPriceEth);                            // Revenue = eth that will be send to the user\n        if (safeSub(this.balance, revenue) < gasReserve) revert();             // Keep min amount of eth in contract to provide gas for transactions\n        if (!msg.sender.send(revenue)) {                                    // Send ether to the seller. It's important\n            revert();                                                          // To do this last to avoid recursion attacks\n        } else {\n            balances[this] = safeAdd(balances[this], amount);               // Add the amount to ClimateCoin balance\n            balances[msg.sender] = safeSub(balances[msg.sender], amount);   // Subtract the amount from seller's balance\n            Transfer(this, msg.sender, revenue);                            // Execute an event reflecting on the change\n            return revenue;                                                 // End function and returns\n        }\n    }\n\n\n/* refund to owner */\n    function refundToOwner (uint256 amountOfEth, uint256 cli) public onlyOwner {\n        uint256 eth = safeMul(amountOfEth, 1 ether);\n        if (!msg.sender.send(eth)) {                                        // Send ether to the owner. It's important\n            revert();                                                          // To do this last to avoid recursion attacks\n        } else {\n            Transfer(this, msg.sender, eth);                                // Execute an event reflecting on the change\n        }\n        if (balances[this] < cli) revert();                                    // Check if it has enough to sell\n        balances[msg.sender] = safeAdd(balances[msg.sender], cli);          // Add the amount to buyer's balance\n        balances[this] = safeSub(balances[this], cli);                      // Subtract amount from seller's balance\n        Transfer(this, msg.sender, cli);                                    // Execute an event reflecting the change\n    }\n\n/* This unnamed function is called whenever someone tries to send ether to it and possibly sells ClimateCoins */\n    function() public payable {\n        if (msg.sender != owner) {\n            if (!directTradeAllowed) revert();\n            buyClimateCoinsAgainstEther();                                    // Allow direct trades by sending eth to the contract\n        }\n    }\n}"
}