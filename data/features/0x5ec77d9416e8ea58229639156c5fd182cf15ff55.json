{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST ISZERO PUSH2 JUMPI CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP7 SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 GT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 DUP2 MSTORE DUP3 DUP3 SHA3 CALLER DUP4 MSTORE SWAP1 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP7 AND DUP2 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP9 AND SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH8 DUP4 MUL SWAP1 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP2 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 SWAP2 CALLER SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH8 DUP8 MUL SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH1 SLOAD DUP3 MLOAD DUP3 DUP2 MSTORE SWAP3 MLOAD SWAP2 SWAP6 AND SWAP4 SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 PUSH1 SLOAD PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND SWAP4 AND SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST ISZERO PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe STOP UNKNOWN_0xdd CALLCODE MSTORE UNKNOWN_0xad SHL UNKNOWN_0xe2 UNKNOWN_0xc8 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef LOG1 PUSH6 SHA3 UNKNOWN_0xdd PUSH29 CHAINID STOP UNKNOWN_0x29",
  "opcode_entropy": 4.825715332168273,
  "opcode_count": 1514,
  "unique_opcodes": 73,
  "byte_entropy": 5.765270108736654,
  "byte_60": 0.1100309323906319,
  "byte_80": 0.04197967300044189,
  "byte_40": 0.012814847547503314,
  "byte_52": 0.0344675209898365,
  "byte_04": 0.0136986301369863,
  "byte_36": 0.0008837825894829872,
  "byte_10": 0.0017675651789659744,
  "byte_61": 0.04021210782147592,
  "byte_00": 0.06319045514803358,
  "byte_cf": 0.0008837825894829872,
  "byte_57": 0.019885108263367212,
  "byte_63": 0.009279717189571365,
  "byte_ff": 0.020326999558108707,
  "byte_7c": 0.0026513477684489617,
  "byte_01": 0.034909412284577994,
  "byte_35": 0.007512152010605391,
  "byte_16": 0.019885108263367212,
  "byte_06": 0.003535130357931949,
  "byte_fd": 0.010163499779054353,
  "byte_de": 0.0008837825894829872,
  "byte_03": 0.02562969509500663,
  "byte_81": 0.03535130357931949,
  "byte_14": 0.007512152010605391,
  "byte_d4": 0.0004418912947414936,
  "byte_09": 0.0013256738842244808,
  "byte_5e": 0.0008837825894829872,
  "byte_a7": 0.0017675651789659744,
  "byte_b3": 0.0017675651789659744,
  "byte_18": 0.0008837825894829872,
  "byte_0d": 0.0013256738842244808,
  "byte_dd": 0.0026513477684489617,
  "byte_96": 0.0008837825894829872,
  "byte_23": 0.0017675651789659744,
  "byte_b8": 0.0004418912947414936,
  "byte_72": 0.0013256738842244808,
  "byte_bd": 0.0013256738842244808,
  "byte_31": 0.002209456473707468,
  "byte_3c": 0.0004418912947414936,
  "byte_e5": 0.0008837825894829872,
  "byte_67": 0.002209456473707468,
  "byte_e7": 0.0004418912947414936,
  "byte_42": 0.0008837825894829872,
  "byte_6c": 0.0017675651789659744,
  "byte_68": 0.0013256738842244808,
  "byte_02": 0.02209456473707468,
  "byte_12": 0.0013256738842244808,
  "byte_4c": 0.0004418912947414936,
  "byte_73": 0.0013256738842244808,
  "byte_89": 0.0004418912947414936,
  "byte_2a": 0.0008837825894829872,
  "byte_70": 0.0004418912947414936,
  "byte_a0": 0.011931064958020326,
  "byte_82": 0.01855943437914273,
  "byte_3f": 0.0004418912947414936,
  "byte_79": 0.0004418912947414936,
  "byte_c6": 0.0004418912947414936,
  "byte_50": 0.021210782147591693,
  "byte_8d": 0.0008837825894829872,
  "byte_a5": 0.0008837825894829872,
  "byte_cb": 0.0008837825894829872,
  "byte_5b": 0.033583738400353516,
  "byte_86": 0.0026513477684489617,
  "byte_95": 0.0013256738842244808,
  "byte_d8": 0.0008837825894829872,
  "byte_9b": 0.0013256738842244808,
  "byte_41": 0.0004418912947414936,
  "byte_b7": 0.0013256738842244808,
  "byte_a9": 0.0004418912947414936,
  "byte_05": 0.0057445868316394165,
  "byte_9c": 0.0004418912947414936,
  "byte_bb": 0.0004418912947414936,
  "byte_cc": 0.0017675651789659744,
  "byte_62": 0.0008837825894829872,
  "byte_ed": 0.0004418912947414936,
  "byte_3e": 0.0004418912947414936,
  "byte_f0": 0.0004418912947414936,
  "byte_f2": 0.0013256738842244808,
  "byte_e3": 0.0004418912947414936,
  "byte_8b": 0.0004418912947414936,
  "byte_17": 0.0013256738842244808,
  "byte_34": 0.007070260715863898,
  "byte_15": 0.012814847547503314,
  "byte_e0": 0.0017675651789659744,
  "byte_e9": 0.0008837825894829872,
  "byte_38": 0.0013256738842244808,
  "byte_56": 0.016349977905435263,
  "byte_51": 0.017675651789659744,
  "byte_20": 0.027839151568714096,
  "byte_83": 0.015024304021210782,
  "byte_91": 0.018117543084401236,
  "byte_92": 0.011931064958020326,
  "byte_90": 0.05125939019001326,
  "byte_85": 0.003535130357931949,
  "byte_0b": 0.0004418912947414936,
  "byte_1f": 0.0004418912947414936,
  "byte_0a": 0.012814847547503314,
  "byte_19": 0.0008837825894829872,
  "byte_f3": 0.0030932390631904553,
  "byte_6a": 0.002209456473707468,
  "byte_24": 0.0026513477684489617,
  "byte_6f": 0.0008837825894829872,
  "byte_a2": 0.0008837825894829872,
  "byte_ab": 0.0017675651789659744,
  "byte_c9": 0.0004418912947414936,
  "byte_44": 0.0008837825894829872,
  "byte_fc": 0.0013256738842244808,
  "byte_1e": 0.0017675651789659744,
  "byte_4b": 0.0004418912947414936,
  "byte_84": 0.003977021652673442,
  "byte_45": 0.0004418912947414936,
  "byte_c3": 0.0008837825894829872,
  "byte_07": 0.0026513477684489617,
  "byte_f9": 0.0013256738842244808,
  "byte_08": 0.0057445868316394165,
  "byte_7f": 0.0017675651789659744,
  "byte_74": 0.0004418912947414936,
  "byte_6b": 0.0004418912947414936,
  "byte_65": 0.0013256738842244808,
  "byte_6e": 0.0004418912947414936,
  "byte_32": 0.0013256738842244808,
  "byte_33": 0.007512152010605391,
  "byte_54": 0.011489173663278833,
  "byte_11": 0.003977021652673442,
  "byte_8e": 0.0008837825894829872,
  "byte_88": 0.0008837825894829872,
  "byte_55": 0.004860804242156429,
  "byte_93": 0.004418912947414936,
  "byte_8c": 0.0026513477684489617,
  "byte_e1": 0.0004418912947414936,
  "byte_eb": 0.0004418912947414936,
  "byte_ec": 0.0004418912947414936,
  "byte_7d": 0.0008837825894829872,
  "byte_d1": 0.0004418912947414936,
  "byte_4f": 0.0004418912947414936,
  "byte_71": 0.0008837825894829872,
  "byte_c0": 0.0004418912947414936,
  "byte_f7": 0.0004418912947414936,
  "byte_b2": 0.0004418912947414936,
  "byte_29": 0.0008837825894829872,
  "byte_c8": 0.0008837825894829872,
  "byte_c7": 0.0004418912947414936,
  "byte_b9": 0.0004418912947414936,
  "byte_25": 0.0008837825894829872,
  "byte_a3": 0.0026513477684489617,
  "byte_5c": 0.0008837825894829872,
  "byte_94": 0.0030932390631904553,
  "byte_0f": 0.0004418912947414936,
  "byte_39": 0.0026513477684489617,
  "byte_b6": 0.0013256738842244808,
  "byte_64": 0.0008837825894829872,
  "byte_f5": 0.0013256738842244808,
  "byte_db": 0.0004418912947414936,
  "byte_b4": 0.0004418912947414936,
  "byte_87": 0.0017675651789659744,
  "byte_9d": 0.0004418912947414936,
  "byte_7a": 0.0013256738842244808,
  "byte_5d": 0.0008837825894829872,
  "byte_ae": 0.0004418912947414936,
  "byte_3b": 0.0004418912947414936,
  "byte_76": 0.0004418912947414936,
  "byte_fe": 0.0008837825894829872,
  "byte_ad": 0.0004418912947414936,
  "byte_1b": 0.0004418912947414936,
  "byte_e2": 0.0004418912947414936,
  "byte_69": 0.0004418912947414936,
  "byte_c2": 0.0008837825894829872,
  "byte_b0": 0.0004418912947414936,
  "byte_37": 0.0004418912947414936,
  "byte_aa": 0.0004418912947414936,
  "byte_2b": 0.0004418912947414936,
  "byte_f1": 0.0004418912947414936,
  "byte_c4": 0.0004418912947414936,
  "byte_a1": 0.0008837825894829872,
  "byte_28": 0.0004418912947414936,
  "byte_5a": 0.0004418912947414936,
  "byte_4d": 0.0004418912947414936,
  "byte_ef": 0.0004418912947414936,
  "byte_30": 0.0008837825894829872,
  "byte_58": 0.0004418912947414936,
  "byte_4e": 0.0004418912947414936,
  "byte_b5": 0.0004418912947414936,
  "byte_d5": 0.0004418912947414936,
  "byte_e8": 0.0004418912947414936,
  "byte_be": 0.0004418912947414936,
  "byte_7b": 0.0004418912947414936,
  "byte_d0": 0.0004418912947414936,
  "byte_53": 0.0004418912947414936,
  "byte_46": 0.0004418912947414936,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 5,
  "event_nums": 6,
  "creation_block": 7030436,
  "creation_timestamp": 1546938259,
  "life_time": 6112.0,
  "duration_seconds": 94084.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.0008179290037624734,
  "avg_gas_limit": 184352.8,
  "std_gas_limit": 287241.20718406676,
  "avg_gas_used": 184352.8,
  "std_gas_used": 287241.20718406676,
  "avg_gas_price": 2400000000.0,
  "std_gas_price": 489897948.5566356,
  "transfer_num": 2,
  "burn_num": 1,
  "atinversebrah_num": 1,
  "minttoken_num": 1,
  "timeline_sequence": [
    [
      7030436,
      1546938259,
      9,
      86,
      0,
      758686,
      2000000000,
      0,
      1,
      7040595,
      758686,
      16090459
    ],
    [
      7030454,
      1546938503,
      10,
      115,
      0,
      53428,
      2000000000,
      0,
      1,
      6010041,
      53428,
      16090441
    ],
    [
      7030461,
      1546938586,
      1,
      26,
      0,
      35944,
      2000000000,
      0,
      1,
      1044120,
      35944,
      16090434
    ],
    [
      7036537,
      1547032192,
      11,
      161,
      0,
      36661,
      3000000000,
      0,
      1,
      7969314,
      36661,
      16084358
    ],
    [
      7036548,
      1547032343,
      12,
      82,
      0,
      37045,
      3000000000,
      0,
      1,
      3208845,
      37045,
      16084347
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.25;\n\ncontract owned {\n    address public owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract token12345 is owned{\n\nusing SafeMath for uint256;\n\nstring public constant symbol = \"T12345\";\nstring public constant name = \"token12345\";\nuint8 public constant decimals = 18;\nuint256 _initialSupply = 1000000 * 10 ** uint256(decimals);\nuint256 _totalSupply;\n\n// Owner of this contract\naddress public owner;\n\n// Balances for each account\nmapping(address => uint256) balances;\n\n// Owner of account approves the transfer of an amount to another account\nmapping(address => mapping (address => uint256)) allowed;\n\n\n\n\n// Constructor\nconstructor() token12345() public {\n   owner = msg.sender;\n   _totalSupply = _initialSupply;\n   balances[owner] = _totalSupply;\n}\n\n// ERC20\nfunction mintToken(address target, uint256 mintedAmount) onlyOwner public {\n    uint256 _mintedAmount = mintedAmount * 10 ** 18;\n    balances[target] += _mintedAmount;\n    _totalSupply += _mintedAmount;\n    emit Transfer(0x0, owner, _mintedAmount);\n    emit Transfer(owner, target, _mintedAmount);\n}\n\nfunction burn(uint256 value) public returns (bool success) {\n    uint256 _value = value * 10 ** 18;\n    require(balances[msg.sender] >= _value);   // Check if the sender has enough\n    balances[msg.sender] -= _value;            // Subtract from the sender\n    _totalSupply -= _value;                      // Updates totalSupply\n    emit Burn(msg.sender, _value);\n    emit Transfer(msg.sender, 0x0, _value);\n\n    return true;\n}\n\nfunction totalSupply() public view returns (uint256) {\n   return _totalSupply;\n}\n\nfunction balanceOf(address _owner) public view returns (uint256 balance) {\n   return balances[_owner];\n}\n\nfunction transfer(address _to, uint256 _amount) public returns (bool success) {\n   if (balances[msg.sender] >= _amount && _amount > 0) {\n       balances[msg.sender] = balances[msg.sender].sub(_amount);\n       balances[_to] = balances[_to].add(_amount);\n       emit Transfer(msg.sender, _to, _amount);\n       return true;\n   } else {\n       return false;\n   }\n}\n\nfunction transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n   if (balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount > 0) {\n       balances[_from] = balances[_from].sub(_amount);\n       allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n       balances[_to] = balances[_to].add(_amount);\n       emit Transfer(_from, _to, _amount);\n       return true;\n   } else {\n       return false;\n   }\n}\n\nfunction approve(address _spender, uint256 _amount) public returns (bool success) {\n   if(balances[msg.sender]>=_amount && _amount>0) {\n       allowed[msg.sender][_spender] = _amount;\n       emit Approval(msg.sender, _spender, _amount);\n       return true;\n   } else {\n       return false;\n   }\n}\n\nfunction allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n   return allowed[_owner][_spender];\n}\n\nevent Transfer(address indexed _from, address indexed _to, uint _value);\nevent Approval(address indexed _owner, address indexed _spender, uint _value);\nevent Burn(address indexed from, uint256 value);\n\n\n// custom\nfunction getMyBalance() public view returns (uint) {\n   return balances[msg.sender];\n}\n}\n\nlibrary SafeMath {\nfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n    }\n\nfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a / b;\n    return c;\n    }\n\nfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n    }\n\nfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n    }\n}"
}