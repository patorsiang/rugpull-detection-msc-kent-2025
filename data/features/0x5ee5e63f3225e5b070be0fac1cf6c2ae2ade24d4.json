{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP2 EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP2 ADD PUSH1 CALLDATASIZE SWAP1 POP LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP2 POP PUSH2 DUP4 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 AND DUP6 PUSH20 AND PUSH32 DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SWAP2 POP PUSH1 DUP3 PUSH1 ADD SLOAD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 ADD SLOAD TIMESTAMP LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 ADD SLOAD SWAP1 POP PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP1 DUP3 ADD PUSH1 SWAP1 SSTORE PUSH1 DUP3 ADD PUSH1 SWAP1 SSTORE POP POP PUSH2 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH1 PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP2 ADD PUSH1 CALLDATASIZE SWAP1 POP LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP DUP6 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP5 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SWAP2 POP PUSH1 DUP3 PUSH1 ADD SLOAD EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 DUP7 DUP2 MSTORE PUSH1 ADD DUP6 DUP2 MSTORE POP SWAP1 POP PUSH2 DUP5 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SSTORE PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SSTORE SWAP1 POP POP DUP6 PUSH20 AND PUSH32 DUP7 DUP7 PUSH1 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP PUSH2 DUP5 DUP3 LT ISZERO PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 GT ISZERO PUSH2 JUMP JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE POP SWAP1 JUMP STOP LOG1 PUSH6 SHA3 MULMOD UNKNOWN_0xd0 LOG3 PUSH8 UNKNOWN_0x27 GAS UNKNOWN_0xe5 UNKNOWN_0xbd UNKNOWN_0xe0 UNKNOWN_0xbb INVALID_0x7e",
  "opcode_entropy": 4.6562042243653075,
  "opcode_count": 3654,
  "unique_opcodes": 62,
  "byte_entropy": 4.539364472649234,
  "byte_60": 0.06828835677182313,
  "byte_80": 0.03142024578740656,
  "byte_40": 0.008615228683643734,
  "byte_52": 0.01761054098568352,
  "byte_04": 0.007094894210059546,
  "byte_36": 0.002533890789306981,
  "byte_10": 0.0026605853287723297,
  "byte_61": 0.024071962498416317,
  "byte_01": 0.035727860129228434,
  "byte_28": 0.0006334726973267452,
  "byte_57": 0.010388952236158622,
  "byte_00": 0.03078677309007982,
  "byte_35": 0.0034207525655644243,
  "byte_7c": 0.0005067781578613962,
  "byte_90": 0.03813505637907006,
  "byte_63": 0.005321170657544659,
  "byte_ff": 0.3634866337260864,
  "byte_16": 0.023185100722158875,
  "byte_05": 0.0024071962498416317,
  "byte_d2": 0.0002533890789306981,
  "byte_03": 0.010515646775623971,
  "byte_5b": 0.019637653617129103,
  "byte_14": 0.005447865197010009,
  "byte_2d": 0.0003800836183960471,
  "byte_06": 0.002027112631445585,
  "byte_fd": 0.006461421512732801,
  "byte_de": 0.0005067781578613962,
  "byte_5c": 0.0005067781578613962,
  "byte_09": 0.0012669453946534905,
  "byte_5e": 0.0003800836183960471,
  "byte_a7": 0.0006334726973267452,
  "byte_b3": 0.0006334726973267452,
  "byte_ec": 0.0002533890789306981,
  "byte_18": 0.0007601672367920942,
  "byte_0d": 0.0011402508551881414,
  "byte_dd": 0.0011402508551881414,
  "byte_02": 0.00392753072342582,
  "byte_39": 0.0006334726973267452,
  "byte_23": 0.0005067781578613962,
  "byte_b8": 0.0006334726973267452,
  "byte_72": 0.0005067781578613962,
  "byte_64": 0.0003800836183960471,
  "byte_24": 0.0003800836183960471,
  "byte_bc": 0.0005067781578613962,
  "byte_e6": 0.0003800836183960471,
  "byte_0c": 0.0003800836183960471,
  "byte_d1": 0.0002533890789306981,
  "byte_6c": 0.0003800836183960471,
  "byte_1a": 0.0005067781578613962,
  "byte_31": 0.0002533890789306981,
  "byte_3c": 0.0002533890789306981,
  "byte_e5": 0.0005067781578613962,
  "byte_67": 0.0012669453946534905,
  "byte_8d": 0.0007601672367920942,
  "byte_c1": 0.0003800836183960471,
  "byte_0f": 0.0008868617762574433,
  "byte_19": 0.0010135563157227924,
  "byte_4e": 0.0002533890789306981,
  "byte_71": 0.0006334726973267452,
  "byte_d9": 0.0003800836183960471,
  "byte_1d": 0.0003800836183960471,
  "byte_59": 0.0002533890789306981,
  "byte_34": 0.002913974407703028,
  "byte_70": 0.0003800836183960471,
  "byte_a0": 0.0002533890789306981,
  "byte_82": 0.008615228683643734,
  "byte_8b": 0.0005067781578613962,
  "byte_7b": 0.00012669453946534905,
  "byte_46": 0.0005067781578613962,
  "byte_0b": 0.0002533890789306981,
  "byte_e2": 0.0006334726973267452,
  "byte_7d": 0.0006334726973267452,
  "byte_b4": 0.0002533890789306981,
  "byte_47": 0.0002533890789306981,
  "byte_a5": 0.0005067781578613962,
  "byte_cb": 0.0002533890789306981,
  "byte_76": 0.0003800836183960471,
  "byte_95": 0.0010135563157227924,
  "byte_d8": 0.0002533890789306981,
  "byte_9b": 0.0005067781578613962,
  "byte_41": 0.0005067781578613962,
  "byte_cd": 0.0002533890789306981,
  "byte_9d": 0.0003800836183960471,
  "byte_c2": 0.0007601672367920942,
  "byte_9f": 0.00012669453946534905,
  "byte_ac": 0.0002533890789306981,
  "byte_5d": 0.0003800836183960471,
  "byte_a9": 0.0005067781578613962,
  "byte_9c": 0.0002533890789306981,
  "byte_bb": 0.0002533890789306981,
  "byte_4a": 0.0002533890789306981,
  "byte_3b": 0.00012669453946534905,
  "byte_8c": 0.0003800836183960471,
  "byte_07": 0.0013936399341188395,
  "byte_42": 0.0008868617762574433,
  "byte_17": 0.0015203344735841885,
  "byte_7e": 0.0003800836183960471,
  "byte_62": 0.0005067781578613962,
  "byte_ed": 0.0002533890789306981,
  "byte_3e": 0.0002533890789306981,
  "byte_d5": 0.00012669453946534905,
  "byte_f2": 0.0005067781578613962,
  "byte_e3": 0.00012669453946534905,
  "byte_08": 0.0012669453946534905,
  "byte_4c": 0.0002533890789306981,
  "byte_15": 0.015203344735841885,
  "byte_50": 0.029266438616495628,
  "byte_8f": 0.0002533890789306981,
  "byte_56": 0.008868617762574433,
  "byte_51": 0.008868617762574433,
  "byte_81": 0.025845686050931203,
  "byte_20": 0.0266058532877233,
  "byte_91": 0.015330039275307234,
  "byte_f3": 0.002280501710376283,
  "byte_68": 0.0007601672367920942,
  "byte_a2": 0.0010135563157227924,
  "byte_83": 0.004687697960217915,
  "byte_b1": 0.0005067781578613962,
  "byte_84": 0.0017737235525148865,
  "byte_96": 0.0002533890789306981,
  "byte_1f": 0.0012669453946534905,
  "byte_0a": 0.002533890789306981,
  "byte_92": 0.0049410870391486126,
  "byte_f8": 0.00012669453946534905,
  "byte_37": 0.0006334726973267452,
  "byte_73": 0.018117319143544912,
  "byte_45": 0.00012669453946534905,
  "byte_cf": 0.0003800836183960471,
  "byte_c8": 0.0006334726973267452,
  "byte_1c": 0.0005067781578613962,
  "byte_88": 0.0003800836183960471,
  "byte_77": 0.0002533890789306981,
  "byte_c6": 0.00012669453946534905,
  "byte_99": 0.0002533890789306981,
  "byte_12": 0.0005067781578613962,
  "byte_c4": 0.0005067781578613962,
  "byte_29": 0.0005067781578613962,
  "byte_32": 0.0003800836183960471,
  "byte_11": 0.0012669453946534905,
  "byte_98": 0.0002533890789306981,
  "byte_75": 0.0003800836183960471,
  "byte_13": 0.0010135563157227924,
  "byte_44": 0.0005067781578613962,
  "byte_97": 0.00012669453946534905,
  "byte_cc": 0.0003800836183960471,
  "byte_ee": 0.0003800836183960471,
  "byte_53": 0.0002533890789306981,
  "byte_c3": 0.0005067781578613962,
  "byte_e9": 0.00012669453946534905,
  "byte_22": 0.00012669453946534905,
  "byte_4f": 0.0003800836183960471,
  "byte_69": 0.0006334726973267452,
  "byte_a8": 0.0002533890789306981,
  "byte_87": 0.0007601672367920942,
  "byte_ce": 0.0003800836183960471,
  "byte_4b": 0.00012669453946534905,
  "byte_1b": 0.0015203344735841885,
  "byte_f5": 0.0012669453946534905,
  "byte_8a": 0.00012669453946534905,
  "byte_bf": 0.00012669453946534905,
  "byte_d3": 0.0003800836183960471,
  "byte_e1": 0.0003800836183960471,
  "byte_eb": 0.0002533890789306981,
  "byte_58": 0.0002533890789306981,
  "byte_54": 0.006714810591663499,
  "byte_38": 0.0002533890789306981,
  "byte_33": 0.0026605853287723297,
  "byte_55": 0.002787279868237679,
  "byte_7f": 0.0017737235525148865,
  "byte_1e": 0.003294058026099075,
  "byte_c0": 0.00012669453946534905,
  "byte_f7": 0.0002533890789306981,
  "byte_b2": 0.00012669453946534905,
  "byte_c7": 0.00012669453946534905,
  "byte_b9": 0.0002533890789306981,
  "byte_25": 0.0002533890789306981,
  "byte_a3": 0.0006334726973267452,
  "byte_e0": 0.0006334726973267452,
  "byte_86": 0.0016470290130495375,
  "byte_49": 0.0011402508551881414,
  "byte_85": 0.002027112631445585,
  "byte_ad": 0.0007601672367920942,
  "byte_b0": 0.0003800836183960471,
  "byte_fc": 0.0005067781578613962,
  "byte_aa": 0.0003800836183960471,
  "byte_2b": 0.0007601672367920942,
  "byte_f1": 0.0005067781578613962,
  "byte_a1": 0.0008868617762574433,
  "byte_5a": 0.0006334726973267452,
  "byte_4d": 0.0005067781578613962,
  "byte_ef": 0.0005067781578613962,
  "byte_f6": 0.0003800836183960471,
  "byte_0e": 0.0003800836183960471,
  "byte_f9": 0.00012669453946534905,
  "byte_7a": 0.0005067781578613962,
  "byte_27": 0.0002533890789306981,
  "byte_b5": 0.00012669453946534905,
  "byte_65": 0.0003800836183960471,
  "byte_6b": 0.00012669453946534905,
  "byte_db": 0.0002533890789306981,
  "byte_a6": 0.00012669453946534905,
  "byte_e4": 0.0003800836183960471,
  "byte_ba": 0.0002533890789306981,
  "byte_3a": 0.0003800836183960471,
  "byte_79": 0.00012669453946534905,
  "byte_fe": 0.00012669453946534905,
  "byte_94": 0.0002533890789306981,
  "byte_21": 0.00012669453946534905,
  "byte_e7": 0.0002533890789306981,
  "byte_2c": 0.00012669453946534905,
  "byte_af": 0.00012669453946534905,
  "byte_d6": 0.00012669453946534905,
  "byte_26": 0.0002533890789306981,
  "byte_3f": 0.00012669453946534905,
  "byte_ae": 0.00012669453946534905,
  "byte_fb": 0.00012669453946534905,
  "byte_2a": 0.00012669453946534905,
  "byte_ca": 0.00012669453946534905,
  "byte_ea": 0.00012669453946534905,
  "byte_f0": 0.00012669453946534905,
  "byte_fa": 0.00012669453946534905,
  "byte_43": 0.0002533890789306981,
  "byte_bd": 0.0002533890789306981,
  "byte_b7": 0.00012669453946534905,
  "byte_48": 0.00012669453946534905,
  "byte_93": 0.0002533890789306981,
  "byte_9e": 0.00012669453946534905,
  "byte_6e": 0.00012669453946534905,
  "byte_2f": 0.00012669453946534905,
  "byte_6a": 0.00012669453946534905,
  "byte_6f": 0.00012669453946534905,
  "byte_30": 0.00012669453946534905,
  "byte_d0": 0.0002533890789306981,
  "byte_c9": 0.00012669453946534905,
  "byte_df": 0.00012669453946534905,
  "byte_66": 0.00012669453946534905,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 6,
  "event_nums": 5,
  "creation_block": 7841633,
  "creation_timestamp": 1558959079,
  "life_time": 10335.0,
  "duration_seconds": 140138.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.0005804953560371517,
  "avg_gas_limit": 862932.1666666666,
  "std_gas_limit": 1150370.1670941135,
  "avg_gas_used": 420348.8333333333,
  "std_gas_used": 828319.8566146649,
  "avg_gas_price": 10194741830.0,
  "std_gas_price": 435455969.94270784,
  "mint_num": 1,
  "transfer_num": 3,
  "mintfinished_num": 1,
  "atinversebrah_num": 1,
  "finishminting_num": 1,
  "timeline_sequence": [
    [
      7841633,
      1558959079,
      45,
      69,
      0,
      3420000,
      10000000000,
      0,
      1,
      6168162,
      2272357,
      15279266
    ],
    [
      7842229,
      1558967209,
      46,
      120,
      0,
      420000,
      10000000000,
      0,
      1,
      5017445,
      66599,
      15278670
    ],
    [
      7842250,
      1558967535,
      47,
      179,
      0,
      420000,
      10000000000,
      0,
      1,
      7550090,
      51665,
      15278649
    ],
    [
      7842267,
      1558967807,
      48,
      130,
      0,
      420000,
      10000000000,
      0,
      1,
      5545164,
      28142,
      15278632
    ],
    [
      7842292,
      1558968036,
      49,
      57,
      0,
      420000,
      10000000000,
      0,
      1,
      1907582,
      51729,
      15278607
    ],
    [
      7851968,
      1559099217,
      0,
      67,
      0,
      77593,
      11168450980,
      0,
      1,
      3774297,
      51601,
      15268931
    ]
  ],
  "sourcecode": "/**\n * Source Code first verified at https://etherscan.io on Thursday, August 16, 2018\n (UTC) */\n\npragma solidity ^0.4.24;\n\n\n/**\n*\n*/\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\nfunction mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n   * @dev Fix for the ERC20 short address attack.\n   */\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size + 4) {\n       throw;\n     }\n     _;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) onlyPayloadSize(2 * 32) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value);\n  function approve(address spender, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implemantation of the basic standart token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is BasicToken, ERC20 {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) onlyPayloadSize(3 * 32) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on beahlf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n\n  /**\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      throw;\n    }\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 value);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n  uint256 public totalSupply = 0;\n\n\n  modifier canMint() {\n    if(mintingFinished) throw;\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract TimeLockToken is Ownable, MintableToken{\n  using SafeMath for uint256;\n  struct LockedBalance {  \n    uint256 releaseTime; \n    uint256 amount;\n  }\n\n  event MintLock(address indexed to, uint256 releaseTime, uint256 value);\n  mapping(address => LockedBalance) lockedBalances;\n  /**\n   * @dev mint timelocked tokens\n   */\n  function mintTimelocked(address _to, uint256 _releaseTime, uint256 _amount)\n    onlyOwner canMint returns (bool){\n    require(_releaseTime > now);\n    require(_amount > 0);\n    LockedBalance exist = lockedBalances[_to];\n    require(exist.amount == 0);\n    LockedBalance memory balance = LockedBalance(_releaseTime,_amount);\n    totalSupply = totalSupply.add(_amount);\n    lockedBalances[_to] = balance;\n    MintLock(_to, _releaseTime, _amount);\n    return true;\n  }\n\n  /**\n   * @dev beneficiary claims tokens held by time lock\n   */\n  function claim() {\n    LockedBalance balance = lockedBalances[msg.sender];\n    require(balance.amount > 0);\n    require(now >= balance.releaseTime);\n    uint256 amount = balance.amount;\n    delete lockedBalances[msg.sender];\n    balances[msg.sender] = balances[msg.sender].add(amount);\n    Transfer(0, msg.sender, amount);\n  }\n\n  /**\n  * @dev Gets the locked balance of the specified address.\n  * @param _owner The address to query the the locked balance of.\n  * @return An uint representing the amount owned by the passed address.\n  */\n  function lockedBalanceOf(address _owner) constant returns (uint256 lockedAmount) {\n    return lockedBalances[_owner].amount;\n  }\n\n  /**\n  * @dev Gets the releaseTime of the specified address.\n  * @param _owner The address to query the the releaseTime of.\n  * @return An uint representing the amount owned by the passed address.\n  */\n  function releaseTimeOf(address _owner) constant returns (uint256 releaseTime) {\n    return lockedBalances[_owner].releaseTime;\n  }\n  \n}\n\n\n/**\n * @title PRECT Token\n */\ncontract PRECToken is TimeLockToken {\n  using SafeMath for uint256;\n  event Freeze(address indexed to, uint256 value);\n  event Unfreeze(address indexed to, uint256 value);\n  event Burn(address indexed to, uint256 value);\n  mapping (address => uint256) public freezeOf;\n  string public name = \"PreCT token\";\n  string public symbol = \"PRECT\";\n  uint public decimals = 8;\n\n\n  function burn(address _to,uint256 _value) onlyOwner returns (bool success) {\n    require(_value >= 0);\n    require(balances[_to] >= _value);\n    \n    balances[_to] = balances[_to].sub(_value);                      // Subtract from the sender\n    totalSupply = totalSupply.sub(_value);                                // Updates totalSupply\n    Burn(_to, _value);\n    return true;\n  }\n  \n  function freeze(address _to,uint256 _value) onlyOwner returns (bool success) {\n    require(_value >= 0);\n    require(balances[_to] >= _value);\n    balances[_to] = balances[_to].sub(_value);                      // Subtract from the sender\n    freezeOf[_to] = freezeOf[_to].add(_value);                                // Updates totalSupply\n    Freeze(_to, _value);\n    return true;\n  }\n  \n  function unfreeze(address _to,uint256 _value) onlyOwner returns (bool success) {\n    require(_value >= 0);\n    require(freezeOf[_to] >= _value);\n    freezeOf[_to] = freezeOf[_to].sub(_value);                      // Subtract from the sender\n    balances[_to] = balances[_to].add(_value);\n    Unfreeze(_to, _value);\n    return true;\n  }\n\n}"
}