{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 PUSH5 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 ADD DUP4 PUSH1 DUP3 ADD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP2 DUP5 PUSH1 DUP4 MUL DUP5 ADD GT PUSH5 DUP4 GT OR ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP2 SWAP1 DUP1 DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 DUP2 DUP5 ADD MSTORE PUSH1 NOT PUSH1 DUP3 ADD AND SWAP1 POP DUP1 DUP4 ADD SWAP3 POP POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 ADDRESS PUSH20 AND BALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND PUSH1 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND SELFDESTRUCT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 MLOAD SWAP1 POP PUSH1 DUP2 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH2 ADDRESS DUP6 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD DUP6 PUSH2 JUMP JUMPDEST DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 DUP3 DUP3 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 ADDRESS PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP4 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND DUP4 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP UNKNOWN_0xfe LOG1 PUSH6 SHA3 PUSH23 UNKNOWN_0xe9 UNKNOWN_0x2b RETURN INVALID_0x67",
  "opcode_entropy": 4.699364102501082,
  "opcode_count": 3443,
  "unique_opcodes": 64,
  "byte_entropy": 4.537550195252592,
  "byte_0x": 0.0001389274798555154,
  "byte_60": 0.06779661016949153,
  "byte_80": 0.031536537927202,
  "byte_40": 0.008335648791330925,
  "byte_52": 0.016254515143095304,
  "byte_34": 0.0001389274798555154,
  "byte_15": 0.02153375937760489,
  "byte_61": 0.028341205890525144,
  "byte_00": 0.03473186996387886,
  "byte_10": 0.004167824395665463,
  "byte_57": 0.011669908307863295,
  "byte_fd": 0.006390664073353709,
  "byte_5b": 0.02125590441789386,
  "byte_50": 0.025840511253125868,
  "byte_04": 0.009030286190608503,
  "byte_36": 0.0020839121978327314,
  "byte_01": 0.032925812725757155,
  "byte_6a": 0.0008335648791330926,
  "byte_35": 0.003612114476243401,
  "byte_7c": 0.0006946373992775772,
  "byte_90": 0.04070575159766602,
  "byte_63": 0.0056960266740761325,
  "byte_8d": 0.000972492358988608,
  "byte_a5": 0.0008335648791330926,
  "byte_cb": 0.0002778549597110308,
  "byte_11": 0.0020839121978327314,
  "byte_e0": 0.0005557099194220616,
  "byte_b5": 0.0002778549597110308,
  "byte_7d": 0.0002778549597110308,
  "byte_bd": 0.0006946373992775772,
  "byte_c6": 0.0004167824395665463,
  "byte_99": 0.0004167824395665463,
  "byte_14": 0.005973881633787163,
  "byte_06": 0.004167824395665463,
  "byte_c2": 0.0005557099194220616,
  "byte_64": 0.0008335648791330926,
  "byte_2c": 0.0002778549597110308,
  "byte_85": 0.001944984717977216,
  "byte_dd": 0.0006946373992775772,
  "byte_62": 0.0004167824395665463,
  "byte_ed": 0.0004167824395665463,
  "byte_3e": 0.0005557099194220616,
  "byte_07": 0.0022228396776882466,
  "byte_47": 0.0001389274798555154,
  "byte_e7": 0.0002778549597110308,
  "byte_24": 0.0002778549597110308,
  "byte_9c": 0.0005557099194220616,
  "byte_bf": 0.0002778549597110308,
  "byte_f2": 0.0005557099194220616,
  "byte_e3": 0.0002778549597110308,
  "byte_8b": 0.0001389274798555154,
  "byte_08": 0.0016671297582661851,
  "byte_0f": 0.0008335648791330926,
  "byte_fb": 0.0002778549597110308,
  "byte_de": 0.0002778549597110308,
  "byte_75": 0.0001389274798555154,
  "byte_53": 0.0001389274798555154,
  "byte_56": 0.01000277854959711,
  "byte_94": 0.0001389274798555154,
  "byte_18": 0.0030564045568213394,
  "byte_ca": 0.0004167824395665463,
  "byte_95": 0.0004167824395665463,
  "byte_d8": 0.0002778549597110308,
  "byte_9b": 0.0005557099194220616,
  "byte_41": 0.0002778549597110308,
  "byte_d4": 0.0004167824395665463,
  "byte_9f": 0.0002778549597110308,
  "byte_e1": 0.0002778549597110308,
  "byte_05": 0.002639622117254793,
  "byte_a9": 0.0004167824395665463,
  "byte_bb": 0.0001389274798555154,
  "byte_a1": 0.0006946373992775772,
  "byte_b4": 0.0005557099194220616,
  "byte_b6": 0.0002778549597110308,
  "byte_42": 0.0002778549597110308,
  "byte_96": 0.0004167824395665463,
  "byte_6c": 0.0005557099194220616,
  "byte_68": 0.0008335648791330926,
  "byte_32": 0.0004167824395665463,
  "byte_03": 0.009169213670464018,
  "byte_1a": 0.0005557099194220616,
  "byte_4b": 0.0001389274798555154,
  "byte_ec": 0.0005557099194220616,
  "byte_83": 0.005557099194220617,
  "byte_59": 0.0001389274798555154,
  "byte_54": 0.008057793831619895,
  "byte_c8": 0.0006946373992775772,
  "byte_c5": 0.0001389274798555154,
  "byte_70": 0.0002778549597110308,
  "byte_a0": 0.0005557099194220616,
  "byte_82": 0.007779938871908864,
  "byte_31": 0.0004167824395665463,
  "byte_74": 0.0002778549597110308,
  "byte_79": 0.0002778549597110308,
  "byte_cc": 0.000972492358988608,
  "byte_67": 0.0004167824395665463,
  "byte_6f": 0.0002778549597110308,
  "byte_09": 0.0012503473186996387,
  "byte_5e": 0.0002778549597110308,
  "byte_a7": 0.0004167824395665463,
  "byte_b3": 0.0004167824395665463,
  "byte_16": 0.02361767157543762,
  "byte_0d": 0.0012503473186996387,
  "byte_02": 0.0048624617949430396,
  "byte_58": 0.0002778549597110308,
  "byte_23": 0.0004167824395665463,
  "byte_b8": 0.0004167824395665463,
  "byte_72": 0.0004167824395665463,
  "byte_76": 0.0002778549597110308,
  "byte_3c": 0.0002778549597110308,
  "byte_e5": 0.0001389274798555154,
  "byte_fc": 0.0005557099194220616,
  "byte_77": 0.0002778549597110308,
  "byte_81": 0.027507641011392053,
  "byte_51": 0.008057793831619895,
  "byte_20": 0.025840511253125868,
  "byte_91": 0.014726312864684635,
  "byte_b7": 0.0008335648791330926,
  "byte_84": 0.002361767157543762,
  "byte_1f": 0.0015282022784106697,
  "byte_e4": 0.0001389274798555154,
  "byte_0a": 0.004306751875520978,
  "byte_19": 0.0015282022784106697,
  "byte_92": 0.005001389274798555,
  "byte_f3": 0.0022228396776882466,
  "byte_73": 0.017504862461794942,
  "byte_ff": 0.3528757988330092,
  "byte_e2": 0.0006946373992775772,
  "byte_8c": 0.0004167824395665463,
  "byte_ce": 0.0001389274798555154,
  "byte_0b": 0.0012503473186996387,
  "byte_46": 0.0001389274798555154,
  "byte_30": 0.0008335648791330926,
  "byte_a2": 0.0005557099194220616,
  "byte_8a": 0.0002778549597110308,
  "byte_0e": 0.0006946373992775772,
  "byte_a6": 0.0001389274798555154,
  "byte_be": 0.0001389274798555154,
  "byte_66": 0.0004167824395665463,
  "byte_33": 0.0030564045568213394,
  "byte_88": 0.0004167824395665463,
  "byte_13": 0.0005557099194220616,
  "byte_d2": 0.0001389274798555154,
  "byte_dc": 0.0002778549597110308,
  "byte_1c": 0.0001389274798555154,
  "byte_49": 0.0002778549597110308,
  "byte_5f": 0.0002778549597110308,
  "byte_1d": 0.0001389274798555154,
  "byte_d6": 0.0001389274798555154,
  "byte_6b": 0.0002778549597110308,
  "byte_f6": 0.0001389274798555154,
  "byte_45": 0.0002778549597110308,
  "byte_17": 0.0013892747985551543,
  "byte_93": 0.0004167824395665463,
  "byte_37": 0.0006946373992775772,
  "byte_5d": 0.0004167824395665463,
  "byte_d5": 0.0001389274798555154,
  "byte_25": 0.0002778549597110308,
  "byte_7f": 0.0008335648791330926,
  "byte_69": 0.0004167824395665463,
  "byte_fa": 0.0001389274798555154,
  "byte_3d": 0.0006946373992775772,
  "byte_55": 0.0020839121978327314,
  "byte_87": 0.0004167824395665463,
  "byte_2f": 0.000972492358988608,
  "byte_86": 0.0006946373992775772,
  "byte_48": 0.0006946373992775772,
  "byte_c0": 0.0001389274798555154,
  "byte_0c": 0.0004167824395665463,
  "byte_f5": 0.0008335648791330926,
  "byte_db": 0.0002778549597110308,
  "byte_5c": 0.0002778549597110308,
  "byte_1e": 0.0004167824395665463,
  "byte_9d": 0.0002778549597110308,
  "byte_44": 0.0002778549597110308,
  "byte_12": 0.0005557099194220616,
  "byte_cf": 0.0002778549597110308,
  "byte_7a": 0.0006946373992775772,
  "byte_71": 0.0002778549597110308,
  "byte_39": 0.0002778549597110308,
  "byte_ac": 0.0002778549597110308,
  "byte_f1": 0.0004167824395665463,
  "byte_a3": 0.0004167824395665463,
  "byte_1b": 0.0011114198388441233,
  "byte_d3": 0.0005557099194220616,
  "byte_c3": 0.0002778549597110308,
  "byte_ad": 0.0004167824395665463,
  "byte_b0": 0.0002778549597110308,
  "byte_aa": 0.0004167824395665463,
  "byte_2b": 0.0004167824395665463,
  "byte_c4": 0.0002778549597110308,
  "byte_28": 0.0002778549597110308,
  "byte_5a": 0.0002778549597110308,
  "byte_4d": 0.0002778549597110308,
  "byte_ef": 0.0002778549597110308,
  "byte_2a": 0.0001389274798555154,
  "byte_4e": 0.0002778549597110308,
  "byte_c1": 0.0001389274798555154,
  "byte_9a": 0.0001389274798555154,
  "byte_fe": 0.0005557099194220616,
  "byte_38": 0.0001389274798555154,
  "byte_7e": 0.0001389274798555154,
  "byte_6e": 0.0001389274798555154,
  "byte_b9": 0.0001389274798555154,
  "byte_4a": 0.0001389274798555154,
  "byte_ee": 0.0001389274798555154,
  "byte_e6": 0.0001389274798555154,
  "byte_3f": 0.0001389274798555154,
  "byte_26": 0.0001389274798555154,
  "byte_65": 0.0001389274798555154,
  "byte_df": 0.0001389274798555154,
  "byte_78": 0.0001389274798555154,
  "byte_f9": 0.0001389274798555154,
  "byte_e9": 0.0001389274798555154,
  "byte_29": 0.0001389274798555154,
  "num_nodes": 235,
  "num_edges": 186,
  "avg_degree": 1.5829787234042554,
  "density": 0.0033824331696672124,
  "connected_components": 62,
  "avg_clustering": 0.0,
  "timeline_sequence": [],
  "sourcecode": "pragma solidity 0.5.4; /*\n\n___________________________________________________________________\n  _      _                                        ______           \n  |  |  /          /                                /              \n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\n  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\n\n\n .----------------.   .----------------.   .----------------.   .----------------. \n| .--------------. | | .--------------. | | .--------------. | | .--------------. |\n| |     _____    | | | |   ______     | | | | _____  _____ | | | |  ____  ____  | |\n| |    |_   _|   | | | |  |_   __ \\   | | | ||_   _||_   _|| | | | |_  _||_  _| | |\n| |      | |     | | | |    | |__) |  | | | |  | |    | |  | | | |   \\ \\  / /   | |\n| |      | |     | | | |    |  ___/   | | | |  | '    ' |  | | | |    > `' <    | |\n| |     _| |_    | | | |   _| |_      | | | |   \\ `--' /   | | | |  _/ /'`\\ \\_  | |\n| |    |_____|   | | | |  |_____|     | | | |    `.__.'    | | | | |____||____| | |\n| |              | | | |              | | | |              | | | |              | |\n| '--------------' | | '--------------' | | '--------------' | | '--------------' |\n '----------------'   '----------------'   '----------------'   '----------------' \n\n  \n// ----------------------------------------------------------------------------\n// 'IPUX' Token contract with following features\n//      => ERC20 Compliance\n//      => Higher degree of control by owner - safeguard functionality\n//      => selfdestruct ability by owner\n//      => SafeMath implementation \n//      => Burnable and minting\n//      => air drop\n//\n// Name        : IPUX token\n// Symbol      : IPUX\n// Total supply: 1,000,000,000 (1 Billion)\n// Decimals    : 18\n//\n// Copyright (c) 2019 TradeWeIPUX Limited ( https://ipux.io )\n// Contract designed by EtherAuthority ( https://EtherAuthority.io )\n// ----------------------------------------------------------------------------\n  \n*/ \n\n//*******************************************************************//\n//------------------------ SafeMath Library -------------------------//\n//*******************************************************************//\n    /**\n     * @title SafeMath\n     * @dev Math operations with safety checks that throw on error\n     */\n    library SafeMath {\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n      }\n    \n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n      }\n    \n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n      }\n    \n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n      }\n    }\n\n\n//*******************************************************************//\n//------------------ Contract to Manage Ownership -------------------//\n//*******************************************************************//\n    \n    contract owned {\n        address payable public owner;\n        \n         constructor () public {\n            owner = msg.sender;\n        }\n    \n        modifier onlyOwner {\n            require(msg.sender == owner);\n            _;\n        }\n    \n        function transferOwnership(address payable newOwner) onlyOwner public {\n            owner = newOwner;\n        }\n    }\n    \n \n\n//***************************************************************//\n//------------------ ERC20 Standard Template -------------------//\n//***************************************************************//\n    \n    contract TokenERC20 {\n        // Public variables of the token\n        using SafeMath for uint256;\n        string public name;\n        string public symbol;\n        uint256 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it\n        uint256 public totalSupply;\n        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\n        address public icoContractAddress;\n    \n        // This creates an array with all balances\n        mapping (address => uint256) public balanceOf;\n        mapping (address => mapping (address => uint256)) public allowance;\n    \n        // This generates a public event on the blockchain that will notify clients\n        event Transfer(address indexed from, address indexed to, uint256 value);\n    \n        // This notifies clients about the amount burnt\n        event Burn(address indexed from, uint256 value);\n    \n        /**\n         * Constrctor function\n         *\n         * Initializes contract with initial supply tokens to the creator of the contract\n         */\n        constructor (\n            uint256 initialSupply,\n            string memory tokenName,\n            string memory tokenSymbol,\n            address _icoContractAddress\n        ) public {\n            \n            totalSupply = initialSupply * (10**decimals);         // Update total supply with the decimal amount\n            uint256 tokensReserved  = 800000000 * (10**decimals); // 800 Million tokens will remain in the contract\n            uint256 tokensCrowdsale = 200000000 * (10**decimals); // 200 million tokens will be sent to ICO contract for public ICO\n            \n            balanceOf[address(this)] = tokensReserved;          \n            balanceOf[_icoContractAddress] = tokensCrowdsale;\n            \n            name = tokenName;                                   // Set the name for display purposes\n            symbol = tokenSymbol;                               // Set the symbol for display purposes\n            icoContractAddress = _icoContractAddress;           // set ICO contract address\n            \n            emit Transfer(address(0), address(this), tokensReserved);// Emit event to log this transaction\n            emit Transfer(address(0), _icoContractAddress, tokensCrowdsale);// Emit event to log this transaction\n    \n        }\n    \n        /**\n         * Internal transfer, only can be called by this contract\n         */\n        function _transfer(address _from, address _to, uint _value) internal {\n            require(!safeguard);\n            // Prevent transfer to 0x0 address. Use burn() instead\n            require(_to != address(0x0));\n            // Check if the sender has enough\n            require(balanceOf[_from] >= _value);\n            // Check for overflows\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n            // Save this for an assertion in the future\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n            // Subtract from the sender\n            balanceOf[_from] = balanceOf[_from].sub(_value);\n            // Add the same to the recipient\n            balanceOf[_to] = balanceOf[_to].add(_value);\n            emit Transfer(_from, _to, _value);\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n        }\n    \n        /**\n         * Transfer tokens\n         *\n         * Send `_value` tokens to `_to` from your account\n         *\n         * @param _to The address of the recipient\n         * @param _value the amount to send\n         */\n        function transfer(address _to, uint256 _value) public returns (bool success) {\n            _transfer(msg.sender, _to, _value);\n            return true;\n        }\n    \n        /**\n         * Transfer tokens from other address\n         *\n         * Send `_value` tokens to `_to` in behalf of `_from`\n         *\n         * @param _from The address of the sender\n         * @param _to The address of the recipient\n         * @param _value the amount to send\n         */\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n            _transfer(_from, _to, _value);\n            return true;\n        }\n    \n        /**\n         * Set allowance for other address\n         *\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n         *\n         * @param _spender The address authorized to spend\n         * @param _value the max amount they can spend\n         */\n        function approve(address _spender, uint256 _value) public\n            returns (bool success) {\n            require(!safeguard);\n            allowance[msg.sender][_spender] = _value;\n            return true;\n        }\n    \n    \n        /**\n         * Destroy tokens\n         *\n         * Remove `_value` tokens from the system irreversibly\n         *\n         * @param _value the amount of money to burn\n         */\n        function burn(uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n            emit Burn(msg.sender, _value);\n            return true;\n        }\n    \n        /**\n         * Destroy tokens from other account\n         *\n         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n         *\n         * @param _from the address of the sender\n         * @param _value the amount of money to burn\n         */\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n            emit  Burn(_from, _value);\n            return true;\n        }\n        \n    }\n    \n//****************************************************************************//\n//---------------------  IPUX MAIN CODE STARTS HERE ---------------------//\n//****************************************************************************//\n    \n    contract IPUXtoken is owned, TokenERC20 {\n        \n\n        /*********************************/\n        /* Code for the ERC20 IPUX Token */\n        /*********************************/\n    \n        /* Public variables of the token */\n        string private tokenName = \"IPUX Token\";\n        string private tokenSymbol = \"IPUX\";\n        uint256 private initialSupply = 1000000000;  //1 Billion\n        \n        \n        \n        /* Records for the fronzen accounts */\n        mapping (address => bool) public frozenAccount;\n        \n        /* This generates a public event on the blockchain that will notify clients */\n        event FrozenFunds(address target, bool frozen);\n    \n        /* Initializes contract with initial supply tokens to the creator of the contract */\n        constructor (address icoContractAddress) TokenERC20(initialSupply, tokenName, tokenSymbol, icoContractAddress) public {\n            \n        }\n\n        /* Internal transfer, only can be called by this contract */\n        function _transfer(address _from, address _to, uint _value) internal {\n            require(!safeguard);\n            require (_to != address(0x0));                      // Prevent transfer to 0x0 address. Use burn() instead\n            require (balanceOf[_from] >= _value);               // Check if the sender has enough\n            require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n            require(!frozenAccount[_from]);                     // Check if sender is frozen\n            require(!frozenAccount[_to]);                       // Check if recipient is frozen\n            balanceOf[_from] = balanceOf[_from].sub(_value);    // Subtract from the sender\n            balanceOf[_to] = balanceOf[_to].add(_value);        // Add the same to the recipient\n            emit Transfer(_from, _to, _value);\n        }\n        \n        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n        /// @param target Address to be frozen\n        /// @param freeze either to freeze it or not\n        function freezeAccount(address target, bool freeze) onlyOwner public {\n                frozenAccount[target] = freeze;\n            emit  FrozenFunds(target, freeze);\n        }\n        \n        /// @notice Create `mintedAmount` tokens and send it to `target`\n        /// @param target Address to receive the tokens\n        /// @param mintedAmount the amount of tokens it will receive\n        function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n            balanceOf[target] = balanceOf[target].add(mintedAmount);\n            totalSupply = totalSupply.add(mintedAmount);\n            emit Transfer(address(0), target, mintedAmount);\n        }\n\n          \n        //Just in rare case, owner wants to transfer Ether from contract to owner address\n        function manualWithdrawEther()onlyOwner public{\n            address(owner).transfer(address(this).balance);\n        }\n        \n        function manualWithdrawTokens(uint256 tokenAmount) public onlyOwner{\n            // no need for overflow checking as that will be done in transfer function\n            _transfer(address(this), owner, tokenAmount);\n        }\n        \n        //selfdestruct function. just in case owner decided to destruct this contract.\n        function destructContract()onlyOwner public{\n            selfdestruct(owner);\n        }\n        \n        /**\n         * Change safeguard status on or off\n         *\n         * When safeguard is true, then all the non-owner functions will stop working.\n         * When safeguard is false, then all the functions will resume working back again!\n         */\n        function changeSafeguardStatus() onlyOwner public{\n            if (safeguard == false){\n                safeguard = true;\n            }\n            else{\n                safeguard = false;    \n            }\n        }\n        \n        /********************************/\n        /*    Code for the Air drop     */\n        /********************************/\n        \n        /**\n         * Run an Air-Drop\n         *\n         * It requires an array of all the addresses and amount of tokens to distribute\n         * It will only process first 150 recipients. That limit is fixed to prevent gas limit\n         */\n        function airdrop(address[] memory recipients,uint tokenAmount) public onlyOwner {\n            uint256 addressCount = recipients.length;\n            require(addressCount <= 150);\n            for(uint i = 0; i < addressCount; i++)\n            {\n                  //This will loop through all the recipients and send them the specified tokens\n                  _transfer(address(this), recipients[i], tokenAmount);\n            }\n        }\n\n}"
}