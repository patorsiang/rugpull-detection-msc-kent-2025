{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP11 DUP2 MSTORE PUSH1 ADD DUP10 DUP2 MSTORE PUSH1 ADD DUP9 DUP2 MSTORE PUSH1 ADD DUP8 DUP2 MSTORE PUSH1 ADD DUP7 DUP2 MSTORE PUSH1 ADD DUP6 DUP2 MSTORE PUSH1 ADD DUP5 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD DUP4 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP10 POP POP POP POP POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 EXP DUP10 MUL SWAP9 POP PUSH1 PUSH1 DUP12 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SWAP4 POP DUP4 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH2 DUP11 DUP13 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP3 POP PUSH2 DUP4 DUP11 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP PUSH2 DUP7 DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP DUP2 DUP5 PUSH1 ADD DUP2 SWAP1 SSTORE POP PUSH1 SLOAD DUP8 MUL DUP5 PUSH1 ADD DUP2 SWAP1 SSTORE POP DUP1 DUP5 PUSH1 ADD DUP2 SWAP1 SSTORE POP DUP6 DUP5 PUSH1 ADD DUP2 SWAP1 SSTORE POP PUSH1 DUP5 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP TIMESTAMP DUP5 PUSH1 ADD DUP2 SWAP1 SSTORE POP TIMESTAMP DUP5 PUSH1 ADD DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 ADD SWAP2 SWAP1 POP SSTORE POP PUSH2 DUP10 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 PUSH1 PUSH1 DUP14 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP13 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 SWAP5 POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SWAP5 POP PUSH1 SWAP6 POP DUP5 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP DUP5 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI TIMESTAMP SWAP4 POP PUSH2 DUP6 PUSH1 ADD SLOAD DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP3 POP PUSH2 PUSH1 SLOAD DUP5 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP PUSH1 DUP3 LT ISZERO ISZERO PUSH2 JUMPI PUSH2 DUP6 PUSH1 ADD SLOAD DUP7 PUSH1 ADD SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP DUP1 DUP3 GT ISZERO PUSH2 JUMPI DUP1 DUP6 PUSH1 ADD SLOAD MUL SWAP6 POP PUSH2 JUMP JUMPDEST DUP2 DUP6 PUSH1 ADD SLOAD MUL SWAP6 POP JUMPDEST JUMPDEST JUMPDEST POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP3 GT DUP1 ISZERO PUSH2 JUMPI POP DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP5 DUP5 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP POP PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP DUP1 PUSH1 ADD SLOAD SWAP1 DUP1 PUSH1 ADD SLOAD SWAP1 DUP1 PUSH1 ADD SLOAD SWAP1 DUP1 PUSH1 ADD SLOAD SWAP1 DUP1 PUSH1 ADD SLOAD SWAP1 DUP1 PUSH1 ADD SLOAD SWAP1 DUP1 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 DUP1 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 DUP1 PUSH1 ADD SLOAD SWAP1 POP DUP10 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SWAP6 POP DUP6 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP DUP6 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP SWAP5 POP PUSH2 DUP7 PUSH1 ADD SLOAD DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP4 POP PUSH2 PUSH1 SLOAD DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP3 POP PUSH1 DUP4 LT ISZERO ISZERO PUSH2 JUMPI PUSH2 DUP7 PUSH1 ADD SLOAD DUP8 PUSH1 ADD SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP PUSH1 SWAP1 POP DUP2 DUP4 GT ISZERO PUSH2 JUMPI DUP2 DUP7 PUSH1 ADD SLOAD MUL SWAP1 POP DUP6 PUSH1 ADD SLOAD DUP7 PUSH1 ADD DUP2 SWAP1 SSTORE POP DUP5 DUP7 PUSH1 ADD DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST DUP3 DUP7 PUSH1 ADD SLOAD MUL SWAP1 POP PUSH2 DUP4 DUP8 PUSH1 ADD SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST DUP7 PUSH1 ADD DUP2 SWAP1 SSTORE POP PUSH2 PUSH2 DUP8 PUSH1 ADD SLOAD DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST DUP8 PUSH1 ADD SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST DUP7 PUSH1 ADD DUP2 SWAP1 SSTORE POP JUMPDEST DUP6 PUSH1 ADD SLOAD DUP7 PUSH1 ADD SLOAD EQ ISZERO PUSH2 JUMPI PUSH1 DUP7 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 SWAP7 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP7 POP JUMPDEST POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 DUP2 DUP4 MUL SWAP1 POP PUSH1 DUP4 EQ DUP1 PUSH2 JUMPI POP DUP2 DUP4 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 ADD SWAP1 POP DUP3 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0x4f UNKNOWN_0x5f DUP4 SWAP14 PUSH12 OR UNKNOWN_0xd5 UNKNOWN_0xda POP UNKNOWN_0xee INVALID_0x7e",
  "opcode_entropy": 4.759825270121187,
  "opcode_count": 2344,
  "unique_opcodes": 71,
  "byte_entropy": 4.972940249719673,
  "byte_60": 0.07853658536585366,
  "byte_40": 0.009268292682926829,
  "byte_52": 0.014634146341463415,
  "byte_36": 0.0004878048780487805,
  "byte_15": 0.021463414634146343,
  "byte_61": 0.03853658536585366,
  "byte_00": 0.042682926829268296,
  "byte_d9": 0.0004878048780487805,
  "byte_57": 0.014390243902439025,
  "byte_35": 0.002926829268292683,
  "byte_7c": 0.0014634146341463415,
  "byte_01": 0.042926829268292686,
  "byte_90": 0.04902439024390244,
  "byte_04": 0.00975609756097561,
  "byte_63": 0.01024390243902439,
  "byte_ff": 0.23926829268292682,
  "byte_16": 0.02048780487804878,
  "byte_80": 0.033414634146341465,
  "byte_18": 0.0004878048780487805,
  "byte_0d": 0.001951219512195122,
  "byte_dd": 0.0004878048780487805,
  "byte_14": 0.004878048780487805,
  "byte_de": 0.00024390243902439024,
  "byte_27": 0.00024390243902439024,
  "byte_9f": 0.0007317073170731707,
  "byte_cf": 0.00024390243902439024,
  "byte_3e": 0.0007317073170731707,
  "byte_07": 0.0024390243902439024,
  "byte_31": 0.0004878048780487805,
  "byte_3c": 0.0004878048780487805,
  "byte_e5": 0.0004878048780487805,
  "byte_67": 0.0004878048780487805,
  "byte_30": 0.0007317073170731707,
  "byte_e3": 0.00024390243902439024,
  "byte_59": 0.000975609756097561,
  "byte_70": 0.0004878048780487805,
  "byte_4b": 0.0012195121951219512,
  "byte_6c": 0.00024390243902439024,
  "byte_02": 0.011463414634146341,
  "byte_ce": 0.00024390243902439024,
  "byte_a0": 0.0021951219512195124,
  "byte_82": 0.00853658536585366,
  "byte_7e": 0.0004878048780487805,
  "byte_45": 0.0004878048780487805,
  "byte_e9": 0.0004878048780487805,
  "byte_42": 0.0017073170731707317,
  "byte_54": 0.015365853658536585,
  "byte_94": 0.0014634146341463415,
  "byte_cb": 0.00024390243902439024,
  "byte_09": 0.004146341463414634,
  "byte_47": 0.00024390243902439024,
  "byte_7d": 0.00024390243902439024,
  "byte_95": 0.0014634146341463415,
  "byte_d8": 0.0004878048780487805,
  "byte_9b": 0.00024390243902439024,
  "byte_41": 0.0004878048780487805,
  "byte_ca": 0.00024390243902439024,
  "byte_9d": 0.0004878048780487805,
  "byte_76": 0.0004878048780487805,
  "byte_ea": 0.0004878048780487805,
  "byte_58": 0.0007317073170731707,
  "byte_03": 0.011463414634146341,
  "byte_a9": 0.0004878048780487805,
  "byte_05": 0.005365853658536586,
  "byte_9c": 0.0004878048780487805,
  "byte_bb": 0.0004878048780487805,
  "byte_ad": 0.0004878048780487805,
  "byte_c7": 0.00024390243902439024,
  "byte_b6": 0.00024390243902439024,
  "byte_d4": 0.00024390243902439024,
  "byte_32": 0.00024390243902439024,
  "byte_5d": 0.00024390243902439024,
  "byte_7f": 0.00024390243902439024,
  "byte_5b": 0.02902439024390244,
  "byte_f8": 0.0007317073170731707,
  "byte_51": 0.00975609756097561,
  "byte_a4": 0.00024390243902439024,
  "byte_bd": 0.00024390243902439024,
  "byte_f9": 0.00024390243902439024,
  "byte_68": 0.0004878048780487805,
  "byte_f4": 0.00024390243902439024,
  "byte_93": 0.000975609756097561,
  "byte_12": 0.000975609756097561,
  "byte_fd": 0.006585365853658536,
  "byte_34": 0.003658536585365854,
  "byte_f1": 0.0007317073170731707,
  "byte_3f": 0.00024390243902439024,
  "byte_56": 0.015121951219512195,
  "byte_81": 0.026829268292682926,
  "byte_20": 0.020731707317073172,
  "byte_91": 0.01926829268292683,
  "byte_50": 0.04024390243902439,
  "byte_f3": 0.0034146341463414634,
  "byte_1a": 0.0004878048780487805,
  "byte_3b": 0.0004878048780487805,
  "byte_43": 0.00024390243902439024,
  "byte_64": 0.0004878048780487805,
  "byte_b4": 0.0007317073170731707,
  "byte_73": 0.01097560975609756,
  "byte_b5": 0.0004878048780487805,
  "byte_08": 0.0031707317073170734,
  "byte_55": 0.005609756097560975,
  "byte_5f": 0.0004878048780487805,
  "byte_6d": 0.0004878048780487805,
  "byte_88": 0.000975609756097561,
  "byte_d5": 0.0004878048780487805,
  "byte_79": 0.00024390243902439024,
  "byte_83": 0.007317073170731708,
  "byte_10": 0.0014634146341463415,
  "byte_1d": 0.0004878048780487805,
  "byte_84": 0.003902439024390244,
  "byte_1f": 0.000975609756097561,
  "byte_4a": 0.0004878048780487805,
  "byte_0a": 0.006585365853658536,
  "byte_19": 0.000975609756097561,
  "byte_92": 0.002926829268292683,
  "byte_6b": 0.0007317073170731707,
  "byte_17": 0.0012195121951219512,
  "byte_b8": 0.00024390243902439024,
  "byte_ed": 0.00024390243902439024,
  "byte_3d": 0.0004878048780487805,
  "byte_0c": 0.0014634146341463415,
  "byte_8a": 0.000975609756097561,
  "byte_89": 0.000975609756097561,
  "byte_87": 0.0017073170731707317,
  "byte_86": 0.0034146341463414634,
  "byte_85": 0.0031707317073170734,
  "byte_99": 0.0004878048780487805,
  "byte_a7": 0.00024390243902439024,
  "byte_be": 0.00024390243902439024,
  "byte_c8": 0.0004878048780487805,
  "byte_d0": 0.00024390243902439024,
  "byte_c4": 0.00024390243902439024,
  "byte_25": 0.00024390243902439024,
  "byte_06": 0.004634146341463414,
  "byte_33": 0.001951219512195122,
  "byte_98": 0.0004878048780487805,
  "byte_8b": 0.0004878048780487805,
  "byte_1e": 0.00024390243902439024,
  "byte_44": 0.00024390243902439024,
  "byte_8c": 0.0007317073170731707,
  "byte_0f": 0.007804878048780488,
  "byte_6e": 0.0007317073170731707,
  "byte_ee": 0.0007317073170731707,
  "byte_bc": 0.0017073170731707317,
  "byte_8d": 0.0004878048780487805,
  "byte_11": 0.0017073170731707317,
  "byte_6f": 0.00024390243902439024,
  "byte_24": 0.00024390243902439024,
  "byte_e4": 0.00024390243902439024,
  "byte_f2": 0.00024390243902439024,
  "byte_0b": 0.00024390243902439024,
  "byte_c6": 0.0004878048780487805,
  "byte_5a": 0.00024390243902439024,
  "byte_0e": 0.0017073170731707317,
  "byte_4d": 0.00024390243902439024,
  "byte_3a": 0.0004878048780487805,
  "byte_96": 0.0004878048780487805,
  "byte_fe": 0.0004878048780487805,
  "byte_97": 0.00024390243902439024,
  "byte_b1": 0.00024390243902439024,
  "byte_d2": 0.00024390243902439024,
  "byte_a1": 0.00024390243902439024,
  "byte_65": 0.00024390243902439024,
  "byte_62": 0.00024390243902439024,
  "byte_7a": 0.0007317073170731707,
  "byte_72": 0.00024390243902439024,
  "byte_4f": 0.00024390243902439024,
  "byte_2c": 0.00024390243902439024,
  "byte_b7": 0.00024390243902439024,
  "byte_d1": 0.00024390243902439024,
  "byte_da": 0.00024390243902439024,
  "byte_69": 0.00024390243902439024,
  "byte_9e": 0.00024390243902439024,
  "byte_e6": 0.00024390243902439024,
  "byte_29": 0.00024390243902439024,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 9,
  "event_nums": 0,
  "creation_block": 7120294,
  "creation_timestamp": 1548356545,
  "life_time": 59524.0,
  "duration_seconds": 1040326.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.00015119697606047879,
  "avg_gas_limit": 1079732.111111111,
  "std_gas_limit": 2331444.078006278,
  "avg_gas_used": 232984.0,
  "std_gas_used": 376016.75861441187,
  "avg_gas_price": 4555555555.555555,
  "std_gas_price": 3095197394.929804,
  "locktokens_num": 3,
  "transfer_num": 3,
  "unlocktokens_num": 2,
  "timeline_sequence": [
    [
      7120294,
      1548356545,
      1,
      37,
      0,
      1271663,
      2000000000,
      0,
      1,
      6943024,
      1271663,
      16000609
    ],
    [
      7133531,
      1548582802,
      17,
      26,
      0,
      247234,
      2000000000,
      0,
      1,
      1364069,
      247234,
      15987372
    ],
    [
      7133544,
      1548583158,
      18,
      76,
      0,
      56118,
      2000000000,
      0,
      1,
      3916072,
      28014,
      15987359
    ],
    [
      7159289,
      1549035542,
      56,
      104,
      0,
      95791,
      10000000000,
      0,
      1,
      6809105,
      95791,
      15961614
    ],
    [
      7159298,
      1549035670,
      57,
      82,
      0,
      56118,
      10000000000,
      0,
      1,
      4838385,
      28014,
      15961605
    ],
    [
      7179738,
      1549395499,
      67,
      44,
      0,
      202426,
      2000000000,
      0,
      1,
      3907638,
      202426,
      15941165
    ],
    [
      7179803,
      1549396525,
      70,
      85,
      0,
      172426,
      4000000000,
      0,
      1,
      5692875,
      172426,
      15941100
    ],
    [
      7179805,
      1549396580,
      0,
      48,
      0,
      23178,
      4000000000,
      0,
      1,
      1913622,
      23178,
      15941098
    ],
    [
      7179818,
      1549396871,
      1,
      2,
      0,
      7592635,
      5000000000,
      0,
      1,
      371897,
      28110,
      15941085
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.17;\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\ncontract ERC20 {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\ncontract owlockups {\n    using SafeMath for uint;\n    \n    string public symbol = \"OWTL\";\n    uint256 public decimals = 18;\n    uint256 public totalSupply;\n    uint256 public totalAvailable;\n    uint public totalAddress;\n    \n    \n    address public admin;\n    uint public _lockupBaseTime = 1 days;\n    address public tokenAddress;\n    \n    modifier onlyOwner {\n        require(msg.sender == admin);\n        _;\n    }\n    \n    mapping ( address => uint256 ) public balanceOf;\n    mapping ( address => lockupMeta ) public lockups;\n    \n    struct lockupMeta {\n        uint256 amount;\n        uint256 cycle_amount;\n        uint cycle;\n        uint claimed_cycle;\n        uint duration;\n        uint last_withdraw;\n        bool active;\n        bool claimed;\n        uint time;\n    }\n    \n    function owlockups(address _address) public {\n        tokenAddress = _address;\n        admin = msg.sender;\n    }\n    \n    function setAdmin(address _newAdmin) public onlyOwner {\n        admin = _newAdmin;\n    }\n    \n    function lockTokens(\n        address _address, \n        uint256 _value, \n        uint _percentage, \n        uint _duration, \n        uint _cycle\n    ) public onlyOwner returns (bool success) {\n        _value =  _value * 10**uint(decimals);\n        lockupMeta storage lm = lockups[_address];\n        require(!lm.active);\n        \n        uint256 _amount = (_value.mul(_percentage)).div(100);\n        uint256 _remaining = _value.sub(_amount);\n        uint256 _cycle_amount = _remaining.div(_cycle);\n        \n        lm.amount = _remaining;\n        lm.duration = _duration * _lockupBaseTime;\n        lm.cycle_amount = _cycle_amount;\n        lm.cycle = _cycle;\n        lm.active = true;\n        lm.last_withdraw = now;\n        lm.time = now;\n        \n        totalAddress++;\n        totalSupply = totalSupply.add(_value);\n        totalAvailable = totalAvailable.add(_amount);\n        balanceOf[_address] = balanceOf[_address].add(_amount);\n        \n        success = true;\n    }\n    \n    function unlockTokens() public returns (bool success) {\n        lockupMeta storage lm = lockups[msg.sender];\n        require(\n            lm.active \n            && !lm.claimed\n        );\n        \n        uint _curTime = now;\n        uint _diffTime = _curTime.sub(lm.last_withdraw);\n        uint _cycles = (_diffTime.div(_lockupBaseTime));\n        \n        if(_cycles >= 1){\n            uint remaining_cycle = lm.cycle.sub(lm.claimed_cycle);\n            uint256 _amount = 0;\n            if(_cycles > remaining_cycle){\n                _amount = lm.cycle_amount * remaining_cycle;\n                lm.claimed_cycle = lm.cycle;\n                lm.last_withdraw = _curTime;\n            } else {\n                _amount = lm.cycle_amount * _cycles;\n                lm.claimed_cycle = lm.claimed_cycle.add(_cycles);\n                lm.last_withdraw = lm.last_withdraw.add(_cycles.mul(lm.duration));\n            }\n            \n            if(lm.claimed_cycle == lm.cycle){\n                lm.claimed = true;\n            }\n            \n            totalAvailable = totalAvailable.add(_amount);\n            balanceOf[msg.sender] = balanceOf[msg.sender].add(_amount);\n            \n            success = true;\n            \n        } else {\n            success = false;\n        }\n    }\n    \n    function availableTokens(address _address) public view returns (uint256 _amount) {\n        lockupMeta storage lm = lockups[_address];\n        \n        _amount = 0;\n        \n        if(lm.active && !lm.claimed){\n            uint _curTime = now;\n            uint _diffTime = _curTime.sub(lm.last_withdraw);\n            uint _cycles = (_diffTime.div(_lockupBaseTime));\n            \n            if(_cycles >= 1){\n                uint remaining_cycle = lm.cycle.sub(lm.claimed_cycle);\n                \n                if(_cycles > remaining_cycle){\n                    _amount = lm.cycle_amount * remaining_cycle;\n                } else {\n                    _amount = lm.cycle_amount * _cycles;\n                }\n                \n            }\n        }\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(\n            _value > 0\n            && balanceOf[msg.sender] >= _value\n        );\n        \n        totalSupply = totalSupply.sub(_value);\n        totalAvailable = totalAvailable.sub(_value);\n        balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);\n        ERC20(tokenAddress).transfer(_to, _value);\n        \n        return true;\n    }\n}"
}