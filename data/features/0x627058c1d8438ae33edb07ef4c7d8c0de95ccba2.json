{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP8 DUP9 MSTORE PUSH1 DUP9 ADD SWAP7 SWAP1 SWAP7 MSTORE DUP7 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE PUSH1 DUP7 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP6 ADD MSTORE PUSH1 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD DUP3 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH1 SLOAD PUSH1 SLOAD PUSH1 SLOAD PUSH1 SLOAD DUP8 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 DUP4 ADD SLOAD PUSH1 DUP5 ADD SLOAD PUSH1 DUP6 ADD SLOAD PUSH1 DUP7 ADD SLOAD PUSH1 SWAP1 SWAP7 ADD SLOAD SWAP5 SWAP6 SWAP4 SWAP5 SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 AND DUP8 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 PUSH1 ADD SLOAD DUP2 SWAP1 DUP10 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SWAP3 POP DUP6 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP5 ISZERO ISZERO DUP1 PUSH2 JUMPI POP PUSH1 DUP4 PUSH1 ADD SLOAD GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP7 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP7 DUP9 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP9 ISZERO ISZERO PUSH2 JUMPI TIMESTAMP SWAP9 POP JUMPDEST DUP9 DUP4 SSTORE PUSH1 DUP4 ADD DUP9 SWAP1 SSTORE PUSH1 DUP4 ADD DUP8 SWAP1 SSTORE PUSH1 DUP4 ADD DUP7 SWAP1 SSTORE PUSH1 DUP4 ADD SLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP3 ADD DUP9 SWAP1 MSTORE MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP4 POP PUSH20 SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH20 PUSH4 SWAP1 SWAP2 DUP8 PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 SSTORE PUSH1 DUP4 ADD DUP6 SWAP1 SSTORE JUMPDEST POP POP PUSH1 PUSH1 DUP3 ADD SSTORE PUSH1 ADD DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 PUSH1 ADD SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP9 SWAP1 PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 DUP1 DUP3 ADD SLOAD PUSH1 DUP4 ADD SLOAD DUP5 MLOAD PUSH32 DUP2 MSTORE SWAP3 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE SWAP2 MLOAD SWAP1 SWAP12 POP PUSH20 SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP8 PUSH1 ADD SLOAD TIMESTAMP SUB SWAP7 POP DUP8 PUSH1 ADD SLOAD DUP8 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP6 POP DUP6 DUP9 PUSH1 ADD SLOAD GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP8 PUSH1 ADD SLOAD DUP9 PUSH1 ADD SLOAD DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 POP DUP8 PUSH1 ADD SLOAD DUP9 PUSH1 ADD SLOAD DUP7 MUL EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP1 SWAP5 ADD SWAP4 JUMPDEST PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 MLOAD PUSH20 SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP10 ADD SLOAD SWAP1 SWAP5 POP DUP5 GT ISZERO PUSH2 JUMPI DUP8 PUSH1 ADD SLOAD SWAP4 POP JUMPDEST DUP4 PUSH20 PUSH4 SWAP1 SWAP2 DUP11 PUSH1 ADD SLOAD PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP10 ADD SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP3 ADD DUP4 SWAP1 MSTORE MLOAD SWAP2 SWAP5 POP PUSH20 SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP10 ADD SSTORE PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP13 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD DUP8 SWAP1 MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP4 POP DUP4 SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP3 ADD DUP6 SWAP1 MSTORE MLOAD PUSH20 SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS DELEGATECALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 SSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP12 AND DUP2 MSTORE PUSH1 DUP2 ADD DUP6 SWAP1 MSTORE DUP2 MLOAD PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD DUP2 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 SSTORE PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 SWAP2 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLER PUSH2 JUMP JUMPDEST POP JUMP STOP LOG1 PUSH6 SHA3 DUP8 UNKNOWN_0xe8 UNKNOWN_0x23 SGT PUSH21 UNKNOWN_0xe6 MULMOD CODECOPY UNKNOWN_0xef INVALID_0x68",
  "opcode_entropy": 4.846080912504935,
  "opcode_count": 2395,
  "unique_opcodes": 77,
  "byte_entropy": 5.845012842372423,
  "byte_60": 0.11723581607959128,
  "byte_80": 0.04329120731379403,
  "byte_40": 0.01156224791610648,
  "byte_52": 0.0225867168593708,
  "byte_04": 0.012100026888948642,
  "byte_36": 0.00026888948642108095,
  "byte_10": 0.0029577843506318905,
  "byte_61": 0.03414896477547728,
  "byte_00": 0.08577574616832481,
  "byte_c1": 0.0016133369185264857,
  "byte_57": 0.024200053777897284,
  "byte_63": 0.007260016133369185,
  "byte_ff": 0.019091153535896747,
  "byte_e0": 0.0018822264049475664,
  "byte_02": 0.016402258671685935,
  "byte_0a": 0.010486689970422156,
  "byte_35": 0.006722237160527024,
  "byte_16": 0.015864479698843775,
  "byte_26": 0.0005377789728421619,
  "byte_49": 0.0005377789728421619,
  "byte_3a": 0.0010755579456843238,
  "byte_6f": 0.0010755579456843238,
  "byte_81": 0.024200053777897284,
  "byte_14": 0.005377789728421619,
  "byte_c6": 0.0005377789728421619,
  "byte_27": 0.0010755579456843238,
  "byte_85": 0.0032266738370529714,
  "byte_44": 0.0032266738370529714,
  "byte_ee": 0.0008066684592632429,
  "byte_28": 0.0024200053777897286,
  "byte_24": 0.0034955633234740524,
  "byte_ad": 0.0005377789728421619,
  "byte_01": 0.04060231244958322,
  "byte_23": 0.0010755579456843238,
  "byte_6c": 0.0005377789728421619,
  "byte_d8": 0.00026888948642108095,
  "byte_5d": 0.0010755579456843238,
  "byte_54": 0.015326700726001613,
  "byte_78": 0.0008066684592632429,
  "byte_2a": 0.00026888948642108095,
  "byte_37": 0.0008066684592632429,
  "byte_8d": 0.0016133369185264857,
  "byte_a5": 0.0005377789728421619,
  "byte_cb": 0.0021511158913686476,
  "byte_5b": 0.032266738370529714,
  "byte_d3": 0.0005377789728421619,
  "byte_b1": 0.0008066684592632429,
  "byte_d1": 0.0008066684592632429,
  "byte_1f": 0.0008066684592632429,
  "byte_e8": 0.0005377789728421619,
  "byte_ce": 0.00026888948642108095,
  "byte_69": 0.00026888948642108095,
  "byte_9a": 0.0005377789728421619,
  "byte_41": 0.0005377789728421619,
  "byte_1d": 0.0008066684592632429,
  "byte_cf": 0.0005377789728421619,
  "byte_46": 0.0005377789728421619,
  "byte_3e": 0.0026888948642108095,
  "byte_d5": 0.0005377789728421619,
  "byte_5e": 0.0005377789728421619,
  "byte_dc": 0.0005377789728421619,
  "byte_fd": 0.018822264049475665,
  "byte_5f": 0.00026888948642108095,
  "byte_e6": 0.0008066684592632429,
  "byte_99": 0.0005377789728421619,
  "byte_e4": 0.0005377789728421619,
  "byte_8a": 0.0026888948642108095,
  "byte_a6": 0.0021511158913686476,
  "byte_f2": 0.0008066684592632429,
  "byte_82": 0.009680021511158914,
  "byte_f5": 0.0008066684592632429,
  "byte_51": 0.015057811239580532,
  "byte_cd": 0.0005377789728421619,
  "byte_e3": 0.0005377789728421619,
  "byte_8b": 0.0010755579456843238,
  "byte_f7": 0.0005377789728421619,
  "byte_e7": 0.00026888948642108095,
  "byte_7e": 0.00026888948642108095,
  "byte_03": 0.018015595590212423,
  "byte_0f": 0.0010755579456843238,
  "byte_34": 0.004033342296316214,
  "byte_15": 0.03495563323474052,
  "byte_d2": 0.00026888948642108095,
  "byte_50": 0.030115622479161063,
  "byte_ec": 0.0026888948642108095,
  "byte_a0": 0.009411132024737832,
  "byte_56": 0.009142242538316752,
  "byte_fa": 0.0008066684592632429,
  "byte_9f": 0.0008066684592632429,
  "byte_91": 0.014788921753159451,
  "byte_90": 0.0338800752890562,
  "byte_20": 0.016671148158107017,
  "byte_f3": 0.004571121269158376,
  "byte_2f": 0.0005377789728421619,
  "byte_38": 0.0010755579456843238,
  "byte_b4": 0.0005377789728421619,
  "byte_92": 0.010755579456843238,
  "byte_c3": 0.00026888948642108095,
  "byte_84": 0.0032266738370529714,
  "byte_97": 0.0005377789728421619,
  "byte_88": 0.0032266738370529714,
  "byte_96": 0.0016133369185264857,
  "byte_86": 0.006453347674105943,
  "byte_94": 0.0026888948642108095,
  "byte_c0": 0.00026888948642108095,
  "byte_83": 0.007528905619790266,
  "byte_df": 0.0013444474321054048,
  "byte_77": 0.00026888948642108095,
  "byte_f4": 0.0056466792148427,
  "byte_64": 0.0008066684592632429,
  "byte_a4": 0.0008066684592632429,
  "byte_c4": 0.00026888948642108095,
  "byte_29": 0.0005377789728421619,
  "byte_07": 0.0026888948642108095,
  "byte_4a": 0.0005377789728421619,
  "byte_0c": 0.0026888948642108095,
  "byte_6b": 0.0013444474321054048,
  "byte_5a": 0.0026888948642108095,
  "byte_8c": 0.0010755579456843238,
  "byte_b2": 0.00026888948642108095,
  "byte_bb": 0.0010755579456843238,
  "byte_0d": 0.004302231782737295,
  "byte_47": 0.00026888948642108095,
  "byte_d9": 0.0021511158913686476,
  "byte_4d": 0.0005377789728421619,
  "byte_1b": 0.0005377789728421619,
  "byte_0e": 0.0008066684592632429,
  "byte_2e": 0.0008066684592632429,
  "byte_33": 0.0026888948642108095,
  "byte_3b": 0.0032266738370529714,
  "byte_19": 0.0024200053777897286,
  "byte_17": 0.0018822264049475664,
  "byte_55": 0.005108900242000538,
  "byte_93": 0.0026888948642108095,
  "byte_7f": 0.0029577843506318905,
  "byte_1c": 0.00026888948642108095,
  "byte_3c": 0.0008066684592632429,
  "byte_67": 0.00026888948642108095,
  "byte_6e": 0.0005377789728421619,
  "byte_c5": 0.0005377789728421619,
  "byte_7d": 0.00026888948642108095,
  "byte_c2": 0.0024200053777897286,
  "byte_be": 0.00026888948642108095,
  "byte_b8": 0.00026888948642108095,
  "byte_43": 0.0005377789728421619,
  "byte_3d": 0.007528905619790266,
  "byte_45": 0.0005377789728421619,
  "byte_eb": 0.00026888948642108095,
  "byte_a1": 0.0008066684592632429,
  "byte_09": 0.006722237160527024,
  "byte_06": 0.004302231782737295,
  "byte_32": 0.00026888948642108095,
  "byte_05": 0.004571121269158376,
  "byte_87": 0.004302231782737295,
  "byte_08": 0.0026888948642108095,
  "byte_95": 0.0008066684592632429,
  "byte_89": 0.0013444474321054048,
  "byte_b3": 0.00026888948642108095,
  "byte_11": 0.0016133369185264857,
  "byte_2d": 0.0005377789728421619,
  "byte_42": 0.0010755579456843238,
  "byte_98": 0.0026888948642108095,
  "byte_66": 0.0013444474321054048,
  "byte_4f": 0.0018822264049475664,
  "byte_73": 0.0024200053777897286,
  "byte_b7": 0.0024200053777897286,
  "byte_75": 0.0018822264049475664,
  "byte_e1": 0.0021511158913686476,
  "byte_59": 0.0024200053777897286,
  "byte_0b": 0.0018822264049475664,
  "byte_70": 0.0005377789728421619,
  "byte_31": 0.0005377789728421619,
  "byte_30": 0.0005377789728421619,
  "byte_f1": 0.0005377789728421619,
  "byte_bd": 0.0013444474321054048,
  "byte_9b": 0.00026888948642108095,
  "byte_76": 0.00026888948642108095,
  "byte_fe": 0.0005377789728421619,
  "byte_bc": 0.0005377789728421619,
  "byte_9e": 0.0005377789728421619,
  "byte_58": 0.0008066684592632429,
  "byte_71": 0.00026888948642108095,
  "byte_e5": 0.00026888948642108095,
  "byte_fb": 0.00026888948642108095,
  "byte_a2": 0.0008066684592632429,
  "byte_a9": 0.0008066684592632429,
  "byte_9c": 0.0008066684592632429,
  "byte_d0": 0.0005377789728421619,
  "byte_72": 0.0008066684592632429,
  "byte_39": 0.0008066684592632429,
  "byte_5c": 0.00026888948642108095,
  "byte_25": 0.00026888948642108095,
  "byte_8f": 0.00026888948642108095,
  "byte_a3": 0.0010755579456843238,
  "byte_22": 0.0008066684592632429,
  "byte_f0": 0.00026888948642108095,
  "byte_ac": 0.00026888948642108095,
  "byte_53": 0.00026888948642108095,
  "byte_13": 0.0005377789728421619,
  "byte_da": 0.00026888948642108095,
  "byte_af": 0.00026888948642108095,
  "byte_18": 0.00026888948642108095,
  "byte_65": 0.00026888948642108095,
  "byte_62": 0.00026888948642108095,
  "byte_7a": 0.0005377789728421619,
  "byte_74": 0.00026888948642108095,
  "byte_c8": 0.00026888948642108095,
  "byte_ef": 0.00026888948642108095,
  "byte_68": 0.00026888948642108095,
  "byte_b6": 0.00026888948642108095,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 3,
  "event_nums": 2,
  "creation_block": 6399625,
  "creation_timestamp": 1537917862,
  "life_time": 2017.0,
  "duration_seconds": 28492.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.0014866204162537165,
  "avg_gas_limit": 2278518.0,
  "std_gas_limit": 3126459.9050942585,
  "avg_gas_used": 413596.0,
  "std_gas_used": 521011.83272743435,
  "avg_gas_price": 30000000000.0,
  "std_gas_price": 0.0,
  "allocateagentchanged_num": 2,
  "atinversebrah_num": 1,
  "setallocateagent_num": 2,
  "timeline_sequence": [
    [
      6399625,
      1537917862,
      50,
      13,
      0,
      6700000,
      30000000000,
      0,
      1,
      1888432,
      1150418,
      16721278
    ],
    [
      6401640,
      1537946293,
      67,
      32,
      0,
      67777,
      30000000000,
      0,
      1,
      898254,
      45185,
      16719263
    ],
    [
      6401642,
      1537946354,
      68,
      64,
      0,
      67777,
      30000000000,
      0,
      1,
      2718104,
      45185,
      16719261
    ]
  ],
  "sourcecode": "pragma solidity 0.4.24;\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * Safe unsigned safe math.\n *\n * https://blog.aragon.one/library-driven-development-in-solidity-2bebcaf88736#.750gwtwli\n *\n * Originally from https://raw.githubusercontent.com/AragonOne/zeppelin-solidity/master/contracts/SafeMathLib.sol\n *\n * Maintained here until merged to mainline zeppelin-solidity.\n *\n */\nlibrary SafeMathLibExt {\n\n    function times(uint a, uint b) public pure returns (uint) {\n        uint c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function divides(uint a, uint b) public pure returns (uint) {\n        assert(b > 0);\n        uint c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function minus(uint a, uint b) public pure returns (uint) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function plus(uint a, uint b) public pure returns (uint) {\n        uint c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n\ncontract Allocatable is Ownable {\n\n  /** List of agents that are allowed to allocate new tokens */\n    mapping (address => bool) public allocateAgents;\n\n    event AllocateAgentChanged(address addr, bool state  );\n\n  /**\n   * Owner can allow a crowdsale contract to allocate new tokens.\n   */\n    function setAllocateAgent(address addr, bool state) public onlyOwner  \n    {\n        allocateAgents[addr] = state;\n        emit AllocateAgentChanged(addr, state);\n    }\n\n    modifier onlyAllocateAgent() {\n        //Only crowdsale contracts are allowed to allocate new tokens\n        require(allocateAgents[msg.sender]);\n        _;\n    }\n}\n\n/**\n * Contract to enforce Token Vesting\n */\ncontract TokenVesting is Allocatable {\n\n    using SafeMathLibExt for uint;\n\n    address public crowdSaleTokenAddress;\n\n    /** keep track of total tokens yet to be released, \n     * this should be less than or equal to UTIX tokens held by this contract. \n     */\n    uint256 public totalUnreleasedTokens;\n\n    // default vesting parameters\n    uint256 private startAt = 0;\n    uint256 private cliff = 1;\n    uint256 private duration = 4; \n    uint256 private step = 300; //15778463;  //2592000;\n    bool private changeFreezed = false;\n\n    struct VestingSchedule {\n        uint256 startAt;\n        uint256 cliff;\n        uint256 duration;\n        uint256 step;\n        uint256 amount;\n        uint256 amountReleased;\n        bool changeFreezed;\n    }\n\n    mapping (address => VestingSchedule) public vestingMap;\n\n    event VestedTokensReleased(address _adr, uint256 _amount);\n    \n    constructor(address _tokenAddress) public {\n        \n        crowdSaleTokenAddress = _tokenAddress;\n    }\n\n    /** Modifier to check if changes to vesting is freezed  */\n    modifier changesToVestingFreezed(address _adr) {\n        require(vestingMap[_adr].changeFreezed);\n        _;\n    }\n\n    /** Modifier to check if changes to vesting is not freezed yet  */\n    modifier changesToVestingNotFreezed(address adr) {\n        require(!vestingMap[adr].changeFreezed); // if vesting not set then also changeFreezed will be false\n        _;\n    }\n\n    /** Function to set default vesting schedule parameters. */\n    function setDefaultVestingParameters(\n        uint256 _startAt, uint256 _cliff, uint256 _duration,\n        uint256 _step, bool _changeFreezed) public onlyAllocateAgent {\n\n        // data validation\n        require(_step != 0);\n        require(_duration != 0);\n        require(_cliff <= _duration);\n\n        startAt = _startAt;\n        cliff = _cliff;\n        duration = _duration; \n        step = _step;\n        changeFreezed = _changeFreezed;\n\n    }\n\n    /** Function to set vesting with default schedule. */\n    function setVestingWithDefaultSchedule(address _adr, uint256 _amount) \n    public \n    changesToVestingNotFreezed(_adr) onlyAllocateAgent {\n       \n        setVesting(_adr, startAt, cliff, duration, step, _amount, changeFreezed);\n    }    \n\n    /** Function to set/update vesting schedule. PS - Amount cannot be changed once set */\n    function setVesting(\n        address _adr,\n        uint256 _startAt,\n        uint256 _cliff,\n        uint256 _duration,\n        uint256 _step,\n        uint256 _amount,\n        bool _changeFreezed) \n    public changesToVestingNotFreezed(_adr) onlyAllocateAgent {\n\n        VestingSchedule storage vestingSchedule = vestingMap[_adr];\n\n        // data validation\n        require(_step != 0);\n        require(_amount != 0 || vestingSchedule.amount > 0);\n        require(_duration != 0);\n        require(_cliff <= _duration);\n\n        //if startAt is zero, set current time as start time.\n        if (_startAt == 0) \n            _startAt = block.timestamp;\n\n        vestingSchedule.startAt = _startAt;\n        vestingSchedule.cliff = _cliff;\n        vestingSchedule.duration = _duration;\n        vestingSchedule.step = _step;\n\n        // special processing for first time vesting setting\n        if (vestingSchedule.amount == 0) {\n            // check if enough tokens are held by this contract\n            ERC20 token = ERC20(crowdSaleTokenAddress);\n            require(token.balanceOf(this) >= totalUnreleasedTokens.plus(_amount));\n            totalUnreleasedTokens = totalUnreleasedTokens.plus(_amount);\n            vestingSchedule.amount = _amount; \n        }\n\n        vestingSchedule.amountReleased = 0;\n        vestingSchedule.changeFreezed = _changeFreezed;\n    }\n\n    function isVestingSet(address adr) public view returns (bool isSet) {\n        return vestingMap[adr].amount != 0;\n    }\n\n    function freezeChangesToVesting(address _adr) public changesToVestingNotFreezed(_adr) onlyAllocateAgent {\n        require(isVestingSet(_adr)); // first check if vesting is set\n        vestingMap[_adr].changeFreezed = true;\n    }\n\n    /** Release tokens as per vesting schedule, called by contributor  */\n    function releaseMyVestedTokens() public changesToVestingFreezed(msg.sender) {\n        releaseVestedTokens(msg.sender);\n    }\n\n    /** Release tokens as per vesting schedule, called by anyone  */\n    function releaseVestedTokens(address _adr) public changesToVestingFreezed(_adr) {\n        VestingSchedule storage vestingSchedule = vestingMap[_adr];\n        \n        // check if all tokens are not vested\n        require(vestingSchedule.amount.minus(vestingSchedule.amountReleased) > 0);\n        \n        // calculate total vested tokens till now\n        uint256 totalTime = block.timestamp - vestingSchedule.startAt;\n        uint256 totalSteps = totalTime / vestingSchedule.step;\n\n        // check if cliff is passed\n        require(vestingSchedule.cliff <= totalSteps);\n\n        uint256 tokensPerStep = vestingSchedule.amount / vestingSchedule.duration;\n        // check if amount is divisble by duration\n        if (tokensPerStep * vestingSchedule.duration != vestingSchedule.amount) tokensPerStep++;\n\n        uint256 totalReleasableAmount = tokensPerStep.times(totalSteps);\n\n        // handle the case if user has not claimed even after vesting period is over or amount was not divisible\n        if (totalReleasableAmount > vestingSchedule.amount) totalReleasableAmount = vestingSchedule.amount;\n\n        uint256 amountToRelease = totalReleasableAmount.minus(vestingSchedule.amountReleased);\n        vestingSchedule.amountReleased = vestingSchedule.amountReleased.plus(amountToRelease);\n\n        // transfer vested tokens\n        ERC20 token = ERC20(crowdSaleTokenAddress);\n        token.transfer(_adr, amountToRelease);\n        // decrement overall unreleased token count\n        totalUnreleasedTokens = totalUnreleasedTokens.minus(amountToRelease);\n        emit VestedTokensReleased(_adr, amountToRelease);\n    }\n\n    /**\n    * Allow to (re)set Token.\n    */\n    function setCrowdsaleTokenExtv1(address _token) public onlyAllocateAgent {       \n        crowdSaleTokenAddress = _token;\n    }\n}"
}