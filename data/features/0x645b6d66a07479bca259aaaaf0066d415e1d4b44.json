{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP5 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP5 GT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH2 DUP6 PUSH2 JUMP JUMPDEST JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP5 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP5 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP5 SWAP1 POP DUP1 PUSH20 AND PUSH4 CALLER DUP7 DUP7 PUSH1 MLOAD DUP5 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP DUP3 PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT ISZERO ISZERO PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 DUP3 ADD SWAP2 POP PUSH1 DUP2 ADD SWAP1 POP PUSH1 DUP4 SUB SWAP3 POP PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 DUP6 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP8 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE POP SWAP1 JUMP STOP LOG1 PUSH6 SHA3 PUSH24 UNKNOWN_0xc9 PC UNKNOWN_0xa5 UNKNOWN_0xb4 UNKNOWN_0xb4 UNKNOWN_0x5d JUMPI STOP UNKNOWN_0x29",
  "opcode_entropy": 4.642620765434124,
  "opcode_count": 2323,
  "unique_opcodes": 64,
  "byte_entropy": 4.531746512423195,
  "byte_60": 0.07210228463634458,
  "byte_40": 0.008803185914902536,
  "byte_52": 0.02263676378117795,
  "byte_04": 0.008593586250261999,
  "byte_36": 0.00020959966464053657,
  "byte_10": 0.0039823936281701946,
  "byte_61": 0.023684762104380634,
  "byte_00": 0.03730874030601551,
  "byte_a4": 0.0006287989939216097,
  "byte_57": 0.010479983232026828,
  "byte_35": 0.0031439949696080486,
  "byte_7c": 0.00041919932928107315,
  "byte_01": 0.03877593795849927,
  "byte_90": 0.03772793963529658,
  "byte_63": 0.005239991616013414,
  "byte_ff": 0.3401802557115909,
  "byte_16": 0.02389436176902117,
  "byte_80": 0.029553552714315656,
  "byte_06": 0.0006287989939216097,
  "byte_fd": 0.0031439949696080486,
  "byte_de": 0.0006287989939216097,
  "byte_03": 0.010270383567386292,
  "byte_14": 0.002305596311045902,
  "byte_a9": 0.0006287989939216097,
  "byte_09": 0.0006287989939216097,
  "byte_5e": 0.00041919932928107315,
  "byte_a7": 0.0006287989939216097,
  "byte_b3": 0.0006287989939216097,
  "byte_37": 0.0016767973171242926,
  "byte_18": 0.00020959966464053657,
  "byte_0d": 0.0010479983232026828,
  "byte_dd": 0.0012575979878432194,
  "byte_91": 0.017396772165164536,
  "byte_23": 0.0006287989939216097,
  "byte_b8": 0.00020959966464053657,
  "byte_72": 0.00041919932928107315,
  "byte_ba": 0.00041919932928107315,
  "byte_31": 0.00041919932928107315,
  "byte_3c": 0.00020959966464053657,
  "byte_e5": 0.0006287989939216097,
  "byte_67": 0.00041919932928107315,
  "byte_02": 0.005868790609935024,
  "byte_33": 0.0035631942988891218,
  "byte_70": 0.00041919932928107315,
  "byte_a0": 0.0006287989939216097,
  "byte_82": 0.012156780549151121,
  "byte_62": 0.0010479983232026828,
  "byte_95": 0.0006287989939216097,
  "byte_d8": 0.00020959966464053657,
  "byte_9b": 0.0006287989939216097,
  "byte_41": 0.00020959966464053657,
  "byte_af": 0.00041919932928107315,
  "byte_05": 0.002934395304967512,
  "byte_9c": 0.0006287989939216097,
  "byte_bb": 0.00020959966464053657,
  "byte_3d": 0.00020959966464053657,
  "byte_be": 0.00020959966464053657,
  "byte_45": 0.00041919932928107315,
  "byte_97": 0.00020959966464053657,
  "byte_ed": 0.00020959966464053657,
  "byte_3e": 0.0008383986585621463,
  "byte_34": 0.002305596311045902,
  "byte_5b": 0.019911968140850975,
  "byte_15": 0.013833577866275414,
  "byte_b4": 0.0006287989939216097,
  "byte_bc": 0.00020959966464053657,
  "byte_56": 0.009431984908824145,
  "byte_51": 0.010899182561307902,
  "byte_20": 0.03416474533640746,
  "byte_81": 0.02871515405575351,
  "byte_83": 0.00733598826241878,
  "byte_50": 0.03416474533640746,
  "byte_fc": 0.0008383986585621463,
  "byte_84": 0.0039823936281701946,
  "byte_e1": 0.0006287989939216097,
  "byte_1f": 0.0020959966464053656,
  "byte_29": 0.0006287989939216097,
  "byte_0a": 0.0018863969817648292,
  "byte_19": 0.0018863969817648292,
  "byte_92": 0.003353594634248585,
  "byte_f3": 0.002305596311045902,
  "byte_42": 0.0006287989939216097,
  "byte_77": 0.00041919932928107315,
  "byte_73": 0.01655837350660239,
  "byte_48": 0.00041919932928107315,
  "byte_c8": 0.0008383986585621463,
  "byte_c5": 0.00041919932928107315,
  "byte_d2": 0.00020959966464053657,
  "byte_46": 0.00020959966464053657,
  "byte_ea": 0.00041919932928107315,
  "byte_6d": 0.00020959966464053657,
  "byte_99": 0.00020959966464053657,
  "byte_0b": 0.0018863969817648292,
  "byte_c2": 0.0006287989939216097,
  "byte_4a": 0.00020959966464053657,
  "byte_e7": 0.00041919932928107315,
  "byte_2f": 0.00020959966464053657,
  "byte_7d": 0.0008383986585621463,
  "byte_f2": 0.0010479983232026828,
  "byte_a2": 0.00041919932928107315,
  "byte_1a": 0.00020959966464053657,
  "byte_93": 0.0006287989939216097,
  "byte_3f": 0.00041919932928107315,
  "byte_8a": 0.0006287989939216097,
  "byte_11": 0.0027247956403269754,
  "byte_a8": 0.00020959966464053657,
  "byte_12": 0.002934395304967512,
  "byte_54": 0.005449591280653951,
  "byte_13": 0.00020959966464053657,
  "byte_21": 0.00020959966464053657,
  "byte_d9": 0.00020959966464053657,
  "byte_86": 0.0020959966464053656,
  "byte_85": 0.001467197652483756,
  "byte_55": 0.0016767973171242926,
  "byte_7f": 0.0008383986585621463,
  "byte_8c": 0.00020959966464053657,
  "byte_eb": 0.00041919932928107315,
  "byte_ec": 0.00020959966464053657,
  "byte_d1": 0.00020959966464053657,
  "byte_4f": 0.00020959966464053657,
  "byte_71": 0.00020959966464053657,
  "byte_1e": 0.0006287989939216097,
  "byte_c0": 0.00041919932928107315,
  "byte_f7": 0.00020959966464053657,
  "byte_b2": 0.00020959966464053657,
  "byte_c7": 0.00020959966464053657,
  "byte_c3": 0.00020959966464053657,
  "byte_b9": 0.00041919932928107315,
  "byte_25": 0.00020959966464053657,
  "byte_a3": 0.0006287989939216097,
  "byte_07": 0.00041919932928107315,
  "byte_5f": 0.00041919932928107315,
  "byte_08": 0.0006287989939216097,
  "byte_32": 0.00020959966464053657,
  "byte_89": 0.00020959966464053657,
  "byte_87": 0.0010479983232026828,
  "byte_f0": 0.00020959966464053657,
  "byte_ad": 0.00041919932928107315,
  "byte_1b": 0.00041919932928107315,
  "byte_e2": 0.00041919932928107315,
  "byte_69": 0.00041919932928107315,
  "byte_b0": 0.00041919932928107315,
  "byte_68": 0.00041919932928107315,
  "byte_8d": 0.0006287989939216097,
  "byte_aa": 0.00041919932928107315,
  "byte_2b": 0.0006287989939216097,
  "byte_f1": 0.0008383986585621463,
  "byte_c4": 0.0006287989939216097,
  "byte_a1": 0.0006287989939216097,
  "byte_28": 0.00041919932928107315,
  "byte_f5": 0.0008383986585621463,
  "byte_5a": 0.0006287989939216097,
  "byte_4d": 0.00041919932928107315,
  "byte_ef": 0.00041919932928107315,
  "byte_e3": 0.00020959966464053657,
  "byte_e8": 0.00041919932928107315,
  "byte_bd": 0.00020959966464053657,
  "byte_cb": 0.00041919932928107315,
  "byte_0c": 0.0010479983232026828,
  "byte_ab": 0.00041919932928107315,
  "byte_f6": 0.00020959966464053657,
  "byte_0e": 0.0008383986585621463,
  "byte_4e": 0.00020959966464053657,
  "byte_b6": 0.00020959966464053657,
  "byte_0f": 0.00020959966464053657,
  "byte_4b": 0.00020959966464053657,
  "byte_88": 0.00020959966464053657,
  "byte_ee": 0.00020959966464053657,
  "byte_53": 0.00020959966464053657,
  "byte_38": 0.00020959966464053657,
  "byte_94": 0.00041919932928107315,
  "byte_3b": 0.00041919932928107315,
  "byte_c6": 0.00041919932928107315,
  "byte_b1": 0.00020959966464053657,
  "byte_17": 0.00020959966464053657,
  "byte_f9": 0.00020959966464053657,
  "byte_7b": 0.00020959966464053657,
  "byte_3a": 0.00020959966464053657,
  "byte_d3": 0.00020959966464053657,
  "byte_78": 0.00020959966464053657,
  "byte_24": 0.00020959966464053657,
  "byte_cf": 0.00020959966464053657,
  "byte_39": 0.00020959966464053657,
  "byte_6e": 0.00020959966464053657,
  "byte_4c": 0.00020959966464053657,
  "byte_2d": 0.00041919932928107315,
  "byte_fe": 0.0006287989939216097,
  "byte_65": 0.00041919932928107315,
  "byte_7a": 0.00041919932928107315,
  "byte_30": 0.00020959966464053657,
  "byte_58": 0.00041919932928107315,
  "byte_cc": 0.00020959966464053657,
  "byte_64": 0.00020959966464053657,
  "byte_ce": 0.00020959966464053657,
  "byte_ca": 0.00020959966464053657,
  "byte_d6": 0.00020959966464053657,
  "byte_2a": 0.00020959966464053657,
  "byte_fa": 0.00020959966464053657,
  "byte_6b": 0.00020959966464053657,
  "byte_c9": 0.00020959966464053657,
  "byte_a5": 0.00020959966464053657,
  "byte_5d": 0.00020959966464053657,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 3,
  "event_nums": 3,
  "creation_block": 5079007,
  "creation_timestamp": 1518469803,
  "life_time": 25232.0,
  "duration_seconds": 367196.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.00011889192723814053,
  "avg_gas_limit": 652147.0,
  "std_gas_limit": 568721.7414676531,
  "avg_gas_used": 511193.0,
  "std_gas_used": 668419.3225453615,
  "avg_gas_price": 1700000000.0,
  "std_gas_price": 424264068.7119285,
  "transfer_num": 1,
  "approve_num": 2,
  "timeline_sequence": [
    [
      5079007,
      1518469803,
      21,
      119,
      0,
      1456441,
      2000000000,
      0,
      1,
      6021234,
      1456441,
      18041897
    ],
    [
      5104237,
      1518836947,
      28,
      18,
      0,
      250000,
      1100000000,
      0,
      1,
      1531611,
      46069,
      18016667
    ],
    [
      5104239,
      1518836999,
      29,
      161,
      0,
      250000,
      2000000000,
      0,
      1,
      7589563,
      31069,
      18016665
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.0;\n\ninterface ERC20 {\n    function transferFrom(address _from, address _to, uint _value) public returns (bool);\n    function approve(address _spender, uint _value) public returns (bool);\n    function allowance(address _owner, address _spender) public constant returns (uint);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ninterface ERC223 {\n    function transfer(address _to, uint _value, bytes _data) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n}\n\ncontract ERC223ReceivingContract {\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n}\n\ncontract Token {\n    string internal _symbol;\n    string internal _name;\n    uint8 internal _decimals;\n    uint internal _totalSupply = 200000000000000000000000000;\n    mapping (address => uint) internal _balanceOf;\n    mapping (address => mapping (address => uint)) internal _allowances;\n\n    function Token(string symbol, string name, uint8 decimals, uint totalSupply) public {\n        _symbol = symbol;\n        _name = name;\n        _decimals = decimals;\n        _totalSupply = totalSupply;\n    }\n\n    function name() public constant returns (string) {\n        return _name;\n    }\n\n    function symbol() public constant returns (string) {\n        return _symbol;\n    }\n\n    function decimals() public constant returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _addr) public constant returns (uint);\n    function transfer(address _to, uint _value) public returns (bool);\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n}\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract MyFirstToken is Token(\"ORO\", \"Caona\", 18, 200000000000000000000000000), ERC20, ERC223 {\n\n    using SafeMath for uint;\n\n    function MyFirstToken() public {\n        _balanceOf[msg.sender] = _totalSupply;\n    }\n\n    function totalSupply() public constant returns (uint) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address _addr) public constant returns (uint) {\n        return _balanceOf[_addr];\n    }\n\n    function transfer(address _to, uint _value) public returns (bool) {\n        if (_value > 0 &&\n            _value <= _balanceOf[msg.sender] &&\n            !isContract(_to)) {\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n\n    function transfer(address _to, uint _value, bytes _data) public returns (bool) {\n        if (_value > 0 &&\n            _value <= _balanceOf[msg.sender] &&\n            isContract(_to)) {\n            _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n            ERC223ReceivingContract _contract = ERC223ReceivingContract(_to);\n            _contract.tokenFallback(msg.sender, _value, _data);\n            Transfer(msg.sender, _to, _value, _data);\n            return true;\n        }\n        return false;\n    }\n\n    function isContract(address _addr) private constant returns (bool) {\n        uint codeSize;\n        assembly {\n            codeSize := extcodesize(_addr)\n        }\n        return codeSize > 0;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n        if (_allowances[_from][msg.sender] > 0 &&\n            _value > 0 &&\n            _allowances[_from][msg.sender] >= _value &&\n            _balanceOf[_from] >= _value) {\n            _balanceOf[_from] = _balanceOf[_from].sub(_value);\n            _balanceOf[_to] = _balanceOf[_to].add(_value);\n            _allowances[_from][msg.sender] = _allowances[_from][msg.sender].sub(_value);\n            Transfer(_from, _to, _value);\n            return true;\n        }\n        return false;\n    }\n\n    function approve(address _spender, uint _value) public returns (bool) {\n        _allowances[msg.sender][_spender] = _allowances[msg.sender][_spender].add(_value);\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint) {\n        return _allowances[_owner][_spender];\n    }\n}"
}