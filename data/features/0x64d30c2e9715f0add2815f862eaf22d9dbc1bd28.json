{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP1 CALLDATALOAD DUP1 DUP3 ADD CALLDATALOAD PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 SWAP5 CALLDATASIZE SWAP5 SWAP3 SWAP4 PUSH1 SWAP4 SWAP3 DUP5 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP2 ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP7 SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 CALLDATASIZE LT ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 GT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP9 ADD SWAP1 SSTORE SWAP4 DUP9 AND DUP1 DUP4 MSTORE DUP5 DUP4 SHA3 DUP1 SLOAD DUP9 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP3 MSTORE DUP5 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP5 SWAP1 SHA3 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE DUP4 MLOAD DUP7 DUP2 MSTORE SWAP4 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND ISZERO DUP1 PUSH2 JUMPI POP DUP1 ISZERO JUMPDEST DUP1 PUSH2 JUMPI POP PUSH7 CALLVALUE LT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 MLOAD CALLER SWAP1 CALLVALUE DUP1 ISZERO PUSH2 MUL SWAP2 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP1 CALLVALUE DUP1 ISZERO PUSH2 MUL SWAP2 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 DUP2 ADD DUP3 SSTORE PUSH1 SWAP2 SWAP1 SWAP2 MSTORE PUSH32 ADD DUP1 SLOAD PUSH20 NOT AND CALLER OR SWAP1 SSTORE JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD CALLVALUE SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE DUP3 MLOAD SWAP1 DUP2 MSTORE SWAP2 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 SLOAD SWAP2 POP JUMPDEST PUSH1 SLOAD PUSH1 ADD DUP3 LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD DUP3 LT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP1 DUP5 MSTORE PUSH1 SWAP1 SWAP3 MSTORE PUSH1 SWAP1 SWAP3 SHA3 SLOAD PUSH1 SLOAD SWAP2 SWAP4 POP MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD SWAP6 SWAP1 SWAP5 DIV SWAP1 SWAP5 ADD SWAP1 SWAP3 SSTORE PUSH1 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SHA3 SSTORE PUSH1 SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP3 SWAP1 SSTORE PUSH1 SLOAD DUP3 EQ ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG1 PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 SLOAD PUSH1 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE PUSH1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 MLOAD PUSH2 SWAP1 PUSH1 SWAP1 PUSH1 DUP5 ADD SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND PUSH21 OR SWAP1 SSTORE JUMPDEST JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 CALLDATASIZE LT ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST ISZERO PUSH2 JUMPI CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP1 DUP5 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 DUP3 SSTORE SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 SWAP2 POP PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST SWAP1 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xc5 LOG4 SSTORE BLOCKHASH RETURNDATACOPY SELFDESTRUCT DIV UNKNOWN_0xfc MLOAD UNKNOWN_0xd SLOAD EXTCODECOPY PUSH18 UNKNOWN_0xfe STOP UNKNOWN_0x29",
  "opcode_entropy": 4.889459744516588,
  "opcode_count": 2185,
  "unique_opcodes": 71,
  "byte_entropy": 5.943259566728448,
  "byte_60": 0.09259259259259259,
  "byte_80": 0.044930176077717064,
  "byte_40": 0.008803885853066181,
  "byte_52": 0.022161505768063146,
  "byte_04": 0.015179113539769277,
  "byte_36": 0.0015179113539769277,
  "byte_10": 0.003946569520340012,
  "byte_61": 0.051001821493624776,
  "byte_01": 0.0440194292653309,
  "byte_27": 0.00030358227079538557,
  "byte_57": 0.026108075288403157,
  "byte_63": 0.00819672131147541,
  "byte_ff": 0.010018214936247723,
  "byte_7c": 0.0006071645415907711,
  "byte_00": 0.06466302367941712,
  "byte_35": 0.004857316332726169,
  "byte_16": 0.014875531268973893,
  "byte_06": 0.003946569520340012,
  "byte_fd": 0.007589556769884639,
  "byte_de": 0.0015179113539769277,
  "byte_03": 0.021250758955676987,
  "byte_81": 0.02671523982999393,
  "byte_14": 0.009107468123861567,
  "byte_2c": 0.0009107468123861566,
  "byte_09": 0.006071645415907711,
  "byte_5e": 0.0009107468123861566,
  "byte_a7": 0.0012143290831815423,
  "byte_b3": 0.0009107468123861566,
  "byte_b6": 0.0006071645415907711,
  "byte_6c": 0.00030358227079538557,
  "byte_a5": 0.00030358227079538557,
  "byte_31": 0.0009107468123861566,
  "byte_ee": 0.0015179113539769277,
  "byte_18": 0.00030358227079538557,
  "byte_0d": 0.0018214936247723133,
  "byte_dd": 0.0024286581663630845,
  "byte_02": 0.023375834851244687,
  "byte_15": 0.022161505768063146,
  "byte_23": 0.0015179113539769277,
  "byte_b8": 0.0006071645415907711,
  "byte_72": 0.0006071645415907711,
  "byte_2a": 0.00030358227079538557,
  "byte_3c": 0.0006071645415907711,
  "byte_e5": 0.0009107468123861566,
  "byte_67": 0.0006071645415907711,
  "byte_54": 0.018214936247723135,
  "byte_34": 0.008803885853066181,
  "byte_a6": 0.0009107468123861566,
  "byte_d8": 0.0006071645415907711,
  "byte_32": 0.0006071645415907711,
  "byte_7f": 0.003339404978749241,
  "byte_65": 0.0009107468123861566,
  "byte_69": 0.0012143290831815423,
  "byte_94": 0.003339404978749241,
  "byte_47": 0.0006071645415907711,
  "byte_e4": 0.00030358227079538557,
  "byte_05": 0.005768063145112325,
  "byte_53": 0.0006071645415907711,
  "byte_a3": 0.0015179113539769277,
  "byte_62": 0.0009107468123861566,
  "byte_5c": 0.0009107468123861566,
  "byte_6d": 0.0021250758955676987,
  "byte_45": 0.0006071645415907711,
  "byte_46": 0.00030358227079538557,
  "byte_a2": 0.0009107468123861566,
  "byte_cd": 0.0006071645415907711,
  "byte_70": 0.0006071645415907711,
  "byte_a0": 0.006678809957498482,
  "byte_82": 0.016089860352155434,
  "byte_26": 0.0006071645415907711,
  "byte_77": 0.0006071645415907711,
  "byte_12": 0.0006071645415907711,
  "byte_f6": 0.00030358227079538557,
  "byte_7e": 0.0006071645415907711,
  "byte_d6": 0.0006071645415907711,
  "byte_95": 0.0021250758955676987,
  "byte_9b": 0.0018214936247723133,
  "byte_41": 0.0012143290831815423,
  "byte_71": 0.0009107468123861566,
  "byte_97": 0.0006071645415907711,
  "byte_b0": 0.0009107468123861566,
  "byte_9a": 0.00030358227079538557,
  "byte_86": 0.0024286581663630845,
  "byte_a9": 0.0006071645415907711,
  "byte_9c": 0.00030358227079538557,
  "byte_bb": 0.00030358227079538557,
  "byte_b4": 0.0009107468123861566,
  "byte_7d": 0.0015179113539769277,
  "byte_74": 0.0024286581663630845,
  "byte_bf": 0.00030358227079538557,
  "byte_cf": 0.00030358227079538557,
  "byte_5d": 0.00030358227079538557,
  "byte_db": 0.0006071645415907711,
  "byte_d4": 0.00030358227079538557,
  "byte_ed": 0.0012143290831815423,
  "byte_3e": 0.0012143290831815423,
  "byte_ec": 0.0009107468123861566,
  "byte_fa": 0.0009107468123861566,
  "byte_59": 0.00030358227079538557,
  "byte_7b": 0.0009107468123861566,
  "byte_13": 0.00030358227079538557,
  "byte_f1": 0.0015179113539769277,
  "byte_99": 0.00030358227079538557,
  "byte_f5": 0.0015179113539769277,
  "byte_28": 0.0009107468123861566,
  "byte_5b": 0.037340619307832425,
  "byte_38": 0.00030358227079538557,
  "byte_50": 0.026411657559198543,
  "byte_3d": 0.0015179113539769277,
  "byte_56": 0.02034001214329083,
  "byte_51": 0.009714632665452338,
  "byte_20": 0.01973284760170006,
  "byte_83": 0.011232544019429266,
  "byte_91": 0.018822100789313904,
  "byte_92": 0.010321797207043109,
  "byte_90": 0.04553734061930783,
  "byte_85": 0.004250151791135397,
  "byte_1f": 0.003946569520340012,
  "byte_a8": 0.00030358227079538557,
  "byte_0a": 0.010625379477838493,
  "byte_19": 0.0024286581663630845,
  "byte_f3": 0.0018214936247723133,
  "byte_c2": 0.0015179113539769277,
  "byte_da": 0.0015179113539769277,
  "byte_24": 0.0015179113539769277,
  "byte_cb": 0.0006071645415907711,
  "byte_73": 0.0006071645415907711,
  "byte_21": 0.0006071645415907711,
  "byte_79": 0.00030358227079538557,
  "byte_44": 0.0006071645415907711,
  "byte_8b": 0.0006071645415907711,
  "byte_88": 0.00273224043715847,
  "byte_a1": 0.0030358227079538553,
  "byte_af": 0.0006071645415907711,
  "byte_08": 0.00546448087431694,
  "byte_1e": 0.0009107468123861566,
  "byte_c4": 0.0012143290831815423,
  "byte_d9": 0.00030358227079538557,
  "byte_84": 0.009107468123861567,
  "byte_93": 0.00546448087431694,
  "byte_37": 0.0009107468123861566,
  "byte_58": 0.0009107468123861566,
  "byte_96": 0.00030358227079538557,
  "byte_9d": 0.0006071645415907711,
  "byte_68": 0.0012143290831815423,
  "byte_5f": 0.0012143290831815423,
  "byte_ba": 0.0006071645415907711,
  "byte_0b": 0.003339404978749241,
  "byte_e0": 0.0006071645415907711,
  "byte_9e": 0.00030358227079538557,
  "byte_f8": 0.0006071645415907711,
  "byte_c3": 0.0024286581663630845,
  "byte_98": 0.0009107468123861566,
  "byte_11": 0.00273224043715847,
  "byte_fe": 0.0015179113539769277,
  "byte_33": 0.004553734061930784,
  "byte_87": 0.0015179113539769277,
  "byte_55": 0.00819672131147541,
  "byte_8c": 0.0006071645415907711,
  "byte_e1": 0.0006071645415907711,
  "byte_eb": 0.00030358227079538557,
  "byte_d1": 0.0006071645415907711,
  "byte_4f": 0.0006071645415907711,
  "byte_42": 0.00030358227079538557,
  "byte_c0": 0.0009107468123861566,
  "byte_f7": 0.00030358227079538557,
  "byte_b2": 0.00030358227079538557,
  "byte_29": 0.0006071645415907711,
  "byte_c8": 0.0009107468123861566,
  "byte_c7": 0.00030358227079538557,
  "byte_b9": 0.00030358227079538557,
  "byte_25": 0.0006071645415907711,
  "byte_07": 0.0024286581663630845,
  "byte_64": 0.0006071645415907711,
  "byte_78": 0.0006071645415907711,
  "byte_e9": 0.00030358227079538557,
  "byte_f2": 0.0015179113539769277,
  "byte_ad": 0.0006071645415907711,
  "byte_1b": 0.0021250758955676987,
  "byte_e2": 0.0006071645415907711,
  "byte_fc": 0.0015179113539769277,
  "byte_8d": 0.0006071645415907711,
  "byte_aa": 0.0009107468123861566,
  "byte_2b": 0.0006071645415907711,
  "byte_5a": 0.0006071645415907711,
  "byte_4d": 0.0012143290831815423,
  "byte_ef": 0.0006071645415907711,
  "byte_b5": 0.0009107468123861566,
  "byte_66": 0.00030358227079538557,
  "byte_6f": 0.0006071645415907711,
  "byte_c1": 0.0009107468123861566,
  "byte_c5": 0.0006071645415907711,
  "byte_8a": 0.00030358227079538557,
  "byte_ac": 0.00030358227079538557,
  "byte_fb": 0.00030358227079538557,
  "byte_1a": 0.00030358227079538557,
  "byte_39": 0.00030358227079538557,
  "byte_ae": 0.0006071645415907711,
  "byte_d7": 0.0006071645415907711,
  "byte_8e": 0.00030358227079538557,
  "byte_c6": 0.0006071645415907711,
  "byte_4b": 0.00030358227079538557,
  "byte_e3": 0.00030358227079538557,
  "byte_6b": 0.0012143290831815423,
  "byte_17": 0.0012143290831815423,
  "byte_4a": 0.00030358227079538557,
  "byte_a4": 0.0006071645415907711,
  "byte_75": 0.00030358227079538557,
  "byte_ce": 0.00030358227079538557,
  "byte_3a": 0.0006071645415907711,
  "byte_4e": 0.0009107468123861566,
  "byte_0f": 0.0012143290831815423,
  "byte_f9": 0.0006071645415907711,
  "byte_8f": 0.00030358227079538557,
  "byte_2d": 0.00030358227079538557,
  "byte_0e": 0.0009107468123861566,
  "byte_e7": 0.00030358227079538557,
  "byte_0c": 0.003946569520340012,
  "byte_cc": 0.00030358227079538557,
  "byte_6a": 0.00030358227079538557,
  "byte_7a": 0.0006071645415907711,
  "byte_30": 0.00030358227079538557,
  "byte_ab": 0.0006071645415907711,
  "byte_ea": 0.00030358227079538557,
  "num_nodes": 2,
  "num_edges": 2,
  "avg_degree": 2.0,
  "density": 1.0,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 11,
  "event_nums": 3,
  "creation_block": 5887551,
  "creation_timestamp": 1530464209,
  "life_time": 266136.0,
  "duration_seconds": 3898203.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 2,
  "num_sellers": 2,
  "num_creator_transfers": 3,
  "buy_amt": 3e+17,
  "sell_amt": 4e+17,
  "avg_value": 5.8333333333333336e+16,
  "txn_per_block": 4.1332095875432576e-05,
  "avg_gas_limit": 148618.72727272726,
  "std_gas_limit": 315070.45472721895,
  "avg_gas_used": 135568.81818181818,
  "std_gas_used": 317476.78487147775,
  "avg_gas_price": 34181818181.81818,
  "std_gas_price": 20932003256.510796,
  "contribution_num": 2,
  "roundend_num": 1,
  "enablepurchase_num": 1,
  "contribute_num": 4,
  "nextround_num": 1,
  "disablepurchase_num": 1,
  "timeline_sequence": [
    [
      5887551,
      1530464209,
      0,
      58,
      0,
      1134242,
      47000000000,
      0,
      1,
      3646048,
      1134242,
      17233638
    ],
    [
      6153200,
      1534355391,
      1,
      1,
      0,
      27172,
      47000000000,
      0,
      1,
      78420,
      27172,
      16967989
    ],
    [
      6153226,
      1534355752,
      2,
      9,
      100000000000000000,
      21771,
      47000000000,
      1,
      0,
      329780,
      21771,
      16967963
    ],
    [
      6153262,
      1534356286,
      3,
      7,
      100000000000000000,
      60000,
      47000000000,
      1,
      0,
      357329,
      60000,
      16967927
    ],
    [
      6153542,
      1534360320,
      4,
      1,
      100000000000000000,
      112525,
      47000000000,
      0,
      1,
      133525,
      112525,
      16967647
    ],
    [
      6153545,
      1534360364,
      5,
      12,
      100000000000000000,
      112525,
      47000000000,
      0,
      1,
      495342,
      42066,
      16967644
    ],
    [
      6153672,
      1534362236,
      6,
      54,
      0,
      132380,
      47000000000,
      0,
      1,
      1397757,
      66190,
      16967517
    ],
    [
      6153687,
      1534362412,
      7,
      5,
      0,
      27291,
      47000000000,
      0,
      1,
      368348,
      27291,
      16967502
    ],
    [
      6153262,
      1534356286,
      0,
      0,
      100000000000000000,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      6153542,
      1534360320,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6153545,
      1534360364,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.4;\n\ncontract ERC20 {\n  uint public totalSupply;\n  function balanceOf(address who) public constant returns (uint);\n  function allowance(address owner, address spender) public constant returns (uint);\n\n  function transfer(address to, uint value) public returns (bool ok);\n  function transferFrom(address from, address to, uint value) public returns (bool ok);\n  function approve(address spender, uint value) public returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract BoltToken is ERC20{\n    \n    address owner = msg.sender;\n    \n    bool public canPurchase = false;\n    \n    mapping (address => uint) balances;\n    mapping (address => uint) roundContributions;\n    address[] roundContributionsIndexes;\n    mapping (address => mapping (address => uint)) allowed;\n\n    uint public currentSupply = 0;\n    uint public totalSupply = 32032000000000000000000000;\n    \n    uint public round = 0;\n    uint public roundFunds = 0;\n    uint public roundReward = 200200000000000000000000;\n    \n    string public name = \"BOLT token\";\n    string public symbol = \"BOLT\";\n    uint8 public decimals = 18;\n    \n    bool public isToken = true;\n    \n    string public tokenSaleAgreement = \"https://bolt-project.net/tsa.pdf\";\n    \n    uint contributionsDistribStep = 0;\n    \n    event Contribution(address indexed from, uint value);\n    event RoundEnd(uint roundNumber);\n    \n    function balanceOf(address _owner) public constant returns (uint balance) {\n        return balances[_owner];\n    }\n    \n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n    \n    function transfer(address _to, uint _value) public returns (bool success) {\n        // mitigates the ERC20 short address attack\n        if(msg.data.length < (2 * 32) + 4) { return false; }\n\n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    function transferFrom(address _from, address _to, uint _value) public  returns (bool success){\n        // mitigates the ERC20 short address attack\n        if(msg.data.length < (3 * 32) + 4) { return false; }\n        \n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            emit Transfer(_from, _to, _value);\n            return true;\n        }\n        return false;\n    }\n    \n    function approve(address _spender, uint _value) public  returns (bool success){\n        // mitigates the ERC20 spend/approval race condition\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        \n        allowed[msg.sender][_spender] = _value;\n        \n        emit Approval(msg.sender, _spender, _value);\n        \n        return true;\n    }\n    \n    function enablePurchase() public {\n        if(msg.sender != owner && currentSupply>=totalSupply){ return; }\n        \n        canPurchase = true;\n    }\n\n    function disablePurchase() public {\n        if(msg.sender != owner){ return; }\n        \n        canPurchase = false;\n    }\n    \n    function changeTsaLink(string _link) public {\n        if(msg.sender != owner){ return; }\n        \n        tokenSaleAgreement = _link;\n    }\n    \n    function changeReward(uint _roundReward) public {\n        if(msg.sender != owner){ return; }\n        \n        roundReward = _roundReward;\n    }\n    \n    function nextRound() public {\n        if(msg.sender != owner){ return; }\n        uint i = contributionsDistribStep;\n        while(i < contributionsDistribStep+10 && i<roundContributionsIndexes.length){\n            address contributor = roundContributionsIndexes[i];\n            balances[contributor] += roundReward*roundContributions[contributor]/roundFunds;\n            roundContributions[contributor] = 0;\n            i++;\n        }\n        \n        contributionsDistribStep = i;\n        \n        if(i==roundContributionsIndexes.length){\n            delete roundContributionsIndexes;\n            \n            emit RoundEnd(round);\n            \n            roundFunds = 0;\n            currentSupply += roundReward;\n            round += 1;\n            contributionsDistribStep = 0;\n        }\n    }\n\n    function contribute(bool _acceptConditions) payable public {\n        \n        if(msg.value == 0){ return; }\n        \n        if(!canPurchase || !_acceptConditions || msg.value < 10 finney){\n            msg.sender.transfer(msg.value);\n            return;\n        }\n        \n        owner.transfer(msg.value);\n        \n        if(roundContributions[msg.sender] == 0){\n           roundContributionsIndexes.push(msg.sender); \n        }\n        \n        roundContributions[msg.sender] += msg.value;\n        roundFunds += msg.value;\n        \n        emit Contribution(msg.sender, msg.value);\n    }\n}"
}