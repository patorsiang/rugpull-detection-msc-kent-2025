{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 CALLER CALLVALUE PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 SLOAD DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 PUSH5 DUP3 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP5 DUP4 PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH32 DUP5 DUP5 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP6 PUSH20 AND EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP5 PUSH20 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP4 GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP6 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 DUP3 PUSH1 DUP1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP1 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP7 LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP7 LT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP6 GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP7 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP8 SUB PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD SWAP3 POP PUSH1 DUP4 EQ DUP1 PUSH2 JUMPI POP DUP5 DUP4 LT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST PUSH1 PUSH1 SUB DUP7 LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP8 ADD PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD SWAP2 POP PUSH1 DUP3 EQ DUP1 PUSH2 JUMPI POP DUP2 DUP6 LT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST PUSH1 DUP7 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD SWAP1 POP DUP5 PUSH1 DUP8 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD DUP2 SWAP1 SSTORE POP PUSH32 DUP7 DUP3 DUP8 PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP1 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD SWAP1 POP DUP3 PUSH1 DUP2 SWAP1 SSTORE POP PUSH32 DUP2 PUSH1 SLOAD PUSH1 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP1 PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP4 LT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP4 LT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 DUP5 PUSH1 DUP7 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD PUSH1 DUP8 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 DUP4 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD PUSH1 DUP5 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD SWAP2 POP SWAP2 POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 MUL SWAP1 POP PUSH1 DUP5 EQ DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 GT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD DUP2 DUP5 MUL ADD DUP5 EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP6 PUSH20 AND EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP5 PUSH20 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP4 GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP6 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 DUP3 PUSH1 DUP1 DUP10 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 TIMESTAMP SWAP2 POP PUSH1 SWAP1 POP JUMPDEST PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP3 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD EQ ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP3 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD SWAP3 POP PUSH2 JUMP JUMPDEST JUMPDEST DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 SWAP3 POP JUMPDEST POP POP SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 GT DUP1 ISZERO PUSH2 JUMPI POP DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP2 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 DUP1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 GT DUP1 ISZERO PUSH2 JUMPI POP DUP2 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 DUP1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH1 DUP1 PUSH1 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 POP JUMPDEST DUP9 PUSH2 AND DUP3 PUSH2 AND LT ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH4 DUP4 ADD SWAP3 POP PUSH2 JUMP JUMPDEST PUSH4 DUP4 ADD SWAP3 POP JUMPDEST DUP2 DUP1 PUSH1 ADD SWAP3 POP POP PUSH2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD SWAP1 PUSH1 AND SWAP1 DUP2 PUSH1 AND DUP2 MSTORE POP POP PUSH2 DUP10 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP2 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD SWAP1 PUSH1 AND SWAP1 DUP2 PUSH1 AND DUP2 MSTORE POP POP PUSH2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD SWAP1 PUSH1 AND SWAP1 DUP2 PUSH1 AND DUP2 MSTORE POP POP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD SWAP1 PUSH1 AND SWAP1 DUP2 PUSH1 AND DUP2 MSTORE POP POP PUSH1 DUP2 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD SWAP1 PUSH1 AND SWAP1 DUP2 PUSH1 AND DUP2 MSTORE POP POP PUSH1 DUP2 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD SWAP1 PUSH1 AND SWAP1 DUP2 PUSH1 AND DUP2 MSTORE POP POP PUSH1 DUP2 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD SWAP1 PUSH1 AND SWAP1 DUP2 PUSH1 AND DUP2 MSTORE POP POP PUSH1 DUP2 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD SWAP1 PUSH1 AND SWAP1 DUP2 PUSH1 AND DUP2 MSTORE POP POP PUSH1 DUP2 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD SWAP1 PUSH1 AND SWAP1 DUP2 PUSH1 AND DUP2 MSTORE POP POP PUSH1 DUP2 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD SWAP1 PUSH1 AND SWAP1 DUP2 PUSH1 AND DUP2 MSTORE POP POP PUSH1 DUP2 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD SWAP1 PUSH1 AND SWAP1 DUP2 PUSH1 AND DUP2 MSTORE POP POP PUSH1 DUP2 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD SWAP1 PUSH1 AND SWAP1 DUP2 PUSH1 AND DUP2 MSTORE POP POP PUSH1 DUP2 PUSH1 PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD SWAP1 PUSH1 AND SWAP1 DUP2 PUSH1 AND DUP2 MSTORE POP POP PUSH1 SWAP2 POP JUMPDEST DUP8 PUSH1 AND DUP3 PUSH2 AND LT ISZERO PUSH2 JUMPI DUP1 PUSH1 DUP4 SUB PUSH2 AND PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD MLOAD PUSH1 AND PUSH3 MUL DUP4 ADD SWAP3 POP DUP2 DUP1 PUSH1 ADD SWAP3 POP POP PUSH2 JUMP JUMPDEST PUSH1 DUP8 SUB PUSH1 AND PUSH3 MUL DUP4 ADD SWAP3 POP DUP6 PUSH1 AND PUSH2 MUL DUP4 ADD SWAP3 POP DUP5 PUSH1 AND PUSH1 MUL DUP4 ADD SWAP3 POP DUP4 PUSH1 AND DUP4 ADD SWAP3 POP DUP3 SWAP3 POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 PUSH2 AND DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD PUSH2 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP4 PUSH2 AND DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD PUSH2 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 PUSH2 AND DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD PUSH2 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 SWAP1 PUSH1 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY DUP1 DUP3 ADD SWAP2 POP POP SWAP1 POP POP SWAP1 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xcc UNKNOWN_0xad UNKNOWN_0x5c UNKNOWN_0xe1 PUSH27 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.727484478200614,
  "opcode_count": 3971,
  "unique_opcodes": 70,
  "byte_entropy": 4.757427101154291,
  "byte_0x": 0.00012396181975951408,
  "byte_60": 0.06718730630965662,
  "byte_80": 0.030122722201561918,
  "byte_40": 0.007065823726292302,
  "byte_52": 0.014255609272344118,
  "byte_04": 0.006198090987975704,
  "byte_36": 0.002107350935911739,
  "byte_10": 0.00669393826701376,
  "byte_61": 0.031238378579397545,
  "byte_00": 0.035824965910499565,
  "byte_e6": 0.00012396181975951408,
  "byte_57": 0.016610883847774885,
  "byte_35": 0.002231312755671253,
  "byte_7c": 0.00012396181975951408,
  "byte_01": 0.028883104003966778,
  "byte_90": 0.03235403495723317,
  "byte_63": 0.003718854592785422,
  "byte_ff": 0.32465600595016736,
  "byte_16": 0.026403867608776495,
  "byte_06": 0.002231312755671253,
  "byte_fd": 0.005578281889178133,
  "byte_de": 0.0004958472790380563,
  "byte_03": 0.007933556464608901,
  "byte_14": 0.007809594644849386,
  "byte_f2": 0.0006198090987975703,
  "byte_09": 0.0011156563778356265,
  "byte_5e": 0.0004958472790380563,
  "byte_a7": 0.0003718854592785422,
  "byte_b3": 0.0003718854592785422,
  "byte_82": 0.007933556464608901,
  "byte_18": 0.0004958472790380563,
  "byte_0d": 0.0023552745754307674,
  "byte_dd": 0.0011156563778356265,
  "byte_e7": 0.0003718854592785422,
  "byte_23": 0.0003718854592785422,
  "byte_b8": 0.00024792363951902817,
  "byte_72": 0.0003718854592785422,
  "byte_02": 0.00458658733110202,
  "byte_12": 0.0004958472790380563,
  "byte_31": 0.0004958472790380563,
  "byte_3c": 0.0007437709185570844,
  "byte_e5": 0.0003718854592785422,
  "byte_67": 0.00012396181975951408,
  "byte_97": 0.0004958472790380563,
  "byte_3b": 0.0003718854592785422,
  "byte_a0": 0.0004958472790380563,
  "byte_b9": 0.0004958472790380563,
  "byte_a9": 0.0003718854592785422,
  "byte_c8": 0.0004958472790380563,
  "byte_68": 0.0004958472790380563,
  "byte_fa": 0.00024792363951902817,
  "byte_81": 0.02838725672492872,
  "byte_34": 0.0027271600347093094,
  "byte_f3": 0.0019833891161522253,
  "byte_70": 0.00024792363951902817,
  "byte_95": 0.0006198090987975703,
  "byte_d8": 0.00024792363951902817,
  "byte_9b": 0.0004958472790380563,
  "byte_41": 0.0011156563778356265,
  "byte_8d": 0.0004958472790380563,
  "byte_05": 0.0014875418371141688,
  "byte_9c": 0.0003718854592785422,
  "byte_bb": 0.0003718854592785422,
  "byte_1d": 0.0016115036568736829,
  "byte_aa": 0.0007437709185570844,
  "byte_d7": 0.00024792363951902817,
  "byte_c9": 0.00012396181975951408,
  "byte_99": 0.00024792363951902817,
  "byte_11": 0.0029750836742283376,
  "byte_76": 0.00012396181975951408,
  "byte_d1": 0.0007437709185570844,
  "byte_db": 0.00024792363951902817,
  "byte_8e": 0.0004958472790380563,
  "byte_0e": 0.0007437709185570844,
  "byte_62": 0.0007437709185570844,
  "byte_ed": 0.0004958472790380563,
  "byte_3e": 0.0006198090987975703,
  "byte_59": 0.00024792363951902817,
  "byte_e3": 0.0004958472790380563,
  "byte_8b": 0.0006198090987975703,
  "byte_d0": 0.00024792363951902817,
  "byte_f6": 0.00024792363951902817,
  "byte_98": 0.00024792363951902817,
  "byte_79": 0.00024792363951902817,
  "byte_13": 0.0016115036568736829,
  "byte_5b": 0.026403867608776495,
  "byte_f0": 0.00024792363951902817,
  "byte_33": 0.0026031982149497955,
  "byte_56": 0.01004090740052064,
  "byte_15": 0.02925498946324532,
  "byte_fe": 0.0049584727903805624,
  "byte_50": 0.03656873682905665,
  "byte_07": 0.0012396181975951406,
  "byte_b7": 0.0004958472790380563,
  "byte_51": 0.007561671005330358,
  "byte_20": 0.020701623899838848,
  "byte_83": 0.00669393826701376,
  "byte_91": 0.011528449237634809,
  "byte_47": 0.00024792363951902817,
  "byte_84": 0.004462625511342506,
  "byte_2c": 0.0006198090987975703,
  "byte_1f": 0.0024792363951902812,
  "byte_74": 0.00012396181975951408,
  "byte_0a": 0.003470930953266394,
  "byte_19": 0.0008677327383165985,
  "byte_92": 0.006074129168216189,
  "byte_cd": 0.0006198090987975703,
  "byte_73": 0.015991074748977315,
  "byte_fc": 0.0004958472790380563,
  "byte_08": 0.0026031982149497955,
  "byte_1e": 0.002231312755671253,
  "byte_7d": 0.0007437709185570844,
  "byte_a3": 0.0007437709185570844,
  "byte_ac": 0.00012396181975951408,
  "byte_d4": 0.00024792363951902817,
  "byte_42": 0.0003718854592785422,
  "byte_77": 0.00012396181975951408,
  "byte_0b": 0.0009916945580761127,
  "byte_b2": 0.0003718854592785422,
  "byte_a2": 0.0006198090987975703,
  "byte_e2": 0.0004958472790380563,
  "byte_c7": 0.00024792363951902817,
  "byte_0f": 0.0004958472790380563,
  "byte_29": 0.0006198090987975703,
  "byte_0c": 0.0029750836742283376,
  "byte_48": 0.00024792363951902817,
  "byte_3f": 0.00024792363951902817,
  "byte_7f": 0.001859427296392711,
  "byte_65": 0.0006198090987975703,
  "byte_ba": 0.00012396181975951408,
  "byte_dc": 0.00012396181975951408,
  "byte_6d": 0.00024792363951902817,
  "byte_54": 0.005950167348456675,
  "byte_ca": 0.0003718854592785422,
  "byte_ea": 0.00012396181975951408,
  "byte_64": 0.0007437709185570844,
  "byte_e8": 0.00012396181975951408,
  "byte_a5": 0.00024792363951902817,
  "byte_85": 0.0026031982149497955,
  "byte_88": 0.0003718854592785422,
  "byte_f1": 0.0007437709185570844,
  "byte_93": 0.0013635800173546547,
  "byte_3d": 0.00024792363951902817,
  "byte_b1": 0.0006198090987975703,
  "byte_58": 0.00024792363951902817,
  "byte_43": 0.00024792363951902817,
  "byte_6f": 0.0003718854592785422,
  "byte_69": 0.0006198090987975703,
  "byte_6e": 0.00024792363951902817,
  "byte_55": 0.001859427296392711,
  "byte_8c": 0.0004958472790380563,
  "byte_e1": 0.0006198090987975703,
  "byte_eb": 0.0003718854592785422,
  "byte_ec": 0.0003718854592785422,
  "byte_4f": 0.0003718854592785422,
  "byte_71": 0.0003718854592785422,
  "byte_c0": 0.00012396181975951408,
  "byte_f7": 0.00012396181975951408,
  "byte_c3": 0.0003718854592785422,
  "byte_25": 0.00024792363951902817,
  "byte_4a": 0.00024792363951902817,
  "byte_21": 0.0006198090987975703,
  "byte_bf": 0.00012396181975951408,
  "byte_89": 0.0006198090987975703,
  "byte_5a": 0.0004958472790380563,
  "byte_9d": 0.00012396181975951408,
  "byte_d9": 0.0003718854592785422,
  "byte_17": 0.0013635800173546547,
  "byte_27": 0.0003718854592785422,
  "byte_a4": 0.0004958472790380563,
  "byte_39": 0.00024792363951902817,
  "byte_a1": 0.0009916945580761127,
  "byte_9f": 0.0003718854592785422,
  "byte_5d": 0.00012396181975951408,
  "byte_cf": 0.00012396181975951408,
  "byte_30": 0.0003718854592785422,
  "byte_7e": 0.0003718854592785422,
  "byte_e0": 0.0004958472790380563,
  "byte_d2": 0.00024792363951902817,
  "byte_9a": 0.00012396181975951408,
  "byte_4c": 0.00024792363951902817,
  "byte_a8": 0.00024792363951902817,
  "byte_e9": 0.0004958472790380563,
  "byte_f4": 0.00024792363951902817,
  "byte_86": 0.0019833891161522253,
  "byte_1c": 0.0023552745754307674,
  "byte_87": 0.0013635800173546547,
  "byte_37": 0.0006198090987975703,
  "byte_49": 0.00024792363951902817,
  "byte_b4": 0.00024792363951902817,
  "byte_e4": 0.00012396181975951408,
  "byte_ef": 0.0003718854592785422,
  "byte_cc": 0.00024792363951902817,
  "byte_af": 0.0004958472790380563,
  "byte_6b": 0.0003718854592785422,
  "byte_bc": 0.00012396181975951408,
  "byte_6a": 0.00012396181975951408,
  "byte_ae": 0.00024792363951902817,
  "byte_66": 0.00012396181975951408,
  "byte_4e": 0.00012396181975951408,
  "byte_2e": 0.00012396181975951408,
  "byte_75": 0.00012396181975951408,
  "byte_45": 0.00012396181975951408,
  "byte_24": 0.00012396181975951408,
  "byte_28": 0.0007437709185570844,
  "byte_b0": 0.0003718854592785422,
  "byte_1b": 0.0011156563778356265,
  "byte_4b": 0.00024792363951902817,
  "byte_be": 0.0004958472790380563,
  "byte_78": 0.00012396181975951408,
  "byte_ad": 0.0004958472790380563,
  "byte_53": 0.00012396181975951408,
  "byte_44": 0.00012396181975951408,
  "byte_22": 0.00012396181975951408,
  "byte_da": 0.00024792363951902817,
  "byte_b5": 0.0003718854592785422,
  "byte_94": 0.00024792363951902817,
  "byte_c5": 0.00012396181975951408,
  "byte_7a": 0.0004958472790380563,
  "byte_2a": 0.00024792363951902817,
  "byte_32": 0.00024792363951902817,
  "byte_d5": 0.00012396181975951408,
  "byte_c2": 0.0003718854592785422,
  "byte_2b": 0.00024792363951902817,
  "byte_c4": 0.0003718854592785422,
  "byte_f5": 0.0004958472790380563,
  "byte_4d": 0.00024792363951902817,
  "byte_1a": 0.0003718854592785422,
  "byte_c6": 0.00012396181975951408,
  "byte_2d": 0.0004958472790380563,
  "byte_f9": 0.00012396181975951408,
  "byte_96": 0.00012396181975951408,
  "byte_38": 0.00012396181975951408,
  "byte_5c": 0.00012396181975951408,
  "byte_3a": 0.00012396181975951408,
  "byte_7b": 0.00012396181975951408,
  "byte_8a": 0.00012396181975951408,
  "byte_9e": 0.00012396181975951408,
  "num_nodes": 341,
  "num_edges": 231,
  "avg_degree": 1.3548387096774193,
  "density": 0.0019924098671726754,
  "connected_components": 133,
  "avg_clustering": 0.06793743890518085,
  "timeline_sequence": [],
  "sourcecode": "pragma solidity ^0.4.23;\n\nlibrary SafeMathLib {\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b > 0);\n        uint256 c = a / b;\n        assert(a == b * c + a % b);\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract DateTimeLib {\n\n    struct _DateTime {\n        uint16 year;\n        uint8 month;\n        uint8 day;\n        uint8 hour;\n        uint8 minute;\n        uint8 second;\n        uint8 weekday;\n    }\n\n    uint constant DAY_IN_SECONDS = 86400;\n    uint constant YEAR_IN_SECONDS = 31536000;\n    uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n\n    uint constant HOUR_IN_SECONDS = 3600;\n    uint constant MINUTE_IN_SECONDS = 60;\n\n    uint16 constant ORIGIN_YEAR = 1970;\n\n    function isLeapYear(uint16 year) internal pure returns (bool) {\n        if (year % 4 != 0) {\n            return false;\n        }\n        if (year % 100 != 0) {\n            return true;\n        }\n        if (year % 400 != 0) {\n            return false;\n        }\n        return true;\n    }\n\n    function leapYearsBefore(uint year) internal pure returns (uint) {\n        year -= 1;\n        return year / 4 - year / 100 + year / 400;\n    }\n\n    function getDaysInMonth(uint8 month, uint16 year) internal pure returns (uint8) {\n        if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n            return 31;\n        }\n        else if (month == 4 || month == 6 || month == 9 || month == 11) {\n            return 30;\n        }\n        else if (isLeapYear(year)) {\n            return 29;\n        }\n        else {\n            return 28;\n        }\n    }\n\n    function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\n        uint secondsAccountedFor = 0;\n        uint buf;\n        uint8 i;\n\n        dt.year = getYear(timestamp);\n        buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n        secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n\n        uint secondsInMonth;\n        for (i = 1; i <= 12; i++) {\n            secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n            if (secondsInMonth + secondsAccountedFor > timestamp) {\n                dt.month = i;\n                break;\n            }\n            secondsAccountedFor += secondsInMonth;\n        }\n\n        for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n            if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n                dt.day = i;\n                break;\n            }\n            secondsAccountedFor += DAY_IN_SECONDS;\n        }\n        dt.hour = getHour(timestamp);\n        dt.minute = getMinute(timestamp);\n        dt.second = getSecond(timestamp);\n        dt.weekday = getWeekday(timestamp);\n    }\n\n    function getYear(uint timestamp) internal pure returns (uint16) {\n        uint secondsAccountedFor = 0;\n        uint16 year;\n        uint numLeapYears;\n\n        year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n        numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n\n        secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n        secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n\n        while (secondsAccountedFor > timestamp) {\n            if (isLeapYear(uint16(year - 1))) {\n                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n            }\n            else {\n                secondsAccountedFor -= YEAR_IN_SECONDS;\n            }\n            year -= 1;\n        }\n        return year;\n    }\n\n    function getMonth(uint timestamp) internal pure returns (uint8) {\n        return parseTimestamp(timestamp).month;\n    }\n\n    function getDay(uint timestamp) internal pure returns (uint8) {\n        return parseTimestamp(timestamp).day;\n    }\n\n    function getHour(uint timestamp) internal pure returns (uint8) {\n        return uint8((timestamp / 60 / 60) % 24);\n    }\n\n    function getMinute(uint timestamp) internal pure returns (uint8) {\n        return uint8((timestamp / 60) % 60);\n    }\n\n    function getSecond(uint timestamp) internal pure returns (uint8) {\n        return uint8(timestamp % 60);\n    }\n\n    function getWeekday(uint timestamp) internal pure returns (uint8) {\n        return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day) internal pure returns (uint timestamp) {\n        return toTimestamp(year, month, day, 0, 0, 0);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) internal pure returns (uint timestamp) {\n        return toTimestamp(year, month, day, hour, 0, 0);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) internal pure returns (uint timestamp) {\n        return toTimestamp(year, month, day, hour, minute, 0);\n    }\n\n    function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) internal pure returns (uint timestamp) {\n        uint16 i;\n        for (i = ORIGIN_YEAR; i < year; i++) {\n            if (isLeapYear(i)) {\n                timestamp += LEAP_YEAR_IN_SECONDS;\n            }\n            else {\n                timestamp += YEAR_IN_SECONDS;\n            }\n        }\n\n        uint8[12] memory monthDayCounts;\n        monthDayCounts[0] = 31;\n        if (isLeapYear(year)) {\n            monthDayCounts[1] = 29;\n        }\n        else {\n            monthDayCounts[1] = 28;\n        }\n        monthDayCounts[2] = 31;\n        monthDayCounts[3] = 30;\n        monthDayCounts[4] = 31;\n        monthDayCounts[5] = 30;\n        monthDayCounts[6] = 31;\n        monthDayCounts[7] = 31;\n        monthDayCounts[8] = 30;\n        monthDayCounts[9] = 31;\n        monthDayCounts[10] = 30;\n        monthDayCounts[11] = 31;\n\n        for (i = 1; i < month; i++) {\n            timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n        }\n\n        timestamp += DAY_IN_SECONDS * (day - 1);\n        timestamp += HOUR_IN_SECONDS * (hour);\n        timestamp += MINUTE_IN_SECONDS * (minute);\n        timestamp += second;\n\n        return timestamp;\n    }\n}\n\ninterface IERC20 {\n    \n    function totalSupply() external constant returns (uint256);\n    function balanceOf(address _owner) external constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) external returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n    function approve(address _spender, uint256 _value) external returns (bool success);\n    function allowance(address _owner, address _spender) external constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address _spender, uint256 _value);\n}\n\ncontract StandardToken is IERC20,DateTimeLib {\n\n    using SafeMathLib for uint256;\n\n    mapping(address => uint256) balances;\n\n    mapping(address => mapping(address => uint256)) allowed;\n    \n    string public constant symbol = \"APC\";\n    \n    string public constant name = \"AmpereX Coin\";\n    \n    uint _totalSupply = 10000000000 * 10 ** 6;\n    \n    uint8 public constant decimals = 6;\n    \n    function totalSupply() external constant returns (uint256) {\n        return _totalSupply;\n    }\n    \n    function balanceOf(address _owner) external constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        return transferInternal(msg.sender, _to, _value);\n    }\n\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\n        require(_value > 0 && balances[_from] >= _value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value > 0 && allowed[_from][msg.sender] >= _value && balances[_from] >= _value);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\ncontract LockableToken is StandardToken {\n    \n    address internal developerReservedAddress = 0x6e4890764aa2bba346459e2d6b811e26c9691704;\n    \n    uint[8] internal developerReservedUnlockTimes;\n    \n    uint256[8] internal developerReservedBalanceLimits;\n    \n    function getDeveloperReservedBalanceLimit() internal returns (uint256 balanceLimit) {\n        uint time = now;\n        for (uint index = 0; index < developerReservedUnlockTimes.length; index++) {\n            if (developerReservedUnlockTimes[index] == 0x0) {\n                continue;\n            }\n            if (time > developerReservedUnlockTimes[index]) {\n                developerReservedUnlockTimes[index] = 0x0;\n            } else {\n                return developerReservedBalanceLimits[index];\n            }\n        }\n        return 0;\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        return transferInternal(msg.sender, _to, _value);\n    }\n\n    function transferInternal(address _from, address _to, uint256 _value) internal returns (bool success) {\n        require(_from != 0x0 && _to != 0x0 && _value > 0x0);\n        if (_from == developerReservedAddress) {\n            uint256 balanceLimit = getDeveloperReservedBalanceLimit();\n            require(balances[_from].sub(balanceLimit) >= _value);\n        }\n        return super.transferInternal(_from, _to, _value);\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_from != 0x0 && _to != 0x0 && _value > 0x0);\n        if (_from == developerReservedAddress) {\n            uint256 balanceLimit = getDeveloperReservedBalanceLimit();\n            require(balances[_from].sub(balanceLimit) >= _value);\n        }\n        return super.transferFrom(_from, _to, _value);\n    }\n    \n    event UnlockTimeChanged(uint index, uint unlockTime, uint newUnlockTime);\n    event LockInfo(address indexed publicOfferingAddress, uint index, uint unlockTime, uint256 balanceLimit);\n}\n\ncontract TradeableToken is LockableToken {\n\n    address internal publicOfferingAddress = 0x0b83ed7c57c335dca9c978f78819a739ac67fd5d;\n\n    uint256 public exchangeRate = 100000;\n\n    function buy(address _beneficiary, uint256 _weiAmount) internal {\n        require(_beneficiary != 0x0);\n        require(publicOfferingAddress != 0x0);\n        require(exchangeRate > 0x0);\n        require(_weiAmount > 0x0);\n\n        uint256 exchangeToken = _weiAmount.mul(exchangeRate);\n        exchangeToken = exchangeToken.div(1 * 10 ** 12);\n\n        publicOfferingAddress.transfer(_weiAmount);\n        super.transferInternal(publicOfferingAddress, _beneficiary, exchangeToken);\n    }\n    \n    event ExchangeRateChanged(uint256 oldExchangeRate,uint256 newExchangeRate);\n}\n\ncontract OwnableToken is TradeableToken {\n    \n    address internal owner = 0x593841e27b7122ef48f7854c7e7e1d5a374f8bb3;\n    \n    mapping(address => uint) administrators;\n    \n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier onlyAdministrator() {\n        require(msg.sender == owner || administrators[msg.sender] > 0x0);\n        _;\n    }\n    \n    function transferOwnership(address _newOwner) onlyOwner public {\n        require(_newOwner != address(0));\n        owner = _newOwner;\n        emit OwnershipTransferred(owner, _newOwner);\n    }\n    \n    function addAdministrator(address _adminAddress) onlyOwner public {\n        require(_adminAddress != address(0));\n        require(administrators[_adminAddress] <= 0x0);\n        administrators[_adminAddress] = 0x1;\n        emit AddAdministrator(_adminAddress);\n    }\n    \n    function removeAdministrator(address _adminAddress) onlyOwner public {\n        require(_adminAddress != address(0));\n        require(administrators[_adminAddress] > 0x0);\n        administrators[_adminAddress] = 0x0;\n        emit RemoveAdministrator(_adminAddress);\n    }\n    \n    function setExchangeRate(uint256 _exchangeRate) public onlyAdministrator returns (bool success) {\n        require(_exchangeRate > 0x0);\n        uint256 oldExchangeRate = exchangeRate;\n        exchangeRate = _exchangeRate;\n        emit ExchangeRateChanged(oldExchangeRate, exchangeRate);\n        return true;\n    }\n    \n    function changeUnlockTime(uint _index, uint _unlockTime) public onlyAdministrator returns (bool success) {\n        require(_index >= 0x0 && _index < developerReservedUnlockTimes.length && _unlockTime > 0x0);\n        if(_index > 0x0) {\n            uint beforeUnlockTime = developerReservedUnlockTimes[_index - 1];\n            require(beforeUnlockTime == 0x0 || beforeUnlockTime < _unlockTime);\n        }\n        if(_index < developerReservedUnlockTimes.length - 1) {\n            uint afterUnlockTime = developerReservedUnlockTimes[_index + 1];\n            require(afterUnlockTime == 0x0 || _unlockTime < afterUnlockTime);\n        }\n        uint oldUnlockTime = developerReservedUnlockTimes[_index];\n        developerReservedUnlockTimes[_index] = _unlockTime;\n        emit UnlockTimeChanged(_index,oldUnlockTime,_unlockTime);\n        return true;\n    }\n    \n    function getDeveloperReservedLockInfo(uint _index) public onlyAdministrator returns (uint, uint256) {\n        require(_index >= 0x0 && _index < developerReservedUnlockTimes.length && _index < developerReservedBalanceLimits.length);\n        emit LockInfo(developerReservedAddress,_index,developerReservedUnlockTimes[_index],developerReservedBalanceLimits[_index]);\n        return (developerReservedUnlockTimes[_index], developerReservedBalanceLimits[_index]);\n    }\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event AddAdministrator(address indexed adminAddress);\n    event RemoveAdministrator(address indexed adminAddress);\n}\n\ncontract APC is OwnableToken {\n    \n    function APC() public {\n        balances[owner] = 5000000000 * 10 ** 6;\n        balances[publicOfferingAddress] = 3000000000 * 10 ** 6;\n\n        uint256 developerReservedBalance = 2000000000 * 10 ** 6;\n        balances[developerReservedAddress] = developerReservedBalance;\n        developerReservedUnlockTimes =\n        [\n        DateTimeLib.toTimestamp(2018, 6, 1),\n        DateTimeLib.toTimestamp(2018, 9, 1),\n        DateTimeLib.toTimestamp(2018, 12, 1),\n        DateTimeLib.toTimestamp(2019, 3, 1),\n        DateTimeLib.toTimestamp(2019, 6, 1),\n        DateTimeLib.toTimestamp(2019, 9, 1),\n        DateTimeLib.toTimestamp(2019, 12, 1),\n        DateTimeLib.toTimestamp(2020, 3, 1)\n        ];\n        developerReservedBalanceLimits = \n        [\n            developerReservedBalance,\n            developerReservedBalance - (developerReservedBalance / 8) * 1,\n            developerReservedBalance - (developerReservedBalance / 8) * 2,\n            developerReservedBalance - (developerReservedBalance / 8) * 3,\n            developerReservedBalance - (developerReservedBalance / 8) * 4,\n            developerReservedBalance - (developerReservedBalance / 8) * 5,\n            developerReservedBalance - (developerReservedBalance / 8) * 6,\n            developerReservedBalance - (developerReservedBalance / 8) * 7\n        ];\n    }\n    \n    function() public payable {\n        buy(msg.sender, msg.value);\n    }\n}"
}