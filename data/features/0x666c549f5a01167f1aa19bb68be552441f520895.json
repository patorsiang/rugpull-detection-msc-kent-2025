{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 SWAP1 DUP2 GT ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE PUSH1 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE DUP2 MLOAD DUP5 DUP2 MSTORE SWAP2 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 SHA3 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 DUP2 ADD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE SWAP3 DUP6 AND DUP3 MSTORE PUSH1 SWAP1 MSTORE SHA3 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SLOAD SWAP4 DUP4 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP2 SHA3 SLOAD SWAP1 SWAP2 SWAP1 DUP4 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP DUP3 DUP2 LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 DUP2 ADD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE SWAP2 DUP8 AND DUP2 MSTORE SHA3 DUP1 SLOAD DUP5 SWAP1 SUB SWAP1 SSTORE PUSH1 NOT DUP2 LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 DUP1 SLOAD DUP5 SWAP1 SUB SWAP1 SSTORE JUMPDEST DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLVALUE SWAP1 PUSH1 SWAP1 DUP5 MUL DIV DUP3 DUP2 DUP4 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP5 SWAP1 DUP2 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 DUP2 ADD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE CALLER DUP1 DUP5 MSTORE PUSH1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP1 MLOAD PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 PUSH1 SWAP4 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP4 POP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP1 ADDRESS BALANCE DUP1 ISZERO PUSH2 MUL SWAP2 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD SWAP2 DUP4 SWAP1 MSTORE SWAP1 SWAP2 SHA3 SLOAD ADD SWAP1 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH1 EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 DUP2 ADD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP9 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP7 AND DUP5 MSTORE DUP4 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP1 SLOAD DUP9 ADD SWAP1 SSTORE SWAP2 SLOAD DUP3 MLOAD DUP8 DUP2 MSTORE SWAP3 MLOAD SWAP4 SWAP5 AND SWAP3 PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 SWAP1 DUP2 SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 PUSH1 SLOAD MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 DUP2 ADD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP1 DUP5 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 DUP2 ADD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND DUP1 DUP5 MSTORE PUSH1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE DUP1 MLOAD SWAP3 DUP4 MSTORE SWAP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP1 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP STOP LOG1 PUSH6 SHA3 CHAINID PUSH9 DELEGATECALL XOR UNKNOWN_0xdb UNKNOWN_0xcd UNKNOWN_0x27 PUSH10 MOD SDIV INVALID_0x7d",
  "opcode_entropy": 4.7058002206933445,
  "opcode_count": 2208,
  "unique_opcodes": 67,
  "byte_entropy": 5.826259019656976,
  "byte_60": 0.11902587519025876,
  "byte_80": 0.04322678843226788,
  "byte_40": 0.013089802130898021,
  "byte_52": 0.03257229832572298,
  "byte_04": 0.011263318112633182,
  "byte_36": 0.0018264840182648401,
  "byte_10": 0.0036529680365296802,
  "byte_61": 0.038356164383561646,
  "byte_01": 0.040791476407914765,
  "byte_27": 0.0006088280060882801,
  "byte_57": 0.02313546423135464,
  "byte_63": 0.0076103500761035,
  "byte_ff": 0.00213089802130898,
  "byte_7c": 0.0006088280060882801,
  "byte_00": 0.046879756468797565,
  "byte_35": 0.00852359208523592,
  "byte_16": 0.02009132420091324,
  "byte_26": 0.00030441400304414006,
  "byte_dc": 0.0006088280060882801,
  "byte_ef": 0.0009132420091324201,
  "byte_81": 0.03866057838660578,
  "byte_14": 0.010350076103500762,
  "byte_2c": 0.00030441400304414006,
  "byte_06": 0.00426179604261796,
  "byte_fd": 0.0106544901065449,
  "byte_de": 0.00030441400304414006,
  "byte_03": 0.0289193302891933,
  "byte_64": 0.0012176560121765602,
  "byte_09": 0.0024353120243531205,
  "byte_5e": 0.00030441400304414006,
  "byte_a7": 0.0012176560121765602,
  "byte_b3": 0.0015220700152207,
  "byte_ee": 0.0009132420091324201,
  "byte_41": 0.0009132420091324201,
  "byte_bc": 0.0006088280060882801,
  "byte_ed": 0.0009132420091324201,
  "byte_02": 0.025266362252663623,
  "byte_12": 0.0012176560121765602,
  "byte_18": 0.0006088280060882801,
  "byte_0d": 0.0009132420091324201,
  "byte_dd": 0.0018264840182648401,
  "byte_38": 0.0012176560121765602,
  "byte_1f": 0.0006088280060882801,
  "byte_1e": 0.0015220700152207,
  "byte_c0": 0.0006088280060882801,
  "byte_29": 0.0009132420091324201,
  "byte_5f": 0.0006088280060882801,
  "byte_23": 0.0012176560121765602,
  "byte_b8": 0.00030441400304414006,
  "byte_72": 0.0015220700152207,
  "byte_77": 0.0009132420091324201,
  "byte_31": 0.0009132420091324201,
  "byte_3c": 0.00030441400304414006,
  "byte_e5": 0.0009132420091324201,
  "byte_67": 0.00030441400304414006,
  "byte_a1": 0.0012176560121765602,
  "byte_c3": 0.0006088280060882801,
  "byte_7e": 0.0006088280060882801,
  "byte_d2": 0.0006088280060882801,
  "byte_cc": 0.00030441400304414006,
  "byte_4c": 0.00030441400304414006,
  "byte_74": 0.00030441400304414006,
  "byte_3b": 0.0006088280060882801,
  "byte_d7": 0.0009132420091324201,
  "byte_53": 0.0009132420091324201,
  "byte_48": 0.0009132420091324201,
  "byte_44": 0.0015220700152207,
  "byte_a2": 0.0012176560121765602,
  "byte_f8": 0.0006088280060882801,
  "byte_59": 0.0006088280060882801,
  "byte_70": 0.0009132420091324201,
  "byte_a0": 0.01643835616438356,
  "byte_82": 0.0106544901065449,
  "byte_2e": 0.00030441400304414006,
  "byte_ad": 0.0015220700152207,
  "byte_4f": 0.0015220700152207,
  "byte_8d": 0.0009132420091324201,
  "byte_a5": 0.0006088280060882801,
  "byte_cb": 0.00030441400304414006,
  "byte_5b": 0.033181126331811264,
  "byte_73": 0.0006088280060882801,
  "byte_92": 0.008828006088280061,
  "byte_7a": 0.0012176560121765602,
  "byte_c4": 0.0012176560121765602,
  "byte_f5": 0.0018264840182648401,
  "byte_a4": 0.00030441400304414006,
  "byte_95": 0.0015220700152207,
  "byte_d8": 0.0009132420091324201,
  "byte_9b": 0.00213089802130898,
  "byte_c5": 0.00030441400304414006,
  "byte_a3": 0.00213089802130898,
  "byte_eb": 0.0006088280060882801,
  "byte_b0": 0.0015220700152207,
  "byte_da": 0.00030441400304414006,
  "byte_a9": 0.0006088280060882801,
  "byte_05": 0.0033485540334855404,
  "byte_9c": 0.00030441400304414006,
  "byte_bb": 0.00030441400304414006,
  "byte_f2": 0.0012176560121765602,
  "byte_b2": 0.0015220700152207,
  "byte_20": 0.027701674277016742,
  "byte_c7": 0.0009132420091324201,
  "byte_39": 0.0006088280060882801,
  "byte_3a": 0.0009132420091324201,
  "byte_62": 0.0006088280060882801,
  "byte_3e": 0.0006088280060882801,
  "byte_34": 0.006697108066971081,
  "byte_15": 0.017351598173515982,
  "byte_50": 0.026788432267884323,
  "byte_0a": 0.01856925418569254,
  "byte_24": 0.0024353120243531205,
  "byte_76": 0.0006088280060882801,
  "byte_56": 0.014611872146118721,
  "byte_51": 0.009741248097412482,
  "byte_91": 0.010958904109589041,
  "byte_90": 0.051445966514459665,
  "byte_f3": 0.0018264840182648401,
  "byte_79": 0.0015220700152207,
  "byte_83": 0.012785388127853882,
  "byte_85": 0.00426179604261796,
  "byte_e0": 0.00030441400304414006,
  "byte_19": 0.0009132420091324201,
  "byte_fa": 0.0012176560121765602,
  "byte_4d": 0.0024353120243531205,
  "byte_8c": 0.0006088280060882801,
  "byte_6b": 0.0006088280060882801,
  "byte_ae": 0.00030441400304414006,
  "byte_b6": 0.00030441400304414006,
  "byte_07": 0.006392694063926941,
  "byte_e1": 0.0006088280060882801,
  "byte_e3": 0.00030441400304414006,
  "byte_08": 0.0033485540334855404,
  "byte_2b": 0.0012176560121765602,
  "byte_46": 0.0012176560121765602,
  "byte_6d": 0.0006088280060882801,
  "byte_7f": 0.0030441400304414,
  "byte_88": 0.0027397260273972603,
  "byte_68": 0.0012176560121765602,
  "byte_d1": 0.0015220700152207,
  "byte_e6": 0.0006088280060882801,
  "byte_e9": 0.00030441400304414006,
  "byte_fe": 0.0012176560121765602,
  "byte_0b": 0.0018264840182648401,
  "byte_22": 0.00030441400304414006,
  "byte_0c": 0.0006088280060882801,
  "byte_6f": 0.0012176560121765602,
  "byte_54": 0.01796042617960426,
  "byte_33": 0.0060882800608828,
  "byte_11": 0.00213089802130898,
  "byte_d0": 0.00030441400304414006,
  "byte_84": 0.005479452054794521,
  "byte_86": 0.0027397260273972603,
  "byte_55": 0.005479452054794521,
  "byte_e8": 0.00030441400304414006,
  "byte_9f": 0.00030441400304414006,
  "byte_5d": 0.00030441400304414006,
  "byte_bf": 0.00030441400304414006,
  "byte_30": 0.0015220700152207,
  "byte_47": 0.00030441400304414006,
  "byte_66": 0.00030441400304414006,
  "byte_3f": 0.0009132420091324201,
  "byte_17": 0.00030441400304414006,
  "byte_42": 0.0012176560121765602,
  "byte_78": 0.0006088280060882801,
  "byte_ce": 0.0012176560121765602,
  "byte_c2": 0.0009132420091324201,
  "byte_97": 0.00030441400304414006,
  "byte_93": 0.0036529680365296802,
  "byte_69": 0.0012176560121765602,
  "byte_65": 0.0006088280060882801,
  "byte_6e": 0.00030441400304414006,
  "byte_87": 0.00213089802130898,
  "byte_94": 0.0012176560121765602,
  "byte_ec": 0.00030441400304414006,
  "byte_7d": 0.0012176560121765602,
  "byte_71": 0.0009132420091324201,
  "byte_f7": 0.00030441400304414006,
  "byte_c8": 0.0009132420091324201,
  "byte_b9": 0.0009132420091324201,
  "byte_25": 0.00030441400304414006,
  "byte_4e": 0.00030441400304414006,
  "byte_cf": 0.00030441400304414006,
  "byte_7b": 0.00030441400304414006,
  "byte_1b": 0.0006088280060882801,
  "byte_e2": 0.0009132420091324201,
  "byte_fc": 0.0012176560121765602,
  "byte_37": 0.0009132420091324201,
  "byte_aa": 0.0006088280060882801,
  "byte_f1": 0.0012176560121765602,
  "byte_28": 0.0015220700152207,
  "byte_5a": 0.0006088280060882801,
  "byte_d4": 0.0006088280060882801,
  "byte_af": 0.00030441400304414006,
  "byte_f0": 0.0006088280060882801,
  "byte_45": 0.00030441400304414006,
  "byte_58": 0.0006088280060882801,
  "byte_1c": 0.00030441400304414006,
  "byte_49": 0.00030441400304414006,
  "byte_c9": 0.0006088280060882801,
  "byte_32": 0.0006088280060882801,
  "byte_8b": 0.00030441400304414006,
  "byte_98": 0.00030441400304414006,
  "byte_6a": 0.0006088280060882801,
  "byte_b4": 0.00030441400304414006,
  "byte_3d": 0.0009132420091324201,
  "byte_e4": 0.00030441400304414006,
  "byte_ab": 0.0006088280060882801,
  "byte_fb": 0.00030441400304414006,
  "byte_b5": 0.00030441400304414006,
  "byte_8a": 0.0006088280060882801,
  "byte_0e": 0.0006088280060882801,
  "byte_d3": 0.00030441400304414006,
  "byte_6c": 0.00030441400304414006,
  "byte_89": 0.00030441400304414006,
  "byte_ac": 0.00030441400304414006,
  "byte_21": 0.00030441400304414006,
  "byte_9d": 0.00030441400304414006,
  "byte_1d": 0.00030441400304414006,
  "byte_cd": 0.0006088280060882801,
  "byte_a6": 0.0006088280060882801,
  "byte_f4": 0.00030441400304414006,
  "byte_db": 0.00030441400304414006,
  "byte_d9": 0.00030441400304414006,
  "num_nodes": 10,
  "num_edges": 10,
  "avg_degree": 2.0,
  "density": 0.1111111111111111,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 27,
  "event_nums": 1000,
  "creation_block": 6433616,
  "creation_timestamp": 1538400099,
  "life_time": 10949.0,
  "duration_seconds": 154062.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 11,
  "num_buyers": 2,
  "num_sellers": 10,
  "num_creator_transfers": 2,
  "buy_amt": 1.8783e+20,
  "sell_amt": 1.8783e+20,
  "avg_value": 1.3416428571428571e+19,
  "txn_per_block": 0.002465753424657534,
  "avg_gas_limit": 112610.66666666667,
  "std_gas_limit": 201029.84817554205,
  "avg_gas_used": 76005.62962962964,
  "std_gas_used": 189137.4425780732,
  "avg_gas_price": 39629629629.62963,
  "std_gas_price": 16662550932.1511,
  "transfer_num": 1,
  "selllockedbalance_num": 15,
  "spendlockedbalance_num": 984,
  "atinversebrah_num": 1,
  "sellgamelockedtoken_num": 15,
  "withdrawamount_num": 2,
  "approvecontractreceivegamelockedtoken_num": 6,
  "freegamelockedtoken_num": 1,
  "timeline_sequence": [
    [
      6433616,
      1538400099,
      0,
      4,
      0,
      1038172,
      50000000000,
      0,
      1,
      1196180,
      1038172,
      16687574
    ],
    [
      6437901,
      1538459787,
      1,
      5,
      300000000000000000,
      50596,
      50000000000,
      0,
      1,
      202808,
      50596,
      16683289
    ],
    [
      6437934,
      1538460314,
      1,
      8,
      0,
      32343,
      50000000000,
      0,
      1,
      329121,
      30088,
      16683256
    ],
    [
      6438763,
      1538472757,
      3,
      11,
      0,
      43739,
      50000000000,
      0,
      1,
      584739,
      43739,
      16682427
    ],
    [
      6438840,
      1538473846,
      4,
      8,
      30000000000000000,
      80000,
      50000000000,
      0,
      1,
      235147,
      50596,
      16682350
    ],
    [
      6438890,
      1538474725,
      5,
      15,
      270000000000000000,
      80000,
      50000000000,
      0,
      1,
      587476,
      35596,
      16682300
    ],
    [
      6438955,
      1538475678,
      11,
      5,
      300000000000000000,
      80000,
      50000000000,
      0,
      1,
      188959,
      35596,
      16682235
    ],
    [
      6439017,
      1538476672,
      19,
      1,
      300000000000000000,
      80000,
      50000000000,
      0,
      1,
      636714,
      35596,
      16682173
    ],
    [
      6439489,
      1538482812,
      32,
      8,
      30000000000000000,
      80000,
      50000000000,
      0,
      1,
      234515,
      35596,
      16681701
    ],
    [
      6439506,
      1538483083,
      4,
      8,
      0,
      43739,
      20000000000,
      0,
      1,
      330313,
      43739,
      16681684
    ],
    [
      6439508,
      1538483131,
      5,
      17,
      0,
      43739,
      20000000000,
      0,
      1,
      630933,
      43739,
      16681682
    ],
    [
      6439510,
      1538483150,
      6,
      14,
      0,
      43739,
      20000000000,
      0,
      1,
      717797,
      43739,
      16681680
    ],
    [
      6439512,
      1538483195,
      7,
      48,
      0,
      43739,
      20000000000,
      0,
      1,
      1742601,
      43739,
      16681678
    ],
    [
      6439513,
      1538483201,
      8,
      58,
      0,
      43739,
      20000000000,
      0,
      1,
      2001196,
      43739,
      16681677
    ],
    [
      6439516,
      1538483321,
      33,
      65,
      30000000000000000,
      80000,
      50000000000,
      0,
      1,
      1548792,
      35596,
      16681674
    ],
    [
      6439674,
      1538485331,
      0,
      16,
      48000000000000000000,
      80000,
      50000000000,
      0,
      1,
      582631,
      50596,
      16681516
    ],
    [
      6439863,
      1538487646,
      0,
      61,
      90000000000000000,
      80000,
      50000000000,
      0,
      1,
      1591736,
      50596,
      16681327
    ],
    [
      6439875,
      1538487839,
      0,
      13,
      49980000000000000000,
      80000,
      50000000000,
      0,
      1,
      541539,
      50660,
      16681315
    ],
    [
      6439928,
      1538488490,
      1,
      93,
      39900000000000000000,
      80000,
      50000000000,
      0,
      1,
      2206079,
      35660,
      16681262
    ],
    [
      6439929,
      1538488537,
      4,
      18,
      24000000000000000000,
      80000,
      50000000000,
      0,
      1,
      471868,
      50660,
      16681261
    ],
    [
      6439949,
      1538488785,
      0,
      32,
      24000000000000000000,
      80000,
      50000000000,
      0,
      1,
      861017,
      50660,
      16681241
    ],
    [
      6440071,
      1538490742,
      0,
      22,
      300000000000000000,
      80000,
      50000000000,
      0,
      1,
      1036558,
      50596,
      16681119
    ],
    [
      6440091,
      1538490984,
      1,
      13,
      300000000000000000,
      80000,
      50000000000,
      0,
      1,
      719606,
      35596,
      16681099
    ],
    [
      6440130,
      1538491626,
      8,
      40,
      0,
      32343,
      20000000000,
      0,
      1,
      4038487,
      30088,
      16681060
    ],
    [
      6444565,
      1538554161,
      9,
      4,
      0,
      500000,
      50000000000,
      0,
      1,
      150167,
      37174,
      16676625
    ],
    [
      6437934,
      1538460314,
      0,
      0,
      300000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6440130,
      1538491626,
      0,
      0,
      187530000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity >=0.4.18;\n\ncontract Token {\n\n    /// @return total amount of tokens\n    function totalSupply() public constant returns (uint supply) {}\n\n    /// @param _owner The address from which the balance will be retrieved\n    /// @return The balance\n    function balanceOf(address _owner) public constant returns (uint balance) {}\n\n    /// @notice send `_value` token to `_to` from `msg.sender`\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transfer(address _to, uint _value) public returns (bool success) {}\n\n    /// @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`\n    /// @param _from The address of the sender\n    /// @param _to The address of the recipient\n    /// @param _value The amount of token to be transferred\n    /// @return Whether the transfer was successful or not\n    function transferFrom(address _from, address _to, uint _value)  public returns (bool success) {}\n\n    /// @notice `msg.sender` approves `_addr` to spend `_value` tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @param _value The amount of wei to be approved for transfer\n    /// @return Whether the approval was successful or not\n    function approve(address _spender, uint _value) public returns (bool success) {}\n\n    /// @param _owner The address of the account owning tokens\n    /// @param _spender The address of the account able to transfer the tokens\n    /// @return Amount of remaining tokens allowed to spent\n    function allowance(address _owner, address _spender) public constant returns (uint remaining) {}\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n}\n\ncontract RegularToken is Token {\n    mapping (address => uint256) balances;\n    //gaming locked balance\n    mapping (address => uint256) lockedBalances;\n    mapping (address => mapping (address => uint)) allowed;\n    uint public totalSupply;\n    /// @dev only transfer unlockedbalance\n    function transfer(address _to, uint _value)  public returns (bool) {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        if (balances[msg.sender] >= _value  && balances[_to] + _value >= balances[_to]) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n    function transferFrom(address _from, address _to, uint _value) public returns (bool) {\n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value >= balances[_to]) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function balanceOf(address _owner)  public constant returns (uint) {\n        return balances[_owner] + lockedBalances[_owner];\n    }\n\n    function approve(address _spender, uint _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender)  public constant returns (uint) {\n        return allowed[_owner][_spender];\n    }\n\n\n}\n\n\ncontract A5DToken is RegularToken {\n    uint256 private keyprice = 3;\n    uint256 public totalSupply = 100000000*10**18;\n    uint8 constant public decimals = 18;\n    string constant public name = \"5D Bid Tokens\";\n    string constant public symbol = \"5D\";\n    mapping (address => uint) allowedContract;\n    address public owner;\n    address public communityWallet;\n    \n    function A5DToken()  public {\n        communityWallet = 0x44729e029f9c63798805e6142bc696bdbc69f70d;\n        owner = msg.sender;\n        balances[msg.sender] = totalSupply;\n        Transfer(address(0), msg.sender, totalSupply);\n    }\n    //events\n    event SellLockedBalance(address indexed _owner, uint256 _amount);\n    event FreeLockedBalance(address indexed _owner, address _to,uint256 _amount);\n    event UnlockBalance(address indexed _owner, uint256 _amount);\n    event SpendLockedBalance(address indexed _owner,address indexed spender, uint256 _amount);\n\n    uint constant MAX_UINT = 2**256 - 1;\n    \n    modifier onlyOwner {\n        require (msg.sender == owner);\n        _;\n    }\n    modifier onlyAllowedContract {\n        require (allowedContract[msg.sender] == 1 || msg.sender == owner);\n        _;\n    }\n    \n    // function getallowedContracts(uint contractAddress) returns (uint){\n    //     return allowedContract[contractAddress];\n    // }\n    /// @dev ERC20 transferFrom, modified such that an allowance of MAX_UINT represents an unlimited amount.\n    /// @param _from Address to transfer from.\n    /// @param _to Address to transfer to.\n    /// @param _value Amount to transfer.\n    /// @return Success of transfer.\n    \n    function transferFrom(address _from, address _to, uint _value)\n        public\n        returns (bool)\n    {\n        uint allowance = allowed[_from][msg.sender];\n        if (balances[_from] >= _value\n            && allowance >= _value\n            && balances[_to] + _value >= balances[_to]\n        ) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            if (allowance < MAX_UINT) {\n                allowed[_from][msg.sender] -= _value;\n            }\n            Transfer(_from, _to, _value);\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    function unlockBalance(address _owner, uint256 _value)\n        public\n        onlyOwner()\n        returns (bool)\n        {\n        uint256 shouldUnlockedBalance = 0;\n        shouldUnlockedBalance = _value;\n        if(shouldUnlockedBalance > lockedBalances[_owner]){\n            shouldUnlockedBalance = lockedBalances[_owner];\n        }\n        balances[_owner] += shouldUnlockedBalance;\n        lockedBalances[_owner] -= shouldUnlockedBalance;\n        UnlockBalance(_owner, shouldUnlockedBalance);\n        return true;\n    }\n    \n    function withdrawAmount()\n        public  \n        {\n        require (msg.sender == communityWallet);\n        communityWallet.transfer(this.balance);\n    }\n    \n    function updateKeyPrice(uint256 updatePrice)\n        onlyOwner()\n        public  {\n        keyprice = updatePrice;\n    }\n    \n    function lockedBalanceOf(address _owner)\n        constant\n        public\n        returns (uint256 balance) {\n        return lockedBalances[_owner];\n    }\n    function UnlockedBalanceOf(address _owner) constant public returns (uint256 balance) {\n        return balances[_owner];\n    }\n    /// @dev for gaming only\n    function freeGameLockedToken(address _to, uint256 _value)\n    onlyOwner()\n    public\n    {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        if (balances[msg.sender] >= _value  && lockedBalances[_to] + _value >= lockedBalances[_to]) {\n            balances[msg.sender] -= _value;\n            lockedBalances[_to] += _value;\n            FreeLockedBalance(msg.sender, _to, _value);\n\n        }\n    }\n    \n    function getConsideration(uint256 keyquantity) view public returns(uint256){\n        uint256 consideration = keyprice * keyquantity /100;\n        return consideration;\n    }\n    \n    function sellGameLockedToken(uint256 keyquantity)\n    public\n    payable\n    returns (bool) \n    {\n        uint256 amount = msg.value;\n        uint256 consideration = keyprice * keyquantity /100;\n        require(amount >= consideration);\n        uint256 _value = keyquantity;\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        if (balances[owner] >= _value  && lockedBalances[msg.sender] + _value >= lockedBalances[msg.sender]) {\n            balances[owner] -= _value;\n            lockedBalances[msg.sender] += _value;\n            SellLockedBalance(msg.sender, _value);\n            return true;\n        } else { return false; }\n    }\n    \n    function approveContractReceiveGameLockedToken(address _from)\n    onlyOwner()\n    public\n    returns (bool)\n    {\n        allowedContract[_from] = 1;\n        return true;\n    }\n    \n    function spendGameLockedToken(address _from, uint256 _value)\n    public\n    onlyAllowedContract()\n    returns (bool) {\n        \n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        if (lockedBalances[_from] >= _value  && balances[owner] + _value >= balances[owner]) {\n            lockedBalances[_from] -= _value;\n            balances[owner] += _value;\n            SpendLockedBalance(owner, _from, _value);\n            return true;\n        } else { return false; }\n    }\n    \n    function jackPotGameLockedToken(address _to, uint256 _value)\n    onlyAllowedContract()\n    public\n    {\n        //Default assumes totalSupply can't be over max (2^256 - 1).\n        if (balances[owner] >= _value  && lockedBalances[_to] + _value >= lockedBalances[_to]) {\n            balances[owner] -= _value;\n            lockedBalances[_to] += _value;\n            }\n    }\n}"
}