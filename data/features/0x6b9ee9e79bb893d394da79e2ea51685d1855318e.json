{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND CALLER OR SWAP1 DUP2 SWAP1 SSTORE PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 SWAP1 SWAP2 AND SWAP1 PUSH1 SWAP1 PUSH32 SWAP1 DUP3 SWAP1 LOG3 PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN UNKNOWN_0xfe PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 DUP2 ADD CALLDATALOAD SWAP1 PUSH1 ADD CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND OR SWAP1 SSTORE PUSH2 DUP8 DUP8 DUP8 DUP8 DUP8 DUP8 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 SWAP2 PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH32 SWAP1 DUP4 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 DUP2 MSTORE PUSH1 SWAP4 DUP5 MSTORE PUSH1 DUP1 DUP6 SHA3 SWAP1 SWAP2 MSTORE SWAP2 DUP4 MSTORE SWAP2 SHA3 DUP1 SLOAD SWAP2 ADD SLOAD DUP3 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 TIMESTAMP GT PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE PUSH1 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP4 SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP PUSH2 PUSH1 SLOAD DUP3 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP4 POP PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP10 DUP2 AND PUSH1 DUP4 ADD MSTORE SWAP3 DUP4 AND PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP4 AND SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP4 ADD SWAP4 PUSH1 SWAP4 SWAP1 SWAP3 SWAP1 DUP4 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 DUP1 MLOAD DUP5 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP5 DUP2 AND PUSH1 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 SWAP5 DUP6 SWAP5 DUP6 SWAP5 SWAP4 SWAP1 SWAP2 AND SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP4 ADD SWAP4 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP DUP1 MLOAD PUSH1 SWAP1 SWAP2 ADD MLOAD SWAP1 SWAP3 POP SWAP1 POP PUSH1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND CALLER ADDRESS DUP10 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH2 DUP7 DUP7 CALLER DUP6 DUP6 PUSH2 JUMP JUMPDEST PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD DUP7 DUP2 MSTORE SWAP2 DUP3 ADD DUP6 SWAP1 MSTORE DUP3 MLOAD SWAP4 SWAP7 POP SWAP3 DUP7 SWAP3 PUSH32 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP5 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP6 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST DUP4 DUP4 GT PUSH2 JUMPI PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP6 SWAP1 SSTORE PUSH1 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP5 SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SSTORE JUMP JUMPDEST PUSH1 DUP3 ISZERO ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY DUP1 MLOAD PUSH1 SWAP2 DUP3 ADD SHA3 PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP12 AND PUSH1 DUP4 ADD MSTORE DUP10 AND PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD DUP10 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 SWAP1 SWAP2 ADD DUP3 MSTORE SWAP3 DUP4 ADD DUP1 MLOAD PUSH28 AND PUSH32 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR DUP3 MSTORE MLOAD DUP3 MLOAD SWAP1 SWAP2 DUP3 SWAP2 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 MLOAD SWAP2 POP PUSH1 NOT PUSH1 RETURNDATASIZE ADD AND DUP3 ADD PUSH1 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 PUSH1 DUP5 ADD RETURNDATACOPY PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 MLOAD ISZERO DUP1 PUSH2 JUMPI POP DUP1 MLOAD PUSH1 EQ DUP1 ISZERO PUSH2 JUMPI POP DUP1 PUSH1 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 ADD ADD MLOAD PUSH32 SWAP1 DUP2 SWAP1 DIV MUL PUSH32 AND ISZERO ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP7 GT PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 SLOAD DUP6 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP6 GT PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 SLOAD TIMESTAMP GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH13 ADDRESS MUL PUSH1 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD SHA3 SWAP1 PUSH2 SWAP1 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP1 DUP5 SHA3 DUP6 DUP6 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SWAP2 SHA3 DUP8 DUP2 SSTORE TIMESTAMP DUP8 ADD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP9 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH1 SSTORE PUSH1 PUSH2 DUP5 PUSH2 DUP8 PUSH2 DUP12 DUP14 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP2 SWAP1 SSTORE PUSH1 SLOAD SWAP1 DUP2 DUP2 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP10 DUP2 MSTORE PUSH1 DUP2 ADD DUP10 SWAP1 MSTORE DUP2 MLOAD DUP6 SWAP3 PUSH1 PUSH1 PUSH1 EXP SUB DUP11 AND SWAP3 PUSH32 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 DUP1 SLOAD DUP3 LT PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST DUP1 SLOAD PUSH1 DUP3 SSTORE PUSH1 DUP3 ADD SLOAD SWAP1 SWAP3 POP TIMESTAMP GT PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH3 MUL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND SWAP2 DUP6 SWAP2 PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 SWAP2 DUP3 ADD MSTORE DUP2 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP6 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP1 DUP4 ADD DUP7 SWAP1 MSTORE DUP5 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 SWAP1 SWAP3 ADD DUP5 MSTORE SWAP2 DUP2 ADD DUP1 MLOAD PUSH28 AND PUSH32 OR DUP2 MSTORE SWAP3 MLOAD DUP2 MLOAD PUSH1 SWAP5 PUSH1 SWAP5 DUP10 AND SWAP4 SWAP3 SWAP2 DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP7 GAS CALL SWAP2 POP POP RETURNDATASIZE DUP1 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 MLOAD SWAP2 POP PUSH1 NOT PUSH1 RETURNDATASIZE ADD AND DUP3 ADD PUSH1 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 PUSH1 DUP5 ADD RETURNDATACOPY PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP DUP2 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 MLOAD ISZERO DUP1 PUSH2 JUMPI POP DUP1 MLOAD PUSH1 EQ DUP1 ISZERO PUSH2 JUMPI POP DUP1 PUSH1 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 ADD ADD MLOAD PUSH32 SWAP1 DUP2 SWAP1 DIV MUL PUSH32 AND ISZERO ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 SWAP1 PUSH1 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SWAP1 EXTCODESIZE GT SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT UNKNOWN_0xfe PUSH21 PUSH5 UNKNOWN_0x2c PUSH22 PUSH19 PUSH21 PUSH21 PUSH15 SHA3 PUSH6 PUSH6 PUSH5 PUSH19 PUSH20 PUSH10 PUSH3 RETURNDATASIZE SHA3 PUSH14 PUSH5 PUSH14 PUSH13 LOG1 PUSH6 SHA3 ORIGIN UNKNOWN_0xc7 LOG0 SWAP5 SGT DUP2 UNKNOWN_0xc0 UNKNOWN_0xcc UNKNOWN_0xe3 EXTCODECOPY PUSH11 ADDRESS MSIZE SWAP15 SWAP4 PUSH5 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.891846784491285,
  "opcode_count": 3427,
  "unique_opcodes": 91,
  "byte_entropy": 6.005766451216185,
  "byte_0x": 0.00016523463317911433,
  "byte_60": 0.09765366820885657,
  "byte_80": 0.031725049570389956,
  "byte_40": 0.01255783212161269,
  "byte_52": 0.023793787177792465,
  "byte_34": 0.0006609385327164573,
  "byte_15": 0.015366820885657634,
  "byte_61": 0.03750826173165896,
  "byte_00": 0.08608724388631857,
  "byte_10": 0.004461335095836088,
  "byte_57": 0.01635822868473232,
  "byte_fd": 0.009087904824851289,
  "byte_5b": 0.026437541308658295,
  "byte_50": 0.02247191011235955,
  "byte_0d": 0.002313284864507601,
  "byte_54": 0.009253139458030404,
  "byte_01": 0.03883013879709187,
  "byte_a0": 0.00760079312623926,
  "byte_02": 0.01834104428288169,
  "byte_0a": 0.013218770654329148,
  "byte_03": 0.018836748182419035,
  "byte_19": 0.002974223397224058,
  "byte_16": 0.015036351619299405,
  "byte_33": 0.0011566424322538005,
  "byte_17": 0.0019828155981493722,
  "byte_90": 0.036351619299405155,
  "byte_81": 0.02594183740912095,
  "byte_55": 0.0039656311962987445,
  "byte_51": 0.017019167217448776,
  "byte_91": 0.017349636483807006,
  "byte_7f": 0.005452742894910773,
  "byte_8b": 0.0011566424322538005,
  "byte_e0": 0.0018175809649702578,
  "byte_07": 0.002974223397224058,
  "byte_9c": 0.0006609385327164573,
  "byte_53": 0.0008261731658955717,
  "byte_59": 0.0008261731658955717,
  "byte_14": 0.006774619960343688,
  "byte_13": 0.0016523463317911435,
  "byte_44": 0.003304692663582287,
  "byte_cd": 0.0036351619299405157,
  "byte_1f": 0.002313284864507601,
  "byte_d0": 0.0004957038995373431,
  "byte_a4": 0.0004957038995373431,
  "byte_f2": 0.0009914077990746861,
  "byte_84": 0.005452742894910773,
  "byte_49": 0.0004957038995373431,
  "byte_97": 0.0011566424322538005,
  "byte_22": 0.0011566424322538005,
  "byte_a3": 0.0016523463317911435,
  "byte_da": 0.0006609385327164573,
  "byte_af": 0.0006609385327164573,
  "byte_e3": 0.0011566424322538005,
  "byte_b4": 0.0009914077990746861,
  "byte_18": 0.0009914077990746861,
  "byte_6f": 0.00875743555849306,
  "byte_6b": 0.0031394580304031725,
  "byte_64": 0.008261731658955718,
  "byte_82": 0.019167217448777262,
  "byte_37": 0.00033046926635822867,
  "byte_6c": 0.005122273628552544,
  "byte_39": 0.001487111698612029,
  "byte_f3": 0.0008261731658955717,
  "byte_fe": 0.001487111698612029,
  "byte_04": 0.009253139458030404,
  "byte_36": 0.0018175809649702578,
  "byte_6a": 0.0008261731658955717,
  "byte_35": 0.00380039656311963,
  "byte_7c": 0.00033046926635822867,
  "byte_63": 0.010740251156642433,
  "byte_95": 0.0004957038995373431,
  "byte_a2": 0.0008261731658955717,
  "byte_25": 0.0011566424322538005,
  "byte_11": 0.004130865829477859,
  "byte_c3": 0.0008261731658955717,
  "byte_48": 0.0006609385327164573,
  "byte_4b": 0.00033046926635822867,
  "byte_99": 0.00033046926635822867,
  "byte_fa": 0.0004957038995373431,
  "byte_d3": 0.00033046926635822867,
  "byte_5c": 0.0004957038995373431,
  "byte_f7": 0.00016523463317911433,
  "byte_d7": 0.00033046926635822867,
  "byte_c2": 0.0006609385327164573,
  "byte_ee": 0.00016523463317911433,
  "byte_c7": 0.0026437541308658294,
  "byte_e8": 0.0004957038995373431,
  "byte_88": 0.0008261731658955717,
  "byte_ed": 0.00033046926635822867,
  "byte_f6": 0.00033046926635822867,
  "byte_d8": 0.00016523463317911433,
  "byte_7d": 0.0004957038995373431,
  "byte_85": 0.0036351619299405157,
  "byte_56": 0.014540647719762063,
  "byte_ac": 0.00016523463317911433,
  "byte_a8": 0.00016523463317911433,
  "byte_30": 0.002313284864507601,
  "byte_d2": 0.00033046926635822867,
  "byte_3c": 0.0004957038995373431,
  "byte_bf": 0.0004957038995373431,
  "byte_f4": 0.0011566424322538005,
  "byte_45": 0.0008261731658955717,
  "byte_e2": 0.00033046926635822867,
  "byte_c0": 0.0004957038995373431,
  "byte_06": 0.0016523463317911435,
  "byte_71": 0.0006609385327164573,
  "byte_9f": 0.00033046926635822867,
  "byte_ea": 0.0009914077990746861,
  "byte_20": 0.02742894910773298,
  "byte_1a": 0.0006609385327164573,
  "byte_dd": 0.00033046926635822867,
  "byte_5a": 0.0013218770654329147,
  "byte_ef": 0.0004957038995373431,
  "byte_e6": 0.0004957038995373431,
  "byte_32": 0.001487111698612029,
  "byte_a6": 0.00033046926635822867,
  "byte_76": 0.0011566424322538005,
  "byte_0f": 0.001487111698612029,
  "byte_1d": 0.00016523463317911433,
  "byte_83": 0.006939854593522803,
  "byte_42": 0.0009914077990746861,
  "byte_43": 0.00016523463317911433,
  "byte_8d": 0.0006609385327164573,
  "byte_a5": 0.0004957038995373431,
  "byte_cb": 0.0008261731658955717,
  "byte_8f": 0.00033046926635822867,
  "byte_d5": 0.00016523463317911433,
  "byte_9b": 0.0004957038995373431,
  "byte_b6": 0.0006609385327164573,
  "byte_e7": 0.0004957038995373431,
  "byte_2c": 0.0013218770654329147,
  "byte_3d": 0.003304692663582287,
  "byte_78": 0.0004957038995373431,
  "byte_74": 0.005452742894910773,
  "byte_db": 0.00033046926635822867,
  "byte_d9": 0.0011566424322538005,
  "byte_ec": 0.0006609385327164573,
  "byte_89": 0.0018175809649702578,
  "byte_12": 0.0006609385327164573,
  "byte_05": 0.0016523463317911435,
  "byte_bd": 0.0004957038995373431,
  "byte_ab": 0.00033046926635822867,
  "byte_e1": 0.0006609385327164573,
  "byte_92": 0.006609385327164574,
  "byte_1e": 0.0004957038995373431,
  "byte_2d": 0.00033046926635822867,
  "byte_a9": 0.00033046926635822867,
  "byte_ca": 0.00016523463317911433,
  "byte_98": 0.0004957038995373431,
  "byte_f8": 0.00016523463317911433,
  "byte_08": 0.001487111698612029,
  "byte_4a": 0.0004957038995373431,
  "byte_47": 0.00016523463317911433,
  "byte_62": 0.0056179775280898875,
  "byte_68": 0.003304692663582287,
  "byte_b3": 0.00016523463317911433,
  "byte_be": 0.00033046926635822867,
  "byte_0e": 0.0016523463317911435,
  "byte_73": 0.006278916060806345,
  "byte_ff": 0.0356906807666887,
  "byte_87": 0.002478519497686715,
  "byte_0c": 0.0034699272967614013,
  "byte_0b": 0.001487111698612029,
  "byte_93": 0.002974223397224058,
  "byte_46": 0.0036351619299405157,
  "byte_e5": 0.0034699272967614013,
  "byte_1b": 0.00380039656311963,
  "byte_24": 0.0028089887640449437,
  "byte_6e": 0.005783212161269002,
  "byte_77": 0.0008261731658955717,
  "byte_3e": 0.002478519497686715,
  "byte_72": 0.005122273628552544,
  "byte_65": 0.009583608724388631,
  "byte_6d": 0.002974223397224058,
  "byte_69": 0.005122273628552544,
  "byte_75": 0.0031394580304031725,
  "byte_e9": 0.00016523463317911433,
  "byte_4d": 0.0008261731658955717,
  "byte_86": 0.002478519497686715,
  "byte_3b": 0.0011566424322538005,
  "byte_a1": 0.00033046926635822867,
  "byte_f9": 0.0004957038995373431,
  "byte_94": 0.0028089887640449437,
  "byte_b2": 0.0004957038995373431,
  "byte_f1": 0.0004957038995373431,
  "byte_70": 0.0011566424322538005,
  "byte_28": 0.0009914077990746861,
  "byte_38": 0.00033046926635822867,
  "byte_27": 0.00033046926635822867,
  "byte_d1": 0.0004957038995373431,
  "byte_de": 0.00033046926635822867,
  "byte_8a": 0.00033046926635822867,
  "byte_2e": 0.00016523463317911433,
  "byte_67": 0.0021480502313284866,
  "byte_09": 0.0016523463317911435,
  "byte_41": 0.0004957038995373431,
  "byte_9d": 0.00033046926635822867,
  "byte_7e": 0.0004957038995373431,
  "byte_96": 0.00016523463317911433,
  "byte_ae": 0.00033046926635822867,
  "byte_2a": 0.00016523463317911433,
  "byte_cc": 0.00033046926635822867,
  "byte_b7": 0.00033046926635822867,
  "byte_26": 0.00033046926635822867,
  "byte_4e": 0.00016523463317911433,
  "byte_f5": 0.00016523463317911433,
  "byte_aa": 0.00016523463317911433,
  "byte_c6": 0.00016523463317911433,
  "byte_29": 0.0008261731658955717,
  "byte_7b": 0.0004957038995373431,
  "byte_79": 0.00016523463317911433,
  "byte_7a": 0.0006609385327164573,
  "byte_3a": 0.00033046926635822867,
  "byte_5f": 0.00016523463317911433,
  "byte_3f": 0.00033046926635822867,
  "byte_1c": 0.0004957038995373431,
  "byte_fb": 0.00016523463317911433,
  "byte_ce": 0.00016523463317911433,
  "byte_9a": 0.00016523463317911433,
  "byte_c1": 0.00033046926635822867,
  "byte_b0": 0.00016523463317911433,
  "byte_ba": 0.00016523463317911433,
  "byte_31": 0.00016523463317911433,
  "byte_23": 0.00016523463317911433,
  "byte_8e": 0.00016523463317911433,
  "byte_66": 0.0006609385327164573,
  "byte_eb": 0.00016523463317911433,
  "byte_a7": 0.00016523463317911433,
  "byte_fc": 0.00016523463317911433,
  "byte_bb": 0.00016523463317911433,
  "byte_d6": 0.00016523463317911433,
  "byte_4c": 0.00016523463317911433,
  "byte_58": 0.00016523463317911433,
  "byte_9e": 0.00016523463317911433,
  "byte_4f": 0.00016523463317911433,
  "byte_cf": 0.00016523463317911433,
  "num_nodes": 6,
  "num_edges": 5,
  "avg_degree": 1.6666666666666667,
  "density": 0.16666666666666666,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 12,
  "event_nums": 15,
  "creation_block": 7172599,
  "creation_timestamp": 1549270394,
  "life_time": 1035242.0,
  "duration_seconds": 14626773.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 7,
  "num_buyers": 1,
  "num_sellers": 5,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 1.1591481420304218e-05,
  "avg_gas_limit": 1233193.3333333333,
  "std_gas_limit": 2356669.6634181445,
  "avg_gas_used": 236552.75,
  "std_gas_used": 428662.2671344589,
  "avg_gas_price": 5783333333.333333,
  "std_gas_price": 2692530821.034779,
  "ownershiptransferred_num": 1,
  "locktoken_num": 4,
  "release_num": 4,
  "atinversebrah_num": 1,
  "initialize_num": 1,
  "lock_num": 4,
  "redeem_num": 2,
  "timeline_sequence": [
    [
      7172599,
      1549270394,
      96,
      34,
      0,
      6500000,
      10000000000,
      0,
      1,
      3115496,
      1642867,
      15919485
    ],
    [
      7172602,
      1549270444,
      97,
      13,
      0,
      6500000,
      10000000000,
      0,
      1,
      700744,
      187968,
      15919482
    ],
    [
      7177680,
      1549359286,
      87,
      99,
      0,
      349180,
      3000000000,
      0,
      1,
      4388852,
      232787,
      15914404
    ],
    [
      7177703,
      1549359540,
      88,
      80,
      0,
      83425,
      4000000000,
      0,
      1,
      5249486,
      27809,
      15914381
    ],
    [
      7177718,
      1549359870,
      89,
      134,
      0,
      259372,
      5000000000,
      0,
      1,
      5824351,
      157915,
      15914366
    ],
    [
      7179522,
      1549391600,
      49,
      4,
      0,
      257848,
      4400000000,
      0,
      1,
      308151,
      156899,
      15912562
    ],
    [
      7179530,
      1549391998,
      51,
      109,
      0,
      212944,
      4000000000,
      0,
      1,
      4428398,
      111963,
      15912554
    ],
    [
      7201462,
      1549780139,
      161,
      153,
      0,
      181123,
      4000000000,
      0,
      1,
      6716586,
      105355,
      15890622
    ],
    [
      7201466,
      1549780233,
      162,
      85,
      0,
      162441,
      4000000000,
      0,
      1,
      3713534,
      93285,
      15890618
    ],
    [
      7206918,
      1549892419,
      164,
      49,
      0,
      83425,
      9000000000,
      0,
      1,
      5150533,
      27809,
      15885166
    ],
    [
      7206935,
      1549892687,
      57,
      152,
      0,
      104377,
      9000000000,
      0,
      1,
      6540284,
      54552,
      15885149
    ],
    [
      8207841,
      1563897167,
      172,
      52,
      0,
      104185,
      3000000000,
      0,
      1,
      3920341,
      39424,
      14884243
    ]
  ],
  "sourcecode": "pragma solidity ^0.5.2;\n\n// File: openzeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n     * account.\n     */\n    constructor () internal {\n        _owner = msg.sender;\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @return the address of the owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(isOwner());\n        _;\n    }\n\n    /**\n     * @return true if `msg.sender` is the owner of the contract.\n     */\n    function isOwner() public view returns (bool) {\n        return msg.sender == _owner;\n    }\n\n    /**\n     * @dev Allows the current owner to relinquish control of the contract.\n     * @notice Renouncing to ownership will leave the contract without an owner.\n     * It will not be possible to call the functions with the `onlyOwner`\n     * modifier anymore.\n     */\n    function renounceOwnership() public onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Allows the current owner to transfer control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function transferOwnership(address newOwner) public onlyOwner {\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers control of the contract to a newOwner.\n     * @param newOwner The address to transfer ownership to.\n     */\n    function _transferOwnership(address newOwner) internal {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// File: @daostack/infra/contracts/Reputation.sol\n\n/**\n * @title Reputation system\n * @dev A DAO has Reputation System which allows peers to rate other peers in order to build trust .\n * A reputation is use to assign influence measure to a DAO'S peers.\n * Reputation is similar to regular tokens but with one crucial difference: It is non-transferable.\n * The Reputation contract maintain a map of address to reputation value.\n * It provides an onlyOwner functions to mint and burn reputation _to (or _from) a specific address.\n */\n\ncontract Reputation is Ownable {\n\n    uint8 public decimals = 18;             //Number of decimals of the smallest unit\n    // Event indicating minting of reputation to an address.\n    event Mint(address indexed _to, uint256 _amount);\n    // Event indicating burning of reputation for an address.\n    event Burn(address indexed _from, uint256 _amount);\n\n      /// @dev `Checkpoint` is the structure that attaches a block number to a\n      ///  given value, the block number attached is the one that last changed the\n      ///  value\n    struct Checkpoint {\n\n    // `fromBlock` is the block number that the value was generated from\n        uint128 fromBlock;\n\n          // `value` is the amount of reputation at a specific block number\n        uint128 value;\n    }\n\n      // `balances` is the map that tracks the balance of each address, in this\n      //  contract when the balance changes the block number that the change\n      //  occurred is also included in the map\n    mapping (address => Checkpoint[]) balances;\n\n      // Tracks the history of the `totalSupply` of the reputation\n    Checkpoint[] totalSupplyHistory;\n\n    /// @notice Constructor to create a Reputation\n    constructor(\n    ) public\n    {\n    }\n\n    /// @dev This function makes it easy to get the total number of reputation\n    /// @return The total number of reputation\n    function totalSupply() public view returns (uint256) {\n        return totalSupplyAt(block.number);\n    }\n\n  ////////////////\n  // Query balance and totalSupply in History\n  ////////////////\n    /**\n    * @dev return the reputation amount of a given owner\n    * @param _owner an address of the owner which we want to get his reputation\n    */\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balanceOfAt(_owner, block.number);\n    }\n\n      /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\n      /// @param _owner The address from which the balance will be retrieved\n      /// @param _blockNumber The block number when the balance is queried\n      /// @return The balance at `_blockNumber`\n    function balanceOfAt(address _owner, uint256 _blockNumber)\n    public view returns (uint256)\n    {\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\n            return 0;\n          // This will return the expected balance during normal situations\n        } else {\n            return getValueAt(balances[_owner], _blockNumber);\n        }\n    }\n\n      /// @notice Total amount of reputation at a specific `_blockNumber`.\n      /// @param _blockNumber The block number when the totalSupply is queried\n      /// @return The total amount of reputation at `_blockNumber`\n    function totalSupplyAt(uint256 _blockNumber) public view returns(uint256) {\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\n            return 0;\n          // This will return the expected totalSupply during normal situations\n        } else {\n            return getValueAt(totalSupplyHistory, _blockNumber);\n        }\n    }\n\n      /// @notice Generates `_amount` reputation that are assigned to `_owner`\n      /// @param _user The address that will be assigned the new reputation\n      /// @param _amount The quantity of reputation generated\n      /// @return True if the reputation are generated correctly\n    function mint(address _user, uint256 _amount) public onlyOwner returns (bool) {\n        uint256 curTotalSupply = totalSupply();\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\n        uint256 previousBalanceTo = balanceOf(_user);\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\n        updateValueAtNow(balances[_user], previousBalanceTo + _amount);\n        emit Mint(_user, _amount);\n        return true;\n    }\n\n      /// @notice Burns `_amount` reputation from `_owner`\n      /// @param _user The address that will lose the reputation\n      /// @param _amount The quantity of reputation to burn\n      /// @return True if the reputation are burned correctly\n    function burn(address _user, uint256 _amount) public onlyOwner returns (bool) {\n        uint256 curTotalSupply = totalSupply();\n        uint256 amountBurned = _amount;\n        uint256 previousBalanceFrom = balanceOf(_user);\n        if (previousBalanceFrom < amountBurned) {\n            amountBurned = previousBalanceFrom;\n        }\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - amountBurned);\n        updateValueAtNow(balances[_user], previousBalanceFrom - amountBurned);\n        emit Burn(_user, amountBurned);\n        return true;\n    }\n\n  ////////////////\n  // Internal helper functions to query and set a value in a snapshot array\n  ////////////////\n\n      /// @dev `getValueAt` retrieves the number of reputation at a given block number\n      /// @param checkpoints The history of values being queried\n      /// @param _block The block number to retrieve the value at\n      /// @return The number of reputation being queried\n    function getValueAt(Checkpoint[] storage checkpoints, uint256 _block) internal view returns (uint256) {\n        if (checkpoints.length == 0) {\n            return 0;\n        }\n\n          // Shortcut for the actual value\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock) {\n            return checkpoints[checkpoints.length-1].value;\n        }\n        if (_block < checkpoints[0].fromBlock) {\n            return 0;\n        }\n\n          // Binary search of the value in the array\n        uint256 min = 0;\n        uint256 max = checkpoints.length-1;\n        while (max > min) {\n            uint256 mid = (max + min + 1) / 2;\n            if (checkpoints[mid].fromBlock<=_block) {\n                min = mid;\n            } else {\n                max = mid-1;\n            }\n        }\n        return checkpoints[min].value;\n    }\n\n      /// @dev `updateValueAtNow` used to update the `balances` map and the\n      ///  `totalSupplyHistory`\n      /// @param checkpoints The history of data being updated\n      /// @param _value The new number of reputation\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint256 _value) internal {\n        require(uint128(_value) == _value); //check value is in the 128 bits bounderies\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\n            newCheckPoint.fromBlock = uint128(block.number);\n            newCheckPoint.value = uint128(_value);\n        } else {\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];\n            oldCheckPoint.value = uint128(_value);\n        }\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ninterface IERC20 {\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address who) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// File: openzeppelin-solidity/contracts/math/SafeMath.sol\n\n/**\n * @title SafeMath\n * @dev Unsigned math operations with safety checks that revert on error\n */\nlibrary SafeMath {\n    /**\n    * @dev Multiplies two unsigned integers, reverts on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b);\n\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n    * @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n    * @dev Adds two unsigned integers, reverts on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n\n        return c;\n    }\n\n    /**\n    * @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n    * reverts when dividing by zero.\n    */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\n * Originally based on code by FirstBlood:\n * https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n *\n * This implementation emits additional Approval events, allowing applications to reconstruct the allowance status for\n * all accounts just by listening to said events. Note that this isn't required by the specification, and other\n * compliant implementations may not do it.\n */\ncontract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    mapping (address => uint256) private _balances;\n\n    mapping (address => mapping (address => uint256)) private _allowed;\n\n    uint256 private _totalSupply;\n\n    /**\n    * @dev Total number of tokens in existence\n    */\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param owner The address to query the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address owner) public view returns (uint256) {\n        return _balances[owner];\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param owner address The address which owns the funds.\n     * @param spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n    /**\n    * @dev Transfer token for a specified address\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function transfer(address to, uint256 value) public returns (bool) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param spender The address which will spend the funds.\n     * @param value The amount of tokens to be spent.\n     */\n    function approve(address spender, uint256 value) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    /**\n     * @dev Transfer tokens from one address to another.\n     * Note that while this function emits an Approval event, this is not required as per the specification,\n     * and other compliant implementations may not emit the event.\n     * @param from address The address which you want to send tokens from\n     * @param to address The address which you want to transfer to\n     * @param value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        emit Approval(from, msg.sender, _allowed[from][msg.sender]);\n        return true;\n    }\n\n    /**\n     * @dev Increase the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param addedValue The amount of tokens to increase the allowance by.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].add(addedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n     * @dev Decrease the amount of tokens that an owner allowed to a spender.\n     * approve should be called when allowed_[_spender] == 0. To decrement\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     * Emits an Approval event.\n     * @param spender The address which will spend the funds.\n     * @param subtractedValue The amount of tokens to decrease the allowance by.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(spender != address(0));\n\n        _allowed[msg.sender][spender] = _allowed[msg.sender][spender].sub(subtractedValue);\n        emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);\n        return true;\n    }\n\n    /**\n    * @dev Transfer token for a specified addresses\n    * @param from The address to transfer from.\n    * @param to The address to transfer to.\n    * @param value The amount to be transferred.\n    */\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n\n        _balances[from] = _balances[from].sub(value);\n        _balances[to] = _balances[to].add(value);\n        emit Transfer(from, to, value);\n    }\n\n    /**\n     * @dev Internal function that mints an amount of the token and assigns it to\n     * an account. This encapsulates the modification of balances such that the\n     * proper events are emitted.\n     * @param account The account that will receive the created tokens.\n     * @param value The amount that will be created.\n     */\n    function _mint(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.add(value);\n        _balances[account] = _balances[account].add(value);\n        emit Transfer(address(0), account, value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account.\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burn(address account, uint256 value) internal {\n        require(account != address(0));\n\n        _totalSupply = _totalSupply.sub(value);\n        _balances[account] = _balances[account].sub(value);\n        emit Transfer(account, address(0), value);\n    }\n\n    /**\n     * @dev Internal function that burns an amount of the token of a given\n     * account, deducting from the sender's allowance for said account. Uses the\n     * internal burn function.\n     * Emits an Approval event (reflecting the reduced allowance).\n     * @param account The account whose tokens will be burnt.\n     * @param value The amount that will be burnt.\n     */\n    function _burnFrom(address account, uint256 value) internal {\n        _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(value);\n        _burn(account, value);\n        emit Approval(account, msg.sender, _allowed[account][msg.sender]);\n    }\n}\n\n// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol\n\n/**\n * @title Burnable Token\n * @dev Token that can be irreversibly burned (destroyed).\n */\ncontract ERC20Burnable is ERC20 {\n    /**\n     * @dev Burns a specific amount of tokens.\n     * @param value The amount of token to be burned.\n     */\n    function burn(uint256 value) public {\n        _burn(msg.sender, value);\n    }\n\n    /**\n     * @dev Burns a specific amount of tokens from the target address and decrements allowance\n     * @param from address The address which you want to send tokens from\n     * @param value uint256 The amount of token to be burned\n     */\n    function burnFrom(address from, uint256 value) public {\n        _burnFrom(from, value);\n    }\n}\n\n// File: contracts/controller/DAOToken.sol\n\n/**\n * @title DAOToken, base on zeppelin contract.\n * @dev ERC20 compatible token. It is a mintable, burnable token.\n */\n\ncontract DAOToken is ERC20, ERC20Burnable, Ownable {\n\n    string public name;\n    string public symbol;\n    // solhint-disable-next-line const-name-snakecase\n    uint8 public constant decimals = 18;\n    uint256 public cap;\n\n    /**\n    * @dev Constructor\n    * @param _name - token name\n    * @param _symbol - token symbol\n    * @param _cap - token cap - 0 value means no cap\n    */\n    constructor(string memory _name, string memory _symbol, uint256 _cap)\n    public {\n        name = _name;\n        symbol = _symbol;\n        cap = _cap;\n    }\n\n    /**\n     * @dev Function to mint tokens\n     * @param _to The address that will receive the minted tokens.\n     * @param _amount The amount of tokens to mint.\n     */\n    function mint(address _to, uint256 _amount) public onlyOwner returns (bool) {\n        if (cap > 0)\n            require(totalSupply().add(_amount) <= cap);\n        _mint(_to, _amount);\n        return true;\n    }\n}\n\n// File: openzeppelin-solidity/contracts/utils/Address.sol\n\n/**\n * Utility library of inline functions on addresses\n */\nlibrary Address {\n    /**\n     * Returns whether the target address is a contract\n     * @dev This function will return false if invoked during the constructor of a contract,\n     * as the code is not actually created until after the constructor finishes.\n     * @param account address of the account to check\n     * @return whether the target address is a contract\n     */\n    function isContract(address account) internal view returns (bool) {\n        uint256 size;\n        // XXX Currently there is no better way to check if there is a contract in an address\n        // than to check the size of the code at that address.\n        // See https://ethereum.stackexchange.com/a/14016/36603\n        // for more details about how this works.\n        // TODO Check this again before the Serenity release, because all addresses will be\n        // contracts then.\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n}\n\n// File: contracts/libs/SafeERC20.sol\n\n/*\n\nSafeERC20 by daostack.\nThe code is based on a fix by SECBIT Team.\n\nUSE WITH CAUTION & NO WARRANTY\n\nREFERENCE & RELATED READING\n- https://github.com/ethereum/solidity/issues/4116\n- https://medium.com/@chris_77367/explaining-unexpected-reverts-starting-with-solidity-0-4-22-3ada6e82308c\n- https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\n- https://gist.github.com/BrendanChou/88a2eeb80947ff00bcf58ffdafeaeb61\n\n*/\npragma solidity ^0.5.2;\n\n\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    bytes4 constant private TRANSFER_SELECTOR = bytes4(keccak256(bytes(\"transfer(address,uint256)\")));\n    bytes4 constant private TRANSFERFROM_SELECTOR = bytes4(keccak256(bytes(\"transferFrom(address,address,uint256)\")));\n    bytes4 constant private APPROVE_SELECTOR = bytes4(keccak256(bytes(\"approve(address,uint256)\")));\n\n    function safeTransfer(address _erc20Addr, address _to, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract());\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFER_SELECTOR, _to, _value));\n        // call return false when something wrong\n        require(success);\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\n    }\n\n    function safeTransferFrom(address _erc20Addr, address _from, address _to, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract());\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(TRANSFERFROM_SELECTOR, _from, _to, _value));\n        // call return false when something wrong\n        require(success);\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\n    }\n\n    function safeApprove(address _erc20Addr, address _spender, uint256 _value) internal {\n\n        // Must be a contract addr first!\n        require(_erc20Addr.isContract());\n\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero.\n        require((_value == 0) || (IERC20(_erc20Addr).allowance(msg.sender, _spender) == 0));\n\n        (bool success, bytes memory returnValue) =\n        // solhint-disable-next-line avoid-low-level-calls\n        _erc20Addr.call(abi.encodeWithSelector(APPROVE_SELECTOR, _spender, _value));\n        // call return false when something wrong\n        require(success);\n        //check return value\n        require(returnValue.length == 0 || (returnValue.length == 32 && (returnValue[31] != 0)));\n    }\n}\n\n// File: contracts/controller/Avatar.sol\n\n/**\n * @title An Avatar holds tokens, reputation and ether for a controller\n */\ncontract Avatar is Ownable {\n    using SafeERC20 for address;\n\n    string public orgName;\n    DAOToken public nativeToken;\n    Reputation public nativeReputation;\n\n    event GenericCall(address indexed _contract, bytes _params, bool _success);\n    event SendEther(uint256 _amountInWei, address indexed _to);\n    event ExternalTokenTransfer(address indexed _externalToken, address indexed _to, uint256 _value);\n    event ExternalTokenTransferFrom(address indexed _externalToken, address _from, address _to, uint256 _value);\n    event ExternalTokenApproval(address indexed _externalToken, address _spender, uint256 _value);\n    event ReceiveEther(address indexed _sender, uint256 _value);\n\n    /**\n    * @dev the constructor takes organization name, native token and reputation system\n    and creates an avatar for a controller\n    */\n    constructor(string memory _orgName, DAOToken _nativeToken, Reputation _nativeReputation) public {\n        orgName = _orgName;\n        nativeToken = _nativeToken;\n        nativeReputation = _nativeReputation;\n    }\n\n    /**\n    * @dev enables an avatar to receive ethers\n    */\n    function() external payable {\n        emit ReceiveEther(msg.sender, msg.value);\n    }\n\n    /**\n    * @dev perform a generic call to an arbitrary contract\n    * @param _contract  the contract's address to call\n    * @param _data ABI-encoded contract call to call `_contract` address.\n    * @return bool    success or fail\n    *         bytes - the return bytes of the called contract's function.\n    */\n    function genericCall(address _contract, bytes memory _data)\n    public\n    onlyOwner\n    returns(bool success, bytes memory returnValue) {\n      // solhint-disable-next-line avoid-low-level-calls\n        (success, returnValue) = _contract.call(_data);\n        emit GenericCall(_contract, _data, success);\n    }\n\n    /**\n    * @dev send ethers from the avatar's wallet\n    * @param _amountInWei amount to send in Wei units\n    * @param _to send the ethers to this address\n    * @return bool which represents success\n    */\n    function sendEther(uint256 _amountInWei, address payable _to) public onlyOwner returns(bool) {\n        _to.transfer(_amountInWei);\n        emit SendEther(_amountInWei, _to);\n        return true;\n    }\n\n    /**\n    * @dev external token transfer\n    * @param _externalToken the token contract\n    * @param _to the destination address\n    * @param _value the amount of tokens to transfer\n    * @return bool which represents success\n    */\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value)\n    public onlyOwner returns(bool)\n    {\n        address(_externalToken).safeTransfer(_to, _value);\n        emit ExternalTokenTransfer(address(_externalToken), _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev external token transfer from a specific account\n    * @param _externalToken the token contract\n    * @param _from the account to spend token from\n    * @param _to the destination address\n    * @param _value the amount of tokens to transfer\n    * @return bool which represents success\n    */\n    function externalTokenTransferFrom(\n        IERC20 _externalToken,\n        address _from,\n        address _to,\n        uint256 _value\n    )\n    public onlyOwner returns(bool)\n    {\n        address(_externalToken).safeTransferFrom(_from, _to, _value);\n        emit ExternalTokenTransferFrom(address(_externalToken), _from, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\n    * @return bool which represents a success\n    */\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value)\n    public onlyOwner returns(bool)\n    {\n        address(_externalToken).safeApprove(_spender, _value);\n        emit ExternalTokenApproval(address(_externalToken), _spender, _value);\n        return true;\n    }\n\n}\n\n// File: contracts/globalConstraints/GlobalConstraintInterface.sol\n\ncontract GlobalConstraintInterface {\n\n    enum CallPhase { Pre, Post, PreAndPost }\n\n    function pre( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n    function post( address _scheme, bytes32 _params, bytes32 _method ) public returns(bool);\n    /**\n     * @dev when return if this globalConstraints is pre, post or both.\n     * @return CallPhase enum indication  Pre, Post or PreAndPost.\n     */\n    function when() public returns(CallPhase);\n}\n\n// File: contracts/controller/ControllerInterface.sol\n\n/**\n * @title Controller contract\n * @dev A controller controls the organizations tokens ,reputation and avatar.\n * It is subject to a set of schemes and constraints that determine its behavior.\n * Each scheme has it own parameters and operation permissions.\n */\ninterface ControllerInterface {\n\n    /**\n     * @dev Mint `_amount` of reputation that are assigned to `_to` .\n     * @param  _amount amount of reputation to mint\n     * @param _to beneficiary address\n     * @return bool which represents a success\n    */\n    function mintReputation(uint256 _amount, address _to, address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev Burns `_amount` of reputation from `_from`\n     * @param _amount amount of reputation to burn\n     * @param _from The address that will lose the reputation\n     * @return bool which represents a success\n     */\n    function burnReputation(uint256 _amount, address _from, address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev mint tokens .\n     * @param  _amount amount of token to mint\n     * @param _beneficiary beneficiary address\n     * @param _avatar address\n     * @return bool which represents a success\n     */\n    function mintTokens(uint256 _amount, address _beneficiary, address _avatar)\n    external\n    returns(bool);\n\n  /**\n   * @dev register or update a scheme\n   * @param _scheme the address of the scheme\n   * @param _paramsHash a hashed configuration of the usage of the scheme\n   * @param _permissions the permissions the new scheme will have\n   * @param _avatar address\n   * @return bool which represents a success\n   */\n    function registerScheme(address _scheme, bytes32 _paramsHash, bytes4 _permissions, address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev unregister a scheme\n     * @param _avatar address\n     * @param _scheme the address of the scheme\n     * @return bool which represents a success\n     */\n    function unregisterScheme(address _scheme, address _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev unregister the caller's scheme\n     * @param _avatar address\n     * @return bool which represents a success\n     */\n    function unregisterSelf(address _avatar) external returns(bool);\n\n    /**\n     * @dev add or update Global Constraint\n     * @param _globalConstraint the address of the global constraint to be added.\n     * @param _params the constraint parameters hash.\n     * @param _avatar the avatar of the organization\n     * @return bool which represents a success\n     */\n    function addGlobalConstraint(address _globalConstraint, bytes32 _params, address _avatar)\n    external returns(bool);\n\n    /**\n     * @dev remove Global Constraint\n     * @param _globalConstraint the address of the global constraint to be remove.\n     * @param _avatar the organization avatar.\n     * @return bool which represents a success\n     */\n    function removeGlobalConstraint (address _globalConstraint, address _avatar)\n    external  returns(bool);\n\n  /**\n    * @dev upgrade the Controller\n    *      The function will trigger an event 'UpgradeController'.\n    * @param  _newController the address of the new controller.\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function upgradeController(address _newController, Avatar _avatar)\n    external returns(bool);\n\n    /**\n    * @dev perform a generic call to an arbitrary contract\n    * @param _contract  the contract's address to call\n    * @param _data ABI-encoded contract call to call `_contract` address.\n    * @param _avatar the controller's avatar address\n    * @return bool -success\n    *         bytes  - the return value of the called _contract's function.\n    */\n    function genericCall(address _contract, bytes calldata _data, Avatar _avatar)\n    external\n    returns(bool, bytes memory);\n\n  /**\n   * @dev send some ether\n   * @param _amountInWei the amount of ether (in Wei) to send\n   * @param _to address of the beneficiary\n   * @param _avatar address\n   * @return bool which represents a success\n   */\n    function sendEther(uint256 _amountInWei, address payable _to, Avatar _avatar)\n    external returns(bool);\n\n    /**\n    * @dev send some amount of arbitrary ERC20 Tokens\n    * @param _externalToken the address of the Token Contract\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenTransfer(IERC20 _externalToken, address _to, uint256 _value, Avatar _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev transfer token \"from\" address \"to\" address\n    *      One must to approve the amount of tokens which can be spend from the\n    *      \"from\" account.This can be done using externalTokenApprove.\n    * @param _externalToken the address of the Token Contract\n    * @param _from address of the account to send from\n    * @param _to address of the beneficiary\n    * @param _value the amount of ether (in Wei) to send\n    * @param _avatar address\n    * @return bool which represents a success\n    */\n    function externalTokenTransferFrom(\n    IERC20 _externalToken,\n    address _from,\n    address _to,\n    uint256 _value,\n    Avatar _avatar)\n    external\n    returns(bool);\n\n    /**\n    * @dev externalTokenApproval approve the spender address to spend a specified amount of tokens\n    *      on behalf of msg.sender.\n    * @param _externalToken the address of the Token Contract\n    * @param _spender address\n    * @param _value the amount of ether (in Wei) which the approval is referring to.\n    * @return bool which represents a success\n    */\n    function externalTokenApproval(IERC20 _externalToken, address _spender, uint256 _value, Avatar _avatar)\n    external\n    returns(bool);\n\n    /**\n     * @dev getNativeReputation\n     * @param _avatar the organization avatar.\n     * @return organization native reputation\n     */\n    function getNativeReputation(address _avatar)\n    external\n    view\n    returns(address);\n\n    function isSchemeRegistered( address _scheme, address _avatar) external view returns(bool);\n\n    function getSchemeParameters(address _scheme, address _avatar) external view returns(bytes32);\n\n    function getGlobalConstraintParameters(address _globalConstraint, address _avatar) external view returns(bytes32);\n\n    function getSchemePermissions(address _scheme, address _avatar) external view returns(bytes4);\n\n    /**\n     * @dev globalConstraintsCount return the global constraint pre and post count\n     * @return uint256 globalConstraintsPre count.\n     * @return uint256 globalConstraintsPost count.\n     */\n    function globalConstraintsCount(address _avatar) external view returns(uint, uint);\n\n    function isGlobalConstraintRegistered(address _globalConstraint, address _avatar) external view returns(bool);\n}\n\n// File: contracts/schemes/Locking4Reputation.sol\n\n/**\n * @title A locker contract\n */\n\ncontract Locking4Reputation {\n    using SafeMath for uint256;\n\n    event Redeem(address indexed _beneficiary, uint256 _amount);\n    event Release(bytes32 indexed _lockingId, address indexed _beneficiary, uint256 _amount);\n    event Lock(address indexed _locker, bytes32 indexed _lockingId, uint256 _amount, uint256 _period);\n\n    struct Locker {\n        uint256 amount;\n        uint256 releaseTime;\n    }\n\n    Avatar public avatar;\n\n    // A mapping from lockers addresses their lock balances.\n    mapping(address => mapping(bytes32=>Locker)) public lockers;\n    // A mapping from lockers addresses to their scores.\n    mapping(address => uint) public scores;\n\n    uint256 public totalLocked;\n    uint256 public totalLockedLeft;\n    uint256 public totalScore;\n    uint256 public lockingsCounter; // Total number of lockings\n    uint256 public reputationReward;\n    uint256 public reputationRewardLeft;\n    uint256 public lockingEndTime;\n    uint256 public maxLockingPeriod;\n    uint256 public lockingStartTime;\n    uint256 public redeemEnableTime;\n\n    /**\n     * @dev redeem reputation function\n     * @param _beneficiary the beneficiary for the release\n     * @return uint256 reputation rewarded\n     */\n    function redeem(address _beneficiary) public returns(uint256 reputation) {\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp > redeemEnableTime, \"now > redeemEnableTime\");\n        require(scores[_beneficiary] > 0, \"score should be > 0\");\n        uint256 score = scores[_beneficiary];\n        scores[_beneficiary] = 0;\n        uint256 repRelation = score.mul(reputationReward);\n        reputation = repRelation.div(totalScore);\n\n        //check that the reputation is sum zero\n        reputationRewardLeft = reputationRewardLeft.sub(reputation);\n        require(\n        ControllerInterface(\n        avatar.owner())\n        .mintReputation(reputation, _beneficiary, address(avatar)), \"mint reputation should succeed\");\n\n        emit Redeem(_beneficiary, reputation);\n    }\n\n    /**\n     * @dev release function\n     * @param _beneficiary the beneficiary for the release\n     * @param _lockingId the locking id to release\n     * @return bool\n     */\n    function _release(address _beneficiary, bytes32 _lockingId) internal returns(uint256 amount) {\n        Locker storage locker = lockers[_beneficiary][_lockingId];\n        require(locker.amount > 0, \"amount should be > 0\");\n        amount = locker.amount;\n        locker.amount = 0;\n        // solhint-disable-next-line not-rely-on-time\n        require(block.timestamp > locker.releaseTime, \"check the lock period pass\");\n        totalLockedLeft = totalLockedLeft.sub(amount);\n\n        emit Release(_lockingId, _beneficiary, amount);\n    }\n\n    /**\n     * @dev lock function\n     * @param _amount the amount to lock\n     * @param _period the locking period\n     * @param _locker the locker\n     * @param _numerator price numerator\n     * @param _denominator price denominator\n     * @return lockingId\n     */\n    function _lock(\n        uint256 _amount,\n        uint256 _period,\n        address _locker,\n        uint256 _numerator,\n        uint256 _denominator)\n        internal\n        returns(bytes32 lockingId)\n        {\n        require(_amount > 0, \"locking amount should be > 0\");\n        require(_period <= maxLockingPeriod, \"locking period should be <= maxLockingPeriod\");\n        require(_period > 0, \"locking period should be > 0\");\n        // solhint-disable-next-line not-rely-on-time\n        require(now <= lockingEndTime, \"lock should be within the allowed locking period\");\n        // solhint-disable-next-line not-rely-on-time\n        require(now >= lockingStartTime, \"lock should start after lockingStartTime\");\n\n        lockingId = keccak256(abi.encodePacked(address(this), lockingsCounter));\n        lockingsCounter = lockingsCounter.add(1);\n\n        Locker storage locker = lockers[_locker][lockingId];\n        locker.amount = _amount;\n        // solhint-disable-next-line not-rely-on-time\n        locker.releaseTime = now + _period;\n        totalLocked = totalLocked.add(_amount);\n        totalLockedLeft = totalLocked;\n        uint256 score = _period.mul(_amount).mul(_numerator).div(_denominator);\n        require(score > 0, \"score must me > 0\");\n        scores[_locker] = scores[_locker].add(score);\n        //verify that redeem will not overflow for this locker\n        require((scores[_locker] * reputationReward)/scores[_locker] == reputationReward,\n        \"score is too high\");\n        totalScore = totalScore.add(score);\n\n        emit Lock(_locker, lockingId, _amount, _period);\n    }\n\n    /**\n     * @dev _initialize\n     * @param _avatar the avatar to mint reputation from\n     * @param _reputationReward the total reputation this contract will reward\n     *        for eth/token locking\n     * @param _lockingStartTime the locking start time.\n     * @param _lockingEndTime the locking end time.\n     *        locking is disable after this time.\n     * @param _redeemEnableTime redeem enable time .\n     *        redeem reputation can be done after this time.\n     * @param _maxLockingPeriod maximum locking period allowed.\n     */\n    function _initialize(\n        Avatar _avatar,\n        uint256 _reputationReward,\n        uint256 _lockingStartTime,\n        uint256 _lockingEndTime,\n        uint256 _redeemEnableTime,\n        uint256 _maxLockingPeriod)\n    internal\n    {\n        require(avatar == Avatar(0), \"can be called only one time\");\n        require(_avatar != Avatar(0), \"avatar cannot be zero\");\n        require(_lockingEndTime > _lockingStartTime, \"locking end time should be greater than locking start time\");\n        require(_redeemEnableTime >= _lockingEndTime, \"redeemEnableTime >= lockingEndTime\");\n\n        reputationReward = _reputationReward;\n        reputationRewardLeft = _reputationReward;\n        lockingEndTime = _lockingEndTime;\n        maxLockingPeriod = _maxLockingPeriod;\n        avatar = _avatar;\n        lockingStartTime = _lockingStartTime;\n        redeemEnableTime = _redeemEnableTime;\n    }\n\n}\n\n// File: contracts/schemes/PriceOracleInterface.sol\n\ninterface PriceOracleInterface {\n\n    function getPrice(address token) external view returns (uint, uint);\n\n}\n\n// File: contracts/schemes/LockingToken4Reputation.sol\n\n/**\n * @title A scheme for locking ERC20 Tokens for reputation\n */\n\ncontract LockingToken4Reputation is Locking4Reputation, Ownable {\n    using SafeERC20 for address;\n\n    PriceOracleInterface public priceOracleContract;\n    //      lockingId => token\n    mapping(bytes32   => address) public lockedTokens;\n\n    event LockToken(bytes32 indexed _lockingId, address indexed _token, uint256 _numerator, uint256 _denominator);\n\n    /**\n     * @dev initialize\n     * @param _avatar the avatar to mint reputation from\n     * @param _reputationReward the total reputation this contract will reward\n     *        for the token locking\n     * @param _lockingStartTime locking starting period time.\n     * @param _lockingEndTime the locking end time.\n     *        locking is disable after this time.\n     * @param _redeemEnableTime redeem enable time .\n     *        redeem reputation can be done after this time.\n     * @param _maxLockingPeriod maximum locking period allowed.\n     * @param _priceOracleContract the price oracle contract which the locked token will be\n     *        validated against\n     */\n    function initialize(\n        Avatar _avatar,\n        uint256 _reputationReward,\n        uint256 _lockingStartTime,\n        uint256 _lockingEndTime,\n        uint256 _redeemEnableTime,\n        uint256 _maxLockingPeriod,\n        PriceOracleInterface _priceOracleContract)\n    external\n    onlyOwner\n    {\n        priceOracleContract = _priceOracleContract;\n        super._initialize(\n        _avatar,\n        _reputationReward,\n        _lockingStartTime,\n        _lockingEndTime,\n        _redeemEnableTime,\n        _maxLockingPeriod);\n    }\n\n    /**\n     * @dev release locked tokens\n     * @param _beneficiary the release _beneficiary\n     * @param _lockingId the locking id\n     * @return bool\n     */\n    function release(address _beneficiary, bytes32 _lockingId) public returns(bool) {\n        uint256 amount = super._release(_beneficiary, _lockingId);\n        lockedTokens[_lockingId].safeTransfer(_beneficiary, amount);\n\n        return true;\n    }\n\n    /**\n     * @dev lock function\n     * @param _amount the amount to lock\n     * @param _period the locking period\n     * @param _token the token to lock - this should be whitelisted at the priceOracleContract\n     * @return lockingId\n     */\n    function lock(uint256 _amount, uint256 _period, address _token) public returns(bytes32 lockingId) {\n\n        uint256 numerator;\n        uint256 denominator;\n\n        (numerator, denominator) = priceOracleContract.getPrice(_token);\n\n        require(numerator > 0, \"numerator should be > 0\");\n        require(denominator > 0, \"denominator should be > 0\");\n\n        _token.safeTransferFrom(msg.sender, address(this), _amount);\n\n        lockingId = super._lock(_amount, _period, msg.sender, numerator, denominator);\n\n        lockedTokens[lockingId] = _token;\n\n        emit LockToken(lockingId, _token, numerator, denominator);\n    }\n}\n\ncontract DxLockWhitelisted4Rep is LockingToken4Reputation {\n    // TODO: Extend the new LockWhitelisted4Rep once it's implemented\n    constructor() public {}\n}"
}