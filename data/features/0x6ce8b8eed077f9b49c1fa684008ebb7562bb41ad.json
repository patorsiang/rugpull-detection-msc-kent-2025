{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST JUMPDEST CALLER PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP TIMESTAMP PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 JUMPDEST PUSH1 SLOAD NUMBER LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI PUSH8 CALLVALUE EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ ISZERO PUSH2 JUMPI CALLVALUE PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLVALUE PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 REVERT JUMPDEST JUMPDEST JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 PUSH1 SLOAD NUMBER LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD ADDRESS PUSH20 AND BALANCE GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD ADDRESS PUSH20 AND BALANCE SUB SWAP1 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD DUP1 SWAP1 POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD NUMBER LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH1 SLOAD PUSH1 SLOAD LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH2 DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD DUP1 SWAP1 POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 PUSH1 SLOAD MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 SLOAD SUB SWAP1 POP DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD DUP1 SWAP1 POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD EQ JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND SELFDESTRUCT JUMPDEST JUMPDEST JUMPDEST JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 REVERT JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 NUMBER ADD DUP2 LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP DUP3 PUSH1 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST POP POP POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0x4b SWAP12 AND DUP12 SGT RETURNDATACOPY EXTCODESIZE UNKNOWN_0xa8 LOG3 SLOAD MOD NUMBER PUSH16 DIFFICULTY UNKNOWN_0xe9 INVALID_0x64",
  "opcode_entropy": 4.766496130702001,
  "opcode_count": 1649,
  "unique_opcodes": 67,
  "byte_entropy": 4.712782633737648,
  "byte_0x": 0.0003079765937788728,
  "byte_60": 0.07453033569448722,
  "byte_40": 0.011703110563597166,
  "byte_52": 0.01201108715737604,
  "byte_34": 0.006467508469356329,
  "byte_15": 0.018478595626732368,
  "byte_61": 0.03788112103480135,
  "byte_00": 0.04434862950415768,
  "byte_0c": 0.0006159531875577456,
  "byte_57": 0.017862642439174622,
  "byte_fe": 0.005851555281798583,
  "byte_5b": 0.03449337850323375,
  "byte_33": 0.004927625500461965,
  "byte_06": 0.0073914382506929475,
  "byte_01": 0.024946104096088696,
  "byte_0a": 0.010163227594702803,
  "byte_81": 0.025562057283646442,
  "byte_54": 0.015706806282722512,
  "byte_73": 0.015398829688943641,
  "byte_ff": 0.30705266399753617,
  "byte_02": 0.009547274407145057,
  "byte_19": 0.0018478595626732369,
  "byte_16": 0.018786572220511243,
  "byte_90": 0.037573144441022485,
  "byte_83": 0.003079765937788728,
  "byte_17": 0.0021558361564521095,
  "byte_55": 0.0070834616569140745,
  "byte_50": 0.0317215891592239,
  "byte_42": 0.0003079765937788728,
  "byte_09": 0.001539882968894364,
  "byte_0b": 0.0036957191253464737,
  "byte_2d": 0.0012319063751154912,
  "byte_80": 0.022482291345857715,
  "byte_39": 0.0003079765937788728,
  "byte_f3": 0.004927625500461965,
  "byte_36": 0.0006159531875577456,
  "byte_ef": 0.0006159531875577456,
  "byte_35": 0.0021558361564521095,
  "byte_7c": 0.0006159531875577456,
  "byte_04": 0.012627040344933785,
  "byte_63": 0.006159531875577456,
  "byte_05": 0.004003695719125347,
  "byte_8c": 0.0003079765937788728,
  "byte_51": 0.01108715737603942,
  "byte_03": 0.012319063751154912,
  "byte_14": 0.0076994148444718205,
  "byte_e3": 0.0006159531875577456,
  "byte_13": 0.0006159531875577456,
  "byte_22": 0.0003079765937788728,
  "byte_f5": 0.0006159531875577456,
  "byte_38": 0.0003079765937788728,
  "byte_af": 0.0003079765937788728,
  "byte_3e": 0.0009239297813366184,
  "byte_ed": 0.0003079765937788728,
  "byte_3f": 0.0006159531875577456,
  "byte_3c": 0.0003079765937788728,
  "byte_6d": 0.0003079765937788728,
  "byte_2e": 0.0003079765937788728,
  "byte_91": 0.011395133969818293,
  "byte_fd": 0.002771789344009855,
  "byte_4d": 0.0006159531875577456,
  "byte_db": 0.0009239297813366184,
  "byte_65": 0.0009239297813366184,
  "byte_93": 0.0012319063751154912,
  "byte_82": 0.008931321219587311,
  "byte_fb": 0.0009239297813366184,
  "byte_07": 0.0033877425315676007,
  "byte_7a": 0.0009239297813366184,
  "byte_3a": 0.0003079765937788728,
  "byte_0e": 0.0003079765937788728,
  "byte_84": 0.0003079765937788728,
  "byte_7b": 0.0006159531875577456,
  "byte_5e": 0.0003079765937788728,
  "byte_53": 0.0003079765937788728,
  "byte_8d": 0.0006159531875577456,
  "byte_a5": 0.0003079765937788728,
  "byte_cb": 0.0006159531875577456,
  "byte_79": 0.0003079765937788728,
  "byte_be": 0.0003079765937788728,
  "byte_b3": 0.0009239297813366184,
  "byte_cf": 0.0003079765937788728,
  "byte_d8": 0.0006159531875577456,
  "byte_27": 0.0009239297813366184,
  "byte_0d": 0.0009239297813366184,
  "byte_ce": 0.0003079765937788728,
  "byte_f1": 0.0018478595626732369,
  "byte_dd": 0.0003079765937788728,
  "byte_ca": 0.0003079765937788728,
  "byte_43": 0.0021558361564521095,
  "byte_0f": 0.0006159531875577456,
  "byte_df": 0.0003079765937788728,
  "byte_5c": 0.0006159531875577456,
  "byte_3d": 0.0009239297813366184,
  "byte_f2": 0.0003079765937788728,
  "byte_ec": 0.0006159531875577456,
  "byte_2c": 0.0006159531875577456,
  "byte_fc": 0.0012319063751154912,
  "byte_6f": 0.0006159531875577456,
  "byte_89": 0.0006159531875577456,
  "byte_6b": 0.0006159531875577456,
  "byte_7e": 0.0003079765937788728,
  "byte_f8": 0.0003079765937788728,
  "byte_c5": 0.0006159531875577456,
  "byte_e1": 0.0003079765937788728,
  "byte_10": 0.0021558361564521095,
  "byte_67": 0.0003079765937788728,
  "byte_e0": 0.0003079765937788728,
  "byte_b6": 0.0003079765937788728,
  "byte_a7": 0.0006159531875577456,
  "byte_64": 0.0006159531875577456,
  "byte_20": 0.015706806282722512,
  "byte_d2": 0.0003079765937788728,
  "byte_92": 0.001539882968894364,
  "byte_de": 0.0003079765937788728,
  "byte_56": 0.012627040344933785,
  "byte_eb": 0.0006159531875577456,
  "byte_29": 0.0009239297813366184,
  "byte_47": 0.0003079765937788728,
  "byte_4f": 0.0003079765937788728,
  "byte_6e": 0.0003079765937788728,
  "byte_99": 0.0006159531875577456,
  "byte_94": 0.0006159531875577456,
  "byte_ac": 0.0003079765937788728,
  "byte_b1": 0.0003079765937788728,
  "byte_b7": 0.0003079765937788728,
  "byte_bd": 0.0003079765937788728,
  "byte_c3": 0.0006159531875577456,
  "byte_d3": 0.0006159531875577456,
  "byte_e9": 0.0006159531875577456,
  "byte_f9": 0.0003079765937788728,
  "byte_1f": 0.0003079765937788728,
  "byte_45": 0.0006159531875577456,
  "byte_49": 0.0003079765937788728,
  "byte_bb": 0.0003079765937788728,
  "byte_cd": 0.0003079765937788728,
  "byte_4c": 0.0003079765937788728,
  "byte_30": 0.0009239297813366184,
  "byte_31": 0.0006159531875577456,
  "byte_11": 0.0006159531875577456,
  "byte_46": 0.0003079765937788728,
  "byte_08": 0.0021558361564521095,
  "byte_85": 0.0009239297813366184,
  "byte_88": 0.0021558361564521095,
  "byte_e2": 0.0003079765937788728,
  "byte_d7": 0.0006159531875577456,
  "byte_7d": 0.0006159531875577456,
  "byte_78": 0.0003079765937788728,
  "byte_dc": 0.0003079765937788728,
  "byte_9b": 0.0006159531875577456,
  "byte_24": 0.0003079765937788728,
  "byte_da": 0.0003079765937788728,
  "byte_e8": 0.0003079765937788728,
  "byte_28": 0.0003079765937788728,
  "byte_71": 0.0003079765937788728,
  "byte_a1": 0.0003079765937788728,
  "byte_62": 0.0003079765937788728,
  "byte_72": 0.0003079765937788728,
  "byte_58": 0.0003079765937788728,
  "byte_4b": 0.0003079765937788728,
  "byte_8b": 0.0003079765937788728,
  "byte_3b": 0.0003079765937788728,
  "byte_a8": 0.0003079765937788728,
  "byte_a3": 0.0006159531875577456,
  "byte_2a": 0.0003079765937788728,
  "byte_4a": 0.0003079765937788728,
  "byte_d0": 0.0003079765937788728,
  "byte_6c": 0.0003079765937788728,
  "byte_44": 0.0003079765937788728,
  "num_nodes": 5,
  "num_edges": 4,
  "avg_degree": 1.6,
  "density": 0.2,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 7,
  "event_nums": 0,
  "creation_block": 4130922,
  "creation_timestamp": 1502170712,
  "life_time": 13899305.0,
  "duration_seconds": 191261835.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 6,
  "num_buyers": 1,
  "num_sellers": 4,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 1e+18,
  "avg_value": 1.25e+17,
  "txn_per_block": 5.036222671836997e-07,
  "avg_gas_limit": 878462.2857142857,
  "std_gas_limit": 1067996.2452103223,
  "avg_gas_used": 532343.4285714285,
  "std_gas_used": 858743.051312433,
  "avg_gas_price": 17486057580.714287,
  "std_gas_price": 3615604364.1086903,
  "initialize_num": 3,
  "safewithdrawal_num": 1,
  "timeline_sequence": [
    [
      4130922,
      1502170712,
      4,
      23,
      0,
      934114,
      21000000000,
      0,
      0,
      1618645,
      934113,
      18961162
    ],
    [
      4132605,
      1502205516,
      5,
      20,
      0,
      2500000,
      20000000000,
      0,
      0,
      1048614,
      125267,
      18959479
    ],
    [
      4132633,
      1502206143,
      15,
      66,
      0,
      2500000,
      20000000000,
      1,
      0,
      5191986,
      2500000,
      18959451
    ],
    [
      4132633,
      1502206143,
      16,
      68,
      1000000000000000000,
      90000,
      20000000000,
      0,
      0,
      5275431,
      62445,
      18959451
    ],
    [
      4345474,
      1507400349,
      494,
      161,
      0,
      34680,
      12000000000,
      1,
      0,
      6133244,
      34680,
      18746610
    ],
    [
      4345479,
      1507400509,
      495,
      92,
      0,
      34680,
      12000000000,
      1,
      0,
      4302994,
      34680,
      18746605
    ],
    [
      18030227,
      1693432547,
      14,
      125,
      0,
      55762,
      17402403065,
      0,
      1,
      16043045,
      35219,
      5061857
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.1;\n\ncontract LeanFund {\n\n  // Poloniex Exchange Rate 2017-08-06: 266 USD / ETH\n  uint8 constant public version = 2;\n\n  address public beneficiary;\n\n  // These are for Ethereum backers only\n  mapping (address => uint) public contributionsETH;\n  mapping (address => uint) public payoutsETH;\n\n  uint public fundingGoal;     // in wei, the amount we're aiming for\n  uint public payoutETH;       // in wei, the amount withdrawn as fee\n  uint public amountRaised;    // in wei, the total amount raised\n\n  address public owner;\n  uint    public fee; // the contract fee is 1.5k USD, or ~5.63 ETH\n  uint    public feeWithdrawn; // in wei\n\n  uint public creationTime;\n  uint public deadlineBlockNumber;\n  bool public open;            // has the funding period started, and contract initialized\n\n  function LeanFund() {\n    owner = msg.sender;\n    creationTime = now;\n    open = false;\n  }\n\n  // We can only initialize once, but don't add beforeDeadline guard or check deadline\n  function initialize(uint _fundingGoalInWei, address _beneficiary, uint _deadlineBlockNumber) {\n    if (open || msg.sender != owner) throw; // we can only initialize once\n    if (_deadlineBlockNumber < block.number + 40) throw; // deadlines must be at least ten minutes hence\n    beneficiary = _beneficiary;\n    payoutETH = 0;\n    amountRaised = 0;\n    fee = 0;\n    feeWithdrawn = 0;\n    fundingGoal = _fundingGoalInWei;\n\n    // If we pass in a deadline in the past, set it to be 10 minutes from now.\n    deadlineBlockNumber = _deadlineBlockNumber;\n    open = true;\n  }\n\n  modifier beforeDeadline() { if ((block.number < deadlineBlockNumber) && open) _; else throw; }\n  modifier afterDeadline() { if ((block.number >= deadlineBlockNumber) && open) _; else throw; }\n\n  // Normal pay-in function, where msg.sender is the contributor\n  function() payable beforeDeadline {\n    if (msg.value != 1 ether) { throw; } // only accept payments of 1 ETH exactly\n    if (payoutsETH[msg.sender] == 0) { // defend against re-entrancy\n        contributionsETH[msg.sender] += msg.value; // allow multiple contributions\n        amountRaised += msg.value;\n    }\n  }\n\n  function getContribution() constant returns (uint retVal) {\n    return contributionsETH[msg.sender];\n  }\n\n  /* As a safeguard, if we were able to pay into account without being a contributor\n     allow contract owner to clean it up. */\n  function safeKill() afterDeadline {\n    if ((msg.sender == owner) && (this.balance > amountRaised)) {\n      uint amount = this.balance - amountRaised;\n      if (owner.send(amount)) {\n        open = false; // make this resettable to make testing easier\n      }\n    }\n  }\n\n  /* Each backer is responsible for their own safe withdrawal, because it costs gas */\n  function safeWithdrawal() afterDeadline {\n    uint amount = 0;\n    if (amountRaised < fundingGoal && payoutsETH[msg.sender] == 0) {\n      // Ethereum backers can only withdraw the full amount they put in, and only once\n      amount = contributionsETH[msg.sender];\n      payoutsETH[msg.sender] += amount;\n      contributionsETH[msg.sender] = 0;\n      if (!msg.sender.send(amount)) {\n        payoutsETH[msg.sender] = 0;\n        contributionsETH[msg.sender] = amount;\n      }\n    } else if (payoutETH == 0) {\n      // anyone can withdraw the crowdfunded amount to the beneficiary after the deadline\n      fee = amountRaised * 563 / 10000; // 5.63% fee, only after beneficiary has received payment\n      amount = amountRaised - fee;\n      payoutETH += amount;\n      if (!beneficiary.send(amount)) {\n        payoutETH = 0;\n      }\n    } else if (msg.sender == owner && feeWithdrawn == 0) {\n      // only the owner can withdraw the fee and any excess funds (rounding errors)\n      feeWithdrawn += fee;\n      selfdestruct(owner);\n    }\n  }\n\n}"
}