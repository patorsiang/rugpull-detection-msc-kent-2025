{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH3 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 CALLVALUE PUSH1 PUSH2 JUMP JUMPDEST POP STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 DUP2 CALLDATALOAD DUP2 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 DUP2 CALLDATALOAD DUP2 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP11 PUSH1 CALLER SWAP1 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH9 DUP3 PUSH2 PUSH2 JUMP JUMPDEST SUB GT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH8 SWAP1 DUP4 ADD GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE CALLER SWAP10 POP PUSH2 DUP14 PUSH1 PUSH2 JUMP JUMPDEST SWAP9 POP PUSH2 DUP10 PUSH1 PUSH2 JUMP JUMPDEST SWAP8 POP PUSH2 DUP10 DUP10 PUSH2 JUMP JUMPDEST SWAP7 POP PUSH2 DUP14 DUP11 PUSH2 JUMP JUMPDEST SWAP6 POP PUSH2 DUP7 PUSH2 JUMP JUMPDEST SWAP5 POP PUSH9 DUP8 MUL SWAP4 POP PUSH1 DUP6 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 DUP7 DUP3 PUSH2 JUMP JUMPDEST GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP13 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP DUP10 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP13 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP14 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP13 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP10 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP14 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP8 DUP10 PUSH2 JUMP JUMPDEST SWAP7 POP PUSH9 DUP8 MUL SWAP4 POP JUMPDEST PUSH1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD DUP7 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH9 DUP9 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 SLOAD PUSH9 DUP9 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP6 MUL DUP5 SUB DUP5 SUB SWAP4 POP PUSH2 JUMP JUMPDEST PUSH1 DUP6 SWAP1 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP13 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 DUP6 PUSH1 SLOAD MUL SUB SWAP3 POP DUP3 PUSH1 PUSH1 DUP13 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP12 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP11 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP16 DUP9 PUSH1 MLOAD SWAP2 DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP5 SWAP11 POP PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE CALLER SWAP10 POP PUSH2 DUP14 PUSH1 PUSH2 JUMP JUMPDEST SWAP9 POP PUSH2 DUP10 PUSH1 PUSH2 JUMP JUMPDEST SWAP8 POP PUSH2 DUP10 DUP10 PUSH2 JUMP JUMPDEST SWAP7 POP PUSH2 DUP14 DUP11 PUSH2 JUMP JUMPDEST SWAP6 POP PUSH2 DUP7 PUSH2 JUMP JUMPDEST SWAP5 POP PUSH9 DUP8 MUL SWAP4 POP PUSH1 DUP6 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 DUP7 DUP3 PUSH2 JUMP JUMPDEST GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP13 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP DUP10 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP13 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP14 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP13 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP10 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP14 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP8 DUP10 PUSH2 JUMP JUMPDEST SWAP7 POP PUSH9 DUP8 MUL SWAP4 POP JUMPDEST PUSH1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD DUP7 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH9 DUP9 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 SLOAD PUSH9 DUP9 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP6 MUL DUP5 SUB DUP5 SUB SWAP4 POP PUSH2 JUMP JUMPDEST PUSH1 DUP6 SWAP1 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP13 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 DUP6 PUSH1 SLOAD MUL SUB SWAP3 POP DUP3 PUSH1 PUSH1 DUP13 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP12 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP11 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP16 DUP9 PUSH1 MLOAD SWAP2 DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP5 SWAP11 POP JUMPDEST POP POP POP POP POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SHA3 SLOAD PUSH1 SLOAD PUSH9 SWAP2 MUL SWAP2 SWAP1 SWAP2 SUB DIV SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 PUSH2 DUP6 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP6 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SLOAD DUP6 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP4 PUSH1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH1 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 TIMESTAMP MOD LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER SWAP2 POP PUSH2 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH9 DUP8 MUL ADD SWAP1 SSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP1 SLOAD SWAP3 SWAP1 SSTORE SWAP3 ADD SWAP3 POP SWAP1 DUP3 ISZERO PUSH2 MUL SWAP1 DUP4 SWAP1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP3 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SLOAD PUSH1 EQ ISZERO PUSH2 JUMPI PUSH5 SWAP4 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH8 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP4 PUSH1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 SWAP4 POP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 CALLER DUP3 PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 DUP3 PUSH2 JUMP JUMPDEST ADD JUMPDEST SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SSTORE JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SLOAD PUSH1 EQ ISZERO PUSH2 JUMPI PUSH5 SWAP4 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH8 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP4 PUSH1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 TIMESTAMP MOD LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLER SWAP5 POP PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP7 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 PUSH1 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH2 DUP7 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP7 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 PUSH1 SLOAD DUP5 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP8 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP10 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP9 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP6 SWAP1 SWAP6 SSTORE PUSH1 DUP1 SLOAD SWAP5 DUP11 AND DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP5 DUP3 SHA3 DUP1 SLOAD SWAP5 DUP13 MUL SWAP1 SWAP5 SUB SWAP1 SWAP4 SSTORE DUP3 SLOAD SWAP2 DUP2 MSTORE SWAP3 SWAP1 SWAP3 SHA3 DUP1 SLOAD SWAP3 DUP6 MUL SWAP1 SWAP3 ADD SWAP1 SWAP2 SSTORE SLOAD PUSH1 SLOAD PUSH2 SWAP2 SWAP1 PUSH9 DUP5 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP9 AND SWAP1 DUP6 AND PUSH32 DUP5 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 DUP1 MLOAD PUSH2 SWAP3 SWAP2 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 DUP1 MLOAD PUSH2 SWAP3 SWAP2 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 TIMESTAMP MOD LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP7 POP DUP8 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP7 SWAP5 POP PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP5 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 SLOAD DUP7 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SLOAD PUSH1 SWAP1 SWAP2 MSTORE SWAP2 DUP2 SHA3 DUP1 SLOAD SWAP3 DUP9 MUL PUSH9 DUP7 MUL ADD SWAP3 DUP4 SWAP1 SUB SWAP1 SSTORE PUSH1 SLOAD SWAP2 SWAP3 POP SWAP1 GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH9 DUP7 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SSTORE JUMPDEST DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP7 DUP5 PUSH1 MLOAD SWAP2 DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 TIMESTAMP MOD LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP CALLER PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 TIMESTAMP MOD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLVALUE DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH2 PUSH1 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 TIMESTAMP MOD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH9 DUP8 MUL ADD SWAP1 SSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP2 SHA3 DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP5 POP SWAP3 POP PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP5 DUP4 PUSH1 MLOAD SWAP2 DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH13 SWAP1 DUP3 SWAP1 PUSH5 PUSH2 PUSH2 PUSH20 DUP9 MUL PUSH9 PUSH1 DUP7 EXP MUL ADD PUSH17 DUP6 MUL ADD PUSH25 ADD PUSH2 JUMP JUMPDEST DUP6 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SUB SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH8 DUP4 DUP2 ADD SWAP2 DUP2 ADD SWAP1 DUP4 SWAP1 PUSH2 PUSH5 DUP3 DUP6 DIV PUSH5 MUL ADD DUP8 MUL PUSH1 DUP4 PUSH8 NOT DUP3 DUP10 EXP DUP12 SWAP1 SUB ADD DIV PUSH5 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 PUSH1 DUP3 ADD DIV JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP1 SWAP2 POP PUSH1 DUP2 DUP3 DUP6 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV ADD DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP PUSH2 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 PUSH2 SWAP3 POP SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0x2f EXTCODEHASH UNKNOWN_0xa8 UNKNOWN_0x22 UNKNOWN_0xae UNKNOWN_0x27 MUL LT UNOFFICIAL_PUSH SWAP7 GASPRICE ISZERO UNKNOWN_0x2b UNKNOWN_0xe5 UNKNOWN_0xee CALLDATACOPY MSTORE SIGNEXTEND INVALID_0x7d",
  "opcode_entropy": 4.863802681628622,
  "opcode_count": 3767,
  "unique_opcodes": 91,
  "byte_entropy": 5.929067634655617,
  "byte_0x": 0.00017415534656913968,
  "byte_60": 0.11041448972483456,
  "byte_40": 0.011320097526994078,
  "byte_52": 0.020027864855451064,
  "byte_04": 0.01114594218042494,
  "byte_36": 0.0005224660397074191,
  "byte_10": 0.00522466039707419,
  "byte_61": 0.061128526645768025,
  "byte_01": 0.03848833159177987,
  "byte_5d": 0.0006966213862765587,
  "byte_57": 0.02124695228143504,
  "byte_63": 0.00539881574364333,
  "byte_ff": 0.004005572971090212,
  "byte_7c": 0.0005224660397074191,
  "byte_00": 0.05851619644723093,
  "byte_35": 0.0033089515848136537,
  "byte_16": 0.018112156043190525,
  "byte_62": 0.0005224660397074191,
  "byte_65": 0.0012190874259839777,
  "byte_31": 0.0010449320794148381,
  "byte_8b": 0.0010449320794148381,
  "byte_81": 0.02629745733194009,
  "byte_14": 0.014106583072100314,
  "byte_6b": 0.0013932427725531174,
  "byte_80": 0.03152211772901428,
  "byte_06": 0.004528039010797631,
  "byte_fd": 0.009056078021595262,
  "byte_de": 0.0005224660397074191,
  "byte_03": 0.021421107628004178,
  "byte_9c": 0.0008707767328456984,
  "byte_d0": 0.00034831069313827936,
  "byte_dd": 0.0006966213862765587,
  "byte_02": 0.025949146638801813,
  "byte_26": 0.0005224660397074191,
  "byte_18": 0.00034831069313827936,
  "byte_0d": 0.0066179031696273075,
  "byte_3c": 0.0010449320794148381,
  "byte_22": 0.0006966213862765587,
  "byte_93": 0.0034831069313827935,
  "byte_73": 0.0006966213862765587,
  "byte_4f": 0.0006966213862765587,
  "byte_27": 0.0006966213862765587,
  "byte_fa": 0.0005224660397074191,
  "byte_1f": 0.0019157088122605363,
  "byte_e5": 0.00034831069313827936,
  "byte_67": 0.001567398119122257,
  "byte_8c": 0.0020898641588296763,
  "byte_cf": 0.0006966213862765587,
  "byte_d6": 0.00034831069313827936,
  "byte_0b": 0.00539881574364333,
  "byte_b5": 0.00034831069313827936,
  "byte_4b": 0.0005224660397074191,
  "byte_75": 0.00034831069313827936,
  "byte_34": 0.00522466039707419,
  "byte_ca": 0.0005224660397074191,
  "byte_56": 0.024207593173110414,
  "byte_d3": 0.00034831069313827936,
  "byte_99": 0.0013932427725531174,
  "byte_e8": 0.00034831069313827936,
  "byte_68": 0.006269592476489028,
  "byte_8a": 0.0041797283176593526,
  "byte_bb": 0.0005224660397074191,
  "byte_f7": 0.0006966213862765587,
  "byte_f0": 0.0005224660397074191,
  "byte_2f": 0.0005224660397074191,
  "byte_46": 0.0005224660397074191,
  "byte_32": 0.0008707767328456984,
  "byte_08": 0.004005572971090212,
  "byte_70": 0.0005224660397074191,
  "byte_a0": 0.01114594218042494,
  "byte_82": 0.012016718913270637,
  "byte_1b": 0.0005224660397074191,
  "byte_76": 0.0006966213862765587,
  "byte_be": 0.0006966213862765587,
  "byte_15": 0.02664576802507837,
  "byte_85": 0.004528039010797631,
  "byte_3a": 0.0006966213862765587,
  "byte_83": 0.008881922675026124,
  "byte_28": 0.00034831069313827936,
  "byte_b6": 0.0010449320794148381,
  "byte_59": 0.0005224660397074191,
  "byte_86": 0.0041797283176593526,
  "byte_20": 0.02124695228143504,
  "byte_41": 0.0005224660397074191,
  "byte_6f": 0.00017415534656913968,
  "byte_87": 0.003134796238244514,
  "byte_c9": 0.00034831069313827936,
  "byte_50": 0.03187042842215256,
  "byte_58": 0.0005224660397074191,
  "byte_94": 0.002786485545106235,
  "byte_9e": 0.00034831069313827936,
  "byte_cd": 0.0005224660397074191,
  "byte_a6": 0.00017415534656913968,
  "byte_95": 0.0020898641588296763,
  "byte_d8": 0.00034831069313827936,
  "byte_9b": 0.0005224660397074191,
  "byte_b9": 0.00034831069313827936,
  "byte_a8": 0.0010449320794148381,
  "byte_e0": 0.0013932427725531174,
  "byte_cc": 0.0012190874259839777,
  "byte_a9": 0.00017415534656913968,
  "byte_05": 0.006269592476489028,
  "byte_df": 0.0006966213862765587,
  "byte_b8": 0.00034831069313827936,
  "byte_4c": 0.00034831069313827936,
  "byte_c4": 0.0008707767328456984,
  "byte_7f": 0.0012190874259839777,
  "byte_e4": 0.0013932427725531174,
  "byte_84": 0.004528039010797631,
  "byte_a3": 0.0008707767328456984,
  "byte_e9": 0.0005224660397074191,
  "byte_ee": 0.0005224660397074191,
  "byte_88": 0.002612330198537095,
  "byte_d5": 0.0008707767328456984,
  "byte_47": 0.00034831069313827936,
  "byte_3e": 0.0005224660397074191,
  "byte_5b": 0.04040404040404041,
  "byte_f3": 0.0012190874259839777,
  "byte_0a": 0.013932427725531174,
  "byte_bf": 0.0013932427725531174,
  "byte_51": 0.008533611981887844,
  "byte_90": 0.03744339951236503,
  "byte_91": 0.012713340299547196,
  "byte_a7": 0.0013932427725531174,
  "byte_af": 0.0008707767328456984,
  "byte_eb": 0.00034831069313827936,
  "byte_19": 0.0013932427725531174,
  "byte_92": 0.006443747823058168,
  "byte_98": 0.0005224660397074191,
  "byte_c8": 0.0019157088122605363,
  "byte_5a": 0.0005224660397074191,
  "byte_78": 0.0013932427725531174,
  "byte_0c": 0.0033089515848136537,
  "byte_97": 0.0010449320794148381,
  "byte_9f": 0.0010449320794148381,
  "byte_11": 0.006443747823058168,
  "byte_c0": 0.00034831069313827936,
  "byte_f4": 0.0006966213862765587,
  "byte_48": 0.0005224660397074191,
  "byte_fb": 0.00017415534656913968,
  "byte_4e": 0.0013932427725531174,
  "byte_13": 0.002612330198537095,
  "byte_45": 0.00034831069313827936,
  "byte_ba": 0.00034831069313827936,
  "byte_64": 0.0022640195053988156,
  "byte_7a": 0.0012190874259839777,
  "byte_8d": 0.0017415534656913968,
  "byte_24": 0.0010449320794148381,
  "byte_0e": 0.0036572622779519333,
  "byte_b1": 0.00017415534656913968,
  "byte_ac": 0.00017415534656913968,
  "byte_d7": 0.00034831069313827936,
  "byte_0f": 0.003134796238244514,
  "byte_17": 0.0006966213862765587,
  "byte_ea": 0.00017415534656913968,
  "byte_37": 0.001567398119122257,
  "byte_96": 0.0019157088122605363,
  "byte_ae": 0.0008707767328456984,
  "byte_6d": 0.0012190874259839777,
  "byte_33": 0.002786485545106235,
  "byte_54": 0.014629049111807733,
  "byte_8e": 0.00017415534656913968,
  "byte_09": 0.0066179031696273075,
  "byte_3d": 0.0008707767328456984,
  "byte_b3": 0.0019157088122605363,
  "byte_3b": 0.0024381748519679554,
  "byte_55": 0.006443747823058168,
  "byte_ec": 0.0006966213862765587,
  "byte_89": 0.002786485545106235,
  "byte_f8": 0.00034831069313827936,
  "byte_39": 0.0008707767328456984,
  "byte_44": 0.00017415534656913968,
  "byte_6e": 0.00034831069313827936,
  "byte_da": 0.00017415534656913968,
  "byte_bc": 0.00017415534656913968,
  "byte_f5": 0.0006966213862765587,
  "byte_07": 0.0033089515848136537,
  "byte_fe": 0.0024381748519679554,
  "byte_5f": 0.0005224660397074191,
  "byte_2c": 0.0008707767328456984,
  "byte_2e": 0.0006966213862765587,
  "byte_4d": 0.0006966213862765587,
  "byte_43": 0.0006966213862765587,
  "byte_c1": 0.0008707767328456984,
  "byte_f9": 0.0005224660397074191,
  "byte_72": 0.0006966213862765587,
  "byte_1c": 0.0006966213862765587,
  "byte_3f": 0.0008707767328456984,
  "byte_a5": 0.0005224660397074191,
  "byte_9d": 0.00034831069313827936,
  "byte_e2": 0.0006966213862765587,
  "byte_8f": 0.00034831069313827936,
  "byte_9a": 0.0005224660397074191,
  "byte_ad": 0.0006966213862765587,
  "byte_b4": 0.0005224660397074191,
  "byte_e6": 0.00017415534656913968,
  "byte_ef": 0.00034831069313827936,
  "byte_12": 0.0024381748519679554,
  "byte_fc": 0.0006966213862765587,
  "byte_25": 0.00017415534656913968,
  "byte_42": 0.0019157088122605363,
  "byte_f1": 0.0005224660397074191,
  "byte_7d": 0.0008707767328456984,
  "byte_db": 0.00034831069313827936,
  "byte_bd": 0.00034831069313827936,
  "byte_71": 0.00034831069313827936,
  "byte_79": 0.00034831069313827936,
  "byte_dc": 0.00017415534656913968,
  "byte_a2": 0.0005224660397074191,
  "byte_23": 0.0005224660397074191,
  "byte_30": 0.0005224660397074191,
  "byte_b2": 0.00017415534656913968,
  "byte_e3": 0.00017415534656913968,
  "byte_c5": 0.00034831069313827936,
  "byte_f2": 0.00017415534656913968,
  "byte_69": 0.00034831069313827936,
  "byte_c2": 0.00017415534656913968,
  "byte_b0": 0.00034831069313827936,
  "byte_aa": 0.00017415534656913968,
  "byte_2b": 0.0005224660397074191,
  "byte_a1": 0.0006966213862765587,
  "byte_7e": 0.0005224660397074191,
  "byte_a4": 0.0005224660397074191,
  "byte_4a": 0.0005224660397074191,
  "byte_21": 0.0006966213862765587,
  "byte_f6": 0.00017415534656913968,
  "byte_d2": 0.00034831069313827936,
  "byte_38": 0.00017415534656913968,
  "byte_b7": 0.00017415534656913968,
  "byte_1e": 0.00034831069313827936,
  "byte_53": 0.00017415534656913968,
  "byte_ab": 0.00034831069313827936,
  "byte_74": 0.00034831069313827936,
  "byte_6c": 0.00034831069313827936,
  "byte_d4": 0.00034831069313827936,
  "byte_c7": 0.00017415534656913968,
  "byte_5e": 0.00017415534656913968,
  "byte_2d": 0.00034831069313827936,
  "byte_29": 0.00017415534656913968,
  "num_nodes": 53,
  "num_edges": 96,
  "avg_degree": 3.6226415094339623,
  "density": 0.03483309143686502,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 297,
  "event_nums": 227,
  "creation_block": 5393369,
  "creation_timestamp": 1523050371,
  "life_time": 3223159.0,
  "duration_seconds": 46342341.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 54,
  "num_buyers": 45,
  "num_sellers": 53,
  "num_creator_transfers": 69,
  "buy_amt": 6.527389611039871e+19,
  "sell_amt": 6.72759e+19,
  "avg_value": 4.447979735248279e+17,
  "txn_per_block": 9.214559624716117e-05,
  "avg_gas_limit": 400806.08754208754,
  "std_gas_limit": 1483840.5467295554,
  "avg_gas_used": 51717.91582491583,
  "std_gas_used": 113052.68242290016,
  "avg_gas_price": 7340174040.40404,
  "std_gas_price": 19797892252.920486,
  "ontokenpurchase_num": 85,
  "onwithdraw_num": 69,
  "buy_num": 51,
  "reinvest_num": 24,
  "sell_num": 60,
  "exit_num": 7,
  "withdraw_num": 69,
  "timeline_sequence": [
    [
      5393369,
      1523050371,
      15,
      27,
      500000000000000000,
      1910056,
      2200000000,
      0,
      1,
      2664324,
      1910056,
      17699767
    ],
    [
      5393371,
      1523050393,
      220,
      4,
      2000000000000000000,
      144679,
      100000000000,
      0,
      1,
      196544,
      96453,
      17699765
    ],
    [
      5393371,
      1523050393,
      159,
      5,
      500000000000000000,
      146076,
      100000000000,
      0,
      1,
      294049,
      97505,
      17699765
    ],
    [
      5393373,
      1523050404,
      4148,
      0,
      3000000000000000000,
      144679,
      100000000000,
      0,
      1,
      96574,
      96574,
      17699763
    ],
    [
      5393374,
      1523050418,
      431,
      12,
      100000000000000000,
      144679,
      15000000000,
      0,
      1,
      809811,
      96574,
      17699762
    ],
    [
      5393374,
      1523050418,
      2126,
      14,
      150000000000000000,
      144679,
      5000000000,
      0,
      1,
      958330,
      96574,
      17699762
    ],
    [
      5393376,
      1523050446,
      2598,
      9,
      3000000000000000000,
      144861,
      111000000000,
      0,
      1,
      304086,
      96574,
      17699760
    ],
    [
      5393376,
      1523050446,
      1953,
      15,
      5500000000000000000,
      144861,
      25000000000,
      0,
      1,
      570912,
      96574,
      17699760
    ],
    [
      5393376,
      1523050446,
      1991,
      60,
      100000000000000000,
      146439,
      2000000000,
      0,
      1,
      2783170,
      97626,
      17699760
    ],
    [
      5393376,
      1523050446,
      4183,
      64,
      200000000000000000,
      146257,
      1000000000,
      0,
      1,
      3157119,
      97626,
      17699760
    ],
    [
      5393378,
      1523050471,
      1353,
      0,
      1000000000000000000,
      144861,
      140000000000,
      0,
      1,
      96574,
      96574,
      17699758
    ],
    [
      5393378,
      1523050471,
      1622,
      16,
      1250000000000000000,
      144861,
      21000000000,
      0,
      1,
      701381,
      96574,
      17699758
    ],
    [
      5393378,
      1523050471,
      729,
      20,
      500000000000000000,
      144861,
      11000000000,
      0,
      1,
      900666,
      96574,
      17699758
    ],
    [
      5393380,
      1523050501,
      2414,
      33,
      800000000000000000,
      144861,
      5000000000,
      0,
      1,
      1142810,
      96695,
      17699756
    ],
    [
      5393380,
      1523050501,
      696,
      59,
      100000000000000000,
      146439,
      3000000000,
      0,
      1,
      2054544,
      97747,
      17699756
    ],
    [
      5393380,
      1523050501,
      4184,
      89,
      200000000000000000,
      101439,
      2000000000,
      0,
      1,
      3506958,
      67747,
      17699756
    ],
    [
      5393381,
      1523050517,
      432,
      113,
      1000000000000000000,
      99861,
      40000000000,
      0,
      1,
      2484315,
      66695,
      17699755
    ],
    [
      5393382,
      1523050543,
      1971,
      99,
      1400000000000000000,
      145042,
      25000000000,
      0,
      1,
      2421706,
      96695,
      17699754
    ],
    [
      5393383,
      1523050564,
      27,
      115,
      100000000000000000,
      145042,
      5000000000,
      0,
      1,
      3130835,
      96695,
      17699753
    ],
    [
      5393384,
      1523050580,
      4,
      11,
      20000000000000000000,
      145042,
      20000000000,
      0,
      1,
      503044,
      96695,
      17699752
    ],
    [
      5393386,
      1523050599,
      350,
      26,
      1000000000000000000,
      53000,
      2000000000,
      1,
      0,
      1155297,
      53000,
      17699750
    ],
    [
      5393387,
      1523050611,
      160,
      12,
      0,
      123579,
      11000000000,
      0,
      1,
      647042,
      82386,
      17699749
    ],
    [
      5393388,
      1523050625,
      1050,
      16,
      100000000000000000,
      146812,
      12000000000,
      0,
      1,
      575393,
      97875,
      17699748
    ],
    [
      5393388,
      1523050625,
      102,
      54,
      1000000000000000000,
      146620,
      1000000000,
      0,
      1,
      2991408,
      97747,
      17699748
    ],
    [
      5393389,
      1523050638,
      1507,
      9,
      50000000000000000,
      146812,
      11000000000,
      0,
      1,
      402023,
      97875,
      17699747
    ],
    [
      5393390,
      1523050693,
      1410,
      71,
      10230000000000000,
      146812,
      4000000000,
      0,
      1,
      2687052,
      97875,
      17699746
    ],
    [
      5393390,
      1523050693,
      271,
      75,
      10000000000000000,
      146812,
      3100000000,
      0,
      1,
      2940484,
      97875,
      17699746
    ],
    [
      5393390,
      1523050693,
      1707,
      128,
      80000000000000000,
      146812,
      1000000000,
      0,
      1,
      5127766,
      97875,
      17699746
    ],
    [
      5393391,
      1523050705,
      1992,
      29,
      0,
      123579,
      1000000000,
      0,
      1,
      1563921,
      82386,
      17699745
    ],
    [
      5393397,
      1523050782,
      36,
      97,
      4900000000000000,
      146812,
      2000000000,
      0,
      1,
      4523815,
      97875,
      17699739
    ],
    [
      5393397,
      1523050782,
      145,
      100,
      1000000000000000000,
      200000,
      1100000000,
      0,
      1,
      4717041,
      97875,
      17699739
    ],
    [
      5393398,
      1523050826,
      2347,
      56,
      500000000000000000,
      146812,
      2000000000,
      0,
      1,
      2012232,
      97875,
      17699738
    ],
    [
      5393401,
      1523050850,
      142,
      15,
      2000000000000000000,
      146812,
      10000000000,
      0,
      1,
      605099,
      97875,
      17699735
    ],
    [
      5393405,
      1523050908,
      163,
      103,
      2000000000000000,
      146812,
      1000000000,
      0,
      1,
      5496181,
      97875,
      17699731
    ],
    [
      5393408,
      1523050952,
      1051,
      43,
      300000000000000000,
      101812,
      4000000000,
      0,
      1,
      1316421,
      67875,
      17699728
    ],
    [
      5393411,
      1523050984,
      112,
      53,
      30000000000000000,
      146812,
      2000000000,
      0,
      1,
      1875161,
      97875,
      17699725
    ],
    [
      5393412,
      1523051003,
      143,
      17,
      5000000000000000000,
      101812,
      10000000000,
      0,
      1,
      528328,
      67875,
      17699724
    ],
    [
      5393413,
      1523051026,
      144,
      33,
      3000000000000000000,
      101812,
      10000000000,
      0,
      1,
      1250874,
      67875,
      17699723
    ],
    [
      5393413,
      1523051026,
      38,
      57,
      27800000000000000,
      101812,
      2000000000,
      0,
      1,
      2206856,
      67875,
      17699723
    ],
    [
      5393413,
      1523051026,
      154,
      72,
      100000000000000000,
      146812,
      1000000000,
      0,
      1,
      2932820,
      97875,
      17699723
    ],
    [
      5393414,
      1523051039,
      100,
      11,
      1100000000000000000,
      146812,
      8000000000,
      0,
      1,
      417489,
      97875,
      17699722
    ],
    [
      5393416,
      1523051091,
      113,
      65,
      0,
      123579,
      2000000000,
      0,
      1,
      2046437,
      82386,
      17699720
    ],
    [
      5393416,
      1523051091,
      1993,
      91,
      0,
      123579,
      1000000000,
      0,
      1,
      6927868,
      82386,
      17699720
    ],
    [
      5393416,
      1523051091,
      28,
      93,
      0,
      123579,
      1000000000,
      0,
      1,
      7031254,
      82386,
      17699720
    ],
    [
      5393421,
      1523051152,
      1411,
      17,
      500000000000000,
      101812,
      1000000000,
      0,
      1,
      2959377,
      67875,
      17699715
    ],
    [
      5393421,
      1523051152,
      44,
      34,
      1900000000000000000,
      146812,
      1000000000,
      0,
      1,
      3854424,
      97875,
      17699715
    ],
    [
      5393425,
      1523051226,
      39,
      111,
      0,
      123579,
      1000000000,
      0,
      1,
      6904884,
      82386,
      17699711
    ],
    [
      5393433,
      1523051368,
      45,
      28,
      0,
      123579,
      1000000000,
      0,
      1,
      4062422,
      82386,
      17699703
    ],
    [
      5393433,
      1523051368,
      177,
      55,
      30000000000000000,
      146812,
      1000000000,
      0,
      1,
      5418510,
      97875,
      17699703
    ],
    [
      5393440,
      1523051405,
      51,
      24,
      70000000000000000,
      146812,
      500000000,
      0,
      1,
      3500671,
      97875,
      17699696
    ],
    [
      5393454,
      1523051641,
      7,
      16,
      80000000000000000,
      146812,
      1000000000,
      0,
      1,
      816542,
      97875,
      17699682
    ],
    [
      5393457,
      1523051684,
      41,
      76,
      3000000000000000,
      101812,
      1000000000,
      0,
      1,
      7348102,
      67875,
      17699679
    ],
    [
      5393459,
      1523051744,
      62,
      45,
      20000000000000000,
      146812,
      1100000000,
      0,
      1,
      3844779,
      97875,
      17699677
    ],
    [
      5393462,
      1523051789,
      116,
      36,
      90000000000000000,
      101812,
      2000000000,
      0,
      1,
      2043225,
      67875,
      17699674
    ],
    [
      5393465,
      1523051867,
      351,
      58,
      2000000000000000000,
      146812,
      1000000000,
      0,
      1,
      2141852,
      97875,
      17699671
    ],
    [
      5393465,
      1523051867,
      103,
      83,
      0,
      123579,
      1000000000,
      0,
      1,
      6052271,
      82386,
      17699671
    ],
    [
      5393469,
      1523051908,
      117,
      16,
      0,
      123579,
      2000000000,
      0,
      1,
      864694,
      82386,
      17699667
    ],
    [
      5393469,
      1523051908,
      4185,
      29,
      0,
      759575,
      1000000000,
      1,
      0,
      1657598,
      23027,
      17699667
    ],
    [
      5393472,
      1523051969,
      4186,
      71,
      0,
      760027,
      1000000000,
      1,
      0,
      4541269,
      23027,
      17699664
    ],
    [
      5393473,
      1523051978,
      63,
      26,
      30000000000000000,
      101812,
      2100000000,
      0,
      1,
      1434429,
      67875,
      17699663
    ],
    [
      5393474,
      1523051988,
      4187,
      60,
      0,
      763532,
      1000000000,
      1,
      0,
      5664796,
      23027,
      17699662
    ],
    [
      5393477,
      1523052013,
      1972,
      1,
      0,
      300000,
      81000000000,
      0,
      1,
      69044,
      48044,
      17699659
    ],
    [
      5393477,
      1523052013,
      1954,
      123,
      0,
      72066,
      50000000000,
      0,
      1,
      3763672,
      48044,
      17699659
    ],
    [
      5393477,
      1523052013,
      1994,
      179,
      0,
      105877,
      5000000000,
      0,
      1,
      5224395,
      54846,
      17699659
    ],
    [
      5393477,
      1523052013,
      4188,
      200,
      0,
      72066,
      1000000000,
      0,
      1,
      5726145,
      48044,
      17699659
    ],
    [
      5393479,
      1523052051,
      433,
      0,
      0,
      71874,
      100000000000,
      0,
      1,
      47916,
      47916,
      17699657
    ],
    [
      5393479,
      1523052051,
      2415,
      39,
      0,
      71970,
      77000000000,
      0,
      1,
      2788424,
      47980,
      17699657
    ],
    [
      5393479,
      1523052051,
      4149,
      42,
      0,
      105877,
      100000000000,
      0,
      1,
      2886630,
      54846,
      17699657
    ],
    [
      5393480,
      1523052070,
      1355,
      42,
      0,
      71970,
      51000000000,
      0,
      1,
      979862,
      47980,
      17699656
    ],
    [
      5393480,
      1523052070,
      221,
      51,
      0,
      88890,
      11000000000,
      0,
      1,
      1325211,
      58511,
      17699656
    ],
    [
      5393482,
      1523052115,
      1955,
      20,
      0,
      66390,
      12000000000,
      0,
      1,
      743817,
      43511,
      17699654
    ],
    [
      5393485,
      1523052183,
      222,
      139,
      0,
      72066,
      51000000000,
      0,
      1,
      5374002,
      48044,
      17699651
    ],
    [
      5393487,
      1523052206,
      118,
      6,
      0,
      7592540,
      2000000000,
      1,
      0,
      270626,
      23317,
      17699649
    ],
    [
      5393487,
      1523052206,
      146,
      13,
      0,
      200000,
      1100000000,
      0,
      1,
      659556,
      47916,
      17699649
    ],
    [
      5393489,
      1523052230,
      223,
      61,
      0,
      66390,
      11000000000,
      0,
      1,
      4253093,
      43511,
      17699647
    ],
    [
      5393489,
      1523052230,
      2127,
      62,
      0,
      105877,
      10000000000,
      0,
      1,
      4307939,
      54846,
      17699647
    ],
    [
      5393491,
      1523052263,
      147,
      80,
      0,
      200000,
      1100000000,
      0,
      1,
      2862500,
      43511,
      17699645
    ],
    [
      5393492,
      1523052275,
      16,
      30,
      0,
      66390,
      1000000000,
      0,
      1,
      1500264,
      43511,
      17699644
    ],
    [
      5393499,
      1523052343,
      4189,
      27,
      0,
      71970,
      1000000000,
      0,
      1,
      1095196,
      47980,
      17699637
    ],
    [
      5393499,
      1523052343,
      4190,
      32,
      0,
      66390,
      1000000000,
      0,
      1,
      1278281,
      43511,
      17699637
    ],
    [
      5393501,
      1523052373,
      434,
      67,
      0,
      66390,
      2000000000,
      0,
      1,
      4194024,
      43511,
      17699635
    ],
    [
      5393502,
      1523052398,
      2416,
      129,
      0,
      66390,
      3000000000,
      0,
      1,
      3205932,
      43511,
      17699634
    ],
    [
      5393502,
      1523052398,
      2417,
      168,
      0,
      66390,
      3000000000,
      1,
      0,
      6434487,
      22863,
      17699634
    ],
    [
      5393503,
      1523052405,
      2418,
      20,
      0,
      66390,
      3000000000,
      1,
      0,
      911760,
      22863,
      17699633
    ],
    [
      5393504,
      1523052436,
      697,
      84,
      0,
      66390,
      1000000000,
      0,
      1,
      4763805,
      43511,
      17699632
    ],
    [
      5393553,
      1523053153,
      161,
      38,
      0,
      22069,
      6969690000,
      1,
      0,
      2501481,
      22069,
      17699583
    ],
    [
      5393564,
      1523053325,
      1973,
      49,
      0,
      66390,
      10000000000,
      0,
      1,
      1852364,
      43511,
      17699572
    ],
    [
      5393605,
      1523053808,
      1974,
      1,
      2000000000000000000,
      300000,
      71000000000,
      0,
      1,
      88875,
      67875,
      17699531
    ],
    [
      5393605,
      1523053808,
      202,
      33,
      100000000000000000,
      150000,
      4000000000,
      0,
      1,
      1726840,
      97875,
      17699531
    ],
    [
      5393605,
      1523053808,
      148,
      54,
      500000000000000000,
      200000,
      1100000000,
      0,
      1,
      2682165,
      67875,
      17699531
    ],
    [
      5393606,
      1523053835,
      634,
      186,
      100000000000000000,
      150000,
      1100000000,
      0,
      1,
      4880735,
      97875,
      17699530
    ],
    [
      5393607,
      1523053853,
      1711,
      15,
      100000000000000000,
      101812,
      15000000000,
      0,
      1,
      642951,
      67875,
      17699529
    ],
    [
      5393607,
      1523053853,
      240,
      20,
      1000000000000000000,
      146812,
      5000000000,
      0,
      1,
      934526,
      97875,
      17699529
    ],
    [
      5393607,
      1523053853,
      122,
      85,
      0,
      123579,
      2000000000,
      0,
      1,
      7048267,
      82386,
      17699529
    ],
    [
      5393607,
      1523053853,
      48,
      89,
      0,
      123579,
      1000000000,
      0,
      1,
      7209961,
      82386,
      17699529
    ],
    [
      5393607,
      1523053853,
      49,
      90,
      0,
      123579,
      1000000000,
      0,
      1,
      7292347,
      82386,
      17699529
    ],
    [
      5393608,
      1523053861,
      23,
      67,
      367000000000000000,
      146812,
      1000000000,
      0,
      1,
      2276494,
      97875,
      17699528
    ],
    [
      5393610,
      1523053878,
      167,
      27,
      145000000000000000,
      120063,
      2332000000,
      0,
      1,
      976568,
      97875,
      17699526
    ],
    [
      5393611,
      1523053901,
      38,
      38,
      1000000000000000000,
      146812,
      3000000000,
      0,
      1,
      1622169,
      97875,
      17699525
    ],
    [
      5393611,
      1523053901,
      106,
      74,
      0,
      123579,
      1000000000,
      0,
      1,
      3204303,
      82386,
      17699525
    ],
    [
      5393612,
      1523053923,
      42,
      94,
      0,
      123579,
      1000000000,
      0,
      1,
      6599767,
      82386,
      17699524
    ],
    [
      5393616,
      1523053971,
      40,
      12,
      100000000000000000,
      146812,
      10000000000,
      0,
      1,
      400218,
      97875,
      17699520
    ],
    [
      5393616,
      1523053971,
      168,
      39,
      120000000000000000,
      84063,
      2200000000,
      0,
      1,
      1525704,
      67875,
      17699520
    ],
    [
      5393620,
      1523054063,
      68,
      63,
      100000000000000000,
      146812,
      1000000000,
      0,
      1,
      2499948,
      97875,
      17699516
    ],
    [
      5393621,
      1523054075,
      50,
      26,
      0,
      123579,
      1000000000,
      0,
      1,
      1503546,
      82386,
      17699515
    ],
    [
      5393635,
      1523054257,
      179,
      46,
      0,
      123579,
      2200000000,
      0,
      1,
      2217595,
      82386,
      17699501
    ],
    [
      5393657,
      1523054573,
      698,
      4,
      200000000000000000,
      7600027,
      1000000000,
      0,
      1,
      355258,
      67875,
      17699479
    ],
    [
      5393657,
      1523054573,
      103,
      5,
      150000000000000000,
      7600027,
      1000000000,
      0,
      1,
      453133,
      97875,
      17699479
    ],
    [
      5393658,
      1523054576,
      101,
      6,
      0,
      7600027,
      1000000000,
      0,
      1,
      444382,
      82386,
      17699478
    ],
    [
      5393747,
      1523055694,
      2599,
      0,
      0,
      7600000,
      111000000000,
      0,
      1,
      54846,
      54846,
      17699389
    ],
    [
      5393747,
      1523055694,
      41,
      54,
      0,
      200000,
      20000000000,
      0,
      1,
      1509918,
      47980,
      17699389
    ],
    [
      5393757,
      1523055755,
      2419,
      11,
      0,
      71970,
      3000000000,
      0,
      1,
      444989,
      47980,
      17699379
    ],
    [
      5393760,
      1523055783,
      42,
      29,
      0,
      66390,
      2200000000,
      0,
      1,
      2783682,
      43511,
      17699376
    ],
    [
      5393764,
      1523055801,
      2420,
      15,
      0,
      66390,
      2000000000,
      0,
      1,
      553924,
      43511,
      17699372
    ],
    [
      5393765,
      1523055823,
      731,
      24,
      0,
      72066,
      4000000000,
      0,
      1,
      995837,
      48044,
      17699371
    ],
    [
      5393767,
      1523055880,
      224,
      8,
      0,
      72066,
      51000000000,
      0,
      1,
      238818,
      48044,
      17699369
    ],
    [
      5393768,
      1523055901,
      732,
      80,
      0,
      66390,
      3000000000,
      0,
      1,
      2982718,
      43511,
      17699368
    ],
    [
      5393769,
      1523055926,
      225,
      13,
      0,
      66390,
      11000000000,
      0,
      1,
      399922,
      43511,
      17699367
    ],
    [
      5393773,
      1523055966,
      1359,
      7,
      0,
      7600000,
      1000000000,
      0,
      1,
      294320,
      43511,
      17699363
    ],
    [
      5393773,
      1523055966,
      1360,
      13,
      0,
      66390,
      11000000000,
      1,
      0,
      424496,
      22863,
      17699363
    ],
    [
      5393774,
      1523056015,
      241,
      30,
      0,
      71970,
      6000000000,
      0,
      1,
      1894150,
      47980,
      17699362
    ],
    [
      5393776,
      1523056057,
      170,
      141,
      0,
      74000,
      2000000000,
      1,
      0,
      7857330,
      23317,
      17699360
    ],
    [
      5393791,
      1523056198,
      171,
      33,
      0,
      114000,
      2000000000,
      1,
      0,
      1662848,
      23317,
      17699345
    ],
    [
      5393796,
      1523056281,
      172,
      105,
      0,
      300000,
      2200000000,
      1,
      0,
      4283537,
      23317,
      17699340
    ],
    [
      5393799,
      1523056341,
      173,
      51,
      0,
      102000,
      5000000000,
      0,
      1,
      1975665,
      43511,
      17699337
    ],
    [
      5393822,
      1523056707,
      4,
      36,
      10000000000000000,
      145042,
      1000000000,
      0,
      1,
      1550499,
      96695,
      17699314
    ],
    [
      5393831,
      1523056860,
      17,
      30,
      0,
      72066,
      5000000000,
      0,
      1,
      1204555,
      48044,
      17699305
    ],
    [
      5393839,
      1523056966,
      18,
      67,
      0,
      66390,
      1000000000,
      0,
      1,
      4727998,
      43511,
      17699297
    ],
    [
      5393847,
      1523057123,
      128,
      33,
      0,
      71970,
      8000000000,
      0,
      1,
      1646826,
      47980,
      17699289
    ],
    [
      5393857,
      1523057245,
      243,
      61,
      0,
      66390,
      3000000000,
      0,
      1,
      2912928,
      43511,
      17699279
    ],
    [
      5393871,
      1523057429,
      244,
      64,
      0,
      71970,
      5000000000,
      1,
      0,
      1801490,
      22963,
      17699265
    ],
    [
      5393871,
      1523057429,
      174,
      159,
      0,
      141000,
      3000000000,
      1,
      0,
      4034974,
      22899,
      17699265
    ],
    [
      5393926,
      1523058095,
      38,
      28,
      150000000000000000,
      180358,
      1000000000,
      0,
      1,
      2721020,
      120239,
      17699210
    ],
    [
      5394014,
      1523059268,
      1975,
      18,
      0,
      72162,
      21000000000,
      0,
      1,
      787734,
      48108,
      17699122
    ],
    [
      5394014,
      1523059268,
      147,
      55,
      185000000000000000,
      160000,
      2000000000,
      1,
      0,
      3041177,
      23449,
      17699122
    ],
    [
      5394017,
      1523059344,
      102,
      30,
      0,
      72066,
      25900000000,
      0,
      1,
      1083047,
      48044,
      17699119
    ],
    [
      5394017,
      1523059344,
      1718,
      68,
      0,
      72066,
      10000000000,
      0,
      1,
      2857034,
      48044,
      17699119
    ],
    [
      5394019,
      1523059377,
      1976,
      53,
      0,
      66390,
      10000000000,
      0,
      1,
      1429381,
      43511,
      17699117
    ],
    [
      5394019,
      1523059377,
      54,
      84,
      0,
      66390,
      2000000000,
      0,
      1,
      2892258,
      43511,
      17699117
    ],
    [
      5394020,
      1523059382,
      103,
      206,
      0,
      66390,
      15000000000,
      0,
      1,
      5519815,
      43511,
      17699116
    ],
    [
      5394021,
      1523059427,
      1719,
      100,
      0,
      66390,
      1000000000,
      0,
      1,
      6800827,
      43511,
      17699115
    ],
    [
      5394022,
      1523059447,
      636,
      81,
      0,
      105877,
      1500000000,
      0,
      1,
      3201144,
      54846,
      17699114
    ],
    [
      5394023,
      1523059459,
      55,
      37,
      0,
      66390,
      500000000,
      0,
      1,
      4565447,
      43511,
      17699113
    ],
    [
      5394025,
      1523059528,
      162,
      61,
      0,
      72066,
      16000000000,
      0,
      1,
      1498299,
      48044,
      17699111
    ],
    [
      5394025,
      1523059528,
      177,
      114,
      0,
      300000,
      1000000000,
      0,
      1,
      4281113,
      43511,
      17699111
    ],
    [
      5394027,
      1523059566,
      39,
      22,
      0,
      200000,
      10000000000,
      0,
      1,
      975892,
      48108,
      17699109
    ],
    [
      5394028,
      1523059614,
      163,
      23,
      0,
      66390,
      6900000000,
      0,
      1,
      1156966,
      43511,
      17699108
    ],
    [
      5394028,
      1523059614,
      52,
      91,
      0,
      71970,
      1000000000,
      0,
      1,
      5080029,
      47980,
      17699108
    ],
    [
      5394030,
      1523059647,
      107,
      27,
      0,
      71970,
      4000000000,
      0,
      1,
      1086430,
      47980,
      17699106
    ],
    [
      5394031,
      1523059675,
      108,
      86,
      0,
      71970,
      1000000000,
      1,
      0,
      4874659,
      23343,
      17699105
    ],
    [
      5394031,
      1523059675,
      110,
      129,
      0,
      71970,
      6000000000,
      1,
      0,
      7639292,
      23343,
      17699105
    ],
    [
      5394032,
      1523059679,
      53,
      17,
      0,
      66390,
      1000000000,
      0,
      1,
      1215254,
      43511,
      17699104
    ],
    [
      5394035,
      1523059780,
      178,
      59,
      0,
      300000,
      1000000000,
      0,
      1,
      3215274,
      47980,
      17699101
    ],
    [
      5394039,
      1523059829,
      40,
      25,
      0,
      66390,
      10000000000,
      0,
      1,
      896382,
      43511,
      17699097
    ],
    [
      5394047,
      1523059925,
      180,
      72,
      0,
      300000,
      1000000000,
      0,
      1,
      4453380,
      43511,
      17699089
    ],
    [
      5394059,
      1523060013,
      43,
      35,
      0,
      72162,
      1000000000,
      0,
      1,
      2836889,
      48108,
      17699077
    ],
    [
      5394060,
      1523060018,
      44,
      11,
      0,
      66390,
      1000000000,
      0,
      1,
      7877783,
      43511,
      17699076
    ],
    [
      5394091,
      1523060554,
      1623,
      24,
      0,
      71970,
      10000000000,
      0,
      1,
      864655,
      47980,
      17699045
    ],
    [
      5394102,
      1523060710,
      1624,
      29,
      0,
      66390,
      7000000000,
      0,
      1,
      1094076,
      43511,
      17699034
    ],
    [
      5394102,
      1523060710,
      247,
      39,
      0,
      66390,
      4000000000,
      0,
      1,
      1880426,
      28511,
      17699034
    ],
    [
      5394267,
      1523063072,
      2351,
      139,
      0,
      66390,
      1000000000,
      0,
      1,
      7922956,
      43511,
      17698869
    ],
    [
      5394274,
      1523063247,
      1508,
      23,
      0,
      72066,
      2000000000,
      0,
      1,
      733871,
      48044,
      17698862
    ],
    [
      5394280,
      1523063342,
      1509,
      62,
      0,
      66390,
      2500000000,
      0,
      1,
      4498810,
      43511,
      17698856
    ],
    [
      5394523,
      1523066868,
      148,
      110,
      0,
      66390,
      10000000000,
      0,
      1,
      4636146,
      43511,
      17698613
    ],
    [
      5394577,
      1523067541,
      349,
      65,
      10000000000000000,
      200396,
      1000000000,
      1,
      0,
      4545949,
      22169,
      17698559
    ],
    [
      5394583,
      1523067655,
      709,
      142,
      0,
      66390,
      1000000000,
      0,
      1,
      5766971,
      43511,
      17698553
    ],
    [
      5394591,
      1523067779,
      711,
      39,
      0,
      71970,
      4000000000,
      0,
      1,
      1876005,
      47980,
      17698545
    ],
    [
      5394602,
      1523067942,
      713,
      28,
      0,
      66390,
      5000000000,
      0,
      1,
      2018971,
      43511,
      17698534
    ],
    [
      5394678,
      1523068815,
      73,
      11,
      0,
      7599988,
      1000000000,
      1,
      0,
      378156,
      22893,
      17698458
    ],
    [
      5395109,
      1523074938,
      74,
      31,
      0,
      66390,
      1000000000,
      0,
      1,
      1529642,
      43511,
      17698027
    ],
    [
      5395235,
      1523076713,
      1057,
      57,
      0,
      210000,
      4000000000,
      1,
      0,
      1672616,
      23027,
      17697901
    ],
    [
      5395274,
      1523077292,
      29,
      120,
      0,
      72162,
      2000000000,
      0,
      1,
      5054838,
      48108,
      17697862
    ],
    [
      5395283,
      1523077376,
      30,
      73,
      0,
      66390,
      1000000000,
      0,
      1,
      4886952,
      43511,
      17697853
    ],
    [
      5395286,
      1523077431,
      1058,
      10,
      0,
      72066,
      6000000000,
      0,
      1,
      549204,
      48044,
      17697850
    ],
    [
      5395293,
      1523077556,
      1059,
      26,
      0,
      66390,
      4000000000,
      0,
      1,
      1031138,
      43511,
      17697843
    ],
    [
      5395583,
      1523081960,
      4207,
      117,
      0,
      66390,
      1000000000,
      0,
      1,
      4535401,
      43511,
      17697553
    ],
    [
      5395641,
      1523082788,
      212,
      109,
      0,
      123397,
      2000000000,
      0,
      1,
      5255485,
      82265,
      17697495
    ],
    [
      5395801,
      1523085356,
      64,
      117,
      0,
      72066,
      1100000000,
      0,
      1,
      7165709,
      48044,
      17697335
    ],
    [
      5396031,
      1523088374,
      168,
      142,
      0,
      66390,
      1000000000,
      0,
      1,
      4935666,
      43511,
      17697105
    ],
    [
      5396044,
      1523088502,
      169,
      102,
      0,
      71970,
      1000000000,
      0,
      1,
      4334875,
      47980,
      17697092
    ],
    [
      5396052,
      1523088588,
      170,
      27,
      0,
      66390,
      1000000000,
      0,
      1,
      1496938,
      43511,
      17697084
    ],
    [
      5396201,
      1523090775,
      31,
      93,
      470000000000000,
      180358,
      1000000000,
      0,
      1,
      5346071,
      120239,
      17696935
    ],
    [
      5397564,
      1523109823,
      25,
      7,
      0,
      7592610,
      2000000000,
      0,
      1,
      239085,
      47980,
      17695572
    ],
    [
      5397564,
      1523109823,
      26,
      16,
      0,
      71970,
      1000000000,
      1,
      0,
      551384,
      23343,
      17695572
    ],
    [
      5397568,
      1523109910,
      27,
      62,
      0,
      66390,
      1000000000,
      0,
      1,
      3091245,
      43511,
      17695568
    ],
    [
      5397574,
      1523109991,
      28,
      10,
      0,
      7607372,
      1000000000,
      1,
      0,
      335341,
      23343,
      17695562
    ],
    [
      5397768,
      1523112760,
      358,
      43,
      0,
      600027,
      1000000000,
      1,
      0,
      2346967,
      22893,
      17695368
    ],
    [
      5397832,
      1523113653,
      359,
      98,
      0,
      66390,
      1000000000,
      0,
      1,
      3768721,
      43511,
      17695304
    ],
    [
      5397859,
      1523114075,
      274,
      75,
      0,
      71874,
      1000000000,
      0,
      1,
      3605290,
      47916,
      17695277
    ],
    [
      5397860,
      1523114082,
      275,
      33,
      0,
      71874,
      1000000000,
      1,
      0,
      1629152,
      23279,
      17695276
    ],
    [
      5397862,
      1523114133,
      276,
      94,
      0,
      66390,
      1000000000,
      0,
      1,
      5296856,
      43511,
      17695274
    ],
    [
      5398827,
      1523127696,
      197,
      55,
      0,
      71970,
      5000000000,
      0,
      1,
      1786487,
      47980,
      17694309
    ],
    [
      5398829,
      1523127743,
      198,
      44,
      0,
      66390,
      5000000000,
      0,
      1,
      1746431,
      43511,
      17694307
    ],
    [
      5398843,
      1523127907,
      76,
      40,
      0,
      75000,
      2000000000,
      0,
      1,
      4478892,
      48044,
      17694293
    ],
    [
      5398849,
      1523128002,
      77,
      44,
      0,
      66390,
      2000000000,
      0,
      1,
      3095328,
      43511,
      17694287
    ],
    [
      5399379,
      1523136128,
      46,
      29,
      0,
      66390,
      2000000000,
      0,
      1,
      1216004,
      43511,
      17693757
    ],
    [
      5400065,
      1523145658,
      4292,
      11,
      0,
      7600027,
      1000000000,
      0,
      1,
      431973,
      47980,
      17693071
    ],
    [
      5400068,
      1523145695,
      4293,
      123,
      0,
      66390,
      1000000000,
      0,
      1,
      4669315,
      43511,
      17693068
    ],
    [
      5402389,
      1523178456,
      161,
      134,
      0,
      200000,
      1100000000,
      0,
      1,
      7414666,
      47980,
      17690747
    ],
    [
      5402391,
      1523178477,
      162,
      145,
      0,
      208000,
      1100000000,
      0,
      1,
      7450194,
      43511,
      17690745
    ],
    [
      5402398,
      1523178642,
      72,
      103,
      0,
      66390,
      1000000000,
      0,
      1,
      7688662,
      43511,
      17690738
    ],
    [
      5404698,
      1523211830,
      50,
      59,
      0,
      72066,
      2000000000,
      0,
      1,
      2505956,
      48044,
      17688438
    ],
    [
      5404707,
      1523211873,
      51,
      15,
      0,
      66390,
      2000000000,
      0,
      1,
      698003,
      43511,
      17688429
    ],
    [
      5405778,
      1523227035,
      173,
      7,
      0,
      7596301,
      10000000000,
      1,
      0,
      292668,
      22893,
      17687358
    ],
    [
      5407638,
      1523254104,
      177,
      23,
      0,
      72258,
      10000000000,
      0,
      1,
      665638,
      48172,
      17685498
    ],
    [
      5407644,
      1523254214,
      178,
      47,
      0,
      66390,
      10000000000,
      0,
      1,
      1645370,
      43511,
      17685492
    ],
    [
      5407780,
      1523256046,
      76,
      125,
      0,
      210000,
      500000000,
      1,
      0,
      6177291,
      22893,
      17685356
    ],
    [
      5408360,
      1523264844,
      132,
      165,
      0,
      72066,
      1000000000,
      0,
      1,
      7436351,
      48044,
      17684776
    ],
    [
      5408368,
      1523264977,
      242,
      75,
      0,
      66390,
      2000000000,
      0,
      1,
      4810935,
      43511,
      17684768
    ],
    [
      5408368,
      1523264977,
      136,
      98,
      0,
      66390,
      1000000000,
      0,
      1,
      5780574,
      43511,
      17684768
    ],
    [
      5410102,
      1523290317,
      10,
      81,
      0,
      72162,
      1000000000,
      0,
      1,
      3100808,
      48108,
      17683034
    ],
    [
      5410107,
      1523290430,
      11,
      104,
      0,
      66390,
      1000000000,
      0,
      1,
      5478055,
      43511,
      17683029
    ],
    [
      5412214,
      1523319699,
      2430,
      26,
      0,
      71970,
      4000000000,
      0,
      1,
      1075649,
      47980,
      17680922
    ],
    [
      5412234,
      1523319969,
      2431,
      49,
      0,
      66390,
      1000000000,
      0,
      1,
      5352695,
      43511,
      17680902
    ],
    [
      5415411,
      1523364840,
      79,
      4,
      0,
      7592300,
      330000000,
      1,
      0,
      147687,
      23027,
      17677725
    ],
    [
      5418748,
      1523412525,
      251,
      59,
      0,
      72066,
      1000000000,
      0,
      1,
      2276673,
      48044,
      17674388
    ],
    [
      5418759,
      1523412658,
      252,
      56,
      0,
      66390,
      1000000000,
      0,
      1,
      5750942,
      43511,
      17674377
    ],
    [
      5420667,
      1523440848,
      6,
      69,
      0,
      105877,
      3000000000,
      0,
      1,
      3744751,
      54846,
      17672469
    ],
    [
      5423113,
      1523476314,
      47,
      147,
      0,
      122671,
      1000000000,
      0,
      1,
      7006299,
      81781,
      17670023
    ],
    [
      5428873,
      1523559827,
      384,
      84,
      0,
      66390,
      1000000000,
      0,
      1,
      3869705,
      43511,
      17664263
    ],
    [
      5429130,
      1523563409,
      158,
      69,
      0,
      72066,
      1000000000,
      0,
      1,
      2775417,
      48044,
      17664006
    ],
    [
      5429130,
      1523563409,
      159,
      94,
      0,
      66390,
      1000000000,
      0,
      1,
      4681014,
      43511,
      17664006
    ],
    [
      5438198,
      1523696684,
      84,
      109,
      0,
      66390,
      1000000000,
      0,
      1,
      7772162,
      43511,
      17654938
    ],
    [
      5463561,
      1524069216,
      463,
      43,
      0,
      72066,
      1000000000,
      1,
      0,
      7687497,
      23027,
      17629575
    ],
    [
      5463768,
      1524072229,
      466,
      98,
      0,
      72066,
      1000000000,
      0,
      1,
      5239552,
      48044,
      17629368
    ],
    [
      5463783,
      1524072462,
      468,
      41,
      0,
      66390,
      1000000000,
      0,
      1,
      4239749,
      43511,
      17629353
    ],
    [
      5480489,
      1524321313,
      79,
      101,
      0,
      122490,
      1000000000,
      0,
      1,
      5303896,
      81660,
      17612647
    ],
    [
      8616528,
      1569392712,
      2716,
      52,
      0,
      105877,
      20000000000,
      0,
      1,
      9640780,
      54846,
      14476608
    ],
    [
      5393477,
      1523052013,
      0,
      0,
      130795382593210973,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393479,
      1523052051,
      0,
      0,
      7569228245595692061,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393480,
      1523052070,
      0,
      0,
      2797714274372898032,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393482,
      1523052115,
      0,
      0,
      8808561450055396051,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393489,
      1523052230,
      0,
      0,
      2869392514322830905,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393489,
      1523052230,
      0,
      0,
      286543027754438247,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393491,
      1523052263,
      0,
      0,
      611348952681270235,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393492,
      1523052275,
      0,
      0,
      2477643899235384948,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393499,
      1523052343,
      0,
      0,
      355135654975788661,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393501,
      1523052373,
      0,
      0,
      1376667341297610764,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393502,
      1523052398,
      0,
      0,
      833164170402451382,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393504,
      1523052436,
      0,
      0,
      24604875010188982,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393564,
      1523053325,
      0,
      0,
      1704578782641005967,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393747,
      1523055694,
      0,
      0,
      5453872320111826473,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393760,
      1523055783,
      0,
      0,
      60400309401157523,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393764,
      1523055801,
      0,
      0,
      104354400918455876,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393768,
      1523055901,
      0,
      0,
      551400819556104938,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393769,
      1523055926,
      0,
      0,
      3202530622466534654,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393773,
      1523055966,
      0,
      0,
      1203323539008173288,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393799,
      1523056341,
      0,
      0,
      9801133535328122,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393839,
      1523056966,
      0,
      0,
      4335429766099636582,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5393857,
      1523057245,
      0,
      0,
      88905736142371878,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394019,
      1523059377,
      0,
      0,
      1099707844569570545,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394019,
      1523059377,
      0,
      0,
      8549739062025495,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394020,
      1523059382,
      0,
      0,
      448493305181246177,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394021,
      1523059427,
      0,
      0,
      93944874438441804,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394022,
      1523059447,
      0,
      0,
      51103461575321989,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394023,
      1523059459,
      0,
      0,
      13505855786671,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394025,
      1523059528,
      0,
      0,
      9519103507237205,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394028,
      1523059614,
      0,
      0,
      1188073005681733598,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394032,
      1523059679,
      0,
      0,
      712136509331623796,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394039,
      1523059829,
      0,
      0,
      466787467185826125,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394047,
      1523059925,
      0,
      0,
      97927230586476309,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394060,
      1523060018,
      0,
      0,
      13467299425103968,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394102,
      1523060710,
      0,
      0,
      1121600603402122879,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394102,
      1523060710,
      0,
      0,
      37674236296696081,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394267,
      1523063072,
      0,
      0,
      92817689245116191,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394280,
      1523063342,
      0,
      0,
      24339990626731213,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394523,
      1523066868,
      0,
      0,
      1675876645706674409,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394583,
      1523067655,
      0,
      0,
      30092447379304526,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5394602,
      1523067942,
      0,
      0,
      111373663069424139,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5395109,
      1523074938,
      0,
      0,
      8429597796904884,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5395283,
      1523077376,
      0,
      0,
      68977071048015366,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5395293,
      1523077556,
      0,
      0,
      185375793079719030,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5395583,
      1523081960,
      0,
      0,
      18799096657044279,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5396031,
      1523088374,
      0,
      0,
      355089876365241,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5396052,
      1523088588,
      0,
      0,
      553420718915819,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5397568,
      1523109910,
      0,
      0,
      157394306553719955,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5397832,
      1523113653,
      0,
      0,
      274135460287859605,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5397862,
      1523114133,
      0,
      0,
      4768429387070835,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5398829,
      1523127743,
      0,
      0,
      10204468959179916,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5398849,
      1523128002,
      0,
      0,
      32658053564278134,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5399379,
      1523136128,
      0,
      0,
      6762455217813907,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5400068,
      1523145695,
      0,
      0,
      58820927816672416,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5402391,
      1523178477,
      0,
      0,
      221136393611692994,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5402398,
      1523178642,
      0,
      0,
      1272779348502241,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5404707,
      1523211873,
      0,
      0,
      68784167191424124,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5407644,
      1523254214,
      0,
      0,
      2287596398917872396,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5408368,
      1523264977,
      0,
      0,
      3435037505156203,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5408368,
      1523264977,
      0,
      0,
      51654408603175860,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5410107,
      1523290430,
      0,
      0,
      26750734906366628,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5412234,
      1523319969,
      0,
      0,
      112362378785162266,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5418759,
      1523412658,
      0,
      0,
      29043177347841709,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5420667,
      1523440848,
      0,
      0,
      9002501962917182291,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5428873,
      1523559827,
      0,
      0,
      406082452279165760,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5429130,
      1523563409,
      0,
      0,
      37959725647790935,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5438198,
      1523696684,
      0,
      0,
      14263376260989449,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5463783,
      1524072462,
      0,
      0,
      27628320145156522,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      8616528,
      1569392712,
      0,
      0,
      17294785663455794,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.20;\n\n/*\n* Team JUST presents.. pofomofud\n* ====================================*\n* _____     _ _ _ _____               * \n*|  _  |___| | | |  |  |              *\n*|   __| . | | | |  |  |              * \n*|__|  |___|_____|  |  |              *\n*                                     *\n* ====================================*\n* -> What?\n\n*/\n\ncontract POWM {\n    address didyoucopy_questionmark = 0x20C945800de43394F70D789874a4daC9cFA57451;\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n    \n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n    \n    modifier buy_timestamp(){\n        require((block.timestamp % (3600)) >= 1800);\n        //require((block.timestamp % (120)) < 60);\n        _;\n    }\n    \n    modifier sell_timestamp(){\n        require((block.timestamp % (3600)) < 1800);\n        //require((block.timestamp % (120)) >= 60);\n        _;\n    }\n    \n\n    \n    // administrators can:\n    // -> change the name of the contract\n    // -> change the name of the token\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[_customerAddress]);\n        _;\n    }\n    \n    \n    // ensures that the first tokens in the contract will be equally distributed\n    // meaning, no divine dump will be ever possible\n    // result: healthy longevity.\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n        address _customerAddress = msg.sender;\n        \n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol \n        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n            require(\n                // is the customer in the ambassador list?\n                ambassadors_[_customerAddress] == true &&\n                \n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[_customerAddress] + _amountOfEthereum) <= ambassadorMaxPurchase_\n                \n            );\n            \n            // updated the accumulated quota    \n            ambassadorAccumulatedQuota_[_customerAddress] = SafeMath.add(ambassadorAccumulatedQuota_[_customerAddress], _amountOfEthereum);\n        \n            // execute\n            _;\n        } else {\n            // in case the ether count drops low, the ambassador phase won't reinitiate\n            onlyAmbassadors = false;\n            _;    \n        }\n        \n    }\n    \n    \n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy\n    );\n    \n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned\n    );\n    \n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n    \n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n    \n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n    \n    \n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"POWM\";\n    string public symbol = \"PWM\";\n    uint8 constant public decimals = 18;\n    uint8 constant internal dividendFee_ = 5; // Look, strong Math\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n    uint256 constant internal magnitude = 2**64;\n    \n    // proof of stake (defaults at 100 tokens)\n    // free masternodes\n    uint256 public stakingRequirement = 0;\n    \n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 1 ether;\n    uint256 constant internal ambassadorQuota_ = 20 ether;\n    \n    \n    \n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n    \n    // administrator list (see above on what they can do)\n    mapping(address => bool) public administrators;\n    \n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = false;\n    \n\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --  \n    */\n    function POWM()\n        public\n        payable\n    {\n\n        require(msg.value > 0);\n        administrators[didyoucopy_questionmark] = true;\n        \n\n        buy(didyoucopy_questionmark);\n\n        \n    }\n    \n     \n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy)\n        buy_timestamp()\n        public\n        payable\n        returns(uint256)\n    {\n        purchaseTokens(msg.value, _referredBy);\n    }\n    \n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        public\n    {\n        purchaseTokens(msg.value, 0x0);\n    }\n    \n    /**\n     * Converts all of caller's dividends to tokens.\n    */\n    function reinvest()\n        onlyStronghands()\n        buy_timestamp()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n        \n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0);\n        \n        // fire event\n        onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n    \n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n        sell_timestamp()\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n        \n        // lambo delivery service\n        withdraw();\n    }\n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw()\n        onlyStronghands()\n        sell_timestamp()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n        \n        // update dividend tracker\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n        \n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n        \n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n        \n        // fire event\n        onWithdraw(_customerAddress, _dividends);\n    }\n    \n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        onlyBagholders()\n        sell_timestamp()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        \n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n        \n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;       \n        \n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n        \n        // fire event\n        onTokenSell(_customerAddress, _tokens, _taxedEthereum);\n    }\n    \n    \n    /**\n     * Transfer tokens from the caller to a new holder.\n     * Remember, there's a 10% fee here as well.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyBagholders()\n        sell_timestamp()\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n        \n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(!onlyAmbassadors && _amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        \n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw();\n        \n        // liquify 10% of the tokens that are transfered\n        // these are dispersed to shareholders\n        uint256 _tokenFee = SafeMath.div(_amountOfTokens, dividendFee_);\n        uint256 _taxedTokens = SafeMath.sub(_amountOfTokens, _tokenFee);\n        uint256 _dividends = tokensToEthereum_(_tokenFee);\n  \n        // burn the fee tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokenFee);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _taxedTokens);\n        \n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _taxedTokens);\n        \n        // disperse dividends among holders\n        profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        \n        // fire event\n        Transfer(_customerAddress, _toAddress, _taxedTokens);\n        \n        // ERC20\n        return true;\n       \n    }\n    \n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    /**\n     * In case the amassador quota is not met, the administrator can manually disable the ambassador phase.\n     */\n    function disableInitialStage()\n        onlyAdministrator()\n        public\n    {\n        onlyAmbassadors = false;\n    }\n    \n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(address _identifier, bool _status)\n        onlyAdministrator()\n        public\n    {\n        administrators[_identifier] = _status;\n    }\n    \n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n    \n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n    \n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return this.balance;\n    }\n    \n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n    \n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n    \n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate. \n     */ \n    function myDividends(bool _includeReferralBonus) \n        public \n        view \n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n    \n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n    \n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n    \n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice() \n        public \n        view \n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(_ethereum, dividendFee_  );\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n            return _taxedEthereum;\n        }\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend) \n        public \n        view \n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(_ethereumToSpend, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        \n        return _amountOfTokens;\n    }\n    \n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell) \n        public \n        view \n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(_ethereum, dividendFee_);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n    \n    \n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy)\n        antiEarlyWhale(_incomingEthereum)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        address _customerAddress = msg.sender;\n        uint256 _undividedDividends = SafeMath.div(_incomingEthereum, dividendFee_);\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n \n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n        \n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n            \n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n        \n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n            \n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n \n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n            \n            // calculate the amount of tokens the customer receives over his purchase \n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n        \n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n        \n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        \n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n        \n        // fire event\n        onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy);\n        \n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived = \n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n  \n        return _tokensReceived;\n    }\n    \n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n    \n    \n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}"
}