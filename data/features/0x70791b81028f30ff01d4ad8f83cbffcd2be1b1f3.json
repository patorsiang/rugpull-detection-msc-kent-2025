{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 JUMPDEST PUSH1 PUSH1 REVERT JUMPDEST JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH16 PUSH1 CALLDATALOAD AND PUSH1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH16 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 CALLDATALOAD ISZERO ISZERO PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH16 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH16 PUSH1 CALLDATALOAD AND PUSH1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 SLOAD PUSH3 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 PUSH2 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE DUP3 MLOAD PUSH32 DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS DUP2 AND PUSH1 DUP4 ADD MSTORE SWAP4 MLOAD SWAP2 SWAP5 SWAP4 SWAP1 SWAP4 AND SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP PUSH1 MLOAD MLOAD SWAP2 POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE DUP3 MLOAD PUSH32 DUP2 MSTORE SWAP3 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP5 AND SWAP4 PUSH4 SWAP4 PUSH1 DUP1 DUP3 ADD SWAP5 SWAP4 SWAP2 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP PUSH1 MLOAD MLOAD ISZERO ISZERO SWAP1 POP PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE DUP3 MLOAD PUSH32 DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS DUP2 AND PUSH1 DUP4 ADD MSTORE SWAP4 MLOAD SWAP4 SWAP1 SWAP5 AND SWAP4 PUSH4 SWAP4 PUSH1 DUP1 DUP4 ADD SWAP5 SWAP4 SWAP2 SWAP3 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP PUSH1 MLOAD MLOAD ISZERO ISZERO SWAP1 POP PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP GT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 JUMP JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH1 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE DUP3 MLOAD PUSH32 DUP2 MSTORE SWAP3 MLOAD SWAP5 SWAP1 SWAP4 AND SWAP4 PUSH4 SWAP4 PUSH1 DUP1 DUP6 ADD SWAP5 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP PUSH1 MLOAD MLOAD ISZERO ISZERO SWAP1 POP PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP1 DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH13 MUL DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP7 PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP PUSH1 DUP1 MLOAD DUP1 MLOAD PUSH1 SLOAD PUSH1 DUP4 DUP2 MSTORE PUSH1 DUP1 DUP6 ADD DUP7 MSTORE SWAP4 DUP6 ADD DUP2 SWAP1 MSTORE DUP5 MLOAD DUP4 DUP2 MSTORE PUSH1 DUP11 AND DUP2 DUP7 ADD MSTORE DUP1 DUP7 ADD DUP10 SWAP1 MSTORE PUSH1 DUP2 ADD DUP9 SWAP1 MSTORE SWAP5 MLOAD SWAP3 SWAP6 POP PUSH4 SWAP1 SWAP2 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP4 PUSH1 SWAP4 PUSH1 DUP1 DUP4 ADD SWAP5 SWAP2 SWAP4 PUSH1 NOT DUP4 ADD SWAP4 DUP4 SWAP1 SUB SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP7 PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP PUSH1 MLOAD PUSH1 NOT ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH16 DUP6 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH2 DUP7 DUP7 PUSH2 JUMP JUMPDEST JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE DUP3 MLOAD PUSH32 DUP2 MSTORE SWAP3 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP5 AND SWAP4 PUSH4 SWAP4 PUSH1 DUP1 DUP3 ADD SWAP5 SWAP4 SWAP2 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP PUSH1 EXP DUP5 MUL SWAP2 POP DUP4 DUP4 MUL SWAP1 POP PUSH2 PUSH1 SLOAD DUP3 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SWAP1 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 DUP6 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP2 MSTORE PUSH1 DUP2 ADD DUP4 SWAP1 MSTORE DUP1 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG1 JUMPDEST JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 DUP1 JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP POP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMPDEST JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH1 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE DUP3 MLOAD PUSH32 DUP2 MSTORE SWAP3 MLOAD SWAP5 SWAP1 SWAP4 AND SWAP4 PUSH4 SWAP4 PUSH1 DUP1 DUP6 ADD SWAP5 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP PUSH1 MLOAD MLOAD ISZERO ISZERO SWAP1 POP PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP2 POP DUP2 ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND DUP2 MSTORE PUSH1 DUP2 ADD DUP5 SWAP1 MSTORE DUP2 MLOAD PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND SWAP1 DUP4 ISZERO PUSH2 MUL SWAP1 DUP5 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH4 SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND PUSH1 PUSH1 EXP OR SWAP1 SSTORE JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST DUP1 TIMESTAMP GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG1 JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD LT ISZERO JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH2 NOT AND PUSH2 DUP4 ISZERO ISZERO DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 DUP1 MLOAD PUSH1 SWAP3 DUP5 DIV DUP4 AND ISZERO ISZERO DUP2 MSTORE PUSH3 DUP5 DIV SWAP1 SWAP3 AND ISZERO ISZERO PUSH1 DUP4 ADD MSTORE PUSH4 SWAP1 SWAP3 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH32 SWAP2 PUSH1 SWAP1 DUP3 SWAP1 SUB ADD SWAP1 LOG1 JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST CALLVALUE ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH2 PUSH1 SLOAD CALLVALUE PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 SWAP1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH2 CALLER DUP3 PUSH2 JUMP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP3 GT JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 GT ISZERO PUSH2 JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 CALLER PUSH2 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 SWAP2 DUP3 ADD DUP2 SWAP1 MSTORE DUP3 MLOAD PUSH32 DUP2 MSTORE SWAP3 MLOAD SWAP1 SWAP4 PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP8 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP PUSH1 MLOAD MLOAD SWAP2 POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND SWAP1 SSTORE JUMPDEST JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 DUP3 DUP3 MUL PUSH2 DUP5 ISZERO DUP1 PUSH2 JUMPI POP DUP4 DUP6 DUP4 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH3 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD LT ISZERO JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD PUSH2 DUP5 DUP3 LT ISZERO PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH3 NOT AND PUSH3 DUP5 ISZERO ISZERO DUP2 MUL SWAP2 SWAP1 SWAP2 OR PUSH23 NOT AND PUSH4 PUSH1 PUSH1 PUSH1 EXP SUB DUP6 DUP2 AND DUP3 MUL SWAP3 SWAP1 SWAP3 OR SWAP4 DUP5 SWAP1 SSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP8 DIV DUP2 AND ISZERO ISZERO DUP3 MSTORE SWAP5 DUP7 DIV SWAP1 SWAP5 AND ISZERO ISZERO PUSH1 DUP6 ADD MSTORE SWAP4 DIV AND DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH32 SWAP2 PUSH1 SWAP1 DUP3 SWAP1 SUB ADD SWAP1 LOG1 JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH3 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH16 DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 CALLER DUP6 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 PUSH1 REVERT JUMPDEST JUMPDEST CALLVALUE SWAP2 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP4 PUSH1 SLOAD PUSH1 SLOAD CALLER PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 SWAP1 POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP7 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP7 DUP2 MSTORE PUSH1 ADD DUP6 DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP PUSH1 MLOAD MLOAD SWAP2 POP POP DUP1 ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SWAP1 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 DUP3 PUSH1 SLOAD PUSH1 SLOAD PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH2 DUP5 DUP3 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP1 DUP4 ISZERO PUSH2 MUL SWAP1 DUP5 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND DUP2 MSTORE PUSH1 DUP2 ADD DUP5 SWAP1 MSTORE DUP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH16 DUP6 AND PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG1 JUMPDEST JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH32 DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 DUP3 SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST JUMPDEST POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xb7 MSTORE CHAINID PUSH25 UNKNOWN_0xda UNKNOWN_0xd DUP16 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.779363773754142,
  "opcode_count": 4701,
  "unique_opcodes": 70,
  "byte_entropy": 5.872824247830784,
  "byte_60": 0.10302366944862498,
  "byte_40": 0.012587221234094951,
  "byte_52": 0.01696538514160624,
  "byte_36": 0.00013681762210972773,
  "byte_15": 0.0300998768641401,
  "byte_61": 0.05349569024490354,
  "byte_02": 0.024353536735531537,
  "byte_57": 0.025448077712409357,
  "byte_63": 0.009850868791900396,
  "byte_ff": 0.031741688329456834,
  "byte_e0": 0.0004104528663291832,
  "byte_0a": 0.016007661786838146,
  "byte_00": 0.0690928991654125,
  "byte_35": 0.005746340128608565,
  "byte_04": 0.010945409768778218,
  "byte_16": 0.02243809002599535,
  "byte_26": 0.0006840881105486386,
  "byte_1d": 0.00013681762210972773,
  "byte_81": 0.024079901491312082,
  "byte_14": 0.012724038856204678,
  "byte_6f": 0.0013681762210972772,
  "byte_80": 0.023395813380763443,
  "byte_03": 0.024627171979750992,
  "byte_ca": 0.0005472704884389109,
  "byte_0e": 0.0034204405527431935,
  "byte_ed": 0.0004104528663291832,
  "byte_91": 0.014229032699411684,
  "byte_f9": 0.00013681762210972773,
  "byte_c7": 0.00013681762210972773,
  "byte_93": 0.005609522506498837,
  "byte_b5": 0.0005472704884389109,
  "byte_06": 0.0023258995758653716,
  "byte_2b": 0.0005472704884389109,
  "byte_01": 0.028868518265152552,
  "byte_ce": 0.00027363524421945547,
  "byte_cb": 0.0008209057326583664,
  "byte_09": 0.0043781639075112875,
  "byte_28": 0.00027363524421945547,
  "byte_4a": 0.0005472704884389109,
  "byte_ef": 0.00027363524421945547,
  "byte_13": 0.0023258995758653716,
  "byte_f4": 0.00027363524421945547,
  "byte_e9": 0.0005472704884389109,
  "byte_77": 0.0013681762210972772,
  "byte_11": 0.0027363524421945545,
  "byte_18": 0.0028731700643042824,
  "byte_65": 0.0005472704884389109,
  "byte_c5": 0.00027363524421945547,
  "byte_7d": 0.0005472704884389109,
  "byte_33": 0.003557258174852921,
  "byte_19": 0.0034204405527431935,
  "byte_b6": 0.0005472704884389109,
  "byte_67": 0.0006840881105486386,
  "byte_da": 0.0006840881105486386,
  "byte_1a": 0.0015049938432070051,
  "byte_49": 0.0004104528663291832,
  "byte_3b": 0.002052264331645916,
  "byte_85": 0.00424134628540156,
  "byte_ae": 0.0010945409768778219,
  "byte_34": 0.007114516349705842,
  "byte_bc": 0.0006840881105486386,
  "byte_21": 0.0006840881105486386,
  "byte_d5": 0.0004104528663291832,
  "byte_c0": 0.0004104528663291832,
  "byte_f6": 0.0004104528663291832,
  "byte_ea": 0.0008209057326583664,
  "byte_32": 0.0005472704884389109,
  "byte_3a": 0.0006840881105486386,
  "byte_c3": 0.0005472704884389109,
  "byte_42": 0.0009577233547680941,
  "byte_45": 0.0004104528663291832,
  "byte_51": 0.019701737583800793,
  "byte_dd": 0.00013681762210972773,
  "byte_59": 0.0006840881105486386,
  "byte_5c": 0.0008209057326583664,
  "byte_4b": 0.00027363524421945547,
  "byte_b2": 0.00027363524421945547,
  "byte_78": 0.0010945409768778219,
  "byte_f3": 0.0053358872622793815,
  "byte_50": 0.019838555205910522,
  "byte_c6": 0.0021890819537556437,
  "byte_92": 0.0050622520180599265,
  "byte_8a": 0.0005472704884389109,
  "byte_a8": 0.00027363524421945547,
  "byte_b0": 0.00027363524421945547,
  "byte_e3": 0.0004104528663291832,
  "byte_d2": 0.0006840881105486386,
  "byte_5b": 0.05431659597756191,
  "byte_76": 0.002462717197975099,
  "byte_d0": 0.0010945409768778219,
  "byte_e4": 0.0004104528663291832,
  "byte_5d": 0.0004104528663291832,
  "byte_9a": 0.0006840881105486386,
  "byte_05": 0.0028731700643042824,
  "byte_10": 0.0030099876864140103,
  "byte_5e": 0.00027363524421945547,
  "byte_d7": 0.0005472704884389109,
  "byte_6e": 0.0006840881105486386,
  "byte_eb": 0.00013681762210972773,
  "byte_3f": 0.0004104528663291832,
  "byte_44": 0.0012313585989875496,
  "byte_b9": 0.0010945409768778219,
  "byte_9c": 0.0004104528663291832,
  "byte_24": 0.002462717197975099,
  "byte_79": 0.0004104528663291832,
  "byte_94": 0.0031468053085237377,
  "byte_37": 0.0006840881105486386,
  "byte_7c": 0.00013681762210972773,
  "byte_2e": 0.0004104528663291832,
  "byte_08": 0.003557258174852921,
  "byte_a3": 0.0004104528663291832,
  "byte_a7": 0.0004104528663291832,
  "byte_7f": 0.005199069640169654,
  "byte_71": 0.0004104528663291832,
  "byte_1e": 0.00027363524421945547,
  "byte_84": 0.0032836229306334656,
  "byte_fe": 0.01080859214666849,
  "byte_29": 0.00027363524421945547,
  "byte_e2": 0.0006840881105486386,
  "byte_87": 0.0023258995758653716,
  "byte_8d": 0.0004104528663291832,
  "byte_fa": 0.0013681762210972772,
  "byte_ec": 0.00027363524421945547,
  "byte_a5": 0.0005472704884389109,
  "byte_23": 0.00027363524421945547,
  "byte_90": 0.040771651388698864,
  "byte_75": 0.00013681762210972773,
  "byte_be": 0.00013681762210972773,
  "byte_cf": 0.00027363524421945547,
  "byte_4f": 0.00027363524421945547,
  "byte_97": 0.0005472704884389109,
  "byte_b1": 0.00027363524421945547,
  "byte_7b": 0.0005472704884389109,
  "byte_99": 0.0004104528663291832,
  "byte_6c": 0.00027363524421945547,
  "byte_a9": 0.0004104528663291832,
  "byte_9d": 0.00013681762210972773,
  "byte_3c": 0.0009577233547680941,
  "byte_66": 0.0004104528663291832,
  "byte_c8": 0.00027363524421945547,
  "byte_a2": 0.00013681762210972773,
  "byte_d1": 0.00013681762210972773,
  "byte_e8": 0.0009577233547680941,
  "byte_f8": 0.00027363524421945547,
  "byte_a6": 0.00027363524421945547,
  "byte_f2": 0.0012313585989875496,
  "byte_07": 0.003694075796962649,
  "byte_20": 0.012587221234094951,
  "byte_ba": 0.0004104528663291832,
  "byte_2a": 0.00027363524421945547,
  "byte_af": 0.0006840881105486386,
  "byte_46": 0.0004104528663291832,
  "byte_86": 0.0023258995758653716,
  "byte_82": 0.014365850321521411,
  "byte_4e": 0.0005472704884389109,
  "byte_b3": 0.0006840881105486386,
  "byte_f0": 0.0009577233547680941,
  "byte_70": 0.0015049938432070051,
  "byte_b8": 0.0005472704884389109,
  "byte_0b": 0.0027363524421945545,
  "byte_e6": 0.0013681762210972772,
  "byte_3e": 0.0004104528663291832,
  "byte_64": 0.0015049938432070051,
  "byte_fd": 0.005746340128608565,
  "byte_22": 0.00027363524421945547,
  "byte_dc": 0.0005472704884389109,
  "byte_4c": 0.0005472704884389109,
  "byte_6a": 0.00027363524421945547,
  "byte_8c": 0.0006840881105486386,
  "byte_c2": 0.0004104528663291832,
  "byte_b4": 0.00013681762210972773,
  "byte_68": 0.00027363524421945547,
  "byte_2c": 0.0004104528663291832,
  "byte_43": 0.0005472704884389109,
  "byte_8b": 0.00013681762210972773,
  "byte_25": 0.00013681762210972773,
  "byte_fc": 0.0004104528663291832,
  "byte_0c": 0.0019154467095361882,
  "byte_54": 0.012997674100424135,
  "byte_6d": 0.0030099876864140103,
  "byte_56": 0.020933096182788342,
  "byte_a1": 0.0028731700643042824,
  "byte_a0": 0.01149268025721713,
  "byte_d3": 0.0013681762210972772,
  "byte_f7": 0.00027363524421945547,
  "byte_73": 0.0009577233547680941,
  "byte_53": 0.00013681762210972773,
  "byte_0d": 0.0030099876864140103,
  "byte_c4": 0.0006840881105486386,
  "byte_0f": 0.0019154467095361882,
  "byte_f5": 0.0005472704884389109,
  "byte_fb": 0.00027363524421945547,
  "byte_88": 0.0013681762210972772,
  "byte_c9": 0.0006840881105486386,
  "byte_12": 0.0015049938432070051,
  "byte_8f": 0.00027363524421945547,
  "byte_95": 0.0008209057326583664,
  "byte_ab": 0.0004104528663291832,
  "byte_83": 0.007114516349705842,
  "byte_db": 0.0005472704884389109,
  "byte_1c": 0.0017786290874264605,
  "byte_55": 0.003557258174852921,
  "byte_72": 0.0004104528663291832,
  "byte_df": 0.00013681762210972773,
  "byte_17": 0.0019154467095361882,
  "byte_2d": 0.0006840881105486386,
  "byte_62": 0.0010945409768778219,
  "byte_8e": 0.0013681762210972772,
  "byte_30": 0.0006840881105486386,
  "byte_58": 0.0004104528663291832,
  "byte_5a": 0.0017786290874264605,
  "byte_f1": 0.0023258995758653716,
  "byte_48": 0.0006840881105486386,
  "byte_7a": 0.0004104528663291832,
  "byte_89": 0.00027363524421945547,
  "byte_1f": 0.0005472704884389109,
  "byte_31": 0.0004104528663291832,
  "byte_e5": 0.0004104528663291832,
  "byte_1b": 0.0009577233547680941,
  "byte_cc": 0.00027363524421945547,
  "byte_96": 0.00027363524421945547,
  "byte_aa": 0.0008209057326583664,
  "byte_38": 0.00027363524421945547,
  "byte_74": 0.0005472704884389109,
  "byte_3d": 0.0005472704884389109,
  "byte_27": 0.0008209057326583664,
  "byte_ad": 0.00027363524421945547,
  "byte_d4": 0.0005472704884389109,
  "byte_bb": 0.0005472704884389109,
  "byte_98": 0.00027363524421945547,
  "byte_9b": 0.00027363524421945547,
  "byte_4d": 0.00013681762210972773,
  "byte_b7": 0.00027363524421945547,
  "byte_2f": 0.00013681762210972773,
  "byte_ee": 0.00013681762210972773,
  "byte_bd": 0.00013681762210972773,
  "byte_d8": 0.00027363524421945547,
  "byte_9e": 0.0006840881105486386,
  "byte_a4": 0.0005472704884389109,
  "byte_6b": 0.00013681762210972773,
  "byte_47": 0.00013681762210972773,
  "byte_5f": 0.00013681762210972773,
  "byte_d6": 0.00013681762210972773,
  "byte_41": 0.00013681762210972773,
  "byte_7e": 0.00013681762210972773,
  "byte_cd": 0.00013681762210972773,
  "byte_c1": 0.00027363524421945547,
  "byte_39": 0.00013681762210972773,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 5,
  "event_nums": 2,
  "creation_block": 3917564,
  "creation_timestamp": 1498214594,
  "life_time": 15972.0,
  "duration_seconds": 278508.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.00031302823514681025,
  "avg_gas_limit": 613721.8,
  "std_gas_limit": 1023146.2145317062,
  "avg_gas_used": 511434.6,
  "std_gas_used": 852621.7933758437,
  "avg_gas_price": 41375248850.2,
  "std_gas_price": 7459993959.412548,
  "invested_num": 2,
  "setfinalizeagent_num": 1,
  "preallocate_num": 2,
  "transferownership_num": 1,
  "timeline_sequence": [
    [
      3917564,
      1498214594,
      3,
      15,
      0,
      2657092,
      49000000000,
      0,
      0,
      3260884,
      2214243,
      19203344
    ],
    [
      3917623,
      1498215455,
      9,
      20,
      0,
      54750,
      51311252711,
      0,
      0,
      703105,
      45625,
      19203285
    ],
    [
      3931205,
      1498452731,
      14,
      22,
      0,
      187570,
      32000000000,
      0,
      0,
      618308,
      156308,
      19189703
    ],
    [
      3933410,
      1498490424,
      15,
      24,
      0,
      35704,
      37282495770,
      0,
      0,
      1009989,
      29753,
      19187498
    ],
    [
      3933536,
      1498493102,
      2,
      35,
      0,
      133493,
      37282495770,
      0,
      0,
      4410357,
      111244,
      19187372
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.11;\n\n contract SafeMathLib {\n\n  function safeMul(uint a, uint b) returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeSub(uint a, uint b) returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint a, uint b) returns (uint) {\n    uint c = a + b;\n    assert(c>=a);\n    return c;\n  }\n\n  function assert(bool assertion) private {\n    if (!assertion) throw;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  modifier onlyOwner() {\n    if (msg.sender != owner) {\n      throw;\n    }\n    _;\n  }\n\n\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function transfer(address _to, uint _value) returns (bool success);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint);\n  function transferFrom(address _from, address _to, uint _value) returns (bool success);\n  function approve(address _spender, uint _value) returns (bool success);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract FractionalERC20 is ERC20 {\n\n  uint public decimals;\n\n}\n\ncontract StandardToken is ERC20, SafeMathLib{\n  \n  event Minted(address receiver, uint amount);\n\n  \n  mapping(address => uint) balances;\n\n  \n  mapping (address => mapping (address => uint)) allowed;\n\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length != size + 4) {\n       throw;\n     }\n     _;\n  }\n\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) returns (bool success) {\n   \n   \n    balances[msg.sender] = safeSub(balances[msg.sender],_value);\n    balances[_to] = safeAdd(balances[_to],_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  function transferFrom(address _from, address _to, uint _value) returns (bool success) {\n    uint _allowance = allowed[_from][msg.sender];\n\n    balances[_to] = safeAdd(balances[_to],_value);\n    balances[_from] = safeSub(balances[_from],_value);\n    allowed[_from][msg.sender] = safeSub(_allowance,_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint _value) returns (bool success) {\n\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n\n function addApproval(address _spender, uint _addedValue)\n  onlyPayloadSize(2 * 32)\n  returns (bool success) {\n      uint oldValue = allowed[msg.sender][_spender];\n      allowed[msg.sender][_spender] = safeAdd(oldValue,_addedValue);\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n  }\n\n  function subApproval(address _spender, uint _subtractedValue)\n  onlyPayloadSize(2 * 32)\n  returns (bool success) {\n\n      uint oldVal = allowed[msg.sender][_spender];\n\n      if (_subtractedValue > oldVal) {\n          allowed[msg.sender][_spender] = 0;\n      } else {\n          allowed[msg.sender][_spender] = safeSub(oldVal,_subtractedValue);\n      }\n      Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n      return true;\n  }\n\n}\n\ncontract UpgradeAgent {\n\n  uint public originalSupply;\n\n  \n  function isUpgradeAgent() public constant returns (bool) {\n    return true;\n  }\n\n  function upgradeFrom(address _from, uint256 _value) public;\n\n}\n\n contract UpgradeableToken is StandardToken {\n\n  \n  address public upgradeMaster;\n\n  \n  UpgradeAgent public upgradeAgent;\n\n  \n  uint256 public totalUpgraded;\n\n  \n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n\n  \n  event Upgrade(address indexed _from, address indexed _to, uint256 _value);\n\n  \n  event UpgradeAgentSet(address agent);\n\n  \n  function UpgradeableToken(address _upgradeMaster) {\n    upgradeMaster = _upgradeMaster;\n  }\n\n  \n  function upgrade(uint256 value) public {\n\n      UpgradeState state = getUpgradeState();\n      if(!(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading)) {\n        \n        throw;\n      }\n\n      \n      if (value == 0) throw;\n\n      balances[msg.sender] = safeSub(balances[msg.sender],value);\n\n      \n      totalSupply = safeSub(totalSupply,value);\n      totalUpgraded = safeAdd(totalUpgraded,value);\n\n      \n      upgradeAgent.upgradeFrom(msg.sender, value);\n      Upgrade(msg.sender, upgradeAgent, value);\n  }\n\n \n  function setUpgradeAgent(address agent) external {\n\n      if(!canUpgrade()) {\n        \n        throw;\n      }\n\n      if (agent == 0x0) throw;\n      \n      if (msg.sender != upgradeMaster) throw;\n      \n      if (getUpgradeState() == UpgradeState.Upgrading) throw;\n\n      upgradeAgent = UpgradeAgent(agent);\n\n      \n      if(!upgradeAgent.isUpgradeAgent()) throw;\n      \n      if (upgradeAgent.originalSupply() != totalSupply) throw;\n\n      UpgradeAgentSet(upgradeAgent);\n  }\n\n  function getUpgradeState() public constant returns(UpgradeState) {\n    if(!canUpgrade()) return UpgradeState.NotAllowed;\n    else if(address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n    else if(totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n    else return UpgradeState.Upgrading;\n  }\n\n  \n  function setUpgradeMaster(address master) public {\n      if (master == 0x0) throw;\n      if (msg.sender != upgradeMaster) throw;\n      upgradeMaster = master;\n  }\n\n  \n  function canUpgrade() public constant returns(bool) {\n     return true;\n  }\n\n}\n\ncontract ReleasableToken is ERC20, Ownable {\n\n  \n  address public releaseAgent;\n\n  \n  bool public released = false;\n\n  \n  mapping (address => bool) public transferAgents;\n\n\n  modifier canTransfer(address _sender) {\n\n    if(!released) {\n        if(!transferAgents[_sender]) {\n            throw;\n        }\n    }\n\n    _;\n  }\n\n\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n    releaseAgent = addr;\n  }\n\n\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n    transferAgents[addr] = state;\n  }\n\n\n  function releaseTokenTransfer() public onlyReleaseAgent {\n    released = true;\n  }\n\n  \n  modifier inReleaseState(bool releaseState) {\n    if(releaseState != released) {\n        throw;\n    }\n    _;\n  }\n\n  \n  modifier onlyReleaseAgent() {\n    if(msg.sender != releaseAgent) {\n        throw;\n    }\n    _;\n  }\n\n  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\n    \n   return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\n    \n    return super.transferFrom(_from, _to, _value);\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n\n  bool public mintingFinished = false;\n\n  \n  mapping (address => bool) public mintAgents;\n\n  event MintingAgentChanged(address addr, bool state  );\n\n\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n    totalSupply = safeAdd(totalSupply,amount);\n    balances[receiver] = safeAdd(balances[receiver],amount);\n\n\n    Transfer(0, receiver, amount);\n  }\n\n\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n    mintAgents[addr] = state;\n    MintingAgentChanged(addr, state);\n  }\n\n  modifier onlyMintAgent() {\n    \n    if(!mintAgents[msg.sender]) {\n        throw;\n    }\n    _;\n  }\n\n  \n  modifier canMint() {\n    if(mintingFinished) throw;\n    _;\n  }\n}\n\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken {\n\n  event UpdatedTokenInformation(string newName, string newSymbol);\n\n  string public name;\n\n  string public symbol;\n\n  uint public decimals;\n\n  function CrowdsaleToken(string _name, string _symbol, uint _initialSupply, uint _decimals, bool _mintable)\n    UpgradeableToken(msg.sender) {\n\n    owner = msg.sender;\n\n    name = _name;\n    symbol = _symbol;\n\n    totalSupply = _initialSupply;\n\n    decimals = _decimals;\n\n    \n    balances[owner] = totalSupply;\n\n    if(totalSupply > 0) {\n      Minted(owner, totalSupply);\n    }\n\n    \n    if(!_mintable) {\n      mintingFinished = true;\n      if(totalSupply == 0) {\n        throw; \n      }\n    }\n  }\n\n\n  function releaseTokenTransfer() public onlyReleaseAgent {\n    mintingFinished = true;\n    super.releaseTokenTransfer();\n  }\n\n\n  function canUpgrade() public constant returns(bool) {\n    return released && super.canUpgrade();\n  }\n\n\n  function setTokenInformation(string _name, string _symbol) onlyOwner {\n    name = _name;\n    symbol = _symbol;\n\n    UpdatedTokenInformation(name, symbol);\n  }\n\n}\n\ncontract FinalizeAgent {\n\n  function isFinalizeAgent() public constant returns(bool) {\n    return true;\n  }\n  function isSane() public constant returns (bool);\n  function finalizeCrowdsale();\n\n}\n\n\n\n\n\n contract PricingStrategy {\n  function isPricingStrategy() public constant returns (bool) {\n    return true;\n  }\n  function isSane(address crowdsale) public constant returns (bool) {\n    return true;\n  }\n  function calculatePrice(uint value, uint weiRaised, uint tokensSold, address msgSender, uint decimals) public constant returns (uint tokenAmount);\n}\n\n\n\n\n\n contract Haltable is Ownable {\n  bool public halted;\n\n  modifier stopInEmergency {\n    if (halted) throw;\n    _;\n  }\n\n  modifier onlyInEmergency {\n    if (!halted) throw;\n    _;\n  }\n  function halt() external onlyOwner {\n    halted = true;\n  }\n  function unhalt() external onlyOwner onlyInEmergency {\n    halted = false;\n  }\n\n}\n\n\n\ncontract Crowdsale is Haltable, SafeMathLib {\n  FractionalERC20 public token;\n  PricingStrategy public pricingStrategy;\n  FinalizeAgent public finalizeAgent;\n  address public multisigWallet;\n  uint public minimumFundingGoal;\n  uint public startsAt;\n  uint public endsAt;\n  uint public tokensSold = 0;\n  uint public weiRaised = 0;\n  uint public investorCount = 0;\n  uint public loadedRefund = 0;\n  uint public weiRefunded = 0;\n  bool public finalized;\n  bool public requireCustomerId;\n  bool public requiredSignedAddress;\n  address public signerAddress;\n  mapping (address => uint256) public investedAmountOf;\n  mapping (address => uint256) public tokenAmountOf;\n  mapping (address => bool) public earlyParticipantWhitelist;\n  uint public ownerTestValue;\n  enum State{Unknown, Preparing, PreFunding, Funding, Success, Failure, Finalized, Refunding}\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\n  event Refund(address investor, uint weiAmount);\n  event InvestmentPolicyChanged(bool requireCustomerId, bool requiredSignedAddress, address signerAddress);\n  event Whitelisted(address addr, bool status);\n  event EndsAtChanged(uint endsAt);\n\n  function Crowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal) {\n\n    owner = msg.sender;\n\n    token = FractionalERC20(_token);\n\n    setPricingStrategy(_pricingStrategy);\n\n    multisigWallet = _multisigWallet;\n    if(multisigWallet == 0) {\n        throw;\n    }\n\n    if(_start == 0) {\n        throw;\n    }\n\n    startsAt = _start;\n\n    if(_end == 0) {\n        throw;\n    }\n\n    endsAt = _end;\n    if(startsAt >= endsAt) {\n        throw;\n    }\n    minimumFundingGoal = _minimumFundingGoal;\n  }\n  function() payable {\n    throw;\n  }\n  function investInternal(address receiver, uint128 customerId) stopInEmergency private {\n    if(getState() == State.PreFunding) {\n      if(!earlyParticipantWhitelist[receiver]) {\n        throw;\n      }\n    } else if(getState() == State.Funding) {\n    } else {\n      throw;\n    }\n\n    uint weiAmount = msg.value;\n    uint tokenAmount = pricingStrategy.calculatePrice(weiAmount, weiRaised, tokensSold, msg.sender, token.decimals());\n\n    if(tokenAmount == 0) {\n      throw;\n    }\n\n    if(investedAmountOf[receiver] == 0) {\n       investorCount++;\n    }\n    investedAmountOf[receiver] = safeAdd(investedAmountOf[receiver],weiAmount);\n    tokenAmountOf[receiver] = safeAdd(tokenAmountOf[receiver],tokenAmount);\n    weiRaised = safeAdd(weiRaised,weiAmount);\n    tokensSold = safeAdd(tokensSold,tokenAmount);\n    if(isBreakingCap(weiAmount, tokenAmount, weiRaised, tokensSold)) {\n      throw;\n    }\n\n    assignTokens(receiver, tokenAmount);\n    if(!multisigWallet.send(weiAmount)) throw;\n    Invested(receiver, weiAmount, tokenAmount, customerId);\n  }\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner {\n\n    uint tokenAmount = fullTokens * 10**token.decimals();\n    uint weiAmount = weiPrice * fullTokens;\n\n    weiRaised = safeAdd(weiRaised,weiAmount);\n    tokensSold = safeAdd(tokensSold,tokenAmount);\n\n    investedAmountOf[receiver] = safeAdd(investedAmountOf[receiver],weiAmount);\n    tokenAmountOf[receiver] = safeAdd(tokenAmountOf[receiver],tokenAmount);\n\n    assignTokens(receiver, tokenAmount);\n    Invested(receiver, weiAmount, tokenAmount, 0);\n  }\n  function investWithSignedAddress(address addr, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\n     bytes32 hash = sha256(addr);\n     if (ecrecover(hash, v, r, s) != signerAddress) throw;\n     if(customerId == 0) throw;\n     investInternal(addr, customerId);\n  }\n  function investWithCustomerId(address addr, uint128 customerId) public payable {\n    if(requiredSignedAddress) throw;\n    if(customerId == 0) throw;\n    investInternal(addr, customerId);\n  }\n  function invest(address addr) public payable {\n    if(requireCustomerId) throw;\n    if(requiredSignedAddress) throw;\n    investInternal(addr, 0);\n  }\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\n    investWithSignedAddress(msg.sender, customerId, v, r, s);\n  }\n  function buyWithCustomerId(uint128 customerId) public payable {\n    investWithCustomerId(msg.sender, customerId);\n  }\n  function buy() public payable {\n    invest(msg.sender);\n  }\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n    if(finalized) {\n      throw;\n    }\n    if(address(finalizeAgent) != 0) {\n      finalizeAgent.finalizeCrowdsale();\n    }\n\n    finalized = true;\n  }\n  function setFinalizeAgent(FinalizeAgent addr) onlyOwner {\n    finalizeAgent = addr;\n    if(!finalizeAgent.isFinalizeAgent()) {\n      throw;\n    }\n  }\n\n  function setRequireCustomerId(bool value) onlyOwner {\n    requireCustomerId = value;\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n  }\n  function setRequireSignedAddress(bool value, address _signerAddress) onlyOwner {\n    requiredSignedAddress = value;\n    signerAddress = _signerAddress;\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n  }\n  function setEarlyParicipantWhitelist(address addr, bool status) onlyOwner {\n    earlyParticipantWhitelist[addr] = status;\n    Whitelisted(addr, status);\n  }\n  function setEndsAt(uint time) onlyOwner {\n\n    if(now > time) {\n      throw;\n    }\n\n    endsAt = time;\n    EndsAtChanged(endsAt);\n  }\n  function setPricingStrategy(PricingStrategy _pricingStrategy) onlyOwner {\n    pricingStrategy = _pricingStrategy;\n    if(!pricingStrategy.isPricingStrategy()) {\n      throw;\n    }\n  }\n  function loadRefund() public payable inState(State.Failure) {\n    if(msg.value == 0) throw;\n    loadedRefund = safeAdd(loadedRefund,msg.value);\n  }\n  function refund() public inState(State.Refunding) {\n    uint256 weiValue = investedAmountOf[msg.sender];\n    if (weiValue == 0) throw;\n    investedAmountOf[msg.sender] = 0;\n    weiRefunded = safeAdd(weiRefunded,weiValue);\n    Refund(msg.sender, weiValue);\n    if (!msg.sender.send(weiValue)) throw;\n  }\n  function isMinimumGoalReached() public constant returns (bool reached) {\n    return weiRaised >= minimumFundingGoal;\n  }\n  function isFinalizerSane() public constant returns (bool sane) {\n    return finalizeAgent.isSane();\n  }\n  function isPricingSane() public constant returns (bool sane) {\n    return pricingStrategy.isSane(address(this));\n  }\n  function getState() public constant returns (State) {\n    if(finalized) return State.Finalized;\n    else if (address(finalizeAgent) == 0) return State.Preparing;\n    else if (!finalizeAgent.isSane()) return State.Preparing;\n    else if (!pricingStrategy.isSane(address(this))) return State.Preparing;\n    else if (block.timestamp < startsAt) return State.PreFunding;\n    else if (block.timestamp <= endsAt && !isCrowdsaleFull()) return State.Funding;\n    else if (isMinimumGoalReached()) return State.Success;\n    else if (!isMinimumGoalReached() && weiRaised > 0 && loadedRefund >= weiRaised) return State.Refunding;\n    else return State.Failure;\n  }\n  function setOwnerTestValue(uint val) onlyOwner {\n    ownerTestValue = val;\n  }\n  function isCrowdsale() public constant returns (bool) {\n    return true;\n  }\n  modifier inState(State state) {\n    if(getState() != state) throw;\n    _;\n  }\n  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken);\n  function isCrowdsaleFull() public constant returns (bool);\n  function assignTokens(address receiver, uint tokenAmount) private;\n}\n\n\ncontract BonusFinalizeAgent is FinalizeAgent,SafeMathLib {\n\n  CrowdsaleToken public token;\n  Crowdsale public crowdsale;\n  uint public totalMembers;\n  uint public allocatedBonus;\n  mapping (address=>uint) bonusOf;\n  address[] public teamAddresses;\n\n\n  function BonusFinalizeAgent(CrowdsaleToken _token, Crowdsale _crowdsale, uint[] _bonusBasePoints, address[] _teamAddresses) {\n    token = _token;\n    crowdsale = _crowdsale;\n    if(address(crowdsale) == 0) {\n      throw;\n    }\n    if(_bonusBasePoints.length != _teamAddresses.length){\n      throw;\n    }\n\n    totalMembers = _teamAddresses.length;\n    teamAddresses = _teamAddresses;\n    for (uint i=0;i<totalMembers;i++){\n      if(_bonusBasePoints[i] == 0) throw;\n    }\n    for (uint j=0;j<totalMembers;j++){\n      if(_teamAddresses[j] == 0) throw;\n      bonusOf[_teamAddresses[j]] = _bonusBasePoints[j];\n    }\n  }\n  function isSane() public constant returns (bool) {\n    return (token.mintAgents(address(this)) == true) && (token.releaseAgent() == address(this));\n  }\n  function finalizeCrowdsale() {\n    if(msg.sender != address(crowdsale)) {\n      throw;\n    }\n    uint tokensSold = crowdsale.tokensSold();\n\n    for (uint i=0;i<totalMembers;i++){\n      allocatedBonus = safeMul(tokensSold,bonusOf[teamAddresses[i]]) / 10000;\n      token.mint(teamAddresses[i], allocatedBonus);\n    }\n    token.releaseTokenTransfer();\n  }\n\n}\n\n\ncontract MintedEthCappedCrowdsale is Crowdsale {\n\n  /* Maximum amount of wei this crowdsale can raise. */\n  uint public weiCap;\n\n  function MintedEthCappedCrowdsale(address _token, PricingStrategy _pricingStrategy, address _multisigWallet, uint _start, uint _end, uint _minimumFundingGoal, uint _weiCap) Crowdsale(_token, _pricingStrategy, _multisigWallet, _start, _end, _minimumFundingGoal) {\n    weiCap = _weiCap;\n  }\n\n  /**\n   * Called from invest() to confirm if the curret investment does not break our cap rule.\n   */\n  function isBreakingCap(uint weiAmount, uint tokenAmount, uint weiRaisedTotal, uint tokensSoldTotal) constant returns (bool limitBroken) {\n    return weiRaisedTotal > weiCap;\n  }\n\n  function isCrowdsaleFull() public constant returns (bool) {\n    return weiRaised >= weiCap;\n  }\n\n  /**\n   * Dynamically create tokens and assign them to the investor.\n   */\n  function assignTokens(address receiver, uint tokenAmount) private {\n    MintableToken mintableToken = MintableToken(token);\n    mintableToken.mint(receiver, tokenAmount);\n  }\n}"
}