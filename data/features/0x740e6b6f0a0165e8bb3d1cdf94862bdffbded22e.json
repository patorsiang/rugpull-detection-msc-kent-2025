{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 JUMPDEST PUSH2 JUMP JUMPDEST JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 DUP4 EQ PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP3 ADD SWAP2 POP PUSH1 DUP2 ADD SWAP1 POP PUSH1 DUP4 SUB SWAP3 POP PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 DUP4 EQ PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP3 ADD SWAP2 POP PUSH1 DUP2 ADD SWAP1 POP PUSH1 DUP4 SUB SWAP3 POP PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 DUP4 EQ PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP3 ADD SWAP2 POP PUSH1 DUP2 ADD SWAP1 POP PUSH1 DUP4 SUB SWAP3 POP PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 DUP4 EQ PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP3 ADD SWAP2 POP PUSH1 DUP2 ADD SWAP1 POP PUSH1 DUP4 SUB SWAP3 POP PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 DUP4 EQ PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP3 ADD SWAP2 POP PUSH1 DUP2 ADD SWAP1 POP PUSH1 DUP4 SUB SWAP3 POP PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 PUSH1 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 SWAP1 POP PUSH1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 ADDRESS PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP ADDRESS PUSH20 AND PUSH1 PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 PUSH20 AND ADDRESS PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP ADDRESS PUSH20 AND PUSH1 PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 PUSH20 AND ADDRESS PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD CALLVALUE DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 PUSH1 PUSH1 ADDRESS PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 ADDRESS PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND ADDRESS PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 ADDRESS PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD LT ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD LT ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP2 PUSH1 PUSH1 ADDRESS PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 SLOAD DUP3 MUL SWAP1 POP CALLER PUSH20 AND PUSH2 DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD DUP1 SWAP1 POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST ADDRESS PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 SWAP1 POP PUSH2 JUMP JUMPDEST JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP3 PUSH1 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 SLOAD PUSH1 SLOAD SUB MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP5 SWAP1 POP PUSH2 DUP6 DUP6 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI DUP1 PUSH20 AND PUSH4 CALLER DUP7 ADDRESS DUP8 PUSH1 MLOAD DUP6 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 DUP4 EQ PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP3 ADD SWAP2 POP PUSH1 DUP2 ADD SWAP1 POP PUSH1 DUP4 SUB SWAP3 POP PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP POP PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 ADDRESS PUSH20 AND BALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD DUP1 SWAP1 POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP2 PUSH1 PUSH1 ADDRESS PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 SLOAD DUP3 MUL SWAP1 POP CALLER PUSH20 AND PUSH2 DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD DUP1 SWAP1 POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST ADDRESS PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 SWAP1 POP PUSH2 JUMP JUMPDEST JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD CALLVALUE DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 PUSH1 PUSH1 ADDRESS PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 ADDRESS PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND ADDRESS PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xbc UNKNOWN_0x4a CALL UNKNOWN_0xc6 MLOAD PUSH2 UNKNOWN_0xc1 UNKNOWN_0xda UNKNOWN_0xb7 UNKNOWN_0x21 UNKNOWN_0xef UNKNOWN_0xae DUP3 SHL UNKNOWN_0xa8 UNKNOWN_0xc UNKNOWN_0xce UNOFFICIAL_SWAP ADD EXTCODECOPY POP DUP4 UNKNOWN_0xbb CALLVALUE SWAP9 UNKNOWN_0xb7 MULMOD UNKNOWN_0xe4 LT DUP11 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.7505566802618295,
  "opcode_count": 4672,
  "unique_opcodes": 78,
  "byte_entropy": 4.856736133986383,
  "byte_60": 0.06724345635746358,
  "byte_40": 0.01029460081042602,
  "byte_52": 0.017413207753805716,
  "byte_36": 0.00010951702989814916,
  "byte_15": 0.014675282006351988,
  "byte_61": 0.032088489760157705,
  "byte_01": 0.03384076223852809,
  "byte_cb": 0.0003285510896944475,
  "byte_57": 0.015003833096046436,
  "byte_00": 0.03373124520862994,
  "byte_35": 0.0031759938670463256,
  "byte_7c": 0.00043806811959259663,
  "byte_90": 0.03657868798598182,
  "byte_04": 0.008323294272259337,
  "byte_63": 0.005804402584601905,
  "byte_ff": 0.29974811083123426,
  "byte_16": 0.021903405979629833,
  "byte_80": 0.031102836491074363,
  "byte_09": 0.0016427554484722375,
  "byte_5e": 0.00021903405979629831,
  "byte_a7": 0.001423721388675939,
  "byte_b3": 0.0012046873288796408,
  "byte_14": 0.0064615047639908,
  "byte_e0": 0.0005475851494907458,
  "byte_0a": 0.00525681743511116,
  "byte_3c": 0.00043806811959259663,
  "byte_0d": 0.0008761362391851933,
  "byte_02": 0.006351987734092651,
  "byte_37": 0.0018617895082685357,
  "byte_50": 0.037016756105574415,
  "byte_53": 0.0003285510896944475,
  "byte_3f": 0.00043806811959259663,
  "byte_d0": 0.00021903405979629831,
  "byte_19": 0.001423721388675939,
  "byte_6f": 0.00010951702989814916,
  "byte_20": 0.027269740444639142,
  "byte_f0": 0.00021903405979629831,
  "byte_22": 0.00021903405979629831,
  "byte_e1": 0.00021903405979629831,
  "byte_06": 0.0017522724783703865,
  "byte_03": 0.012046873288796408,
  "byte_2f": 0.00021903405979629831,
  "byte_7d": 0.00010951702989814916,
  "byte_78": 0.0003285510896944475,
  "byte_ce": 0.0003285510896944475,
  "byte_6e": 0.0003285510896944475,
  "byte_3e": 0.00021903405979629831,
  "byte_d2": 0.00043806811959259663,
  "byte_d9": 0.00010951702989814916,
  "byte_08": 0.002080823568064834,
  "byte_a4": 0.00043806811959259663,
  "byte_42": 0.00021903405979629831,
  "byte_f9": 0.0003285510896944475,
  "byte_8b": 0.0003285510896944475,
  "byte_3d": 0.00021903405979629831,
  "byte_43": 0.0003285510896944475,
  "byte_9d": 0.00021903405979629831,
  "byte_72": 0.0003285510896944475,
  "byte_75": 0.00010951702989814916,
  "byte_47": 0.0003285510896944475,
  "byte_4c": 0.0003285510896944475,
  "byte_8c": 0.00010951702989814916,
  "byte_56": 0.012375424378490856,
  "byte_55": 0.0031759938670463256,
  "byte_3a": 0.0003285510896944475,
  "byte_95": 0.0016427554484722375,
  "byte_05": 0.0019713065381666848,
  "byte_48": 0.0003285510896944475,
  "byte_c9": 0.00021903405979629831,
  "byte_5a": 0.00131420435877779,
  "byte_3b": 0.00043806811959259663,
  "byte_7e": 0.0003285510896944475,
  "byte_d8": 0.00043806811959259663,
  "byte_5c": 0.0003285510896944475,
  "byte_2c": 0.00021903405979629831,
  "byte_71": 0.00021903405979629831,
  "byte_0b": 0.002190340597962983,
  "byte_97": 0.0003285510896944475,
  "byte_6a": 0.00010951702989814916,
  "byte_da": 0.00021903405979629831,
  "byte_87": 0.0003285510896944475,
  "byte_d6": 0.00010951702989814916,
  "byte_7b": 0.00021903405979629831,
  "byte_76": 0.00021903405979629831,
  "byte_07": 0.0016427554484722375,
  "byte_e2": 0.00131420435877779,
  "byte_86": 0.0005475851494907458,
  "byte_41": 0.00010951702989814916,
  "byte_8d": 0.001423721388675939,
  "byte_9b": 0.0012046873288796408,
  "byte_0e": 0.0007666192092870441,
  "byte_a5": 0.00043806811959259663,
  "byte_5b": 0.026393604205453947,
  "byte_f6": 0.00043806811959259663,
  "byte_9a": 0.0003285510896944475,
  "byte_83": 0.008870879421750083,
  "byte_77": 0.00021903405979629831,
  "byte_92": 0.004380681195925966,
  "byte_a8": 0.00021903405979629831,
  "byte_8f": 0.00021903405979629831,
  "byte_e4": 0.00021903405979629831,
  "byte_2d": 0.00021903405979629831,
  "byte_bc": 0.00021903405979629831,
  "byte_ca": 0.0003285510896944475,
  "byte_e9": 0.00021903405979629831,
  "byte_51": 0.011937356258898258,
  "byte_ee": 0.00021903405979629831,
  "byte_b6": 0.00010951702989814916,
  "byte_ba": 0.00010951702989814916,
  "byte_2a": 0.0003285510896944475,
  "byte_88": 0.0007666192092870441,
  "byte_d5": 0.0003285510896944475,
  "byte_ae": 0.0003285510896944475,
  "byte_c2": 0.001423721388675939,
  "byte_5f": 0.0003285510896944475,
  "byte_b9": 0.00010951702989814916,
  "byte_c0": 0.0003285510896944475,
  "byte_dd": 0.00131420435877779,
  "byte_62": 0.00043806811959259663,
  "byte_ed": 0.00021903405979629831,
  "byte_93": 0.000657102179388895,
  "byte_73": 0.015003833096046436,
  "byte_89": 0.00021903405979629831,
  "byte_db": 0.0003285510896944475,
  "byte_a1": 0.0016427554484722375,
  "byte_99": 0.00010951702989814916,
  "byte_e7": 0.00010951702989814916,
  "byte_9c": 0.00010951702989814916,
  "byte_24": 0.00021903405979629831,
  "byte_cd": 0.00010951702989814916,
  "byte_e8": 0.00043806811959259663,
  "byte_f8": 0.00021903405979629831,
  "byte_f3": 0.002847442777351878,
  "byte_f2": 0.0012046873288796408,
  "byte_fd": 0.0003285510896944475,
  "byte_e3": 0.00021903405979629831,
  "byte_f5": 0.002299857627861132,
  "byte_bf": 0.00010951702989814916,
  "byte_6d": 0.00010951702989814916,
  "byte_33": 0.003285510896944475,
  "byte_d4": 0.00021903405979629831,
  "byte_59": 0.00021903405979629831,
  "byte_fb": 0.00021903405979629831,
  "byte_2e": 0.00010951702989814916,
  "byte_85": 0.0010951702989814916,
  "byte_34": 0.004380681195925966,
  "byte_d3": 0.00010951702989814916,
  "byte_fe": 0.004709232285620414,
  "byte_de": 0.00021903405979629831,
  "byte_1d": 0.0003285510896944475,
  "byte_91": 0.016427554484722374,
  "byte_b1": 0.00043806811959259663,
  "byte_82": 0.01434673091665754,
  "byte_81": 0.026831672325046546,
  "byte_0c": 0.0012046873288796408,
  "byte_45": 0.0003285510896944475,
  "byte_96": 0.0003285510896944475,
  "byte_11": 0.003504544956740773,
  "byte_1f": 0.0031759938670463256,
  "byte_6c": 0.0003285510896944475,
  "byte_0f": 0.0003285510896944475,
  "byte_a2": 0.0003285510896944475,
  "byte_10": 0.003285510896944475,
  "byte_ac": 0.00021903405979629831,
  "byte_b4": 0.00021903405979629831,
  "byte_2b": 0.0012046873288796408,
  "byte_df": 0.00010951702989814916,
  "byte_4f": 0.0003285510896944475,
  "byte_13": 0.0007666192092870441,
  "byte_a6": 0.00021903405979629831,
  "byte_c8": 0.00131420435877779,
  "byte_9e": 0.00021903405979629831,
  "byte_7a": 0.0005475851494907458,
  "byte_17": 0.0012046873288796408,
  "byte_79": 0.00010951702989814916,
  "byte_9f": 0.0003285510896944475,
  "byte_f4": 0.00021903405979629831,
  "byte_12": 0.0005475851494907458,
  "byte_1b": 0.0018617895082685357,
  "byte_c3": 0.00010951702989814916,
  "byte_8e": 0.00010951702989814916,
  "byte_ef": 0.00131420435877779,
  "byte_1c": 0.0007666192092870441,
  "byte_c4": 0.0012046873288796408,
  "byte_ec": 0.00021903405979629831,
  "byte_66": 0.00010951702989814916,
  "byte_84": 0.0009856532690833424,
  "byte_fa": 0.00010951702989814916,
  "byte_98": 0.00021903405979629831,
  "byte_1e": 0.0009856532690833424,
  "byte_aa": 0.0012046873288796408,
  "byte_5d": 0.00010951702989814916,
  "byte_b7": 0.0003285510896944475,
  "byte_21": 0.000657102179388895,
  "byte_4a": 0.00021903405979629831,
  "byte_31": 0.00021903405979629831,
  "byte_23": 0.0015332384185740883,
  "byte_69": 0.0012046873288796408,
  "byte_54": 0.009308947541342679,
  "byte_b0": 0.0012046873288796408,
  "byte_be": 0.00010951702989814916,
  "byte_30": 0.002080823568064834,
  "byte_7f": 0.0010951702989814916,
  "byte_ad": 0.0010951702989814916,
  "byte_68": 0.0010951702989814916,
  "byte_fc": 0.0015332384185740883,
  "byte_f1": 0.0018617895082685357,
  "byte_28": 0.0010951702989814916,
  "byte_4d": 0.0010951702989814916,
  "byte_a3": 0.0012046873288796408,
  "byte_e5": 0.00010951702989814916,
  "byte_c1": 0.0003285510896944475,
  "byte_27": 0.00010951702989814916,
  "byte_dc": 0.00021903405979629831,
  "byte_18": 0.00010951702989814916,
  "byte_1a": 0.00010951702989814916,
  "byte_64": 0.00010951702989814916,
  "byte_32": 0.00010951702989814916,
  "byte_6b": 0.00010951702989814916,
  "byte_58": 0.00021903405979629831,
  "byte_d7": 0.00010951702989814916,
  "byte_65": 0.00010951702989814916,
  "byte_c6": 0.00010951702989814916,
  "byte_b2": 0.00010951702989814916,
  "byte_bb": 0.00010951702989814916,
  "byte_8a": 0.00010951702989814916,
  "byte_29": 0.00010951702989814916,
  "num_nodes": 3,
  "num_edges": 3,
  "avg_degree": 2.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 14,
  "event_nums": 8,
  "creation_block": 3335272,
  "creation_timestamp": 1489278770,
  "life_time": 93.0,
  "duration_seconds": 1224.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 2,
  "num_sellers": 3,
  "num_creator_transfers": 2,
  "buy_amt": 999600000000000.0,
  "sell_amt": 1040816000000000.0,
  "avg_value": 136027733333333.33,
  "txn_per_block": 0.14893617021276595,
  "avg_gas_limit": 241375.2142857143,
  "std_gas_limit": 686688.9530815014,
  "avg_gas_used": 230326.57142857142,
  "std_gas_used": 689716.3657042255,
  "avg_gas_price": 32142857142.857143,
  "std_gas_price": 14989792445.228199,
  "transfer_num": 8,
  "transferownership_num": 1,
  "setprices_num": 1,
  "mintissuertoken_num": 1,
  "mintbuyertoken_num": 1,
  "buyissuertokens_num": 1,
  "buybuyertokens_num": 2,
  "sellissuertokens_num": 1,
  "setcreditstatus_num": 2,
  "sellbuyertokens_num": 1,
  "timeline_sequence": [
    [
      3335272,
      1489278770,
      147,
      21,
      0,
      2715295,
      20000000000,
      0,
      0,
      3317226,
      2715295,
      19785947
    ],
    [
      3335287,
      1489278938,
      148,
      16,
      0,
      29118,
      20000000000,
      0,
      0,
      424519,
      29118,
      19785932
    ],
    [
      3335291,
      1489278984,
      72,
      1,
      0,
      109242,
      41000000000,
      0,
      0,
      125242,
      104242,
      19785928
    ],
    [
      3335298,
      1489279126,
      73,
      1,
      0,
      72618,
      41000000000,
      0,
      0,
      88618,
      67618,
      19785921
    ],
    [
      3335303,
      1489279175,
      74,
      0,
      0,
      72640,
      41000000000,
      0,
      0,
      67640,
      67640,
      19785916
    ],
    [
      3335305,
      1489279202,
      75,
      1,
      1000000000000000,
      54565,
      41000000000,
      0,
      0,
      68136,
      34565,
      19785914
    ],
    [
      3335309,
      1489279275,
      76,
      0,
      20408000000000,
      55115,
      41000000000,
      0,
      0,
      35115,
      35115,
      19785910
    ],
    [
      3335313,
      1489279319,
      77,
      0,
      20408000000000,
      29091,
      41000000000,
      1,
      0,
      29091,
      29091,
      19785906
    ],
    [
      3335323,
      1489279455,
      78,
      0,
      0,
      63227,
      41000000000,
      0,
      0,
      42874,
      42874,
      19785896
    ],
    [
      3335341,
      1489279662,
      79,
      4,
      0,
      47528,
      41000000000,
      0,
      0,
      126528,
      42528,
      19785878
    ],
    [
      3335343,
      1489279711,
      80,
      0,
      0,
      63107,
      41000000000,
      0,
      0,
      42754,
      42754,
      19785876
    ],
    [
      3335365,
      1489279994,
      81,
      0,
      0,
      63107,
      41000000000,
      0,
      0,
      13732,
      13732,
      19785854
    ],
    [
      3335323,
      1489279455,
      0,
      0,
      19600000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      3335343,
      1489279711,
      0,
      0,
      980000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.6;\ncontract owned {\n    address public owner;\n\n    function owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        if (msg.sender != owner) throw;\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}\n\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n\ncontract SwapToken is owned {\n    /* Public variables of the token */\n    \n    string public standard = 'Token 0.1';\n\n    // buyer tokens\n    string public buyerTokenName;\n    string public buyerSymbol;\n    uint8 public buyerDecimals;\n    uint256 public totalBuyerSupply;\n    \n    // issuer tokens\n    string public issuerTokenName;\n    string public issuerSymbol;\n    uint8 public issuerDecimals;\n    uint256 public totalIssuerSupply;\n    \n    // more variables\n    uint256 public buyPrice;\n    uint256 public issuePrice;\n    uint256 public cPT;\n    uint256 public premium;\n    bool public creditStatus;\n    address public project_wallet;\n    address public collectionFunds;\n    //uint public startBlock;\n    //uint public endBlock;\n    \n    /* Sets the constructor variables */\n    function SwapToken(\n        string _buyerTokenName,\n        string _buyerSymbol,\n        uint8 _buyerDecimals,\n        string _issuerTokenName,\n        string _issuerSymbol,\n        uint8 _issuerDecimals,\n        address _collectionFunds,\n        uint _startBlock,\n        uint _endBlock\n        ) {\n        buyerTokenName = _buyerTokenName;\n        buyerSymbol = _buyerSymbol;\n        buyerDecimals = _buyerDecimals;\n        issuerTokenName = _issuerTokenName;\n        issuerSymbol = _issuerSymbol;\n        issuerDecimals = _issuerDecimals;\n        collectionFunds = _collectionFunds;\n        //startBlock = _startBlock;\n        //endBlock = _endBlock;\n    }\n\n    /* This creates an array with all balances */\n    mapping (address => uint256) public balanceOfBuyer;\n    mapping (address => uint256) public balanceOfIssuer;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract \n    function token(\n        uint256 initialSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol\n        ) {\n        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens\n        totalSupply = initialSupply;                        // Update total supply\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n        decimals = decimalUnits;                            // Amount of decimals for display purposes\n    }\n    */\n    \n    /* Check if contract has started */\n    /*function has_contract_started() private constant returns (bool) {\n\t    return block.number >= startBlock;\n    }\n    \n    /* Check if contract has ended */\n    /*function has_contract_ended() private constant returns (bool) {\n        return block.number > endBlock;\n    }*/\n    \n    /* Set a project Wallet */\n    function defineProjectWallet(address target) onlyOwner {\n        project_wallet = target;\n    }\n    \n    /* Mint coins */\n    \n    // buyer tokens\n    function mintBuyerToken(address target, uint256 mintedAmount) onlyOwner {\n        balanceOfBuyer[target] += mintedAmount;\n        totalBuyerSupply += mintedAmount;\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n    \n    // issuer tokens\n    function mintIssuerToken(address target, uint256 mintedAmount) onlyOwner {\n        balanceOfIssuer[target] += mintedAmount;\n        totalIssuerSupply += mintedAmount;\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n    \n    /* Distroy coins */\n    \n    // Distroy buyer coins for sale in contract \n    function distroyBuyerToken(uint256 burnAmount) onlyOwner {\n        balanceOfBuyer[this] -= burnAmount;\n        totalBuyerSupply -= burnAmount;\n    }\n    \n    // Distroy issuer coins for sale in contract\n    function distroyIssuerToken(uint256 burnAmount) onlyOwner {\n        balanceOfIssuer[this] -= burnAmount;\n        totalIssuerSupply -= burnAmount;\n    }\n\n    /* Send coins */\n    \n    // send buyer coins\n    function transferBuyer(address _to, uint256 _value) {\n        if (balanceOfBuyer[msg.sender] < _value) throw;           // Check if the sender has enough\n        if (balanceOfBuyer[_to] + _value < balanceOfBuyer[_to]) throw; // Check for overflows\n        balanceOfBuyer[msg.sender] -= _value;                     // Subtract from the sender\n        balanceOfBuyer[_to] += _value;                            // Add the same to the recipient\n        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place\n    }\n    \n    // send issuer coins\n    function transferIssue(address _to, uint256 _value) {\n        if (balanceOfIssuer[msg.sender] < _value) throw;\n        if (balanceOfIssuer[_to] + _value < balanceOfIssuer[_to]) throw;\n        balanceOfIssuer[msg.sender] -= _value;\n        balanceOfIssuer[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n    }\n    \n    /* Allow another contract to spend some tokens in your behalf */\n    function approve(address _spender, uint256 _value)\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        tokenRecipient spender = tokenRecipient(_spender);\n        return true;\n    }\n\n    /* Approve and then comunicate the approved contract in a single tx */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        returns (bool success) {    \n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /* A contract attempts to get the coins \n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (balanceOfBuyer[_from] < _value) throw;                 // Check if the sender has enough\n        if (balanceOfBuyer[_to] + _value < balanceOfBuyer[_to]) throw;  // Check for overflows\n        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance\n        balanceOfBuyer[_from] -= _value;                          // Subtract from the sender\n        balanceOfBuyer[_to] += _value;                            // Add the same to the recipient\n        allowance[_from][msg.sender] -= _value;\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    */\n    \n    /* Set token price */\n    function setPrices(uint256 newBuyPrice, uint256 newIssuePrice, uint256 coveragePerToken) onlyOwner {\n        buyPrice = newBuyPrice;\n        issuePrice = newIssuePrice;\n        cPT = coveragePerToken;\n        premium = (issuePrice - cPT) * 98/100;\n    }\n\n    /* Buy tokens */\n    \n    // buy buyer tokens\n    function buyBuyerTokens() payable {\n        //if(!has_contract_started()) throw;                  // checks if the contract has started\n        //if(has_contract_ended()) throw;                     // checks if the contract has ended \n        uint amount = msg.value / buyPrice;                // calculates the amount\n        if (balanceOfBuyer[this] < amount) throw;               // checks if it has enough to sell\n        balanceOfBuyer[msg.sender] += amount;                   // adds the amount to buyer's balance\n        balanceOfBuyer[this] -= amount;                         // subtracts amount from seller's balance\n        Transfer(this, msg.sender, amount);                // execute an event reflecting the change\n    }\n    \n    // buy issuer tokens\n    function buyIssuerTokens() payable {\n        uint amount = msg.value / issuePrice;\n        if (balanceOfIssuer[this] < amount) throw;\n        balanceOfIssuer[msg.sender] += amount;\n        balanceOfIssuer[this] -= amount;\n        Transfer(this, msg.sender, amount);\n    }\n    \n    /* Credit Status Event */\n    function setCreditStatus(bool _status) onlyOwner {\n        creditStatus = _status;\n    }\n\n    /* Collection */\n    \n    // buyer collection sale\n    function sellBuyerTokens(uint amount) returns (uint revenue){\n        if (creditStatus == false) throw;                       // checks if buyer is eligible for a claim\n        if (balanceOfBuyer[msg.sender] < amount ) throw;        // checks if the sender has enough to sell\n        balanceOfBuyer[this] += amount;                         // adds the amount to owner's balance\n        balanceOfBuyer[msg.sender] -= amount;                   // subtracts the amount from seller's balance\n        revenue = amount * cPT;\n        if (!msg.sender.send(revenue)) {                   // sends ether to the seller: it's important\n            throw;                                         // to do this last to prevent recursion attacks\n        } else {\n            Transfer(msg.sender, this, amount);             // executes an event reflecting on the change\n            return revenue;                                 // ends function and returns\n        }\n    }\n    \n    \n    // issuer collection sale\n    function sellIssuerTokens(uint amount) returns (uint revenue){\n        if (balanceOfIssuer[msg.sender] < amount ) throw;\n        balanceOfIssuer[this] += amount;\n        balanceOfIssuer[msg.sender] -= amount;\n        revenue = amount * premium;\n        if (!msg.sender.send(revenue)) {\n            throw;\n        } else {\n            Transfer(msg.sender, this, amount);\n            return revenue;\n        }\n    }\n    \n    /* After contract ends move funds */\n    function moveFunds() onlyOwner {\n        //if (!has_contract_ended()) throw;\n        if (!project_wallet.send(this.balance)) throw;\n    }\n\n    /* This unnamed function is called whenever someone tries to send ether to it */\n    function () {\n        throw;     // Prevents accidental sending of ether\n    }\n}"
}