{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH16 AND PUSH16 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH5 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH16 AND PUSH16 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND PUSH16 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND SELFDESTRUCT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP3 PUSH1 MLOAD PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 PUSH1 SWAP1 DIV SWAP1 POP PUSH1 PUSH1 PUSH1 DUP4 DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SWAP1 POP PUSH1 DUP4 PUSH5 AND ADD NUMBER GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP5 PUSH1 PUSH2 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP DUP2 DUP6 PUSH5 AND BLOCKHASH EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP8 DUP4 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP7 DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SWAP1 POP PUSH1 PUSH20 AND DUP2 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 CALLVALUE SWAP1 POP PUSH1 DUP9 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP9 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH7 DUP2 LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH10 DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP10 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 EXP DUP10 LT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP7 NUMBER GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP8 DUP8 PUSH1 MLOAD PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 SWAP1 POP PUSH1 DUP2 DUP8 DUP8 DUP8 PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 MSTORE PUSH1 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 ADD DUP5 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP5 POP POP POP POP POP PUSH1 PUSH1 MLOAD PUSH1 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP PUSH1 PUSH1 MLOAD SUB MLOAD PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 DUP12 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH31 PUSH26 DUP15 MUL AND DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD SWAP2 POP DUP12 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 DUP13 GT DUP1 ISZERO PUSH2 JUMPI POP DUP11 DUP13 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP12 SWAP2 POP JUMPDEST PUSH1 DUP1 PUSH2 DUP7 DUP15 DUP7 PUSH2 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP PUSH1 SLOAD DUP7 ADD DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND ADD SWAP3 POP PUSH2 EXP DUP2 SLOAD DUP2 PUSH16 MUL NOT AND SWAP1 DUP4 PUSH16 AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND ADD SWAP3 POP PUSH2 EXP DUP2 SLOAD DUP2 PUSH16 MUL NOT AND SWAP1 DUP4 PUSH16 AND MUL OR SWAP1 SSTORE POP ADDRESS PUSH20 AND BALANCE PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND ADD PUSH16 AND GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH32 DUP12 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP6 DUP8 PUSH1 ADD DUP2 SWAP1 SSTORE POP DUP13 DUP8 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 PUSH1 AND MUL OR SWAP1 SSTORE POP DUP4 DUP8 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 PUSH1 AND MUL OR SWAP1 SSTORE POP NUMBER DUP8 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH5 MUL NOT AND SWAP1 DUP4 PUSH5 AND MUL OR SWAP1 SSTORE POP DUP3 DUP8 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH5 MUL NOT AND SWAP1 DUP4 PUSH5 AND MUL OR SWAP1 SSTORE POP CALLER DUP8 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH20 AND BALANCE DUP2 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH20 AND BALANCE DUP2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND ADD PUSH16 AND ADD GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP3 DUP3 DUP4 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 DUP1 DUP7 DUP7 PUSH1 MLOAD PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 SWAP1 POP PUSH1 DUP2 DUP7 DUP7 DUP7 PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 MSTORE PUSH1 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 ADD DUP5 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP5 POP POP POP POP POP PUSH1 PUSH1 MLOAD PUSH1 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP PUSH1 PUSH1 MLOAD SUB MLOAD SWAP2 POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP3 PUSH1 MLOAD PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 PUSH1 SWAP1 DIV SWAP1 POP PUSH1 PUSH1 PUSH1 DUP4 DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SWAP1 POP PUSH1 DUP2 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH5 AND PUSH5 AND SWAP1 POP DUP1 NUMBER GT ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP2 ADD NUMBER GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP2 BLOCKHASH EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 DUP7 DUP7 PUSH2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH20 AND BALANCE DUP2 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST ADDRESS PUSH20 AND BALANCE DUP2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND ADD PUSH16 AND ADD GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND ADD SWAP3 POP PUSH2 EXP DUP2 SLOAD DUP2 PUSH16 MUL NOT AND SWAP1 DUP4 PUSH16 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SWAP1 POP PUSH1 DUP2 PUSH1 ADD SLOAD SWAP1 POP PUSH1 DUP2 EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH5 AND PUSH5 AND ADD NUMBER GT ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP3 PUSH1 ADD DUP2 SWAP1 SSTORE POP PUSH1 DUP1 PUSH2 DUP4 DUP6 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH1 AND DUP7 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH1 AND PUSH2 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP DUP2 PUSH1 PUSH1 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND SUB SWAP3 POP PUSH2 EXP DUP2 SLOAD DUP2 PUSH16 MUL NOT AND SWAP1 DUP4 PUSH16 AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND SUB SWAP3 POP PUSH2 EXP DUP2 SLOAD DUP2 PUSH16 MUL NOT AND SWAP1 DUP4 PUSH16 AND MUL OR SWAP1 SSTORE POP PUSH2 DUP5 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP5 DUP6 PUSH2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH10 DUP2 LT ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD PUSH1 BYTE SWAP1 POP PUSH1 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP2 SUB DUP3 ADD SWAP2 POP PUSH1 DUP3 CALLDATALOAD PUSH1 BYTE SWAP1 POP PUSH1 DUP2 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP4 ADD SWAP3 POP PUSH2 JUMP JUMPDEST PUSH1 DUP2 LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP2 SUB DUP4 ADD SWAP3 POP JUMPDEST PUSH1 DUP4 CALLDATALOAD PUSH1 BYTE SWAP1 POP PUSH1 DUP2 EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP5 ADD SWAP4 POP PUSH1 DUP5 CALLDATALOAD PUSH1 BYTE SWAP1 POP PUSH1 DUP2 EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP6 ADD SWAP5 POP PUSH1 DUP6 CALLDATALOAD PUSH1 BYTE SWAP1 POP PUSH1 DUP2 EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP7 ADD SWAP6 POP PUSH1 DUP7 CALLDATALOAD PUSH1 BYTE SWAP1 POP PUSH1 DUP2 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP8 ADD SWAP7 POP PUSH2 JUMP JUMPDEST PUSH1 DUP2 LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP2 SUB DUP8 ADD SWAP7 POP JUMPDEST PUSH1 DUP8 CALLDATALOAD PUSH1 BYTE SWAP1 POP PUSH1 DUP2 EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP9 ADD SWAP8 POP PUSH1 DUP9 CALLDATALOAD PUSH1 BYTE SWAP1 POP PUSH1 DUP2 EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP10 ADD SWAP9 POP PUSH1 DUP10 CALLDATALOAD PUSH1 BYTE SWAP1 POP PUSH1 DUP2 EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP11 ADD SWAP10 POP PUSH1 DUP11 CALLDATALOAD PUSH1 BYTE SWAP1 POP PUSH1 DUP2 EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 PUSH1 DUP14 SUB CALLDATALOAD AND SWAP1 POP ADDRESS PUSH20 AND DUP2 EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 MLOAD SWAP1 POP PUSH1 DUP1 PUSH1 DUP1 JUMPDEST PUSH2 PUSH1 DUP10 SUB CALLDATALOAD AND SWAP3 POP PUSH1 DUP4 EQ ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP10 SUB CALLDATALOAD AND SWAP2 POP DUP3 PUSH1 DUP4 ADD GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP9 ADD SWAP8 POP DUP2 DUP9 ADD CALLDATALOAD SWAP1 POP PUSH1 DUP2 EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 DUP9 DUP7 CALLDATACOPY DUP9 DUP3 DUP7 ADD MSTORE DUP3 DUP6 SHA3 SWAP9 POP DUP3 SWAP4 POP DUP3 DUP9 ADD SWAP8 POP PUSH2 JUMP JUMPDEST DUP9 PUSH1 MUL SWAP6 POP PUSH1 DUP5 DUP7 ADD SWAP1 POP PUSH1 PUSH2 PUSH1 DUP12 SUB CALLDATALOAD AND SWAP1 POP PUSH1 PUSH2 PUSH1 DUP13 SUB CALLDATALOAD AND SWAP1 POP DUP2 DUP8 DUP3 ADD GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP12 ADD SWAP11 POP DUP2 DUP12 DUP5 CALLDATACOPY PUSH2 DUP2 DUP5 ADD DUP10 DUP10 PUSH2 JUMP JUMPDEST DUP2 DUP4 SHA3 SWAP12 POP DUP2 DUP12 ADD SWAP11 POP PUSH2 PUSH1 DUP13 SUB CALLDATALOAD AND SWAP6 POP PUSH2 PUSH1 DUP13 SUB CALLDATALOAD AND SWAP5 POP DUP6 PUSH1 DUP7 ADD GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP12 ADD SWAP11 POP DUP5 DUP12 ADD CALLDATALOAD SWAP4 POP PUSH1 DUP5 EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP6 DUP12 DUP10 CALLDATACOPY DUP12 DUP6 DUP10 ADD MSTORE DUP6 DUP9 SHA3 SWAP10 POP POP POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP4 PUSH1 ADD SLOAD SWAP1 POP PUSH1 DUP5 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH1 AND SWAP1 POP PUSH1 DUP6 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH1 AND SWAP1 POP PUSH1 DUP7 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP PUSH1 DUP5 EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP8 PUSH1 ADD DUP2 SWAP1 SSTORE POP PUSH1 DUP7 DUP7 PUSH1 MLOAD PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 SWAP1 POP PUSH1 DUP5 DUP3 PUSH1 SWAP1 DIV DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD SWAP1 POP PUSH1 DUP1 PUSH2 DUP9 DUP9 DUP9 PUSH2 JUMP JUMPDEST DUP1 SWAP3 POP DUP2 SWAP4 POP POP POP PUSH1 DUP1 SWAP1 POP PUSH1 DUP1 SWAP1 POP PUSH1 DUP10 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP14 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH5 AND PUSH5 AND DUP7 PUSH1 EXP AND EQ ISZERO ISZERO PUSH2 JUMPI DUP4 SWAP2 POP JUMPDEST PUSH2 JUMP JUMPDEST DUP8 DUP6 LT ISZERO PUSH2 JUMPI DUP4 SWAP2 POP JUMPDEST JUMPDEST DUP4 PUSH1 PUSH1 DUP3 DUP3 DUP3 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND SUB SWAP3 POP PUSH2 EXP DUP2 SLOAD DUP2 PUSH16 MUL NOT AND SWAP1 DUP4 PUSH16 AND MUL OR SWAP1 SSTORE POP PUSH8 DUP11 LT ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH2 DUP11 DUP9 PUSH1 SWAP1 DIV DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD SWAP1 POP PUSH1 DUP2 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH16 AND PUSH16 AND SWAP2 POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH16 MUL NOT AND SWAP1 DUP4 PUSH16 AND MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH2 JUMPI DUP7 PUSH20 AND PUSH32 DUP3 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST PUSH2 DUP8 PUSH1 DUP4 DUP6 ADD EQ PUSH2 JUMPI DUP3 DUP5 ADD PUSH2 JUMP JUMPDEST PUSH1 JUMPDEST DUP5 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 PUSH1 LT DUP1 ISZERO PUSH2 JUMPI POP DUP4 DUP4 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH8 DUP6 LT ISZERO PUSH2 JUMPI PUSH1 PUSH2 JUMP JUMPDEST PUSH7 JUMPDEST SWAP1 POP PUSH1 PUSH1 PUSH1 DUP8 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP PUSH7 DUP2 LT ISZERO PUSH2 JUMPI PUSH7 SWAP1 POP JUMPDEST DUP6 DUP3 DUP3 ADD GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP4 DUP6 DUP4 DUP4 DUP10 SUB SUB MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP3 POP POP SWAP4 POP SWAP4 SWAP2 POP POP JUMP JUMPDEST DUP3 PUSH20 AND PUSH2 DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO PUSH2 JUMPI DUP3 PUSH20 AND PUSH32 DUP3 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 JUMP JUMPDEST DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP POP JUMP JUMPDEST JUMPDEST PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI DUP2 MLOAD DUP4 MSTORE PUSH1 DUP4 ADD SWAP3 POP PUSH1 DUP3 ADD SWAP2 POP PUSH1 DUP2 SUB SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 PUSH1 SUB PUSH2 EXP SUB SWAP1 POP DUP1 NOT DUP4 MLOAD AND DUP2 DUP6 MLOAD AND DUP2 DUP2 OR DUP7 MSTORE POP POP POP POP POP POP JUMP UNKNOWN_0xfe NUMBER PUSH2 PUSH16 PUSH17 PUSH2 PUSH19 PUSH15 PUSH6 PUSH23 SHA3 PUSH20 PUSH23 PUSH15 PUSH6 PUSH13 PUSH9 PUSH21 PUSH21 PUSH6 PUSH19 PUSH19 PUSH20 SHA3 PUSH10 PUSH21 UNKNOWN_0x2c SHA3 PUSH3 PUSH13 UNKNOWN_0x4f PUSH15 PUSH16 UNKNOWN_0x2d PUSH4 PUSH10 SHA3 PUSH10 PUSH21 UNKNOWN_0x2c SHA3 PUSH3 PUSH13 UNKNOWN_0x49 PUSH15 PUSH2 PUSH6 SHA3 PUSH3 PUSH15 PUSH22 PUSH6 PUSH6 UNKNOWN_0x29 SHA3 PUSH3 PUSH19 SHA3 PUSH6 PUSH20 SHA3 PUSH13 SHA3 PUSH14 PUSH3 PUSH16 PUSH13 PUSH2 CALLDATALOAD CALLDATALOAD SHA3 PUSH3 PUSH20 PUSH3 PUSH2 SHA3 PUSH13 PUSH5 PUSH13 SHA3 PUSH3 PUSH22 UNKNOWN_0xd2 UNKNOWN_0xa6 LOG2 PUSH12 PUSH1 UNKNOWN_0xfb UNKNOWN_0xcb UNKNOWN_0xbb UNKNOWN_0xda UNKNOWN_0xfe MSTORE8 SDIV UNKNOWN_0xb3 UNKNOWN_0x2d INVALID_0x67",
  "opcode_entropy": 4.9324753393782546,
  "opcode_count": 6020,
  "unique_opcodes": 112,
  "byte_entropy": 5.244533725615298,
  "byte_60": 0.06487474301378207,
  "byte_80": 0.03121906647376837,
  "byte_40": 0.01408665194548085,
  "byte_52": 0.01736084672199802,
  "byte_04": 0.01172618594380568,
  "byte_36": 0.0015990253559735018,
  "byte_10": 0.0035787710347978375,
  "byte_61": 0.029010888601233534,
  "byte_01": 0.03517855783141704,
  "byte_3c": 0.000304576258280667,
  "byte_57": 0.010888601233533846,
  "byte_00": 0.1394959262925455,
  "byte_35": 0.004035635422218838,
  "byte_7c": 0.00038072032285083377,
  "byte_90": 0.029467752988654533,
  "byte_63": 0.004035635422218838,
  "byte_c5": 0.00022843219371050026,
  "byte_c0": 0.000609152516561334,
  "byte_9b": 0.00022843219371050026,
  "byte_20": 0.03152364273204904,
  "byte_11": 0.00281733038909617,
  "byte_bd": 7.614406457016675e-05,
  "byte_d7": 0.0001522881291403335,
  "byte_02": 0.004416355745069672,
  "byte_08": 0.0045686438742100054,
  "byte_7f": 0.006243813294753674,
  "byte_81": 0.026650422599558365,
  "byte_14": 0.0041879235513591715,
  "byte_05": 0.0016751694205436687,
  "byte_cd": 0.0001522881291403335,
  "byte_df": 0.00022843219371050026,
  "byte_88": 0.0014467372268331684,
  "byte_12": 0.00022843219371050026,
  "byte_6f": 0.008756567425569177,
  "byte_06": 0.0016751694205436687,
  "byte_1e": 0.0005330084519911673,
  "byte_e1": 0.000304576258280667,
  "byte_fd": 0.006700677682174675,
  "byte_b4": 0.0004568643874210005,
  "byte_6d": 0.0014467372268331684,
  "byte_f8": 0.00038072032285083377,
  "byte_bb": 0.000304576258280667,
  "byte_1c": 0.0008375847102718343,
  "byte_a8": 0.00022843219371050026,
  "byte_fb": 0.000304576258280667,
  "byte_d6": 0.000304576258280667,
  "byte_68": 0.0031980507119470035,
  "byte_a9": 0.0001522881291403335,
  "byte_f9": 0.000304576258280667,
  "byte_56": 0.005330084519911673,
  "byte_5b": 0.015990253559735018,
  "byte_3f": 0.000609152516561334,
  "byte_ca": 0.0001522881291403335,
  "byte_72": 0.003731059163938171,
  "byte_2c": 0.001218305033122668,
  "byte_dc": 7.614406457016675e-05,
  "byte_e5": 7.614406457016675e-05,
  "byte_d0": 0.0001522881291403335,
  "byte_6c": 0.0045686438742100054,
  "byte_54": 0.004949364197060839,
  "byte_2a": 0.0004568643874210005,
  "byte_d5": 0.000304576258280667,
  "byte_79": 0.00563466077819234,
  "byte_44": 0.0004568643874210005,
  "byte_41": 0.001218305033122668,
  "byte_d3": 0.000304576258280667,
  "byte_0a": 0.005330084519911673,
  "byte_51": 0.01172618594380568,
  "byte_92": 0.0035026269702276708,
  "byte_ee": 0.0001522881291403335,
  "byte_9e": 0.00038072032285083377,
  "byte_e8": 0.00038072032285083377,
  "byte_8d": 0.000304576258280667,
  "byte_a5": 0.00022843219371050026,
  "byte_cb": 0.0004568643874210005,
  "byte_03": 0.013477499428919515,
  "byte_0b": 0.00038072032285083377,
  "byte_a4": 0.00022843219371050026,
  "byte_37": 0.000304576258280667,
  "byte_96": 0.000304576258280667,
  "byte_ce": 0.00022843219371050026,
  "byte_62": 0.0028934744536663367,
  "byte_b5": 0.00022843219371050026,
  "byte_39": 0.002436610066245336,
  "byte_55": 0.0017513134851138354,
  "byte_b9": 0.000304576258280667,
  "byte_c1": 0.000304576258280667,
  "byte_07": 0.0008375847102718343,
  "byte_53": 0.0007614406457016675,
  "byte_29": 0.0004568643874210005,
  "byte_e4": 0.00022843219371050026,
  "byte_3e": 0.0004568643874210005,
  "byte_4d": 0.0004568643874210005,
  "byte_24": 0.0008375847102718343,
  "byte_23": 0.0004568643874210005,
  "byte_ac": 0.00022843219371050026,
  "byte_6b": 0.0010660169039823347,
  "byte_5c": 7.614406457016675e-05,
  "byte_5f": 7.614406457016675e-05,
  "byte_74": 0.006624533617604508,
  "byte_e0": 0.00038072032285083377,
  "byte_48": 0.000609152516561334,
  "byte_34": 0.0017513134851138354,
  "byte_15": 0.016218685753445518,
  "byte_4a": 0.0001522881291403335,
  "byte_50": 0.03434097312114521,
  "byte_6a": 7.614406457016675e-05,
  "byte_a0": 0.004035635422218838,
  "byte_82": 0.012639914718647682,
  "byte_73": 0.012716058783217849,
  "byte_ff": 0.18122287367699688,
  "byte_16": 0.012639914718647682,
  "byte_91": 0.01431508413919135,
  "byte_f3": 0.0006852965811315008,
  "byte_b8": 0.0001522881291403335,
  "byte_c6": 0.0001522881291403335,
  "byte_5e": 0.000304576258280667,
  "byte_9c": 0.00022843219371050026,
  "byte_75": 0.0028934744536663367,
  "byte_64": 0.0038833472930785047,
  "byte_09": 0.000304576258280667,
  "byte_0e": 0.000304576258280667,
  "byte_aa": 0.00022843219371050026,
  "byte_17": 0.001827457549684002,
  "byte_f0": 0.000304576258280667,
  "byte_6e": 0.00586309297190284,
  "byte_77": 0.0010660169039823347,
  "byte_13": 0.000609152516561334,
  "byte_3d": 0.000609152516561334,
  "byte_45": 0.0004568643874210005,
  "byte_4b": 0.0001522881291403335,
  "byte_a3": 0.00022843219371050026,
  "byte_4e": 0.00038072032285083377,
  "byte_f1": 0.0001522881291403335,
  "byte_28": 0.0007614406457016675,
  "byte_f5": 7.614406457016675e-05,
  "byte_dd": 0.00022843219371050026,
  "byte_18": 0.0001522881291403335,
  "byte_e9": 7.614406457016675e-05,
  "byte_1a": 0.0013705931622630017,
  "byte_99": 0.00022843219371050026,
  "byte_d9": 0.0004568643874210005,
  "byte_33": 0.0013705931622630017,
  "byte_1d": 0.0006852965811315008,
  "byte_db": 0.000304576258280667,
  "byte_a6": 0.00022843219371050026,
  "byte_f7": 0.0001522881291403335,
  "byte_32": 0.001522881291403335,
  "byte_21": 0.0004568643874210005,
  "byte_0f": 0.0006852965811315008,
  "byte_c3": 0.0038072032285083376,
  "byte_26": 0.0019036016142541688,
  "byte_8a": 0.001218305033122668,
  "byte_66": 0.0015990253559735018,
  "byte_b6": 0.0001522881291403335,
  "byte_31": 0.0010660169039823347,
  "byte_8f": 0.000304576258280667,
  "byte_83": 0.004492499809639838,
  "byte_fa": 0.0004568643874210005,
  "byte_43": 0.0009898728394121677,
  "byte_22": 0.0017513134851138354,
  "byte_84": 0.0014467372268331684,
  "byte_27": 0.0008375847102718343,
  "byte_93": 0.000913728774842001,
  "byte_85": 0.001827457549684002,
  "byte_97": 0.00038072032285083377,
  "byte_a2": 0.0004568643874210005,
  "byte_87": 0.001827457549684002,
  "byte_9a": 0.00038072032285083377,
  "byte_86": 0.0019797456788243355,
  "byte_0c": 0.000609152516561334,
  "byte_30": 0.0012944490976928348,
  "byte_ab": 7.614406457016675e-05,
  "byte_f6": 0.0001522881291403335,
  "byte_65": 0.008604279296428843,
  "byte_69": 0.0038833472930785047,
  "byte_67": 0.0022843219371050027,
  "byte_2e": 0.003731059163938171,
  "byte_f2": 0.0004568643874210005,
  "byte_e3": 0.0001522881291403335,
  "byte_8b": 0.0010660169039823347,
  "byte_89": 0.001218305033122668,
  "byte_0d": 0.00022843219371050026,
  "byte_78": 0.0005330084519911673,
  "byte_70": 0.0012944490976928348,
  "byte_94": 0.0005330084519911673,
  "byte_5a": 0.000304576258280667,
  "byte_76": 0.0006852965811315008,
  "byte_49": 0.00022843219371050026,
  "byte_7e": 0.0001522881291403335,
  "byte_8e": 0.00022843219371050026,
  "byte_fe": 0.0006852965811315008,
  "byte_8c": 0.0005330084519911673,
  "byte_59": 7.614406457016675e-05,
  "byte_b0": 0.0001522881291403335,
  "byte_d2": 0.0001522881291403335,
  "byte_c2": 7.614406457016675e-05,
  "byte_2d": 0.0012944490976928348,
  "byte_a1": 0.00038072032285083377,
  "byte_46": 0.00022843219371050026,
  "byte_19": 0.0017513134851138354,
  "byte_1f": 0.00022843219371050026,
  "byte_2f": 0.0004568643874210005,
  "byte_c9": 0.0001522881291403335,
  "byte_47": 0.00022843219371050026,
  "byte_38": 7.614406457016675e-05,
  "byte_eb": 7.614406457016675e-05,
  "byte_ba": 7.614406457016675e-05,
  "byte_da": 0.00022843219371050026,
  "byte_ec": 0.0001522881291403335,
  "byte_95": 0.0004568643874210005,
  "byte_9d": 0.00022843219371050026,
  "byte_bc": 7.614406457016675e-05,
  "byte_1b": 0.00022843219371050026,
  "byte_b2": 7.614406457016675e-05,
  "byte_af": 7.614406457016675e-05,
  "byte_b7": 0.00022843219371050026,
  "byte_4c": 0.000304576258280667,
  "byte_25": 0.00038072032285083377,
  "byte_cc": 7.614406457016675e-05,
  "byte_98": 0.0001522881291403335,
  "byte_7d": 7.614406457016675e-05,
  "byte_2b": 0.00022843219371050026,
  "byte_5d": 0.0001522881291403335,
  "byte_9f": 0.00022843219371050026,
  "byte_fc": 0.00022843219371050026,
  "byte_e6": 0.0001522881291403335,
  "byte_3b": 7.614406457016675e-05,
  "byte_d4": 0.0001522881291403335,
  "byte_f4": 7.614406457016675e-05,
  "byte_b3": 0.0001522881291403335,
  "byte_d1": 7.614406457016675e-05,
  "byte_4f": 0.000304576258280667,
  "byte_bf": 7.614406457016675e-05,
  "byte_42": 0.0005330084519911673,
  "byte_71": 7.614406457016675e-05,
  "byte_7a": 0.0001522881291403335,
  "byte_58": 7.614406457016675e-05,
  "byte_a7": 7.614406457016675e-05,
  "num_nodes": 2,
  "num_edges": 2,
  "avg_degree": 2.0,
  "density": 1.0,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 77,
  "event_nums": 27,
  "creation_block": 7023333,
  "creation_timestamp": 1546828287,
  "life_time": 281000.0,
  "duration_seconds": 4893003.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 2,
  "num_sellers": 2,
  "num_creator_transfers": 14,
  "buy_amt": 1.8e+17,
  "sell_amt": 2.46e+17,
  "avg_value": 5461538461538462.0,
  "txn_per_block": 0.00027402037715168275,
  "avg_gas_limit": 180929.0,
  "std_gas_limit": 417403.8916852908,
  "avg_gas_used": 84004.14285714286,
  "std_gas_used": 397843.48682909244,
  "avg_gas_price": 6123909139.948052,
  "std_gas_price": 5031416175.649871,
  "commit_num": 12,
  "payment_num": 15,
  "atinversebrah_num": 1,
  "setsecretsigner_num": 1,
  "setcroupier_num": 1,
  "placebet_num": 18,
  "setmaxprofit_num": 1,
  "refundbet_num": 18,
  "settlebet_num": 16,
  "withdrawfunds_num": 3,
  "kill_num": 1,
  "timeline_sequence": [
    [
      7023333,
      1546828287,
      101,
      19,
      0,
      3536490,
      2000000000,
      0,
      1,
      4262188,
      3536490,
      16097886
    ],
    [
      7026519,
      1546876670,
      103,
      31,
      0,
      42726,
      2000000000,
      0,
      1,
      2408677,
      28484,
      16094700
    ],
    [
      7040897,
      1547100035,
      107,
      123,
      0,
      42825,
      2000000000,
      0,
      1,
      7433029,
      28550,
      16080322
    ],
    [
      7041090,
      1547103328,
      108,
      27,
      12000000000000000,
      100000,
      4541003776,
      1,
      0,
      2715630,
      34939,
      16080129
    ],
    [
      7041092,
      1547103351,
      109,
      65,
      12000000000000000,
      200000,
      5000000000,
      1,
      0,
      3495966,
      34939,
      16080127
    ],
    [
      7041576,
      1547110459,
      110,
      41,
      0,
      63669,
      9000000000,
      0,
      1,
      2055049,
      42446,
      16079643
    ],
    [
      7041687,
      1547112097,
      111,
      132,
      12000000000000000,
      1000000,
      3000000000,
      1,
      0,
      6025984,
      62044,
      16079532
    ],
    [
      7041705,
      1547112449,
      112,
      141,
      20000000000000000,
      31560,
      3000000000,
      0,
      1,
      6513613,
      21040,
      16079514
    ],
    [
      7041748,
      1547113242,
      113,
      125,
      12000000000000000,
      1000000,
      3000000000,
      0,
      1,
      6013790,
      124682,
      16079471
    ],
    [
      7042458,
      1547124278,
      114,
      105,
      0,
      77341,
      1100000000,
      0,
      1,
      7942455,
      25393,
      16078761
    ],
    [
      7042513,
      1547125147,
      115,
      69,
      10000000000000000,
      100000,
      2100000000,
      1,
      0,
      6691620,
      100000,
      16078706
    ],
    [
      7042556,
      1547125648,
      116,
      182,
      10000000000000000,
      150000,
      3000000000,
      0,
      1,
      7930066,
      124682,
      16078663
    ],
    [
      7042615,
      1547126650,
      117,
      91,
      0,
      100000,
      3100000000,
      1,
      0,
      7486635,
      25341,
      16078604
    ],
    [
      7042635,
      1547126932,
      118,
      83,
      0,
      200000,
      12000000000,
      1,
      0,
      5021129,
      25341,
      16078584
    ],
    [
      7042694,
      1547127909,
      119,
      49,
      0,
      200000,
      12000000000,
      1,
      0,
      1516806,
      25341,
      16078525
    ],
    [
      7042726,
      1547128357,
      120,
      11,
      0,
      200000,
      12000000000,
      1,
      0,
      383027,
      26941,
      16078493
    ],
    [
      7042839,
      1547130123,
      121,
      144,
      10000000000000000,
      150000,
      4000000000,
      0,
      1,
      6612976,
      109618,
      16078380
    ],
    [
      7042853,
      1547130346,
      122,
      10,
      0,
      200000,
      12000000000,
      1,
      0,
      549649,
      25213,
      16078366
    ],
    [
      7042906,
      1547131250,
      123,
      107,
      0,
      77341,
      4500000000,
      0,
      1,
      5819902,
      35785,
      16078313
    ],
    [
      7042914,
      1547131392,
      124,
      122,
      0,
      200000,
      12000000000,
      1,
      0,
      3049910,
      24538,
      16078305
    ],
    [
      7042920,
      1547131482,
      125,
      81,
      0,
      200000,
      12000000000,
      1,
      0,
      2914235,
      24538,
      16078299
    ],
    [
      7042969,
      1547132163,
      126,
      73,
      0,
      200000,
      12000000000,
      1,
      0,
      3456858,
      24538,
      16078250
    ],
    [
      7043081,
      1547133691,
      127,
      31,
      10000000000000000,
      150000,
      2000000000,
      0,
      1,
      7611615,
      109682,
      16078138
    ],
    [
      7043081,
      1547133691,
      128,
      32,
      0,
      200000,
      12000000000,
      1,
      0,
      7635821,
      24206,
      16078138
    ],
    [
      7043091,
      1547133881,
      129,
      68,
      0,
      200000,
      12000000000,
      0,
      1,
      2718114,
      32201,
      16078128
    ],
    [
      7054294,
      1547307607,
      131,
      36,
      0,
      200000,
      12000000000,
      1,
      0,
      1269934,
      24206,
      16066925
    ],
    [
      7054312,
      1547307989,
      132,
      105,
      0,
      200000,
      12000000000,
      0,
      1,
      6588924,
      25393,
      16066907
    ],
    [
      7054366,
      1547308831,
      133,
      50,
      10000000000000000,
      200000,
      12000000000,
      0,
      1,
      2739929,
      124682,
      16066853
    ],
    [
      7054596,
      1547312300,
      134,
      122,
      0,
      70000,
      3000000000,
      1,
      0,
      6599755,
      25266,
      16066623
    ],
    [
      7054603,
      1547312468,
      135,
      103,
      0,
      70000,
      3000000000,
      1,
      0,
      6231986,
      26877,
      16066616
    ],
    [
      7054615,
      1547312667,
      136,
      116,
      0,
      70000,
      2000000000,
      1,
      0,
      4134889,
      25266,
      16066604
    ],
    [
      7054633,
      1547312951,
      137,
      39,
      0,
      200000,
      12000000000,
      1,
      0,
      1694878,
      25341,
      16066586
    ],
    [
      7054720,
      1547314059,
      138,
      16,
      0,
      200000,
      12000000000,
      1,
      0,
      507756,
      24206,
      16066499
    ],
    [
      7054730,
      1547314207,
      139,
      27,
      0,
      200000,
      12000000000,
      0,
      1,
      972573,
      25393,
      16066489
    ],
    [
      7054745,
      1547314443,
      140,
      95,
      0,
      70000,
      2000000000,
      1,
      0,
      3500871,
      25341,
      16066474
    ],
    [
      7054759,
      1547314602,
      141,
      34,
      10000000000000000,
      200000,
      12000000000,
      0,
      1,
      4104289,
      124682,
      16066460
    ],
    [
      7054766,
      1547314721,
      142,
      40,
      0,
      70000,
      2200000000,
      0,
      1,
      3354942,
      23601,
      16066453
    ],
    [
      7054881,
      1547316334,
      143,
      238,
      10000000000000000,
      200000,
      12000000000,
      1,
      0,
      6311170,
      61980,
      16066338
    ],
    [
      7054885,
      1547316457,
      144,
      85,
      10000000000000000,
      200000,
      12000000000,
      1,
      0,
      2694016,
      62108,
      16066334
    ],
    [
      7054902,
      1547316766,
      145,
      179,
      20000000000000000,
      60000,
      10000000000,
      0,
      1,
      5208285,
      21040,
      16066317
    ],
    [
      7054907,
      1547316849,
      146,
      10,
      10000000000000000,
      200000,
      12000000000,
      0,
      1,
      491067,
      124618,
      16066312
    ],
    [
      7054925,
      1547317191,
      147,
      153,
      0,
      70000,
      2000000000,
      0,
      1,
      5417148,
      23601,
      16066294
    ],
    [
      7054977,
      1547318082,
      148,
      7,
      10000000000000000,
      200000,
      12000000000,
      0,
      1,
      3948921,
      124682,
      16066242
    ],
    [
      7054993,
      1547318382,
      149,
      108,
      0,
      70000,
      2000000000,
      0,
      1,
      7684430,
      23601,
      16066226
    ],
    [
      7055062,
      1547319331,
      150,
      30,
      18000000000000000,
      60000,
      9000000000,
      0,
      1,
      1309385,
      21040,
      16066157
    ],
    [
      7055109,
      1547320056,
      151,
      32,
      10000000000000000,
      200000,
      12000000000,
      0,
      1,
      1758248,
      124682,
      16066110
    ],
    [
      7055122,
      1547320224,
      152,
      30,
      0,
      200000,
      12000000000,
      1,
      0,
      2217934,
      24538,
      16066097
    ],
    [
      7055147,
      1547320707,
      153,
      31,
      0,
      200000,
      12000000000,
      1,
      0,
      1192605,
      24538,
      16066072
    ],
    [
      7055169,
      1547321109,
      154,
      63,
      10000000000000000,
      200000,
      12000000000,
      0,
      1,
      3662116,
      109554,
      16066050
    ],
    [
      7055171,
      1547321146,
      155,
      23,
      0,
      70000,
      3000000000,
      0,
      1,
      984003,
      32227,
      16066048
    ],
    [
      7055175,
      1547321207,
      156,
      116,
      10000000000000000,
      200000,
      12000000000,
      0,
      1,
      5782203,
      109618,
      16066044
    ],
    [
      7055179,
      1547321259,
      157,
      48,
      0,
      70000,
      2000000000,
      0,
      1,
      2170229,
      32201,
      16066040
    ],
    [
      7055199,
      1547321700,
      158,
      13,
      10000000000000000,
      200000,
      12000000000,
      0,
      1,
      484983,
      109554,
      16066020
    ],
    [
      7055201,
      1547321749,
      159,
      30,
      0,
      200000,
      12000000000,
      1,
      0,
      716738,
      24538,
      16066018
    ],
    [
      7055295,
      1547323354,
      160,
      20,
      0,
      200000,
      12000000000,
      1,
      0,
      1120675,
      24538,
      16065924
    ],
    [
      7055330,
      1547323934,
      161,
      102,
      0,
      200000,
      12000000000,
      1,
      0,
      2575698,
      24538,
      16065889
    ],
    [
      7055420,
      1547325258,
      162,
      21,
      0,
      200000,
      12000000000,
      1,
      0,
      1169779,
      24474,
      16065799
    ],
    [
      7304193,
      1551719524,
      183,
      237,
      0,
      77245,
      3000000000,
      0,
      1,
      7683786,
      35721,
      15817026
    ],
    [
      7304236,
      1551719894,
      184,
      28,
      0,
      77341,
      3000000000,
      0,
      1,
      6572162,
      25393,
      15816983
    ],
    [
      7304276,
      1551720521,
      185,
      77,
      0,
      40761,
      3000000000,
      0,
      1,
      4270896,
      27174,
      15816943
    ],
    [
      7304294,
      1551720766,
      186,
      107,
      0,
      40761,
      3000000000,
      0,
      1,
      7640377,
      27174,
      15816925
    ],
    [
      7304313,
      1551721045,
      187,
      80,
      0,
      52656,
      3000000000,
      0,
      1,
      6583984,
      34322,
      15816906
    ],
    [
      7304333,
      1551721290,
      188,
      38,
      0,
      40917,
      3000000000,
      0,
      1,
      7488544,
      13639,
      15816886
    ],
    [
      7042458,
      1547124278,
      0,
      0,
      12000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      7042906,
      1547131250,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      7043091,
      1547133881,
      0,
      0,
      19400000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      7054312,
      1547307989,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      7054730,
      1547314207,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      7054766,
      1547314721,
      0,
      0,
      19400000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      7054925,
      1547317191,
      0,
      0,
      19400000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      7054993,
      1547318382,
      0,
      0,
      19400000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      7055171,
      1547321146,
      0,
      0,
      1,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      7055179,
      1547321259,
      0,
      0,
      19400000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      7304193,
      1551719524,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      7304236,
      1551719894,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      7304313,
      1551721045,
      0,
      0,
      20999999999999999,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      7304333,
      1551721290,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.5.0;\n\ncontract GoDice{\n\n    uint constant HOUSE_EDGE_PERCENT = 1;\n    uint constant HOUSE_EDGE_MINIMUM_AMOUNT = 0.0003 ether;\n\n    uint constant MIN_JACKPOT_BET = 0.1 ether;\n\n    uint constant JACKPOT_MODULO = 1000;\n    uint constant JACKPOT_FEE = 0.001 ether;\n\n    uint constant MIN_BET = 0.01 ether;\n    uint constant MAX_AMOUNT = 300000 ether;\n\n    uint constant MAX_MODULO = 100;\n\n    uint constant MAX_MASK_MODULO = 40;\n\n    uint constant MAX_BET_MASK = 2 ** MAX_MASK_MODULO;\n\n    uint constant BET_EXPIRATION_BLOCKS = 250;\n\n    address constant DUMMY_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\n\n    address payable public owner;\n    address payable private nextOwner;\n\n    uint public maxProfit;\n\n    address public secretSigner;\n\n    uint128 public jackpotSize;\n\n    uint128 public lockedInBets;\n\n    struct Bet {\n        uint amount;\n        uint8 modulo;\n        uint8 rollUnder;\n        uint40 placeBlockNumber;\n        uint40 mask;\n        address payable gambler;\n    }\n\n    mapping (uint => Bet) bets;\n\n    address public croupier;\n\n    // Events that are issued to make statistic recovery easier.\n    event FailedPayment(address indexed beneficiary, uint amount);\n    event Payment(address indexed beneficiary, uint amount);\n    event JackpotPayment(address indexed beneficiary, uint amount);\n\n    // This event is emitted in placeBet to record commit in the logs.\n    event Commit(uint commit);\n\n    // Constructor. Deliberately does not take any parameters.\n    constructor () public {\n        owner = msg.sender;\n        secretSigner = DUMMY_ADDRESS;\n        croupier = DUMMY_ADDRESS;\n    }\n\n    // Standard modifier on methods invokable only by contract owner.\n    modifier onlyOwner {\n        require (msg.sender == owner, \"OnlyOwner methods called by non-owner.\");\n        _;\n    }\n\n    // Standard modifier on methods invokable only by contract owner.\n    modifier onlyCroupier {\n        require (msg.sender == croupier, \"OnlyCroupier methods called by non-croupier.\");\n        _;\n    }\n\n    // Standard contract ownership transfer implementation,\n    function approveNextOwner(address payable _nextOwner) external onlyOwner {\n        require (_nextOwner != owner, \"Cannot approve current owner.\");\n        nextOwner = _nextOwner;\n    }\n\n    function acceptNextOwner() external {\n        require (msg.sender == nextOwner, \"Can only accept preapproved new owner.\");\n        owner = nextOwner;\n    }\n\n    // Fallback function deliberately left empty. It's primary use case\n    // is to top up the bank roll.\n    function () external payable {\n    }\n\n    // See comment for \"secretSigner\" variable.\n    function setSecretSigner(address newSecretSigner) external onlyOwner {\n        secretSigner = newSecretSigner;\n    }\n\n    // Change the croupier address.\n    function setCroupier(address newCroupier) external onlyOwner {\n        croupier = newCroupier;\n    }\n\n    // Change max bet reward. Setting this to zero effectively disables betting.\n    function setMaxProfit(uint _maxProfit) public onlyOwner {\n        require (_maxProfit < MAX_AMOUNT, \"maxProfit should be a sane number.\");\n        maxProfit = _maxProfit;\n    }\n\n    // This function is used to bump up the jackpot fund. Cannot be used to lower it.\n    function increaseJackpot(uint increaseAmount) external onlyOwner {\n        require (increaseAmount <= address(this).balance, \"Increase amount larger than balance.\");\n        require (jackpotSize + lockedInBets + increaseAmount <= address(this).balance, \"Not enough funds.\");\n        jackpotSize += uint128(increaseAmount);\n    }\n\n    // Funds withdrawal to cover costs of dice2.win operation.\n    function withdrawFunds(address payable beneficiary, uint withdrawAmount) external onlyOwner {\n        require (withdrawAmount <= address(this).balance, \"Increase amount larger than balance.\");\n        require (jackpotSize + lockedInBets + withdrawAmount <= address(this).balance, \"Not enough funds.\");\n        sendFunds(beneficiary, withdrawAmount, withdrawAmount);\n    }\n\n    function kill() external onlyOwner {\n        require (lockedInBets == 0, \"All bets should be processed (settled or refunded) before self-destruct.\");\n        selfdestruct(owner);\n    }\n\n\n    function placeBet(uint betMask, uint modulo, uint commitLastBlock, uint commit, uint8 v, bytes32 r, bytes32 s) external payable {\n        // Check that the bet is in 'clean' state.\n        Bet storage bet = bets[commit];\n        require (bet.gambler == address(0), \"Bet should be in a 'clean' state.\");\n\n        // Validate input data ranges.\n        uint amount = msg.value;\n        require (modulo > 1 && modulo <= MAX_MODULO, \"Modulo should be within range.\");\n        require (amount >= MIN_BET && amount <= MAX_AMOUNT, \"Amount should be within range.\");\n        require (betMask > 0 && betMask < MAX_BET_MASK, \"Mask should be within range.\");\n\n        // Check that commit is valid - it has not expired and its signature is valid.\n        require (block.number <= commitLastBlock, \"Commit has expired.\");\n        bytes32 signatureHash = keccak256(abi.encodePacked(commitLastBlock, commit));\n        require (secretSigner == ecrecover(signatureHash, v, r, s), \"ECDSA signature is not valid.\");\n\n        uint rollUnder;\n        uint mask;\n\n        if (modulo <= MAX_MASK_MODULO) {\n            // Small modulo games specify bet outcomes via bit mask.\n            // rollUnder is a number of 1 bits in this mask (population count).\n            // This magic looking formula is an efficient way to compute population\n            // count on EVM for numbers below 2**40. For detailed proof consult\n            // the dice2.win whitepaper.\n            rollUnder = ((betMask * POPCNT_MULT) & POPCNT_MASK) % POPCNT_MODULO;\n            mask = betMask;\n        } else {\n            // Larger modulos specify the right edge of half-open interval of\n            // winning bet outcomes.\n            require (betMask > 0 && betMask <= modulo, \"High modulo range, betMask larger than modulo.\");\n            rollUnder = betMask;\n        }\n\n        // Winning amount and jackpot increase.\n        uint possibleWinAmount;\n        uint jackpotFee;\n\n        (possibleWinAmount, jackpotFee) = getDiceWinAmount(amount, modulo, rollUnder);\n\n        // Enforce max profit limit.\n        require (possibleWinAmount <= amount + maxProfit, \"maxProfit limit violation.\");\n\n        // Lock funds.\n        lockedInBets += uint128(possibleWinAmount);\n        jackpotSize += uint128(jackpotFee);\n\n        // Check whether contract has enough funds to process this bet.\n        require (jackpotSize + lockedInBets <= address(this).balance, \"Cannot afford to lose this bet.\");\n\n        // Record commit in logs.\n        emit Commit(commit);\n\n        // Store bet parameters on blockchain.\n        bet.amount = amount;\n        bet.modulo = uint8(modulo);\n        bet.rollUnder = uint8(rollUnder);\n        bet.placeBlockNumber = uint40(block.number);\n        bet.mask = uint40(mask);\n        bet.gambler = msg.sender;\n    }\n\n    // This is the method used to settle 99% of bets. To process a bet with a specific\n    // \"commit\", settleBet should supply a \"reveal\" number that would Keccak256-hash to\n    // \"commit\". \"blockHash\" is the block hash of placeBet block as seen by croupier; it\n    // is additionally asserted to prevent changing the bet outcomes on Ethereum reorgs.\n    function settleBet(uint reveal, bytes32 blockHash) external onlyCroupier {\n        uint commit = uint(keccak256(abi.encodePacked(reveal)));\n\n        Bet storage bet = bets[commit];\n        uint placeBlockNumber = bet.placeBlockNumber;\n\n        // Check that bet has not expired yet (see comment to BET_EXPIRATION_BLOCKS).\n        require (block.number > placeBlockNumber, \"settleBet in the same block as placeBet, or before.\");\n        require (block.number <= placeBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n        require (blockhash(placeBlockNumber) == blockHash);\n\n        // Settle bet using reveal and blockHash as entropy sources.\n        settleBetCommon(bet, reveal, blockHash);\n    }\n\n    function settleBetUncleMerkleProof(uint reveal, uint40 canonicalBlockNumber) external onlyCroupier {\n        // \"commit\" for bet settlement can only be obtained by hashing a \"reveal\".\n        uint commit = uint(keccak256(abi.encodePacked(reveal)));\n\n        Bet storage bet = bets[commit];\n\n        // Check that canonical block hash can still be verified.\n        require (block.number <= canonicalBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n\n        // Verify placeBet receipt.\n        requireCorrectReceipt(4 + 32 + 32 + 4);\n\n        // Reconstruct canonical & uncle block hashes from a receipt merkle proof, verify them.\n        bytes32 canonicalHash;\n        bytes32 uncleHash;\n        (canonicalHash, uncleHash) = verifyMerkleProof(commit, 4 + 32 + 32);\n        require (blockhash(canonicalBlockNumber) == canonicalHash);\n\n        // Settle bet using reveal and uncleHash as entropy sources.\n        settleBetCommon(bet, reveal, uncleHash);\n    }\n\n    // Common settlement code for settleBet & settleBetUncleMerkleProof.\n    function settleBetCommon(Bet storage bet, uint reveal, bytes32 entropyBlockHash) private {\n        // Fetch bet parameters into local variables (to save gas).\n        uint amount = bet.amount;\n        uint modulo = bet.modulo;\n        uint rollUnder = bet.rollUnder;\n        address payable gambler = bet.gambler;\n\n        // Check that bet is in 'active' state.\n        require (amount != 0, \"Bet should be in an 'active' state\");\n\n        // Move bet into 'processed' state already.\n        bet.amount = 0;\n\n\n        bytes32 entropy = keccak256(abi.encodePacked(reveal, entropyBlockHash));\n\n        // Do a roll by taking a modulo of entropy. Compute winning amount.\n        uint dice = uint(entropy) % modulo;\n\n        uint diceWinAmount;\n        uint _jackpotFee;\n        (diceWinAmount, _jackpotFee) = getDiceWinAmount(amount, modulo, rollUnder);\n\n        uint diceWin = 0;\n        uint jackpotWin = 0;\n\n        // Determine dice outcome.\n        if (modulo <= MAX_MASK_MODULO) {\n            // For small modulo games, check the outcome against a bit mask.\n            if ((2 ** dice) & bet.mask != 0) {\n                diceWin = diceWinAmount;\n            }\n\n        } else {\n            // For larger modulos, check inclusion into half-open interval.\n            if (dice < rollUnder) {\n                diceWin = diceWinAmount;\n            }\n\n        }\n\n        // Unlock the bet amount, regardless of the outcome.\n        lockedInBets -= uint128(diceWinAmount);\n\n        // Roll for a jackpot (if eligible).\n        if (amount >= MIN_JACKPOT_BET) {\n            // The second modulo, statistically independent from the \"main\" dice roll.\n            // Effectively you are playing two games at once!\n            uint jackpotRng = (uint(entropy) / modulo) % JACKPOT_MODULO;\n\n            // Bingo!\n            if (jackpotRng == 0) {\n                jackpotWin = jackpotSize;\n                jackpotSize = 0;\n            }\n        }\n\n        // Log jackpot win.\n        if (jackpotWin > 0) {\n            emit JackpotPayment(gambler, jackpotWin);\n        }\n\n        // Send the funds to gambler.\n        sendFunds(gambler, diceWin + jackpotWin == 0 ? 1 wei : diceWin + jackpotWin, diceWin);\n    }\n\n\n    function refundBet(uint commit) external {\n        // Check that bet is in 'active' state.\n        Bet storage bet = bets[commit];\n        uint amount = bet.amount;\n\n        require (amount != 0, \"Bet should be in an 'active' state\");\n\n        // Check that bet has already expired.\n        require (block.number > bet.placeBlockNumber + BET_EXPIRATION_BLOCKS, \"Blockhash can't be queried by EVM.\");\n\n        // Move bet into 'processed' state, release funds.\n        bet.amount = 0;\n\n        uint diceWinAmount;\n        uint jackpotFee;\n        (diceWinAmount, jackpotFee) = getDiceWinAmount(amount, bet.modulo, bet.rollUnder);\n\n        lockedInBets -= uint128(diceWinAmount);\n        jackpotSize -= uint128(jackpotFee);\n\n        // Send the refund.\n        sendFunds(bet.gambler, amount, amount);\n    }\n\n    // Get the expected win amount after house edge is subtracted.\n    function getDiceWinAmount(uint amount, uint modulo, uint rollUnder) private pure returns (uint winAmount, uint jackpotFee) {\n        require (0 < rollUnder && rollUnder <= modulo, \"Win probability out of range.\");\n\n        jackpotFee = amount >= MIN_JACKPOT_BET ? JACKPOT_FEE : 0;\n\n        uint houseEdge = amount * HOUSE_EDGE_PERCENT / 100;\n\n        if (houseEdge < HOUSE_EDGE_MINIMUM_AMOUNT) {\n            houseEdge = HOUSE_EDGE_MINIMUM_AMOUNT;\n        }\n\n        require (houseEdge + jackpotFee <= amount, \"Bet doesn't even cover house edge.\");\n        winAmount = (amount - houseEdge - jackpotFee) * modulo / rollUnder;\n    }\n\n    // Helper routine to process the payment.\n    function sendFunds(address payable beneficiary, uint amount, uint successLogAmount) private {\n        if (beneficiary.send(amount)) {\n            emit Payment(beneficiary, successLogAmount);\n        } else {\n            emit FailedPayment(beneficiary, amount);\n        }\n    }\n\n    // This are some constants making O(1) population count in placeBet possible.\n    // See whitepaper for intuition and proofs behind it.\n    uint constant POPCNT_MULT = 0x0000000000002000000000100000000008000000000400000000020000000001;\n    uint constant POPCNT_MASK = 0x0001041041041041041041041041041041041041041041041041041041041041;\n    uint constant POPCNT_MODULO = 0x3F;\n\n\n    function verifyMerkleProof(uint seedHash, uint offset) pure private returns (bytes32 blockHash, bytes32 uncleHash) {\n        // (Safe) assumption - nobody will write into RAM during this method invocation.\n        uint scratchBuf1;  assembly { scratchBuf1 := mload(0x40) }\n\n        uint uncleHeaderLength; uint blobLength; uint shift; uint hashSlot;\n\n\n        for (;; offset += blobLength) {\n            assembly { blobLength := and(calldataload(sub(offset, 30)), 0xffff) }\n            if (blobLength == 0) {\n                // Zero slice length marks the end of uncle proof.\n                break;\n            }\n\n            assembly { shift := and(calldataload(sub(offset, 28)), 0xffff) }\n            require (shift + 32 <= blobLength, \"Shift bounds check.\");\n\n            offset += 4;\n            assembly { hashSlot := calldataload(add(offset, shift)) }\n            require (hashSlot == 0, \"Non-empty hash slot.\");\n\n            assembly {\n                calldatacopy(scratchBuf1, offset, blobLength)\n                mstore(add(scratchBuf1, shift), seedHash)\n                seedHash := keccak256(scratchBuf1, blobLength)\n                uncleHeaderLength := blobLength\n            }\n        }\n\n        // At this moment the uncle hash is known.\n        uncleHash = bytes32(seedHash);\n\n        // Construct the uncle list of a canonical block.\n        uint scratchBuf2 = scratchBuf1 + uncleHeaderLength;\n        uint unclesLength; assembly { unclesLength := and(calldataload(sub(offset, 28)), 0xffff) }\n        uint unclesShift;  assembly { unclesShift := and(calldataload(sub(offset, 26)), 0xffff) }\n        require (unclesShift + uncleHeaderLength <= unclesLength, \"Shift bounds check.\");\n\n        offset += 6;\n        assembly { calldatacopy(scratchBuf2, offset, unclesLength) }\n        memcpy(scratchBuf2 + unclesShift, scratchBuf1, uncleHeaderLength);\n\n        assembly { seedHash := keccak256(scratchBuf2, unclesLength) }\n\n        offset += unclesLength;\n\n        // Verify the canonical block header using the computed sha3Uncles.\n        assembly {\n            blobLength := and(calldataload(sub(offset, 30)), 0xffff)\n            shift := and(calldataload(sub(offset, 28)), 0xffff)\n        }\n        require (shift + 32 <= blobLength, \"Shift bounds check.\");\n\n        offset += 4;\n        assembly { hashSlot := calldataload(add(offset, shift)) }\n        require (hashSlot == 0, \"Non-empty hash slot.\");\n\n        assembly {\n            calldatacopy(scratchBuf1, offset, blobLength)\n            mstore(add(scratchBuf1, shift), seedHash)\n\n            // At this moment the canonical block hash is known.\n            blockHash := keccak256(scratchBuf1, blobLength)\n        }\n    }\n\n    // Helper to check the placeBet receipt. \"offset\" is the location of the proof beginning in the calldata.\n    // RLP layout: [triePath, str([status, cumGasUsed, bloomFilter, [[address, [topics], data]])]\n    function requireCorrectReceipt(uint offset) view private {\n        uint leafHeaderByte; assembly { leafHeaderByte := byte(0, calldataload(offset)) }\n\n        require (leafHeaderByte >= 0xf7, \"Receipt leaf longer than 55 bytes.\");\n        offset += leafHeaderByte - 0xf6;\n\n        uint pathHeaderByte; assembly { pathHeaderByte := byte(0, calldataload(offset)) }\n\n        if (pathHeaderByte <= 0x7f) {\n            offset += 1;\n\n        } else {\n            require (pathHeaderByte >= 0x80 && pathHeaderByte <= 0xb7, \"Path is an RLP string.\");\n            offset += pathHeaderByte - 0x7f;\n        }\n\n        uint receiptStringHeaderByte; assembly { receiptStringHeaderByte := byte(0, calldataload(offset)) }\n        require (receiptStringHeaderByte == 0xb9, \"Receipt string is always at least 256 bytes long, but less than 64k.\");\n        offset += 3;\n\n        uint receiptHeaderByte; assembly { receiptHeaderByte := byte(0, calldataload(offset)) }\n        require (receiptHeaderByte == 0xf9, \"Receipt is always at least 256 bytes long, but less than 64k.\");\n        offset += 3;\n\n        uint statusByte; assembly { statusByte := byte(0, calldataload(offset)) }\n        require (statusByte == 0x1, \"Status should be success.\");\n        offset += 1;\n\n        uint cumGasHeaderByte; assembly { cumGasHeaderByte := byte(0, calldataload(offset)) }\n        if (cumGasHeaderByte <= 0x7f) {\n            offset += 1;\n\n        } else {\n            require (cumGasHeaderByte >= 0x80 && cumGasHeaderByte <= 0xb7, \"Cumulative gas is an RLP string.\");\n            offset += cumGasHeaderByte - 0x7f;\n        }\n\n        uint bloomHeaderByte; assembly { bloomHeaderByte := byte(0, calldataload(offset)) }\n        require (bloomHeaderByte == 0xb9, \"Bloom filter is always 256 bytes long.\");\n        offset += 256 + 3;\n\n        uint logsListHeaderByte; assembly { logsListHeaderByte := byte(0, calldataload(offset)) }\n        require (logsListHeaderByte == 0xf8, \"Logs list is less than 256 bytes long.\");\n        offset += 2;\n\n        uint logEntryHeaderByte; assembly { logEntryHeaderByte := byte(0, calldataload(offset)) }\n        require (logEntryHeaderByte == 0xf8, \"Log entry is less than 256 bytes long.\");\n        offset += 2;\n\n        uint addressHeaderByte; assembly { addressHeaderByte := byte(0, calldataload(offset)) }\n        require (addressHeaderByte == 0x94, \"Address is 20 bytes long.\");\n\n        uint logAddress; assembly { logAddress := and(calldataload(sub(offset, 11)), 0xffffffffffffffffffffffffffffffffffffffff) }\n        require (logAddress == uint(address(this)));\n    }\n\n    // Memory copy.\n    function memcpy(uint dest, uint src, uint len) pure private {\n        // Full 32 byte words\n        for(; len >= 32; len -= 32) {\n            assembly { mstore(dest, mload(src)) }\n            dest += 32; src += 32;\n        }\n\n        // Remaining bytes\n        uint mask = 256 ** (32 - len) - 1;\n        assembly {\n            let srcpart := and(mload(src), not(mask))\n            let destpart := and(mload(dest), mask)\n            mstore(dest, or(destpart, srcpart))\n        }\n    }\n\n    function TestRecover(uint msgA,uint msgB, uint8 v, bytes32 r, bytes32 s) public pure returns (address) {\n        bytes32 msgHash = keccak256(abi.encodePacked(msgA,msgB));\n        return ecrecover(msgHash, v, r, s);\n    }\n\n    function getSecretSigner() view public returns(address) {\n        return secretSigner;\n    }\n\n}"
}