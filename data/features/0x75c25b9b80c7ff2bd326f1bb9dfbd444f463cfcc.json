{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND PUSH1 PUSH1 EXP OR SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 SWAP1 PUSH1 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 SHA3 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP8 AND DUP2 MSTORE PUSH1 DUP3 MSTORE DUP3 DUP2 SHA3 CALLER DUP3 MSTORE SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP8 AND SWAP4 SWAP2 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT DUP1 ISZERO PUSH2 JUMPI POP CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe STOP LOG1 PUSH6 SHA3 SUB SHL UNKNOWN_0xb9 SUB UNKNOWN_0xea CALLVALUE UNKNOWN_0xd7 GASLIMIT UNKNOWN_0xb7 LT PUSH15 CODESIZE INVALID_0x74",
  "opcode_entropy": 4.804931457466032,
  "opcode_count": 1708,
  "unique_opcodes": 61,
  "byte_entropy": 5.879076455016837,
  "byte_60": 0.10916030534351145,
  "byte_80": 0.0416030534351145,
  "byte_40": 0.009923664122137405,
  "byte_52": 0.025190839694656488,
  "byte_04": 0.013740458015267175,
  "byte_36": 0.0007633587786259542,
  "byte_10": 0.0030534351145038168,
  "byte_61": 0.044274809160305344,
  "byte_00": 0.055725190839694655,
  "byte_da": 0.0007633587786259542,
  "byte_57": 0.022900763358778626,
  "byte_63": 0.008778625954198474,
  "byte_ff": 0.02099236641221374,
  "byte_7c": 0.0007633587786259542,
  "byte_01": 0.04389312977099236,
  "byte_35": 0.004580152671755725,
  "byte_16": 0.024427480916030534,
  "byte_06": 0.003435114503816794,
  "byte_fd": 0.012977099236641221,
  "byte_de": 0.0007633587786259542,
  "byte_03": 0.02862595419847328,
  "byte_81": 0.024427480916030534,
  "byte_14": 0.00801526717557252,
  "byte_ec": 0.0007633587786259542,
  "byte_09": 0.003816793893129771,
  "byte_5e": 0.0003816793893129771,
  "byte_a7": 0.0011450381679389313,
  "byte_b3": 0.0011450381679389313,
  "byte_76": 0.0007633587786259542,
  "byte_18": 0.0007633587786259542,
  "byte_0d": 0.0003816793893129771,
  "byte_dd": 0.0026717557251908397,
  "byte_ae": 0.0015267175572519084,
  "byte_23": 0.0019083969465648854,
  "byte_b8": 0.0003816793893129771,
  "byte_72": 0.0007633587786259542,
  "byte_d5": 0.0003816793893129771,
  "byte_31": 0.0007633587786259542,
  "byte_3c": 0.0007633587786259542,
  "byte_e5": 0.0007633587786259542,
  "byte_67": 0.0003816793893129771,
  "byte_3f": 0.0022900763358778627,
  "byte_4b": 0.0003816793893129771,
  "byte_a8": 0.0007633587786259542,
  "byte_3a": 0.0007633587786259542,
  "byte_02": 0.028244274809160305,
  "byte_2a": 0.0003816793893129771,
  "byte_54": 0.012977099236641221,
  "byte_4d": 0.0015267175572519084,
  "byte_50": 0.01984732824427481,
  "byte_41": 0.0007633587786259542,
  "byte_5c": 0.0007633587786259542,
  "byte_97": 0.0007633587786259542,
  "byte_5a": 0.0011450381679389313,
  "byte_bb": 0.0007633587786259542,
  "byte_56": 0.01717557251908397,
  "byte_70": 0.0007633587786259542,
  "byte_a0": 0.013740458015267175,
  "byte_82": 0.01603053435114504,
  "byte_6b": 0.0007633587786259542,
  "byte_84": 0.00916030534351145,
  "byte_cb": 0.0007633587786259542,
  "byte_59": 0.0007633587786259542,
  "byte_8c": 0.0011450381679389313,
  "byte_8d": 0.0011450381679389313,
  "byte_a5": 0.0003816793893129771,
  "byte_5b": 0.03549618320610687,
  "byte_a1": 0.0026717557251908397,
  "byte_95": 0.0011450381679389313,
  "byte_d8": 0.0003816793893129771,
  "byte_9b": 0.0011450381679389313,
  "byte_d2": 0.0007633587786259542,
  "byte_a9": 0.0007633587786259542,
  "byte_05": 0.004961832061068702,
  "byte_9c": 0.0007633587786259542,
  "byte_e7": 0.0003816793893129771,
  "byte_62": 0.0011450381679389313,
  "byte_ed": 0.0007633587786259542,
  "byte_3e": 0.0007633587786259542,
  "byte_0b": 0.0007633587786259542,
  "byte_f2": 0.0015267175572519084,
  "byte_e3": 0.0007633587786259542,
  "byte_8b": 0.0007633587786259542,
  "byte_32": 0.0003816793893129771,
  "byte_34": 0.007251908396946565,
  "byte_15": 0.019465648854961833,
  "byte_e6": 0.0007633587786259542,
  "byte_f8": 0.0003816793893129771,
  "byte_53": 0.0007633587786259542,
  "byte_51": 0.010305343511450382,
  "byte_20": 0.020229007633587787,
  "byte_83": 0.014885496183206106,
  "byte_91": 0.013740458015267175,
  "byte_92": 0.010687022900763359,
  "byte_90": 0.04465648854961832,
  "byte_85": 0.004198473282442748,
  "byte_3b": 0.0007633587786259542,
  "byte_1f": 0.003435114503816794,
  "byte_68": 0.0019083969465648854,
  "byte_0a": 0.01450381679389313,
  "byte_19": 0.0030534351145038168,
  "byte_f3": 0.0026717557251908397,
  "byte_9a": 0.0015267175572519084,
  "byte_24": 0.0015267175572519084,
  "byte_e1": 0.0015267175572519084,
  "byte_ba": 0.0003816793893129771,
  "byte_c3": 0.0019083969465648854,
  "byte_0c": 0.0007633587786259542,
  "byte_44": 0.0007633587786259542,
  "byte_12": 0.0007633587786259542,
  "byte_48": 0.0003816793893129771,
  "byte_c0": 0.0007633587786259542,
  "byte_1b": 0.0015267175572519084,
  "byte_77": 0.0011450381679389313,
  "byte_2b": 0.0015267175572519084,
  "byte_98": 0.0003816793893129771,
  "byte_46": 0.0003816793893129771,
  "byte_ad": 0.0015267175572519084,
  "byte_b6": 0.0011450381679389313,
  "byte_2d": 0.0003816793893129771,
  "byte_17": 0.0011450381679389313,
  "byte_94": 0.004198473282442748,
  "byte_93": 0.007251908396946565,
  "byte_d9": 0.0022900763358778627,
  "byte_11": 0.003435114503816794,
  "byte_bc": 0.0003816793893129771,
  "byte_fb": 0.0007633587786259542,
  "byte_07": 0.0030534351145038168,
  "byte_2c": 0.0003816793893129771,
  "byte_37": 0.0011450381679389313,
  "byte_33": 0.004580152671755725,
  "byte_5f": 0.0007633587786259542,
  "byte_74": 0.0015267175572519084,
  "byte_55": 0.003435114503816794,
  "byte_7f": 0.0026717557251908397,
  "byte_78": 0.0003816793893129771,
  "byte_86": 0.0022900763358778627,
  "byte_2f": 0.0015267175572519084,
  "byte_9e": 0.0007633587786259542,
  "byte_13": 0.0007633587786259542,
  "byte_df": 0.0003816793893129771,
  "byte_9f": 0.0007633587786259542,
  "byte_f4": 0.0003816793893129771,
  "byte_d1": 0.0007633587786259542,
  "byte_ac": 0.0003816793893129771,
  "byte_e0": 0.0011450381679389313,
  "byte_79": 0.0003816793893129771,
  "byte_2e": 0.0007633587786259542,
  "byte_5d": 0.0003816793893129771,
  "byte_69": 0.0015267175572519084,
  "byte_22": 0.0007633587786259542,
  "byte_66": 0.0003816793893129771,
  "byte_d3": 0.0007633587786259542,
  "byte_db": 0.0003816793893129771,
  "byte_0e": 0.0007633587786259542,
  "byte_f9": 0.0003816793893129771,
  "byte_a4": 0.0007633587786259542,
  "byte_a3": 0.0022900763358778627,
  "byte_0f": 0.0003816793893129771,
  "byte_3d": 0.0003816793893129771,
  "byte_bf": 0.0003816793893129771,
  "byte_f6": 0.0003816793893129771,
  "byte_25": 0.0007633587786259542,
  "byte_47": 0.0003816793893129771,
  "byte_08": 0.0015267175572519084,
  "byte_fe": 0.0011450381679389313,
  "byte_cd": 0.0003816793893129771,
  "byte_d0": 0.0003816793893129771,
  "byte_49": 0.0003816793893129771,
  "byte_af": 0.0003816793893129771,
  "byte_b4": 0.0003816793893129771,
  "byte_6f": 0.0003816793893129771,
  "byte_64": 0.0003816793893129771,
  "byte_73": 0.0007633587786259542,
  "byte_87": 0.0011450381679389313,
  "byte_eb": 0.0003816793893129771,
  "byte_7d": 0.0011450381679389313,
  "byte_4f": 0.0007633587786259542,
  "byte_71": 0.0003816793893129771,
  "byte_42": 0.0003816793893129771,
  "byte_1e": 0.0007633587786259542,
  "byte_f7": 0.0003816793893129771,
  "byte_b2": 0.0003816793893129771,
  "byte_29": 0.0007633587786259542,
  "byte_c8": 0.0011450381679389313,
  "byte_c7": 0.0003816793893129771,
  "byte_b9": 0.0007633587786259542,
  "byte_8e": 0.0003816793893129771,
  "byte_c1": 0.0003816793893129771,
  "byte_f1": 0.0011450381679389313,
  "byte_1a": 0.0003816793893129771,
  "byte_ef": 0.0019083969465648854,
  "byte_e2": 0.0007633587786259542,
  "byte_c2": 0.0007633587786259542,
  "byte_b0": 0.0007633587786259542,
  "byte_fc": 0.0007633587786259542,
  "byte_aa": 0.0007633587786259542,
  "byte_c4": 0.0007633587786259542,
  "byte_28": 0.0007633587786259542,
  "byte_f5": 0.0015267175572519084,
  "byte_65": 0.0003816793893129771,
  "byte_7a": 0.0007633587786259542,
  "byte_30": 0.0003816793893129771,
  "byte_58": 0.0003816793893129771,
  "byte_ea": 0.0003816793893129771,
  "byte_d7": 0.0003816793893129771,
  "byte_45": 0.0003816793893129771,
  "byte_b7": 0.0003816793893129771,
  "byte_6e": 0.0007633587786259542,
  "byte_c6": 0.0007633587786259542,
  "byte_6c": 0.0003816793893129771,
  "byte_75": 0.0003816793893129771,
  "byte_38": 0.0003816793893129771,
  "byte_d4": 0.0003816793893129771,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 4,
  "event_nums": 3,
  "creation_block": 6223433,
  "creation_timestamp": 1535380902,
  "life_time": 2798.0,
  "duration_seconds": 40845.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.0014290818149339049,
  "avg_gas_limit": 280160.5,
  "std_gas_limit": 370713.75421037455,
  "avg_gas_used": 269790.75,
  "std_gas_used": 376623.62278830505,
  "avg_gas_price": 2789215488.0,
  "std_gas_price": 795795408.0649338,
  "transfer_num": 3,
  "timeline_sequence": [
    [
      6223433,
      1535380902,
      2,
      28,
      0,
      922122,
      2156861952,
      0,
      1,
      2022180,
      922122,
      16897476
    ],
    [
      6224885,
      1535402060,
      4,
      35,
      0,
      78520,
      2000000000,
      0,
      1,
      4004144,
      52347,
      16896024
    ],
    [
      6226160,
      1535420748,
      5,
      50,
      0,
      60000,
      3000000000,
      0,
      1,
      2525692,
      52347,
      16894749
    ],
    [
      6226231,
      1535421747,
      6,
      69,
      0,
      60000,
      4000000000,
      0,
      1,
      6351679,
      52347,
      16894678
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.16;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    \n    uint256 c = a / b;\n    \n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) public constant returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n  mapping(address => uint256) balances;\n\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value > 0 && _value <= balances[msg.sender]);\n    \n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  \n  function balanceOf(address _owner) public constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n  mapping (address => mapping (address => uint256)) internal allowed;\n  \n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value > 0 && _value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n  \n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n  \n  function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n \n  function Ownable() {\n    owner = msg.sender;\n  }\n  \n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  \n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n  bool public paused = false;\n \n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n  \n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n \n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n  \n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\ncontract PausableToken is StandardToken, Pausable {\n  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n}\n\n\ncontract AiToken is PausableToken {\n\n    string public name = 'AiToken';\n    string public symbol = 'AiToken';\n    string public version = '1.0.1';\n    uint8 public decimals = 18;\n    \n    \n    function AiToken(uint256 initialSupply) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);\n        balances[msg.sender] = totalSupply;\n\n    }\n    \n    function () {\n        //if ether is sent to this address, send it back.\n        revert();\n    }\n}"
}