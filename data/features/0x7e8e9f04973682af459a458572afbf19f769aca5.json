{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 CALLVALUE GT ISZERO PUSH2 JUMPI PUSH32 CALLER CALLVALUE PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 PUSH1 CALLDATALOAD SWAP2 DUP3 ADD SWAP2 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 CALLDATASIZE NUMBER PUSH1 MLOAD DUP1 DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP POP PUSH1 ADD SWAP2 POP PUSH1 SWAP1 POP MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH2 DUP2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP2 POP DUP2 ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD SUB PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP4 PUSH2 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 DUP2 SHA3 SSTORE PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST POP PUSH32 DUP4 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 SLOAD DUP2 JUMP JUMPDEST PUSH2 SLOAD DUP2 JUMP JUMPDEST PUSH1 CALLDATASIZE NUMBER PUSH1 MLOAD DUP1 DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP POP PUSH1 ADD SWAP2 POP PUSH1 SWAP1 POP MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH2 DUP2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH2 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH2 SLOAD DUP2 JUMP JUMPDEST PUSH1 CALLDATASIZE NUMBER PUSH1 MLOAD DUP1 DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP POP PUSH1 ADD SWAP2 POP PUSH1 SWAP1 POP MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH2 DUP2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 LT PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 ADD SWAP1 DUP2 SWAP1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND SWAP1 PUSH1 SWAP1 PUSH2 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SSTORE PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP2 SWAP1 SWAP2 SSTORE PUSH32 SWAP1 DUP4 SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH2 DUP2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP4 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO PUSH2 JUMPI PUSH1 DUP4 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 DUP1 SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP3 SWAP1 SWAP2 PUSH1 ADD SWAP1 MLOAD DUP1 DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 PUSH2 GAS SUB CALL POP POP POP PUSH1 DUP5 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 PUSH1 DUP2 ADD SLOAD DUP2 SLOAD PUSH32 SWAP5 POP CALLER SWAP4 DUP9 SWAP4 PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH1 ADD SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND DUP3 MSTORE PUSH1 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 DUP3 ADD DUP6 SWAP1 MSTORE DUP4 AND PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE DUP4 SLOAD PUSH1 PUSH2 PUSH1 DUP4 AND ISZERO MUL PUSH1 NOT ADD SWAP1 SWAP2 AND DIV SWAP2 DUP4 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 DUP4 ADD SWAP1 DUP5 SWAP1 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP SWAP7 POP POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 DUP4 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD PUSH20 NOT AND DUP2 SSTORE PUSH1 DUP2 ADD DUP3 SWAP1 SSTORE SWAP1 PUSH2 PUSH1 DUP4 ADD DUP3 PUSH2 JUMP JUMPDEST POP POP PUSH1 SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 CALLDATASIZE NUMBER PUSH1 MLOAD DUP1 DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP POP PUSH1 ADD SWAP2 POP PUSH1 SWAP1 POP MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH2 DUP2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI POP PUSH2 SSTORE JUMP JUMPDEST PUSH1 PUSH2 CALLER PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP5 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH32 CALLER DUP6 DUP8 DUP7 DUP7 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND DUP3 MSTORE PUSH1 DUP3 ADD DUP7 SWAP1 MSTORE DUP5 AND PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE SWAP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 DUP3 ADD DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP7 POP POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP5 DUP5 DUP5 PUSH1 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 PUSH2 GAS SUB CALL POP PUSH1 SWAP4 POP PUSH2 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 CALLDATASIZE NUMBER PUSH1 MLOAD DUP1 DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP POP PUSH1 ADD SWAP2 POP PUSH1 SWAP1 POP MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP2 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND OR DUP2 SSTORE PUSH1 DUP2 ADD DUP6 SWAP1 SSTORE PUSH2 SWAP1 PUSH1 ADD DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH32 DUP2 CALLER DUP7 DUP9 DUP8 DUP8 PUSH1 MLOAD DUP7 DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD DUP7 SWAP1 MSTORE DUP5 AND PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE SWAP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 DUP3 ADD DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP8 POP POP POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 DUP1 DUP3 ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST POP POP PUSH1 DUP3 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 DUP2 SHA3 PUSH1 DUP2 ADD SLOAD PUSH1 DUP5 SWAP1 EXP SWAP3 SWAP1 DUP4 AND GT ISZERO PUSH2 JUMPI DUP1 SLOAD PUSH1 SWAP1 DUP2 ADD DUP3 SSTORE DUP2 ADD DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE PUSH32 CALLER DUP6 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 CALLDATASIZE NUMBER PUSH1 MLOAD DUP1 DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP POP PUSH1 ADD SWAP2 POP PUSH1 SWAP1 POP MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH2 DUP2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 DUP3 SWAP1 SSTORE PUSH2 PUSH2 JUMP JUMPDEST PUSH32 DUP3 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP2 MSTORE PUSH2 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND DUP5 MSTORE PUSH2 SWAP1 SWAP3 MSTORE DUP3 SHA3 SLOAD DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP4 POP PUSH2 JUMP JUMPDEST DUP2 PUSH1 EXP SWAP1 POP DUP1 DUP4 PUSH1 ADD SLOAD AND PUSH1 EQ ISZERO PUSH2 JUMPI PUSH1 SWAP4 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP4 POP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 CALLDATASIZE NUMBER PUSH1 MLOAD DUP1 DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP POP PUSH1 ADD SWAP2 POP PUSH1 SWAP1 POP MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH2 DUP2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND SELFDESTRUCT JUMPDEST PUSH1 DUP1 CALLDATASIZE NUMBER PUSH1 MLOAD DUP1 DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP POP PUSH1 ADD SWAP2 POP PUSH1 SWAP1 POP MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH2 DUP2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP4 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP2 POP DUP2 ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP4 PUSH2 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP3 SWAP1 SSTORE SWAP2 DUP6 AND DUP2 MSTORE DUP2 SWAP1 SHA3 DUP4 SWAP1 SSTORE PUSH32 SWAP1 DUP6 SWAP1 DUP6 SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH2 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP2 DUP1 DUP3 ISZERO ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 DUP6 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD SWAP1 SWAP3 POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD DUP4 SSTORE PUSH1 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 SSTORE PUSH2 DUP1 SLOAD SWAP2 PUSH2 SWAP2 SWAP1 DUP4 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 ADD DUP2 SWAP1 SSTORE PUSH2 DUP1 SLOAD DUP8 SWAP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SSTORE JUMPDEST DUP3 PUSH1 EXP SWAP1 POP DUP1 DUP3 PUSH1 ADD SLOAD AND PUSH1 EQ ISZERO PUSH2 JUMPI PUSH32 CALLER DUP7 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP2 SLOAD PUSH1 SWAP1 GT PUSH2 JUMPI PUSH1 DUP6 DUP2 MSTORE PUSH2 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH2 DUP1 SLOAD SWAP1 SWAP2 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD DUP3 SWAP1 SSTORE DUP7 DUP3 MSTORE PUSH2 SWAP1 MSTORE PUSH1 DUP2 SHA3 DUP2 DUP2 SSTORE PUSH1 DUP1 DUP3 ADD DUP4 SWAP1 SSTORE PUSH1 SWAP1 SWAP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP4 POP PUSH2 JUMP JUMPDEST DUP2 SLOAD PUSH1 NOT ADD DUP3 SSTORE PUSH1 DUP3 ADD DUP1 SLOAD DUP3 OR SWAP1 SSTORE JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 SLOAD PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 ADD DUP2 SHA3 DUP1 SLOAD PUSH20 NOT AND DUP2 SSTORE PUSH1 DUP2 ADD DUP3 SWAP1 SSTORE SWAP1 PUSH2 PUSH1 DUP4 ADD DUP3 PUSH2 JUMP JUMPDEST POP POP PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 JUMPDEST PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI JUMPDEST PUSH1 SLOAD DUP2 LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 PUSH2 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 SWAP1 PUSH2 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT ADD SWAP1 SSTORE PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 SWAP1 PUSH2 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD ISZERO ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 PUSH2 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 SWAP1 PUSH2 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD PUSH1 DUP3 PUSH2 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SSTORE DUP1 PUSH2 PUSH1 PUSH1 DUP4 PUSH2 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 SLOAD PUSH2 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD SSTORE JUMPDEST PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLER PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 SLOAD PUSH2 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 PUSH2 SSTORE PUSH2 PUSH2 JUMP JUMPDEST PUSH2 SSTORE JUMPDEST PUSH2 SLOAD DUP3 DUP2 ADD LT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH2 SLOAD DUP3 PUSH2 SLOAD ADD GT ISZERO JUMPDEST ISZERO PUSH2 JUMPI POP PUSH2 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 SLOAD PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH2 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP1 SWAP2 ADD SLOAD DUP4 MSTORE DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 ADD DUP2 SHA3 DUP2 DUP2 SSTORE PUSH1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 ADD SSTORE JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 PUSH1 PUSH2 JUMP JUMPDEST PUSH3 TIMESTAMP DIV JUMPDEST SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV PUSH1 DUP3 SSTORE DUP1 PUSH1 LT PUSH2 JUMPI POP PUSH2 JUMP JUMPDEST PUSH1 ADD PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP3 DUP1 ADD PUSH1 NOT DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 SWAP2 POP PUSH2 JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 ISZERO GT PUSH2 JUMPI PUSH1 DUP4 DUP2 MSTORE PUSH1 SWAP1 SHA3 PUSH2 SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 DUP3 SSTORE SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xcb UNKNOWN_0xeb CALLDATASIZE DUP4 UNKNOWN_0xd4 MOD EQ UNKNOWN_0xe4 UNKNOWN_0xba SWAP9 UNKNOWN_0xd3 DUP1 UNKNOWN_0x28 NOT PUSH12 UNKNOWN_0xd6 CALL UNKNOWN_0xb9 BYTE NOT STOP UNKNOWN_0x29",
  "opcode_entropy": 4.794207981109614,
  "opcode_count": 3088,
  "unique_opcodes": 74,
  "byte_entropy": 5.917415212713278,
  "byte_60": 0.09509401339961097,
  "byte_40": 0.014912470283120812,
  "byte_52": 0.022476766803544414,
  "byte_04": 0.01361573373676248,
  "byte_36": 0.0028095958504430517,
  "byte_10": 0.010373892370866653,
  "byte_61": 0.06526907283336936,
  "byte_00": 0.03155392262805273,
  "byte_fb": 0.0008644910309055544,
  "byte_57": 0.023989626107629135,
  "byte_63": 0.004322455154527772,
  "byte_ff": 0.014912470283120812,
  "byte_7c": 0.001080613788631943,
  "byte_01": 0.06721417765290685,
  "byte_35": 0.004106332396801383,
  "byte_16": 0.012535119948130538,
  "byte_17": 0.0012967365463583316,
  "byte_38": 0.0008644910309055544,
  "byte_25": 0.0004322455154527772,
  "byte_d9": 0.0002161227577263886,
  "byte_81": 0.03241841365895829,
  "byte_14": 0.0045385779122541605,
  "byte_4b": 0.0017289820618111088,
  "byte_80": 0.03155392262805273,
  "byte_2f": 0.0019451048195374973,
  "byte_54": 0.017722066133563863,
  "byte_bf": 0.0008644910309055544,
  "byte_6e": 0.0006483682731791658,
  "byte_6a": 0.0006483682731791658,
  "byte_41": 0.0008644910309055544,
  "byte_23": 0.0002161227577263886,
  "byte_cb": 0.0012967365463583316,
  "byte_6b": 0.0006483682731791658,
  "byte_9d": 0.0004322455154527772,
  "byte_37": 0.0034579641236222175,
  "byte_50": 0.03263453641668468,
  "byte_93": 0.0023773503349902745,
  "byte_c2": 0.0012967365463583316,
  "byte_fd": 0.004322455154527772,
  "byte_4d": 0.0004322455154527772,
  "byte_d5": 0.0006483682731791658,
  "byte_5c": 0.0008644910309055544,
  "byte_f5": 0.001080613788631943,
  "byte_e8": 0.0004322455154527772,
  "byte_65": 0.0008644910309055544,
  "byte_90": 0.04300842878755133,
  "byte_e7": 0.0008644910309055544,
  "byte_70": 0.0002161227577263886,
  "byte_48": 0.0002161227577263886,
  "byte_02": 0.02139615301491247,
  "byte_0e": 0.004754700669980549,
  "byte_74": 0.0002161227577263886,
  "byte_6c": 0.0008644910309055544,
  "byte_91": 0.02139615301491247,
  "byte_71": 0.0006483682731791658,
  "byte_2d": 0.001080613788631943,
  "byte_79": 0.0006483682731791658,
  "byte_7a": 0.001080613788631943,
  "byte_f6": 0.001080613788631943,
  "byte_27": 0.0006483682731791658,
  "byte_b2": 0.0004322455154527772,
  "byte_0d": 0.002161227577263886,
  "byte_30": 0.0006483682731791658,
  "byte_a9": 0.0008644910309055544,
  "byte_56": 0.02139615301491247,
  "byte_b6": 0.0006483682731791658,
  "byte_1d": 0.0004322455154527772,
  "byte_b7": 0.0008644910309055544,
  "byte_7d": 0.0006483682731791658,
  "byte_c6": 0.0004322455154527772,
  "byte_9b": 0.0019451048195374973,
  "byte_ba": 0.0006483682731791658,
  "byte_51": 0.01059001512859304,
  "byte_a6": 0.0006483682731791658,
  "byte_df": 0.0006483682731791658,
  "byte_b1": 0.0006483682731791658,
  "byte_cf": 0.0004322455154527772,
  "byte_73": 0.0015128593040847202,
  "byte_26": 0.0004322455154527772,
  "byte_c7": 0.001080613788631943,
  "byte_f0": 0.0012967365463583316,
  "byte_b0": 0.002161227577263886,
  "byte_c0": 0.001080613788631943,
  "byte_e9": 0.0004322455154527772,
  "byte_5d": 0.0008644910309055544,
  "byte_03": 0.017938188891290254,
  "byte_08": 0.0012967365463583316,
  "byte_f1": 0.0015128593040847202,
  "byte_6d": 0.0004322455154527772,
  "byte_86": 0.0023773503349902745,
  "byte_5b": 0.03652474605575967,
  "byte_34": 0.004322455154527772,
  "byte_11": 0.006267559974065269,
  "byte_15": 0.020963907499459693,
  "byte_49": 0.0030257186081694403,
  "byte_7f": 0.0023773503349902745,
  "byte_e1": 0.0004322455154527772,
  "byte_fc": 0.0004322455154527772,
  "byte_c4": 0.0004322455154527772,
  "byte_92": 0.006699805489518046,
  "byte_3d": 0.0006483682731791658,
  "byte_b5": 0.0012967365463583316,
  "byte_59": 0.0008644910309055544,
  "byte_f4": 0.001080613788631943,
  "byte_d2": 0.0006483682731791658,
  "byte_9a": 0.0008644910309055544,
  "byte_8b": 0.0008644910309055544,
  "byte_da": 0.001080613788631943,
  "byte_eb": 0.001080613788631943,
  "byte_3c": 0.0004322455154527772,
  "byte_46": 0.0006483682731791658,
  "byte_07": 0.003241841365895829,
  "byte_2c": 0.0006483682731791658,
  "byte_c9": 0.0006483682731791658,
  "byte_9c": 0.0006483682731791658,
  "byte_33": 0.002593473092716663,
  "byte_a0": 0.010373892370866653,
  "byte_0a": 0.010157769613140263,
  "byte_82": 0.022044521288091635,
  "byte_20": 0.022044521288091635,
  "byte_a1": 0.0030257186081694403,
  "byte_75": 0.0004322455154527772,
  "byte_89": 0.0006483682731791658,
  "byte_f3": 0.0008644910309055544,
  "byte_a8": 0.0006483682731791658,
  "byte_cd": 0.0012967365463583316,
  "byte_e0": 0.0002161227577263886,
  "byte_64": 0.0006483682731791658,
  "byte_06": 0.002593473092716663,
  "byte_19": 0.002161227577263886,
  "byte_05": 0.004322455154527772,
  "byte_a4": 0.0004322455154527772,
  "byte_aa": 0.001080613788631943,
  "byte_c8": 0.0008644910309055544,
  "byte_77": 0.0006483682731791658,
  "byte_24": 0.0008644910309055544,
  "byte_44": 0.0004322455154527772,
  "byte_09": 0.003674086881348606,
  "byte_f7": 0.001080613788631943,
  "byte_bc": 0.0002161227577263886,
  "byte_0b": 0.0023773503349902745,
  "byte_13": 0.0006483682731791658,
  "byte_ca": 0.0006483682731791658,
  "byte_0c": 0.0030257186081694403,
  "byte_d1": 0.001080613788631943,
  "byte_43": 0.002161227577263886,
  "byte_84": 0.010157769613140263,
  "byte_83": 0.014264102009941647,
  "byte_6f": 0.0002161227577263886,
  "byte_d8": 0.0019451048195374973,
  "byte_2a": 0.0012967365463583316,
  "byte_af": 0.0004322455154527772,
  "byte_fe": 0.003674086881348606,
  "byte_55": 0.010373892370866653,
  "byte_e3": 0.0006483682731791658,
  "byte_b8": 0.0006483682731791658,
  "byte_58": 0.0006483682731791658,
  "byte_76": 0.0004322455154527772,
  "byte_ad": 0.0006483682731791658,
  "byte_bb": 0.0006483682731791658,
  "byte_ef": 0.001080613788631943,
  "byte_88": 0.0008644910309055544,
  "byte_3f": 0.0006483682731791658,
  "byte_d6": 0.0008644910309055544,
  "byte_3a": 0.0006483682731791658,
  "byte_18": 0.0002161227577263886,
  "byte_9e": 0.0008644910309055544,
  "byte_e4": 0.001080613788631943,
  "byte_ee": 0.0004322455154527772,
  "byte_fa": 0.0008644910309055544,
  "byte_1b": 0.0004322455154527772,
  "byte_3e": 0.0006483682731791658,
  "byte_99": 0.0002161227577263886,
  "byte_4a": 0.0004322455154527772,
  "byte_66": 0.001080613788631943,
  "byte_87": 0.0028095958504430517,
  "byte_69": 0.0002161227577263886,
  "byte_d3": 0.0006483682731791658,
  "byte_85": 0.003674086881348606,
  "byte_98": 0.0004322455154527772,
  "byte_39": 0.0006483682731791658,
  "byte_32": 0.001080613788631943,
  "byte_e5": 0.0006483682731791658,
  "byte_b4": 0.0002161227577263886,
  "byte_c3": 0.0002161227577263886,
  "byte_1f": 0.0019451048195374973,
  "byte_3b": 0.0008644910309055544,
  "byte_96": 0.001080613788631943,
  "byte_5a": 0.0006483682731791658,
  "byte_1a": 0.0008644910309055544,
  "byte_b9": 0.001080613788631943,
  "byte_dc": 0.0004322455154527772,
  "byte_28": 0.0006483682731791658,
  "byte_94": 0.0004322455154527772,
  "byte_0f": 0.0038902096390749947,
  "byte_d4": 0.0006483682731791658,
  "byte_31": 0.0004322455154527772,
  "byte_8d": 0.0002161227577263886,
  "byte_4c": 0.0004322455154527772,
  "byte_53": 0.0004322455154527772,
  "byte_ae": 0.0004322455154527772,
  "byte_d0": 0.0008644910309055544,
  "byte_d7": 0.0004322455154527772,
  "byte_95": 0.0004322455154527772,
  "byte_9f": 0.001080613788631943,
  "byte_f2": 0.0002161227577263886,
  "byte_8a": 0.0004322455154527772,
  "byte_c5": 0.0006483682731791658,
  "byte_97": 0.0002161227577263886,
  "byte_7e": 0.0004322455154527772,
  "byte_47": 0.0002161227577263886,
  "byte_8e": 0.0004322455154527772,
  "byte_ac": 0.0002161227577263886,
  "byte_bd": 0.0004322455154527772,
  "byte_21": 0.0004322455154527772,
  "byte_ea": 0.0002161227577263886,
  "byte_5f": 0.0004322455154527772,
  "byte_f9": 0.0004322455154527772,
  "byte_45": 0.0002161227577263886,
  "byte_4f": 0.0002161227577263886,
  "byte_a5": 0.0002161227577263886,
  "byte_8f": 0.0002161227577263886,
  "byte_de": 0.0002161227577263886,
  "byte_be": 0.0002161227577263886,
  "byte_cc": 0.0004322455154527772,
  "byte_f8": 0.0002161227577263886,
  "byte_c1": 0.0002161227577263886,
  "byte_1c": 0.0002161227577263886,
  "byte_e2": 0.0002161227577263886,
  "byte_29": 0.0004322455154527772,
  "byte_62": 0.0006483682731791658,
  "byte_b3": 0.0002161227577263886,
  "byte_42": 0.0002161227577263886,
  "byte_68": 0.0002161227577263886,
  "byte_ce": 0.0002161227577263886,
  "byte_72": 0.0002161227577263886,
  "byte_e6": 0.0002161227577263886,
  "num_nodes": 4,
  "num_edges": 4,
  "avg_degree": 2.0,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 8,
  "event_nums": 6,
  "creation_block": 4759332,
  "creation_timestamp": 1513677127,
  "life_time": 4660.0,
  "duration_seconds": 72937.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 5,
  "num_buyers": 3,
  "num_sellers": 3,
  "num_creator_transfers": 2,
  "buy_amt": 2e+17,
  "sell_amt": 4e+17,
  "avg_value": 6.6666666666666664e+16,
  "txn_per_block": 0.0017163698777086461,
  "avg_gas_limit": 2410950.625,
  "std_gas_limit": 1018308.0193250637,
  "avg_gas_used": 236059.375,
  "std_gas_used": 491898.2112352965,
  "avg_gas_price": 25750000000.0,
  "std_gas_price": 15029138365.189137,
  "deposit_num": 1,
  "singletransact_num": 1,
  "confirmation_num": 2,
  "confirmationneeded_num": 1,
  "multitransact_num": 1,
  "execute_num": 2,
  "confirm_num": 1,
  "timeline_sequence": [
    [
      4759332,
      1513677127,
      0,
      119,
      0,
      1529491,
      40000000000,
      0,
      1,
      5235180,
      1529491,
      18361919
    ],
    [
      4763032,
      1513734792,
      1,
      118,
      200000000000000000,
      21000,
      33000000000,
      1,
      0,
      4440518,
      21000,
      18358219
    ],
    [
      4763280,
      1513738940,
      2,
      119,
      200000000000000000,
      3000000,
      33000000000,
      0,
      1,
      3244241,
      22475,
      18357971
    ],
    [
      4763343,
      1513739956,
      3,
      12,
      0,
      3000000,
      33500000000,
      0,
      1,
      1244795,
      91163,
      18357908
    ],
    [
      4763397,
      1513740694,
      0,
      48,
      0,
      3000000,
      33000000000,
      0,
      1,
      1725484,
      174374,
      18357854
    ],
    [
      4763992,
      1513750064,
      4,
      69,
      0,
      3000000,
      33500000000,
      0,
      1,
      2327344,
      49972,
      18357259
    ],
    [
      4763343,
      1513739956,
      0,
      0,
      100000000000000000,
      2863514,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4763992,
      1513750064,
      0,
      0,
      100000000000000000,
      2873600,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "//sol Wallet\n// Multi-sig, daily-limited account proxy/wallet.\n// @authors:\n// Gav Wood <g@ethdev.com>\n// inheritable \"property\" contract that enables methods to be protected by requiring the acquiescence of either a\n// single, or, crucially, each of a number of, designated owners.\n// usage:\n// use modifiers onlyowner (just own owned) or onlymanyowners(hash), whereby the same hash must be provided by\n// some number (specified in constructor) of the set of owners (specified in the constructor, modifiable) before the\n// interior is executed.\ncontract multiowned {\n\n    // TYPES\n\n    // struct for the status of a pending operation.\n    struct PendingState {\n        uint yetNeeded;\n        uint ownersDone;\n        uint index;\n    }\n\n    // EVENTS\n\n    // this contract only has five types of events: it can accept a confirmation, in which case\n    // we record owner and operation (hash) alongside it.\n    event Confirmation(address owner, bytes32 operation);\n    event Revoke(address owner, bytes32 operation);\n    // some others are in the case of an owner changing.\n    event OwnerChanged(address oldOwner, address newOwner);\n    event OwnerAdded(address newOwner);\n    event OwnerRemoved(address oldOwner);\n    // the last one is emitted if the required signatures change\n    event RequirementChanged(uint newRequirement);\n\n    // MODIFIERS\n\n    // simple single-sig function modifier.\n    modifier onlyowner {\n        if (isOwner(msg.sender))\n            _;\n    }\n    // multi-sig function modifier: the operation must have an intrinsic hash in order\n    // that later attempts can be realised as the same underlying operation and\n    // thus count as confirmations.\n    modifier onlymanyowners(bytes32 _operation) {\n        if (confirmAndCheck(_operation))\n            _;\n    }\n\n    // METHODS\n\n    // constructor is given number of sigs required to do protected \"onlymanyowners\" transactions\n    // as well as the selection of addresses capable of confirming them.\n    function multiowned(address[] _owners, uint _required) {\n        m_numOwners = _owners.length + 1;\n        m_owners[1] = uint(msg.sender);\n        m_ownerIndex[uint(msg.sender)] = 1;\n        for (uint i = 0; i < _owners.length; ++i)\n        {\n            m_owners[2 + i] = uint(_owners[i]);\n            m_ownerIndex[uint(_owners[i])] = 2 + i;\n        }\n        m_required = _required;\n    }\n    \n    // Revokes a prior confirmation of the given operation\n    function revoke(bytes32 _operation) external {\n        uint ownerIndex = m_ownerIndex[uint(msg.sender)];\n        // make sure they're an owner\n        if (ownerIndex == 0) return;\n        uint ownerIndexBit = 2**ownerIndex;\n        var pending = m_pending[_operation];\n        if (pending.ownersDone & ownerIndexBit > 0) {\n            pending.yetNeeded++;\n            pending.ownersDone -= ownerIndexBit;\n            Revoke(msg.sender, _operation);\n        }\n    }\n    \n    // Replaces an owner `_from` with another `_to`.\n    function changeOwner(address _from, address _to) onlymanyowners(sha3(msg.data, block.number)) external {\n        if (isOwner(_to)) return;\n        uint ownerIndex = m_ownerIndex[uint(_from)];\n        if (ownerIndex == 0) return;\n\n        clearPending();\n        m_owners[ownerIndex] = uint(_to);\n        m_ownerIndex[uint(_from)] = 0;\n        m_ownerIndex[uint(_to)] = ownerIndex;\n        OwnerChanged(_from, _to);\n    }\n    \n    function addOwner(address _owner) onlymanyowners(sha3(msg.data, block.number)) external {\n        if (isOwner(_owner)) return;\n\n        clearPending();\n        if (m_numOwners >= c_maxOwners)\n            reorganizeOwners();\n        if (m_numOwners >= c_maxOwners)\n            return;\n        m_numOwners++;\n        m_owners[m_numOwners] = uint(_owner);\n        m_ownerIndex[uint(_owner)] = m_numOwners;\n        OwnerAdded(_owner);\n    }\n    \n    function removeOwner(address _owner) onlymanyowners(sha3(msg.data, block.number)) external {\n        uint ownerIndex = m_ownerIndex[uint(_owner)];\n        if (ownerIndex == 0) return;\n        if (m_required > m_numOwners - 1) return;\n\n        m_owners[ownerIndex] = 0;\n        m_ownerIndex[uint(_owner)] = 0;\n        clearPending();\n        reorganizeOwners(); //make sure m_numOwner is equal to the number of owners and always points to the optimal free slot\n        OwnerRemoved(_owner);\n    }\n    \n    function changeRequirement(uint _newRequired) onlymanyowners(sha3(msg.data, block.number)) external {\n        if (_newRequired > m_numOwners) return;\n        m_required = _newRequired;\n        clearPending();\n        RequirementChanged(_newRequired);\n    }\n    \n    function isOwner(address _addr) returns (bool) {\n        return m_ownerIndex[uint(_addr)] > 0;\n    }\n    \n    function hasConfirmed(bytes32 _operation, address _owner) constant returns (bool) {\n        var pending = m_pending[_operation];\n        uint ownerIndex = m_ownerIndex[uint(_owner)];\n\n        // make sure they're an owner\n        if (ownerIndex == 0) return false;\n\n        // determine the bit to set for this owner.\n        uint ownerIndexBit = 2**ownerIndex;\n        if (pending.ownersDone & ownerIndexBit == 0) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n    \n    // INTERNAL METHODS\n\n    function confirmAndCheck(bytes32 _operation) internal returns (bool) {\n        // determine what index the present sender is:\n        uint ownerIndex = m_ownerIndex[uint(msg.sender)];\n        // make sure they're an owner\n        if (ownerIndex == 0) return;\n\n        var pending = m_pending[_operation];\n        // if we're not yet working on this operation, switch over and reset the confirmation status.\n        if (pending.yetNeeded == 0) {\n            // reset count of confirmations needed.\n            pending.yetNeeded = m_required;\n            // reset which owners have confirmed (none) - set our bitmap to 0.\n            pending.ownersDone = 0;\n            pending.index = m_pendingIndex.length++;\n            m_pendingIndex[pending.index] = _operation;\n        }\n        // determine the bit to set for this owner.\n        uint ownerIndexBit = 2**ownerIndex;\n        // make sure we (the message sender) haven't confirmed this operation previously.\n        if (pending.ownersDone & ownerIndexBit == 0) {\n            Confirmation(msg.sender, _operation);\n            // ok - check if count is enough to go ahead.\n            if (pending.yetNeeded <= 1) {\n                // enough confirmations: reset and run interior.\n                delete m_pendingIndex[m_pending[_operation].index];\n                delete m_pending[_operation];\n                return true;\n            }\n            else\n            {\n                // not enough: record that this owner in particular confirmed.\n                pending.yetNeeded--;\n                pending.ownersDone |= ownerIndexBit;\n            }\n        }\n    }\n\n    function reorganizeOwners() private returns (bool) {\n        uint free = 1;\n        while (free < m_numOwners)\n        {\n            while (free < m_numOwners && m_owners[free] != 0) free++;\n            while (m_numOwners > 1 && m_owners[m_numOwners] == 0) m_numOwners--;\n            if (free < m_numOwners && m_owners[m_numOwners] != 0 && m_owners[free] == 0)\n            {\n                m_owners[free] = m_owners[m_numOwners];\n                m_ownerIndex[m_owners[free]] = free;\n                m_owners[m_numOwners] = 0;\n            }\n        }\n    }\n    \n    function clearPending() internal {\n        uint length = m_pendingIndex.length;\n        for (uint i = 0; i < length; ++i)\n            if (m_pendingIndex[i] != 0)\n                delete m_pending[m_pendingIndex[i]];\n        delete m_pendingIndex;\n    }\n        \n    // FIELDS\n\n    // the number of owners that must confirm the same operation before it is run.\n    uint public m_required;\n    // pointer used to find a free slot in m_owners\n    uint public m_numOwners;\n    \n    // list of owners\n    uint[256] m_owners;\n    uint constant c_maxOwners = 250;\n    // index on the list of owners to allow reverse lookup\n    mapping(uint => uint) m_ownerIndex;\n    // the ongoing operations.\n    mapping(bytes32 => PendingState) m_pending;\n    bytes32[] m_pendingIndex;\n}\n\n// inheritable \"property\" contract that enables methods to be protected by placing a linear limit (specifiable)\n// on a particular resource per calendar day. is multiowned to allow the limit to be altered. resource that method\n// uses is specified in the modifier.\ncontract daylimit is multiowned {\n\n    // MODIFIERS\n\n    // simple modifier for daily limit.\n    modifier limitedDaily(uint _value) {\n        if (underLimit(_value))\n            _;\n    }\n\n    // METHODS\n\n    // constructor - stores initial daily limit and records the present day's index.\n    function daylimit(uint _limit) {\n        m_dailyLimit = _limit;\n        m_lastDay = today();\n    }\n    // (re)sets the daily limit. needs many of the owners to confirm. doesn't alter the amount already spent today.\n    function setDailyLimit(uint _newLimit) onlymanyowners(sha3(msg.data, block.number)) external {\n        m_dailyLimit = _newLimit;\n    }\n    // (re)sets the daily limit. needs many of the owners to confirm. doesn't alter the amount already spent today.\n    function resetSpentToday() onlymanyowners(sha3(msg.data, block.number)) external {\n        m_spentToday = 0;\n    }\n    \n    // INTERNAL METHODS\n    \n    // checks to see if there is at least `_value` left from the daily limit today. if there is, subtracts it and\n    // returns true. otherwise just returns false.\n    function underLimit(uint _value) internal onlyowner returns (bool) {\n        // reset the spend limit if we're on a different day to last time.\n        if (today() > m_lastDay) {\n            m_spentToday = 0;\n            m_lastDay = today();\n        }\n        // check to see if there's enough left - if so, subtract and return true.\n        if (m_spentToday + _value >= m_spentToday && m_spentToday + _value <= m_dailyLimit) {\n            m_spentToday += _value;\n            return true;\n        }\n        return false;\n    }\n    // determines today's index.\n    function today() private constant returns (uint) { return now / 1 days; }\n\n    // FIELDS\n\n    uint public m_dailyLimit;\n    uint public m_spentToday;\n    uint public m_lastDay;\n}\n\n// interface contract for multisig proxy contracts; see below for docs.\ncontract multisig {\n\n    // EVENTS\n\n    // logged events:\n    // Funds has arrived into the wallet (record how much).\n    event Deposit(address from, uint value);\n    // Single transaction going out of the wallet (record who signed for it, how much, and to whom it's going).\n    event SingleTransact(address owner, uint value, address to, bytes data);\n    // Multi-sig transaction going out of the wallet (record who signed for it last, the operation hash, how much, and to whom it's going).\n    event MultiTransact(address owner, bytes32 operation, uint value, address to, bytes data);\n    // Confirmation still needed for a transaction.\n    event ConfirmationNeeded(bytes32 operation, address initiator, uint value, address to, bytes data);\n    \n    // FUNCTIONS\n    \n    // TODO: document\n    function changeOwner(address _from, address _to) external;\n    function execute(address _to, uint _value, bytes _data) external returns (bytes32);\n    function confirm(bytes32 _h) returns (bool);\n}\n\n// usage:\n// bytes32 h = Wallet(w).from(oneOwner).transact(to, value, data);\n// Wallet(w).from(anotherOwner).confirm(h);\ncontract Wallet is multisig, multiowned, daylimit {\n\n    uint public version = 2;\n\n    // TYPES\n\n    // Transaction structure to remember details of transaction lest it need be saved for a later call.\n    struct Transaction {\n        address to;\n        uint value;\n        bytes data;\n    }\n\n    // METHODS\n\n    // constructor - just pass on the owner array to the multiowned and\n    // the limit to daylimit\n    function Wallet(address[] _owners, uint _required, uint _daylimit)\n            multiowned(_owners, _required) daylimit(_daylimit) {\n    }\n    \n    // kills the contract sending everything to `_to`.\n    function kill(address _to) onlymanyowners(sha3(msg.data, block.number)) external {\n        suicide(_to);\n    }\n    \n    // gets called when no other function matches\n    function() payable {\n        // just being sent some cash?\n        if (msg.value > 0)\n            Deposit(msg.sender, msg.value);\n    }\n    \n    // Outside-visible transact entry point. Executes transacion immediately if below daily spend limit.\n    // If not, goes into multisig process. We provide a hash on return to allow the sender to provide\n    // shortcuts for the other confirmations (allowing them to avoid replicating the _to, _value\n    // and _data arguments). They still get the option of using them if they want, anyways.\n    function execute(address _to, uint _value, bytes _data) external onlyowner returns (bytes32 _r) {\n        // first, take the opportunity to check that we're under the daily limit.\n        if (underLimit(_value)) {\n            SingleTransact(msg.sender, _value, _to, _data);\n            // yes - just execute the call.\n            _to.call.value(_value)(_data);\n            return 0;\n        }\n        // determine our operation hash.\n        _r = sha3(msg.data, block.number);\n        if (!confirm(_r) && m_txs[_r].to == 0) {\n            m_txs[_r].to = _to;\n            m_txs[_r].value = _value;\n            m_txs[_r].data = _data;\n            ConfirmationNeeded(_r, msg.sender, _value, _to, _data);\n        }\n    }\n    \n    // confirm a transaction through just the hash. we use the previous transactions map, m_txs, in order\n    // to determine the body of the transaction from the hash provided.\n    function confirm(bytes32 _h) onlymanyowners(_h) returns (bool) {\n        if (m_txs[_h].to != 0) {\n            m_txs[_h].to.call.value(m_txs[_h].value)(m_txs[_h].data);\n            MultiTransact(msg.sender, _h, m_txs[_h].value, m_txs[_h].to, m_txs[_h].data);\n            delete m_txs[_h];\n            return true;\n        }\n    }\n    \n    // INTERNAL METHODS\n    \n    function clearPending() internal {\n        uint length = m_pendingIndex.length;\n        for (uint i = 0; i < length; ++i)\n            delete m_txs[m_pendingIndex[i]];\n        super.clearPending();\n    }\n\n    // FIELDS\n\n    // pending transactions we have at present.\n    mapping (bytes32 => Transaction) m_txs;\n}"
}