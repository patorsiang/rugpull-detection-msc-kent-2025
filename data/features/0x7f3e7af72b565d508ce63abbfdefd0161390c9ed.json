{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLVALUE EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 PUSH2 JUMP JUMPDEST CALLER PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 SLOAD NUMBER ADD PUSH1 DUP2 SWAP1 SSTORE POP PUSH32 PUSH1 SLOAD CALLER PUSH1 SLOAD PUSH1 SLOAD PUSH1 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 ADD DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP5 POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 NUMBER PUSH1 SLOAD LT ISZERO SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH3 NUMBER ADD PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP1 PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP1 PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP NUMBER PUSH1 SLOAD LT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 ADDRESS PUSH20 AND BALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 NUMBER SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 NUMBER PUSH1 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST NUMBER PUSH1 SLOAD SUB SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH2 CALLER PUSH2 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP1 PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP1 PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH20 AND PUSH2 PUSH1 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 CALLVALUE GT ISZERO PUSH2 JUMPI CALLER PUSH20 AND PUSH2 PUSH1 CALLVALUE SUB SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP PUSH1 DUP2 EQ ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND PUSH2 DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH32 DUP3 DUP3 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 DUP2 GT ISZERO PUSH2 JUMPI PUSH32 PUSH1 SLOAD PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP4 PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST JUMP JUMPDEST PUSH1 PUSH1 SLOAD EQ ISZERO PUSH2 JUMPI CALLVALUE PUSH1 DUP2 SWAP1 SSTORE POP CALLER PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 SLOAD CALLER PUSH1 SLOAD PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD EQ ISZERO PUSH2 JUMPI CALLVALUE PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 SLOAD CALLER PUSH1 SLOAD PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLVALUE MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMP JUMPDEST PUSH2 PUSH1 CALLVALUE MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 CALLVALUE MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 CALLVALUE MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP JUMPDEST JUMP STOP LOG1 PUSH6 SHA3 EXTCODEHASH UNKNOWN_0xaf BYTE UNKNOWN_0xbd EXTCODECOPY UNKNOWN_0xc7 UNKNOWN_0xaa PUSH7 UNKNOWN_0xba PUSH4 DUP13 INVALID_0x79",
  "opcode_entropy": 4.743143036818929,
  "opcode_count": 2448,
  "unique_opcodes": 65,
  "byte_entropy": 4.827675162575177,
  "byte_60": 0.060570762958648806,
  "byte_40": 0.0089303047951854,
  "byte_52": 0.0085420306736556,
  "byte_36": 0.0007765482430596001,
  "byte_15": 0.019996117258784703,
  "byte_61": 0.0401863715783343,
  "byte_01": 0.022325761987963502,
  "byte_3c": 0.0007765482430596001,
  "byte_57": 0.016113376043486703,
  "byte_00": 0.0370801786060959,
  "byte_35": 0.0019413706076490001,
  "byte_7c": 0.00019413706076490002,
  "byte_90": 0.0357212191807416,
  "byte_04": 0.009900990099009901,
  "byte_63": 0.0052417006406523005,
  "byte_ff": 0.32459716559891283,
  "byte_16": 0.017666472529605903,
  "byte_80": 0.025431954960201904,
  "byte_0c": 0.0027179188507086,
  "byte_0e": 0.0038827412152980002,
  "byte_f2": 0.00038827412152980003,
  "byte_b0": 0.0009706853038245001,
  "byte_14": 0.007377208309066201,
  "byte_48": 0.00019413706076490002,
  "byte_0f": 0.0023296447291788003,
  "byte_76": 0.00038827412152980003,
  "byte_c1": 0.00019413706076490002,
  "byte_75": 0.00038827412152980003,
  "byte_fe": 0.0009706853038245001,
  "byte_f9": 0.0005824111822947001,
  "byte_95": 0.00038827412152980003,
  "byte_9e": 0.0007765482430596001,
  "byte_1e": 0.00019413706076490002,
  "byte_fb": 0.0007765482430596001,
  "byte_17": 0.0027179188507086,
  "byte_ee": 0.0007765482430596001,
  "byte_b3": 0.00038827412152980003,
  "byte_20": 0.011842360706658901,
  "byte_f3": 0.0027179188507086,
  "byte_d4": 0.00038827412152980003,
  "byte_13": 0.0005824111822947001,
  "byte_ec": 0.0007765482430596001,
  "byte_cd": 0.00038827412152980003,
  "byte_4c": 0.00038827412152980003,
  "byte_c4": 0.00038827412152980003,
  "byte_02": 0.010677538342069502,
  "byte_3e": 0.00038827412152980003,
  "byte_21": 0.00038827412152980003,
  "byte_4e": 0.0005824111822947001,
  "byte_96": 0.0009706853038245001,
  "byte_6a": 0.0005824111822947001,
  "byte_44": 0.00038827412152980003,
  "byte_a3": 0.00038827412152980003,
  "byte_bb": 0.00038827412152980003,
  "byte_82": 0.007377208309066201,
  "byte_ef": 0.00019413706076490002,
  "byte_ea": 0.0007765482430596001,
  "byte_6e": 0.0005824111822947001,
  "byte_cc": 0.00038827412152980003,
  "byte_64": 0.00038827412152980003,
  "byte_d6": 0.00019413706076490002,
  "byte_a9": 0.0009706853038245001,
  "byte_5f": 0.00038827412152980003,
  "byte_e1": 0.0007765482430596001,
  "byte_6f": 0.0007765482430596001,
  "byte_d9": 0.00038827412152980003,
  "byte_03": 0.010483401281304601,
  "byte_0d": 0.0027179188507086,
  "byte_71": 0.0005824111822947001,
  "byte_c8": 0.00038827412152980003,
  "byte_e3": 0.00038827412152980003,
  "byte_33": 0.0033003300330033004,
  "byte_73": 0.0165016501650165,
  "byte_29": 0.0005824111822947001,
  "byte_77": 0.0007765482430596001,
  "byte_e7": 0.00019413706076490002,
  "byte_41": 0.0005824111822947001,
  "byte_88": 0.0025237817899437004,
  "byte_8d": 0.0007765482430596001,
  "byte_08": 0.0038827412152980002,
  "byte_6d": 0.0005824111822947001,
  "byte_a4": 0.0005824111822947001,
  "byte_92": 0.0019413706076490001,
  "byte_5c": 0.00019413706076490002,
  "byte_ca": 0.00038827412152980003,
  "byte_a7": 0.00038827412152980003,
  "byte_97": 0.00038827412152980003,
  "byte_55": 0.0067947971267715,
  "byte_10": 0.0011648223645894002,
  "byte_f4": 0.00038827412152980003,
  "byte_a1": 0.0021355076684139,
  "byte_4b": 0.00038827412152980003,
  "byte_a6": 0.0007765482430596001,
  "byte_da": 0.00038827412152980003,
  "byte_4a": 0.00019413706076490002,
  "byte_09": 0.0019413706076490001,
  "byte_38": 0.00038827412152980003,
  "byte_83": 0.004659289458357601,
  "byte_18": 0.00038827412152980003,
  "byte_d5": 0.00019413706076490002,
  "byte_f7": 0.0009706853038245001,
  "byte_59": 0.00019413706076490002,
  "byte_e2": 0.00038827412152980003,
  "byte_98": 0.00019413706076490002,
  "byte_de": 0.00038827412152980003,
  "byte_8f": 0.00038827412152980003,
  "byte_05": 0.0038827412152980002,
  "byte_07": 0.0027179188507086,
  "byte_fc": 0.0013589594253543,
  "byte_06": 0.0036886041545331006,
  "byte_d2": 0.00038827412152980003,
  "byte_5b": 0.037274315666860805,
  "byte_45": 0.0005824111822947001,
  "byte_56": 0.014948553678897301,
  "byte_34": 0.0064065230052417,
  "byte_53": 0.0005824111822947001,
  "byte_fd": 0.0067947971267715,
  "byte_89": 0.0017472335468841002,
  "byte_51": 0.009318578916715201,
  "byte_81": 0.0207726655018443,
  "byte_91": 0.007959619491360901,
  "byte_50": 0.0314502038439138,
  "byte_b1": 0.00019413706076490002,
  "byte_bd": 0.00038827412152980003,
  "byte_be": 0.00019413706076490002,
  "byte_f8": 0.00038827412152980003,
  "byte_28": 0.00019413706076490002,
  "byte_49": 0.00038827412152980003,
  "byte_ae": 0.00019413706076490002,
  "byte_b6": 0.0005824111822947001,
  "byte_ed": 0.00038827412152980003,
  "byte_d7": 0.00019413706076490002,
  "byte_df": 0.00038827412152980003,
  "byte_0b": 0.0023296447291788003,
  "byte_a5": 0.0005824111822947001,
  "byte_0a": 0.011454086585129102,
  "byte_26": 0.00019413706076490002,
  "byte_2f": 0.00038827412152980003,
  "byte_72": 0.0007765482430596001,
  "byte_3a": 0.00019413706076490002,
  "byte_9d": 0.0007765482430596001,
  "byte_5a": 0.00038827412152980003,
  "byte_b2": 0.00038827412152980003,
  "byte_84": 0.0015530964861192001,
  "byte_ce": 0.0009706853038245001,
  "byte_2c": 0.00038827412152980003,
  "byte_8e": 0.00019413706076490002,
  "byte_9b": 0.00019413706076490002,
  "byte_dc": 0.00038827412152980003,
  "byte_e9": 0.00038827412152980003,
  "byte_f1": 0.0011648223645894002,
  "byte_12": 0.0021355076684139,
  "byte_af": 0.0005824111822947001,
  "byte_f6": 0.00019413706076490002,
  "byte_54": 0.012618908949718502,
  "byte_9f": 0.0007765482430596001,
  "byte_8a": 0.0007765482430596001,
  "byte_ad": 0.00038827412152980003,
  "byte_b8": 0.00038827412152980003,
  "byte_19": 0.0025237817899437004,
  "byte_43": 0.0015530964861192001,
  "byte_7f": 0.0009706853038245001,
  "byte_70": 0.00038827412152980003,
  "byte_22": 0.00019413706076490002,
  "byte_1f": 0.0005824111822947001,
  "byte_31": 0.00038827412152980003,
  "byte_87": 0.00038827412152980003,
  "byte_cb": 0.00019413706076490002,
  "byte_2d": 0.00019413706076490002,
  "byte_37": 0.00038827412152980003,
  "byte_cf": 0.00019413706076490002,
  "byte_3d": 0.00019413706076490002,
  "byte_9c": 0.00019413706076490002,
  "byte_d1": 0.00019413706076490002,
  "byte_c5": 0.00019413706076490002,
  "byte_85": 0.0009706853038245001,
  "byte_94": 0.00019413706076490002,
  "byte_ba": 0.0007765482430596001,
  "byte_1d": 0.00038827412152980003,
  "byte_2a": 0.0005824111822947001,
  "byte_62": 0.0007765482430596001,
  "byte_86": 0.00038827412152980003,
  "byte_a0": 0.00019413706076490002,
  "byte_46": 0.0005824111822947001,
  "byte_24": 0.0005824111822947001,
  "byte_a2": 0.00038827412152980003,
  "byte_30": 0.0005824111822947001,
  "byte_93": 0.0015530964861192001,
  "byte_4f": 0.00038827412152980003,
  "byte_78": 0.00019413706076490002,
  "byte_11": 0.0007765482430596001,
  "byte_e6": 0.00038827412152980003,
  "byte_e4": 0.00019413706076490002,
  "byte_eb": 0.00038827412152980003,
  "byte_79": 0.00038827412152980003,
  "byte_c7": 0.00038827412152980003,
  "byte_25": 0.0005824111822947001,
  "byte_42": 0.00019413706076490002,
  "byte_58": 0.00038827412152980003,
  "byte_1c": 0.00019413706076490002,
  "byte_bf": 0.00019413706076490002,
  "byte_ac": 0.00019413706076490002,
  "byte_68": 0.00019413706076490002,
  "byte_b7": 0.00019413706076490002,
  "byte_47": 0.00019413706076490002,
  "byte_f5": 0.00019413706076490002,
  "byte_39": 0.00038827412152980003,
  "byte_27": 0.00019413706076490002,
  "byte_c6": 0.00038827412152980003,
  "byte_7d": 0.00019413706076490002,
  "byte_f0": 0.00019413706076490002,
  "byte_2e": 0.00019413706076490002,
  "byte_4d": 0.00019413706076490002,
  "byte_6c": 0.00019413706076490002,
  "byte_5e": 0.00019413706076490002,
  "byte_e8": 0.0007765482430596001,
  "byte_74": 0.00019413706076490002,
  "byte_65": 0.00019413706076490002,
  "byte_7a": 0.00038827412152980003,
  "byte_3f": 0.00019413706076490002,
  "byte_1a": 0.00019413706076490002,
  "byte_aa": 0.00019413706076490002,
  "byte_66": 0.00019413706076490002,
  "byte_c3": 0.00019413706076490002,
  "byte_7b": 0.00019413706076490002,
  "byte_d8": 0.00019413706076490002,
  "byte_8c": 0.00019413706076490002,
  "byte_c9": 0.00019413706076490002,
  "num_nodes": 14,
  "num_edges": 17,
  "avg_degree": 2.4285714285714284,
  "density": 0.09340659340659341,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 43,
  "event_nums": 58,
  "creation_block": 6010761,
  "creation_timestamp": 1532275406,
  "life_time": 379368.0,
  "duration_seconds": 5656333.0,
  "from_creation_to_transfer": -5107491.0,
  "num_addresses": 15,
  "num_buyers": 5,
  "num_sellers": 14,
  "num_creator_transfers": 7,
  "buy_amt": 1.1325e+17,
  "sell_amt": 1.2e+17,
  "avg_value": 5301136363636364.0,
  "txn_per_block": 0.00011334610893351856,
  "avg_gas_limit": 161350.2093023256,
  "std_gas_limit": 246296.34713647334,
  "avg_gas_used": 97634.06976744186,
  "std_gas_used": 243220.62859607436,
  "avg_gas_price": 4212325581.395349,
  "std_gas_price": 3311180381.964071,
  "firstkicker_num": 10,
  "latestkicker_num": 24,
  "winner_num": 10,
  "withdraw_num": 1,
  "secondkicker_num": 7,
  "changegameparameters_num": 1,
  "changehouseaddress_num": 1,
  "kickthecoin_num": 24,
  "withdrawshares_num": 8,
  "timeline_sequence": [
    [
      5668848,
      1527167915,
      45,
      151,
      0,
      120000,
      11000000000,
      0,
      1,
      6145474,
      21272,
      17452404
    ],
    [
      6010761,
      1532275406,
      0,
      120,
      0,
      1651247,
      2500000000,
      0,
      1,
      7429466,
      1651247,
      17110491
    ],
    [
      6010811,
      1532276169,
      3,
      65,
      0,
      32939,
      2000000000,
      0,
      1,
      7830058,
      32939,
      17110441
    ],
    [
      6010822,
      1532276320,
      4,
      147,
      0,
      28463,
      2000000000,
      0,
      1,
      8002667,
      28463,
      17110430
    ],
    [
      6010843,
      1532276674,
      5,
      37,
      5000000000000000,
      192349,
      2000000000,
      0,
      1,
      5935763,
      128233,
      17110409
    ],
    [
      6011139,
      1532281158,
      23,
      127,
      0,
      152181,
      4000000000,
      0,
      1,
      6577277,
      50279,
      17110113
    ],
    [
      6011373,
      1532284482,
      2510,
      9,
      5000000000000000,
      192349,
      5000000000,
      0,
      1,
      755498,
      128233,
      17109879
    ],
    [
      6011427,
      1532285188,
      11,
      99,
      5000000000000000,
      192349,
      3100000000,
      0,
      1,
      3269070,
      68931,
      17109825
    ],
    [
      6011686,
      1532288819,
      2513,
      31,
      0,
      129924,
      3000000000,
      0,
      1,
      2682370,
      43308,
      17109566
    ],
    [
      6011873,
      1532291445,
      14,
      79,
      0,
      55791,
      2100000000,
      0,
      1,
      3125119,
      21304,
      17109379
    ],
    [
      6014960,
      1532336024,
      5,
      132,
      5000000000000000,
      192349,
      8000000000,
      0,
      1,
      7748761,
      128233,
      17106292
    ],
    [
      6015893,
      1532350552,
      85,
      31,
      5000000000000000,
      288726,
      6000000000,
      0,
      1,
      4424451,
      117484,
      17105359
    ],
    [
      6015922,
      1532350989,
      15,
      134,
      5000000000000000,
      103396,
      7000000000,
      0,
      1,
      6070550,
      68931,
      17105330
    ],
    [
      6016522,
      1532359730,
      160,
      111,
      5000000000000000,
      288726,
      4000000000,
      0,
      1,
      7167830,
      102484,
      17104730
    ],
    [
      6016657,
      1532361714,
      16,
      165,
      0,
      56169,
      7400000000,
      0,
      1,
      7480555,
      21556,
      17104595
    ],
    [
      6016669,
      1532361940,
      17,
      143,
      5000000000000000,
      103396,
      6400000000,
      0,
      1,
      7281242,
      68931,
      17104583
    ],
    [
      6017474,
      1532373341,
      86,
      16,
      5000000000000000,
      288726,
      10000000000,
      0,
      1,
      1169719,
      102484,
      17103778
    ],
    [
      6017556,
      1532374399,
      18,
      96,
      5000000000000000,
      103396,
      3000000000,
      0,
      1,
      7780671,
      68931,
      17103696
    ],
    [
      6017840,
      1532378674,
      19,
      178,
      0,
      129681,
      4000000000,
      0,
      1,
      7589440,
      42779,
      17103412
    ],
    [
      6017878,
      1532379214,
      20,
      50,
      5000000000000000,
      192349,
      5000000000,
      0,
      1,
      4173658,
      128233,
      17103374
    ],
    [
      6017890,
      1532379371,
      21,
      109,
      5000000000000000,
      103396,
      4000000000,
      0,
      1,
      5927334,
      68931,
      17103362
    ],
    [
      6022174,
      1532443557,
      284,
      70,
      5000000000000000,
      288726,
      3000000000,
      0,
      1,
      2971100,
      102484,
      17099078
    ],
    [
      6022291,
      1532445097,
      31,
      158,
      0,
      56169,
      3000000000,
      0,
      1,
      6655614,
      21556,
      17098961
    ],
    [
      6022408,
      1532446488,
      26,
      22,
      5000000000000000,
      103396,
      3000000000,
      0,
      1,
      1714299,
      68931,
      17098844
    ],
    [
      6022647,
      1532450313,
      1,
      29,
      5000000000000000,
      162729,
      10000000000,
      0,
      1,
      1557347,
      108486,
      17098605
    ],
    [
      6022648,
      1532450324,
      2,
      68,
      5000000000000000,
      162729,
      10000000000,
      0,
      1,
      1674341,
      63486,
      17098604
    ],
    [
      6024337,
      1532475210,
      6,
      99,
      0,
      152181,
      1000000000,
      0,
      1,
      7448319,
      50279,
      17096915
    ],
    [
      6027408,
      1532520888,
      1221,
      139,
      5000000000000000,
      192349,
      4630000000,
      0,
      1,
      6867462,
      128233,
      17093844
    ],
    [
      6039435,
      1532697628,
      23,
      107,
      5000000000000000,
      288726,
      10000000000,
      0,
      1,
      6409868,
      117484,
      17081817
    ],
    [
      6039435,
      1532697628,
      24,
      108,
      5000000000000000,
      288726,
      10000000000,
      0,
      1,
      6478799,
      68931,
      17081817
    ],
    [
      6039655,
      1532700883,
      7,
      153,
      5000000000000000,
      117729,
      5000000000,
      0,
      1,
      6593439,
      78486,
      17081597
    ],
    [
      6039822,
      1532703227,
      35,
      154,
      5000000000000000,
      95229,
      2000000000,
      0,
      1,
      7872295,
      63486,
      17081430
    ],
    [
      6040049,
      1532706758,
      9,
      89,
      5000000000000000,
      95229,
      3000000000,
      0,
      1,
      4110991,
      63486,
      17081203
    ],
    [
      6040152,
      1532708528,
      112,
      23,
      5000000000000000,
      95229,
      10000000000,
      0,
      1,
      1088342,
      63486,
      17081100
    ],
    [
      6040385,
      1532711982,
      10,
      58,
      5000000000000000,
      95229,
      4000000000,
      0,
      1,
      3575347,
      63486,
      17080867
    ],
    [
      6048216,
      1532824248,
      15,
      77,
      0,
      129681,
      1000000000,
      0,
      1,
      4525694,
      42779,
      17073036
    ],
    [
      6011139,
      1532281158,
      0,
      0,
      5000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6011873,
      1532291445,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6016657,
      1532361714,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6017840,
      1532378674,
      0,
      0,
      20000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6022291,
      1532445097,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6024337,
      1532475210,
      0,
      0,
      5000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6048216,
      1532824248,
      0,
      0,
      53250000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity 0.4.15;\n\n// visit https://KickTheCoin.com\ncontract KickTheCoin {\n    address houseAddress;\n    address creator;\n    address owner;\n    address airDroper;\n\n    address lastPlayerToKickTheCoin;\n\n    uint kickerCount;\n\n    address firstKicker;\n    address secondKicker;\n\n    uint costToKickTheCoin;\n    uint numberOfBlocksPerKick;\n    uint targetBlockNumber;\n\n    // set to true when game contract should stop new games from starting\n    bool isSundown;\n    // The blocknumber at which the current sundown grace period will end\n    uint sundownGraceTargetBlock;\n\n    // The index is incremented on each new game (via initGame)\n    uint gameIndex;\n\n    uint currentValue;\n\n    mapping(address => uint) shares;\n\n    event LatestKicker(uint curGameIndex, address kicker, uint curVal, uint targetBlockNum);\n    event FirstKicker(uint curGameIndex, address kicker, uint curVal);\n    event SecondKicker(uint curGameIndex, address kicker, uint curVal);\n    event Withdraw(address kicker, uint curVal);\n    event Winner(uint curGameIndex, address winner, uint curVal);\n\n    modifier onlyBy(address _account)\n    {\n        require(msg.sender == _account);\n        _;\n    }\n\n    modifier onlyByOwnerAndOnlyIfGameIsNotActive() {\n        require(msg.sender == owner && !isGameActive());\n        _;\n    }\n\n    modifier onlyDuringNormalOperations() {\n        require(!isSundown);\n        _;\n    }\n\n    function KickTheCoin()\n    public\n    payable\n    {\n        creator = msg.sender;\n        owner = creator;\n        houseAddress = creator;\n        airDroper = creator;\n        gameIndex = 0;\n        isSundown = false;\n        costToKickTheCoin = 0.17 ether;\n        numberOfBlocksPerKick = 5;\n        initGame();\n    }\n\n    function()\n    public\n    payable\n    {\n        kickTheCoin();\n    }\n\n    function kickTheCoin()\n    public\n    payable\n    onlyDuringNormalOperations()\n    {\n        require(msg.value == costToKickTheCoin);\n\n        if (hasWinner()) {\n            storeWinnerShare();\n            initGame();\n        }\n\n        kickerCount += 1;\n        processKick();\n        lastPlayerToKickTheCoin = msg.sender;\n        targetBlockNumber = block.number + numberOfBlocksPerKick;\n\n        LatestKicker(gameIndex, msg.sender, currentValue, targetBlockNumber);\n    }\n\n    function withdrawShares()\n    public\n    {\n        if (hasWinner()) {\n            storeWinnerShare();\n            initGame();\n        }\n        pullShares(msg.sender);\n    }\n\n    function checkShares(address shareHolder)\n    public\n    constant\n    returns (uint)\n    {\n        return shares[shareHolder];\n    }\n\n    function isGameActive()\n    public\n    constant\n    returns (bool)\n    {\n        return targetBlockNumber >= block.number;\n    }\n\n    function hasWinner()\n    public\n    constant\n    returns (bool)\n    {\n        return currentValue > 0 && !isGameActive();\n    }\n\n    function getCurrentValue()\n    public\n    constant\n    returns (uint)\n    {\n        if (isGameActive()) {\n            return currentValue;\n        } else {\n            return 0;\n        }\n    }\n\n    function getLastKicker()\n    public\n    constant\n    returns (address)\n    {\n        if (isGameActive()) {\n            return lastPlayerToKickTheCoin;\n        } else {\n            return address(0);\n        }\n    }\n\n    function pullShares(address shareHolder)\n    public\n    {\n        var share = shares[shareHolder];\n        if (share == 0) {\n            return;\n        }\n\n        shares[shareHolder] = 0;\n        shareHolder.transfer(share);\n        Withdraw(shareHolder, share);\n    }\n\n    function airDrop(address player)\n    public\n    payable\n    onlyBy(airDroper)\n    {\n        player.transfer(1);\n        if (msg.value > 1) {\n            msg.sender.transfer(msg.value - 1);\n        }\n    }\n\n    function getTargetBlockNumber()\n    public\n    constant\n    returns (uint)\n    {\n        return targetBlockNumber;\n    }\n\n    function getBlocksLeftInCurrentKick()\n    public\n    constant\n    returns (uint)\n    {\n        if (targetBlockNumber < block.number) {\n            return 0;\n        }\n        return targetBlockNumber - block.number;\n    }\n\n    function getNumberOfBlocksPerKick()\n    public\n    constant\n    returns (uint)\n    {\n        return numberOfBlocksPerKick;\n    }\n\n    function getCostToKick()\n    public\n    constant\n    returns (uint)\n    {\n        return costToKickTheCoin;\n    }\n\n    function getCurrentBlockNumber()\n    public\n    constant\n    returns (uint)\n    {\n        return block.number;\n    }\n\n    function getGameIndex()\n    public\n    constant\n    returns (uint)\n    {\n        return gameIndex;\n    }\n\n    function changeOwner(address _newOwner)\n    public\n    onlyBy(owner)\n    {\n        owner = _newOwner;\n    }\n\n    function changeHouseAddress(address _newHouseAddress)\n    public\n    onlyBy(owner)\n    {\n        houseAddress = _newHouseAddress;\n    }\n\n    function changeAirDroper(address _airDroper)\n    public\n    onlyBy(owner)\n    {\n        airDroper = _airDroper;\n    }\n\n    function changeGameParameters(uint _costToKickTheCoin, uint _numberOfBlocksPerKick)\n    public\n    onlyByOwnerAndOnlyIfGameIsNotActive()\n    {\n        costToKickTheCoin = _costToKickTheCoin;\n        numberOfBlocksPerKick = _numberOfBlocksPerKick;\n    }\n\n    function sundown()\n    public\n    onlyByOwnerAndOnlyIfGameIsNotActive()\n    {\n        isSundown = true;\n        sundownGraceTargetBlock = block.number + 100000;\n    }\n\n    function gameIsSundown()\n    public\n    constant\n    returns (bool)\n    {\n        return isSundown;\n    }\n\n    function getSundownGraceTargetBlock()\n    public\n    constant\n    returns (uint)\n    {\n        return sundownGraceTargetBlock;\n    }\n\n    function sunrise()\n    public\n    onlyByOwnerAndOnlyIfGameIsNotActive()\n    {\n        isSundown = false;\n        sundownGraceTargetBlock = 0;\n    }\n\n    function clear()\n    public\n    {\n        if (isSundown &&\n        sundownGraceTargetBlock != 0 &&\n        sundownGraceTargetBlock < block.number) {\n            houseAddress.transfer(this.balance);\n        }\n    }\n\n    function initGame()\n    private\n    {\n        gameIndex += 1;\n        targetBlockNumber = 0;\n        currentValue = 0;\n        kickerCount = 0;\n        firstKicker = address(0);\n        secondKicker = address(0);\n        lastPlayerToKickTheCoin = address(0);\n    }\n\n    function storeWinnerShare()\n    private\n    {\n        var share = currentValue;\n        currentValue = 0;\n        shares[lastPlayerToKickTheCoin] += share;\n        if (share > 0) {\n            Winner(gameIndex, lastPlayerToKickTheCoin, share);\n        }\n    }\n\n    function setShares()\n    private\n    {\n        // 1.0% commission to the house\n        shares[houseAddress] += (msg.value * 10)/1000;\n        // 2.5% commission to first kicker\n        shares[firstKicker] += (msg.value * 25)/1000;\n        // 1.5% commission to second kicker\n        shares[secondKicker] += (msg.value * 15)/1000;\n    }\n\n    function processKick()\n    private\n    {\n        if (kickerCount == 1) {\n            currentValue = msg.value; // no commission on first kick\n            firstKicker = msg.sender;\n            FirstKicker(gameIndex, msg.sender, currentValue);\n        } else if (kickerCount == 2) {\n            currentValue += msg.value; // no commission on second kick\n            secondKicker = msg.sender;\n            SecondKicker(gameIndex, msg.sender, currentValue);\n        } else {\n            // 5% is used. 2.5% for first kicker, 1.5% for second, 1% for house\n            // leaving 95% for the winner\n            currentValue += (msg.value * 950)/1000;\n            setShares();\n        }\n    }\n}"
}