{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 DUP3 ISZERO PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 DUP3 ISZERO PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 DUP3 ISZERO PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 DUP3 ISZERO PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 CALLDATALOAD DUP2 DUP2 ADD CALLDATALOAD PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 SWAP5 DUP3 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP5 PUSH1 DUP1 CALLDATALOAD SWAP6 PUSH1 SWAP5 SWAP3 SWAP4 SWAP2 SWAP1 SWAP3 ADD SWAP2 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 CALLVALUE GT PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP2 CALLVALUE DUP1 ISZERO PUSH2 MUL SWAP3 SWAP1 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP5 DUP7 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 DUP2 SWAP1 SSTORE PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SLOAD DUP3 SWAP1 LT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 SWAP1 LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP8 DUP4 AND DUP3 MSTORE PUSH1 DUP2 MSTORE DUP4 DUP3 SHA3 CALLER SWAP1 SWAP4 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP7 AND DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP8 AND SWAP4 SWAP2 SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP PUSH1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND SWAP2 PUSH1 SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 DUP2 MSTORE DUP4 DUP3 SHA3 CALLER SWAP1 SWAP4 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 LT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 CALLER SWAP1 SWAP4 AND SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP4 PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI DUP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 CALLER DUP7 ADDRESS DUP8 PUSH1 MLOAD DUP6 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 DUP4 EQ PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP POP PUSH1 SWAP2 POP JUMPDEST JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST DUP1 ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP STOP UNKNOWN_0xdd CALLCODE MSTORE UNKNOWN_0xad SHL UNKNOWN_0xe2 UNKNOWN_0xc8 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef LOG1 PUSH6 SHA3 UNKNOWN_0xad SWAP7 SWAP11 SHA3 JUMPDEST PUSH7 AND UNKNOWN_0x2f UNKNOWN_0xac UNKNOWN_0xe0 UNKNOWN_0xfb SWAP3 INVALID_0x72",
  "opcode_entropy": 4.836376887373055,
  "opcode_count": 3021,
  "unique_opcodes": 81,
  "byte_entropy": 5.680301511932583,
  "byte_60": 0.11342863838762597,
  "byte_40": 0.014061401453011484,
  "byte_52": 0.03327865010546051,
  "byte_36": 0.0009374267635340989,
  "byte_15": 0.0199203187250996,
  "byte_61": 0.04101242090461683,
  "byte_01": 0.05108975861260839,
  "byte_0f": 0.002343566908835247,
  "byte_57": 0.019685962034216076,
  "byte_63": 0.00843684087180689,
  "byte_ff": 0.020154675415983127,
  "byte_7c": 0.0009374267635340989,
  "byte_00": 0.04757440824935552,
  "byte_35": 0.005390203890321068,
  "byte_04": 0.006796344035622217,
  "byte_16": 0.02577923599718772,
  "byte_06": 0.006327630653855168,
  "byte_fd": 0.0032809936723693462,
  "byte_de": 0.00023435669088352472,
  "byte_03": 0.025076165924537146,
  "byte_81": 0.032809936723693464,
  "byte_14": 0.0058589172720881185,
  "byte_20": 0.03023201312397469,
  "byte_80": 0.03234122334192641,
  "byte_09": 0.0021092102179517225,
  "byte_5e": 0.00023435669088352472,
  "byte_a7": 0.00046871338176704945,
  "byte_b3": 0.0007030700726505742,
  "byte_b0": 0.00046871338176704945,
  "byte_18": 0.0007030700726505742,
  "byte_0d": 0.0016404968361846731,
  "byte_dd": 0.0007030700726505742,
  "byte_e3": 0.00046871338176704945,
  "byte_23": 0.0009374267635340989,
  "byte_b8": 0.00046871338176704945,
  "byte_72": 0.0014061401453011485,
  "byte_02": 0.01781110850714788,
  "byte_05": 0.0065619873447386925,
  "byte_31": 0.0007030700726505742,
  "byte_3c": 0.00046871338176704945,
  "byte_e5": 0.00046871338176704945,
  "byte_67": 0.00046871338176704945,
  "byte_3e": 0.0007030700726505742,
  "byte_42": 0.00046871338176704945,
  "byte_96": 0.0007030700726505742,
  "byte_6c": 0.0014061401453011485,
  "byte_68": 0.0007030700726505742,
  "byte_64": 0.0007030700726505742,
  "byte_5a": 0.0007030700726505742,
  "byte_3b": 0.00046871338176704945,
  "byte_7e": 0.0007030700726505742,
  "byte_8b": 0.00046871338176704945,
  "byte_a9": 0.0007030700726505742,
  "byte_1b": 0.0009374267635340989,
  "byte_70": 0.00023435669088352472,
  "byte_a0": 0.013358331380360909,
  "byte_82": 0.0217951722521678,
  "byte_ab": 0.00023435669088352472,
  "byte_77": 0.00023435669088352472,
  "byte_12": 0.0009374267635340989,
  "byte_f6": 0.00023435669088352472,
  "byte_d9": 0.00046871338176704945,
  "byte_79": 0.00046871338176704945,
  "byte_c6": 0.00046871338176704945,
  "byte_50": 0.02718537614248887,
  "byte_fb": 0.0007030700726505742,
  "byte_cc": 0.0018748535270681978,
  "byte_90": 0.051324115303491916,
  "byte_1c": 0.00046871338176704945,
  "byte_8d": 0.00046871338176704945,
  "byte_a5": 0.0009374267635340989,
  "byte_cb": 0.00023435669088352472,
  "byte_5b": 0.03773142723224748,
  "byte_4f": 0.00046871338176704945,
  "byte_95": 0.0016404968361846731,
  "byte_d8": 0.00046871338176704945,
  "byte_9b": 0.00046871338176704945,
  "byte_41": 0.00023435669088352472,
  "byte_7b": 0.00023435669088352472,
  "byte_9c": 0.00046871338176704945,
  "byte_bb": 0.00023435669088352472,
  "byte_0b": 0.0011717834544176236,
  "byte_ae": 0.00023435669088352472,
  "byte_0a": 0.015233184907429108,
  "byte_ba": 0.00046871338176704945,
  "byte_8c": 0.00046871338176704945,
  "byte_b4": 0.0009374267635340989,
  "byte_d4": 0.00046871338176704945,
  "byte_b6": 0.00023435669088352472,
  "byte_48": 0.00046871338176704945,
  "byte_ca": 0.00046871338176704945,
  "byte_e9": 0.00023435669088352472,
  "byte_51": 0.019451605343332554,
  "byte_78": 0.00023435669088352472,
  "byte_e7": 0.00023435669088352472,
  "byte_24": 0.0021092102179517225,
  "byte_ef": 0.00046871338176704945,
  "byte_f2": 0.00046871338176704945,
  "byte_1e": 0.0016404968361846731,
  "byte_30": 0.002577923599718772,
  "byte_56": 0.016170611670963207,
  "byte_34": 0.004921490508554019,
  "byte_28": 0.0007030700726505742,
  "byte_fe": 0.005624560581204594,
  "byte_83": 0.02132645887040075,
  "byte_91": 0.02320131239746895,
  "byte_92": 0.010546051089758613,
  "byte_85": 0.00445277712678697,
  "byte_76": 0.0021092102179517225,
  "byte_11": 0.0032809936723693462,
  "byte_1f": 0.00398406374501992,
  "byte_19": 0.003515350363252871,
  "byte_a2": 0.0014061401453011485,
  "byte_f3": 0.00445277712678697,
  "byte_cf": 0.002343566908835247,
  "byte_eb": 0.00023435669088352472,
  "byte_07": 0.0021092102179517225,
  "byte_44": 0.0009374267635340989,
  "byte_46": 0.00023435669088352472,
  "byte_4e": 0.00046871338176704945,
  "byte_08": 0.0032809936723693462,
  "byte_c7": 0.00046871338176704945,
  "byte_93": 0.005155847199437544,
  "byte_2e": 0.0021092102179517225,
  "byte_65": 0.00046871338176704945,
  "byte_e1": 0.00023435669088352472,
  "byte_84": 0.005155847199437544,
  "byte_8a": 0.00023435669088352472,
  "byte_5f": 0.00046871338176704945,
  "byte_0c": 0.0011717834544176236,
  "byte_b9": 0.0007030700726505742,
  "byte_c8": 0.00046871338176704945,
  "byte_13": 0.00023435669088352472,
  "byte_0e": 0.0014061401453011485,
  "byte_94": 0.004218420435903445,
  "byte_37": 0.0009374267635340989,
  "byte_f7": 0.0011717834544176236,
  "byte_1a": 0.00023435669088352472,
  "byte_54": 0.009374267635340989,
  "byte_fc": 0.0011717834544176236,
  "byte_88": 0.0007030700726505742,
  "byte_f1": 0.0007030700726505742,
  "byte_86": 0.0018748535270681978,
  "byte_10": 0.006093273962971643,
  "byte_da": 0.00046871338176704945,
  "byte_33": 0.005390203890321068,
  "byte_55": 0.0037497070541363956,
  "byte_c5": 0.00023435669088352472,
  "byte_ee": 0.00023435669088352472,
  "byte_45": 0.0011717834544176236,
  "byte_87": 0.0014061401453011485,
  "byte_6b": 0.00023435669088352472,
  "byte_39": 0.0014061401453011485,
  "byte_a3": 0.0009374267635340989,
  "byte_f4": 0.00023435669088352472,
  "byte_29": 0.0007030700726505742,
  "byte_7f": 0.0014061401453011485,
  "byte_f5": 0.0009374267635340989,
  "byte_db": 0.00046871338176704945,
  "byte_32": 0.0007030700726505742,
  "byte_5c": 0.00046871338176704945,
  "byte_e0": 0.0007030700726505742,
  "byte_9d": 0.00046871338176704945,
  "byte_bd": 0.00046871338176704945,
  "byte_73": 0.0009374267635340989,
  "byte_7a": 0.0009374267635340989,
  "byte_71": 0.00046871338176704945,
  "byte_b7": 0.0007030700726505742,
  "byte_5d": 0.00046871338176704945,
  "byte_4d": 0.0011717834544176236,
  "byte_69": 0.00046871338176704945,
  "byte_74": 0.00023435669088352472,
  "byte_a6": 0.00023435669088352472,
  "byte_f0": 0.00023435669088352472,
  "byte_6d": 0.00023435669088352472,
  "byte_59": 0.00023435669088352472,
  "byte_8f": 0.00023435669088352472,
  "byte_b1": 0.00023435669088352472,
  "byte_ed": 0.00046871338176704945,
  "byte_cd": 0.00023435669088352472,
  "byte_17": 0.00046871338176704945,
  "byte_38": 0.00023435669088352472,
  "byte_6f": 0.00023435669088352472,
  "byte_6e": 0.00023435669088352472,
  "byte_ac": 0.0007030700726505742,
  "byte_6a": 0.00023435669088352472,
  "byte_4a": 0.00023435669088352472,
  "byte_a1": 0.0007030700726505742,
  "byte_3a": 0.00023435669088352472,
  "byte_ad": 0.00046871338176704945,
  "byte_e2": 0.00023435669088352472,
  "byte_c2": 0.00023435669088352472,
  "byte_aa": 0.00023435669088352472,
  "byte_2b": 0.00023435669088352472,
  "byte_c4": 0.00023435669088352472,
  "byte_62": 0.00023435669088352472,
  "byte_58": 0.00023435669088352472,
  "byte_9a": 0.00023435669088352472,
  "byte_66": 0.00023435669088352472,
  "byte_26": 0.00023435669088352472,
  "byte_2f": 0.00023435669088352472,
  "byte_53": 0.00023435669088352472,
  "byte_22": 0.00023435669088352472,
  "byte_8e": 0.00023435669088352472,
  "num_nodes": 8,
  "num_edges": 8,
  "avg_degree": 2.0,
  "density": 0.14285714285714285,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 121,
  "event_nums": 110,
  "creation_block": 4251611,
  "creation_timestamp": 1504873368,
  "life_time": 664966.0,
  "duration_seconds": 11209568.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 9,
  "num_buyers": 2,
  "num_sellers": 8,
  "num_creator_transfers": 2,
  "buy_amt": 5.8183153e+18,
  "sell_amt": 5.8183153e+18,
  "avg_value": 9.538221803278688e+16,
  "txn_per_block": 0.00018196391700640784,
  "avg_gas_limit": 61074.47107438016,
  "std_gas_limit": 120957.82665004383,
  "avg_gas_used": 57985.52892561984,
  "std_gas_used": 120661.92459954938,
  "avg_gas_price": 23843653237.305786,
  "std_gas_price": 10657442801.226358,
  "transfer_num": 116,
  "timeline_sequence": [
    [
      4251611,
      1504873368,
      0,
      26,
      0,
      1375640,
      50000000000,
      0,
      0,
      1977212,
      1375639,
      18869651
    ],
    [
      4254339,
      1504938820,
      1,
      34,
      0,
      152406,
      35000000000,
      0,
      0,
      1117971,
      52405,
      18866923
    ],
    [
      4254618,
      1504945267,
      2,
      125,
      0,
      52469,
      21000000000,
      0,
      0,
      5097168,
      52469,
      18866644
    ],
    [
      4261551,
      1505114533,
      0,
      4,
      0,
      52469,
      60000000000,
      0,
      0,
      148810,
      52469,
      18859711
    ],
    [
      4261555,
      1505114631,
      1,
      2,
      0,
      37405,
      60000000000,
      0,
      0,
      110560,
      37405,
      18859707
    ],
    [
      4261589,
      1505115403,
      2,
      66,
      0,
      52405,
      60000000000,
      0,
      0,
      1517069,
      52405,
      18859673
    ],
    [
      4264967,
      1505196166,
      3,
      80,
      0,
      52341,
      60000000000,
      0,
      0,
      1874460,
      52341,
      18856295
    ],
    [
      4265612,
      1505211773,
      4,
      1,
      0,
      52405,
      60000000000,
      0,
      0,
      77229,
      52405,
      18855650
    ],
    [
      4265613,
      1505211785,
      5,
      3,
      0,
      52405,
      60000000000,
      0,
      0,
      337037,
      37405,
      18855649
    ],
    [
      4265872,
      1505218154,
      6,
      133,
      0,
      52405,
      21000000000,
      1,
      0,
      3652624,
      52405,
      18855390
    ],
    [
      4265881,
      1505218321,
      7,
      77,
      0,
      52405,
      21000000000,
      0,
      0,
      2308003,
      52405,
      18855381
    ],
    [
      4265927,
      1505219261,
      8,
      93,
      0,
      57000,
      21000000000,
      0,
      0,
      2695283,
      37469,
      18855335
    ],
    [
      4265929,
      1505219323,
      9,
      38,
      0,
      57000,
      21000000000,
      0,
      0,
      1672791,
      37405,
      18855333
    ],
    [
      4268849,
      1505290149,
      10,
      33,
      0,
      52405,
      21000000000,
      0,
      0,
      3472197,
      52405,
      18852413
    ],
    [
      4269078,
      1505295995,
      11,
      85,
      0,
      52469,
      21000000000,
      0,
      0,
      3834346,
      52469,
      18852184
    ],
    [
      4272530,
      1505379351,
      12,
      39,
      0,
      52405,
      21000000000,
      0,
      0,
      1250957,
      52405,
      18848732
    ],
    [
      4272587,
      1505380946,
      0,
      84,
      0,
      52405,
      21000000000,
      0,
      0,
      2487227,
      52405,
      18848675
    ],
    [
      4272609,
      1505381585,
      1,
      83,
      0,
      52277,
      21000000000,
      0,
      0,
      1961180,
      52277,
      18848653
    ],
    [
      4272732,
      1505384452,
      14,
      125,
      0,
      37469,
      21000000000,
      0,
      0,
      5514457,
      37469,
      18848530
    ],
    [
      4273413,
      1505400747,
      2,
      61,
      0,
      52405,
      21000000000,
      0,
      0,
      1529526,
      52405,
      18847849
    ],
    [
      4275196,
      1505442676,
      3,
      140,
      0,
      52405,
      21000000000,
      0,
      0,
      4087589,
      52405,
      18846066
    ],
    [
      4275211,
      1505443150,
      4,
      67,
      0,
      37405,
      21000000000,
      0,
      0,
      1473315,
      37405,
      18846051
    ],
    [
      4275957,
      1505462044,
      5,
      269,
      0,
      52341,
      21000000000,
      0,
      0,
      6360342,
      52341,
      18845305
    ],
    [
      4277060,
      1505487996,
      6,
      284,
      0,
      52341,
      21000000000,
      1,
      0,
      6314162,
      52341,
      18844202
    ],
    [
      4277151,
      1505490038,
      7,
      74,
      0,
      52405,
      21000000000,
      0,
      0,
      3113565,
      52405,
      18844111
    ],
    [
      4279221,
      1505539078,
      15,
      121,
      0,
      37469,
      21000000000,
      0,
      0,
      6684756,
      37469,
      18842041
    ],
    [
      4279266,
      1505540490,
      775447,
      33,
      15000000000000000,
      83333,
      60643022529,
      0,
      0,
      788379,
      28868,
      18841996
    ],
    [
      4279285,
      1505540864,
      775465,
      10,
      5803315300000000000,
      83333,
      62439019185,
      0,
      0,
      369908,
      28868,
      18841977
    ],
    [
      4279741,
      1505552016,
      0,
      82,
      0,
      121000,
      24000000000,
      0,
      0,
      2318865,
      52341,
      18841521
    ],
    [
      4290556,
      1505811194,
      8,
      198,
      0,
      52405,
      21000000000,
      0,
      0,
      5915196,
      52405,
      18830706
    ],
    [
      4291281,
      1505828912,
      16,
      28,
      0,
      52341,
      21000000000,
      0,
      0,
      1786157,
      52341,
      18829981
    ],
    [
      4291635,
      1505837559,
      9,
      149,
      0,
      52405,
      21000000000,
      0,
      0,
      6394426,
      52405,
      18829627
    ],
    [
      4297700,
      1505982364,
      17,
      79,
      0,
      52405,
      21000000000,
      0,
      0,
      3165975,
      52405,
      18823562
    ],
    [
      4297914,
      1505987725,
      18,
      41,
      0,
      37405,
      21000000000,
      0,
      0,
      1886235,
      37405,
      18823348
    ],
    [
      4300908,
      1506061411,
      10,
      21,
      0,
      52405,
      21000000000,
      0,
      0,
      915586,
      52405,
      18820354
    ],
    [
      4300922,
      1506061878,
      11,
      94,
      0,
      52405,
      21000000000,
      0,
      0,
      3610475,
      52405,
      18820340
    ],
    [
      4304436,
      1506164861,
      12,
      120,
      0,
      52341,
      21000000000,
      0,
      0,
      4538863,
      52341,
      18816826
    ],
    [
      4304543,
      1506168138,
      0,
      143,
      0,
      52405,
      21000000000,
      0,
      0,
      6672918,
      52405,
      18816719
    ],
    [
      4307172,
      1506246442,
      13,
      170,
      0,
      52405,
      21000000000,
      0,
      0,
      4532199,
      52405,
      18814090
    ],
    [
      4307183,
      1506247035,
      14,
      98,
      0,
      52405,
      21000000000,
      0,
      0,
      2751227,
      52405,
      18814079
    ],
    [
      4310257,
      1506338798,
      15,
      56,
      0,
      52341,
      21000000000,
      0,
      0,
      2210755,
      52341,
      18811005
    ],
    [
      4312676,
      1506411603,
      16,
      68,
      0,
      52405,
      21000000000,
      0,
      0,
      1910538,
      52405,
      18808586
    ],
    [
      4312684,
      1506411896,
      17,
      172,
      0,
      52342,
      21000000000,
      0,
      0,
      6692454,
      52341,
      18808578
    ],
    [
      4313112,
      1506424780,
      1,
      105,
      0,
      52405,
      21000000000,
      0,
      0,
      4575025,
      52405,
      18808150
    ],
    [
      4313416,
      1506433822,
      18,
      73,
      0,
      37405,
      21000000000,
      0,
      0,
      6165322,
      37405,
      18807846
    ],
    [
      4313665,
      1506441284,
      19,
      109,
      0,
      52469,
      21000000000,
      0,
      0,
      6411808,
      52469,
      18807597
    ],
    [
      4313699,
      1506442539,
      20,
      77,
      0,
      52405,
      21000000000,
      0,
      0,
      2416818,
      52405,
      18807563
    ],
    [
      4313948,
      1506449526,
      21,
      22,
      0,
      52405,
      21000000000,
      0,
      0,
      2949115,
      52405,
      18807314
    ],
    [
      4313970,
      1506449980,
      22,
      38,
      0,
      37405,
      21000000000,
      0,
      0,
      3474412,
      37405,
      18807292
    ],
    [
      4321271,
      1506670399,
      23,
      23,
      0,
      37405,
      21000000000,
      0,
      0,
      1220436,
      37405,
      18799991
    ],
    [
      4321280,
      1506670673,
      24,
      88,
      0,
      37405,
      21000000000,
      0,
      0,
      4585673,
      37405,
      18799982
    ],
    [
      4321353,
      1506672929,
      25,
      97,
      0,
      52341,
      21000000000,
      1,
      0,
      2276110,
      52341,
      18799909
    ],
    [
      4321451,
      1506675949,
      26,
      53,
      0,
      52405,
      21000000000,
      0,
      0,
      2359891,
      52405,
      18799811
    ],
    [
      4330849,
      1506960554,
      27,
      43,
      0,
      52405,
      21000000000,
      0,
      0,
      1112817,
      52405,
      18790413
    ],
    [
      4330989,
      1506964882,
      3,
      18,
      0,
      23000,
      24000000000,
      1,
      0,
      1017589,
      23000,
      18790273
    ],
    [
      4330995,
      1506965048,
      4,
      4,
      0,
      35000,
      24000000000,
      1,
      0,
      119000,
      35000,
      18790267
    ],
    [
      4335487,
      1507101926,
      28,
      173,
      0,
      52405,
      21000000000,
      0,
      0,
      5453189,
      52405,
      18785775
    ],
    [
      4336126,
      1507120565,
      29,
      170,
      0,
      52341,
      21000000000,
      1,
      0,
      6468858,
      52341,
      18785136
    ],
    [
      4336135,
      1507120778,
      30,
      36,
      0,
      52405,
      21000000000,
      0,
      0,
      1571785,
      52405,
      18785127
    ],
    [
      4338746,
      1507197896,
      2,
      80,
      0,
      52405,
      21000000000,
      0,
      0,
      3276119,
      52405,
      18782516
    ],
    [
      4338749,
      1507198006,
      3,
      9,
      0,
      37405,
      21000000000,
      0,
      0,
      287668,
      37405,
      18782513
    ],
    [
      4344580,
      1507374154,
      31,
      64,
      0,
      52405,
      21000000000,
      0,
      0,
      2733786,
      52405,
      18776682
    ],
    [
      4344648,
      1507376125,
      32,
      85,
      0,
      52405,
      21000000000,
      0,
      0,
      3666593,
      52405,
      18776614
    ],
    [
      4345024,
      1507387551,
      33,
      86,
      0,
      52405,
      21000000000,
      0,
      0,
      4104439,
      52405,
      18776238
    ],
    [
      4347673,
      1507466835,
      34,
      49,
      0,
      52405,
      21000000000,
      0,
      0,
      2726632,
      52405,
      18773589
    ],
    [
      4349756,
      1507528854,
      35,
      166,
      0,
      37405,
      21000000000,
      0,
      0,
      5029403,
      37405,
      18771506
    ],
    [
      4349766,
      1507529195,
      36,
      185,
      0,
      37405,
      21000000000,
      0,
      0,
      4017871,
      37405,
      18771496
    ],
    [
      4352386,
      1507607657,
      37,
      59,
      0,
      52405,
      21000000000,
      0,
      0,
      1479140,
      52405,
      18768876
    ],
    [
      4352788,
      1507620534,
      38,
      49,
      0,
      52341,
      21000000000,
      0,
      0,
      2346535,
      52341,
      18768474
    ],
    [
      4353308,
      1507635282,
      39,
      113,
      0,
      52405,
      21000000000,
      0,
      0,
      2923419,
      52405,
      18767954
    ],
    [
      4362527,
      1507908874,
      40,
      103,
      0,
      52469,
      21000000000,
      0,
      0,
      4220277,
      52469,
      18758735
    ],
    [
      4362545,
      1507909194,
      41,
      95,
      0,
      37469,
      21000000000,
      0,
      0,
      3070790,
      37469,
      18758717
    ],
    [
      4365465,
      1507997138,
      42,
      143,
      0,
      37533,
      21000000000,
      0,
      0,
      4859807,
      37533,
      18755797
    ],
    [
      4368498,
      1508086884,
      21,
      85,
      0,
      55000,
      21000000000,
      0,
      0,
      3238843,
      37405,
      18752764
    ],
    [
      4370545,
      1508144618,
      43,
      96,
      0,
      52405,
      21000000000,
      0,
      1,
      2202154,
      52405,
      18750717
    ],
    [
      4370569,
      1508145023,
      44,
      31,
      0,
      52341,
      21000000000,
      0,
      1,
      1566152,
      52341,
      18750693
    ],
    [
      4370604,
      1508145704,
      45,
      31,
      0,
      37469,
      21000000000,
      0,
      1,
      1482428,
      37469,
      18750658
    ],
    [
      4370618,
      1508146004,
      46,
      45,
      0,
      52469,
      21000000000,
      0,
      1,
      1101265,
      52469,
      18750644
    ],
    [
      4370634,
      1508146314,
      47,
      24,
      0,
      52469,
      21000000000,
      0,
      1,
      1511821,
      52469,
      18750628
    ],
    [
      4370645,
      1508146600,
      48,
      50,
      0,
      52469,
      21000000000,
      0,
      1,
      1972577,
      52469,
      18750617
    ],
    [
      4394341,
      1508484700,
      5,
      33,
      0,
      37469,
      21000000000,
      0,
      1,
      771372,
      37469,
      18726921
    ],
    [
      4425151,
      1508910873,
      49,
      9,
      0,
      52405,
      21000000000,
      0,
      1,
      383921,
      52405,
      18696111
    ],
    [
      4425173,
      1508911183,
      50,
      11,
      0,
      37469,
      21000000000,
      0,
      1,
      369555,
      37469,
      18696089
    ],
    [
      4425193,
      1508911491,
      51,
      3,
      0,
      37405,
      21000000000,
      0,
      1,
      131577,
      37405,
      18696069
    ],
    [
      4425217,
      1508911736,
      52,
      0,
      0,
      52469,
      21000000000,
      0,
      1,
      52469,
      52469,
      18696045
    ],
    [
      4426341,
      1508927587,
      53,
      6,
      0,
      52469,
      21000000000,
      0,
      1,
      303093,
      52469,
      18694921
    ],
    [
      4426357,
      1508927921,
      54,
      15,
      0,
      52469,
      21000000000,
      0,
      1,
      1280772,
      52469,
      18694905
    ],
    [
      4439288,
      1509107792,
      55,
      27,
      0,
      52405,
      21000000000,
      0,
      1,
      2890330,
      52405,
      18681974
    ],
    [
      4439608,
      1509112383,
      56,
      27,
      0,
      52405,
      21000000000,
      0,
      1,
      1474868,
      52405,
      18681654
    ],
    [
      4439689,
      1509113351,
      57,
      11,
      0,
      37405,
      21000000000,
      0,
      1,
      679326,
      37405,
      18681573
    ],
    [
      4450176,
      1509258830,
      0,
      2,
      0,
      54000,
      21000000000,
      0,
      1,
      167079,
      52405,
      18671086
    ],
    [
      4458723,
      1509379048,
      58,
      42,
      0,
      52469,
      21000000000,
      0,
      1,
      1347402,
      52469,
      18662539
    ],
    [
      4462343,
      1509430072,
      1,
      9,
      0,
      54000,
      21000000000,
      0,
      1,
      536934,
      37469,
      18658919
    ],
    [
      4462532,
      1509432700,
      2,
      51,
      0,
      52405,
      21000000000,
      0,
      1,
      2205588,
      52405,
      18658730
    ],
    [
      4462625,
      1509434022,
      59,
      27,
      0,
      52469,
      21000000000,
      0,
      1,
      924491,
      52469,
      18658637
    ],
    [
      4462936,
      1509438409,
      60,
      22,
      0,
      52469,
      21000000000,
      0,
      1,
      725207,
      52469,
      18658326
    ],
    [
      4464966,
      1509466435,
      26,
      48,
      0,
      54000,
      21000000000,
      0,
      1,
      1401734,
      52405,
      18656296
    ],
    [
      4499540,
      1509947262,
      61,
      6,
      0,
      52405,
      21000000000,
      0,
      1,
      225011,
      52405,
      18621722
    ],
    [
      4500143,
      1509956139,
      62,
      44,
      0,
      52405,
      21000000000,
      0,
      1,
      1313673,
      52405,
      18621119
    ],
    [
      4569668,
      1510922202,
      63,
      24,
      0,
      52469,
      21000000000,
      0,
      1,
      850072,
      52469,
      18551594
    ],
    [
      4612653,
      1511520216,
      64,
      83,
      0,
      52405,
      21000000000,
      0,
      1,
      2216608,
      52405,
      18508609
    ],
    [
      4706689,
      1512885556,
      65,
      78,
      0,
      52405,
      21000000000,
      0,
      1,
      5513896,
      52341,
      18414573
    ],
    [
      4707131,
      1512892634,
      30,
      63,
      0,
      52405,
      21000000000,
      0,
      1,
      2224775,
      52405,
      18414131
    ],
    [
      4708153,
      1512907636,
      66,
      128,
      0,
      52469,
      21000000000,
      0,
      1,
      6968513,
      52405,
      18413109
    ],
    [
      4708203,
      1512908260,
      67,
      53,
      0,
      37405,
      21000000000,
      0,
      1,
      4791113,
      37405,
      18413059
    ],
    [
      4708236,
      1512908660,
      68,
      100,
      0,
      52469,
      21000000000,
      0,
      1,
      5720431,
      52469,
      18413026
    ],
    [
      4713084,
      1512980729,
      69,
      114,
      0,
      37469,
      21000000000,
      0,
      1,
      6169436,
      37469,
      18408178
    ],
    [
      4729920,
      1513235876,
      70,
      30,
      0,
      37469,
      40000000000,
      0,
      1,
      1200388,
      37469,
      18391342
    ],
    [
      4766907,
      1513794922,
      71,
      189,
      0,
      52405,
      21000000000,
      0,
      1,
      6914626,
      52405,
      18354355
    ],
    [
      4811546,
      1514451388,
      72,
      47,
      0,
      37405,
      21000000000,
      0,
      1,
      1636033,
      37405,
      18309716
    ],
    [
      4811597,
      1514452101,
      73,
      180,
      0,
      52341,
      21000000000,
      0,
      1,
      4572787,
      52341,
      18309665
    ],
    [
      4811672,
      1514453071,
      74,
      37,
      0,
      52341,
      21000000000,
      0,
      1,
      1556785,
      52341,
      18309590
    ],
    [
      4811833,
      1514455251,
      75,
      86,
      0,
      52341,
      21000000000,
      0,
      1,
      3734800,
      52341,
      18309429
    ],
    [
      4818117,
      1514548581,
      76,
      189,
      0,
      52405,
      21000000000,
      0,
      1,
      5466670,
      52405,
      18303145
    ],
    [
      4818161,
      1514549264,
      77,
      45,
      0,
      37405,
      21000000000,
      0,
      1,
      1463253,
      37405,
      18303101
    ],
    [
      4869744,
      1515340526,
      34,
      112,
      0,
      52405,
      21000000000,
      0,
      1,
      5277858,
      52405,
      18251518
    ],
    [
      4869815,
      1515341690,
      35,
      117,
      0,
      52469,
      21000000000,
      0,
      1,
      7252173,
      52469,
      18251447
    ],
    [
      4916560,
      1516082675,
      78,
      173,
      0,
      52405,
      21000000000,
      0,
      1,
      5522461,
      52405,
      18204702
    ],
    [
      4916577,
      1516082936,
      79,
      144,
      0,
      37405,
      21000000000,
      0,
      1,
      7994011,
      37405,
      18204685
    ],
    [
      4279266,
      1505540490,
      0,
      0,
      15000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4279285,
      1505540864,
      0,
      0,
      5803315300000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.11;\n\n\n\ncontract owned {\n    address public owner;\n\n    function owned() {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner {\n        owner = newOwner;\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }\n\ncontract ParentToken {\n\n     /* library used for calculations */\n    using SafeMath for uint256; \n\n    /* Public variables of the token */\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    mapping(address => uint) balances;\n    mapping(address => mapping(address=>uint)) allowance;        \n\n\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function ParentToken(uint256 currentSupply,\n        string tokenName,\n        uint8 decimalUnits,\n        string tokenSymbol){\n            \n       balances[msg.sender] =  currentSupply;    // Give the creator all initial tokens  \n       totalSupply = currentSupply;              // Update total supply \n       name = tokenName;                         // Set the name for display purposes\n       decimals = decimalUnits;                  // Decimals for the tokens\n       symbol = tokenSymbol;\t\t\t\t\t// Set the symbol for display purposes\t\n    }\n    \n    \n\n   ///@notice Transfer tokens to the beneficiary account\n   ///@param  to The beneficiary account\n   ///@param  value The amount of tokens to be transfered  \n       function transfer(address to, uint value) returns (bool success){\n        require(\n            balances[msg.sender] >= value \n            && value > 0 \n            );\n            balances[msg.sender] = balances[msg.sender].sub(value);    \n            balances[to] = balances[to].add(value);\n            return true;\n    }\n    \n\t///@notice Allow another contract to spend some tokens in your behalf\n\t///@param  spender The address authorized to spend \n\t///@param  value The amount to be approved \n    function approve(address spender, uint256 value)\n        returns (bool success) {\n        allowance[msg.sender][spender] = value;\n        return true;\n    }\n\n    ///@notice Approve and then communicate the approved contract in a single tx\n\t///@param  spender The address authorized to spend \n\t///@param  value The amount to be approved \n    function approveAndCall(address spender, uint256 value, bytes extraData)\n        returns (bool success) {    \n        tokenRecipient recSpender = tokenRecipient(spender);\n        if (approve(spender, value)) {\n            recSpender.receiveApproval(msg.sender, value, this, extraData);\n            return true;\n        }\n    }\n\n\n\n   ///@notice Transfer tokens between accounts\n   ///@param  from The benefactor/sender account.\n   ///@param  to The beneficiary account\n   ///@param  value The amount to be transfered  \n    function transferFrom(address from, address to, uint value) returns (bool success){\n        \n        require(\n            allowance[from][msg.sender] >= value\n            &&balances[from] >= value\n            && value > 0\n            );\n            \n            balances[from] = balances[from].sub(value);\n            balances[to] =  balances[to].add(value);\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n            return true;\n        }\n        \n}\n\n\ncontract Mitrav is owned,ParentToken{\n\n     /* library used for calculations */\n    using SafeMath for uint256; \n\n     /* Public variables of the token */\n    string public standard = 'Token 0.1';  \n    uint256 public currentSupply= 10000000000000000;\n    string public constant symbol = \"MTR\";\n    string public constant tokenName = \"Mitrav\";\n    uint8 public constant decimals = 8;\n\n    \n\n    mapping (address => bool) public frozenAccount;\n\n\n  ///@notice Default function used for any payments made.\n    function () payable {\n        acceptPayment();    \n    }\n   \n\n   ///@notice Accept payment and transfer to owner account. \n    function acceptPayment() payable {\n        require(msg.value>0);\n        \n        owner.transfer(msg.value);\n    }\n\n\n\n    function Mitrav()ParentToken(currentSupply,tokenName,decimals,symbol){}\n\n\n   ///@notice Provides balance of the account requested \n   ///@param  add Address of the account for which balance is being enquired\n    function balanceOf(address add) constant returns (uint balance){\n       return balances[add];\n    }\n    \n    \n    \n   ///@notice Transfer tokens to the beneficiary account\n   ///@param  to The beneficiary account\n   ///@param  value The amount of tokens to be transfered \n        function transfer(address to, uint value) returns (bool success){\n        require(\n            balances[msg.sender] >= value \n            && value > 0 \n            && (!frozenAccount[msg.sender]) \t\t\t\t\t\t\t\t\t\t// Allow transfer only if account is not frozen\n            );\n            balances[msg.sender] = balances[msg.sender].sub(value);                 \n            balances[to] = balances[to].add(value);                               // Update the balance of beneficiary account\n\t\t\tTransfer(msg.sender,to,value);\n            return true;\n    }\n    \n    \n\n   ///@notice Transfer tokens between accounts\n   ///@param  from The benefactor/sender account.\n   ///@param  to The beneficiary account\n   ///@param  value The amount to be transfered  \n        function transferFrom(address from, address to, uint value) returns (bool success){\n        \n            require(\n            allowance[from][msg.sender] >= value\n            &&balances[from] >= value                                                 //Check if the benefactor has sufficient balance\n            && value > 0 \n            && (!frozenAccount[msg.sender])                                           // Allow transfer only if account is not frozen\n            );\n            \n            balances[from] = balances[from].sub(value);                               // Deduct from the benefactor account\n            balances[to] =  balances[to].add(value);                                  // Update the balance of beneficiary account\n            allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);\n            Transfer(from,to,value);\n            return true;\n        }\n        \n    \n\n   ///@notice Increase the number of coins\n   ///@param  target The address of the account where the coins would be added.\n   ///@param  mintedAmount The amount of coins to be added\n        function mintToken(address target, uint256 mintedAmount) onlyOwner {\n        balances[target] = balances[target].add(mintedAmount);      //Add the amount of coins to be increased to the balance\n        currentSupply = currentSupply.add(mintedAmount);            //Add the amount of coins to be increased to the supply\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n\n   ///@notice Freeze the account at the target address\n   ///@param  target The address of the account to be frozen\n    function freezeAccount(address target, bool freeze) onlyOwner {\n        require(freeze);                                             //Check if account has to be freezed\n        frozenAccount[target] = freeze;                              //Freeze the account  \n        FrozenFunds(target, freeze);\n    }\n\n\n   /// @notice Remove tokens from the system irreversibly\n    /// @param value The amount of money to burn\n    function burn(uint256 value) returns (bool success) {\n        require (balances[msg.sender] > value && value>0);            // Check if the sender has enough balance\n        balances[msg.sender] = balances[msg.sender].sub(value);       // Deduct from the sender\n        currentSupply = currentSupply.sub(value);                     // Update currentSupply\n        Burn(msg.sender, value);\n        return true;\n    }\n\n    function burnFrom(address from, uint256 value) returns (bool success) {\n        require(balances[from] >= value);                                         // Check if the targeted balance is enough\n        require(value <= allowance[from][msg.sender]);                            // Check allowance\n        balances[from] = balances[from].sub(value);                               // Deduct from the targeted balance\n        allowance[from][msg.sender] = allowance[from][msg.sender].sub(value);     // Deduct from the sender's allowance\n        currentSupply = currentSupply.sub(value);                                 // Update currentSupply\n        Burn(from, value);\n        return true;\n    }\n\n\n\n  /* This notifies clients about the amount transfered */\n\tevent Transfer(address indexed _from, address indexed _to,uint256 _value);     \n\n  /* This notifies clients about the amount approved */\n\tevent Approval(address indexed _owner, address indexed _spender,uint256 _value);\n\n  /* This notifies clients about the account freeze */\n\tevent FrozenFunds(address target, bool frozen);\n    \n  /* This notifies clients about the amount burnt */\n   event Burn(address indexed from, uint256 value);\n\n}"
}