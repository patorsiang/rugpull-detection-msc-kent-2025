{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 DUP2 SWAP1 SSTORE PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 AND PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SLOAD DUP3 LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP9 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP3 MSTORE DUP1 DUP4 SHA3 CALLER SWAP1 SWAP6 AND DUP4 MSTORE SWAP4 SWAP1 MSTORE DUP3 SWAP1 SHA3 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE SWAP1 PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH2 CALLER DUP4 DUP4 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT ISZERO PUSH2 JUMPI POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH8 DUP8 MUL SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE SWAP4 SLOAD SWAP1 SWAP3 AND SWAP2 PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP4 PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI DUP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 CALLER DUP7 ADDRESS DUP8 PUSH1 MLOAD DUP6 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI DUP2 PUSH8 MUL SWAP1 POP PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP5 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND SWAP2 AND PUSH32 DUP4 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP2 DUP4 ADD MSTORE PUSH32 PUSH1 DUP4 ADD MSTORE PUSH1 SWAP1 SWAP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 SLOAD ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND BALANCE PUSH7 NOT ADD SWAP2 AND PUSH2 DUP3 ISZERO MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP3 DUP4 MSTORE PUSH1 DUP1 DUP5 SHA3 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP4 ISZERO ISZERO OR SWAP1 SSTORE PUSH32 SWAP1 DUP4 SWAP1 DUP4 SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP3 SWAP1 SSTORE PUSH1 SLOAD SWAP5 SWAP1 SWAP3 AND DUP1 DUP3 MSTORE SWAP2 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE DUP1 SLOAD PUSH20 NOT AND SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 SWAP1 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 DUP2 ADD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE SWAP3 DUP6 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 SHA3 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE SWAP2 PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 JUMP STOP LOG1 PUSH6 SHA3 ORIGIN RETURN PUSH28 UNKNOWN_0xdf STOP UNKNOWN_0x29",
  "opcode_entropy": 4.635410506163755,
  "opcode_count": 3303,
  "unique_opcodes": 66,
  "byte_entropy": 5.821867781683704,
  "byte_60": 0.12362301101591187,
  "byte_40": 0.009995920032639738,
  "byte_52": 0.018971848225214197,
  "byte_04": 0.011219910240718074,
  "byte_36": 0.0004079967360261118,
  "byte_10": 0.0030599755201958386,
  "byte_61": 0.04895960832313342,
  "byte_01": 0.037535699714402286,
  "byte_cc": 0.003875968992248062,
  "byte_57": 0.028151774785801713,
  "byte_63": 0.00897592819257446,
  "byte_ff": 0.008159934720522236,
  "byte_7c": 0.0008159934720522236,
  "byte_00": 0.04079967360261118,
  "byte_35": 0.007139942880456956,
  "byte_16": 0.03223174214606283,
  "byte_06": 0.008159934720522236,
  "byte_fd": 0.014279885760913913,
  "byte_de": 0.0008159934720522236,
  "byte_03": 0.029579763361893104,
  "byte_81": 0.031007751937984496,
  "byte_14": 0.015299877600979192,
  "byte_ce": 0.0006119951040391676,
  "byte_80": 0.04222766217870257,
  "byte_09": 0.0032639738882088943,
  "byte_5e": 0.0002039983680130559,
  "byte_a7": 0.0016319869441044472,
  "byte_b3": 0.0014279885760913912,
  "byte_02": 0.027539779681762546,
  "byte_58": 0.0006119951040391676,
  "byte_11": 0.003875968992248062,
  "byte_d4": 0.0010199918400652795,
  "byte_af": 0.0008159934720522236,
  "byte_8e": 0.0006119951040391676,
  "byte_18": 0.0008159934720522236,
  "byte_0d": 0.00346797225622195,
  "byte_dd": 0.0016319869441044472,
  "byte_22": 0.0004079967360261118,
  "byte_42": 0.0006119951040391676,
  "byte_cf": 0.0010199918400652795,
  "byte_7f": 0.002039983680130559,
  "byte_23": 0.0012239902080783353,
  "byte_b8": 0.0002039983680130559,
  "byte_72": 0.0006119951040391676,
  "byte_df": 0.0006119951040391676,
  "byte_2e": 0.0004079967360261118,
  "byte_1a": 0.0002039983680130559,
  "byte_7d": 0.0002039983680130559,
  "byte_4d": 0.0008159934720522236,
  "byte_07": 0.004079967360261118,
  "byte_31": 0.0008159934720522236,
  "byte_3c": 0.0006119951040391676,
  "byte_e5": 0.0004079967360261118,
  "byte_67": 0.0010199918400652795,
  "byte_1d": 0.0006119951040391676,
  "byte_33": 0.009179926560587515,
  "byte_2f": 0.0006119951040391676,
  "byte_7a": 0.0024479804161566705,
  "byte_46": 0.0004079967360261118,
  "byte_96": 0.0006119951040391676,
  "byte_6c": 0.0012239902080783353,
  "byte_68": 0.0008159934720522236,
  "byte_59": 0.0008159934720522236,
  "byte_4b": 0.0004079967360261118,
  "byte_94": 0.0012239902080783353,
  "byte_f5": 0.0014279885760913912,
  "byte_0e": 0.00346797225622195,
  "byte_6f": 0.0008159934720522236,
  "byte_55": 0.004691962464300286,
  "byte_4e": 0.0008159934720522236,
  "byte_c0": 0.0006119951040391676,
  "byte_82": 0.009179926560587515,
  "byte_5c": 0.0006119951040391676,
  "byte_6b": 0.0002039983680130559,
  "byte_c4": 0.0006119951040391676,
  "byte_95": 0.0016319869441044472,
  "byte_62": 0.0010199918400652795,
  "byte_d2": 0.0012239902080783353,
  "byte_a8": 0.0002039983680130559,
  "byte_6a": 0.0008159934720522236,
  "byte_fc": 0.0016319869441044472,
  "byte_d7": 0.0004079967360261118,
  "byte_15": 0.022235822113423093,
  "byte_b1": 0.0006119951040391676,
  "byte_ed": 0.0006119951040391676,
  "byte_70": 0.0002039983680130559,
  "byte_a0": 0.017135862913096694,
  "byte_75": 0.0002039983680130559,
  "byte_b4": 0.0010199918400652795,
  "byte_4a": 0.0010199918400652795,
  "byte_ea": 0.0008159934720522236,
  "byte_79": 0.0004079967360261118,
  "byte_90": 0.04181966544267646,
  "byte_88": 0.0014279885760913912,
  "byte_3b": 0.0004079967360261118,
  "byte_8d": 0.0008159934720522236,
  "byte_a5": 0.0010199918400652795,
  "byte_cb": 0.0010199918400652795,
  "byte_5b": 0.03671970624235006,
  "byte_d8": 0.0006119951040391676,
  "byte_9b": 0.0006119951040391676,
  "byte_41": 0.0010199918400652795,
  "byte_92": 0.004283965728274173,
  "byte_a9": 0.0004079967360261118,
  "byte_05": 0.004079967360261118,
  "byte_9c": 0.0012239902080783353,
  "byte_bb": 0.0010199918400652795,
  "byte_b6": 0.0006119951040391676,
  "byte_c7": 0.0006119951040391676,
  "byte_c6": 0.0004079967360261118,
  "byte_34": 0.00795593635250918,
  "byte_d0": 0.0004079967360261118,
  "byte_32": 0.0008159934720522236,
  "byte_e6": 0.0004079967360261118,
  "byte_ca": 0.0008159934720522236,
  "byte_e9": 0.0008159934720522236,
  "byte_51": 0.008567931456548347,
  "byte_3d": 0.0006119951040391676,
  "byte_1e": 0.0008159934720522236,
  "byte_d9": 0.0010199918400652795,
  "byte_3f": 0.0002039983680130559,
  "byte_83": 0.011219910240718074,
  "byte_d6": 0.0002039983680130559,
  "byte_e8": 0.0002039983680130559,
  "byte_f0": 0.0002039983680130559,
  "byte_6e": 0.0012239902080783353,
  "byte_1f": 0.0018359853121175031,
  "byte_76": 0.0004079967360261118,
  "byte_ac": 0.0004079967360261118,
  "byte_47": 0.0002039983680130559,
  "byte_2b": 0.0006119951040391676,
  "byte_bf": 0.0002039983680130559,
  "byte_3e": 0.0004079967360261118,
  "byte_48": 0.0006119951040391676,
  "byte_f7": 0.0002039983680130559,
  "byte_e7": 0.0010199918400652795,
  "byte_24": 0.002039983680130559,
  "byte_0a": 0.019583843329253364,
  "byte_ef": 0.0006119951040391676,
  "byte_6d": 0.0004079967360261118,
  "byte_f2": 0.0010199918400652795,
  "byte_e3": 0.0002039983680130559,
  "byte_8b": 0.0004079967360261118,
  "byte_54": 0.018767849857201143,
  "byte_e1": 0.0014279885760913912,
  "byte_73": 0.0008159934720522236,
  "byte_56": 0.017135862913096694,
  "byte_20": 0.01733986128110975,
  "byte_91": 0.01591187270501836,
  "byte_50": 0.02039983680130559,
  "byte_19": 0.0010199918400652795,
  "byte_f3": 0.0012239902080783353,
  "byte_99": 0.0006119951040391676,
  "byte_b2": 0.0002039983680130559,
  "byte_ba": 0.0026519787841697267,
  "byte_85": 0.0030599755201958386,
  "byte_44": 0.0010199918400652795,
  "byte_cd": 0.0002039983680130559,
  "byte_12": 0.0016319869441044472,
  "byte_08": 0.00448796409628723,
  "byte_43": 0.0004079967360261118,
  "byte_28": 0.0008159934720522236,
  "byte_30": 0.0012239902080783353,
  "byte_64": 0.0010199918400652795,
  "byte_f8": 0.0004079967360261118,
  "byte_c2": 0.0006119951040391676,
  "byte_c8": 0.0006119951040391676,
  "byte_e2": 0.0006119951040391676,
  "byte_53": 0.0002039983680130559,
  "byte_2d": 0.0002039983680130559,
  "byte_ae": 0.0002039983680130559,
  "byte_0b": 0.005711954304365565,
  "byte_8a": 0.0006119951040391676,
  "byte_9d": 0.0006119951040391676,
  "byte_b0": 0.0010199918400652795,
  "byte_0c": 0.002039983680130559,
  "byte_f1": 0.0014279885760913912,
  "byte_84": 0.00346797225622195,
  "byte_37": 0.0008159934720522236,
  "byte_27": 0.0002039983680130559,
  "byte_0f": 0.0026519787841697267,
  "byte_a1": 0.0010199918400652795,
  "byte_b7": 0.0008159934720522236,
  "byte_93": 0.0016319869441044472,
  "byte_a3": 0.0008159934720522236,
  "byte_39": 0.0008159934720522236,
  "byte_4c": 0.0002039983680130559,
  "byte_5f": 0.0006119951040391676,
  "byte_ec": 0.0004079967360261118,
  "byte_86": 0.0008159934720522236,
  "byte_77": 0.0002039983680130559,
  "byte_be": 0.0004079967360261118,
  "byte_a4": 0.0002039983680130559,
  "byte_dc": 0.0004079967360261118,
  "byte_db": 0.0004079967360261118,
  "byte_87": 0.0014279885760913912,
  "byte_e0": 0.0008159934720522236,
  "byte_bd": 0.0004079967360261118,
  "byte_71": 0.0004079967360261118,
  "byte_5d": 0.0004079967360261118,
  "byte_a2": 0.0006119951040391676,
  "byte_13": 0.0002039983680130559,
  "byte_b5": 0.0004079967360261118,
  "byte_ad": 0.0006119951040391676,
  "byte_1b": 0.0004079967360261118,
  "byte_69": 0.0008159934720522236,
  "byte_aa": 0.0004079967360261118,
  "byte_5a": 0.0006119951040391676,
  "byte_8f": 0.0002039983680130559,
  "byte_4f": 0.0004079967360261118,
  "byte_17": 0.0006119951040391676,
  "byte_38": 0.0004079967360261118,
  "byte_49": 0.0004079967360261118,
  "byte_26": 0.0002039983680130559,
  "byte_e4": 0.0004079967360261118,
  "byte_a6": 0.0002039983680130559,
  "byte_c3": 0.0004079967360261118,
  "byte_ee": 0.0002039983680130559,
  "byte_c5": 0.0002039983680130559,
  "byte_1c": 0.0002039983680130559,
  "byte_66": 0.0006119951040391676,
  "byte_65": 0.0004079967360261118,
  "byte_7e": 0.0002039983680130559,
  "byte_8c": 0.0002039983680130559,
  "byte_b9": 0.0004079967360261118,
  "byte_45": 0.0002039983680130559,
  "byte_7b": 0.0002039983680130559,
  "byte_2a": 0.0002039983680130559,
  "byte_f6": 0.0002039983680130559,
  "byte_3a": 0.0002039983680130559,
  "byte_29": 0.0002039983680130559,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 3,
  "event_nums": 0,
  "creation_block": 5009694,
  "creation_timestamp": 1517461394,
  "life_time": 1449629.0,
  "duration_seconds": 21300447.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 2.0694935949173237e-06,
  "avg_gas_limit": 578081.0,
  "std_gas_limit": 746644.8281483416,
  "avg_gas_used": 573081.0,
  "std_gas_used": 750173.6528302408,
  "avg_gas_price": 15300000000.0,
  "std_gas_price": 8777623064.74063,
  "transferownership_num": 1,
  "approve_num": 1,
  "timeline_sequence": [
    [
      5009694,
      1517461394,
      11,
      76,
      0,
      1633982,
      22000000000,
      0,
      1,
      4127714,
      1633982,
      18111219
    ],
    [
      5022661,
      1517652903,
      13,
      92,
      0,
      54880,
      21000000000,
      0,
      1,
      4467039,
      39880,
      18098252
    ],
    [
      6459323,
      1538761841,
      8,
      32,
      0,
      45381,
      2900000000,
      0,
      1,
      1882758,
      45381,
      16661590
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.19;\ncontract tokenRecipient { function receiveApproval(address from, uint256 value, address token, bytes extraData) public; }\ncontract Ethereum_Cash_Pro_Coin\n  { \n     /* Variables  */\n    string  public name;                                                        // name  of contract\n    string  public symbol;                                                      // symbol of contract\n    uint8   public decimals;                                                    // how many decimals to keep , 18 is best \n    uint256 public totalSupply;                                                 // how many tokens to create\n    uint256 public remaining;                                                   // how many tokens has left\n    uint    public ethRate;                                                     // current rate of ether\n    address public owner;                                                       // contract creator\n    uint256 public amountCollected;                                             // how much funds has been collected\n    uint    public icoStatus;                                                   // allow / disallow online purchase\n    uint    public icoTokenPrice;                                               // token price, start with 10 cents\n    address public benAddress;                                                  // funds withdraw address\n    address public bkaddress;                                                   \n    uint    public allowTransferToken;                                          // allow / disallow token transfer for members\n    \n     /* Array  */\n    mapping (address => uint256) public balanceOf;                              // array of all balances\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n    \n    /* Events  */\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n    event TransferSell(address indexed from, address indexed to, uint256 value, string typex); // only for ico sales\n    \n\n     /* Initializes contract with initial supply tokens to the creator of the contract */\n    function Ethereum_Cash_Pro_Coin() public\n    {\n      totalSupply = 200000000000000000000000000000;                                 // as the decimals are 18, we add 18 zero after total supply, as all values are stored in wei\n      owner =  msg.sender;                                                      // Set owner of contract\n      balanceOf[owner] = totalSupply;                                           // Give the creator all initial tokens\n       name = \"Ethereum Cash Pro\";                                                     // Set the name for display purposes\n      symbol = \"ECP\";                                                          // Set the symbol for display purposes\n      decimals = 18;                                                            // Amount of decimals for display purposes\n      remaining = totalSupply;                                                  // How many tokens are left\n      ethRate = 1100;                                                            // default token price\n      icoStatus = 1;                                                            // default ico status\n      icoTokenPrice = 50;                                                       // values are in cents\n      benAddress = 0x4532828EC057e6cFa04a42b153d74B345084C4C2;                  // funds withdraw address\n      bkaddress  = 0x1D38b496176bDaB78D430cebf25B2Fe413d3BF84;                   \n      allowTransferToken = 0;                                                   // default set to disable, it will be enable after ICO is over\n    }\n\n   modifier onlyOwner()\n    {\n        require((msg.sender == owner) || (msg.sender ==  bkaddress));\n        _;\n    }\n\n\n    function () public payable                                                  // called when ether is send to contract\n    {\n    }    \n    \n    function sellOffline(address rec_address,uint256 token_amount) public onlyOwner \n    {\n        if (remaining > 0)\n        {\n            uint finalTokens =  (token_amount  * (10 ** 18));              \n            if(finalTokens < remaining)\n                {\n                    remaining = remaining - finalTokens;\n                    _transfer(owner,rec_address, finalTokens);    \n                    TransferSell(owner, rec_address, finalTokens,'Offline');\n                }\n            else\n                {\n                    revert();\n                }\n        }\n        else\n        {\n            revert();\n        }        \n    }\n    \n    function getEthRate() onlyOwner public constant returns  (uint)            // Get current rate of ether \n    {\n        return ethRate;\n    }\n\n    \n    function getConBal() onlyOwner public constant returns  (uint)            // Get  Balance \n    {\n        return this.balance;\n    }    \n    \n    function setEthRate (uint newEthRate) public  onlyOwner                    // Set ether price\n    {\n        ethRate = newEthRate;\n    } \n\n\n    function getTokenPrice() onlyOwner public constant returns  (uint)         // Get current token price\n    {\n        return icoTokenPrice;\n    }\n    \n    function setTokenPrice (uint newTokenRate) public  onlyOwner               // Set one token price\n    {\n        icoTokenPrice = newTokenRate;\n    }     \n    \n    \n    function setTransferStatus (uint status) public  onlyOwner                 // Set transfer status\n    {\n        allowTransferToken = status;\n    }   \n    \n    function changeIcoStatus (uint8 statx)  public onlyOwner                   // Change ICO Status\n    {\n        icoStatus = statx;\n    } \n    \n\n    function withdraw(uint amountWith) public onlyOwner                        // withdraw partical amount\n        {\n            if((msg.sender == owner) || (msg.sender ==  bkaddress))\n            {\n                benAddress.transfer(amountWith);\n            }\n            else\n            {\n                revert();\n            }\n        }\n\n    function withdraw_all() public onlyOwner                                   // call to withdraw all available balance\n        {\n            if((msg.sender == owner) || (msg.sender ==  bkaddress) )\n            {\n                var amountWith = this.balance - 10000000000000000;\n                benAddress.transfer(amountWith);\n            }\n            else\n            {\n                revert();\n            }\n        }\n\n    function mintToken(uint256 tokensToMint) public onlyOwner \n        {\n            if(tokensToMint > 0)\n            {\n                var totalTokenToMint = tokensToMint * (10 ** 18);\n                balanceOf[owner] += totalTokenToMint;\n                totalSupply += totalTokenToMint;\n                Transfer(0, owner, totalTokenToMint);\n            }\n        }\n\t\t\n\n\t /* Admin Trasfer  */\n\t function adm_trasfer(address _from,address _to, uint256 _value)  public onlyOwner\n\t\t  {\n\t\t\t  _transfer(_from, _to, _value);\n\t\t  }\n\t\t\n\n    function freezeAccount(address target, bool freeze) public onlyOwner \n        {\n            frozenAccount[target] = freeze;\n            FrozenFunds(target, freeze);\n        }\n            \n\n    function getCollectedAmount() onlyOwner public constant returns (uint256 balance) \n        {\n            return amountCollected;\n        }        \n\n    function balanceOf(address _owner) public constant returns (uint256 balance) \n        {\n            return balanceOf[_owner];\n        }\n\n    function totalSupply() private constant returns (uint256 tsupply) \n        {\n            tsupply = totalSupply;\n        }    \n\n\n    function transferOwnership(address newOwner) public onlyOwner \n        { \n            balanceOf[owner] = 0;                        \n            balanceOf[newOwner] = remaining;               \n            owner = newOwner; \n        }        \n\n  /* Internal transfer, only can be called by this contract */\n  function _transfer(address _from, address _to, uint _value) internal \n      {\n          if(allowTransferToken == 1 || _from == owner )\n          {\n              require(!frozenAccount[_from]);                                   // Prevent transfer from frozenfunds\n              require (_to != 0x0);                                             // Prevent transfer to 0x0 address. Use burn() instead\n              require (balanceOf[_from] > _value);                              // Check if the sender has enough\n              require (balanceOf[_to] + _value > balanceOf[_to]);               // Check for overflows\n              balanceOf[_from] -= _value;                                       // Subtract from the sender\n              balanceOf[_to] += _value;                                         // Add to the recipient\n              Transfer(_from, _to, _value);                                     // raise event\n          }\n          else\n          {\n               revert();\n          }\n      }\n\n  function transfer(address _to, uint256 _value)  public\n      {\n          _transfer(msg.sender, _to, _value);\n      }\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) \n      {\n          require (_value < allowance[_from][msg.sender]);                      // Check allowance\n          allowance[_from][msg.sender] -= _value;\n          _transfer(_from, _to, _value);\n          return true;\n      }\n\n  function approve(address _spender, uint256 _value) public returns (bool success) \n      {\n          allowance[msg.sender][_spender] = _value;\n          return true;\n      }\n\n  function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success)\n      {\n          tokenRecipient spender = tokenRecipient(_spender);\n          if (approve(_spender, _value)) {\n              spender.receiveApproval(msg.sender, _value, this, _extraData);\n              return true;\n          }\n      }        \n\n  function burn(uint256 _value) public returns (bool success) \n      {\n          require (balanceOf[msg.sender] > _value);                             // Check if the sender has enough\n          balanceOf[msg.sender] -= _value;                                      // Subtract from the sender\n          totalSupply -= _value;                                                // Updates totalSupply\n          Burn(msg.sender, _value);\n          return true;\n      }\n\n  function burnFrom(address _from, uint256 _value) public returns (bool success) \n      {\n          require(balanceOf[_from] >= _value);                                  // Check if the targeted balance is enough\n          require(_value <= allowance[_from][msg.sender]);                      // Check allowance\n          balanceOf[_from] -= _value;                                           // Subtract from the targeted balance\n          allowance[_from][msg.sender] -= _value;                               // Subtract from the sender's allowance\n          totalSupply -= _value;                                                // Update totalSupply\n          Burn(_from, _value);\n          return true;\n      }\n} // end of contract"
}