{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP4 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH32 DUP2 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 DUP7 PUSH1 MLOAD DUP1 DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 PUSH1 MLOAD DUP1 DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 SWAP3 POP PUSH1 PUSH1 DUP5 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP2 POP PUSH1 SLOAD PUSH1 PUSH1 DUP6 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD SUB SWAP1 POP PUSH1 SLOAD PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 DUP6 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH2 DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP CALLER PUSH20 AND DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH20 AND PUSH2 ADDRESS PUSH20 AND BALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 DUP8 DUP8 PUSH1 MLOAD DUP1 DUP4 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP5 DUP5 PUSH1 MLOAD DUP1 DUP4 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 SWAP3 POP PUSH1 PUSH1 DUP5 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP2 POP PUSH1 SLOAD PUSH1 PUSH1 DUP6 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD SUB SWAP1 POP PUSH1 SLOAD PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 DUP6 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH2 DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP CALLER PUSH20 AND DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SLOAD CALLVALUE LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 DUP7 DUP7 PUSH1 MLOAD DUP1 DUP4 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 DUP4 PUSH1 MLOAD DUP1 DUP4 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 SWAP2 POP PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 CALLER PUSH20 AND DUP2 MSTORE PUSH1 ADD CALLVALUE DUP2 MSTORE POP PUSH1 PUSH1 DUP5 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SSTORE SWAP1 POP POP PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 ADD SWAP2 SWAP1 POP SSTORE POP DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 PUSH1 NOT AND SWAP1 SSTORE POP CALLER PUSH20 AND PUSH32 CALLVALUE PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 CALLER PUSH20 AND PUSH1 PUSH1 DUP4 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 DUP4 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD MUL PUSH1 PUSH1 DUP6 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD SUB SWAP2 POP PUSH1 PUSH1 SLOAD MUL PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 DUP6 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH2 DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP CALLER PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP DUP2 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP2 PUSH20 AND DUP2 PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SLOAD CALLVALUE GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 DUP6 PUSH1 MLOAD DUP1 DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 PUSH1 MLOAD DUP1 DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 SWAP2 POP PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 CALLER PUSH20 AND DUP2 MSTORE PUSH1 ADD CALLVALUE DUP2 MSTORE POP PUSH1 PUSH1 DUP5 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SSTORE SWAP1 POP POP PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 ADD SWAP2 SWAP1 POP SSTORE POP DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 PUSH1 NOT AND SWAP1 SSTORE POP CALLER PUSH20 AND PUSH32 CALLVALUE PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD SWAP1 POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH2 PUSH1 SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP2 POP PUSH1 PUSH1 DUP4 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD SWAP1 POP DUP2 DUP2 SWAP4 POP SWAP4 POP POP POP SWAP2 POP SWAP2 JUMP STOP LOG1 PUSH6 SHA3 DUP2 GASLIMIT UNKNOWN_0xe9 UNKNOWN_0xba CALL UNKNOWN_0xfc UNKNOWN_0xd4 EXTCODECOPY PUSH17 UNKNOWN_0x5e CALLCODE INVALID_0x70",
  "opcode_entropy": 4.692281497402406,
  "opcode_count": 2380,
  "unique_opcodes": 66,
  "byte_entropy": 4.845722194577712,
  "byte_60": 0.0937362152624614,
  "byte_80": 0.032201146890163214,
  "byte_40": 0.012571680635200706,
  "byte_52": 0.01940891045434495,
  "byte_04": 0.005513895015438906,
  "byte_36": 0.0022055580061755625,
  "byte_10": 0.00176444640494045,
  "byte_61": 0.019188354653727393,
  "byte_00": 0.05690339655932951,
  "byte_d0": 0.0006616674018526688,
  "byte_57": 0.009042787825319806,
  "byte_35": 0.0030877812086457872,
  "byte_7c": 0.0004411116012351125,
  "byte_01": 0.04168504631671813,
  "byte_90": 0.035288928098809,
  "byte_63": 0.0033083370092633437,
  "byte_ff": 0.2706219673577415,
  "byte_16": 0.02999558888398765,
  "byte_1c": 0.00022055580061755624,
  "byte_f1": 0.0015438906043228936,
  "byte_96": 0.000882223202470225,
  "byte_df": 0.0006616674018526688,
  "byte_14": 0.00529333921482135,
  "byte_d5": 0.0004411116012351125,
  "byte_1d": 0.000882223202470225,
  "byte_f4": 0.000882223202470225,
  "byte_cc": 0.000882223202470225,
  "byte_fc": 0.00176444640494045,
  "byte_02": 0.007719453021614468,
  "byte_26": 0.0006616674018526688,
  "byte_09": 0.0011027790030877812,
  "byte_58": 0.0004411116012351125,
  "byte_a5": 0.000882223202470225,
  "byte_2d": 0.00022055580061755624,
  "byte_17": 0.00176444640494045,
  "byte_c6": 0.000882223202470225,
  "byte_51": 0.013233348037053375,
  "byte_3c": 0.0006616674018526688,
  "byte_cf": 0.00022055580061755624,
  "byte_d6": 0.00022055580061755624,
  "byte_0b": 0.00176444640494045,
  "byte_6f": 0.0004411116012351125,
  "byte_b1": 0.000882223202470225,
  "byte_eb": 0.0004411116012351125,
  "byte_0c": 0.0013233348037053375,
  "byte_86": 0.0013233348037053375,
  "byte_85": 0.0033083370092633437,
  "byte_5b": 0.015659461843846492,
  "byte_7f": 0.00176444640494045,
  "byte_8d": 0.0006616674018526688,
  "byte_cb": 0.000882223202470225,
  "byte_e3": 0.0011027790030877812,
  "byte_9c": 0.0004411116012351125,
  "byte_a2": 0.0015438906043228936,
  "byte_b9": 0.0004411116012351125,
  "byte_e4": 0.0004411116012351125,
  "byte_3a": 0.000882223202470225,
  "byte_a6": 0.0011027790030877812,
  "byte_65": 0.000882223202470225,
  "byte_b2": 0.0004411116012351125,
  "byte_83": 0.005734450816056462,
  "byte_6c": 0.00022055580061755624,
  "byte_f9": 0.0011027790030877812,
  "byte_da": 0.00022055580061755624,
  "byte_e1": 0.000882223202470225,
  "byte_fa": 0.0004411116012351125,
  "byte_d3": 0.0004411116012351125,
  "byte_e9": 0.0004411116012351125,
  "byte_41": 0.0004411116012351125,
  "byte_78": 0.000882223202470225,
  "byte_f7": 0.00022055580061755624,
  "byte_3b": 0.00022055580061755624,
  "byte_48": 0.00022055580061755624,
  "byte_08": 0.001985002205558006,
  "byte_03": 0.01345390383767093,
  "byte_fd": 0.005072783414203794,
  "byte_34": 0.0033083370092633437,
  "byte_15": 0.010366122629025143,
  "byte_50": 0.0388178209086899,
  "byte_81": 0.030657256285840317,
  "byte_20": 0.02889280988089987,
  "byte_92": 0.005072783414203794,
  "byte_91": 0.013895015438906044,
  "byte_56": 0.0061755624172915745,
  "byte_0e": 0.000882223202470225,
  "byte_ed": 0.0006616674018526688,
  "byte_82": 0.007498897220996913,
  "byte_f3": 0.0013233348037053375,
  "byte_4f": 0.00022055580061755624,
  "byte_19": 0.016100573445081607,
  "byte_5d": 0.0004411116012351125,
  "byte_66": 0.00022055580061755624,
  "byte_05": 0.0013233348037053375,
  "byte_af": 0.0004411116012351125,
  "byte_84": 0.00176444640494045,
  "byte_f6": 0.0004411116012351125,
  "byte_9b": 0.0004411116012351125,
  "byte_06": 0.00176444640494045,
  "byte_b7": 0.0006616674018526688,
  "byte_ef": 0.0011027790030877812,
  "byte_f8": 0.0006616674018526688,
  "byte_94": 0.00022055580061755624,
  "byte_73": 0.01345390383767093,
  "byte_6a": 0.00022055580061755624,
  "byte_8e": 0.00022055580061755624,
  "byte_2c": 0.0006616674018526688,
  "byte_d1": 0.0006616674018526688,
  "byte_f5": 0.00022055580061755624,
  "byte_0d": 0.0006616674018526688,
  "byte_11": 0.0015438906043228936,
  "byte_54": 0.009483899426554919,
  "byte_0a": 0.002646669607410675,
  "byte_33": 0.005513895015438906,
  "byte_ac": 0.000882223202470225,
  "byte_55": 0.0037494486104984563,
  "byte_c4": 0.00022055580061755624,
  "byte_c0": 0.0004411116012351125,
  "byte_1b": 0.0006616674018526688,
  "byte_53": 0.0006616674018526688,
  "byte_71": 0.00022055580061755624,
  "byte_3f": 0.00022055580061755624,
  "byte_77": 0.00022055580061755624,
  "byte_38": 0.0006616674018526688,
  "byte_cd": 0.00022055580061755624,
  "byte_18": 0.00022055580061755624,
  "byte_87": 0.0006616674018526688,
  "byte_59": 0.0006616674018526688,
  "byte_2e": 0.0004411116012351125,
  "byte_ec": 0.00022055580061755624,
  "byte_97": 0.0006616674018526688,
  "byte_ee": 0.00022055580061755624,
  "byte_68": 0.0004411116012351125,
  "byte_a1": 0.0006616674018526688,
  "byte_88": 0.0024261138067931186,
  "byte_93": 0.0015438906043228936,
  "byte_43": 0.0006616674018526688,
  "byte_3d": 0.002646669607410675,
  "byte_3e": 0.0011027790030877812,
  "byte_4e": 0.0004411116012351125,
  "byte_8c": 0.0004411116012351125,
  "byte_e6": 0.000882223202470225,
  "byte_1f": 0.0004411116012351125,
  "byte_2b": 0.0004411116012351125,
  "byte_9e": 0.0006616674018526688,
  "byte_a9": 0.0006616674018526688,
  "byte_24": 0.000882223202470225,
  "byte_75": 0.000882223202470225,
  "byte_42": 0.0004411116012351125,
  "byte_47": 0.0004411116012351125,
  "byte_4b": 0.0006616674018526688,
  "byte_a3": 0.0006616674018526688,
  "byte_30": 0.0006616674018526688,
  "byte_31": 0.0006616674018526688,
  "byte_ae": 0.00022055580061755624,
  "byte_07": 0.00022055580061755624,
  "byte_27": 0.0004411116012351125,
  "byte_1e": 0.0006616674018526688,
  "byte_7d": 0.0004411116012351125,
  "byte_79": 0.0004411116012351125,
  "byte_23": 0.0004411116012351125,
  "byte_5f": 0.0004411116012351125,
  "byte_70": 0.000882223202470225,
  "byte_ea": 0.0004411116012351125,
  "byte_bf": 0.0004411116012351125,
  "byte_5a": 0.0004411116012351125,
  "byte_98": 0.0004411116012351125,
  "byte_29": 0.0006616674018526688,
  "byte_b0": 0.00022055580061755624,
  "byte_32": 0.0006616674018526688,
  "byte_8b": 0.00022055580061755624,
  "byte_25": 0.00022055580061755624,
  "byte_d8": 0.00022055580061755624,
  "byte_c1": 0.00022055580061755624,
  "byte_a4": 0.00022055580061755624,
  "byte_7e": 0.00022055580061755624,
  "byte_b3": 0.0004411116012351125,
  "byte_6b": 0.00022055580061755624,
  "byte_ce": 0.00022055580061755624,
  "byte_13": 0.00022055580061755624,
  "byte_95": 0.00022055580061755624,
  "byte_bb": 0.0004411116012351125,
  "byte_fb": 0.00022055580061755624,
  "byte_dc": 0.00022055580061755624,
  "byte_74": 0.00022055580061755624,
  "byte_45": 0.0004411116012351125,
  "byte_99": 0.00022055580061755624,
  "byte_aa": 0.00022055580061755624,
  "byte_62": 0.00022055580061755624,
  "byte_7a": 0.0004411116012351125,
  "byte_72": 0.00022055580061755624,
  "byte_ba": 0.00022055580061755624,
  "byte_d4": 0.00022055580061755624,
  "byte_b4": 0.00022055580061755624,
  "byte_28": 0.00022055580061755624,
  "byte_ad": 0.00022055580061755624,
  "byte_5e": 0.00022055580061755624,
  "byte_f2": 0.00022055580061755624,
  "num_nodes": 8,
  "num_edges": 10,
  "avg_degree": 2.5,
  "density": 0.17857142857142858,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 24,
  "event_nums": 12,
  "creation_block": 6032838,
  "creation_timestamp": 1532599966,
  "life_time": 16752405.0,
  "duration_seconds": 218300245.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 9,
  "num_buyers": 5,
  "num_sellers": 7,
  "num_creator_transfers": 6,
  "buy_amt": 1.22e+17,
  "sell_amt": 1.22e+17,
  "avg_value": 9760000000000000.0,
  "txn_per_block": 1.43263003535134e-06,
  "avg_gas_limit": 1425947.4166666667,
  "std_gas_limit": 2243895.398786504,
  "avg_gas_used": 90091.0,
  "std_gas_used": 252289.7125997544,
  "avg_gas_price": 3498478093.125,
  "std_gas_price": 4164778335.189321,
  "logdeposit_num": 6,
  "loggettransfer_num": 6,
  "atinversebrah_num": 1,
  "advanceddeposit_num": 2,
  "deposit_num": 4,
  "gettransfer_num": 9,
  "getadvancedtransfer_num": 2,
  "timeline_sequence": [
    [
      6032838,
      1532599966,
      39,
      90,
      0,
      3000000,
      3000000000,
      0,
      1,
      5307228,
      1286908,
      17088426
    ],
    [
      6033101,
      1532603827,
      19,
      88,
      50000000000000000,
      128169,
      1210000000,
      0,
      1,
      7836473,
      106808,
      17088163
    ],
    [
      6033127,
      1532604190,
      20,
      122,
      50000000000000000,
      109786,
      3000000000,
      0,
      1,
      6121631,
      91489,
      17088137
    ],
    [
      6036002,
      1532647169,
      367,
      10,
      0,
      7600027,
      3010000000,
      1,
      0,
      377089,
      23471,
      17085262
    ],
    [
      6036059,
      1532647951,
      368,
      5,
      0,
      7600027,
      4000000000,
      1,
      0,
      320202,
      23471,
      17085205
    ],
    [
      6036073,
      1532648084,
      369,
      13,
      0,
      66748,
      20200000000,
      0,
      1,
      441792,
      29080,
      17085191
    ],
    [
      6037773,
      1532672818,
      9,
      23,
      0,
      44970,
      10000000000,
      0,
      1,
      1182479,
      29553,
      17083491
    ],
    [
      6037796,
      1532673177,
      370,
      221,
      10000000000000000,
      158581,
      5000000000,
      0,
      1,
      7579524,
      105721,
      17083468
    ],
    [
      6037804,
      1532673287,
      371,
      21,
      10000000000000000,
      137040,
      5000000000,
      0,
      1,
      845441,
      91360,
      17083460
    ],
    [
      6038331,
      1532681266,
      41,
      64,
      0,
      3000000,
      4000000000,
      1,
      0,
      3545129,
      26287,
      17082933
    ],
    [
      6038337,
      1532681413,
      42,
      90,
      0,
      3000000,
      4000000000,
      1,
      0,
      4114910,
      22831,
      17082927
    ],
    [
      6038349,
      1532681554,
      43,
      48,
      0,
      3000000,
      4000000000,
      1,
      0,
      2284269,
      22447,
      17082915
    ],
    [
      6038375,
      1532681945,
      44,
      75,
      0,
      3000000,
      4000000000,
      1,
      0,
      3804518,
      22447,
      17082889
    ],
    [
      6038397,
      1532682325,
      45,
      16,
      0,
      3000000,
      4000000000,
      1,
      0,
      918277,
      23194,
      17082867
    ],
    [
      6083865,
      1533344279,
      27,
      141,
      1000000000000000,
      109172,
      2000000000,
      0,
      1,
      6431602,
      90977,
      17037399
    ],
    [
      6083892,
      1533344604,
      0,
      47,
      0,
      52784,
      1000000000,
      1,
      0,
      6491044,
      22703,
      17037372
    ],
    [
      6131661,
      1534040392,
      61,
      45,
      1000000000000000,
      158485,
      4000000000,
      0,
      1,
      2337111,
      105657,
      16989603
    ],
    [
      22785243,
      1750900211,
      39,
      45,
      0,
      43149,
      2543474235,
      0,
      1,
      8662177,
      37780,
      336021
    ],
    [
      6036073,
      1532648084,
      0,
      0,
      50000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6037773,
      1532672818,
      0,
      0,
      50000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6038346,
      1532681523,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6038393,
      1532682270,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6083891,
      1533344598,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      22785243,
      1750900211,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity 0.4.23;\n\ncontract PasswordEscrow {\n  address public owner;\n  uint256 public commissionFee;\n  uint256 public totalFee;\n\n  //data\n  struct Transfer {\n    address from;\n    uint256 amount;\n  }\n\n  mapping(bytes32 => Transfer) private transferToPassword;\n\n  mapping(address => uint256) private indexToAddress;\n  mapping(address => mapping(uint256 => bytes32)) private passwordToAddress;\n\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  modifier passwordOwner(bytes32 _byte) {\n    require(\n      transferToPassword[_byte].from == msg.sender &&\n      transferToPassword[_byte].amount > 0\n    );\n    _;\n  }\n\n  event LogChangeCommissionFee(uint256 fee);\n  event LogChangeOwner(address indexed exOwner, address indexed newOwner);\n  event LogDeposit(address indexed from, uint256 amount);\n  event LogGetTransfer(address indexed from, address indexed recipient, uint256 amount);\n  event LogEmergency(address indexed from, uint256 amount);\n\n\n\n  constructor(uint256 _fee) public {\n    commissionFee = _fee;\n    owner = msg.sender;\n  }\n\n  function changeCommissionFee(uint256 _fee) public onlyOwner {\n    commissionFee = _fee;\n\n    emit LogChangeCommissionFee(_fee);\n  }\n\n  function changeOwner(address _newOwner) public onlyOwner {\n    address exOwner = owner;\n    owner = _newOwner;\n\n    emit LogChangeOwner(exOwner, _newOwner);\n  }\n\n\n  //simple transfer\n  function deposit(bytes32 _password) public payable {\n    require(\n      msg.value > commissionFee &&\n      transferToPassword[sha3(_password)].amount == 0\n    );\n\n    bytes32 pass = sha3(_password);\n    transferToPassword[pass] = Transfer(msg.sender, msg.value);\n\n    uint256 index = indexToAddress[msg.sender];\n\n    indexToAddress[msg.sender]++;\n    passwordToAddress[msg.sender][index] = pass;\n\n    emit LogDeposit(msg.sender, msg.value);\n  }\n\n  function getTransfer(bytes32 _password) public payable {\n    require(\n      transferToPassword[sha3(_password)].amount > 0\n    );\n\n    bytes32 pass = sha3(_password);\n    address from = transferToPassword[pass].from;\n    uint256 amount = transferToPassword[pass].amount - commissionFee;\n    totalFee += commissionFee;\n\n    transferToPassword[pass].amount = 0;\n\n    msg.sender.transfer(amount);\n\n    emit LogGetTransfer(from, msg.sender, amount);\n  }\n\n\n\n  //advanced transfer\n  function AdvancedDeposit(bytes32 _password, bytes32 _num) public payable {\n    require(\n      msg.value >= commissionFee &&\n      transferToPassword[sha3(_password, _num)].amount == 0\n    );\n\n    bytes32 pass = sha3(_password, _num);\n    transferToPassword[pass] = Transfer(msg.sender, msg.value);\n\n    uint256 index = indexToAddress[msg.sender];\n\n    indexToAddress[msg.sender]++;\n    passwordToAddress[msg.sender][index] = pass;\n\n\n    emit LogDeposit(msg.sender, msg.value);\n  }\n\n  function getAdvancedTransfer(bytes32 _password, bytes32 _num) public payable {\n    require(\n      transferToPassword[sha3(_password, _num)].amount > 0\n    );\n\n    bytes32 pass = sha3(_password, _num);\n    address from = transferToPassword[pass].from;\n    uint256 amount = transferToPassword[pass].amount - commissionFee;\n    totalFee += commissionFee;\n\n    transferToPassword[pass].amount = 0;\n\n    msg.sender.transfer(amount);\n\n    emit LogGetTransfer(from, msg.sender, amount);\n  }\n\n  function viewIndexNumber() public view returns(uint256) {\n    return indexToAddress[msg.sender];\n  }\n\n  function viewPassword(uint256 _index) public view returns(bytes32, uint256) {\n    bytes32 hash = passwordToAddress[msg.sender][_index];\n    uint256 value = transferToPassword[hash].amount;\n\n    return (hash, value);\n  }\n\n  function emergency(bytes32 _byte) public payable passwordOwner(_byte) {\n\n    uint256 amount = transferToPassword[_byte].amount - commissionFee * 2;\n    totalFee += commissionFee * 2;\n    transferToPassword[_byte].amount = 0;\n\n    msg.sender.transfer(amount);\n\n    emit LogEmergency(msg.sender, amount);\n  }\n\n  function withdrawFee() public payable onlyOwner {\n    require( totalFee > 0);\n\n    uint256 fee = totalFee;\n    totalFee = 0;\n\n    msg.sender.transfer(totalFee);\n  }\n\n  function withdraw() public payable onlyOwner {\n    msg.sender.transfer(this.balance);\n  }\n\n\n}"
}