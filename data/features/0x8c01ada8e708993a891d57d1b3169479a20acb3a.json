{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 DUP2 CALLDATALOAD DUP2 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 DUP2 DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 DUP2 ISZERO DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 DUP6 SWAP1 SSTORE PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SLOAD SWAP4 DUP7 AND DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP8 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 DUP2 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND SWAP2 PUSH32 SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SWAP1 DUP2 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE SWAP1 PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 JUMPDEST JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 JUMPDEST DUP3 MLOAD DUP2 LT ISZERO PUSH2 JUMPI PUSH2 DUP4 DUP3 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD DUP4 DUP4 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH2 JUMP JUMPDEST POP JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND PUSH21 OR SWAP1 SSTORE PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 JUMPDEST JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 CALLER SWAP1 SWAP2 AND SWAP1 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 PUSH29 SWAP12 UNKNOWN_0xc3 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.715977326987947,
  "opcode_count": 1761,
  "unique_opcodes": 60,
  "byte_entropy": 5.700577502048804,
  "byte_60": 0.10851297040555352,
  "byte_40": 0.020460358056265986,
  "byte_52": 0.027767628790646693,
  "byte_36": 0.00036536353671903543,
  "byte_15": 0.014979905005480453,
  "byte_61": 0.037267080745341616,
  "byte_00": 0.0803799780781878,
  "byte_d8": 0.0025575447570332483,
  "byte_57": 0.0175374497625137,
  "byte_63": 0.009864815491413957,
  "byte_ff": 0.02009499451954695,
  "byte_7c": 0.0007307270734380709,
  "byte_01": 0.04567044208987943,
  "byte_35": 0.006576543660942638,
  "byte_04": 0.007307270734380708,
  "byte_16": 0.023017902813299233,
  "byte_05": 0.003288271830471319,
  "byte_d2": 0.0007307270734380709,
  "byte_03": 0.0288637194008038,
  "byte_5b": 0.04238217025940811,
  "byte_81": 0.03945926196565583,
  "byte_14": 0.007307270734380708,
  "byte_dd": 0.0025575447570332483,
  "byte_80": 0.03580562659846547,
  "byte_06": 0.0021921812203142127,
  "byte_fd": 0.009134088417975887,
  "byte_de": 0.0010960906101571063,
  "byte_09": 0.0025575447570332483,
  "byte_5e": 0.0007307270734380709,
  "byte_a7": 0.0010960906101571063,
  "byte_b3": 0.0014614541468761417,
  "byte_8f": 0.0007307270734380709,
  "byte_18": 0.00036536353671903543,
  "byte_0d": 0.00036536353671903543,
  "byte_c5": 0.00036536353671903543,
  "byte_23": 0.0014614541468761417,
  "byte_b8": 0.0007307270734380709,
  "byte_72": 0.0007307270734380709,
  "byte_ea": 0.0007307270734380709,
  "byte_31": 0.0010960906101571063,
  "byte_3c": 0.0010960906101571063,
  "byte_e5": 0.0007307270734380709,
  "byte_67": 0.0010960906101571063,
  "byte_02": 0.016441359152356595,
  "byte_26": 0.00036536353671903543,
  "byte_c1": 0.00036536353671903543,
  "byte_0f": 0.0021921812203142127,
  "byte_19": 0.0021921812203142127,
  "byte_4b": 0.00036536353671903543,
  "byte_24": 0.0029229082937522835,
  "byte_34": 0.005845816587504567,
  "byte_82": 0.00876872488125685,
  "byte_70": 0.0007307270734380709,
  "byte_a0": 0.010595542564852027,
  "byte_12": 0.0010960906101571063,
  "byte_7d": 0.0021921812203142127,
  "byte_64": 0.0007307270734380709,
  "byte_bc": 0.0007307270734380709,
  "byte_b4": 0.00036536353671903543,
  "byte_43": 0.0007307270734380709,
  "byte_8d": 0.0010960906101571063,
  "byte_a5": 0.0007307270734380709,
  "byte_cb": 0.0007307270734380709,
  "byte_6a": 0.00036536353671903543,
  "byte_95": 0.0014614541468761417,
  "byte_9b": 0.0014614541468761417,
  "byte_41": 0.0007307270734380709,
  "byte_99": 0.00036536353671903543,
  "byte_a9": 0.0007307270734380709,
  "byte_9c": 0.0007307270734380709,
  "byte_bb": 0.00036536353671903543,
  "byte_62": 0.0007307270734380709,
  "byte_ed": 0.0007307270734380709,
  "byte_3e": 0.0007307270734380709,
  "byte_5a": 0.0010960906101571063,
  "byte_f2": 0.0010960906101571063,
  "byte_e3": 0.0007307270734380709,
  "byte_8b": 0.00036536353671903543,
  "byte_91": 0.0175374497625137,
  "byte_e8": 0.00036536353671903543,
  "byte_f0": 0.0025575447570332483,
  "byte_b2": 0.0007307270734380709,
  "byte_56": 0.01680672268907563,
  "byte_51": 0.019729630982827914,
  "byte_90": 0.04895871392035075,
  "byte_20": 0.0288637194008038,
  "byte_f3": 0.005115089514066497,
  "byte_17": 0.0025575447570332483,
  "byte_d3": 0.0007307270734380709,
  "byte_83": 0.012422360248447204,
  "byte_50": 0.024844720496894408,
  "byte_10": 0.0029229082937522835,
  "byte_54": 0.010230179028132993,
  "byte_84": 0.005845816587504567,
  "byte_3b": 0.0007307270734380709,
  "byte_1f": 0.0010960906101571063,
  "byte_0a": 0.015710632078918523,
  "byte_92": 0.005480453050785532,
  "byte_9a": 0.00036536353671903543,
  "byte_d0": 0.00036536353671903543,
  "byte_b1": 0.0007307270734380709,
  "byte_f5": 0.001826817683595177,
  "byte_44": 0.0007307270734380709,
  "byte_b7": 0.00036536353671903543,
  "byte_cc": 0.00036536353671903543,
  "byte_d1": 0.0010960906101571063,
  "byte_8c": 0.0007307270734380709,
  "byte_93": 0.005115089514066497,
  "byte_37": 0.0014614541468761417,
  "byte_94": 0.0014614541468761417,
  "byte_96": 0.00036536353671903543,
  "byte_07": 0.0029229082937522835,
  "byte_1d": 0.0007307270734380709,
  "byte_08": 0.003653635367190354,
  "byte_4e": 0.00036536353671903543,
  "byte_42": 0.0007307270734380709,
  "byte_75": 0.00036536353671903543,
  "byte_c9": 0.00036536353671903543,
  "byte_a4": 0.00036536353671903543,
  "byte_2f": 0.00036536353671903543,
  "byte_65": 0.0010960906101571063,
  "byte_cf": 0.00036536353671903543,
  "byte_fc": 0.0010960906101571063,
  "byte_74": 0.001826817683595177,
  "byte_0b": 0.00036536353671903543,
  "byte_7f": 0.0025575447570332483,
  "byte_69": 0.001826817683595177,
  "byte_6c": 0.00036536353671903543,
  "byte_6b": 0.0007307270734380709,
  "byte_6f": 0.00036536353671903543,
  "byte_6e": 0.001826817683595177,
  "byte_33": 0.0047497259773474606,
  "byte_87": 0.0010960906101571063,
  "byte_47": 0.00036536353671903543,
  "byte_88": 0.00036536353671903543,
  "byte_85": 0.0029229082937522835,
  "byte_55": 0.00401899890390939,
  "byte_e1": 0.00036536353671903543,
  "byte_eb": 0.00036536353671903543,
  "byte_ec": 0.00036536353671903543,
  "byte_4f": 0.0007307270734380709,
  "byte_71": 0.00036536353671903543,
  "byte_1e": 0.0010960906101571063,
  "byte_c0": 0.00036536353671903543,
  "byte_f7": 0.00036536353671903543,
  "byte_29": 0.0007307270734380709,
  "byte_c8": 0.0010960906101571063,
  "byte_c7": 0.00036536353671903543,
  "byte_c3": 0.0010960906101571063,
  "byte_b9": 0.0007307270734380709,
  "byte_25": 0.0007307270734380709,
  "byte_a3": 0.0014614541468761417,
  "byte_86": 0.0025575447570332483,
  "byte_fe": 0.0021921812203142127,
  "byte_5c": 0.00036536353671903543,
  "byte_ad": 0.0007307270734380709,
  "byte_1b": 0.0007307270734380709,
  "byte_e2": 0.0007307270734380709,
  "byte_c2": 0.0007307270734380709,
  "byte_b0": 0.0007307270734380709,
  "byte_68": 0.0010960906101571063,
  "byte_aa": 0.0007307270734380709,
  "byte_2b": 0.0010960906101571063,
  "byte_f1": 0.0010960906101571063,
  "byte_c4": 0.0007307270734380709,
  "byte_a1": 0.0014614541468761417,
  "byte_28": 0.0007307270734380709,
  "byte_4d": 0.0010960906101571063,
  "byte_ef": 0.0010960906101571063,
  "byte_2a": 0.0007307270734380709,
  "byte_98": 0.00036536353671903543,
  "byte_79": 0.00036536353671903543,
  "byte_3a": 0.0007307270734380709,
  "byte_73": 0.0007307270734380709,
  "byte_4c": 0.0007307270734380709,
  "byte_0e": 0.00036536353671903543,
  "byte_a2": 0.0007307270734380709,
  "byte_13": 0.00036536353671903543,
  "byte_21": 0.00036536353671903543,
  "byte_39": 0.00036536353671903543,
  "byte_1c": 0.00036536353671903543,
  "byte_d5": 0.00036536353671903543,
  "byte_ae": 0.00036536353671903543,
  "byte_fb": 0.00036536353671903543,
  "byte_a8": 0.0007307270734380709,
  "byte_32": 0.00036536353671903543,
  "byte_ca": 0.00036536353671903543,
  "byte_9d": 0.0007307270734380709,
  "byte_59": 0.00036536353671903543,
  "byte_fa": 0.00036536353671903543,
  "byte_49": 0.00036536353671903543,
  "byte_38": 0.00036536353671903543,
  "byte_6d": 0.00036536353671903543,
  "byte_11": 0.00036536353671903543,
  "byte_7a": 0.0010960906101571063,
  "byte_30": 0.00036536353671903543,
  "byte_58": 0.00036536353671903543,
  "byte_a6": 0.00036536353671903543,
  "byte_66": 0.00036536353671903543,
  "byte_1a": 0.00036536353671903543,
  "byte_45": 0.00036536353671903543,
  "byte_bd": 0.00036536353671903543,
  "byte_ba": 0.00036536353671903543,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 3,
  "event_nums": 2,
  "creation_block": 4397753,
  "creation_timestamp": 1508532104,
  "life_time": 1137.0,
  "duration_seconds": 15214.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.0026362038664323375,
  "avg_gas_limit": 4712388.0,
  "std_gas_limit": 0.0,
  "avg_gas_used": 307116.3333333333,
  "std_gas_used": 350564.8581288331,
  "avg_gas_price": 23666666666.666668,
  "std_gas_price": 1885618083.1641266,
  "mint_num": 1,
  "transfer_num": 1,
  "timeline_sequence": [
    [
      4397753,
      1508532104,
      2,
      17,
      0,
      4712388,
      25000000000,
      0,
      1,
      1560962,
      802816,
      18723166
    ],
    [
      4397787,
      1508532581,
      4,
      3,
      0,
      4712388,
      25000000000,
      0,
      1,
      260966,
      66680,
      18723132
    ],
    [
      4398890,
      1508547318,
      5,
      28,
      0,
      4712388,
      21000000000,
      0,
      1,
      1509355,
      51853,
      18722029
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.13;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will recieve the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {\n    totalSupply = totalSupply.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\ncontract Vit is MintableToken {\n  string public constant name = \"VitalikCoin\";\n  string public constant symbol = \"VIT\";\n  uint   public constant decimals = 18;\n  \n  function airdrop(address[] addresses, uint[] amounts) onlyOwner{\n    for (uint i = 0; i < addresses.length; i++) {\n       super.transfer(addresses[i], amounts[i]);\n    }\n  }\n}"
}