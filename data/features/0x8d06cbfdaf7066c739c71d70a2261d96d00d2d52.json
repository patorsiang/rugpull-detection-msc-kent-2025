{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 DUP2 ISZERO DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 DUP6 SWAP1 SSTORE PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SLOAD SWAP4 DUP7 AND DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP8 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 DUP2 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND SWAP2 PUSH32 SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH3 SWAP1 PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP4 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD SWAP2 ISZERO ISZERO PUSH21 MUL PUSH21 NOT SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SWAP2 PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP5 EXTCODESIZE SWAP2 SWAP1 PUSH2 SWAP1 DUP6 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP8 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP6 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SWAP2 SWAP1 SWAP2 SSTORE DUP3 GT ISZERO PUSH2 JUMPI POP DUP4 PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH4 CALLVALUE CALLER DUP8 DUP8 PUSH1 MLOAD DUP6 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP POP PUSH2 JUMP JUMPDEST PUSH1 CALLVALUE GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND CALLVALUE DUP1 ISZERO PUSH2 MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP7 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP4 MLOAD GT ISZERO PUSH2 JUMPI DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP7 DUP7 PUSH1 MLOAD DUP3 DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE SWAP1 DUP3 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE SWAP1 JUMP STOP LOG1 PUSH6 SHA3 CODESIZE UNKNOWN_0x4f LOG3 UNKNOWN_0xe SUB SMOD UNKNOWN_0xed RETURNDATASIZE SWAP16 INVALID_0x7d",
  "opcode_entropy": 4.79052165014516,
  "opcode_count": 1950,
  "unique_opcodes": 68,
  "byte_entropy": 5.765616729612747,
  "byte_60": 0.10901399284087211,
  "byte_40": 0.01464367068011715,
  "byte_52": 0.02570777741620566,
  "byte_04": 0.009111617312072893,
  "byte_36": 0.0003254149040026033,
  "byte_10": 0.0016270745200130166,
  "byte_61": 0.040676863000325414,
  "byte_00": 0.08167914090465343,
  "byte_e5": 0.0009762447120078099,
  "byte_57": 0.018223234624145785,
  "byte_63": 0.009762447120078099,
  "byte_ff": 0.027009437032216074,
  "byte_7c": 0.0009762447120078099,
  "byte_01": 0.04328018223234624,
  "byte_35": 0.0078099576960624795,
  "byte_16": 0.026358607224210868,
  "byte_06": 0.006182883176049463,
  "byte_fd": 0.010413276928083305,
  "byte_de": 0.0006508298080052066,
  "byte_03": 0.026684022128213473,
  "byte_81": 0.03319232020826554,
  "byte_14": 0.00683371298405467,
  "byte_ea": 0.0003254149040026033,
  "byte_80": 0.03351773511226814,
  "byte_09": 0.0016270745200130166,
  "byte_5e": 0.0006508298080052066,
  "byte_a7": 0.0013016596160104132,
  "byte_b3": 0.0019524894240156199,
  "byte_74": 0.0016270745200130166,
  "byte_18": 0.0003254149040026033,
  "byte_0d": 0.0003254149040026033,
  "byte_dd": 0.00292873413602343,
  "byte_aa": 0.0016270745200130166,
  "byte_23": 0.0013016596160104132,
  "byte_b8": 0.0006508298080052066,
  "byte_72": 0.0009762447120078099,
  "byte_cf": 0.0003254149040026033,
  "byte_c1": 0.0003254149040026033,
  "byte_0f": 0.0003254149040026033,
  "byte_19": 0.004230393752033843,
  "byte_f7": 0.0009762447120078099,
  "byte_4c": 0.0006508298080052066,
  "byte_d4": 0.0003254149040026033,
  "byte_12": 0.0006508298080052066,
  "byte_d5": 0.0003254149040026033,
  "byte_02": 0.023104458184184835,
  "byte_1b": 0.0016270745200130166,
  "byte_70": 0.0006508298080052066,
  "byte_a0": 0.01366742596810934,
  "byte_82": 0.012365766352098927,
  "byte_31": 0.0003254149040026033,
  "byte_2e": 0.0003254149040026033,
  "byte_8d": 0.0013016596160104132,
  "byte_a5": 0.0009762447120078099,
  "byte_cb": 0.0006508298080052066,
  "byte_5b": 0.03254149040026033,
  "byte_4d": 0.0013016596160104132,
  "byte_95": 0.002277904328018223,
  "byte_d8": 0.0006508298080052066,
  "byte_9b": 0.0016270745200130166,
  "byte_41": 0.0006508298080052066,
  "byte_a9": 0.0006508298080052066,
  "byte_05": 0.0035795639440286365,
  "byte_9c": 0.0003254149040026033,
  "byte_bb": 0.0003254149040026033,
  "byte_8f": 0.0003254149040026033,
  "byte_be": 0.0009762447120078099,
  "byte_45": 0.0006508298080052066,
  "byte_62": 0.0013016596160104132,
  "byte_b1": 0.0003254149040026033,
  "byte_ed": 0.0006508298080052066,
  "byte_3e": 0.0003254149040026033,
  "byte_ef": 0.0013016596160104132,
  "byte_7a": 0.0009762447120078099,
  "byte_c0": 0.0013016596160104132,
  "byte_f2": 0.0016270745200130166,
  "byte_e3": 0.0003254149040026033,
  "byte_8b": 0.0003254149040026033,
  "byte_ad": 0.0016270745200130166,
  "byte_fc": 0.0016270745200130166,
  "byte_a3": 0.0026033192320208264,
  "byte_b5": 0.0006508298080052066,
  "byte_cc": 0.0006508298080052066,
  "byte_34": 0.006182883176049463,
  "byte_15": 0.015945330296127564,
  "byte_f5": 0.0026033192320208264,
  "byte_eb": 0.0006508298080052066,
  "byte_56": 0.017246989912137977,
  "byte_51": 0.013016596160104133,
  "byte_20": 0.023104458184184835,
  "byte_90": 0.04165310771233322,
  "byte_83": 0.015945330296127564,
  "byte_91": 0.01366742596810934,
  "byte_50": 0.029612756264236904,
  "byte_39": 0.0009762447120078099,
  "byte_21": 0.0006508298080052066,
  "byte_1f": 0.0019524894240156199,
  "byte_66": 0.0003254149040026033,
  "byte_0a": 0.017246989912137977,
  "byte_92": 0.0032541490400260333,
  "byte_f3": 0.0016270745200130166,
  "byte_7f": 0.0026033192320208264,
  "byte_96": 0.0019524894240156199,
  "byte_24": 0.002277904328018223,
  "byte_22": 0.0009762447120078099,
  "byte_bd": 0.0013016596160104132,
  "byte_c8": 0.0016270745200130166,
  "byte_da": 0.0003254149040026033,
  "byte_44": 0.0009762447120078099,
  "byte_ce": 0.0003254149040026033,
  "byte_e1": 0.0009762447120078099,
  "byte_26": 0.0003254149040026033,
  "byte_33": 0.005532053368044257,
  "byte_58": 0.0016270745200130166,
  "byte_4e": 0.0009762447120078099,
  "byte_87": 0.0026033192320208264,
  "byte_5d": 0.0003254149040026033,
  "byte_9a": 0.0006508298080052066,
  "byte_94": 0.0026033192320208264,
  "byte_bc": 0.0006508298080052066,
  "byte_64": 0.0006508298080052066,
  "byte_84": 0.006182883176049463,
  "byte_37": 0.0019524894240156199,
  "byte_c3": 0.0013016596160104132,
  "byte_7b": 0.0006508298080052066,
  "byte_07": 0.0026033192320208264,
  "byte_7d": 0.0013016596160104132,
  "byte_d7": 0.0003254149040026033,
  "byte_d3": 0.0003254149040026033,
  "byte_59": 0.0006508298080052066,
  "byte_54": 0.0078099576960624795,
  "byte_6f": 0.0003254149040026033,
  "byte_6b": 0.0003254149040026033,
  "byte_65": 0.0006508298080052066,
  "byte_6e": 0.0003254149040026033,
  "byte_93": 0.005206638464041653,
  "byte_5f": 0.0003254149040026033,
  "byte_88": 0.0013016596160104132,
  "byte_85": 0.0032541490400260333,
  "byte_55": 0.0039049788480312398,
  "byte_8c": 0.0003254149040026033,
  "byte_ec": 0.0009762447120078099,
  "byte_d1": 0.0006508298080052066,
  "byte_4f": 0.0006508298080052066,
  "byte_71": 0.0003254149040026033,
  "byte_42": 0.0009762447120078099,
  "byte_1e": 0.0006508298080052066,
  "byte_b2": 0.0006508298080052066,
  "byte_29": 0.0006508298080052066,
  "byte_c7": 0.0003254149040026033,
  "byte_b9": 0.0003254149040026033,
  "byte_25": 0.0006508298080052066,
  "byte_86": 0.0032541490400260333,
  "byte_08": 0.005206638464041653,
  "byte_1d": 0.0016270745200130166,
  "byte_4a": 0.0009762447120078099,
  "byte_73": 0.0013016596160104132,
  "byte_e2": 0.0009762447120078099,
  "byte_69": 0.0009762447120078099,
  "byte_c2": 0.0009762447120078099,
  "byte_b0": 0.0009762447120078099,
  "byte_68": 0.0013016596160104132,
  "byte_2b": 0.0009762447120078099,
  "byte_f1": 0.0016270745200130166,
  "byte_c4": 0.0009762447120078099,
  "byte_a1": 0.0016270745200130166,
  "byte_28": 0.0009762447120078099,
  "byte_5a": 0.0013016596160104132,
  "byte_e4": 0.0003254149040026033,
  "byte_f9": 0.0009762447120078099,
  "byte_11": 0.0016270745200130166,
  "byte_0e": 0.0006508298080052066,
  "byte_9e": 0.0003254149040026033,
  "byte_0b": 0.002277904328018223,
  "byte_3d": 0.0006508298080052066,
  "byte_17": 0.0009762447120078099,
  "byte_98": 0.0003254149040026033,
  "byte_d0": 0.0003254149040026033,
  "byte_ee": 0.0009762447120078099,
  "byte_2c": 0.0003254149040026033,
  "byte_fe": 0.0009762447120078099,
  "byte_3f": 0.0003254149040026033,
  "byte_9f": 0.0006508298080052066,
  "byte_3b": 0.0006508298080052066,
  "byte_8a": 0.0006508298080052066,
  "byte_b6": 0.0009762447120078099,
  "byte_6a": 0.0003254149040026033,
  "byte_fa": 0.0003254149040026033,
  "byte_47": 0.0003254149040026033,
  "byte_8e": 0.0003254149040026033,
  "byte_e6": 0.0003254149040026033,
  "byte_3c": 0.0006508298080052066,
  "byte_5c": 0.0006508298080052066,
  "byte_7e": 0.0003254149040026033,
  "byte_e9": 0.0003254149040026033,
  "byte_ac": 0.0003254149040026033,
  "byte_30": 0.0003254149040026033,
  "byte_38": 0.0003254149040026033,
  "byte_ae": 0.0003254149040026033,
  "byte_d9": 0.0003254149040026033,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 3,
  "event_nums": 4,
  "creation_block": 4935247,
  "creation_timestamp": 1516372848,
  "life_time": 28092.0,
  "duration_seconds": 413591.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.00010678816787099989,
  "avg_gas_limit": 833274.3333333334,
  "std_gas_limit": 1084276.239362563,
  "avg_gas_used": 258151.66666666666,
  "std_gas_used": 323559.3310088412,
  "avg_gas_price": 14000000000.0,
  "std_gas_price": 9899494936.611666,
  "transfer_num": 2,
  "timeline_sequence": [
    [
      4963220,
      1516784723,
      9,
      209,
      0,
      77901,
      21000000000,
      0,
      1,
      7045193,
      36934,
      18158052
    ],
    [
      4963339,
      1516786439,
      11,
      43,
      0,
      55305,
      21000000000,
      0,
      1,
      1773619,
      21870,
      18157933
    ],
    [
      4935247,
      1516372848,
      0,
      0,
      0,
      2366617,
      0,
      0,
      0,
      0,
      715651,
      0
    ]
  ],
  "sourcecode": "/*\n * NYX Token smart contract\n *\n * Supports ERC20, ERC223 stadards\n *\n * The NYX token is mintable during Token Sale. On Token Sale finalization it\n * will be minted up to the cap and minting will be finished forever\n */\n\n\npragma solidity ^0.4.18;\n\n\n/*************************************************************************\n * import \"./include/MintableToken.sol\" : start\n *************************************************************************/\n\n/*************************************************************************\n * import \"zeppelin/contracts/token/StandardToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"./BasicToken.sol\" : start\n *************************************************************************/\n\n\n/*************************************************************************\n * import \"./ERC20Basic.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function transfer(address to, uint256 value) returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/*************************************************************************\n * import \"./ERC20Basic.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"../math/SafeMath.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n/*************************************************************************\n * import \"../math/SafeMath.sol\" : end\n *************************************************************************/\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) returns (bool) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n/*************************************************************************\n * import \"./BasicToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./ERC20.sol\" : start\n *************************************************************************/\n\n\n\n\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint256);\n  function transferFrom(address from, address to, uint256 value) returns (bool);\n  function approve(address spender, uint256 value) returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n/*************************************************************************\n * import \"./ERC20.sol\" : end\n *************************************************************************/\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amout of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n    var _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) returns (bool) {\n\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling `approve(_spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n/*************************************************************************\n * import \"zeppelin/contracts/token/StandardToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"zeppelin/contracts/ownership/Ownable.sol\" : start\n *************************************************************************/\n\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner {\n    if (newOwner != address(0)) {\n      owner = newOwner;\n    }\n  }\n\n}\n/*************************************************************************\n * import \"zeppelin/contracts/ownership/Ownable.sol\" : end\n *************************************************************************/\n\n/**\n * Mintable token\n */\n\ncontract MintableToken is StandardToken, Ownable {\n    uint public totalSupply = 0;\n    address minter;\n\n    modifier onlyMinter(){\n        require(minter == msg.sender);\n        _;\n    }\n\n    function setMinter(address _minter) onlyOwner {\n        minter = _minter;\n    }\n\n    function mint(address _to, uint _amount) onlyMinter {\n        totalSupply = totalSupply.add(_amount);\n        balances[_to] = balances[_to].add(_amount);\n        Transfer(address(0x0), _to, _amount);\n    }\n}\n/*************************************************************************\n * import \"./include/MintableToken.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./include/ERC23PayableToken.sol\" : start\n *************************************************************************/\n\n\n\n/*************************************************************************\n * import \"./ERC23.sol\" : start\n *************************************************************************/\n\n\n\n\n/*\n * ERC23\n * ERC23 interface\n * see https://github.com/ethereum/EIPs/issues/223\n */\ncontract ERC23 is ERC20Basic {\n    function transfer(address to, uint value, bytes data);\n\n    event TransferData(address indexed from, address indexed to, uint value, bytes data);\n}\n/*************************************************************************\n * import \"./ERC23.sol\" : end\n *************************************************************************/\n/*************************************************************************\n * import \"./ERC23PayableReceiver.sol\" : start\n *************************************************************************/\n\n/*\n* Contract that is working with ERC223 tokens\n*/\n\ncontract ERC23PayableReceiver {\n    function tokenFallback(address _from, uint _value, bytes _data) payable;\n}\n\n/*************************************************************************\n * import \"./ERC23PayableReceiver.sol\" : end\n *************************************************************************/\n\n/**  https://github.com/Dexaran/ERC23-tokens/blob/master/token/ERC223/ERC223BasicToken.sol\n *\n */\ncontract ERC23PayableToken is BasicToken, ERC23{\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address to, uint value, bytes data){\n        transferAndPay(to, value, data);\n    }\n\n    // Standard function transfer similar to ERC20 transfer with no _data .\n    // Added due to backwards compatibility reasons .\n    function transfer(address to, uint value) returns (bool){\n        bytes memory empty;\n        transfer(to, value, empty);\n        return true;\n    }\n\n    function transferAndPay(address to, uint value, bytes data) payable {\n\n        uint codeLength;\n\n        assembly {\n            // Retrieve the size of the code on target address, this needs assembly .\n            codeLength := extcodesize(to)\n        }\n\n        balances[msg.sender] = balances[msg.sender].sub(value);\n        balances[to] = balances[to].add(value);\n\n        if(codeLength>0) {\n            ERC23PayableReceiver receiver = ERC23PayableReceiver(to);\n            receiver.tokenFallback.value(msg.value)(msg.sender, value, data);\n        }else if(msg.value > 0){\n            to.transfer(msg.value);\n        }\n\n        Transfer(msg.sender, to, value);\n        if(data.length > 0)\n            TransferData(msg.sender, to, value, data);\n    }\n}\n/*************************************************************************\n * import \"./include/ERC23PayableToken.sol\" : end\n *************************************************************************/\n\n\ncontract NYXToken is MintableToken, ERC23PayableToken {\n    string public constant name = \"NYX Token\";\n    string public constant symbol = \"NYX\";\n    uint constant decimals = 0;\n\n    bool public transferEnabled = true;\n\n    //The cap is 15 mln NYX\n    uint private constant CAP = 15*(10**6);\n\n    function mint(address _to, uint _amount){\n        require(totalSupply.add(_amount) <= CAP);\n        super.mint(_to, _amount);\n    }\n\n    function NYXToken(address team) {\n        //Transfer ownership on the token to team on creation\n        transferOwnership(team);\n        // minter is the TokenSale contract\n        minter = msg.sender; \n        /// Preserve 3 000 000 tokens for the team\n        mint(team, 3000000);\n    }\n\n    /**\n    * Overriding all transfers to check if transfers are enabled\n    */\n    function transferAndPay(address to, uint value, bytes data) payable{\n        require(transferEnabled);\n        super.transferAndPay(to, value, data);\n    }\n\n    function enableTransfer(bool enabled) onlyOwner{\n        transferEnabled = enabled;\n    }\n\n}"
}