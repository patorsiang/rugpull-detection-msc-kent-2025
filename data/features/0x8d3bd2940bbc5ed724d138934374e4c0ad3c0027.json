{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP1 PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SLOAD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP3 POP DUP2 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP2 POP SWAP3 POP SWAP3 POP SWAP3 POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 DUP4 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 DUP4 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 PUSH1 PUSH2 PUSH1 DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP4 PUSH20 AND PUSH1 PUSH20 AND PUSH32 DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 DUP4 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP5 EQ ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE POP SWAP1 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xa8 PUSH11 UNKNOWN_0xd7 CODESIZE STOP SLOAD EQ SWAP16 PUSH11 UNKNOWN_0xc6 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.686456550614168,
  "opcode_count": 3363,
  "unique_opcodes": 59,
  "byte_entropy": 4.78759752540266,
  "byte_60": 0.07194670614359734,
  "byte_40": 0.008882309400444115,
  "byte_52": 0.017172464840858624,
  "byte_04": 0.008734270910436713,
  "byte_36": 0.00029607698001480384,
  "byte_10": 0.0025166543301258326,
  "byte_61": 0.030940044411547,
  "byte_00": 0.03360473723168024,
  "byte_fc": 0.0007401924500370096,
  "byte_57": 0.013323464100666173,
  "byte_35": 0.002072538860103627,
  "byte_7c": 0.00014803849000740192,
  "byte_01": 0.0380458919319023,
  "byte_90": 0.03982235381199112,
  "byte_63": 0.0051813471502590676,
  "byte_ff": 0.30969652109548484,
  "byte_16": 0.025018504811250925,
  "byte_80": 0.03005181347150259,
  "byte_05": 0.00384900074019245,
  "byte_d2": 0.00029607698001480384,
  "byte_03": 0.011843079200592153,
  "byte_5b": 0.024278312361213916,
  "byte_14": 0.005773501110288675,
  "byte_06": 0.001924500370096225,
  "byte_fd": 0.006809770540340488,
  "byte_de": 0.0005921539600296077,
  "byte_2e": 0.00029607698001480384,
  "byte_09": 0.001628423390081421,
  "byte_5e": 0.00014803849000740192,
  "byte_a7": 0.0005921539600296077,
  "byte_b3": 0.0005921539600296077,
  "byte_bc": 0.0008882309400444115,
  "byte_18": 0.0005921539600296077,
  "byte_0d": 0.0011843079200592153,
  "byte_dd": 0.0010362694300518134,
  "byte_02": 0.007253886010362694,
  "byte_23": 0.0010362694300518134,
  "byte_b8": 0.00044411547002220575,
  "byte_72": 0.00029607698001480384,
  "byte_3f": 0.00029607698001480384,
  "byte_28": 0.0005921539600296077,
  "byte_9d": 0.00029607698001480384,
  "byte_e6": 0.00029607698001480384,
  "byte_15": 0.022649888971132494,
  "byte_31": 0.00029607698001480384,
  "byte_3c": 0.0005921539600296077,
  "byte_e5": 0.00029607698001480384,
  "byte_67": 0.00029607698001480384,
  "byte_b9": 0.00029607698001480384,
  "byte_4b": 0.00014803849000740192,
  "byte_a8": 0.0005921539600296077,
  "byte_3a": 0.0007401924500370096,
  "byte_e8": 0.00029607698001480384,
  "byte_c1": 0.00014803849000740192,
  "byte_0f": 0.0008882309400444115,
  "byte_19": 0.003997039230199852,
  "byte_5c": 0.0005921539600296077,
  "byte_97": 0.00044411547002220575,
  "byte_5a": 0.0005921539600296077,
  "byte_bb": 0.0005921539600296077,
  "byte_70": 0.00044411547002220575,
  "byte_a0": 0.00044411547002220575,
  "byte_82": 0.00991857883049593,
  "byte_84": 0.003997039230199852,
  "byte_7d": 0.0008882309400444115,
  "byte_64": 0.00044411547002220575,
  "byte_b4": 0.0008882309400444115,
  "byte_d1": 0.00044411547002220575,
  "byte_56": 0.010954848260547743,
  "byte_cb": 0.0007401924500370096,
  "byte_59": 0.0005921539600296077,
  "byte_fe": 0.0010362694300518134,
  "byte_8d": 0.0005921539600296077,
  "byte_a5": 0.00029607698001480384,
  "byte_13": 0.0007401924500370096,
  "byte_95": 0.0007401924500370096,
  "byte_d8": 0.00029607698001480384,
  "byte_9b": 0.0005921539600296077,
  "byte_41": 0.00044411547002220575,
  "byte_68": 0.0010362694300518134,
  "byte_a9": 0.00044411547002220575,
  "byte_9c": 0.00029607698001480384,
  "byte_f6": 0.00029607698001480384,
  "byte_62": 0.00044411547002220575,
  "byte_ed": 0.00044411547002220575,
  "byte_3e": 0.00044411547002220575,
  "byte_50": 0.02857142857142857,
  "byte_f2": 0.0008882309400444115,
  "byte_e3": 0.00044411547002220575,
  "byte_8b": 0.00029607698001480384,
  "byte_34": 0.0029607698001480384,
  "byte_0c": 0.0008882309400444115,
  "byte_f5": 0.0011843079200592153,
  "byte_51": 0.010362694300518135,
  "byte_81": 0.025610658771280534,
  "byte_20": 0.024870466321243522,
  "byte_91": 0.01776461880088823,
  "byte_f3": 0.0028127313101406364,
  "byte_39": 0.00029607698001480384,
  "byte_07": 0.002072538860103627,
  "byte_08": 0.0023686158401184307,
  "byte_83": 0.00843819393042191,
  "byte_66": 0.00029607698001480384,
  "byte_1f": 0.0026646928201332345,
  "byte_ae": 0.00029607698001480384,
  "byte_0a": 0.004885270170244264,
  "byte_92": 0.003552923760177646,
  "byte_c7": 0.00044411547002220575,
  "byte_73": 0.0153960029607698,
  "byte_a6": 0.00029607698001480384,
  "byte_21": 0.00029607698001480384,
  "byte_29": 0.0010362694300518134,
  "byte_d6": 0.00014803849000740192,
  "byte_4a": 0.00014803849000740192,
  "byte_9e": 0.0005921539600296077,
  "byte_dc": 0.00029607698001480384,
  "byte_c3": 0.00044411547002220575,
  "byte_0e": 0.0010362694300518134,
  "byte_86": 0.001628423390081421,
  "byte_fa": 0.00044411547002220575,
  "byte_42": 0.00044411547002220575,
  "byte_85": 0.0011843079200592153,
  "byte_7b": 0.00029607698001480384,
  "byte_c4": 0.0007401924500370096,
  "byte_cc": 0.00029607698001480384,
  "byte_6a": 0.0005921539600296077,
  "byte_fb": 0.00044411547002220575,
  "byte_3d": 0.00044411547002220575,
  "byte_6d": 0.00014803849000740192,
  "byte_8f": 0.00014803849000740192,
  "byte_e4": 0.00029607698001480384,
  "byte_c9": 0.00029607698001480384,
  "byte_11": 0.0023686158401184307,
  "byte_0b": 0.0005921539600296077,
  "byte_1e": 0.0007401924500370096,
  "byte_26": 0.00014803849000740192,
  "byte_78": 0.00029607698001480384,
  "byte_46": 0.00014803849000740192,
  "byte_cd": 0.00044411547002220575,
  "byte_54": 0.00917838638045892,
  "byte_ce": 0.00014803849000740192,
  "byte_25": 0.00044411547002220575,
  "byte_17": 0.001628423390081421,
  "byte_93": 0.00029607698001480384,
  "byte_1a": 0.0007401924500370096,
  "byte_9f": 0.00044411547002220575,
  "byte_58": 0.00044411547002220575,
  "byte_2d": 0.00029607698001480384,
  "byte_3b": 0.00029607698001480384,
  "byte_33": 0.0023686158401184307,
  "byte_d9": 0.00014803849000740192,
  "byte_f4": 0.00029607698001480384,
  "byte_55": 0.001776461880088823,
  "byte_7f": 0.0014803849000740192,
  "byte_2f": 0.00044411547002220575,
  "byte_df": 0.00029607698001480384,
  "byte_ad": 0.0005921539600296077,
  "byte_12": 0.0005921539600296077,
  "byte_ac": 0.00014803849000740192,
  "byte_e0": 0.00044411547002220575,
  "byte_79": 0.00029607698001480384,
  "byte_8c": 0.00029607698001480384,
  "byte_a1": 0.0011843079200592153,
  "byte_65": 0.0005921539600296077,
  "byte_27": 0.00014803849000740192,
  "byte_43": 0.00014803849000740192,
  "byte_32": 0.00014803849000740192,
  "byte_2b": 0.0007401924500370096,
  "byte_2a": 0.00014803849000740192,
  "byte_ca": 0.00029607698001480384,
  "byte_ea": 0.00014803849000740192,
  "byte_f0": 0.00029607698001480384,
  "byte_d3": 0.00044411547002220575,
  "byte_b1": 0.00014803849000740192,
  "byte_f1": 0.0007401924500370096,
  "byte_69": 0.0005921539600296077,
  "byte_22": 0.00044411547002220575,
  "byte_b6": 0.00014803849000740192,
  "byte_db": 0.00014803849000740192,
  "byte_f9": 0.00014803849000740192,
  "byte_a4": 0.00044411547002220575,
  "byte_76": 0.00029607698001480384,
  "byte_a3": 0.0010362694300518134,
  "byte_94": 0.00029607698001480384,
  "byte_bf": 0.00014803849000740192,
  "byte_53": 0.00014803849000740192,
  "byte_44": 0.00029607698001480384,
  "byte_d0": 0.00014803849000740192,
  "byte_49": 0.00029607698001480384,
  "byte_da": 0.00014803849000740192,
  "byte_af": 0.00014803849000740192,
  "byte_6f": 0.00014803849000740192,
  "byte_6b": 0.00014803849000740192,
  "byte_e1": 0.00014803849000740192,
  "byte_eb": 0.00014803849000740192,
  "byte_ec": 0.00014803849000740192,
  "byte_4f": 0.00029607698001480384,
  "byte_71": 0.00029607698001480384,
  "byte_c0": 0.00014803849000740192,
  "byte_f7": 0.00014803849000740192,
  "byte_b2": 0.00014803849000740192,
  "byte_c8": 0.0005921539600296077,
  "byte_a2": 0.00044411547002220575,
  "byte_87": 0.0007401924500370096,
  "byte_96": 0.0010362694300518134,
  "byte_d7": 0.00029607698001480384,
  "byte_be": 0.00029607698001480384,
  "byte_1b": 0.00044411547002220575,
  "byte_e2": 0.0005921539600296077,
  "byte_c2": 0.0005921539600296077,
  "byte_b0": 0.00044411547002220575,
  "byte_37": 0.00044411547002220575,
  "byte_aa": 0.0005921539600296077,
  "byte_4d": 0.00044411547002220575,
  "byte_ef": 0.00044411547002220575,
  "byte_98": 0.00014803849000740192,
  "byte_4c": 0.00014803849000740192,
  "byte_7a": 0.00029607698001480384,
  "byte_30": 0.00014803849000740192,
  "byte_38": 0.00044411547002220575,
  "byte_ab": 0.00014803849000740192,
  "byte_c6": 0.00014803849000740192,
  "num_nodes": 16,
  "num_edges": 15,
  "avg_degree": 1.875,
  "density": 0.0625,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 81,
  "event_nums": 76,
  "creation_block": 5063656,
  "creation_timestamp": 1518247933,
  "life_time": 1168537.0,
  "duration_seconds": 17261107.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 17,
  "num_buyers": 1,
  "num_sellers": 15,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 6.931738634088066e-05,
  "avg_gas_limit": 86515.12345679013,
  "std_gas_limit": 218016.8561952692,
  "avg_gas_used": 71447.65432098765,
  "std_gas_used": 219747.10739158076,
  "avg_gas_price": 15249145018.469135,
  "std_gas_price": 15225212966.32836,
  "transfer_num": 79,
  "ownershiptransferred_num": 1,
  "transferownership_num": 1,
  "timeline_sequence": [
    [
      5063656,
      1518247933,
      16,
      144,
      0,
      2035050,
      4000000000,
      0,
      1,
      7396837,
      2035050,
      18057267
    ],
    [
      5063670,
      1518248133,
      17,
      32,
      0,
      53251,
      4000000000,
      0,
      1,
      1583296,
      38251,
      18057253
    ],
    [
      5063674,
      1518248189,
      18,
      76,
      0,
      30592,
      4000000000,
      0,
      1,
      3633770,
      30592,
      18057249
    ],
    [
      5065170,
      1518269864,
      7,
      19,
      0,
      79684,
      41000000000,
      0,
      1,
      730798,
      53123,
      18055753
    ],
    [
      5324307,
      1522054397,
      39,
      82,
      0,
      79780,
      41000000000,
      0,
      1,
      2363066,
      53187,
      17796616
    ],
    [
      5347763,
      1522396488,
      0,
      194,
      0,
      60000,
      4000000000,
      0,
      1,
      6701066,
      53123,
      17773160
    ],
    [
      5347766,
      1522396566,
      1,
      164,
      0,
      60000,
      4000000000,
      0,
      1,
      6276246,
      53123,
      17773157
    ],
    [
      5347776,
      1522396690,
      2,
      77,
      0,
      60000,
      4000000000,
      0,
      1,
      3686263,
      53123,
      17773147
    ],
    [
      5347782,
      1522396784,
      3,
      91,
      0,
      60000,
      21000000000,
      0,
      1,
      4118329,
      53123,
      17773141
    ],
    [
      5347802,
      1522397015,
      4,
      62,
      0,
      60000,
      4000000000,
      0,
      1,
      2500055,
      53123,
      17773121
    ],
    [
      5348423,
      1522406116,
      5,
      29,
      0,
      60000,
      5000000000,
      0,
      1,
      1385747,
      53123,
      17772500
    ],
    [
      5348510,
      1522407502,
      6,
      53,
      0,
      60000,
      5000000000,
      0,
      1,
      3769752,
      53187,
      17772413
    ],
    [
      5354393,
      1522493351,
      7,
      41,
      0,
      60000,
      4441176576,
      0,
      1,
      1322144,
      53187,
      17766530
    ],
    [
      5354413,
      1522493648,
      8,
      50,
      0,
      60000,
      3000000000,
      0,
      1,
      1825354,
      53187,
      17766510
    ],
    [
      5354464,
      1522494297,
      9,
      72,
      0,
      60000,
      3000000000,
      0,
      1,
      2890814,
      53187,
      17766459
    ],
    [
      5359649,
      1522567468,
      10,
      71,
      0,
      60000,
      3100000000,
      0,
      1,
      3196130,
      53123,
      17761274
    ],
    [
      5359652,
      1522567596,
      11,
      218,
      0,
      60000,
      3100000000,
      0,
      1,
      7283535,
      53123,
      17761271
    ],
    [
      5361041,
      1522587333,
      12,
      44,
      0,
      60000,
      4000000000,
      0,
      1,
      2122862,
      53123,
      17759882
    ],
    [
      5361119,
      1522588321,
      13,
      58,
      0,
      60000,
      3000000000,
      0,
      1,
      1909268,
      53187,
      17759804
    ],
    [
      5361122,
      1522588362,
      14,
      71,
      0,
      60000,
      3000000000,
      0,
      1,
      3049661,
      38123,
      17759801
    ],
    [
      5361343,
      1522591551,
      15,
      31,
      0,
      60000,
      3000000000,
      0,
      1,
      1897291,
      38187,
      17759580
    ],
    [
      5365385,
      1522648999,
      16,
      47,
      0,
      60000,
      4000000000,
      0,
      1,
      1762855,
      53123,
      17755538
    ],
    [
      5384355,
      1522921294,
      17,
      72,
      0,
      60000,
      4000000000,
      0,
      1,
      2502641,
      53187,
      17736568
    ],
    [
      5437968,
      1523693098,
      19,
      154,
      0,
      60000,
      4000000000,
      0,
      1,
      5637379,
      53187,
      17682955
    ],
    [
      5438051,
      1523694311,
      20,
      38,
      0,
      60000,
      2000000000,
      0,
      1,
      1802006,
      53123,
      17682872
    ],
    [
      5438681,
      1523703799,
      21,
      88,
      0,
      60000,
      4000000000,
      0,
      1,
      3223426,
      53123,
      17682242
    ],
    [
      5438693,
      1523703993,
      22,
      48,
      0,
      60000,
      4000000000,
      0,
      1,
      2099813,
      53123,
      17682230
    ],
    [
      5438717,
      1523704190,
      23,
      19,
      0,
      60000,
      4000000000,
      0,
      1,
      744025,
      53123,
      17682206
    ],
    [
      5438728,
      1523704336,
      24,
      20,
      0,
      60000,
      4000000000,
      0,
      1,
      742908,
      53187,
      17682195
    ],
    [
      5438737,
      1523704442,
      25,
      16,
      0,
      60000,
      4000000000,
      0,
      1,
      1122664,
      53187,
      17682186
    ],
    [
      5438770,
      1523704886,
      26,
      55,
      0,
      60000,
      3100000000,
      0,
      1,
      2477634,
      53123,
      17682153
    ],
    [
      5440471,
      1523729391,
      27,
      51,
      0,
      60000,
      2000000000,
      0,
      1,
      2940623,
      53187,
      17680452
    ],
    [
      5443082,
      1523767321,
      28,
      47,
      0,
      60000,
      4000000000,
      0,
      1,
      1353483,
      53123,
      17677841
    ],
    [
      5443649,
      1523775810,
      29,
      100,
      0,
      60000,
      1100000000,
      0,
      1,
      5030544,
      38251,
      17677274
    ],
    [
      5444875,
      1523793698,
      0,
      78,
      0,
      60000,
      2000000000,
      0,
      1,
      3520405,
      38187,
      17676048
    ],
    [
      5444879,
      1523793748,
      1,
      11,
      0,
      60000,
      2000000000,
      0,
      1,
      954560,
      53187,
      17676044
    ],
    [
      5444897,
      1523794024,
      2,
      88,
      0,
      60000,
      2000000000,
      0,
      1,
      4606440,
      53187,
      17676026
    ],
    [
      5514183,
      1524822798,
      112,
      10,
      0,
      79684,
      41000000000,
      0,
      1,
      421886,
      53123,
      17606740
    ],
    [
      5514190,
      1524822969,
      113,
      12,
      0,
      79684,
      41000000000,
      0,
      1,
      373652,
      53123,
      17606733
    ],
    [
      5635474,
      1526656010,
      217,
      24,
      0,
      50000,
      41000000000,
      1,
      0,
      1051220,
      50000,
      17485449
    ],
    [
      5635550,
      1526657240,
      218,
      4,
      0,
      40000,
      41000000000,
      1,
      0,
      204033,
      40000,
      17485373
    ],
    [
      5635585,
      1526657844,
      219,
      47,
      0,
      60000,
      41000000000,
      0,
      1,
      1622288,
      53123,
      17485338
    ],
    [
      5635604,
      1526658134,
      35,
      98,
      0,
      60000,
      16000000000,
      0,
      1,
      4116340,
      53059,
      17485319
    ],
    [
      5636500,
      1526671794,
      8,
      13,
      0,
      60000,
      20000000000,
      0,
      1,
      435628,
      38059,
      17484423
    ],
    [
      5650849,
      1526890588,
      39,
      21,
      0,
      60000,
      12225000000,
      0,
      1,
      1488655,
      53059,
      17470074
    ],
    [
      5651315,
      1526897554,
      11,
      76,
      0,
      60000,
      20000000000,
      0,
      1,
      2710396,
      23059,
      17469608
    ],
    [
      5651578,
      1526901843,
      3,
      109,
      0,
      60000,
      12000000000,
      0,
      1,
      4532927,
      53123,
      17469345
    ],
    [
      5657142,
      1526986777,
      12,
      50,
      0,
      60000,
      20000000000,
      1,
      0,
      2674965,
      24404,
      17463781
    ],
    [
      5657158,
      1526987032,
      14,
      117,
      0,
      60000,
      20000000000,
      1,
      0,
      5559826,
      24404,
      17463765
    ],
    [
      5672237,
      1527219129,
      41,
      72,
      0,
      60000,
      12000000000,
      0,
      1,
      2304231,
      53059,
      17448686
    ],
    [
      5691216,
      1527508485,
      4,
      194,
      0,
      60000,
      22500000000,
      0,
      1,
      5112020,
      53187,
      17429707
    ],
    [
      5691308,
      1527510047,
      5,
      151,
      0,
      60000,
      22500000000,
      0,
      1,
      5452303,
      38187,
      17429615
    ],
    [
      5697175,
      1527599460,
      6,
      203,
      0,
      60000,
      17000000000,
      0,
      1,
      6406217,
      38187,
      17423748
    ],
    [
      5697197,
      1527599820,
      7,
      140,
      0,
      60000,
      17000000000,
      0,
      1,
      4526734,
      38187,
      17423726
    ],
    [
      5711241,
      1527815504,
      0,
      31,
      0,
      60000,
      10000000000,
      0,
      1,
      3804242,
      53187,
      17409682
    ],
    [
      5714054,
      1527859262,
      1,
      188,
      0,
      60000,
      20000000000,
      0,
      1,
      4706538,
      53123,
      17406869
    ],
    [
      5714071,
      1527859548,
      17,
      137,
      0,
      60000,
      14568750000,
      0,
      1,
      5304281,
      53187,
      17406852
    ],
    [
      5714076,
      1527859630,
      18,
      73,
      0,
      60000,
      13006250000,
      0,
      1,
      3431256,
      53187,
      17406847
    ],
    [
      5717655,
      1527913912,
      19,
      75,
      0,
      60000,
      13787500000,
      0,
      1,
      4400659,
      53187,
      17403268
    ],
    [
      5718003,
      1527919034,
      20,
      112,
      0,
      60000,
      10000000000,
      0,
      1,
      7895416,
      38187,
      17402920
    ],
    [
      5718025,
      1527919338,
      21,
      156,
      0,
      60000,
      10000000000,
      0,
      1,
      6244331,
      53187,
      17402898
    ],
    [
      5730503,
      1528111745,
      23,
      138,
      0,
      60000,
      13006250000,
      0,
      1,
      7601019,
      53187,
      17390420
    ],
    [
      5753612,
      1528465496,
      8,
      218,
      0,
      60000,
      10000000000,
      0,
      1,
      7949691,
      38123,
      17367311
    ],
    [
      5753750,
      1528467711,
      35,
      116,
      0,
      60000,
      13006250000,
      0,
      1,
      4018973,
      53187,
      17367173
    ],
    [
      5761813,
      1528591455,
      9,
      160,
      0,
      60000,
      25100000000,
      0,
      1,
      4084442,
      53123,
      17359110
    ],
    [
      5763376,
      1528615016,
      1,
      49,
      0,
      60000,
      17039569920,
      0,
      1,
      1537080,
      38123,
      17357547
    ],
    [
      5769839,
      1528714854,
      39,
      168,
      0,
      60000,
      14568750000,
      0,
      1,
      4775151,
      53187,
      17351084
    ],
    [
      5809887,
      1529310762,
      53,
      84,
      0,
      60000,
      14568750000,
      0,
      1,
      2490894,
      38123,
      17311036
    ],
    [
      5914908,
      1530867557,
      56,
      110,
      0,
      60000,
      52562500000,
      0,
      1,
      2737249,
      38187,
      17206015
    ],
    [
      5920138,
      1530944885,
      102,
      31,
      0,
      80000,
      77000000000,
      0,
      1,
      997893,
      53187,
      17200785
    ],
    [
      5930680,
      1531103203,
      108,
      102,
      0,
      80000,
      11000000000,
      0,
      1,
      7607051,
      53123,
      17190243
    ],
    [
      5930714,
      1531103656,
      48,
      30,
      0,
      80000,
      38000000000,
      0,
      1,
      4840901,
      23123,
      17190209
    ],
    [
      5943570,
      1531295308,
      58,
      61,
      0,
      60000,
      11000000000,
      0,
      1,
      6501864,
      38187,
      17177353
    ],
    [
      6004845,
      1532189920,
      1,
      77,
      0,
      60000,
      6500000000,
      0,
      1,
      5530302,
      53123,
      17116078
    ],
    [
      6019802,
      1532408212,
      0,
      64,
      0,
      60000,
      5000000000,
      0,
      1,
      3376237,
      23187,
      17101121
    ],
    [
      6021144,
      1532428375,
      148,
      86,
      0,
      80000,
      38000000000,
      0,
      1,
      2611932,
      53187,
      17099779
    ],
    [
      6021438,
      1532432811,
      150,
      12,
      0,
      80000,
      38000000000,
      0,
      1,
      491819,
      53123,
      17099485
    ],
    [
      6025706,
      1532495868,
      2,
      110,
      0,
      80000,
      44000000000,
      0,
      1,
      3004772,
      38187,
      17095217
    ],
    [
      6038336,
      1532681408,
      171,
      63,
      0,
      80000,
      38000000000,
      1,
      0,
      2489607,
      24468,
      17082587
    ],
    [
      6204947,
      1535111937,
      12,
      214,
      0,
      60000,
      4400000000,
      0,
      1,
      7382272,
      38187,
      16915976
    ],
    [
      6232193,
      1535509040,
      27,
      39,
      0,
      80000,
      36000000000,
      0,
      1,
      1118419,
      23187,
      16888730
    ]
  ],
  "sourcecode": "pragma solidity 0.4.19;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n    /// Total amount of tokens\n  uint256 public totalSupply;\n  \n  function balanceOf(address _owner) public view returns (uint256 balance);\n  \n  function transfer(address _to, uint256 _amount) public returns (bool success);\n  \n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining);\n  \n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success);\n  \n  function approve(address _spender, uint256 _amount) public returns (bool success);\n  \n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  //balance in each address account\n  mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _amount The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _amount) public returns (bool success) {\n    require(_to != address(0));\n    require(balances[msg.sender] >= _amount && _amount > 0\n        && balances[_to].add(_amount) > balances[_to]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Transfer(msg.sender, _to, _amount);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n  \n  \n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _amount uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\n    require(_to != address(0));\n    require(balances[_from] >= _amount);\n    require(allowed[_from][msg.sender] >= _amount);\n    require(_amount > 0 && balances[_to].add(_amount) > balances[_to]);\n\n    balances[_from] = balances[_from].sub(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);\n    Transfer(_from, _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _amount The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _amount) public returns (bool success) {\n    allowed[msg.sender][_spender] = _amount;\n    Approval(msg.sender, _spender, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n\n}\n\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n  //To keep track of minted token count\n  uint256 mintedTokens;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * Total miniting cannot be greater than 15% of initial total supply\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    \n    uint256 initialTotalSupply = totalSupply.sub(mintedTokens);\n    \n    //To check miniting of tokens should not exceed 15% of initialTotalSupply\n    require(initialTotalSupply.mul(15).div(100) > mintedTokens.add(_amount));    \n   \n    totalSupply = totalSupply.add(_amount);\n    \n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title TRANX Token\n * @dev Token representing TRANX.\n */\n contract TRANXToken is MintableToken, Pausable {\n     string public name ;\n     string public symbol ;\n     uint8 public decimals = 18 ;\n     \n     /**\n     *@dev users sending ether to this contract will be reverted. Any ether sent to the contract will be sent back to the caller\n     */\n     function ()public payable {\n         revert();\n     }\n     \n     /**\n     * @dev Constructor function to initialize the initial supply of token to the creator of the contract\n     * @param initialSupply The initial supply of tokens which will be fixed through out\n     * @param tokenName The name of the token\n     * @param tokenSymbol The symboll of the token\n     */\n     function TRANXToken(\n            uint256 initialSupply,\n            string tokenName,\n            string tokenSymbol\n         ) public {\n         totalSupply = initialSupply.mul( 10 ** uint256(decimals)); //Update total supply with the decimal amount\n         name = tokenName;\n         symbol = tokenSymbol;\n         balances[msg.sender] = totalSupply;\n         \n         //Emitting transfer event since assigning all tokens to the creator also corresponds to the transfer of tokens to the creator\n         Transfer(address(0), msg.sender, totalSupply);\n     }\n     \n     /**\n     *@dev helper method to get token details, name, symbol and totalSupply in one go\n     */\n    function getTokenDetail() public view returns (string, string, uint256) {\n\t    return (name, symbol, totalSupply);\n    }\n    \n     function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {\n    return super.transferFrom(_from, _to, _value);\n  }\n\n  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {\n    return super.approve(_spender, _value);\n  }\n  \n    function mint(address _to, uint256 _amount)  public whenNotPaused returns (bool) {\n    return super.mint(_to, _amount);\n  }\n\n  \n }"
}