{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND CALLVALUE DUP1 ISZERO PUSH2 MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP5 DUP6 MSTORE PUSH1 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 DUP1 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP5 ADD MSTORE SWAP1 ISZERO ISZERO PUSH1 DUP4 ADD MSTORE PUSH1 SWAP1 SWAP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 DUP2 DUP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 CALLER DUP4 PUSH1 MLOAD PUSH29 PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST GAS CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 POP CALLER AND PUSH32 DUP4 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP6 SWAP1 SSTORE SWAP1 SWAP3 SWAP2 SWAP1 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT DUP2 AND PUSH21 SWAP2 DUP3 SWAP1 DIV PUSH1 AND ISZERO SWAP1 SWAP2 MUL OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 DUP3 DUP1 PUSH2 DUP4 PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP5 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD DUP5 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP5 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP6 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP9 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SSTORE PUSH2 DUP7 DUP7 DUP7 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SWAP2 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SELFDESTRUCT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND OR SWAP1 SSTORE PUSH32 DUP2 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP7 PUSH1 DUP1 PUSH2 DUP4 PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP9 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP9 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP DUP8 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP6 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP5 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP5 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP7 DUP7 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 SWAP1 DUP2 MSTORE DUP10 DUP3 MSTORE PUSH1 DUP1 DUP4 ADD DUP11 SWAP1 MSTORE DUP2 DUP4 ADD DUP7 SWAP1 MSTORE PUSH1 DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 PUSH1 DUP5 ADD MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP13 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SHA3 DUP2 MLOAD DUP2 SSTORE PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SSTORE PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SSTORE PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SSTORE PUSH1 DUP3 ADD MLOAD PUSH1 SWAP2 SWAP1 SWAP2 ADD DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND PUSH32 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 MLOAD DUP1 DUP7 DUP2 MSTORE PUSH1 ADD DUP6 DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP6 POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 CALLDATASIZE PUSH1 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 DUP4 ADD SLOAD PUSH1 DUP5 ADD SLOAD PUSH1 SWAP1 SWAP5 ADD SLOAD SWAP3 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 SWAP1 PUSH1 AND DUP6 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP7 PUSH1 DUP1 PUSH2 DUP4 PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP9 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP DUP8 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP6 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP5 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP5 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLER DUP11 DUP11 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP3 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH32 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND DUP2 MSTORE SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 PUSH1 ADD SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD TIMESTAMP LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SHA3 SLOAD SUB SWAP3 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 DUP2 ADD SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 TIMESTAMP SUB DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 ADD MUL SWAP2 POP PUSH1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SHA3 SLOAD GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SHA3 SLOAD PUSH1 DUP4 DUP2 SUB SWAP1 SWAP3 MUL DUP3 SWAP1 DIV SWAP1 SUB SWAP1 DUP3 LT PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 PUSH1 DUP2 ADD DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE DUP2 DUP2 SSTORE PUSH1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 DUP2 ADD DUP3 SWAP1 SSTORE PUSH1 ADD SSTORE JUMPDEST DUP1 SWAP3 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP3 POP JUMPDEST POP POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP3 DUP2 DUP1 PUSH2 DUP4 PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 DUP2 AND SWAP1 DUP6 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 SWAP1 DUP8 AND SWAP1 PUSH32 SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP4 PUSH1 EQ ISZERO PUSH2 JUMPI PUSH2 DUP4 PUSH4 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP PUSH2 JUMP JUMPDEST DUP4 PUSH1 EQ ISZERO PUSH2 JUMPI PUSH2 DUP4 PUSH3 PUSH4 PUSH2 AND JUMP JUMPDEST DUP4 PUSH1 EQ ISZERO PUSH2 JUMPI PUSH2 DUP4 PUSH2 PUSH4 PUSH2 AND JUMP JUMPDEST DUP4 PUSH1 EQ ISZERO PUSH2 JUMPI PUSH2 DUP4 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST DUP4 PUSH1 EQ ISZERO PUSH2 JUMPI POP DUP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe STOP LOG1 PUSH6 SHA3 UNKNOWN_0x27 LOG2 UNKNOWN_0xe2 BLOCKHASH UNKNOWN_0x2b PUSH15 SWAP3 INVALID_0x7b",
  "opcode_entropy": 4.729845850537514,
  "opcode_count": 3099,
  "unique_opcodes": 70,
  "byte_entropy": 5.802151413010603,
  "byte_60": 0.12925026399155226,
  "byte_40": 0.014149947201689547,
  "byte_52": 0.02470960929250264,
  "byte_04": 0.011826821541710665,
  "byte_36": 0.0006335797254487857,
  "byte_10": 0.005913410770855333,
  "byte_61": 0.044350580781414996,
  "byte_01": 0.04181626187961985,
  "byte_27": 0.0014783526927138332,
  "byte_57": 0.023442449841605068,
  "byte_63": 0.008447729672650475,
  "byte_ff": 0.022808870116156284,
  "byte_7c": 0.0006335797254487857,
  "byte_00": 0.06251319957761352,
  "byte_35": 0.00675818373812038,
  "byte_16": 0.027243928194297783,
  "byte_06": 0.00337909186906019,
  "byte_fd": 0.013938753959873283,
  "byte_de": 0.0006335797254487857,
  "byte_03": 0.02597676874340021,
  "byte_81": 0.02808870116156283,
  "byte_14": 0.008447729672650475,
  "byte_9d": 0.0006335797254487857,
  "byte_80": 0.036325237592397044,
  "byte_09": 0.001689545934530095,
  "byte_5e": 0.0006335797254487857,
  "byte_a7": 0.0006335797254487857,
  "byte_b3": 0.0010559662090813093,
  "byte_02": 0.02365364308342133,
  "byte_13": 0.00021119324181626187,
  "byte_85": 0.004012671594508976,
  "byte_d2": 0.00021119324181626187,
  "byte_4c": 0.00021119324181626187,
  "byte_5d": 0.00042238648363252375,
  "byte_18": 0.00042238648363252375,
  "byte_0d": 0.0029567053854276664,
  "byte_dd": 0.0025343189017951427,
  "byte_70": 0.0006335797254487857,
  "byte_23": 0.0006335797254487857,
  "byte_b8": 0.00042238648363252375,
  "byte_72": 0.0006335797254487857,
  "byte_95": 0.001689545934530095,
  "byte_e2": 0.0010559662090813093,
  "byte_e3": 0.0006335797254487857,
  "byte_bd": 0.00042238648363252375,
  "byte_31": 0.0006335797254487857,
  "byte_3c": 0.0008447729672650475,
  "byte_e5": 0.0006335797254487857,
  "byte_67": 0.00042238648363252375,
  "byte_dc": 0.0006335797254487857,
  "byte_c1": 0.0008447729672650475,
  "byte_0f": 0.0012671594508975714,
  "byte_19": 0.0021119324181626186,
  "byte_05": 0.006546990496304118,
  "byte_43": 0.0006335797254487857,
  "byte_d7": 0.00042238648363252375,
  "byte_26": 0.00021119324181626187,
  "byte_d6": 0.00042238648363252375,
  "byte_a0": 0.014783526927138331,
  "byte_82": 0.009503695881731784,
  "byte_3a": 0.00042238648363252375,
  "byte_75": 0.0010559662090813093,
  "byte_65": 0.0010559662090813093,
  "byte_59": 0.00021119324181626187,
  "byte_f1": 0.0012671594508975714,
  "byte_2b": 0.0010559662090813093,
  "byte_21": 0.0006335797254487857,
  "byte_78": 0.0006335797254487857,
  "byte_83": 0.013305174234424498,
  "byte_28": 0.0006335797254487857,
  "byte_db": 0.0006335797254487857,
  "byte_cd": 0.00042238648363252375,
  "byte_8b": 0.00042238648363252375,
  "byte_8d": 0.0006335797254487857,
  "byte_a5": 0.00021119324181626187,
  "byte_cb": 0.0008447729672650475,
  "byte_5b": 0.034424498416050685,
  "byte_ba": 0.00042238648363252375,
  "byte_8f": 0.00021119324181626187,
  "byte_d3": 0.00021119324181626187,
  "byte_ab": 0.00021119324181626187,
  "byte_91": 0.014361140443505808,
  "byte_e1": 0.0010559662090813093,
  "byte_cc": 0.0008447729672650475,
  "byte_5a": 0.0014783526927138332,
  "byte_e0": 0.00021119324181626187,
  "byte_d8": 0.0006335797254487857,
  "byte_9b": 0.00337909186906019,
  "byte_41": 0.0008447729672650475,
  "byte_0e": 0.00337909186906019,
  "byte_a9": 0.0008447729672650475,
  "byte_9c": 0.00021119324181626187,
  "byte_bb": 0.00042238648363252375,
  "byte_b4": 0.00042238648363252375,
  "byte_d4": 0.0012671594508975714,
  "byte_b6": 0.00042238648363252375,
  "byte_ca": 0.00021119324181626187,
  "byte_48": 0.0006335797254487857,
  "byte_93": 0.0027455121436114043,
  "byte_62": 0.0012671594508975714,
  "byte_ed": 0.00021119324181626187,
  "byte_3e": 0.0006335797254487857,
  "byte_f2": 0.0010559662090813093,
  "byte_e6": 0.00042238648363252375,
  "byte_08": 0.0031678986272439284,
  "byte_54": 0.014149947201689547,
  "byte_0a": 0.016261879619852166,
  "byte_15": 0.019429778247096092,
  "byte_33": 0.0044350580781415,
  "byte_90": 0.04033790918690602,
  "byte_20": 0.021752903907074975,
  "byte_11": 0.007391763463569166,
  "byte_69": 0.0008447729672650475,
  "byte_56": 0.015417106652587118,
  "byte_34": 0.005491024287222809,
  "byte_fc": 0.0006335797254487857,
  "byte_51": 0.009292502639915523,
  "byte_88": 0.001689545934530095,
  "byte_50": 0.017106652587117212,
  "byte_a8": 0.0006335797254487857,
  "byte_b0": 0.0008447729672650475,
  "byte_ec": 0.0006335797254487857,
  "byte_1f": 0.0019007391763463568,
  "byte_92": 0.006124604012671594,
  "byte_f3": 0.0019007391763463568,
  "byte_32": 0.0006335797254487857,
  "byte_49": 0.0010559662090813093,
  "byte_24": 0.0019007391763463568,
  "byte_68": 0.0006335797254487857,
  "byte_07": 0.0044350580781415,
  "byte_7b": 0.0008447729672650475,
  "byte_a6": 0.00042238648363252375,
  "byte_44": 0.0010559662090813093,
  "byte_ac": 0.0006335797254487857,
  "byte_c8": 0.0008447729672650475,
  "byte_c6": 0.00042238648363252375,
  "byte_e7": 0.0006335797254487857,
  "byte_ef": 0.0019007391763463568,
  "byte_97": 0.0006335797254487857,
  "byte_45": 0.00042238648363252375,
  "byte_c0": 0.0006335797254487857,
  "byte_64": 0.001689545934530095,
  "byte_96": 0.00042238648363252375,
  "byte_9e": 0.0006335797254487857,
  "byte_7f": 0.001689545934530095,
  "byte_c5": 0.00021119324181626187,
  "byte_8e": 0.00021119324181626187,
  "byte_eb": 0.0006335797254487857,
  "byte_84": 0.005913410770855333,
  "byte_a4": 0.0006335797254487857,
  "byte_0c": 0.0010559662090813093,
  "byte_58": 0.0008447729672650475,
  "byte_2c": 0.0006335797254487857,
  "byte_c3": 0.0006335797254487857,
  "byte_4e": 0.00021119324181626187,
  "byte_94": 0.0019007391763463568,
  "byte_55": 0.0044350580781415,
  "byte_7a": 0.0008447729672650475,
  "byte_30": 0.00042238648363252375,
  "byte_87": 0.0021119324181626186,
  "byte_3b": 0.00042238648363252375,
  "byte_f4": 0.00021119324181626187,
  "byte_7e": 0.0010559662090813093,
  "byte_5c": 0.0006335797254487857,
  "byte_4a": 0.00021119324181626187,
  "byte_76": 0.00021119324181626187,
  "byte_f7": 0.00042238648363252375,
  "byte_6c": 0.00042238648363252375,
  "byte_53": 0.0006335797254487857,
  "byte_42": 0.0014783526927138332,
  "byte_22": 0.00021119324181626187,
  "byte_e8": 0.00042238648363252375,
  "byte_a3": 0.0008447729672650475,
  "byte_b7": 0.00021119324181626187,
  "byte_8c": 0.0010559662090813093,
  "byte_7d": 0.0006335797254487857,
  "byte_d1": 0.00042238648363252375,
  "byte_4f": 0.00021119324181626187,
  "byte_71": 0.00042238648363252375,
  "byte_1e": 0.00042238648363252375,
  "byte_b2": 0.0012671594508975714,
  "byte_29": 0.00042238648363252375,
  "byte_c7": 0.00021119324181626187,
  "byte_b9": 0.00042238648363252375,
  "byte_25": 0.0006335797254487857,
  "byte_74": 0.0014783526927138332,
  "byte_17": 0.0008447729672650475,
  "byte_d5": 0.0006335797254487857,
  "byte_f9": 0.00042238648363252375,
  "byte_86": 0.0029567053854276664,
  "byte_ad": 0.00042238648363252375,
  "byte_1b": 0.00042238648363252375,
  "byte_c2": 0.0012671594508975714,
  "byte_37": 0.0010559662090813093,
  "byte_aa": 0.0008447729672650475,
  "byte_c4": 0.00042238648363252375,
  "byte_a1": 0.0010559662090813093,
  "byte_f5": 0.0010559662090813093,
  "byte_4d": 0.00042238648363252375,
  "byte_f6": 0.00021119324181626187,
  "byte_73": 0.0006335797254487857,
  "byte_12": 0.0021119324181626186,
  "byte_d9": 0.00021119324181626187,
  "byte_6e": 0.00042238648363252375,
  "byte_fa": 0.00042238648363252375,
  "byte_79": 0.00021119324181626187,
  "byte_89": 0.0019007391763463568,
  "byte_0b": 0.001689545934530095,
  "byte_2d": 0.00021119324181626187,
  "byte_39": 0.00021119324181626187,
  "byte_46": 0.00021119324181626187,
  "byte_a2": 0.0006335797254487857,
  "byte_8a": 0.0010559662090813093,
  "byte_bf": 0.00042238648363252375,
  "byte_be": 0.00021119324181626187,
  "byte_3d": 0.00021119324181626187,
  "byte_ea": 0.00042238648363252375,
  "byte_d0": 0.00042238648363252375,
  "byte_9a": 0.00021119324181626187,
  "byte_6a": 0.00042238648363252375,
  "byte_fb": 0.00021119324181626187,
  "byte_b5": 0.00021119324181626187,
  "byte_e9": 0.00021119324181626187,
  "byte_fe": 0.0012671594508975714,
  "byte_77": 0.00042238648363252375,
  "byte_df": 0.00021119324181626187,
  "byte_2e": 0.00042238648363252375,
  "byte_c9": 0.00021119324181626187,
  "byte_2f": 0.0008447729672650475,
  "byte_1a": 0.00021119324181626187,
  "byte_2a": 0.00021119324181626187,
  "byte_4b": 0.00021119324181626187,
  "byte_66": 0.00021119324181626187,
  "byte_99": 0.00021119324181626187,
  "num_nodes": 4,
  "num_edges": 3,
  "avg_degree": 1.5,
  "density": 0.25,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 14,
  "event_nums": 14,
  "creation_block": 5374839,
  "creation_timestamp": 1522784838,
  "life_time": 2644914.0,
  "duration_seconds": 38581579.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 5,
  "num_buyers": 1,
  "num_sellers": 3,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 5.2931757731344865e-06,
  "avg_gas_limit": 226860.35714285713,
  "std_gas_limit": 373751.92898644245,
  "avg_gas_used": 148001.2142857143,
  "std_gas_used": 367026.9531562613,
  "avg_gas_price": 3935714285.714286,
  "std_gas_price": 3277108294.7486196,
  "transfer_num": 13,
  "timeline_sequence": [
    [
      5374839,
      1522784838,
      0,
      82,
      0,
      1570922,
      1000000000,
      0,
      1,
      6002562,
      1470922,
      17746084
    ],
    [
      5374865,
      1522785146,
      1,
      48,
      0,
      153171,
      1000000000,
      0,
      1,
      4503089,
      53171,
      17746058
    ],
    [
      5374877,
      1522785360,
      2,
      120,
      0,
      153171,
      1000000000,
      0,
      1,
      5540778,
      53171,
      17746046
    ],
    [
      5374887,
      1522785481,
      3,
      71,
      0,
      153171,
      1000000000,
      0,
      1,
      7060143,
      53171,
      17746036
    ],
    [
      5374904,
      1522785763,
      4,
      63,
      0,
      153171,
      1000000000,
      0,
      1,
      6755414,
      53171,
      17746019
    ],
    [
      5374911,
      1522785864,
      5,
      86,
      0,
      153171,
      1000000000,
      0,
      1,
      4160974,
      38171,
      17746012
    ],
    [
      7928930,
      1560139626,
      0,
      36,
      0,
      79756,
      10000000000,
      0,
      1,
      1289543,
      53171,
      15191993
    ],
    [
      7988613,
      1560945700,
      2,
      73,
      0,
      79756,
      4000000000,
      0,
      1,
      6729698,
      53171,
      15132310
    ],
    [
      7994341,
      1561023993,
      0,
      148,
      0,
      120000,
      6000000000,
      0,
      1,
      6201132,
      53171,
      15126582
    ],
    [
      7994341,
      1561023993,
      1,
      180,
      0,
      120000,
      6000000000,
      0,
      1,
      7830958,
      38171,
      15126582
    ],
    [
      7998573,
      1561081204,
      2,
      109,
      0,
      120000,
      6000000000,
      0,
      1,
      5007652,
      23171,
      15122350
    ],
    [
      8018286,
      1561346354,
      5,
      173,
      0,
      79756,
      10000000000,
      0,
      1,
      6844672,
      53171,
      15102637
    ],
    [
      8018872,
      1561354713,
      3,
      152,
      0,
      120000,
      1100000000,
      0,
      1,
      7107889,
      38043,
      15102051
    ],
    [
      8019753,
      1561366417,
      8,
      56,
      0,
      120000,
      6000000000,
      0,
      1,
      3143587,
      38171,
      15101170
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.18;\n\ncontract Owner {\n    address public owner;\n    //\u6dfb\u52a0\u65ad\u8def\u5668\n    bool public stopped = false;\n\n    function Owner() internal {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n       require (msg.sender == owner);\n       _;\n    }\n\n    function transferOwnership(address newOwner) external onlyOwner {\n        require (newOwner != 0x0);\n        require (newOwner != owner);\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n    }\n\n    function toggleContractActive() onlyOwner public {\n        //\u53ef\u4ee5\u9884\u7f6e\u6539\u53d8\u72b6\u6001\u7684\u6761\u4ef6\uff0c\u5982\u57fa\u4e8e\u6295\u7968\u4eba\u6570\n        stopped = !stopped;\n    }\n\n    modifier stopInEmergency {\n        require(stopped == false);\n        _;\n    }\n\n    modifier onlyInEmergency {\n        require(stopped == true);\n        _;\n    }\n\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n}\n\ncontract Mortal is Owner {\n    //\u9500\u6bc1\u5408\u7ea6\n    function close() external onlyOwner {\n        selfdestruct(owner);\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Token is Owner, Mortal {\n    using SafeMath for uint256;\n\n    string public name; //\u4ee3\u5e01\u540d\u79f0\n    string public symbol; //\u4ee3\u5e01\u7b26\u53f7\n    uint8 public decimals; //\u663e\u793a\u591a\u5c11\u5c0f\u6570\u70b9\n    uint256 public totalSupply; //\u603b\u4f9b\u5e94\u91cf\n\n    //\u51bb\u7ed3\u7684\u57fa\u91d1,\u89e3\u9501\u7684\u6570\u91cf\u6839\u636e\u65f6\u95f4\u52a8\u6001\u8ba1\u7b97\u51fa\u6765\n    struct Fund{\n        uint amount;            //\u603b\u51bb\u7ed3\u6570\u91cf\uff0c\u56fa\u5b9a\u503c\n\n        uint unlockStartTime;   //\u4ece\u4ec0\u4e48\u65f6\u5019\u5f00\u59cb\u89e3\u9501\n        uint unlockInterval;    //\u6bcf\u6b21\u89e3\u9501\u7684\u5468\u671f\uff0c\u5355\u4f4d \u79d2\n        uint unlockPercent;     //\u6bcf\u6b21\u89e3\u9501\u7684\u767e\u5206\u6bd4 50 \u4e3a50%\n\n        bool isValue; // exist value\n    }\n\n    //\u6240\u6709\u7684\u8d26\u6237\u6570\u636e\n    mapping (address => uint) public balances;\n    //\u4ee3\u7406\n    mapping(address => mapping(address => uint)) approved;\n\n    //\u6240\u6709\u7684\u8d26\u6237\u51bb\u7ed3\u6570\u636e\uff0c\u65f6\u95f4\uff0c\u5230\u671f\u81ea\u52a8\u89e3\u51bb\uff0c\u540c\u65f6\u53ea\u652f\u6301\u4e00\u6b21\u51bb\u7ed3\n    mapping (address => Fund) public frozenAccount;\n\n    //\u4e8b\u4ef6\u65e5\u5fd7\n    event Transfer(address indexed from, address indexed to, uint value);\n    event FrozenFunds(address indexed target, uint value, uint unlockStartTime, uint unlockIntervalUnit, uint unlockInterval, uint unlockPercent);\n    event Approval(address indexed accountOwner, address indexed spender, uint256 value);\n\n    /**\n    *\n    * Fix for the ERC20 short address attack\n    *\n    * http://vessenes.com/the-erc20-short-address-attack-explained/\n    */\n    modifier onlyPayloadSize(uint256 size) {\n        require(msg.data.length == size + 4);\n        _;\n    }\n\n    //\u51bb\u7ed3\u56fa\u5b9a\u65f6\u95f4\n    function freezeAccount(address target, uint value, uint unlockStartTime, uint unlockIntervalUnit, uint unlockInterval, uint unlockPercent) external onlyOwner freezeOutCheck(target, 0) {\n        require (value > 0);\n        require (frozenAccount[target].isValue == false);\n        require (balances[msg.sender] >= value);\n        require (unlockStartTime > now);\n        require (unlockInterval > 0);\n        require (unlockPercent > 0 && unlockPercent <= 100);\n\n        uint unlockIntervalSecond = toSecond(unlockIntervalUnit, unlockInterval);\n\n        frozenAccount[target] = Fund(value, unlockStartTime, unlockIntervalSecond, unlockPercent, true);\n        emit FrozenFunds(target, value, unlockStartTime, unlockIntervalUnit, unlockInterval, unlockPercent);\n    }\n\n    //\u8f6c\u8d26\u5e76\u51bb\u7ed3\n    function transferAndFreeze(address target, uint256 value, uint unlockStartTime, uint unlockIntervalUnit, uint unlockInterval, uint unlockPercent) external onlyOwner freezeOutCheck(target, 0) {\n        require (value > 0);\n        require (frozenAccount[target].isValue == false);\n        require (unlockStartTime > now);\n        require (unlockInterval > 0);\n        require (unlockPercent > 0 && unlockPercent <= 100);\n\n        _transfer(msg.sender, target, value);\n\n        uint unlockIntervalSecond = toSecond(unlockIntervalUnit, unlockInterval);\n        frozenAccount[target] = Fund(value, unlockStartTime, unlockIntervalSecond, unlockPercent, true);\n        emit FrozenFunds(target, value, unlockStartTime, unlockIntervalUnit, unlockInterval, unlockPercent);\n    }\n\n    //\u8f6c\u6362\u5355\u4f4d\u65f6\u95f4\u5230\u79d2\n    function toSecond(uint unitType, uint value) internal pure returns (uint256 Seconds) {\n        uint _seconds;\n        if (unitType == 5){\n            _seconds = value.mul(1 years);\n        }else if(unitType == 4){\n            _seconds = value.mul(1 days);\n        }else if (unitType == 3){\n            _seconds = value.mul(1 hours);\n        }else if (unitType == 2){\n            _seconds = value.mul(1 minutes);\n        }else if (unitType == 1){\n            _seconds = value;\n        }else{\n            revert();\n        }\n        return _seconds;\n    }\n\n    modifier freezeOutCheck(address sender, uint value) {\n        require ( getAvailableBalance(sender) >= value);\n        _;\n    }\n\n    //\u8ba1\u7b97\u53ef\u7528\u4f59\u989d \u53bb\u9664\u51bb\u7ed3\u90e8\u5206\n    function getAvailableBalance(address sender) internal returns(uint balance) {\n        if (frozenAccount[sender].isValue) {\n            //\u672a\u5f00\u59cb\u89e3\u9501\n            if (now < frozenAccount[sender].unlockStartTime){\n                return balances[sender] - frozenAccount[sender].amount;\n            }else{\n                //\u8ba1\u7b97\u89e3\u9501\u4e86\u591a\u5c11\u6570\u91cf\n                uint unlockPercent = ((now - frozenAccount[sender].unlockStartTime ) / frozenAccount[sender].unlockInterval + 1) * frozenAccount[sender].unlockPercent;\n                if (unlockPercent > 100){\n                    unlockPercent = 100;\n                }\n\n                //\u8ba1\u7b97\u53ef\u7528\u4f59\u989d = \u603b\u989d - \u51bb\u7ed3\u603b\u989d\n                assert(frozenAccount[sender].amount <= balances[sender]);\n                uint available = balances[sender] - (100 - unlockPercent) * frozenAccount[sender].amount / 100;\n                if ( unlockPercent >= 100){\n                    //release\n                    frozenAccount[sender].isValue = false;\n                    delete frozenAccount[sender];\n                }\n\n                return available;\n            }\n        }\n        return balances[sender];\n    }\n\n    function balanceOf(address sender) constant external returns (uint256 balance){\n        return balances[sender];\n    }\n\n    /* \u4ee3\u5e01\u8f6c\u79fb\u7684\u51fd\u6570 */\n    function transfer(address to, uint256 value) external stopInEmergency onlyPayloadSize(2 * 32) {\n        _transfer(msg.sender, to, value);\n    }\n\n    function _transfer(address _from, address _to, uint _value) internal freezeOutCheck(_from, _value) {\n        require(_to != 0x0);\n        require(_from != _to);\n        require(_value > 0);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n\n        emit Transfer(_from, _to, _value);\n    }\n\n    //\u8bbe\u7f6e\u4ee3\u7406\u4ea4\u6613\n    //\u5141\u8bb8spender\u591a\u6b21\u53d6\u51fa\u60a8\u7684\u5e10\u6237\uff0c\u6700\u9ad8\u8fbevalue\u91d1\u989d\u3002value\u53ef\u4ee5\u8bbe\u7f6e\u8d85\u8fc7\u8d26\u6237\u4f59\u989d\n    function approve(address spender, uint value) external returns (bool success) {\n        approved[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n\n        return true;\n    }\n\n    //\u8fd4\u56despender\u4ecd\u7136\u88ab\u5141\u8bb8\u4eceaccountOwner\u63d0\u53d6\u7684\u91d1\u989d\n    function allowance(address accountOwner, address spender) constant external returns (uint remaining) {\n        return approved[accountOwner][spender];\n    }\n\n    //\u4f7f\u7528\u4ee3\u7406\u4ea4\u6613\n    //0\u503c\u7684\u4f20\u8f93\u5fc5\u987b\u88ab\u89c6\u4e3a\u6b63\u5e38\u4f20\u8f93\u5e76\u89e6\u53d1\u4f20\u8f93\u4e8b\u4ef6\n    //\u4ee3\u7406\u4ea4\u6613\u4e0d\u81ea\u52a8\u4e3a\u5bf9\u65b9\u8865\u5145gas\n    function transferFrom(address from, address to, uint256 value) external stopInEmergency freezeOutCheck(from, value)  returns (bool success) {\n        require(value > 0);\n        require(value <= approved[from][msg.sender]);\n        require(value <= balances[from]);\n\n        approved[from][msg.sender] = approved[from][msg.sender].sub(value);\n        _transfer(from, to, value);\n        return true;\n    }\n}\n\ncontract MigrationAgent {\n  function migrateFrom(address from, uint256 value) public;\n}\n\ncontract UpgradeableToken is Owner, Token {\n  address public migrationAgent;\n\n  /**\n   * Somebody has upgraded some of his tokens.\n   */\n  event Upgrade(address indexed from, address indexed to, uint256 value);\n\n  /**\n   * New upgrade agent available.\n   */\n  event UpgradeAgentSet(address agent);\n\n  // Migrate tokens to the new token contract\n  function migrate() public {\n    require(migrationAgent != 0);\n    uint value = balances[msg.sender];\n    balances[msg.sender] = balances[msg.sender].sub(value);\n    totalSupply = totalSupply.sub(value);\n    MigrationAgent(migrationAgent).migrateFrom(msg.sender, value);\n    emit Upgrade(msg.sender, migrationAgent, value);\n  }\n\n  function () public payable {\n    require(migrationAgent != 0);\n    require(balances[msg.sender] > 0);\n    migrate();\n    msg.sender.transfer(msg.value);\n  }\n\n  function setMigrationAgent(address _agent) onlyOwner external {\n    migrationAgent = _agent;\n    emit UpgradeAgentSet(_agent);\n  }\n}\n\ncontract MIToken is UpgradeableToken {\n\n  function MIToken() public {\n    name = \"MI Token\";\n    symbol = \"MI\";\n    decimals = 18;\n\n    owner = msg.sender;\n    uint initialSupply = 100000000;\n\n    totalSupply = initialSupply * 10 ** uint256(decimals);\n    require (totalSupply >= initialSupply);\n\n    balances[msg.sender] = totalSupply;\n    emit Transfer(0x0, msg.sender, totalSupply);\n  }\n  \n  function mint(address _to, uint256 _amount) onlyOwner public returns (bool) {\n      totalSupply = totalSupply.add(_amount);\n      balances[_to] = balances[_to].add(_amount);\n      \n      emit Transfer(address(0), _to, _amount);\n      return true;\n  }\n  \n}"
}