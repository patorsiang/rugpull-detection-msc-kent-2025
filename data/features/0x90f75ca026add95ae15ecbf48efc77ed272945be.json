{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP7 AND DUP7 MSTORE PUSH1 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP5 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP5 ADD MSTORE ISZERO ISZERO PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 ADD CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP3 DUP4 MSTORE PUSH1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP1 MLOAD SWAP2 DUP3 SWAP1 SUB ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB PUSH1 DUP3 ADD CALLDATALOAD AND SWAP1 PUSH1 DUP2 ADD CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP DUP1 CALLDATALOAD SWAP1 PUSH1 ADD CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST PUSH10 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 DUP4 ADD SLOAD PUSH1 DUP5 ADD SLOAD PUSH1 SWAP1 SWAP5 ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP4 AND SWAP5 POP SWAP1 SWAP3 SWAP1 SWAP2 PUSH1 AND DUP6 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP4 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD PUSH1 DUP2 ADD SLOAD SWAP1 SWAP2 POP PUSH1 AND ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH2 DUP4 PUSH1 ADD SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMPDEST PUSH1 ADD SSTORE POP JUMP JUMPDEST PUSH1 DUP2 DUP4 LT PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP3 LT PUSH2 JUMPI PUSH1 SLOAD DUP4 LT PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP4 GT PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH1 SLOAD PUSH2 DUP6 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 SLOAD DUP3 GT PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP4 GT PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH2 PUSH1 SLOAD DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH2 DUP5 DUP7 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 CALLER SWAP1 POP PUSH1 PUSH1 DUP5 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP8 DUP5 MSTORE PUSH1 DUP3 MSTORE PUSH1 DUP1 DUP6 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP9 AND DUP7 MSTORE SWAP1 SWAP3 MSTORE SWAP3 SHA3 DUP1 SLOAD PUSH1 SWAP1 SWAP3 MUL SWAP1 SWAP3 ADD SWAP3 POP DUP5 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH18 PUSH1 SHL PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH2 DUP6 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH1 ADD SLOAD PUSH2 PUSH8 PUSH2 DUP8 PUSH1 ADD SLOAD DUP8 PUSH1 ADD SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 JUMPI PUSH2 DUP5 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 JUMPDEST DUP5 ISZERO PUSH2 JUMPI DUP2 SLOAD PUSH2 SWAP1 DUP7 PUSH2 JUMP JUMPDEST DUP3 SSTORE DUP3 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP6 DUP8 PUSH2 JUMP JUMPDEST PUSH1 DUP4 ADD SLOAD DUP3 SLOAD PUSH2 SWAP2 PUSH8 SWAP2 PUSH2 SWAP2 PUSH2 JUMP JUMPDEST PUSH1 DUP4 ADD SSTORE PUSH1 DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD DUP8 SWAP2 PUSH1 PUSH1 PUSH1 SHL SUB DUP8 AND SWAP2 PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD SWAP1 POP DUP1 PUSH1 ADD SLOAD TIMESTAMP GT PUSH2 JUMPI POP PUSH2 JUMP JUMPDEST DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 SWAP3 PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP1 PUSH2 JUMPI POP TIMESTAMP PUSH1 SWAP1 SWAP2 ADD SSTORE PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SLOAD PUSH1 AND PUSH2 JUMPI PUSH1 DUP1 DUP4 ADD DUP1 SLOAD PUSH1 NOT AND PUSH1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP4 ADD SLOAD SWAP1 SLOAD PUSH2 SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMPDEST PUSH1 SLOAD ISZERO PUSH2 JUMPI PUSH1 PUSH2 DUP4 PUSH1 ADD SLOAD TIMESTAMP PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH1 SLOAD PUSH2 DUP7 PUSH1 ADD SLOAD DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 PUSH2 DUP5 PUSH2 DUP5 PUSH8 PUSH2 JUMP JUMPDEST PUSH1 DUP7 ADD SLOAD SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP6 ADD SSTORE POP POP JUMPDEST POP TIMESTAMP PUSH1 SWAP1 SWAP2 ADD SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP6 DUP5 MSTORE PUSH1 DUP3 MSTORE PUSH1 DUP1 DUP6 SHA3 CALLER DUP1 DUP8 MSTORE SWAP4 MSTORE DUP5 SHA3 DUP1 SLOAD DUP6 DUP3 SSTORE PUSH1 DUP3 ADD SWAP6 SWAP1 SWAP6 SSTORE PUSH1 SWAP1 SWAP4 MUL ADD DUP1 SLOAD SWAP1 SWAP5 POP SWAP2 SWAP3 SWAP2 PUSH2 SWAP2 PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 SWAP1 SWAP2 AND SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD DUP6 SWAP2 CALLER SWAP2 PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 SLOAD PUSH3 ADD TIMESTAMP LT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD DUP1 SLOAD SWAP1 SWAP2 POP PUSH1 PUSH1 PUSH1 SHL SUB DUP8 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH10 PUSH1 SHL PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST POP PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND DUP3 DUP5 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP3 DUP4 MSTORE PUSH1 DUP1 DUP5 SHA3 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 SHA3 DUP1 SLOAD PUSH1 SWAP1 SWAP2 ADD SLOAD DUP3 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST DUP2 ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO PUSH2 JUMPI DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI POP PUSH1 SLOAD JUMPDEST PUSH2 JUMP JUMPDEST DUP1 ISZERO DUP1 PUSH2 JUMPI POP TIMESTAMP DUP2 LT JUMPDEST ISZERO PUSH2 JUMPI POP TIMESTAMP JUMPDEST PUSH1 PUSH1 SLOAD DUP3 GT ISZERO DUP1 PUSH2 JUMPI POP TIMESTAMP DUP3 GT ISZERO JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP2 ADD DUP3 MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP8 DUP2 AND DUP3 MSTORE PUSH1 DUP3 ADD DUP10 DUP2 MSTORE SWAP3 DUP3 ADD DUP7 DUP2 MSTORE PUSH1 PUSH1 DUP5 ADD DUP2 DUP2 MSTORE DUP7 ISZERO DUP1 ISZERO PUSH1 DUP8 ADD SWAP1 DUP2 MSTORE PUSH1 DUP1 SLOAD PUSH1 DUP2 ADD DUP3 SSTORE SWAP5 MSTORE SWAP6 MLOAD PUSH32 PUSH1 SWAP1 SWAP5 MUL SWAP4 DUP5 ADD DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP2 SWAP1 SWAP7 AND OR SWAP1 SWAP5 SSTORE SWAP5 MLOAD PUSH32 DUP3 ADD SSTORE SWAP1 MLOAD PUSH32 DUP3 ADD SSTORE SWAP3 MLOAD PUSH32 DUP5 ADD SSTORE SWAP1 MLOAD PUSH32 SWAP1 SWAP3 ADD DUP1 SLOAD PUSH1 NOT AND SWAP3 ISZERO ISZERO SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE SWAP1 SWAP2 POP PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 DUP7 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 CALLER SWAP1 POP PUSH1 PUSH1 DUP5 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP8 DUP5 MSTORE PUSH1 DUP3 MSTORE PUSH1 DUP1 DUP6 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP9 AND DUP7 MSTORE SWAP1 SWAP3 MSTORE SWAP3 SHA3 PUSH1 SWAP1 SWAP2 MUL SWAP1 SWAP2 ADD SWAP2 POP PUSH2 DUP6 PUSH2 JUMP JUMPDEST DUP1 SLOAD ISZERO PUSH2 JUMPI PUSH1 PUSH2 DUP3 PUSH1 ADD SLOAD PUSH2 PUSH8 PUSH2 DUP8 PUSH1 ADD SLOAD DUP8 PUSH1 ADD SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 JUMPI PUSH2 DUP5 DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 JUMPDEST POP JUMPDEST DUP4 ISZERO PUSH2 JUMPI DUP2 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP5 ADDRESS DUP8 PUSH2 JUMP JUMPDEST PUSH1 SLOAD ISZERO PUSH2 JUMPI PUSH1 PUSH2 PUSH1 PUSH2 PUSH1 SLOAD DUP9 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 SLOAD DUP5 SLOAD SWAP2 SWAP3 POP PUSH2 SWAP2 PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP2 AND DUP4 PUSH2 JUMP JUMPDEST DUP2 SLOAD PUSH2 SWAP1 DUP3 SWAP1 PUSH2 SWAP1 DUP9 PUSH2 JUMP JUMPDEST DUP3 SSTORE POP PUSH2 JUMP JUMPDEST DUP1 SLOAD PUSH2 SWAP1 DUP6 PUSH2 JUMP JUMPDEST DUP2 SSTORE JUMPDEST PUSH1 DUP3 ADD SLOAD DUP2 SLOAD PUSH2 SWAP2 PUSH8 SWAP2 PUSH2 SWAP2 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SSTORE PUSH1 DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD DUP7 SWAP2 PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND SWAP2 PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP5 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP8 DUP5 MSTORE PUSH1 DUP1 DUP4 MSTORE PUSH1 DUP1 DUP7 SHA3 PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP12 AND DUP9 MSTORE SWAP1 DUP6 MSTORE DUP2 DUP8 SHA3 PUSH1 SWAP1 SWAP7 MUL SWAP1 SWAP4 ADD SWAP2 DUP3 ADD SLOAD DUP3 SLOAD DUP3 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE SWAP3 MLOAD SWAP4 SWAP9 POP SWAP6 SWAP7 SWAP1 SWAP6 SWAP1 SWAP5 SWAP4 AND SWAP3 PUSH4 SWAP3 PUSH1 DUP1 DUP5 ADD SWAP4 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP6 ADD SLOAD SWAP1 SWAP2 POP TIMESTAMP GT DUP1 ISZERO PUSH2 JUMPI POP DUP1 ISZERO ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH2 DUP6 PUSH1 ADD SLOAD TIMESTAMP PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH1 SLOAD PUSH2 DUP9 PUSH1 ADD SLOAD DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 PUSH2 DUP5 PUSH2 DUP5 PUSH8 PUSH2 JUMP JUMPDEST DUP6 SWAP1 PUSH2 JUMP JUMPDEST SWAP4 POP POP POP JUMPDEST PUSH2 DUP4 PUSH1 ADD SLOAD PUSH2 PUSH8 PUSH2 DUP7 DUP9 PUSH1 ADD SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 SWAP3 PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 POP DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP5 DUP4 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP5 DUP5 JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 ADD DUP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 SHL OR SWAP1 MSTORE PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP3 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 DUP3 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP7 AND PUSH1 DUP4 ADD MSTORE DUP5 AND PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 ADD DUP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH1 SHL OR SWAP1 MSTORE PUSH2 SWAP1 DUP6 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP6 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 JUMPI DUP1 DUP1 PUSH1 ADD SWAP1 MLOAD PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH2 DUP5 DUP5 PUSH1 DUP6 PUSH2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 SELFBALANCE LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP6 PUSH2 JUMP JUMPDEST PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 PUSH1 DUP7 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP6 DUP8 PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 MLOAD SWAP2 POP PUSH1 NOT PUSH1 RETURNDATASIZE ADD AND DUP3 ADD PUSH1 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 PUSH1 DUP5 ADD RETURNDATACOPY PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 DUP3 DUP3 DUP7 PUSH2 JUMP JUMPDEST EXTCODESIZE ISZERO ISZERO SWAP1 JUMP JUMPDEST PUSH1 DUP4 ISZERO PUSH2 JUMPI POP DUP2 PUSH2 JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 ADD REVERT JUMPDEST DUP2 PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT UNKNOWN_0xfe POP PUSH13 SHA3 PUSH4 PUSH19 PUSH19 PUSH15 PUSH2 MSTORE8 PUSH2 UNKNOWN_0x4d PUSH2 GASPRICE SHA3 PUSH14 PUSH16 GASPRICE SHA3 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS SHA3 PUSH16 SHA3 PUSH20 PUSH9 SWAP2 UNKNOWN_0xf6 UNKNOWN_0xf6 PUSH12 UNKNOWN_0xaf UNKNOWN_0xb5 PUSH5 STOP MOD UNKNOWN_0xc STOP CALLER",
  "opcode_entropy": 4.857330458236562,
  "opcode_count": 4024,
  "unique_opcodes": 91,
  "byte_entropy": 6.157339174268057,
  "byte_0x": 0.00015870496746548166,
  "byte_60": 0.10331693382002857,
  "byte_80": 0.03475638787494049,
  "byte_40": 0.013013807332169497,
  "byte_52": 0.022218695445167434,
  "byte_34": 0.00047611490239644503,
  "byte_15": 0.01428344707189335,
  "byte_61": 0.05316616410093636,
  "byte_00": 0.020790350737978098,
  "byte_10": 0.008728773210601492,
  "byte_57": 0.020790350737978098,
  "byte_fd": 0.006983018568481193,
  "byte_5b": 0.032851928265354706,
  "byte_50": 0.0285668941437867,
  "byte_04": 0.011109347722583717,
  "byte_36": 0.00285668941437867,
  "byte_01": 0.05395968893826377,
  "byte_58": 0.0011109347722583717,
  "byte_35": 0.004443739089033487,
  "byte_e0": 0.0031740993493096334,
  "byte_1c": 0.0019044596095857801,
  "byte_63": 0.010315822885256308,
  "byte_5f": 0.0006348198698619266,
  "byte_96": 0.001428344707189335,
  "byte_dc": 0.0003174099349309633,
  "byte_11": 0.008093953340739566,
  "byte_c3": 0.00015870496746548166,
  "byte_5e": 0.0006348198698619266,
  "byte_54": 0.018251071258530392,
  "byte_7c": 0.0006348198698619266,
  "byte_14": 0.0066656086335502305,
  "byte_03": 0.021425170607840025,
  "byte_4f": 0.00047611490239644503,
  "byte_a0": 0.009204888112997937,
  "byte_d0": 0.0007935248373274084,
  "byte_8b": 0.0015870496746548167,
  "byte_d7": 0.0017457546421202983,
  "byte_89": 0.0006348198698619266,
  "byte_b3": 0.001428344707189335,
  "byte_ab": 0.00015870496746548166,
  "byte_fb": 0.00015870496746548166,
  "byte_91": 0.021583875575305507,
  "byte_e2": 0.0009522298047928901,
  "byte_bb": 0.0015870496746548167,
  "byte_b1": 0.0007935248373274084,
  "byte_b7": 0.0012696397397238533,
  "byte_e6": 0.0006348198698619266,
  "byte_32": 0.0009522298047928901,
  "byte_33": 0.0031740993493096334,
  "byte_da": 0.00047611490239644503,
  "byte_f0": 0.00047611490239644503,
  "byte_f4": 0.00047611490239644503,
  "byte_42": 0.0020631645770512615,
  "byte_06": 0.005554673861291859,
  "byte_56": 0.01983812093318521,
  "byte_02": 0.009681003015394382,
  "byte_27": 0.0009522298047928901,
  "byte_ea": 0.0006348198698619266,
  "byte_0b": 0.00476114902396445,
  "byte_a1": 0.0003174099349309633,
  "byte_f2": 0.0012696397397238533,
  "byte_6e": 0.0031740993493096334,
  "byte_1d": 0.0011109347722583717,
  "byte_d5": 0.00015870496746548166,
  "byte_fa": 0.0025392794794477066,
  "byte_93": 0.002380574511982225,
  "byte_f1": 0.0006348198698619266,
  "byte_a4": 0.00047611490239644503,
  "byte_94": 0.0020631645770512615,
  "byte_3f": 0.001428344707189335,
  "byte_3d": 0.0025392794794477066,
  "byte_47": 0.0009522298047928901,
  "byte_44": 0.0020631645770512615,
  "byte_1a": 0.0026979844469131884,
  "byte_3e": 0.0009522298047928901,
  "byte_70": 0.0025392794794477066,
  "byte_51": 0.01507697190922076,
  "byte_eb": 0.0007935248373274084,
  "byte_05": 0.006983018568481193,
  "byte_a6": 0.0006348198698619266,
  "byte_62": 0.003967624186637042,
  "byte_53": 0.0012696397397238533,
  "byte_12": 0.00476114902396445,
  "byte_8e": 0.00015870496746548166,
  "byte_7f": 0.0031740993493096334,
  "byte_5a": 0.0015870496746548167,
  "byte_9c": 0.0006348198698619266,
  "byte_74": 0.0031740993493096334,
  "byte_7a": 0.00047611490239644503,
  "byte_d2": 0.0006348198698619266,
  "byte_0c": 0.0025392794794477066,
  "byte_a7": 0.0015870496746548167,
  "byte_09": 0.0025392794794477066,
  "byte_cf": 0.00047611490239644503,
  "byte_5d": 0.0007935248373274084,
  "byte_c2": 0.0003174099349309633,
  "byte_c6": 0.0003174099349309633,
  "byte_77": 0.0009522298047928901,
  "byte_26": 0.0007935248373274084,
  "byte_fe": 0.0026979844469131884,
  "byte_9b": 0.0003174099349309633,
  "byte_17": 0.003967624186637042,
  "byte_ca": 0.0015870496746548167,
  "byte_f6": 0.0007935248373274084,
  "byte_ef": 0.00015870496746548166,
  "byte_b0": 0.00047611490239644503,
  "byte_e5": 0.003967624186637042,
  "byte_f7": 0.00047611490239644503,
  "byte_23": 0.0011109347722583717,
  "byte_1f": 0.0007935248373274084,
  "byte_6a": 0.00015870496746548166,
  "byte_65": 0.006506903666084749,
  "byte_2c": 0.00015870496746548166,
  "byte_82": 0.023488335184891285,
  "byte_90": 0.03681955245199175,
  "byte_81": 0.026979844469131885,
  "byte_20": 0.02094905570544358,
  "byte_f3": 0.0007935248373274084,
  "byte_3a": 0.00285668941437867,
  "byte_1b": 0.015711791779082687,
  "byte_92": 0.0066656086335502305,
  "byte_16": 0.013013807332169497,
  "byte_b8": 0.00047611490239644503,
  "byte_49": 0.00047611490239644503,
  "byte_86": 0.004285034121568005,
  "byte_84": 0.007459133470877639,
  "byte_83": 0.0077765434058086015,
  "byte_0d": 0.0030153943818441516,
  "byte_9a": 0.00015870496746548166,
  "byte_48": 0.0007935248373274084,
  "byte_55": 0.004285034121568005,
  "byte_78": 0.0007935248373274084,
  "byte_07": 0.0034915092842405966,
  "byte_95": 0.0012696397397238533,
  "byte_28": 0.0003174099349309633,
  "byte_b2": 0.0003174099349309633,
  "byte_c4": 0.0009522298047928901,
  "byte_0f": 0.0019044596095857801,
  "byte_1e": 0.0007935248373274084,
  "byte_24": 0.0022218695445167433,
  "byte_2e": 0.0003174099349309633,
  "byte_18": 0.00047611490239644503,
  "byte_5c": 0.00015870496746548166,
  "byte_cd": 0.003967624186637042,
  "byte_c1": 0.0003174099349309633,
  "byte_69": 0.0036502142517060784,
  "byte_68": 0.0015870496746548167,
  "byte_8d": 0.00015870496746548166,
  "byte_c0": 0.0003174099349309633,
  "byte_ff": 0.008093953340739566,
  "byte_85": 0.004443739089033487,
  "byte_e3": 0.00047611490239644503,
  "byte_46": 0.0046024440564989685,
  "byte_2a": 0.0020631645770512615,
  "byte_cc": 0.0011109347722583717,
  "byte_39": 0.0015870496746548167,
  "byte_41": 0.00047611490239644503,
  "byte_37": 0.0006348198698619266,
  "byte_88": 0.0025392794794477066,
  "byte_59": 0.00015870496746548166,
  "byte_73": 0.00285668941437867,
  "byte_9f": 0.0011109347722583717,
  "byte_99": 0.0009522298047928901,
  "byte_21": 0.001428344707189335,
  "byte_87": 0.003967624186637042,
  "byte_9d": 0.0003174099349309633,
  "byte_71": 0.0003174099349309633,
  "byte_19": 0.0022218695445167433,
  "byte_98": 0.0003174099349309633,
  "byte_ce": 0.00047611490239644503,
  "byte_dd": 0.0009522298047928901,
  "byte_08": 0.002380574511982225,
  "byte_db": 0.0007935248373274084,
  "byte_d9": 0.00047611490239644503,
  "byte_72": 0.0025392794794477066,
  "byte_64": 0.005237263926360895,
  "byte_67": 0.001428344707189335,
  "byte_b6": 0.001428344707189335,
  "byte_f5": 0.00047611490239644503,
  "byte_13": 0.0019044596095857801,
  "byte_ba": 0.0003174099349309633,
  "byte_d3": 0.0003174099349309633,
  "byte_a2": 0.0009522298047928901,
  "byte_f8": 0.0009522298047928901,
  "byte_75": 0.0020631645770512615,
  "byte_4b": 0.0003174099349309633,
  "byte_bc": 0.0009522298047928901,
  "byte_7d": 0.00015870496746548166,
  "byte_79": 0.0003174099349309633,
  "byte_a9": 0.00047611490239644503,
  "byte_6d": 0.0003174099349309633,
  "byte_e4": 0.0003174099349309633,
  "byte_4c": 0.00015870496746548166,
  "byte_a8": 0.0019044596095857801,
  "byte_8c": 0.0003174099349309633,
  "byte_2b": 0.0003174099349309633,
  "byte_b5": 0.0007935248373274084,
  "byte_a3": 0.0012696397397238533,
  "byte_25": 0.00047611490239644503,
  "byte_31": 0.0011109347722583717,
  "byte_30": 0.0011109347722583717,
  "byte_3b": 0.0015870496746548167,
  "byte_ee": 0.00015870496746548166,
  "byte_97": 0.0003174099349309633,
  "byte_6b": 0.0006348198698619266,
  "byte_e7": 0.00047611490239644503,
  "byte_ae": 0.00015870496746548166,
  "byte_0a": 0.002380574511982225,
  "byte_76": 0.0009522298047928901,
  "byte_ed": 0.0003174099349309633,
  "byte_38": 0.0003174099349309633,
  "byte_4a": 0.00015870496746548166,
  "byte_d8": 0.00015870496746548166,
  "byte_0e": 0.0012696397397238533,
  "byte_d1": 0.0003174099349309633,
  "byte_8f": 0.00015870496746548166,
  "byte_ec": 0.00015870496746548166,
  "byte_6c": 0.004285034121568005,
  "byte_8a": 0.0003174099349309633,
  "byte_66": 0.002380574511982225,
  "byte_df": 0.00015870496746548166,
  "byte_4d": 0.0006348198698619266,
  "byte_6f": 0.0046024440564989685,
  "byte_7b": 0.00015870496746548166,
  "byte_45": 0.00047611490239644503,
  "byte_43": 0.0006348198698619266,
  "byte_2d": 0.0003174099349309633,
  "byte_b9": 0.00015870496746548166,
  "byte_c8": 0.00015870496746548166,
  "byte_aa": 0.00015870496746548166,
  "byte_bd": 0.00015870496746548166,
  "byte_22": 0.00015870496746548166,
  "byte_c9": 0.00015870496746548166,
  "byte_e9": 0.0003174099349309633,
  "byte_af": 0.00015870496746548166,
  "num_nodes": 336,
  "num_edges": 218,
  "avg_degree": 1.2976190476190477,
  "density": 0.0019367448471926084,
  "connected_components": 137,
  "avg_clustering": 0.004464285714285714,
  "timeline_sequence": [],
  "sourcecode": "/**\n *Submitted for verification at FtmScan.com on 2022-02-20\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\npragma solidity 0.6.12;\n\n// Note that this pool has no minter key of PLD (rewards).\n// Instead, the governance will call PLD distributeReward method and send reward to this pool at the beginning.\ncontract PldGenesisRewardPool {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    // governance\n    address public operator;\n\n    // Info of each user.\n    struct UserInfo {\n        uint256 amount; // How many tokens the user has provided.\n        uint256 rewardDebt; // Reward debt. See explanation below.\n    }\n\n    // Info of each pool.\n    struct PoolInfo {\n        IERC20 token; // Address of LP token contract.\n        uint256 allocPoint; // How many allocation points assigned to this pool. PLD to distribute.\n        uint256 lastRewardTime; // Last time that PLD distribution occurs.\n        uint256 accPldPerShare; // Accumulated PLD per share, times 1e18. See below.\n        bool isStarted; // if lastRewardBlock has passed\n    }\n\n    IERC20 public pld;\n\n    // Info of each pool.\n    PoolInfo[] public poolInfo;\n\n    // Info of each user that stakes LP tokens.\n    mapping(uint256 => mapping(address => UserInfo)) public userInfo;\n\n    // Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n\n    // The time when PLD mining starts.\n    uint256 public poolStartTime;\n\n    // The time when PLD mining ends.\n    uint256 public poolEndTime;\n\n    uint256 public pldPerSecond = 0.135 ether; // 34992 PLD / (72h * 60min * 60s)\n    uint256 public runningTime = 3 days; // 1 hours\n    uint256 public constant TOTAL_REWARDS = 34992 ether;\n\n    uint256 public depositFeeBP = 1; // 1%\n    address public treasury; // fee address\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount);\n    event RewardPaid(address indexed user, uint256 amount);\n\n    constructor(\n        address _pld,\n        uint256 _poolStartTime\n    ) public {\n        require(block.timestamp < _poolStartTime, \"late\");\n        if (_pld != address(0)) pld = IERC20(_pld);\n        poolStartTime = _poolStartTime;\n        poolEndTime = poolStartTime + runningTime;\n        operator = msg.sender;\n    }\n\n    modifier onlyOperator() {\n        require(operator == msg.sender, \"PldGenesisPool: caller is not the operator\");\n        _;\n    }\n\n    function checkPoolDuplicate(IERC20 _token) internal view {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            require(poolInfo[pid].token != _token, \"PldGenesisPool: existing pool?\");\n        }\n    }\n\n    function setTreasury (address _treasury) public onlyOperator {\n        treasury = _treasury;\n    }\n    \n    // Add a new token to the pool. Can only be called by the owner.\n    function add(\n        uint256 _allocPoint,\n        IERC20 _token,\n        bool _withUpdate,\n        uint256 _lastRewardTime\n    ) public onlyOperator {\n        checkPoolDuplicate(_token);\n        if (_withUpdate) {\n            massUpdatePools();\n        }\n        if (block.timestamp < poolStartTime) {\n            // chef is sleeping\n            if (_lastRewardTime == 0) {\n                _lastRewardTime = poolStartTime;\n            } else {\n                if (_lastRewardTime < poolStartTime) {\n                    _lastRewardTime = poolStartTime;\n                }\n            }\n        } else {\n            // chef is cooking\n            if (_lastRewardTime == 0 || _lastRewardTime < block.timestamp) {\n                _lastRewardTime = block.timestamp;\n            }\n        }\n        bool _isStarted =\n        (_lastRewardTime <= poolStartTime) ||\n        (_lastRewardTime <= block.timestamp);\n        poolInfo.push(PoolInfo({\n            token : _token,\n            allocPoint : _allocPoint,\n            lastRewardTime : _lastRewardTime,\n            accPldPerShare : 0,\n            isStarted : _isStarted\n            }));\n        if (_isStarted) {\n            totalAllocPoint = totalAllocPoint.add(_allocPoint);\n        }\n    }\n\n    // Update the given pool's PLD allocation point. Can only be called by the owner.\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOperator {\n        massUpdatePools();\n        PoolInfo storage pool = poolInfo[_pid];\n        if (pool.isStarted) {\n            totalAllocPoint = totalAllocPoint.sub(pool.allocPoint).add(\n                _allocPoint\n            );\n        }\n        pool.allocPoint = _allocPoint;\n    }\n\n    // Return accumulate rewards over the given _from to _to block.\n    function getGeneratedReward(uint256 _fromTime, uint256 _toTime) public view returns (uint256) {\n        if (_fromTime >= _toTime) return 0;\n        if (_toTime >= poolEndTime) {\n            if (_fromTime >= poolEndTime) return 0;\n            if (_fromTime <= poolStartTime) return poolEndTime.sub(poolStartTime).mul(pldPerSecond);\n            return poolEndTime.sub(_fromTime).mul(pldPerSecond);\n        } else {\n            if (_toTime <= poolStartTime) return 0;\n            if (_fromTime <= poolStartTime) return _toTime.sub(poolStartTime).mul(pldPerSecond);\n            return _toTime.sub(_fromTime).mul(pldPerSecond);\n        }\n    }\n\n    // View function to see pending PLD on frontend.\n    function pendingPLD(uint256 _pid, address _user) external view returns (uint256) {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accPldPerShare = pool.accPldPerShare;\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\n        if (block.timestamp > pool.lastRewardTime && tokenSupply != 0) {\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\n            uint256 _pldReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\n            accPldPerShare = accPldPerShare.add(_pldReward.mul(1e18).div(tokenSupply));\n        }\n        return user.amount.mul(accPldPerShare).div(1e18).sub(user.rewardDebt);\n    }\n\n    // Update reward variables for all pools. Be careful of gas spending!\n    function massUpdatePools() public {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            updatePool(pid);\n        }\n    }\n\n    // Update reward variables of the given pool to be up-to-date.\n    function updatePool(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        if (block.timestamp <= pool.lastRewardTime) {\n            return;\n        }\n        uint256 tokenSupply = pool.token.balanceOf(address(this));\n        if (tokenSupply == 0) {\n            pool.lastRewardTime = block.timestamp;\n            return;\n        }\n        if (!pool.isStarted) {\n            pool.isStarted = true;\n            totalAllocPoint = totalAllocPoint.add(pool.allocPoint);\n        }\n        if (totalAllocPoint > 0) {\n            uint256 _generatedReward = getGeneratedReward(pool.lastRewardTime, block.timestamp);\n            uint256 _pldReward = _generatedReward.mul(pool.allocPoint).div(totalAllocPoint);\n            pool.accPldPerShare = pool.accPldPerShare.add(_pldReward.mul(1e18).div(tokenSupply));\n        }\n        pool.lastRewardTime = block.timestamp;\n    }\n\n    // Deposit LP tokens.\n    function deposit(uint256 _pid, uint256 _amount) public {\n        address _sender = msg.sender;\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_sender];\n        updatePool(_pid);\n        if (user.amount > 0) {\n            uint256 _pending = user.amount.mul(pool.accPldPerShare).div(1e18).sub(user.rewardDebt);\n            if (_pending > 0) {\n                safePldTransfer(_sender, _pending);\n                emit RewardPaid(_sender, _pending);\n            }\n        }\n        if (_amount > 0) {\n            pool.token.safeTransferFrom(_sender, address(this), _amount);\n            if(depositFeeBP > 0) {\n                uint256 depositFee = _amount.mul(depositFeeBP).div(100);\n                pool.token.safeTransfer(treasury, depositFee);\n                user.amount = user.amount.add(_amount).sub(depositFee);\n            } else {\n                user.amount = user.amount.add(_amount);\n            }\n        }\n        user.rewardDebt = user.amount.mul(pool.accPldPerShare).div(1e18);\n        emit Deposit(_sender, _pid, _amount);\n    }\n\n    // Withdraw LP tokens.\n    function withdraw(uint256 _pid, uint256 _amount) public {\n        address _sender = msg.sender;\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_sender];\n        require(user.amount >= _amount, \"withdraw: not good\");\n        updatePool(_pid);\n        uint256 _pending = user.amount.mul(pool.accPldPerShare).div(1e18).sub(user.rewardDebt);\n        if (_pending > 0) {\n            safePldTransfer(_sender, _pending);\n            emit RewardPaid(_sender, _pending);\n        }\n        if (_amount > 0) {\n            user.amount = user.amount.sub(_amount);\n            pool.token.safeTransfer(_sender, _amount);\n        }\n        user.rewardDebt = user.amount.mul(pool.accPldPerShare).div(1e18);\n        emit Withdraw(_sender, _pid, _amount);\n    }\n\n    // Withdraw without caring about rewards. EMERGENCY ONLY.\n    function emergencyWithdraw(uint256 _pid) public {\n        PoolInfo storage pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][msg.sender];\n        uint256 _amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n        pool.token.safeTransfer(msg.sender, _amount);\n        emit EmergencyWithdraw(msg.sender, _pid, _amount);\n    }\n\n    // Safe PLD transfer function, just in case if rounding error causes pool to not have enough PLDs.\n    function safePldTransfer(address _to, uint256 _amount) internal {\n        uint256 _pldBalance = pld.balanceOf(address(this));\n        if (_pldBalance > 0) {\n            if (_amount > _pldBalance) {\n                pld.safeTransfer(_to, _pldBalance);\n            } else {\n                pld.safeTransfer(_to, _amount);\n            }\n        }\n    }\n\n    function setOperator(address _operator) external onlyOperator {\n        operator = _operator;\n    }\n\n    function governanceRecoverUnsupported(IERC20 _token, uint256 amount, address to) external onlyOperator {\n        if (block.timestamp < poolEndTime + 90 days) {\n            // do not allow to drain core token (PLD or lps) if less than 90 days after pool ends\n            require(_token != pld, \"pld\");\n            uint256 length = poolInfo.length;\n            for (uint256 pid = 0; pid < length; ++pid) {\n                PoolInfo storage pool = poolInfo[pid];\n                require(_token != pool.token, \"pool.token\");\n            }\n        }\n        _token.safeTransfer(to, amount);\n    }\n}"
}