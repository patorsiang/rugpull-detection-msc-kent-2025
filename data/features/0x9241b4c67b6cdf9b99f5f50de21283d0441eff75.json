{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 JUMPDEST PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 ADD PUSH2 DUP4 DUP3 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND OR SWAP1 SSTORE PUSH1 DUP1 SLOAD PUSH1 DUP2 ADD PUSH2 DUP4 DUP3 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP3 DUP3 DIV ADD DUP1 SLOAD SWAP3 SWAP1 SWAP2 MOD PUSH2 EXP PUSH1 MUL NOT SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 JUMPDEST POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 SWAP2 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 DUP5 GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 MLOAD GT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 MLOAD GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD SWAP1 PUSH2 SWAP1 DUP3 DUP2 ADD PUSH2 JUMP JUMPDEST SWAP1 POP DUP5 PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 PUSH1 PUSH1 EXP SUB MUL NOT AND SWAP1 DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND MUL OR SWAP1 SSTORE POP DUP4 PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD DUP2 SWAP1 SSTORE POP DUP3 PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SWAP1 DUP1 MLOAD PUSH2 SWAP3 SWAP2 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP6 DUP6 PUSH1 MLOAD DUP3 DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE SWAP1 DUP3 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 JUMPDEST PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO PUSH2 JUMPI DUP2 PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP5 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP3 DUP3 DIV ADD SLOAD SWAP2 SWAP1 MOD PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH2 JUMP JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 JUMPDEST PUSH1 SLOAD DUP4 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD DUP5 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD DUP5 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP3 DUP3 DIV ADD SLOAD SWAP2 SWAP1 MOD PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP4 POP JUMPDEST PUSH1 SWAP1 SWAP3 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP4 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP2 POP JUMPDEST PUSH1 SLOAD DUP3 LT ISZERO PUSH2 JUMPI DUP7 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND EQ DUP1 ISZERO PUSH2 JUMPI POP DUP6 PUSH1 DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD EQ JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH1 DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP7 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 JUMPDEST PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD DUP1 SLOAD SWAP1 POP DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD DUP2 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD DUP1 SLOAD DUP1 PUSH1 ADD DUP3 DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD DUP1 SLOAD PUSH20 NOT AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND OR SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND SWAP3 CALLER AND SWAP2 PUSH32 SWAP2 DUP7 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD PUSH1 DUP7 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD PUSH1 MLOAD DUP3 DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE DUP4 SLOAD PUSH1 PUSH1 NOT PUSH2 PUSH1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV SWAP2 DUP4 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 DUP4 ADD SWAP1 DUP5 SWAP1 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP1 SLOAD DIV PUSH1 DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD DUP1 SLOAD SWAP1 POP GT ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND BALANCE LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH2 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD SLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP6 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD PUSH1 DUP6 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD PUSH1 MLOAD DUP3 DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE DUP4 SLOAD PUSH1 PUSH1 NOT PUSH2 PUSH1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV SWAP2 DUP4 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 DUP4 ADD SWAP1 DUP5 SWAP1 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 PUSH1 DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 JUMPDEST PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO PUSH2 JUMPI DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 DUP3 SHA3 ADD DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 SWAP2 DUP3 DUP3 DIV ADD SWAP2 SWAP1 MOD PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SELFDESTRUCT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND OR SWAP1 SWAP3 MSTORE POP POP POP SWAP2 SWAP1 SWAP2 ADD SWAP3 POP PUSH1 SWAP2 POP POP MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND OR SWAP1 SWAP3 MSTORE POP POP POP SWAP2 SWAP1 SWAP2 ADD SWAP3 POP PUSH1 SWAP2 POP POP MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 EQ SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 ISZERO GT PUSH2 JUMPI PUSH1 DUP4 DUP2 MSTORE PUSH1 SWAP1 SHA3 PUSH2 SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 ISZERO GT PUSH2 JUMPI PUSH1 ADD PUSH1 SWAP1 DIV DUP2 PUSH1 ADD PUSH1 SWAP1 DIV DUP4 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE SWAP1 JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 ISZERO GT PUSH2 JUMPI PUSH1 MUL DUP2 PUSH1 MUL DUP4 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 SWAP2 POP PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI DUP1 SLOAD PUSH20 NOT AND DUP2 SSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 SSTORE PUSH2 PUSH1 DUP4 ADD DUP3 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP4 ADD PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 ADD PUSH2 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV PUSH1 DUP3 SSTORE DUP1 PUSH1 LT PUSH2 JUMPI POP PUSH2 JUMP JUMPDEST PUSH1 ADD PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST POP DUP1 SLOAD PUSH1 DUP3 SSTORE SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xd0 PUSH17 UNKNOWN_0xe3 INVALID_0x7a",
  "opcode_entropy": 4.6955435099063605,
  "opcode_count": 3059,
  "unique_opcodes": 64,
  "byte_entropy": 5.610146278011009,
  "byte_0x": 0.00022941041523285156,
  "byte_60": 0.12204634090387703,
  "byte_40": 0.007570543702684102,
  "byte_52": 0.018123422803395274,
  "byte_04": 0.013994035329203946,
  "byte_36": 0.0004588208304657031,
  "byte_10": 0.015599908235833907,
  "byte_61": 0.0435879788942418,
  "byte_00": 0.042670337233310394,
  "byte_8d": 0.0018352833218628125,
  "byte_57": 0.023858683184216564,
  "byte_63": 0.0029823353980270705,
  "byte_ff": 0.02615278733654508,
  "byte_7c": 0.0009176416609314062,
  "byte_01": 0.0644643266804313,
  "byte_35": 0.0043587978894241795,
  "byte_16": 0.02018811654049094,
  "byte_0a": 0.014223445744436798,
  "byte_3b": 0.00022941041523285156,
  "byte_4f": 0.0006882312456985547,
  "byte_81": 0.03624684560679055,
  "byte_14": 0.005964670796054141,
  "byte_8f": 0.0006882312456985547,
  "byte_80": 0.02913512273457215,
  "byte_11": 0.003211745813259922,
  "byte_62": 0.0027529249827942187,
  "byte_d8": 0.0004588208304657031,
  "byte_1d": 0.0013764624913971094,
  "byte_ae": 0.0004588208304657031,
  "byte_54": 0.022482220692819455,
  "byte_2e": 0.0009176416609314062,
  "byte_65": 0.0006882312456985547,
  "byte_13": 0.0004588208304657031,
  "byte_55": 0.005276439550355586,
  "byte_bb": 0.0006882312456985547,
  "byte_ef": 0.0004588208304657031,
  "byte_67": 0.0009176416609314062,
  "byte_37": 0.0009176416609314062,
  "byte_e4": 0.0004588208304657031,
  "byte_d6": 0.0004588208304657031,
  "byte_9c": 0.00022941041523285156,
  "byte_64": 0.0006882312456985547,
  "byte_29": 0.0011470520761642578,
  "byte_c1": 0.00022941041523285156,
  "byte_95": 0.0013764624913971094,
  "byte_5e": 0.0009176416609314062,
  "byte_f4": 0.00022941041523285156,
  "byte_e0": 0.00022941041523285156,
  "byte_fd": 0.005964670796054141,
  "byte_a4": 0.0006882312456985547,
  "byte_9e": 0.0004588208304657031,
  "byte_b4": 0.00022941041523285156,
  "byte_f3": 0.0004588208304657031,
  "byte_5b": 0.03142922688690067,
  "byte_34": 0.0018352833218628125,
  "byte_15": 0.024088093599449415,
  "byte_9a": 0.0009176416609314062,
  "byte_a0": 0.01032346868547832,
  "byte_02": 0.028446891488873596,
  "byte_03": 0.021105758201422343,
  "byte_22": 0.0004588208304657031,
  "byte_56": 0.012617572837806837,
  "byte_b9": 0.0011470520761642578,
  "byte_90": 0.05276439550355586,
  "byte_24": 0.0009176416609314062,
  "byte_91": 0.029823353980270705,
  "byte_44": 0.0004588208304657031,
  "byte_83": 0.016288139481532463,
  "byte_20": 0.030282174810736407,
  "byte_1f": 0.0043587978894241795,
  "byte_82": 0.024088093599449415,
  "byte_51": 0.009405827024546915,
  "byte_92": 0.006194081211286993,
  "byte_84": 0.0043587978894241795,
  "byte_50": 0.02615278733654508,
  "byte_94": 0.0006882312456985547,
  "byte_96": 0.0006882312456985547,
  "byte_71": 0.0004588208304657031,
  "byte_1e": 0.00022941041523285156,
  "byte_05": 0.0020646937370956643,
  "byte_42": 0.0004588208304657031,
  "byte_06": 0.006194081211286993,
  "byte_a7": 0.0004588208304657031,
  "byte_0c": 0.0029823353980270705,
  "byte_66": 0.00022941041523285156,
  "byte_cc": 0.00022941041523285156,
  "byte_0d": 0.0018352833218628125,
  "byte_a8": 0.0004588208304657031,
  "byte_eb": 0.00022941041523285156,
  "byte_f2": 0.0011470520761642578,
  "byte_fe": 0.008488185363615508,
  "byte_0e": 0.0020646937370956643,
  "byte_1b": 0.0006882312456985547,
  "byte_33": 0.0022941041523285156,
  "byte_3e": 0.0006882312456985547,
  "byte_53": 0.0004588208304657031,
  "byte_6e": 0.0004588208304657031,
  "byte_bd": 0.0006882312456985547,
  "byte_b5": 0.00022941041523285156,
  "byte_6d": 0.0011470520761642578,
  "byte_72": 0.0009176416609314062,
  "byte_cf": 0.00022941041523285156,
  "byte_ee": 0.0004588208304657031,
  "byte_73": 0.0011470520761642578,
  "byte_19": 0.0038999770589584768,
  "byte_17": 0.0027529249827942187,
  "byte_0f": 0.0027529249827942187,
  "byte_12": 0.00022941041523285156,
  "byte_7f": 0.001605872906629961,
  "byte_dc": 0.00022941041523285156,
  "byte_df": 0.0006882312456985547,
  "byte_e3": 0.0006882312456985547,
  "byte_ab": 0.00022941041523285156,
  "byte_de": 0.0009176416609314062,
  "byte_f7": 0.0004588208304657031,
  "byte_a2": 0.0013764624913971094,
  "byte_a6": 0.0006882312456985547,
  "byte_75": 0.0006882312456985547,
  "byte_8e": 0.0004588208304657031,
  "byte_2a": 0.0011470520761642578,
  "byte_d4": 0.0004588208304657031,
  "byte_18": 0.0004588208304657031,
  "byte_c6": 0.0006882312456985547,
  "byte_27": 0.00022941041523285156,
  "byte_db": 0.00022941041523285156,
  "byte_e2": 0.00022941041523285156,
  "byte_9d": 0.0004588208304657031,
  "byte_79": 0.0009176416609314062,
  "byte_46": 0.00022941041523285156,
  "byte_85": 0.0029823353980270705,
  "byte_b0": 0.0009176416609314062,
  "byte_cb": 0.0004588208304657031,
  "byte_e7": 0.00022941041523285156,
  "byte_58": 0.0009176416609314062,
  "byte_f9": 0.00022941041523285156,
  "byte_9b": 0.0004588208304657031,
  "byte_99": 0.00022941041523285156,
  "byte_aa": 0.00022941041523285156,
  "byte_3f": 0.0004588208304657031,
  "byte_f5": 0.0011470520761642578,
  "byte_08": 0.003670566643725625,
  "byte_26": 0.0006882312456985547,
  "byte_28": 0.00022941041523285156,
  "byte_1c": 0.0013764624913971094,
  "byte_07": 0.0013764624913971094,
  "byte_e6": 0.00022941041523285156,
  "byte_dd": 0.0011470520761642578,
  "byte_93": 0.0020646937370956643,
  "byte_7a": 0.0011470520761642578,
  "byte_5a": 0.0004588208304657031,
  "byte_a5": 0.0004588208304657031,
  "byte_d2": 0.0004588208304657031,
  "byte_23": 0.00022941041523285156,
  "byte_c9": 0.00022941041523285156,
  "byte_32": 0.00022941041523285156,
  "byte_d3": 0.0006882312456985547,
  "byte_b7": 0.0004588208304657031,
  "byte_bc": 0.0004588208304657031,
  "byte_9f": 0.0006882312456985547,
  "byte_38": 0.0004588208304657031,
  "byte_5c": 0.0009176416609314062,
  "byte_49": 0.00022941041523285156,
  "byte_ca": 0.0004588208304657031,
  "byte_e9": 0.0009176416609314062,
  "byte_b3": 0.00022941041523285156,
  "byte_d9": 0.00022941041523285156,
  "byte_5d": 0.00022941041523285156,
  "byte_86": 0.0011470520761642578,
  "byte_2c": 0.0004588208304657031,
  "byte_21": 0.0004588208304657031,
  "byte_f6": 0.0004588208304657031,
  "byte_43": 0.00022941041523285156,
  "byte_b8": 0.0004588208304657031,
  "byte_8b": 0.00022941041523285156,
  "byte_09": 0.0011470520761642578,
  "byte_ea": 0.00022941041523285156,
  "byte_bf": 0.0004588208304657031,
  "byte_6c": 0.0004588208304657031,
  "byte_4b": 0.0006882312456985547,
  "byte_98": 0.0004588208304657031,
  "byte_2b": 0.00022941041523285156,
  "byte_c5": 0.0006882312456985547,
  "byte_c3": 0.0004588208304657031,
  "byte_76": 0.0006882312456985547,
  "byte_a3": 0.0006882312456985547,
  "byte_4d": 0.00022941041523285156,
  "byte_30": 0.0006882312456985547,
  "byte_31": 0.0006882312456985547,
  "byte_fc": 0.00022941041523285156,
  "byte_88": 0.0004588208304657031,
  "byte_f1": 0.0006882312456985547,
  "byte_0b": 0.0013764624913971094,
  "byte_77": 0.0004588208304657031,
  "byte_af": 0.0004588208304657031,
  "byte_3c": 0.0004588208304657031,
  "byte_69": 0.00022941041523285156,
  "byte_d1": 0.00022941041523285156,
  "byte_c4": 0.00022941041523285156,
  "byte_45": 0.00022941041523285156,
  "byte_ad": 0.00022941041523285156,
  "byte_a1": 0.0004588208304657031,
  "byte_b6": 0.00022941041523285156,
  "byte_6b": 0.00022941041523285156,
  "byte_8c": 0.00022941041523285156,
  "byte_fa": 0.00022941041523285156,
  "byte_a9": 0.00022941041523285156,
  "byte_25": 0.0004588208304657031,
  "byte_6a": 0.00022941041523285156,
  "byte_ec": 0.0004588208304657031,
  "byte_7e": 0.00022941041523285156,
  "byte_89": 0.0004588208304657031,
  "byte_b1": 0.00022941041523285156,
  "byte_cd": 0.00022941041523285156,
  "byte_4e": 0.00022941041523285156,
  "byte_3d": 0.00022941041523285156,
  "byte_d7": 0.00022941041523285156,
  "byte_d0": 0.00022941041523285156,
  "byte_70": 0.00022941041523285156,
  "byte_ed": 0.00022941041523285156,
  "byte_68": 0.00022941041523285156,
  "byte_e8": 0.00022941041523285156,
  "num_nodes": 239,
  "num_edges": 169,
  "avg_degree": 1.4142259414225942,
  "density": 0.002971062902148307,
  "connected_components": 90,
  "avg_clustering": 0.0,
  "timeline_sequence": [],
  "sourcecode": "//\n// compiler: 0.4.19+commit.c4cbbb05.Emscripten.clang\n//\npragma solidity ^0.4.19;\n\n// ---------------------------------------------------------------------------\n// Treasury smart contract. Owner (Treasurer) is only account that can submit\n// proposals, yet cannot actually spend. The Treasurer appoints Trustees to\n// approve spending proposals. Funds are released automatically once a\n// proposal is approved by a simple majority of trustees.\n//\n// Trustees can be flagged as inactive by the Treasurer. An inactive Trustee\n// cannot vote. The Treasurer may set/reset flags. The Treasurer can replace\n// any Trustee, though any approvals already made will stand.\n// ---------------------------------------------------------------------------\n\ncontract owned\n{\n  address public treasurer;\n  function owned() public { treasurer = msg.sender; }\n  function closedown() public onlyTreasurer { selfdestruct( treasurer ); }\n  function setTreasurer( address newTreasurer ) public onlyTreasurer\n  { treasurer = newTreasurer; }\n  modifier onlyTreasurer {\n    require( msg.sender == treasurer );\n    _;\n  }\n}\n\ncontract Treasury is owned {\n\n  event Added( address indexed trustee );\n  event Flagged( address indexed trustee, bool isRaised );\n  event Replaced( address indexed older, address indexed newer );\n\n  event Proposal( address indexed payee, uint amt, string eref );\n  event Approved( address indexed approver,\n                  address indexed to,\n                  uint amount,\n                  string eref );\n  event Spent( address indexed payee, uint amt, string eref );\n\n  struct SpendProposal {\n    address   payee;\n    uint      amount;\n    string    eref;\n    address[] approvals;\n  }\n\n  SpendProposal[] proposals;\n  address[]       trustees;\n  bool[]          flagged; // flagging trustee disables from voting\n\n  function Treasury() public {}\n\n  function() public payable {}\n\n  function add( address trustee ) public onlyTreasurer\n  {\n    require( trustee != address(0) );\n    require( trustee != treasurer ); // separate Treasurer and Trustees\n\n    for (uint ix = 0; ix < trustees.length; ix++)\n      if (trustees[ix] == trustee) return;\n\n    trustees.push(trustee);\n    flagged.push(false);\n\n    Added( trustee );\n  }\n\n  function flag( address trustee, bool isRaised ) public onlyTreasurer\n  {\n    for( uint ix = 0; ix < trustees.length; ix++ )\n      if (trustees[ix] == trustee)\n      {\n        flagged[ix] = isRaised;\n        Flagged( trustees[ix], flagged[ix] );\n        break;\n      }\n  }\n\n  function replace( address older, address newer ) public onlyTreasurer\n  {\n    for( uint ix = 0; ix < trustees.length; ix++ )\n      if (trustees[ix] == older)\n      {\n        Replaced( trustees[ix], newer );\n        trustees[ix] = newer;\n        flagged[ix] = false;\n        break;\n      }\n  }\n\n  function proposal( address _payee, uint _wei, string _eref )\n  public onlyTreasurer\n  {\n    bytes memory erefb = bytes(_eref);\n    require(    _payee != address(0)\n             && _wei > 0\n             && erefb.length > 0\n             && erefb.length <= 32 );\n\n    uint ix = proposals.length++;\n    proposals[ix].payee = _payee;\n    proposals[ix].amount = _wei;\n    proposals[ix].eref = _eref;\n\n    Proposal( _payee, _wei, _eref );\n  }\n\n  function approve( address _payee, uint _wei, string _eref ) public\n  {\n    // ensure caller is a trustee in good standing\n    bool senderValid = false;\n    for (uint tix = 0; tix < trustees.length; tix++) {\n      if (msg.sender == trustees[tix]) {\n        if (flagged[tix])\n          revert();\n\n        senderValid = true;\n      }\n    }\n    if (!senderValid) revert();\n\n    // find the matching proposal not already actioned (amount would be 0)\n    for (uint pix = 0; pix < proposals.length; pix++)\n    {\n      if (    proposals[pix].payee == _payee\n           && proposals[pix].amount == _wei\n           && strcmp(proposals[pix].eref, _eref) )\n      {\n        // prevent voting twice\n        for (uint ap = 0; ap < proposals[pix].approvals.length; ap++)\n        {\n          if (msg.sender == proposals[pix].approvals[ap])\n            revert();\n        }\n\n        proposals[pix].approvals.push( msg.sender );\n\n        Approved( msg.sender,\n                  proposals[pix].payee,\n                  proposals[pix].amount,\n                  proposals[pix].eref );\n\n        if ( proposals[pix].approvals.length > (trustees.length / 2) )\n        {\n          require( this.balance >= proposals[pix].amount );\n\n          if ( proposals[pix].payee.send(proposals[pix].amount) )\n          {\n            Spent( proposals[pix].payee,\n                   proposals[pix].amount,\n                   proposals[pix].eref );\n\n            proposals[pix].amount = 0; // prevent double spend\n          }\n        }\n      }\n    }\n  }\n\n  function strcmp( string _a, string _b ) pure internal returns (bool)\n  {\n    return keccak256(_a) == keccak256(_b);\n  }\n}"
}