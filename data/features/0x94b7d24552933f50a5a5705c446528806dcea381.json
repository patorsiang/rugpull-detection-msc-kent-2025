{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH20 PUSH1 SLOAD AND PUSH32 PUSH1 CALLDATALOAD EQ ISZERO PUSH1 JUMPI DUP1 PUSH1 MSTORE PUSH1 PUSH1 RETURN JUMPDEST CALLDATASIZE PUSH1 DUP1 CALLDATACOPY PUSH1 DUP1 CALLDATASIZE PUSH1 DUP5 GAS DELEGATECALL RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY PUSH1 DUP2 EQ ISZERO PUSH1 JUMPI RETURNDATASIZE PUSH1 REVERT JUMPDEST RETURNDATASIZE PUSH1 RETURN UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 UNKNOWN_0xd1 TIMESTAMP SWAP3 SWAP8 CALLVALUE SWAP7 MSTORE8 LOG4 SWAP2 DUP1 PUSH23 INVALID_0x6f",
  "opcode_entropy": 4.657663399762247,
  "opcode_count": 67,
  "unique_opcodes": 39,
  "byte_entropy": 4.895104871567436,
  "byte_0x": 0.005813953488372093,
  "byte_60": 0.09883720930232558,
  "byte_80": 0.03488372093023256,
  "byte_40": 0.005813953488372093,
  "byte_52": 0.01744186046511628,
  "byte_73": 0.01744186046511628,
  "byte_ff": 0.11627906976744186,
  "byte_00": 0.23837209302325582,
  "byte_54": 0.005813953488372093,
  "byte_16": 0.005813953488372093,
  "byte_7f": 0.005813953488372093,
  "byte_a6": 0.005813953488372093,
  "byte_19": 0.005813953488372093,
  "byte_48": 0.005813953488372093,
  "byte_6e": 0.005813953488372093,
  "byte_35": 0.005813953488372093,
  "byte_14": 0.011627906976744186,
  "byte_15": 0.011627906976744186,
  "byte_50": 0.011627906976744186,
  "byte_57": 0.011627906976744186,
  "byte_20": 0.011627906976744186,
  "byte_f3": 0.011627906976744186,
  "byte_5b": 0.011627906976744186,
  "byte_36": 0.011627906976744186,
  "byte_37": 0.005813953488372093,
  "byte_84": 0.005813953488372093,
  "byte_5a": 0.005813953488372093,
  "byte_f4": 0.005813953488372093,
  "byte_3d": 0.01744186046511628,
  "byte_3e": 0.011627906976744186,
  "byte_81": 0.005813953488372093,
  "byte_70": 0.011627906976744186,
  "byte_fd": 0.005813953488372093,
  "byte_fe": 0.005813953488372093,
  "byte_a2": 0.005813953488372093,
  "byte_64": 0.011627906976744186,
  "byte_69": 0.005813953488372093,
  "byte_66": 0.005813953488372093,
  "byte_58": 0.005813953488372093,
  "byte_22": 0.005813953488372093,
  "byte_12": 0.005813953488372093,
  "byte_d1": 0.005813953488372093,
  "byte_42": 0.005813953488372093,
  "byte_92": 0.005813953488372093,
  "byte_97": 0.005813953488372093,
  "byte_34": 0.005813953488372093,
  "byte_96": 0.005813953488372093,
  "byte_53": 0.005813953488372093,
  "byte_a4": 0.005813953488372093,
  "byte_91": 0.005813953488372093,
  "byte_76": 0.005813953488372093,
  "byte_d6": 0.005813953488372093,
  "byte_33": 0.011627906976744186,
  "byte_2d": 0.005813953488372093,
  "byte_e1": 0.005813953488372093,
  "byte_a1": 0.005813953488372093,
  "byte_06": 0.011627906976744186,
  "byte_8c": 0.005813953488372093,
  "byte_5f": 0.005813953488372093,
  "byte_07": 0.011627906976744186,
  "byte_c5": 0.005813953488372093,
  "byte_c8": 0.005813953488372093,
  "byte_23": 0.005813953488372093,
  "byte_c2": 0.005813953488372093,
  "byte_77": 0.011627906976744186,
  "byte_0b": 0.005813953488372093,
  "byte_95": 0.005813953488372093,
  "byte_6f": 0.005813953488372093,
  "byte_6c": 0.005813953488372093,
  "byte_63": 0.005813953488372093,
  "byte_43": 0.005813953488372093,
  "num_nodes": 5,
  "num_edges": 4,
  "avg_degree": 1.6,
  "density": 0.2,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 5,
  "event_nums": 5,
  "creation_block": 15384108,
  "creation_timestamp": 1661086801,
  "life_time": 9457.0,
  "duration_seconds": 129420.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 6,
  "num_buyers": 2,
  "num_sellers": 4,
  "num_creator_transfers": 1,
  "buy_amt": 1.5e+17,
  "sell_amt": 3e+17,
  "avg_value": 7.5e+16,
  "txn_per_block": 0.0005286529921759357,
  "avg_gas_limit": 154810.4,
  "std_gas_limit": 201130.09828327532,
  "avg_gas_used": 52068.2,
  "std_gas_used": 35037.37277479577,
  "avg_gas_price": 8171007010.6,
  "std_gas_price": 7929493686.91356,
  "safesetup_num": 1,
  "safereceived_num": 2,
  "executionsuccess_num": 2,
  "exectransaction_num": 2,
  "timeline_sequence": [
    [
      15384151,
      1661087338,
      1,
      251,
      300000000000000000,
      40993,
      7403385126,
      0,
      1,
      21834580,
      27329,
      7708969
    ],
    [
      15393545,
      1661215961,
      0,
      244,
      0,
      79898,
      12609116585,
      0,
      1,
      24906061,
      78633,
      7699575
    ],
    [
      15393565,
      1661216221,
      3,
      48,
      0,
      99357,
      20842533342,
      0,
      1,
      4332574,
      97770,
      7699555
    ],
    [
      15384108,
      1661086801,
      0,
      0,
      0,
      551504,
      0,
      0,
      0,
      0,
      56609,
      0
    ],
    [
      15393565,
      1661216221,
      0,
      0,
      150000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "/**\n *Submitted for verification at Etherscan.io on 2021-07-09\n*/\n\n// SPDX-License-Identifier: LGPL-3.0-only\npragma solidity >=0.7.0 <0.9.0;\n\n/// @title IProxy - Helper interface to access masterCopy of the Proxy on-chain\n/// @author Richard Meissner - <richard@gnosis.io>\ninterface IProxy {\n    function masterCopy() external view returns (address);\n}\n\n/// @title GnosisSafeProxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.\n/// @author Stefan George - <stefan@gnosis.io>\n/// @author Richard Meissner - <richard@gnosis.io>\ncontract GnosisSafeProxy {\n    // singleton always needs to be first declared variable, to ensure that it is at the same location in the contracts to which calls are delegated.\n    // To reduce deployment costs this variable is internal and needs to be retrieved via `getStorageAt`\n    address internal singleton;\n\n    /// @dev Constructor function sets address of singleton contract.\n    /// @param _singleton Singleton address.\n    constructor(address _singleton) {\n        require(_singleton != address(0), \"Invalid singleton address provided\");\n        singleton = _singleton;\n    }\n\n    /// @dev Fallback function forwards all transactions and returns all received return data.\n    fallback() external payable {\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            let _singleton := and(sload(0), 0xffffffffffffffffffffffffffffffffffffffff)\n            // 0xa619486e == keccak(\"masterCopy()\"). The value is right padded to 32-bytes with 0s\n            if eq(calldataload(0), 0xa619486e00000000000000000000000000000000000000000000000000000000) {\n                mstore(0, _singleton)\n                return(0, 0x20)\n            }\n            calldatacopy(0, 0, calldatasize())\n            let success := delegatecall(gas(), _singleton, 0, calldatasize(), 0, 0)\n            returndatacopy(0, 0, returndatasize())\n            if eq(success, 0) {\n                revert(0, returndatasize())\n            }\n            return(0, returndatasize())\n        }\n    }\n}\n\n/// @title Proxy Factory - Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n/// @author Stefan George - <stefan@gnosis.pm>\ncontract GnosisSafeProxyFactory {\n    event ProxyCreation(GnosisSafeProxy proxy, address singleton);\n\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n    /// @param singleton Address of singleton contract.\n    /// @param data Payload for message call sent to new proxy contract.\n    function createProxy(address singleton, bytes memory data) public returns (GnosisSafeProxy proxy) {\n        proxy = new GnosisSafeProxy(singleton);\n        if (data.length > 0)\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                if eq(call(gas(), proxy, 0, add(data, 0x20), mload(data), 0, 0), 0) {\n                    revert(0, 0)\n                }\n            }\n        emit ProxyCreation(proxy, singleton);\n    }\n\n    /// @dev Allows to retrieve the runtime code of a deployed Proxy. This can be used to check that the expected Proxy was deployed.\n    function proxyRuntimeCode() public pure returns (bytes memory) {\n        return type(GnosisSafeProxy).runtimeCode;\n    }\n\n    /// @dev Allows to retrieve the creation code used for the Proxy deployment. With this it is easily possible to calculate predicted address.\n    function proxyCreationCode() public pure returns (bytes memory) {\n        return type(GnosisSafeProxy).creationCode;\n    }\n\n    /// @dev Allows to create new proxy contact using CREATE2 but it doesn't run the initializer.\n    ///      This method is only meant as an utility to be called from other methods\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function deployProxyWithNonce(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce\n    ) internal returns (GnosisSafeProxy proxy) {\n        // If the initializer changes the proxy address should change too. Hashing the initializer data is cheaper than just concatinating it\n        bytes32 salt = keccak256(abi.encodePacked(keccak256(initializer), saltNonce));\n        bytes memory deploymentData = abi.encodePacked(type(GnosisSafeProxy).creationCode, uint256(uint160(_singleton)));\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            proxy := create2(0x0, add(0x20, deploymentData), mload(deploymentData), salt)\n        }\n        require(address(proxy) != address(0), \"Create2 call failed\");\n    }\n\n    /// @dev Allows to create new proxy contact and execute a message call to the new proxy within one transaction.\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function createProxyWithNonce(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce\n    ) public returns (GnosisSafeProxy proxy) {\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\n        if (initializer.length > 0)\n            // solhint-disable-next-line no-inline-assembly\n            assembly {\n                if eq(call(gas(), proxy, 0, add(initializer, 0x20), mload(initializer), 0, 0), 0) {\n                    revert(0, 0)\n                }\n            }\n        emit ProxyCreation(proxy, _singleton);\n    }\n\n    /// @dev Allows to create new proxy contact, execute a message call to the new proxy and call a specified callback within one transaction\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    /// @param callback Callback that will be invoced after the new proxy contract has been successfully deployed and initialized.\n    function createProxyWithCallback(\n        address _singleton,\n        bytes memory initializer,\n        uint256 saltNonce,\n        IProxyCreationCallback callback\n    ) public returns (GnosisSafeProxy proxy) {\n        uint256 saltNonceWithCallback = uint256(keccak256(abi.encodePacked(saltNonce, callback)));\n        proxy = createProxyWithNonce(_singleton, initializer, saltNonceWithCallback);\n        if (address(callback) != address(0)) callback.proxyCreated(proxy, _singleton, initializer, saltNonce);\n    }\n\n    /// @dev Allows to get the address for a new proxy contact created via `createProxyWithNonce`\n    ///      This method is only meant for address calculation purpose when you use an initializer that would revert,\n    ///      therefore the response is returned with a revert. When calling this method set `from` to the address of the proxy factory.\n    /// @param _singleton Address of singleton contract.\n    /// @param initializer Payload for message call sent to new proxy contract.\n    /// @param saltNonce Nonce that will be used to generate the salt to calculate the address of the new proxy contract.\n    function calculateCreateProxyWithNonceAddress(\n        address _singleton,\n        bytes calldata initializer,\n        uint256 saltNonce\n    ) external returns (GnosisSafeProxy proxy) {\n        proxy = deployProxyWithNonce(_singleton, initializer, saltNonce);\n        revert(string(abi.encodePacked(proxy)));\n    }\n}\n\ninterface IProxyCreationCallback {\n    function proxyCreated(\n        GnosisSafeProxy proxy,\n        address _singleton,\n        bytes calldata initializer,\n        uint256 saltNonce\n    ) external;\n}"
}