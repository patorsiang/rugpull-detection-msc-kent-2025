{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP CALLER PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 EXP PUSH4 MUL PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 CALLVALUE GT ISZERO PUSH2 JUMPI PUSH2 CALLER PUSH8 PUSH1 PUSH1 EXP PUSH1 SLOAD CALLVALUE MUL MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH2 CALLER PUSH1 PUSH1 EXP PUSH1 SLOAD MUL PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 SLOAD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND PUSH32 DUP3 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP2 PUSH20 AND PUSH1 PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 ADDRESS PUSH20 AND BALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH32 DUP3 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 DUP5 SWAP1 POP PUSH2 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP DUP1 PUSH20 AND PUSH4 CALLER DUP7 ADDRESS DUP8 PUSH1 MLOAD DUP6 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD PUSH1 SLOAD SUB SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP STOP LOG1 PUSH6 SHA3 DUP9 UNKNOWN_0x2b GASLIMIT PUSH23 GT INVALID_0x7e",
  "opcode_entropy": 4.733223327673783,
  "opcode_count": 3203,
  "unique_opcodes": 65,
  "byte_entropy": 4.633036274926828,
  "byte_0x": 0.00014624159110851126,
  "byte_60": 0.06727113190991518,
  "byte_40": 0.00921322023983621,
  "byte_52": 0.015647850248610706,
  "byte_34": 0.004533489324363849,
  "byte_15": 0.019157648435214975,
  "byte_61": 0.02676221117285756,
  "byte_00": 0.04314126937701082,
  "byte_0f": 0.0007312079555425563,
  "byte_57": 0.012430535244223457,
  "byte_80": 0.030710734132787364,
  "byte_fd": 0.007458321146534074,
  "byte_5b": 0.02193623866627669,
  "byte_33": 0.0036560397777127816,
  "byte_01": 0.03027200935946183,
  "byte_0a": 0.005995905235448962,
  "byte_81": 0.026031003217315003,
  "byte_54": 0.008774495466510676,
  "byte_73": 0.01754899093302135,
  "byte_ff": 0.34513015501608657,
  "byte_02": 0.0058496636443404505,
  "byte_19": 0.0026323486399532025,
  "byte_16": 0.021351272301842646,
  "byte_90": 0.03451301550160866,
  "byte_83": 0.005118455688797894,
  "byte_17": 0.00233986545773618,
  "byte_55": 0.0035097981866042704,
  "byte_50": 0.03027200935946183,
  "byte_12": 0.0013161743199766012,
  "byte_63": 0.005118455688797894,
  "byte_3b": 0.0004387247733255338,
  "byte_9a": 0.0002924831822170225,
  "byte_ca": 0.000584966364434045,
  "byte_c3": 0.0002924831822170225,
  "byte_04": 0.008335770693185142,
  "byte_32": 0.0004387247733255338,
  "byte_05": 0.0026323486399532025,
  "byte_03": 0.00921322023983621,
  "byte_06": 0.0030710734132787364,
  "byte_b4": 0.00014624159110851126,
  "byte_39": 0.0004387247733255338,
  "byte_f3": 0.0030710734132787364,
  "byte_36": 0.00014624159110851126,
  "byte_10": 0.0020473822755191578,
  "byte_35": 0.0035097981866042704,
  "byte_7c": 0.0002924831822170225,
  "byte_de": 0.0002924831822170225,
  "byte_14": 0.005703422053231939,
  "byte_7d": 0.0004387247733255338,
  "byte_09": 0.002193623866627669,
  "byte_5e": 0.0004387247733255338,
  "byte_a7": 0.0010236911377595789,
  "byte_b3": 0.0007312079555425563,
  "byte_0b": 0.0008774495466510676,
  "byte_18": 0.0010236911377595789,
  "byte_0d": 0.0008774495466510676,
  "byte_dd": 0.0014624159110851126,
  "byte_65": 0.000584966364434045,
  "byte_23": 0.000584966364434045,
  "byte_b8": 0.00014624159110851126,
  "byte_72": 0.0004387247733255338,
  "byte_8e": 0.0002924831822170225,
  "byte_2c": 0.0002924831822170225,
  "byte_d1": 0.000584966364434045,
  "byte_07": 0.003948522959929804,
  "byte_2f": 0.0002924831822170225,
  "byte_37": 0.0008774495466510676,
  "byte_79": 0.0007312079555425563,
  "byte_31": 0.0007312079555425563,
  "byte_3c": 0.0004387247733255338,
  "byte_e5": 0.0007312079555425563,
  "byte_67": 0.0004387247733255338,
  "byte_59": 0.0004387247733255338,
  "byte_cd": 0.00014624159110851126,
  "byte_3d": 0.00014624159110851126,
  "byte_82": 0.009944428195378765,
  "byte_44": 0.000584966364434045,
  "byte_38": 0.00014624159110851126,
  "byte_c8": 0.0008774495466510676,
  "byte_ab": 0.0010236911377595789,
  "byte_51": 0.01052939455981281,
  "byte_cf": 0.00014624159110851126,
  "byte_f8": 0.0004387247733255338,
  "byte_d9": 0.0002924831822170225,
  "byte_d4": 0.0002924831822170225,
  "byte_62": 0.0008774495466510676,
  "byte_87": 0.0004387247733255338,
  "byte_6d": 0.0002924831822170225,
  "byte_1b": 0.0007312079555425563,
  "byte_22": 0.0004387247733255338,
  "byte_9d": 0.000584966364434045,
  "byte_70": 0.0004387247733255338,
  "byte_a0": 0.0002924831822170225,
  "byte_85": 0.0016086575021936238,
  "byte_91": 0.01272301842644048,
  "byte_d2": 0.0004387247733255338,
  "byte_8d": 0.0007312079555425563,
  "byte_a5": 0.0004387247733255338,
  "byte_cb": 0.00014624159110851126,
  "byte_95": 0.0010236911377595789,
  "byte_d8": 0.00014624159110851126,
  "byte_9b": 0.0007312079555425563,
  "byte_41": 0.0002924831822170225,
  "byte_a6": 0.0004387247733255338,
  "byte_f9": 0.0004387247733255338,
  "byte_da": 0.00014624159110851126,
  "byte_e1": 0.0004387247733255338,
  "byte_e2": 0.000584966364434045,
  "byte_a9": 0.00014624159110851126,
  "byte_9c": 0.00014624159110851126,
  "byte_bb": 0.0002924831822170225,
  "byte_c1": 0.0004387247733255338,
  "byte_a1": 0.0007312079555425563,
  "byte_2d": 0.00014624159110851126,
  "byte_66": 0.00014624159110851126,
  "byte_75": 0.0002924831822170225,
  "byte_e9": 0.00014624159110851126,
  "byte_db": 0.0002924831822170225,
  "byte_0e": 0.0004387247733255338,
  "byte_08": 0.0024861070488446913,
  "byte_ed": 0.000584966364434045,
  "byte_3e": 0.00014624159110851126,
  "byte_5a": 0.0008774495466510676,
  "byte_ef": 0.0007312079555425563,
  "byte_2e": 0.0004387247733255338,
  "byte_c6": 0.0004387247733255338,
  "byte_f0": 0.00014624159110851126,
  "byte_5c": 0.00014624159110851126,
  "byte_f1": 0.0010236911377595789,
  "byte_c7": 0.0002924831822170225,
  "byte_68": 0.0010236911377595789,
  "byte_9e": 0.00014624159110851126,
  "byte_2b": 0.0007312079555425563,
  "byte_e4": 0.0004387247733255338,
  "byte_76": 0.0004387247733255338,
  "byte_11": 0.0019011406844106464,
  "byte_e0": 0.00014624159110851126,
  "byte_b6": 0.0002924831822170225,
  "byte_64": 0.0004387247733255338,
  "byte_fe": 0.00014624159110851126,
  "byte_56": 0.008920737057619187,
  "byte_7b": 0.00014624159110851126,
  "byte_20": 0.02295992980403627,
  "byte_7a": 0.0004387247733255338,
  "byte_21": 0.0002924831822170225,
  "byte_88": 0.0010236911377595789,
  "byte_48": 0.00014624159110851126,
  "byte_d0": 0.00014624159110851126,
  "byte_84": 0.0024861070488446913,
  "byte_b5": 0.00014624159110851126,
  "byte_1f": 0.000584966364434045,
  "byte_92": 0.0024861070488446913,
  "byte_4b": 0.0002924831822170225,
  "byte_78": 0.0002924831822170225,
  "byte_0c": 0.000584966364434045,
  "byte_99": 0.0002924831822170225,
  "byte_1a": 0.00014624159110851126,
  "byte_3f": 0.0002924831822170225,
  "byte_6c": 0.0004387247733255338,
  "byte_be": 0.00014624159110851126,
  "byte_df": 0.0002924831822170225,
  "byte_77": 0.00014624159110851126,
  "byte_bc": 0.0002924831822170225,
  "byte_ce": 0.00014624159110851126,
  "byte_13": 0.0007312079555425563,
  "byte_2a": 0.00014624159110851126,
  "byte_5f": 0.00014624159110851126,
  "byte_8c": 0.0002924831822170225,
  "byte_89": 0.0002924831822170225,
  "byte_26": 0.00014624159110851126,
  "byte_29": 0.0004387247733255338,
  "byte_98": 0.00014624159110851126,
  "byte_1d": 0.00014624159110851126,
  "byte_93": 0.000584966364434045,
  "byte_42": 0.000584966364434045,
  "byte_58": 0.0002924831822170225,
  "byte_b0": 0.000584966364434045,
  "byte_ea": 0.00014624159110851126,
  "byte_fa": 0.00014624159110851126,
  "byte_49": 0.000584966364434045,
  "byte_7f": 0.00116993272886809,
  "byte_ba": 0.00014624159110851126,
  "byte_b2": 0.0002924831822170225,
  "byte_8a": 0.00014624159110851126,
  "byte_a8": 0.00014624159110851126,
  "byte_1e": 0.0004387247733255338,
  "byte_a2": 0.0002924831822170225,
  "byte_f2": 0.0004387247733255338,
  "byte_ad": 0.000584966364434045,
  "byte_69": 0.0008774495466510676,
  "byte_c2": 0.000584966364434045,
  "byte_fc": 0.0007312079555425563,
  "byte_aa": 0.000584966364434045,
  "byte_c4": 0.0004387247733255338,
  "byte_28": 0.0004387247733255338,
  "byte_f5": 0.0008774495466510676,
  "byte_4d": 0.0004387247733255338,
  "byte_a3": 0.0007312079555425563,
  "byte_6f": 0.00014624159110851126,
  "byte_53": 0.0002924831822170225,
  "byte_eb": 0.00014624159110851126,
  "byte_ec": 0.00014624159110851126,
  "byte_4f": 0.0002924831822170225,
  "byte_71": 0.00014624159110851126,
  "byte_c0": 0.00014624159110851126,
  "byte_f7": 0.0002924831822170225,
  "byte_b9": 0.00014624159110851126,
  "byte_25": 0.00014624159110851126,
  "byte_86": 0.0008774495466510676,
  "byte_6e": 0.00014624159110851126,
  "byte_94": 0.0002924831822170225,
  "byte_30": 0.000584966364434045,
  "byte_4e": 0.00014624159110851126,
  "byte_d3": 0.00014624159110851126,
  "byte_74": 0.0004387247733255338,
  "byte_96": 0.00014624159110851126,
  "byte_7e": 0.0002924831822170225,
  "byte_c5": 0.00014624159110851126,
  "byte_8f": 0.0002924831822170225,
  "byte_b1": 0.00014624159110851126,
  "byte_ee": 0.00014624159110851126,
  "byte_45": 0.00014624159110851126,
  "byte_f4": 0.00014624159110851126,
  "byte_5d": 0.00014624159110851126,
  "byte_43": 0.00014624159110851126,
  "byte_e6": 0.00014624159110851126,
  "byte_a4": 0.00014624159110851126,
  "byte_9f": 0.00014624159110851126,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 2,
  "event_nums": 2,
  "creation_block": 5252913,
  "creation_timestamp": 1521017456,
  "life_time": 16.0,
  "duration_seconds": 257.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.11764705882352941,
  "avg_gas_limit": 1026323.5,
  "std_gas_limit": 921519.5,
  "avg_gas_used": 1010085.0,
  "std_gas_used": 937758.0,
  "avg_gas_price": 3700000000.0,
  "std_gas_price": 700000000.0,
  "transfer_num": 1,
  "timeline_sequence": [
    [
      5252913,
      1521017456,
      1,
      44,
      0,
      1947843,
      4400000000,
      0,
      1,
      5844454,
      1947843,
      17839178
    ],
    [
      5252929,
      1521017713,
      28,
      92,
      0,
      104804,
      3000000000,
      0,
      1,
      7511162,
      72327,
      17839162
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.18;\n\ncontract Owned {\n    address public owner;\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function Owned() public{\n        owner = msg.sender;\n    }\n    \n    function changeOwner(address _newOwner) public onlyOwner {\n        owner = _newOwner;\n    }\n}\n\n\ncontract tokenRecipient { \n  function receiveApproval (address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\ncontract ERC20Token {\n\n    uint256 public totalSupply;\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n    function transfer(address _to, uint256 _value) public returns (bool success);\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n    function approve(address _spender, uint256 _value) public returns (bool success);\n    function allowance(address _owner, address _spender) public constant  returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract DASABI_IO_Contract is ERC20Token, Owned{\n\n    /* Public variables of the token */\n    string  public constant name = \"dasabi.io DSBI\";\n    string  public constant symbol = \"DSBI\";\n    uint256 public constant decimals = 18;\n    uint256 private constant etherChange = 10**18;\n    \n    /* Variables of the token */\n    uint256 public totalSupply;\n    uint256 public totalRemainSupply;\n    uint256 public ExchangeRate;\n    \n    uint256 public CandyRate;\n    \n    bool    public crowdsaleIsOpen;\n    bool    public CandyDropIsOpen;\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowances;\n    mapping (address => bool) public blacklist;\n    \n    address public multisigAddress;\n    /* Events */\n    event mintToken(address indexed _to, uint256 _value);\n    event burnToken(address indexed _from, uint256 _value);\n    \n    function () payable public {\n        require (crowdsaleIsOpen == true);\n              \n        \n        if (msg.value > 0) {\n        \tmintDSBIToken(msg.sender, (msg.value * ExchangeRate * 10**decimals) / etherChange);\n        }\n        \n        if(CandyDropIsOpen){\n\t        if(!blacklist[msg.sender]){\n\t\t        mintDSBIToken(msg.sender, CandyRate * 10**decimals);\n\t\t        blacklist[msg.sender] = true;\n\t\t    }\n\t    }\n    }\n    /* Initializes contract and  sets restricted addresses */\n    function DASABI_IO_Contract() public {\n        owner = msg.sender;\n        totalSupply = 1000000000 * 10**decimals;\n        ExchangeRate = 50000;\n        CandyRate = 50;\n        totalRemainSupply = totalSupply;\n        crowdsaleIsOpen = true;\n        CandyDropIsOpen = true;\n    }\n    \n    function setExchangeRate(uint256 _ExchangeRate) public onlyOwner {\n        ExchangeRate = _ExchangeRate;\n    }\n    \n    function crowdsaleOpen(bool _crowdsaleIsOpen) public onlyOwner{\n        crowdsaleIsOpen = _crowdsaleIsOpen;\n    }\n    \n    function CandyDropOpen(bool _CandyDropIsOpen) public onlyOwner{\n        CandyDropIsOpen = _CandyDropIsOpen;\n    }\n    \n    /* Returns total supply of issued tokens */\n    function totalDistributed() public constant returns (uint256)  {   \n        return totalSupply - totalRemainSupply ;\n    }\n\n    /* Returns balance of address */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    /* Transfers tokens from your address to other */\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require (balances[msg.sender] >= _value);            // Throw if sender has insufficient balance\n        require (balances[_to] + _value > balances[_to]);   // Throw if owerflow detected\n        balances[msg.sender] -= _value;                     // Deduct senders balance\n        balances[_to] += _value;                            // Add recivers blaance \n        Transfer(msg.sender, _to, _value);                  // Raise Transfer event\n        return true;\n    }\n\n    /* Approve other address to spend tokens on your account */\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowances[msg.sender][_spender] = _value;          // Set allowance         \n        Approval(msg.sender, _spender, _value);             // Raise Approval event         \n        return true;\n    }\n\n    /* Approve and then communicate the approved contract in a single tx */ \n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {            \n        tokenRecipient spender = tokenRecipient(_spender);              // Cast spender to tokenRecipient contract         \n        approve(_spender, _value);                                      // Set approval to contract for _value         \n        spender.receiveApproval(msg.sender, _value, this, _extraData);  // Raise method on _spender contract         \n        return true;     \n    }     \n\n    /* A contract attempts to get the coins */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {      \n        require (balances[_from] > _value);                // Throw if sender does not have enough balance     \n        require (balances[_to] + _value > balances[_to]);  // Throw if overflow detected    \n        require (_value <= allowances[_from][msg.sender]);  // Throw if you do not have allowance       \n        balances[_from] -= _value;                          // Deduct senders balance    \n        balances[_to] += _value;                            // Add recipient blaance         \n        allowances[_from][msg.sender] -= _value;            // Deduct allowance for this address         \n        Transfer(_from, _to, _value);                       // Raise Transfer event\n        return true;     \n    }         \n\n    /* Get the amount of allowed tokens to spend */     \n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {         \n        return allowances[_owner][_spender];\n    }     \n        \n    /*withdraw Ether to a multisig address*/\n    function withdraw(address _multisigAddress) public onlyOwner {    \n        require(_multisigAddress != 0x0);\n        multisigAddress = _multisigAddress;\n        multisigAddress.transfer(this.balance);\n    }  \n    \n    /* Issue new tokens */     \n    function mintDSBIToken(address _to, uint256 _amount) internal { \n        require (balances[_to] + _amount > balances[_to]);      // Check for overflows\n        require (totalRemainSupply > _amount);\n        totalRemainSupply -= _amount;                           // Update total supply\n        balances[_to] += _amount;                               // Set minted coins to target\n        mintToken(_to, _amount);                                // Create Mint event       \n        Transfer(0x0, _to, _amount);                            // Create Transfer event from 0x\n    }  \n    \n    function mintTokens(address _sendTo, uint256 _sendAmount)public onlyOwner {\n        mintDSBIToken(_sendTo, _sendAmount);\n    }\n    \n    /* Destroy tokens from owners account */\n    function burnTokens(uint256 _amount)public onlyOwner {\n        require (balances[msg.sender] > _amount);               // Throw if you do not have enough balance\n        totalRemainSupply += _amount;                           // Deduct totalSupply\n        balances[msg.sender] -= _amount;                             // Destroy coins on senders wallet\n        burnToken(msg.sender, _amount);                              // Raise Burn event\n    }\n}"
}