{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT SWAP1 DUP2 AND CALLER OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP1 DUP3 MSTORE PUSH32 PUSH1 SWAP1 SWAP3 ADD SWAP2 DUP3 MSTORE PUSH2 SWAP2 PUSH1 SWAP2 PUSH2 JUMP JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP1 DUP3 MSTORE PUSH32 PUSH1 SWAP1 SWAP3 ADD SWAP2 DUP3 MSTORE PUSH2 SWAP2 DUP2 PUSH2 JUMP JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH3 PUSH1 DUP2 SWAP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP5 SHA3 DUP6 SWAP1 SSTORE DUP4 SLOAD DUP2 MLOAD SWAP6 DUP7 MSTORE SWAP1 MLOAD SWAP3 AND SWAP4 PUSH32 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 PUSH2 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 SWAP2 POP PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 DUP1 PUSH3 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP5 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP4 AND DUP5 SWAP1 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 SHA3 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP5 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP5 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 PUSH1 DUP1 MLOAD DUP5 DUP2 MSTORE SWAP1 MLOAD PUSH1 SWAP2 PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP2 SWAP1 DUP7 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 DUP6 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP6 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP10 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP9 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP7 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP9 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP10 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP12 AND SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 PUSH1 DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD CALLER SWAP2 PUSH1 PUSH1 PUSH1 EXP SUB DUP11 AND SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP PUSH1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE MLOAD PUSH32 SWAP2 SWAP1 LOG2 POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 CALLER ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP4 DUP5 AND SWAP4 SWAP1 SWAP2 AND SWAP2 PUSH32 SWAP2 LOG3 PUSH1 SLOAD PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP5 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP3 SLOAD DUP5 MLOAD DUP8 DUP2 MSTORE SWAP5 MLOAD SWAP3 AND SWAP4 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 SWAP2 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE MLOAD PUSH32 SWAP2 SWAP1 LOG2 POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP7 AND DUP2 MSTORE PUSH1 DUP3 MSTORE DUP3 DUP2 SHA3 CALLER DUP3 MSTORE SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP7 AND SWAP4 SWAP2 SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP STOP UNKNOWN_0xdd CALLCODE MSTORE UNKNOWN_0xad SHL UNKNOWN_0xe2 UNKNOWN_0xc8 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef LOG1 PUSH6 SHA3 PUSH9 UNKNOWN_0xef UNKNOWN_0x5c UNOFFICIAL_SWAP DUP15 CALLDATALOAD UNKNOWN_0xd UNKNOWN_0xe8 INVALID_0x7c",
  "opcode_entropy": 4.787080906459641,
  "opcode_count": 2811,
  "unique_opcodes": 81,
  "byte_entropy": 5.802333841397486,
  "byte_0x": 0.00023952095808383233,
  "byte_60": 0.12383233532934132,
  "byte_80": 0.0407185628742515,
  "byte_40": 0.011976047904191617,
  "byte_52": 0.03089820359281437,
  "byte_34": 0.004790419161676647,
  "byte_15": 0.014610778443113773,
  "byte_61": 0.041437125748502994,
  "byte_00": 0.04910179640718563,
  "byte_10": 0.0019161676646706587,
  "byte_57": 0.01868263473053892,
  "byte_fd": 0.012215568862275449,
  "byte_5b": 0.031137724550898204,
  "byte_50": 0.019401197604790418,
  "byte_54": 0.013892215568862276,
  "byte_01": 0.04311377245508982,
  "byte_a0": 0.014610778443113773,
  "byte_02": 0.020838323353293414,
  "byte_0a": 0.016047904191616766,
  "byte_03": 0.02347305389221557,
  "byte_19": 0.002874251497005988,
  "byte_90": 0.04910179640718563,
  "byte_81": 0.030419161676646708,
  "byte_16": 0.027305389221556887,
  "byte_33": 0.005988023952095809,
  "byte_17": 0.001437125748502994,
  "byte_91": 0.018922155688622756,
  "byte_55": 0.00718562874251497,
  "byte_51": 0.012934131736526947,
  "byte_82": 0.015808383233532935,
  "byte_7f": 0.002155688622754491,
  "byte_4a": 0.0009580838323353293,
  "byte_69": 0.001437125748502994,
  "byte_6e": 0.0011976047904191617,
  "byte_43": 0.0011976047904191617,
  "byte_6f": 0.000718562874251497,
  "byte_20": 0.027065868263473052,
  "byte_92": 0.00934131736526946,
  "byte_73": 0.0011976047904191617,
  "byte_2b": 0.0011976047904191617,
  "byte_56": 0.015808383233532935,
  "byte_b6": 0.00047904191616766467,
  "byte_04": 0.008862275449101797,
  "byte_ff": 0.026347305389221556,
  "byte_62": 0.0009580838323353293,
  "byte_98": 0.00023952095808383233,
  "byte_96": 0.000718562874251497,
  "byte_05": 0.0031137724550898203,
  "byte_06": 0.0038323353293413173,
  "byte_07": 0.006467065868263473,
  "byte_84": 0.007664670658682635,
  "byte_85": 0.004790419161676647,
  "byte_83": 0.011017964071856288,
  "byte_95": 0.0019161676646706587,
  "byte_86": 0.0026347305389221557,
  "byte_93": 0.005508982035928144,
  "byte_dd": 0.0019161676646706587,
  "byte_f2": 0.0016766467065868263,
  "byte_ad": 0.000718562874251497,
  "byte_1b": 0.00047904191616766467,
  "byte_e2": 0.0011976047904191617,
  "byte_c8": 0.000718562874251497,
  "byte_9b": 0.000718562874251497,
  "byte_c2": 0.00047904191616766467,
  "byte_b0": 0.000718562874251497,
  "byte_68": 0.0016766467065868263,
  "byte_fc": 0.00047904191616766467,
  "byte_37": 0.0011976047904191617,
  "byte_8d": 0.000718562874251497,
  "byte_aa": 0.0011976047904191617,
  "byte_a7": 0.0009580838323353293,
  "byte_f1": 0.0009580838323353293,
  "byte_63": 0.008383233532934131,
  "byte_c4": 0.0009580838323353293,
  "byte_a1": 0.001437125748502994,
  "byte_28": 0.00047904191616766467,
  "byte_f5": 0.001437125748502994,
  "byte_5a": 0.0009580838323353293,
  "byte_4d": 0.0011976047904191617,
  "byte_23": 0.0011976047904191617,
  "byte_b3": 0.0009580838323353293,
  "byte_ef": 0.0009580838323353293,
  "byte_a3": 0.0023952095808383233,
  "byte_c6": 0.00047904191616766467,
  "byte_1f": 0.002155688622754491,
  "byte_6c": 0.0009580838323353293,
  "byte_99": 0.0009580838323353293,
  "byte_11": 0.002874251497005988,
  "byte_7e": 0.00047904191616766467,
  "byte_a5": 0.0009580838323353293,
  "byte_a9": 0.000718562874251497,
  "byte_c3": 0.00047904191616766467,
  "byte_af": 0.0009580838323353293,
  "byte_0e": 0.00407185628742515,
  "byte_78": 0.00047904191616766467,
  "byte_d6": 0.00047904191616766467,
  "byte_39": 0.0023952095808383233,
  "byte_f3": 0.0016766467065868263,
  "byte_36": 0.00023952095808383233,
  "byte_7c": 0.0009580838323353293,
  "byte_35": 0.005269461077844311,
  "byte_de": 0.00023952095808383233,
  "byte_14": 0.006467065868263473,
  "byte_0b": 0.0019161676646706587,
  "byte_09": 0.0031137724550898203,
  "byte_5e": 0.00047904191616766467,
  "byte_18": 0.0009580838323353293,
  "byte_0d": 0.0033532934131736527,
  "byte_cd": 0.000718562874251497,
  "byte_b8": 0.00023952095808383233,
  "byte_72": 0.00047904191616766467,
  "byte_f4": 0.00047904191616766467,
  "byte_31": 0.000718562874251497,
  "byte_3c": 0.00047904191616766467,
  "byte_e5": 0.0009580838323353293,
  "byte_67": 0.00047904191616766467,
  "byte_1e": 0.0011976047904191617,
  "byte_42": 0.0009580838323353293,
  "byte_49": 0.0009580838323353293,
  "byte_45": 0.00047904191616766467,
  "byte_70": 0.00047904191616766467,
  "byte_8e": 0.00047904191616766467,
  "byte_ea": 0.00023952095808383233,
  "byte_79": 0.00047904191616766467,
  "byte_ba": 0.00047904191616766467,
  "byte_97": 0.000718562874251497,
  "byte_d0": 0.0011976047904191617,
  "byte_cb": 0.00023952095808383233,
  "byte_d8": 0.00047904191616766467,
  "byte_41": 0.00023952095808383233,
  "byte_71": 0.000718562874251497,
  "byte_2d": 0.0016766467065868263,
  "byte_9c": 0.000718562874251497,
  "byte_bb": 0.00047904191616766467,
  "byte_66": 0.000718562874251497,
  "byte_d4": 0.00023952095808383233,
  "byte_ee": 0.00047904191616766467,
  "byte_1d": 0.00023952095808383233,
  "byte_88": 0.000718562874251497,
  "byte_ed": 0.00023952095808383233,
  "byte_3e": 0.00023952095808383233,
  "byte_9d": 0.000718562874251497,
  "byte_9f": 0.00047904191616766467,
  "byte_e3": 0.000718562874251497,
  "byte_8b": 0.0016766467065868263,
  "byte_08": 0.00407185628742515,
  "byte_87": 0.0011976047904191617,
  "byte_b9": 0.0026347305389221557,
  "byte_24": 0.0011976047904191617,
  "byte_d9": 0.00023952095808383233,
  "byte_f9": 0.00023952095808383233,
  "byte_44": 0.0011976047904191617,
  "byte_2a": 0.00047904191616766467,
  "byte_6d": 0.00023952095808383233,
  "byte_64": 0.00047904191616766467,
  "byte_9a": 0.00023952095808383233,
  "byte_dc": 0.00047904191616766467,
  "byte_d2": 0.00023952095808383233,
  "byte_fa": 0.00047904191616766467,
  "byte_22": 0.00047904191616766467,
  "byte_75": 0.0009580838323353293,
  "byte_4f": 0.00047904191616766467,
  "byte_65": 0.00047904191616766467,
  "byte_94": 0.0033532934131736527,
  "byte_7a": 0.0009580838323353293,
  "byte_89": 0.0009580838323353293,
  "byte_b4": 0.000718562874251497,
  "byte_0c": 0.0016766467065868263,
  "byte_8c": 0.00023952095808383233,
  "byte_e1": 0.00023952095808383233,
  "byte_eb": 0.00023952095808383233,
  "byte_ec": 0.00023952095808383233,
  "byte_7d": 0.00047904191616766467,
  "byte_d1": 0.00047904191616766467,
  "byte_c0": 0.00023952095808383233,
  "byte_f7": 0.00047904191616766467,
  "byte_b2": 0.00047904191616766467,
  "byte_29": 0.00047904191616766467,
  "byte_c7": 0.00023952095808383233,
  "byte_25": 0.00047904191616766467,
  "byte_27": 0.000718562874251497,
  "byte_9e": 0.00023952095808383233,
  "byte_ca": 0.00047904191616766467,
  "byte_e6": 0.00047904191616766467,
  "byte_fe": 0.0016766467065868263,
  "byte_cc": 0.0009580838323353293,
  "byte_db": 0.00023952095808383233,
  "byte_32": 0.00047904191616766467,
  "byte_5c": 0.00047904191616766467,
  "byte_e0": 0.0009580838323353293,
  "byte_bd": 0.00023952095808383233,
  "byte_12": 0.00023952095808383233,
  "byte_cf": 0.00023952095808383233,
  "byte_b7": 0.00023952095808383233,
  "byte_5d": 0.00047904191616766467,
  "byte_a2": 0.000718562874251497,
  "byte_d7": 0.00023952095808383233,
  "byte_e7": 0.00023952095808383233,
  "byte_13": 0.0019161676646706587,
  "byte_8a": 0.00023952095808383233,
  "byte_bf": 0.00023952095808383233,
  "byte_ac": 0.00023952095808383233,
  "byte_4e": 0.00023952095808383233,
  "byte_48": 0.00023952095808383233,
  "byte_3a": 0.00023952095808383233,
  "byte_53": 0.00023952095808383233,
  "byte_59": 0.00023952095808383233,
  "byte_a4": 0.00023952095808383233,
  "byte_da": 0.00047904191616766467,
  "byte_6b": 0.00047904191616766467,
  "byte_e8": 0.00047904191616766467,
  "byte_fb": 0.00047904191616766467,
  "byte_26": 0.00023952095808383233,
  "byte_3b": 0.00023952095808383233,
  "byte_a6": 0.00023952095808383233,
  "byte_3d": 0.00023952095808383233,
  "byte_bc": 0.00023952095808383233,
  "byte_30": 0.00047904191616766467,
  "byte_58": 0.00023952095808383233,
  "byte_a8": 0.00023952095808383233,
  "byte_77": 0.00023952095808383233,
  "byte_47": 0.00023952095808383233,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 60,
  "event_nums": 114,
  "creation_block": 7934561,
  "creation_timestamp": 1560215519,
  "life_time": 28199.0,
  "duration_seconds": 381239.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.002127659574468085,
  "avg_gas_limit": 412731.56666666665,
  "std_gas_limit": 1014155.1850363988,
  "avg_gas_used": 66006.06666666667,
  "std_gas_used": 147614.32507866193,
  "avg_gas_price": 4078666666.6666665,
  "std_gas_price": 4755712167.72233,
  "transfer_num": 3,
  "atinversebrah_num": 1,
  "transferownership_num": 1,
  "sendwithgas_num": 55,
  "timeline_sequence": [
    [
      7934561,
      1560215519,
      0,
      177,
      0,
      1299596,
      20000000000,
      0,
      1,
      6870533,
      1199596,
      15157532
    ],
    [
      7934580,
      1560215757,
      1,
      43,
      0,
      152127,
      20000000000,
      0,
      1,
      1351023,
      52127,
      15157513
    ],
    [
      7934847,
      1560219508,
      2,
      87,
      0,
      65994,
      1000000000,
      0,
      1,
      6218242,
      43996,
      15157246
    ],
    [
      7934847,
      1560219508,
      3,
      88,
      0,
      76281,
      2000000000,
      0,
      1,
      6279523,
      61281,
      15157246
    ],
    [
      7934904,
      1560220202,
      4,
      163,
      0,
      61281,
      2000000000,
      0,
      1,
      6778691,
      46281,
      15157189
    ],
    [
      7935357,
      1560226068,
      5,
      188,
      0,
      61281,
      2000000000,
      0,
      1,
      7980282,
      46281,
      15156736
    ],
    [
      7935369,
      1560226263,
      6,
      88,
      0,
      61281,
      2000000000,
      0,
      1,
      3397551,
      46281,
      15156724
    ],
    [
      7935400,
      1560226698,
      7,
      62,
      0,
      152127,
      20000000000,
      0,
      1,
      2428912,
      52127,
      15156693
    ],
    [
      7935412,
      1560226922,
      8,
      53,
      0,
      61281,
      2000000000,
      0,
      1,
      2235410,
      46281,
      15156681
    ],
    [
      7935418,
      1560227016,
      9,
      121,
      0,
      61281,
      2000000000,
      0,
      1,
      6300560,
      46281,
      15156675
    ],
    [
      7935418,
      1560227016,
      10,
      122,
      0,
      61281,
      3000000000,
      0,
      1,
      6346841,
      46281,
      15156675
    ],
    [
      7935425,
      1560227110,
      11,
      89,
      0,
      61281,
      2000000000,
      0,
      1,
      4291603,
      46281,
      15156668
    ],
    [
      7935455,
      1560227584,
      12,
      107,
      0,
      61281,
      1000000000,
      0,
      1,
      6403331,
      46281,
      15156638
    ],
    [
      7935455,
      1560227584,
      13,
      108,
      0,
      61281,
      2000000000,
      0,
      1,
      6449612,
      46281,
      15156638
    ],
    [
      7935502,
      1560228195,
      14,
      15,
      0,
      5000000,
      1000000000,
      0,
      1,
      2810761,
      37063,
      15156591
    ],
    [
      7935528,
      1560228607,
      15,
      169,
      0,
      76281,
      3000000000,
      0,
      1,
      6778257,
      61281,
      15156565
    ],
    [
      7935588,
      1560229544,
      16,
      61,
      0,
      61281,
      3000000000,
      0,
      1,
      2805813,
      46281,
      15156505
    ],
    [
      7935591,
      1560229601,
      17,
      49,
      0,
      61281,
      3000000000,
      0,
      1,
      2793055,
      46281,
      15156502
    ],
    [
      7935611,
      1560229945,
      18,
      185,
      0,
      61281,
      3000000000,
      0,
      1,
      7977844,
      46281,
      15156482
    ],
    [
      7935688,
      1560231013,
      19,
      48,
      0,
      61281,
      3000000000,
      0,
      1,
      6741309,
      46281,
      15156405
    ],
    [
      7935688,
      1560231013,
      20,
      49,
      0,
      61281,
      3000000000,
      0,
      1,
      6787590,
      46281,
      15156405
    ],
    [
      7935688,
      1560231013,
      21,
      50,
      0,
      61281,
      3000000000,
      0,
      1,
      6833871,
      46281,
      15156405
    ],
    [
      7935694,
      1560231131,
      22,
      186,
      0,
      61281,
      1000000000,
      0,
      1,
      7100683,
      46281,
      15156399
    ],
    [
      7935694,
      1560231131,
      23,
      187,
      0,
      61281,
      2000000000,
      0,
      1,
      7146964,
      46281,
      15156399
    ],
    [
      7935694,
      1560231131,
      24,
      188,
      0,
      61281,
      1000000000,
      0,
      1,
      7193245,
      46281,
      15156399
    ],
    [
      7935694,
      1560231131,
      25,
      189,
      0,
      61281,
      1000000000,
      0,
      1,
      7239526,
      46281,
      15156399
    ],
    [
      7935694,
      1560231131,
      26,
      190,
      0,
      61281,
      1000000000,
      0,
      1,
      7285807,
      46281,
      15156399
    ],
    [
      7935694,
      1560231131,
      27,
      191,
      0,
      61281,
      2000000000,
      0,
      1,
      7332088,
      46281,
      15156399
    ],
    [
      7935757,
      1560232118,
      28,
      161,
      0,
      61281,
      3000000000,
      0,
      1,
      6609769,
      46281,
      15156336
    ],
    [
      7935763,
      1560232193,
      29,
      175,
      0,
      61281,
      3000000000,
      0,
      1,
      6956355,
      46281,
      15156330
    ],
    [
      7935781,
      1560232455,
      30,
      141,
      0,
      61281,
      2000000000,
      0,
      1,
      5139487,
      46281,
      15156312
    ],
    [
      7935789,
      1560232599,
      31,
      178,
      0,
      61281,
      2000000000,
      0,
      1,
      7166303,
      46281,
      15156304
    ],
    [
      7935807,
      1560232939,
      32,
      131,
      0,
      61281,
      3000000000,
      0,
      1,
      7341490,
      46281,
      15156286
    ],
    [
      7935811,
      1560233003,
      33,
      126,
      0,
      61281,
      3000000000,
      0,
      1,
      5593637,
      46281,
      15156282
    ],
    [
      7942303,
      1560320258,
      38,
      96,
      0,
      3000000,
      3000000000,
      0,
      1,
      4879787,
      46281,
      15149790
    ],
    [
      7942303,
      1560320258,
      39,
      97,
      0,
      3000000,
      5000000000,
      0,
      1,
      4926068,
      46281,
      15149790
    ],
    [
      7942303,
      1560320258,
      40,
      98,
      0,
      3000000,
      5000000000,
      0,
      1,
      4972349,
      46281,
      15149790
    ],
    [
      7942303,
      1560320258,
      41,
      99,
      0,
      3000000,
      5000000000,
      0,
      1,
      5018630,
      46281,
      15149790
    ],
    [
      7942306,
      1560320327,
      42,
      79,
      0,
      3000000,
      5000000000,
      0,
      1,
      4050647,
      46281,
      15149787
    ],
    [
      7953698,
      1560473843,
      46,
      97,
      0,
      61281,
      1000000000,
      0,
      1,
      7963972,
      46281,
      15138395
    ],
    [
      7953708,
      1560473978,
      47,
      83,
      0,
      61281,
      1000000000,
      0,
      1,
      7982508,
      46281,
      15138385
    ],
    [
      7953756,
      1560474755,
      48,
      119,
      0,
      61281,
      1000000000,
      0,
      1,
      7905477,
      46281,
      15138337
    ],
    [
      7953756,
      1560474755,
      49,
      120,
      0,
      61281,
      2000000000,
      0,
      1,
      7951758,
      46281,
      15138337
    ],
    [
      7953757,
      1560474758,
      50,
      106,
      0,
      61281,
      2360000000,
      0,
      1,
      6087898,
      46281,
      15138336
    ],
    [
      7953757,
      1560474758,
      51,
      107,
      0,
      61281,
      2360000000,
      0,
      1,
      6134179,
      46281,
      15138336
    ],
    [
      7953769,
      1560474925,
      52,
      37,
      0,
      61281,
      2000000000,
      0,
      1,
      1538798,
      46281,
      15138324
    ],
    [
      7953769,
      1560474925,
      53,
      53,
      0,
      61281,
      2000000000,
      0,
      1,
      2083774,
      46281,
      15138324
    ],
    [
      7953774,
      1560475010,
      54,
      55,
      0,
      61281,
      2000000000,
      0,
      1,
      3750988,
      46281,
      15138319
    ],
    [
      7953785,
      1560475127,
      55,
      55,
      0,
      61281,
      2000000000,
      0,
      1,
      3704033,
      46281,
      15138308
    ],
    [
      7954051,
      1560478707,
      56,
      100,
      0,
      61281,
      2000000000,
      0,
      1,
      7967504,
      46281,
      15138042
    ],
    [
      7954052,
      1560478718,
      57,
      26,
      0,
      61281,
      3000000000,
      0,
      1,
      1819752,
      46281,
      15138041
    ],
    [
      7954052,
      1560478718,
      58,
      27,
      0,
      61281,
      3000000000,
      0,
      1,
      1866033,
      46281,
      15138041
    ],
    [
      7954052,
      1560478718,
      59,
      28,
      0,
      61281,
      3000000000,
      0,
      1,
      1912314,
      46281,
      15138041
    ],
    [
      7954052,
      1560478718,
      60,
      29,
      0,
      61281,
      3000000000,
      0,
      1,
      1958595,
      46281,
      15138041
    ],
    [
      7962756,
      1560596679,
      61,
      193,
      0,
      61281,
      3000000000,
      0,
      1,
      7964615,
      46281,
      15129337
    ],
    [
      7962760,
      1560596758,
      62,
      166,
      0,
      61281,
      10000000000,
      0,
      1,
      6490744,
      46281,
      15129333
    ],
    [
      7962760,
      1560596758,
      63,
      167,
      0,
      61281,
      10000000000,
      0,
      1,
      6537025,
      46281,
      15129333
    ],
    [
      7962760,
      1560596758,
      64,
      168,
      0,
      61281,
      10000000000,
      0,
      1,
      6583306,
      46281,
      15129333
    ],
    [
      7962760,
      1560596758,
      65,
      169,
      0,
      61281,
      10000000000,
      0,
      1,
      6629587,
      46281,
      15129333
    ],
    [
      7962760,
      1560596758,
      66,
      170,
      0,
      61281,
      20000000000,
      0,
      1,
      6675868,
      46281,
      15129333
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.24;\n\n\nlibrary SafeMath {\n\n/**\n* @dev Multiplies two unsigned integers, reverts on overflow.\n*/\n\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\n\n\t// Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n\t// benefit is lost if 'b' is also tested.\n\t// See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\n\n        if (_a == 0) {\n            return 0;\n\t}\n\n        uint256 c = _a * _b;\n        require(c / _a == _b);\n        return c;\n    }\n\n/**\n* @dev Integer division of two unsigned integers truncating the quotient, reverts on division by zero.\n*/\n\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\n    // Solidity only automatically asserts when dividing by 0\n        require(_b > 0);\n        uint256 c = _a / _b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n/**\n* @dev Subtracts two unsigned integers, reverts on overflow (i.e. if subtrahend is greater than minuend).\n*/\n\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        require(_b <= _a);\n        return _a - _b;\n    }\n\n/**\n* @dev Adds two unsigned integers, reverts on overflow.\n*/\n\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\n        uint256 c = _a + _b;\n        require(c >= _a);\n        return c;\n    }\n\n/**\n* @dev Divides two unsigned integers and returns the remainder (unsigned integer modulo),\n* reverts when dividing by zero.\n*/\n\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b != 0);\n        return a % b;\n    }\n\n}\n\n\n/*\n* Ownable\n*\n* Base contract with an owner.\n* Provides onlyOwner modifier, which prevents function from running if it is called by anyone other than the owner.\n*/\n\ncontract Ownable {\n    address public owner;\n    address public newOwner;\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n        newOwner = address(0);\n    }\n\n// allows execution by the owner only\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyNewOwner() {\n        require(msg.sender != address(0));\n        require(msg.sender == newOwner);\n        _;\n    }\n\n/**\n*@dev allows transferring the contract ownership\n*the new owner still needs to accept the transfer\n*can only be called by the contract owner\n*@param _newOwner new contract owner\n*/\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != address(0));\n        newOwner = _newOwner;\n    }\n\n/**\n*@dev used by a new owner to accept an ownership transfer\n*/\n\n    function acceptOwnership() public onlyNewOwner returns(bool) {\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\n/*\n*ERC20 Token interface\n*/\n\ncontract ERC20 {\n    function totalSupply() public view returns (uint256);\n    function balanceOf(address who) public view returns (uint256);\n    function allowance(address owner, address spender) public view returns (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ninterface TokenRecipient {\n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external;\n}\n\n\ncontract JinJinCoin is ERC20, Ownable {\n    using SafeMath for uint256;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 internal initialSupply;\n    uint256 internal totalSupply_;\n    mapping(address => uint256) internal balances;\n    mapping(address => bool) public frozen;\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    event Burn(address indexed owner, uint256 value);\n    event Mint(uint256 value);\n    event Freeze(address indexed holder);\n    event Unfreeze(address indexed holder);\n\n    modifier notFrozen(address _holder) {\n        require(!frozen[_holder]);\n        _;\n    }\n\n    constructor() public {\n        name = \"JinJinCoin\";\n        symbol = \"JJC\";\n        decimals = 0;\n        initialSupply = 10000000;\n        totalSupply_ = 10000000;\n        balances[owner] = totalSupply_;\n        emit Transfer(address(0), owner, totalSupply_);\n    }\n\n    function() public payable {\n        revert();\n    }\n\n/**\n* @dev Total number of tokens in existence\n*/\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n/**\n* @dev Transfer token for a specified addresses\n* @param _from The address to transfer from.\n* @param _to The address to transfer to.\n* @param _value The amount to be transferred.\n*/\n\n    function _transfer(address _from, address _to, uint _value) internal {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        emit Transfer(_from, _to, _value);\n    }\n\n/**\n* @dev Transfer token for a specified address\n* @param _to The address to transfer to.\n* @param _value The amount to be transferred.\n*/\n\n    function transfer(address _to, uint256 _value) public notFrozen(msg.sender) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n/**\n* @dev Gets the balance of the specified address.\n* @param _holder The address to query the balance of.\n* @return An uint256 representing the amount owned by the passed address.\n*/\n\n    function balanceOf(address _holder) public view returns (uint256 balance) {\n        return balances[_holder];\n    }\n\n/**\n* ERC20 Token Transfer\n*/\n\n    function sendwithgas (address _from, address _to, uint256 _value, uint256 _fee) public notFrozen(_from) returns (bool) {\n        uint256 _total;\n        _total = _value.add(_fee);\n        require(_to != address(0));\n        require(_total <= balances[_from]);\n        balances[msg.sender] = balances[msg.sender].add(_fee);\n        balances[_from] = balances[_from].sub(_total);\n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        emit Transfer(_from, msg.sender, _fee);\n        //require(balanceOf[msg.sender] >= _value && balanceOf[_to] + _value >= balanceOf[_to])\n        return true;\n    }\n\n/**\n* @dev Transfer tokens from one address to another.\n* Note that while this function emits an Approval event, this is not required as per the specification,\n* and other compliant implementations may not emit the event.\n* @param _from address The address which you want to send tokens from\n* @param _to address The address which you want to transfer to\n* @param _value uint256 the amount of tokens to be transferred\n*/\n\n    function transferFrom(address _from, address _to, uint256 _value) public notFrozen(_from) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n/**\n* @dev Approve the passed address to _spender the specified amount of tokens on behalf of msg.sender.\n* Beware that changing an allowance with this method brings the risk that someone may use both the old\n* and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n* race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n* https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n* @param _spender The address which will spend the funds.\n* @param _value The amount of tokens to be spent.\n*/\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n/**\n* @dev Function to check the amount of tokens that an _holder allowed to a spender.\n* @param _holder address The address which owns the funds.\n* @param _spender address The address which will spend the funds.\n* @return A uint256 specifying the amount of tokens still available for the spender.\n*/\n\n    function allowance(address _holder, address _spender) public view returns (uint256) {\n        return allowed[_holder][_spender];\n    }\n\n/**\n* Freeze Account.\n*/\n\n    function freezeAccount(address _holder) public onlyOwner returns (bool) {\n        require(!frozen[_holder]);\n        frozen[_holder] = true;\n        emit Freeze(_holder);\n        return true;\n    }\n\n/**\n* Unfreeze Account.\n*/\n\n    function unfreezeAccount(address _holder) public onlyOwner returns (bool) {\n        require(frozen[_holder]);\n        frozen[_holder] = false;\n        emit Unfreeze(_holder);\n        return true;\n    }\n\n/**\n* Token Burn.\n*/\n\n    function burn(uint256 _value) public onlyOwner returns (bool success) {\n        require(_value <= balances[msg.sender]);\n        address burner = msg.sender;\n        balances[burner] = balances[burner].sub(_value);\n        totalSupply_ = totalSupply_.sub(_value);\n        emit Burn(burner, _value);\n        emit Transfer(burner, address(0), _value);\n        return true;\n    }\n\n/**\n* Token Mint.\n*/\n\n    function mint(uint256 _amount) public onlyOwner returns (bool) {\n        totalSupply_ = totalSupply_.add(_amount);\n        balances[owner] = balances[owner].add(_amount);\n        emit Transfer(address(0), owner, _amount);\n        return true;\n    }\n\n/**\n* @dev Internal function to determine if an address is a contract\n* @param addr The address being queried\n* @return True if `_addr` is a contract\n*/\n\n    function isContract(address addr) internal view returns (bool) {\n        uint size;\n        assembly{size := extcodesize(addr)}\n        return size > 0;\n    }\n\n}"
}