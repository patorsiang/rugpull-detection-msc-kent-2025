{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SSTORE JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP6 SWAP1 SSTORE SWAP1 SWAP3 SWAP2 SWAP1 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 DUP1 MSTORE PUSH1 PUSH1 MSTORE PUSH32 SLOAD SWAP1 SWAP2 PUSH2 SWAP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH1 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 ADD CALLDATASIZE LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 DUP2 MSTORE DUP4 DUP3 SHA3 CALLER SWAP1 SWAP4 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP8 AND DUP2 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 SWAP1 DUP8 AND SWAP1 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH32 DUP4 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP3 DUP4 MSTORE PUSH1 DUP1 DUP5 SHA3 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND SWAP2 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH1 DUP1 SLOAD PUSH20 NOT SWAP1 DUP2 AND PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND OR SWAP1 SWAP2 SSTORE AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 DUP2 MSTORE DUP4 DUP3 SHA3 CALLER SWAP1 SWAP4 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH32 DUP4 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLVALUE PUSH1 SLOAD PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 ADDRESS CALLER DUP4 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 ADD CALLDATASIZE LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 CALLER DUP6 DUP6 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP3 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP7 SWAP1 SSTORE SWAP1 SWAP3 SWAP2 SWAP1 PUSH32 SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 CALLER DUP6 ADDRESS DUP7 PUSH1 MLOAD DUP6 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST GAS CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 MUL DUP3 ISZERO DUP1 PUSH2 JUMPI POP DUP2 DUP4 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND SWAP2 PUSH4 SWAP2 AND DUP5 PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST GAS CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 DUP2 PUSH1 SLOAD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLER ADDRESS DUP4 PUSH2 JUMP JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 PUSH2 DUP4 PUSH1 SLOAD PUSH2 JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP4 ISZERO ISZERO OR SWAP1 SSTORE PUSH32 SWAP1 DUP4 SWAP1 DUP4 SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 DUP2 DUP4 PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 SWAP1 DUP6 AND SWAP1 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP STOP UNKNOWN_0xdd CALLCODE MSTORE UNKNOWN_0xad SHL UNKNOWN_0xe2 UNKNOWN_0xc8 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef LOG1 PUSH6 SHA3 PUSH11 UNKNOWN_0x5f SWAP3 UNKNOWN_0xb5 SWAP5 UNKNOWN_0xef UNKNOWN_0x5c LOG1 UNKNOWN_0xe UNKNOWN_0xb4 UNKNOWN_0xc8 UNKNOWN_0xd2 PUSH10",
  "opcode_entropy": 4.71306192203785,
  "opcode_count": 3317,
  "unique_opcodes": 81,
  "byte_entropy": 5.846115152582813,
  "byte_60": 0.1330603889457523,
  "byte_40": 0.01473899692937564,
  "byte_52": 0.028659160696008188,
  "byte_04": 0.01105424769703173,
  "byte_36": 0.0012282497441146367,
  "byte_10": 0.00593654042988741,
  "byte_61": 0.04790174002047083,
  "byte_01": 0.036642784032753326,
  "byte_7c": 0.0012282497441146367,
  "byte_57": 0.02210849539406346,
  "byte_63": 0.0077789150460593655,
  "byte_ff": 0.013101330603889457,
  "byte_e0": 0.0014329580348004093,
  "byte_02": 0.02661207778915046,
  "byte_0a": 0.019037871033776868,
  "byte_00": 0.027635619242579325,
  "byte_35": 0.00962128966223132,
  "byte_16": 0.02661207778915046,
  "byte_05": 0.005731832139201637,
  "byte_fe": 0.0010235414534288639,
  "byte_fd": 0.013920163766632548,
  "byte_a7": 0.0008188331627430911,
  "byte_81": 0.03254861821903787,
  "byte_14": 0.008802456499488229,
  "byte_80": 0.03848515864892528,
  "byte_06": 0.0032753326509723643,
  "byte_de": 0.00020470829068577277,
  "byte_03": 0.026816786079836234,
  "byte_9c": 0.0012282497441146367,
  "byte_09": 0.0038894575230296827,
  "byte_5e": 0.00040941658137154553,
  "byte_b3": 0.0006141248720573184,
  "byte_26": 0.00040941658137154553,
  "byte_18": 0.0010235414534288639,
  "byte_0d": 0.00593654042988741,
  "byte_dd": 0.0012282497441146367,
  "byte_5c": 0.0014329580348004093,
  "byte_23": 0.00040941658137154553,
  "byte_b8": 0.00020470829068577277,
  "byte_72": 0.0006141248720573184,
  "byte_27": 0.00040941658137154553,
  "byte_e2": 0.0008188331627430911,
  "byte_e3": 0.0008188331627430911,
  "byte_a9": 0.0010235414534288639,
  "byte_31": 0.0008188331627430911,
  "byte_3c": 0.0006141248720573184,
  "byte_e5": 0.0008188331627430911,
  "byte_67": 0.0006141248720573184,
  "byte_c8": 0.0012282497441146367,
  "byte_3e": 0.0006141248720573184,
  "byte_aa": 0.0008188331627430911,
  "byte_f8": 0.00020470829068577277,
  "byte_6b": 0.0006141248720573184,
  "byte_f1": 0.0010235414534288639,
  "byte_42": 0.0008188331627430911,
  "byte_96": 0.0008188331627430911,
  "byte_6c": 0.0012282497441146367,
  "byte_68": 0.0006141248720573184,
  "byte_4b": 0.00040941658137154553,
  "byte_75": 0.00020470829068577277,
  "byte_34": 0.006960081883316274,
  "byte_1a": 0.00040941658137154553,
  "byte_65": 0.0006141248720573184,
  "byte_2d": 0.0006141248720573184,
  "byte_70": 0.0006141248720573184,
  "byte_a0": 0.015762538382804503,
  "byte_82": 0.010849539406345957,
  "byte_79": 0.0006141248720573184,
  "byte_ba": 0.00020470829068577277,
  "byte_50": 0.01862845445240532,
  "byte_97": 0.00040941658137154553,
  "byte_71": 0.0014329580348004093,
  "byte_c6": 0.00020470829068577277,
  "byte_84": 0.004912998976458547,
  "byte_cc": 0.0010235414534288639,
  "byte_90": 0.044012282497441144,
  "byte_a6": 0.0006141248720573184,
  "byte_86": 0.0014329580348004093,
  "byte_20": 0.027226202661207777,
  "byte_41": 0.00040941658137154553,
  "byte_0b": 0.0014329580348004093,
  "byte_8d": 0.0006141248720573184,
  "byte_a5": 0.0008188331627430911,
  "byte_cb": 0.0006141248720573184,
  "byte_5b": 0.035619242579324466,
  "byte_db": 0.0008188331627430911,
  "byte_95": 0.0010235414534288639,
  "byte_d8": 0.00040941658137154553,
  "byte_9b": 0.0008188331627430911,
  "byte_a2": 0.0010235414534288639,
  "byte_93": 0.0032753326509723643,
  "byte_d1": 0.0010235414534288639,
  "byte_e8": 0.00020470829068577277,
  "byte_1d": 0.00040941658137154553,
  "byte_f2": 0.0008188331627430911,
  "byte_ae": 0.00020470829068577277,
  "byte_3a": 0.00020470829068577277,
  "byte_bb": 0.00040941658137154553,
  "byte_b4": 0.0014329580348004093,
  "byte_d4": 0.0006141248720573184,
  "byte_b6": 0.00040941658137154553,
  "byte_b5": 0.0006141248720573184,
  "byte_1f": 0.0020470829068577278,
  "byte_7f": 0.0020470829068577278,
  "byte_ca": 0.0014329580348004093,
  "byte_e9": 0.00020470829068577277,
  "byte_51": 0.012077789150460594,
  "byte_98": 0.00040941658137154553,
  "byte_d0": 0.0006141248720573184,
  "byte_78": 0.0008188331627430911,
  "byte_da": 0.00040941658137154553,
  "byte_ee": 0.0008188331627430911,
  "byte_dc": 0.00040941658137154553,
  "byte_39": 0.00368474923234391,
  "byte_6d": 0.0006141248720573184,
  "byte_29": 0.0008188331627430911,
  "byte_62": 0.00040941658137154553,
  "byte_ed": 0.00020470829068577277,
  "byte_e4": 0.00040941658137154553,
  "byte_32": 0.0006141248720573184,
  "byte_e6": 0.00040941658137154553,
  "byte_13": 0.0006141248720573184,
  "byte_e7": 0.00040941658137154553,
  "byte_24": 0.00368474923234391,
  "byte_9f": 0.00040941658137154553,
  "byte_8b": 0.00040941658137154553,
  "byte_c3": 0.0006141248720573184,
  "byte_15": 0.018219037871033777,
  "byte_8c": 0.0010235414534288639,
  "byte_9a": 0.0014329580348004093,
  "byte_56": 0.01842374616171955,
  "byte_af": 0.0006141248720573184,
  "byte_08": 0.00593654042988741,
  "byte_83": 0.014329580348004094,
  "byte_91": 0.015148413510747185,
  "byte_eb": 0.0006141248720573184,
  "byte_d3": 0.0006141248720573184,
  "byte_19": 0.0012282497441146367,
  "byte_92": 0.0053224155578300925,
  "byte_f3": 0.0014329580348004093,
  "byte_48": 0.0020470829068577278,
  "byte_6f": 0.0028659160696008186,
  "byte_07": 0.003480040941658137,
  "byte_44": 0.0012282497441146367,
  "byte_12": 0.0022517911975435006,
  "byte_fc": 0.0012282497441146367,
  "byte_0f": 0.003480040941658137,
  "byte_33": 0.00511770726714432,
  "byte_25": 0.0006141248720573184,
  "byte_ea": 0.00020470829068577277,
  "byte_38": 0.00040941658137154553,
  "byte_f0": 0.00020470829068577277,
  "byte_5d": 0.0006141248720573184,
  "byte_28": 0.0008188331627430911,
  "byte_8f": 0.00040941658137154553,
  "byte_b1": 0.0008188331627430911,
  "byte_0c": 0.0010235414534288639,
  "byte_b9": 0.0008188331627430911,
  "byte_bf": 0.00040941658137154553,
  "byte_ce": 0.0006141248720573184,
  "byte_4e": 0.00040941658137154553,
  "byte_49": 0.0008188331627430911,
  "byte_8a": 0.00020470829068577277,
  "byte_a3": 0.0020470829068577278,
  "byte_64": 0.0006141248720573184,
  "byte_37": 0.0006141248720573184,
  "byte_94": 0.003480040941658137,
  "byte_d2": 0.0006141248720573184,
  "byte_21": 0.00020470829068577277,
  "byte_5a": 0.0008188331627430911,
  "byte_69": 0.0010235414534288639,
  "byte_7b": 0.00040941658137154553,
  "byte_11": 0.0026612077789150462,
  "byte_2e": 0.00020470829068577277,
  "byte_54": 0.01248720573183214,
  "byte_55": 0.0040941658137154556,
  "byte_9e": 0.0008188331627430911,
  "byte_73": 0.0012282497441146367,
  "byte_87": 0.0020470829068577278,
  "byte_85": 0.004298874104401228,
  "byte_e1": 0.0006141248720573184,
  "byte_ec": 0.0006141248720573184,
  "byte_7d": 0.0008188331627430911,
  "byte_4f": 0.0008188331627430911,
  "byte_1e": 0.0012282497441146367,
  "byte_c0": 0.0008188331627430911,
  "byte_f7": 0.0006141248720573184,
  "byte_b2": 0.00040941658137154553,
  "byte_c7": 0.0008188331627430911,
  "byte_88": 0.0010235414534288639,
  "byte_6e": 0.00040941658137154553,
  "byte_a4": 0.00040941658137154553,
  "byte_d6": 0.0008188331627430911,
  "byte_5f": 0.0006141248720573184,
  "byte_46": 0.00040941658137154553,
  "byte_2c": 0.00020470829068577277,
  "byte_4d": 0.0006141248720573184,
  "byte_a8": 0.00020470829068577277,
  "byte_22": 0.00040941658137154553,
  "byte_45": 0.00020470829068577277,
  "byte_c2": 0.00040941658137154553,
  "byte_59": 0.00040941658137154553,
  "byte_f5": 0.0008188331627430911,
  "byte_9d": 0.00040941658137154553,
  "byte_bd": 0.0006141248720573184,
  "byte_cf": 0.00040941658137154553,
  "byte_7a": 0.0010235414534288639,
  "byte_b7": 0.00040941658137154553,
  "byte_43": 0.00020470829068577277,
  "byte_53": 0.00020470829068577277,
  "byte_cd": 0.00040941658137154553,
  "byte_17": 0.0006141248720573184,
  "byte_f4": 0.00020470829068577277,
  "byte_30": 0.0016376663254861821,
  "byte_0e": 0.0008188331627430911,
  "byte_fa": 0.00020470829068577277,
  "byte_3b": 0.00040941658137154553,
  "byte_1b": 0.00040941658137154553,
  "byte_4c": 0.00040941658137154553,
  "byte_df": 0.00020470829068577277,
  "byte_7e": 0.00020470829068577277,
  "byte_ac": 0.00020470829068577277,
  "byte_6a": 0.00040941658137154553,
  "byte_4a": 0.00020470829068577277,
  "byte_a1": 0.0008188331627430911,
  "byte_ad": 0.00020470829068577277,
  "byte_b0": 0.00020470829068577277,
  "byte_2b": 0.00020470829068577277,
  "byte_c4": 0.00020470829068577277,
  "byte_ef": 0.00040941658137154553,
  "byte_58": 0.00020470829068577277,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 19,
  "event_nums": 15,
  "creation_block": 5846900,
  "creation_timestamp": 1529856802,
  "life_time": 61279.0,
  "duration_seconds": 911216.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.0003100522193211488,
  "avg_gas_limit": 989333.947368421,
  "std_gas_limit": 2294255.5492970627,
  "avg_gas_used": 117733.52631578948,
  "std_gas_used": 327814.8444805821,
  "avg_gas_price": 9105263157.894737,
  "std_gas_price": 14913415849.46819,
  "transfer_num": 12,
  "ownershiptransferred_num": 2,
  "transferownership_num": 2,
  "acceptownership_num": 3,
  "burnfrom_num": 1,
  "timeline_sequence": [
    [
      5846900,
      1529856802,
      21,
      166,
      0,
      1607656,
      3000000000,
      0,
      1,
      7518880,
      1507656,
      17274029
    ],
    [
      5846955,
      1529857482,
      22,
      62,
      0,
      153825,
      1000000000,
      0,
      1,
      7128813,
      53825,
      17273974
    ],
    [
      5846957,
      1529857498,
      23,
      96,
      0,
      153889,
      1000000000,
      0,
      1,
      6534505,
      53889,
      17273972
    ],
    [
      5846972,
      1529857772,
      24,
      104,
      0,
      153761,
      2000000000,
      0,
      1,
      7050938,
      53761,
      17273957
    ],
    [
      5847026,
      1529858576,
      1,
      146,
      0,
      80065,
      1000000000,
      0,
      1,
      7146092,
      53377,
      17273903
    ],
    [
      5847046,
      1529858889,
      2,
      68,
      0,
      58141,
      1000000000,
      0,
      1,
      6099062,
      38761,
      17273883
    ],
    [
      5847124,
      1529860063,
      3,
      129,
      0,
      58237,
      1000000000,
      0,
      1,
      6906509,
      38825,
      17273805
    ],
    [
      5851642,
      1529928151,
      26,
      63,
      0,
      144254,
      10000000000,
      0,
      1,
      2089087,
      44254,
      17269287
    ],
    [
      5852121,
      1529935074,
      4,
      1,
      0,
      7600027,
      2000000000,
      0,
      1,
      43075,
      19573,
      17268808
    ],
    [
      5852179,
      1529935892,
      27,
      54,
      0,
      153825,
      9000000000,
      0,
      1,
      2489107,
      38825,
      17268750
    ],
    [
      5852304,
      1529937735,
      28,
      163,
      0,
      153825,
      5000000000,
      0,
      1,
      7018301,
      53825,
      17268625
    ],
    [
      5852323,
      1529937942,
      29,
      93,
      0,
      138825,
      4000000000,
      0,
      1,
      4523799,
      38825,
      17268606
    ],
    [
      5852854,
      1529945807,
      5,
      6,
      0,
      7614826,
      2000000000,
      1,
      0,
      317644,
      22029,
      17268075
    ],
    [
      5852865,
      1529945955,
      6,
      144,
      0,
      80737,
      2000000000,
      0,
      1,
      6942935,
      38825,
      17268064
    ],
    [
      5852875,
      1529946149,
      7,
      175,
      0,
      80737,
      2000000000,
      0,
      1,
      6815430,
      38825,
      17268054
    ],
    [
      5874759,
      1530274402,
      32,
      120,
      0,
      210000,
      4000000000,
      1,
      0,
      7295451,
      24274,
      17246170
    ],
    [
      5908167,
      1530767761,
      8,
      91,
      0,
      66381,
      23000000000,
      0,
      1,
      7957170,
      44254,
      17212762
    ],
    [
      5908171,
      1530767853,
      33,
      17,
      0,
      134573,
      50000000000,
      0,
      1,
      479844,
      19573,
      17212758
    ],
    [
      5908179,
      1530768018,
      34,
      72,
      0,
      153761,
      50000000000,
      0,
      1,
      2834864,
      53761,
      17212750
    ]
  ],
  "sourcecode": "pragma solidity 0.4.21;\n\n// ----------------------------------------------------------------------------\n// 'INO8' 'Innovate Token' token contract\n//\n// Symbol      : INO8\n// Name        : InnovateToken\n// Total supply: Generated from contributions\n// Decimals    : 18\n//\n//\n// ----------------------------------------------------------------------------\n\n\n// ----------------------------------------------------------------------------\n// Safe maths\n// ----------------------------------------------------------------------------\ncontract SafeMath {\n    function safeAdd(uint a, uint b) public pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function safeSub(uint a, uint b) public pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function safeMul(uint a, uint b) public pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function safeDiv(uint a, uint b) public pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC Token Standard #20 Interface\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n// ----------------------------------------------------------------------------\ncontract ERC20Interface {\n    function totalSupply() public view returns (uint);\n    function balanceOf(address tokenOwner) public view returns (uint balance);\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n}\n\n\n// ----------------------------------------------------------------------------\n// Contract function to receive approval and execute function in one call\n//\n// Borrowed from MiniMeToken\n// ----------------------------------------------------------------------------\ncontract ApproveAndCallFallBack {\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n}\n\n\n// ----------------------------------------------------------------------------\n// Owned contract\n// ----------------------------------------------------------------------------\ncontract Owned {\n    address public owner;\n    address public newOwner;\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n    function Owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n        newOwner = _newOwner;\n    }\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n        newOwner = address(0);\n    }\n}\n\n\n// ----------------------------------------------------------------------------\n// ERC20 Token, with the addition of symbol, name and decimals\n// Receives ETH and generates tokens\n// ----------------------------------------------------------------------------\ncontract InnovateToken is ERC20Interface, Owned, SafeMath {\n    string public symbol;\n    string public  name;\n    uint8 public decimals;\n    uint public _totalSupply;\n  \n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n\n    mapping(address => uint) public balances;\n    mapping(address => mapping(address => uint)) public allowed;\n    mapping (address => bool) public frozenAccount;\n\n     /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n     // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n    /**\n    * @dev Fix for the ERC20 short address attack.\n    */\n    modifier onlyPayloadSize(uint size) {\n        assert(msg.data.length >= size + 4);\n        _;\n    } \n\n\n    // ------------------------------------------------------------------------\n    // Constructor\n    // ------------------------------------------------------------------------\n    function InnovateToken() public {\n        symbol = \"INO8\";\n        name = \"InnovateToken\";\n        decimals = 18;\n        _totalSupply = 250000000 * 10**uint(decimals);\n        balances[owner] = _totalSupply;\n        emit Transfer(address(0), owner, _totalSupply);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public view returns (uint) {\n        return safeSub(_totalSupply , balances[address(0)]);\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account `tokenOwner`\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public view returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n   \n\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to `to` account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address to, uint tokens) onlyPayloadSize(safeMul(2,32)) public  returns (bool success) {\n        _transfer(msg.sender, to, tokens);              // makes the transfers\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account\n    //\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces \n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Transfer `tokens` from the `from` account to the `to` account\n    // \n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the `from` account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transferFrom(address from, address to, uint tokens)  onlyPayloadSize(safeMul(3,32)) public returns (bool success) {\n\n        require (to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balances[from] >= tokens);               // Check if the sender has enough\n        require (safeAdd(balances[to] , tokens) >= balances[to]); // Check for overflows\n        require(!frozenAccount[from]);                     // Check if sender is frozen\n        require(!frozenAccount[to]);                       // Check if recipient is frozen\n\n        balances[from] = safeSub(balances[from], tokens);\n        allowed[from][msg.sender] = safeSub(allowed[from][msg.sender], tokens);\n        balances[to] = safeAdd(balances[to], tokens);\n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n    // from the token owner's account. The `spender` contract function\n    // `receiveApproval(...)` is then executed\n    // ------------------------------------------------------------------------\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n        return true;\n    }\n\n\n\n     /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balances[target] = safeAdd(balances[target], mintedAmount);    \n        _totalSupply = safeAdd(_totalSupply, mintedAmount);\n        emit Transfer(0, this, mintedAmount);\n        emit Transfer(this, target, mintedAmount);\n    }\n\n     /// @notice `freeze? Prevent | Allow` `from` from sending & receiving tokens\n    /// @param from Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address from, bool freeze) onlyOwner public {\n        frozenAccount[from] = freeze;\n        emit FrozenFunds(from, freeze);\n    }\n    \n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balances[_from] >= _value);               // Check if the sender has enough\n        require (safeAdd(balances[_to] , _value) >= balances[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        \n        balances[_from] = safeSub(balances[_from], _value);\n        balances[_to] = safeAdd(balances[_to], _value);              \n        emit Transfer(_from, _to, _value);\n    }\n\n\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newSellPrice Price the users can sell to the contract\n    /// @param newBuyPrice Price users can buy from the contract\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    /// @notice Buy tokens from contract by sending ether\n    function buy() payable public {\n        uint amount = safeDiv(msg.value , buyPrice);               // calculates the amount\n        _transfer(this, msg.sender, amount);              // makes the transfers\n    }\n\n    /// @notice Sell `amount` tokens to contract\n    /// @param amount amount of tokens to be sold\n    function sell(uint256 amount) public {\n        require(address(this).balance >= safeMul(amount ,sellPrice));      // checks if the contract has enough ether to buy\n        _transfer(msg.sender, this, amount);              // makes the transfers\n        msg.sender.transfer(safeMul(amount ,sellPrice));          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);   // Check if the sender has enough\n        balances[msg.sender] = safeSub(balances[msg.sender], _value); // Subtract from the sender\n        _totalSupply = safeSub(_totalSupply, _value); // Updates totalSupply\n                     \n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowed[_from][msg.sender]);    // Check allowance\n        balances[_from] = safeSub(balances[_from], _value); // Subtract from the targeted balance\n        allowed[_from][msg.sender] = safeSub(allowed[_from][msg.sender], _value); // Subtract from the sender's allowance\n        _totalSupply = safeSub(_totalSupply, _value);  // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n\n\n    // ------------------------------------------------------------------------\n    // Owner can transfer out any accidentally sent ERC20 tokens\n    // ------------------------------------------------------------------------\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n    }\n}"
}