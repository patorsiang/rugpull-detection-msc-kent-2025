{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH3 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH20 DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 SLOAD ADDRESS PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 DUP1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 ADDRESS PUSH1 MLOAD DUP3 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 CALLER ADDRESS DUP6 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 SWAP1 SWAP4 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH2 PUSH1 SLOAD DUP5 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP JUMPDEST PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP DUP1 SWAP3 POP POP POP PUSH1 DUP1 DUP2 SWAP1 SSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH20 DUP2 JUMP JUMPDEST PUSH2 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH20 DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP3 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP3 PUSH1 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH32 DUP4 DUP4 DUP4 PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 DUP2 JUMP JUMPDEST PUSH1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 ADDRESS PUSH1 MLOAD DUP3 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 DUP2 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH1 DUP1 SLOAD DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 GT PUSH2 JUMPI JUMPDEST POP POP POP POP POP ADDRESS PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 ADDRESS PUSH1 MLOAD DUP3 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 DUP2 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH1 DUP1 SLOAD DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 GT PUSH2 JUMPI JUMPDEST POP POP POP POP POP ADDRESS PUSH2 JUMP JUMPDEST JUMPDEST POP POP PUSH1 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 DUP2 DUP2 SLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 ADDRESS PUSH1 MLOAD DUP3 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH2 PUSH2 PUSH1 DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 GT PUSH2 JUMPI JUMPDEST POP POP POP POP POP ADDRESS PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH2 PUSH2 PUSH1 DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 GT PUSH2 JUMPI JUMPDEST POP POP POP POP POP ADDRESS PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 ADDRESS PUSH1 MLOAD DUP3 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 ADDRESS PUSH1 MLOAD DUP3 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 DUP3 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP6 DUP6 PUSH1 DUP1 ADDRESS PUSH2 PUSH2 TIMESTAMP PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 MLOAD DUP10 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP10 PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP9 PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP8 DUP2 MSTORE PUSH1 ADD DUP7 DUP2 MSTORE PUSH1 ADD DUP6 DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP POP POP JUMPDEST NUMBER PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH2 JUMP JUMPDEST POP POP POP JUMPDEST POP PUSH1 DUP1 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 DUP3 GT PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 ADDRESS PUSH1 MLOAD DUP3 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 DUP3 DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 ADDRESS PUSH1 MLOAD DUP3 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP JUMPDEST DUP1 DUP4 GT ISZERO PUSH2 JUMPI DUP1 SWAP3 POP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST DUP4 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 SLOAD DUP8 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 SLOAD SWAP1 POP JUMPDEST PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH2 PUSH2 PUSH2 PUSH2 PUSH1 SLOAD PUSH2 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST DUP9 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH20 DUP3 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST JUMPDEST PUSH2 DUP2 DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP5 POP PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP7 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST DUP2 SWAP4 POP POP POP POP PUSH1 DUP1 DUP2 SWAP1 SSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 DUP2 JUMP JUMPDEST PUSH1 DUP2 EQ DUP1 PUSH2 JUMPI POP PUSH1 DUP4 PUSH20 AND PUSH4 ADDRESS DUP6 PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP EQ JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP4 PUSH4 PUSH1 SHL DUP5 DUP5 PUSH1 MLOAD PUSH1 ADD DUP1 DUP4 PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE SWAP1 PUSH28 NOT AND PUSH1 DUP3 ADD DUP1 MLOAD PUSH28 DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 DUP6 PUSH20 AND PUSH4 ADDRESS DUP8 PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 DUP5 PUSH4 PUSH1 SHL DUP6 DUP5 PUSH1 MLOAD PUSH1 ADD DUP1 DUP4 PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE SWAP1 PUSH28 NOT AND PUSH1 DUP3 ADD DUP1 MLOAD PUSH28 DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 PUSH1 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH32 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH32 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH32 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH32 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH32 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 SLOAD PUSH1 MLOAD DUP3 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 DUP5 PUSH4 PUSH1 SHL DUP6 DUP6 DUP6 PUSH1 MLOAD PUSH1 ADD DUP1 DUP5 PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE SWAP1 PUSH28 NOT AND PUSH1 DUP3 ADD DUP1 MLOAD PUSH28 DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 ADDRESS PUSH1 MLOAD DUP3 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP3 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP PUSH1 DUP2 EQ ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP3 DUP3 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP4 POP POP POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 GT PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 DUP2 PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP5 PUSH1 DUP6 DUP6 PUSH2 PUSH2 TIMESTAMP PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 MLOAD DUP7 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP7 DUP2 MSTORE PUSH1 ADD DUP6 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP5 PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP7 POP POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 SLOAD PUSH1 PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH1 PUSH2 PUSH2 PUSH2 PUSH1 SLOAD DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 PUSH1 DUP1 SLOAD DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 GT PUSH2 JUMPI JUMPDEST POP POP POP POP POP PUSH20 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP5 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 SLOAD DUP4 PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 DUP4 PUSH4 PUSH1 SHL DUP5 DUP5 PUSH1 MLOAD PUSH1 ADD DUP1 DUP4 PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE SWAP1 PUSH28 NOT AND PUSH1 DUP3 ADD DUP1 MLOAD PUSH28 DUP4 DUP2 DUP4 AND OR DUP4 MSTORE POP POP POP POP PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP6 PUSH20 AND PUSH2 SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 MLOAD GT ISZERO PUSH2 JUMPI DUP1 DUP1 PUSH1 ADD SWAP1 MLOAD PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP3 SELFBALANCE LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP6 PUSH2 JUMP JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND DUP6 DUP8 PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 DUP3 ADD SWAP2 POP PUSH1 DUP2 ADD SWAP1 POP PUSH1 DUP4 SUB SWAP3 POP PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 MLOAD SWAP2 POP PUSH1 NOT PUSH1 RETURNDATASIZE ADD AND DUP3 ADD PUSH1 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 PUSH1 DUP5 ADD RETURNDATACOPY PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 DUP3 DUP3 DUP7 PUSH2 JUMP JUMPDEST SWAP3 POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 SLOAD DUP4 PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP5 PUSH1 DUP6 DUP6 PUSH2 PUSH2 TIMESTAMP PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 MLOAD DUP7 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP7 DUP2 MSTORE PUSH1 ADD DUP6 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP5 PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP7 POP POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 EXTCODESIZE SWAP1 POP PUSH1 DUP2 GT SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP4 ISZERO PUSH2 JUMPI DUP3 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 DUP4 MLOAD GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 ADD REVERT JUMPDEST DUP2 PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP UNKNOWN_0xfe UNKNOWN_0x4f PUSH24 PUSH27 PUSH4 SHA3 PUSH3 PUSH15 UNKNOWN_0x4d PUSH2 GASPRICE SHA3 PUSH14 PUSH16 GASPRICE SHA3 GASLIMIT MSTORE NUMBER ORIGIN ADDRESS SHA3 PUSH16 SHA3 PUSH20 PUSH19 PUSH16 PUSH15 PUSH25 INVALID_0x74",
  "opcode_entropy": 4.741310346567635,
  "opcode_count": 8445,
  "unique_opcodes": 81,
  "byte_entropy": 5.008163771148633,
  "byte_0x": 5.410377103284099e-05,
  "byte_60": 0.06054211978574907,
  "byte_80": 0.031921224909376184,
  "byte_40": 0.013580046529243089,
  "byte_52": 0.016231131309852296,
  "byte_34": 0.00032462262619704593,
  "byte_15": 0.0087107071362874,
  "byte_61": 0.03516745117134664,
  "byte_00": 0.09327490126061787,
  "byte_10": 0.0030839149488719364,
  "byte_57": 0.010983065519666721,
  "byte_fd": 0.005734999729481145,
  "byte_5b": 0.021749715955202076,
  "byte_50": 0.03614131904993778,
  "byte_04": 0.009900990099009901,
  "byte_36": 0.0011361791916896609,
  "byte_02": 0.004057782827463074,
  "byte_68": 0.0012443867337553428,
  "byte_35": 0.0012984905047881837,
  "byte_e0": 0.0015690093599523888,
  "byte_1c": 0.0004328301682627279,
  "byte_63": 0.008440188281123194,
  "byte_71": 0.00032462262619704593,
  "byte_18": 0.0009197641075582968,
  "byte_a6": 0.00016231131309852296,
  "byte_11": 0.0025428772385435263,
  "byte_01": 0.02737650814261754,
  "byte_51": 0.013634150300275929,
  "byte_c1": 0.00032462262619704593,
  "byte_2e": 0.0004869339392955689,
  "byte_92": 0.004274197911594438,
  "byte_c3": 0.0021100470702807984,
  "byte_e7": 0.0005951414813612509,
  "byte_19": 0.0012984905047881837,
  "byte_84": 0.0018395282151165936,
  "byte_74": 0.0028133960937077314,
  "byte_87": 0.0009738678785911378,
  "byte_14": 0.004490612995725802,
  "byte_09": 0.0012443867337553428,
  "byte_a0": 0.0025428772385435263,
  "byte_79": 0.0023805659254450035,
  "byte_f1": 0.0008115565654926148,
  "byte_06": 0.0016772169020180707,
  "byte_54": 0.007141697776335011,
  "byte_69": 0.0014608018178867068,
  "byte_f2": 0.0003787263972298869,
  "byte_e3": 0.0004869339392955689,
  "byte_8b": 0.00027051885516420494,
  "byte_f3": 0.0018936319861494347,
  "byte_fe": 0.0005410377103284099,
  "byte_a3": 0.0007033490234269328,
  "byte_cb": 0.0003787263972298869,
  "byte_ff": 0.2666774874208732,
  "byte_be": 0.00032462262619704593,
  "byte_9f": 0.0003787263972298869,
  "byte_1e": 0.0006492452523940919,
  "byte_0a": 0.006384244981875236,
  "byte_2d": 0.0011902829627225017,
  "byte_56": 0.01146999945896229,
  "byte_08": 0.0031380187199047775,
  "byte_1d": 0.0007033490234269328,
  "byte_c8": 0.00010820754206568198,
  "byte_d1": 0.00016231131309852296,
  "byte_27": 0.0009738678785911378,
  "byte_cf": 0.00010820754206568198,
  "byte_ad": 0.00010820754206568198,
  "byte_a2": 0.00032462262619704593,
  "byte_7f": 0.00438240545366012,
  "byte_d3": 0.00027051885516420494,
  "byte_89": 0.00032462262619704593,
  "byte_0f": 0.0008115565654926148,
  "byte_d7": 0.00027051885516420494,
  "byte_41": 0.0010820754206568198,
  "byte_6f": 0.0032462262619704593,
  "byte_cd": 0.00027051885516420494,
  "byte_85": 0.0014608018178867068,
  "byte_f0": 0.00016231131309852296,
  "byte_d6": 0.00010820754206568198,
  "byte_df": 0.00021641508413136395,
  "byte_86": 0.0014608018178867068,
  "byte_6b": 0.00027051885516420494,
  "byte_20": 0.022669480062760376,
  "byte_8d": 0.00021641508413136395,
  "byte_a5": 0.00032462262619704593,
  "byte_07": 0.0008656603365254558,
  "byte_1b": 0.0018936319861494347,
  "byte_8f": 0.00010820754206568198,
  "byte_ef": 0.00032462262619704593,
  "byte_da": 0.00027051885516420494,
  "byte_4f": 0.0005410377103284099,
  "byte_96": 0.0005951414813612509,
  "byte_e9": 0.00021641508413136395,
  "byte_af": 0.00027051885516420494,
  "byte_f8": 0.00010820754206568198,
  "byte_6d": 0.00032462262619704593,
  "byte_b7": 5.410377103284099e-05,
  "byte_70": 0.0012443867337553428,
  "byte_c5": 0.00027051885516420494,
  "byte_0b": 0.0010279716496239789,
  "byte_78": 0.00021641508413136395,
  "byte_4d": 0.0004869339392955689,
  "byte_8c": 0.0008115565654926148,
  "byte_49": 0.0004328301682627279,
  "byte_a1": 0.0003787263972298869,
  "byte_59": 0.00027051885516420494,
  "byte_d5": 0.00021641508413136395,
  "byte_44": 0.0007574527944597738,
  "byte_95": 0.00032462262619704593,
  "byte_5e": 0.0004328301682627279,
  "byte_ea": 0.00032462262619704593,
  "byte_5c": 0.00021641508413136395,
  "byte_97": 0.0003787263972298869,
  "byte_5a": 0.0013525942758210248,
  "byte_bb": 0.00027051885516420494,
  "byte_ae": 0.00010820754206568198,
  "byte_05": 0.0014608018178867068,
  "byte_3d": 0.00384136774333171,
  "byte_65": 0.004436509224692961,
  "byte_5d": 0.00016231131309852296,
  "byte_66": 0.0010820754206568198,
  "byte_2a": 0.0004869339392955689,
  "byte_f7": 0.00016231131309852296,
  "byte_67": 0.0005951414813612509,
  "byte_7b": 0.0007033490234269328,
  "byte_6c": 0.0025969810095763674,
  "byte_9b": 0.0003787263972298869,
  "byte_f5": 0.00010820754206568198,
  "byte_62": 0.0011361791916896609,
  "byte_b9": 0.0003787263972298869,
  "byte_3a": 0.0021100470702807984,
  "byte_46": 0.0008115565654926148,
  "byte_8a": 0.00021641508413136395,
  "byte_45": 0.0006492452523940919,
  "byte_47": 0.0009197641075582968,
  "byte_24": 0.0005951414813612509,
  "byte_83": 0.006059622355678191,
  "byte_28": 0.0004328301682627279,
  "byte_16": 0.015798301141589567,
  "byte_e5": 0.00016231131309852296,
  "byte_32": 0.0010279716496239789,
  "byte_31": 0.0012984905047881837,
  "byte_03": 0.009955093870042743,
  "byte_b0": 0.00016231131309852296,
  "byte_3f": 0.0005951414813612509,
  "byte_4b": 0.00027051885516420494,
  "byte_a8": 0.00016231131309852296,
  "byte_58": 0.0007574527944597738,
  "byte_42": 0.0009197641075582968,
  "byte_4e": 0.0004328301682627279,
  "byte_b3": 0.0004328301682627279,
  "byte_7a": 0.0005410377103284099,
  "byte_d4": 0.00021641508413136395,
  "byte_c9": 0.00032462262619704593,
  "byte_90": 0.03457230968998539,
  "byte_f9": 0.00010820754206568198,
  "byte_a4": 0.00032462262619704593,
  "byte_17": 0.0008656603365254558,
  "byte_26": 0.0006492452523940919,
  "byte_b4": 0.00016231131309852296,
  "byte_99": 0.0003787263972298869,
  "byte_81": 0.025428772385435266,
  "byte_91": 0.014337499323702861,
  "byte_82": 0.010983065519666721,
  "byte_73": 0.013634150300275929,
  "byte_1f": 0.0005951414813612509,
  "byte_eb": 0.00010820754206568198,
  "byte_0c": 0.0005410377103284099,
  "byte_b8": 0.00032462262619704593,
  "byte_dd": 0.0003787263972298869,
  "byte_0d": 0.0008656603365254558,
  "byte_2f": 0.0005410377103284099,
  "byte_0e": 0.0005410377103284099,
  "byte_9d": 0.0003787263972298869,
  "byte_98": 0.00021641508413136395,
  "byte_fb": 0.00010820754206568198,
  "byte_12": 0.0007033490234269328,
  "byte_4a": 0.0004869339392955689,
  "byte_13": 0.0011902829627225017,
  "byte_37": 0.00032462262619704593,
  "byte_55": 0.0011361791916896609,
  "byte_ee": 0.00021641508413136395,
  "byte_5f": 0.0003787263972298869,
  "byte_a9": 0.00021641508413136395,
  "byte_e2": 0.00021641508413136395,
  "byte_db": 0.00021641508413136395,
  "byte_23": 0.0003787263972298869,
  "byte_e1": 0.0004328301682627279,
  "byte_4c": 0.00016231131309852296,
  "byte_25": 0.0004328301682627279,
  "byte_88": 0.00032462262619704593,
  "byte_53": 0.0007033490234269328,
  "byte_bc": 0.00016231131309852296,
  "byte_de": 0.00016231131309852296,
  "byte_ed": 0.00027051885516420494,
  "byte_a7": 0.00027051885516420494,
  "byte_9a": 5.410377103284099e-05,
  "byte_93": 0.0004869339392955689,
  "byte_30": 0.0016772169020180707,
  "byte_3b": 0.0014066980468538657,
  "byte_fa": 0.0007033490234269328,
  "byte_48": 0.00010820754206568198,
  "byte_3e": 0.0016231131309852296,
  "byte_33": 0.0011902829627225017,
  "byte_21": 0.0007574527944597738,
  "byte_76": 0.0007574527944597738,
  "byte_b6": 0.00016231131309852296,
  "byte_38": 0.00032462262619704593,
  "byte_c0": 0.00021641508413136395,
  "byte_8e": 0.00010820754206568198,
  "byte_39": 0.0006492452523940919,
  "byte_77": 0.0012984905047881837,
  "byte_6e": 0.0027051885516420496,
  "byte_72": 0.0024887734675106857,
  "byte_c2": 0.00010820754206568198,
  "byte_75": 0.0011361791916896609,
  "byte_64": 0.0017854244440837527,
  "byte_d2": 0.00027051885516420494,
  "byte_aa": 0.00021641508413136395,
  "byte_d0": 0.00016231131309852296,
  "byte_3c": 0.0009738678785911378,
  "byte_7d": 0.00021641508413136395,
  "byte_f6": 0.00016231131309852296,
  "byte_2c": 0.00032462262619704593,
  "byte_9e": 0.00010820754206568198,
  "byte_9c": 0.00021641508413136395,
  "byte_22": 0.0004328301682627279,
  "byte_b2": 0.00016231131309852296,
  "byte_ac": 0.00016231131309852296,
  "byte_1a": 0.0005951414813612509,
  "byte_cc": 5.410377103284099e-05,
  "byte_ab": 0.00010820754206568198,
  "byte_ec": 5.410377103284099e-05,
  "byte_43": 0.0006492452523940919,
  "byte_6a": 5.410377103284099e-05,
  "byte_e8": 0.00021641508413136395,
  "byte_ba": 0.00016231131309852296,
  "byte_29": 5.410377103284099e-05,
  "byte_2b": 0.00016231131309852296,
  "byte_c4": 5.410377103284099e-05,
  "byte_bf": 5.410377103284099e-05,
  "byte_f4": 5.410377103284099e-05,
  "byte_ce": 5.410377103284099e-05,
  "byte_94": 0.00010820754206568198,
  "byte_c7": 5.410377103284099e-05,
  "byte_e6": 5.410377103284099e-05,
  "byte_e4": 0.00010820754206568198,
  "byte_b5": 0.00010820754206568198,
  "byte_fc": 5.410377103284099e-05,
  "byte_7c": 0.00010820754206568198,
  "byte_b1": 5.410377103284099e-05,
  "byte_c6": 5.410377103284099e-05,
  "num_nodes": 592,
  "num_edges": 232,
  "avg_degree": 0.7837837837837838,
  "density": 0.0006630996478712215,
  "connected_components": 378,
  "avg_clustering": 0.0,
  "timeline_sequence": [],
  "sourcecode": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"../interfaces/IMasterChef.sol\";\n\nimport \"./BaseMissionLPSingle.sol\";\n\ncontract MissionMasterChef is BaseMissionLPSingle {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public masterchefAddress;\n    uint256 public pid;\n\n    constructor(\n        address _vaultChefAddress,\n        address _masterchefAddress,\n        address _uniRouterAddress,\n        uint256 _pid,\n        address _wantAddress,\n        address _earnedAddress,\n        address[] memory _earnedToWmaticPath,\n        address[] memory _earnedToUsdcPath,\n        address[] memory _earnedToToken0Path,\n        address[] memory _earnedToToken1Path,\n        address[] memory _token0ToEarnedPath,\n        address[] memory _token1ToEarnedPath\n    ) public {\n        govAddress = msg.sender;\n        vaultChefAddress = _vaultChefAddress;\n        masterchefAddress = _masterchefAddress;\n        uniRouterAddress = _uniRouterAddress;\n\n        wantAddress = _wantAddress;\n        token0Address = IUniPair(wantAddress).token0();\n        token1Address = IUniPair(wantAddress).token1();\n\n        pid = _pid;\n        earnedAddress = _earnedAddress;\n\n        earnedToWmaticPath = _earnedToWmaticPath;\n        earnedToUsdcPath = _earnedToUsdcPath;\n        earnedToToken0Path = _earnedToToken0Path;\n        earnedToToken1Path = _earnedToToken1Path;\n        token0ToEarnedPath = _token0ToEarnedPath;\n        token1ToEarnedPath = _token1ToEarnedPath;\n\n        transferOwnership(vaultChefAddress);\n        \n        _resetAllowances();\n    }\n\n    function _vaultDeposit(uint256 _amount) internal override {\n        IMasterChef(masterchefAddress).deposit(pid, _amount);\n    }\n    \n    function _vaultWithdraw(uint256 _amount) internal override {\n        IMasterChef(masterchefAddress).withdraw(pid, _amount);\n    }\n    \n    function _vaultHarvest() internal override {\n        IMasterChef(masterchefAddress).withdraw(pid, 0);\n    }\n    \n    function vaultSharesTotal() public override view returns (uint256) {\n        (uint256 amount,) = IMasterChef(masterchefAddress).userInfo(pid, address(this));\n        return amount;\n    }\n    \n    function wantLockedTotal() public override view returns (uint256) {\n        return IERC20(wantAddress).balanceOf(address(this))\n            .add(vaultSharesTotal());\n    }\n\n    function _resetAllowances() internal override {\n        IERC20(wantAddress).safeApprove(masterchefAddress, uint256(0));\n        IERC20(wantAddress).safeIncreaseAllowance(\n            masterchefAddress,\n            uint256(-1)\n        );\n\n        IERC20(wantAddress).safeApprove(uniRouterAddress, uint256(0));\n        IERC20(wantAddress).safeIncreaseAllowance(\n            uniRouterAddress,\n            uint256(-1)\n        );\n\n        IERC20(earnedAddress).safeApprove(uniRouterAddress, uint256(0));\n        IERC20(earnedAddress).safeIncreaseAllowance(\n            uniRouterAddress,\n            uint256(-1)\n        );\n\n        IERC20(token0Address).safeApprove(uniRouterAddress, uint256(0));\n        IERC20(token0Address).safeIncreaseAllowance(\n            uniRouterAddress,\n            uint256(-1)\n        );\n\n        IERC20(token1Address).safeApprove(uniRouterAddress, uint256(0));\n        IERC20(token1Address).safeIncreaseAllowance(\n            uniRouterAddress,\n            uint256(-1)\n        );\n    }\n    \n    function _emergencyVaultWithdraw() internal override {\n        IMasterChef(masterchefAddress).emergencyWithdraw(pid);\n    }\n}\n\ninterface IMasterChef {\n    function deposit(uint256 _pid, uint256 _amount) external;\n\n    function withdraw(uint256 _pid, uint256 _amount) external;\n\n    function emergencyWithdraw(uint256 _pid) external;\n    \n    function userInfo(uint256 _pid, address _address) external view returns (uint256, uint256);\n    \n    function harvest(uint256 _pid, address _to) external;\n}\n\nabstract contract BaseMissionLPSingle is BaseMissionLP {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    \n    function _vaultHarvest() internal virtual;\n\n    function earn() external override nonReentrant whenNotPaused onlyGov {\n\n        _vaultHarvest();\n\n        // Converts farm tokens into want tokens\n        uint256 earnedAmt = IERC20(earnedAddress).balanceOf(address(this));\n\n        if (earnedAmt > 0) {\n            earnedAmt = distributeFees(earnedAmt);\n    \n            if (earnedAddress != token0Address) {\n                // Swap half earned to token0\n                _safeSwap(\n                    earnedAmt.div(2),\n                    earnedToToken0Path,\n                    address(this)\n                );\n            }\n    \n            if (earnedAddress != token1Address) {\n                // Swap half earned to token1\n                _safeSwap(\n                    earnedAmt.div(2),\n                    earnedToToken1Path,\n                    address(this)\n                );\n            }\n    \n            // Get want tokens, ie. add liquidity\n            uint256 token0Amt = IERC20(token0Address).balanceOf(address(this));\n            uint256 token1Amt = IERC20(token1Address).balanceOf(address(this));\n            if (token0Amt > 0 && token1Amt > 0) {\n                IUniRouter02(uniRouterAddress).addLiquidity(\n                    token0Address,\n                    token1Address,\n                    token0Amt,\n                    token1Amt,\n                    0,\n                    0,\n                    address(this),\n                    now.add(600)\n                );\n            }\n    \n            lastEarnBlock = block.number;\n    \n            _farm();\n        }\n    }\n}\n\n// BaseMissionLP\nabstract contract BaseMissionLP is BaseMission {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    function convertDustToEarned() external nonReentrant whenNotPaused {\n\n        // Converts token0 dust (if any) to earned tokens\n        uint256 token0Amt = IERC20(token0Address).balanceOf(address(this));\n        if (token0Amt > 0 && token0Address != earnedAddress) {\n            // Swap all dust tokens to earned tokens\n            _safeSwap(\n                token0Amt,\n                token0ToEarnedPath,\n                address(this)\n            );\n        }\n\n        // Converts token1 dust (if any) to earned tokens\n        uint256 token1Amt = IERC20(token1Address).balanceOf(address(this));\n        if (token1Amt > 0 && token1Address != earnedAddress) {\n            // Swap all dust tokens to earned tokens\n            _safeSwap(\n                token1Amt,\n                token1ToEarnedPath,\n                address(this)\n            );\n        }\n    }\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\n\nimport '../interfaces/IUniPair.sol';\nimport '../interfaces/IUniRouter02.sol';\n\n// BaseMission\nabstract contract BaseMission is Ownable, ReentrancyGuard, Pausable {\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    address public wantAddress;\n    address public token0Address;\n    address public token1Address;\n    address public earnedAddress;\n    \n    address public uniRouterAddress;\n    address public constant usdcAddress = 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174;\n    address public constant withdrawFeeAddress = 0x9d97b6864015427AB2b887373f9975A53A8802e7; // Address for withdraw fee\n    address public constant controllerFeeAddress = 0x0a301bDf8C02d19d8204712D9Ef10fa38c6109E7; // Address for controller fee\n    address public vaultChefAddress;\n    address public govAddress;\n\n    uint256 public lastEarnBlock = block.number;\n    uint256 public sharesTotal = 0;\n\n    uint256 public controllerFee = 3000;\n    uint256 public constant feeMaxTotal = 3000;\n    uint256 public constant feeMax = 10000; // 100 = 1%\n\n    uint256 public withdrawFeeFactor = 10000; // 0% withdraw fee\n    uint256 public constant withdrawFeeFactorMax = 10000;\n    uint256 public constant withdrawFeeFactorLL = 9900;\n\n    address[] public earnedToWmaticPath;\n    address[] public earnedToUsdcPath;\n    address[] public earnedToToken0Path;\n    address[] public earnedToToken1Path;\n    address[] public token0ToEarnedPath;\n    address[] public token1ToEarnedPath;\n    \n    event SetSettings(\n        uint256 _controllerFee,\n        uint256 _withdrawFeeFactor,\n        address _uniRouterAddress\n    );\n    \n    modifier onlyGov() {\n        require(msg.sender == govAddress, \"!gov\");\n        _;\n    }\n\n    function _vaultDeposit(uint256 _amount) internal virtual;\n    function _vaultWithdraw(uint256 _amount) internal virtual;\n    function earn() external virtual;\n    function vaultSharesTotal() public virtual view returns (uint256);\n    function wantLockedTotal() public virtual view returns (uint256);\n    function _resetAllowances() internal virtual;\n    function _emergencyVaultWithdraw() internal virtual;\n    \n    function deposit(address _userAddress, uint256 _wantAmt) external onlyOwner nonReentrant whenNotPaused returns (uint256) {\n        // Call must happen before transfer\n        uint256 wantLockedBefore = wantLockedTotal();\n\n        IERC20(wantAddress).safeTransferFrom(\n            address(msg.sender),\n            address(this),\n            _wantAmt\n        );\n\n        // Proper deposit amount for tokens with fees, or vaults with deposit fees\n        uint256 sharesAdded = _farm();\n        if (sharesTotal > 0) {\n            sharesAdded = sharesAdded.mul(sharesTotal).div(wantLockedBefore);\n        }\n        sharesTotal = sharesTotal.add(sharesAdded);\n\n        return sharesAdded;\n    }\n\n    function _farm() internal returns (uint256) {\n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\n        if (wantAmt == 0) return 0;\n        \n        uint256 sharesBefore = vaultSharesTotal();\n        _vaultDeposit(wantAmt);\n        uint256 sharesAfter = vaultSharesTotal();\n        \n        return sharesAfter.sub(sharesBefore);\n    }\n\n    function withdraw(address _userAddress, uint256 _wantAmt) external onlyOwner nonReentrant returns (uint256) {\n        require(_wantAmt > 0, \"_wantAmt is 0\");\n        \n        uint256 wantAmt = IERC20(wantAddress).balanceOf(address(this));\n        \n        // Check if strategy has tokens from panic\n        if (_wantAmt > wantAmt) {\n            _vaultWithdraw(_wantAmt.sub(wantAmt));\n            wantAmt = IERC20(wantAddress).balanceOf(address(this));\n        }\n\n        if (_wantAmt > wantAmt) {\n            _wantAmt = wantAmt;\n        }\n\n        if (_wantAmt > wantLockedTotal()) {\n            _wantAmt = wantLockedTotal();\n        }\n\n        uint256 sharesRemoved = _wantAmt.mul(sharesTotal).div(wantLockedTotal());\n        if (sharesRemoved > sharesTotal) {\n            sharesRemoved = sharesTotal;\n        }\n        sharesTotal = sharesTotal.sub(sharesRemoved);\n        \n        // Withdraw fee\n        uint256 withdrawFee = _wantAmt\n            .mul(withdrawFeeFactorMax.sub(withdrawFeeFactor))\n            .div(withdrawFeeFactorMax);\n        if (withdrawFee > 0) {\n            IERC20(wantAddress).safeTransfer(withdrawFeeAddress, withdrawFee);\n        }\n        \n        _wantAmt = _wantAmt.sub(withdrawFee);\n\n        IERC20(wantAddress).safeTransfer(vaultChefAddress, _wantAmt);\n\n        return sharesRemoved;\n    }\n\n    function distributeFees(uint256 _earnedAmt) internal returns (uint256) {\n        if (controllerFee > 0) {\n            uint256 fee = _earnedAmt.mul(controllerFee).div(feeMax);\n    \n            _safeSwapWmatic(\n                fee,\n                earnedToWmaticPath,\n                controllerFeeAddress\n            );\n            \n            _earnedAmt = _earnedAmt.sub(fee);\n        }\n\n        return _earnedAmt;\n    }\n\n    function resetAllowances() external onlyGov {\n        _resetAllowances();\n    }\n\n    function pause() external onlyGov {\n        _pause();\n    }\n\n    function unpause() external onlyGov {\n        _unpause();\n        _resetAllowances();\n    }\n\n    function panic() external onlyGov {\n        _pause();\n        _emergencyVaultWithdraw();\n    }\n\n    function unpanic() external onlyGov {\n        _unpause();\n        _farm();\n    }\n\n    function setGov(address _govAddress) external onlyGov {\n        govAddress = _govAddress;\n    }\n    \n    function setSettings(\n        uint256 _controllerFee,\n        uint256 _withdrawFeeFactor,\n        address _uniRouterAddress\n    ) external onlyGov {\n        require(_controllerFee <= feeMaxTotal, \"Max fee of 30%\");\n        require(_withdrawFeeFactor >= withdrawFeeFactorLL, \"_withdrawFeeFactor too low\");\n        require(_withdrawFeeFactor <= withdrawFeeFactorMax, \"_withdrawFeeFactor too high\");\n        controllerFee = _controllerFee;\n        withdrawFeeFactor = _withdrawFeeFactor;\n        uniRouterAddress = _uniRouterAddress;\n\n        emit SetSettings(\n            _controllerFee,\n            _withdrawFeeFactor,\n            _uniRouterAddress\n        );\n    }\n    \n    function _safeSwap(\n        uint256 _amountIn,\n        address[] memory _path,\n        address _to\n    ) internal {\n        IUniRouter02(uniRouterAddress).swapExactTokensForTokensSupportingFeeOnTransferTokens(\n            _amountIn,\n            0,\n            _path,\n            _to,\n            now.add(600)\n        );\n    }\n    \n    function _safeSwapWmatic(\n        uint256 _amountIn,\n        address[] memory _path,\n        address _to\n    ) internal {\n        IUniRouter02(uniRouterAddress).swapExactTokensForETHSupportingFeeOnTransferTokens(\n            _amountIn,\n            0,\n            _path,\n            _to,\n            now.add(600)\n        );\n    }\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../utils/Context.sol\";\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"../../math/SafeMath.sol\";\nimport \"../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using SafeMath for uint256;\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        // solhint-disable-next-line max-line-length\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \"SafeERC20: decreased allowance below zero\");\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) { // Return data is optional\n            // solhint-disable-next-line max-line-length\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor () internal {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and make it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IUniPair {\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\nimport \"./IUniRouter01.sol\";\n\ninterface IUniRouter02 is IUniRouter01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountETH);\n\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable;\n\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external;\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.2 <0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { size := extcodesize(account) }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{ value: amount }(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n      return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12;\n\ninterface IUniRouter01 {\n    function factory() external pure returns (address);\n\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function addLiquidityETH(\n        address token,\n        uint256 amountTokenDesired,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        payable\n        returns (\n            uint256 amountToken,\n            uint256 amountETH,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETH(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountA, uint256 amountB);\n\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint256 liquidity,\n        uint256 amountTokenMin,\n        uint256 amountETHMin,\n        address to,\n        uint256 deadline,\n        bool approveMax,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external returns (uint256 amountToken, uint256 amountETH);\n\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapTokensForExactTokens(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactETHForTokens(\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function swapTokensForExactETH(\n        uint256 amountOut,\n        uint256 amountInMax,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapExactTokensForETH(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function swapETHForExactTokens(\n        uint256 amountOut,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external payable returns (uint256[] memory amounts);\n\n    function quote(\n        uint256 amountA,\n        uint256 reserveA,\n        uint256 reserveB\n    ) external pure returns (uint256 amountB);\n\n    function getAmountOut(\n        uint256 amountIn,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountOut);\n\n    function getAmountIn(\n        uint256 amountOut,\n        uint256 reserveIn,\n        uint256 reserveOut\n    ) external pure returns (uint256 amountIn);\n\n    function getAmountsOut(uint256 amountIn, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n\n    function getAmountsIn(uint256 amountOut, address[] calldata path)\n        external\n        view\n        returns (uint256[] memory amounts);\n}\n\n{\n  \"optimizer\": {\n    \"enabled\": false,\n    \"runs\": 200\n  },\n  \"outputSelection\": {\n    \"*\": {\n      \"*\": [\n        \"evm.bytecode\",\n        \"evm.deployedBytecode\",\n        \"abi\"\n      ]\n    }\n  },\n  \"libraries\": {}\n}"
}