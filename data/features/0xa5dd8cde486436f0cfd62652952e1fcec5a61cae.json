{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH2 PUSH1 SSTORE PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH20 OR SWAP1 SSTORE PUSH11 PUSH1 SSTORE CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 PUSH1 PUSH1 EXP SUB NOT SWAP4 DUP5 AND OR SWAP1 SWAP3 AND SWAP1 DUP3 AND OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 SLOAD PUSH1 DUP2 DUP2 SSTORE SWAP3 SWAP1 SWAP2 AND DUP3 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SWAP2 SHA3 SSTORE PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 CALLER PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH1 SLOAD CALLVALUE PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP PUSH2 DUP3 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP3 POP DUP3 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SLOAD SWAP1 SWAP2 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 SLOAD DUP6 DUP3 AND SWAP3 SWAP2 AND SWAP1 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLVALUE DUP1 ISZERO PUSH2 MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 SSTORE POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 CALLER SWAP1 SWAP2 AND SWAP1 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND SWAP2 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP4 GT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD DUP2 DUP5 MUL ADD DUP5 EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP STOP LOG1 PUSH6 SHA3 MSTORE UNKNOWN_0x27 UNKNOWN_0xb8 PUSH28 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.702470462895304,
  "opcode_count": 1282,
  "unique_opcodes": 57,
  "byte_entropy": 5.825515650049008,
  "byte_0x": 0.00048146364949446316,
  "byte_60": 0.11266249398170439,
  "byte_40": 0.015406836783822821,
  "byte_52": 0.023110255175734232,
  "byte_61": 0.04718343765045739,
  "byte_4e": 0.0014443909484833895,
  "byte_20": 0.020221473278767454,
  "byte_03": 0.02407318247472316,
  "byte_55": 0.006259027443428021,
  "byte_04": 0.011073663938372653,
  "byte_80": 0.03177660086663457,
  "byte_54": 0.014443909484833895,
  "byte_01": 0.04044294655753491,
  "byte_a0": 0.013962445835339432,
  "byte_02": 0.02888781896966779,
  "byte_0a": 0.013962445835339432,
  "byte_19": 0.002407318247472316,
  "byte_16": 0.026480500722195474,
  "byte_73": 0.0014443909484833895,
  "byte_39": 0.0014443909484833895,
  "byte_97": 0.0014443909484833895,
  "byte_7b": 0.0009629272989889263,
  "byte_6c": 0.0009629272989889263,
  "byte_5a": 0.0019258545979778526,
  "byte_0d": 0.0009629272989889263,
  "byte_bb": 0.0009629272989889263,
  "byte_75": 0.00048146364949446316,
  "byte_15": 0.018777082330284064,
  "byte_96": 0.0009629272989889263,
  "byte_28": 0.0014443909484833895,
  "byte_00": 0.06836783822821377,
  "byte_91": 0.012999518536350506,
  "byte_ee": 0.00048146364949446316,
  "byte_5d": 0.00048146364949446316,
  "byte_3d": 0.00048146364949446316,
  "byte_a8": 0.00048146364949446316,
  "byte_42": 0.002407318247472316,
  "byte_17": 0.0019258545979778526,
  "byte_90": 0.03996148290804044,
  "byte_6a": 0.00048146364949446316,
  "byte_b7": 0.00048146364949446316,
  "byte_d2": 0.0014443909484833895,
  "byte_dc": 0.0009629272989889263,
  "byte_c8": 0.002407318247472316,
  "byte_0c": 0.00048146364949446316,
  "byte_e4": 0.00048146364949446316,
  "byte_05": 0.005296100144439095,
  "byte_34": 0.0077034183919114105,
  "byte_4a": 0.00048146364949446316,
  "byte_57": 0.02455464612421762,
  "byte_fd": 0.011073663938372653,
  "byte_5b": 0.03707270101107366,
  "byte_33": 0.006259027443428021,
  "byte_81": 0.027924891670678863,
  "byte_93": 0.005296100144439095,
  "byte_84": 0.003370245546461242,
  "byte_92": 0.004333172845450169,
  "byte_82": 0.014443909484833895,
  "byte_07": 0.005777563793933558,
  "byte_9c": 0.002407318247472316,
  "byte_f3": 0.002888781896966779,
  "byte_36": 0.0014443909484833895,
  "byte_10": 0.002888781896966779,
  "byte_cf": 0.00048146364949446316,
  "byte_63": 0.012999518536350506,
  "byte_ff": 0.0274434280211844,
  "byte_7c": 0.0009629272989889263,
  "byte_35": 0.003370245546461242,
  "byte_06": 0.007221954742416947,
  "byte_de": 0.00048146364949446316,
  "byte_14": 0.010110736639383727,
  "byte_da": 0.0009629272989889263,
  "byte_18": 0.0014443909484833895,
  "byte_dd": 0.0014443909484833895,
  "byte_64": 0.0014443909484833895,
  "byte_1c": 0.00048146364949446316,
  "byte_b6": 0.00048146364949446316,
  "byte_41": 0.0014443909484833895,
  "byte_89": 0.00048146364949446316,
  "byte_31": 0.0014443909484833895,
  "byte_3c": 0.0009629272989889263,
  "byte_e5": 0.0009629272989889263,
  "byte_67": 0.0009629272989889263,
  "byte_b8": 0.0009629272989889263,
  "byte_70": 0.00048146364949446316,
  "byte_cb": 0.0009629272989889263,
  "byte_b2": 0.00048146364949446316,
  "byte_e2": 0.0019258545979778526,
  "byte_ea": 0.00048146364949446316,
  "byte_85": 0.004333172845450169,
  "byte_d6": 0.0009629272989889263,
  "byte_ce": 0.00048146364949446316,
  "byte_8d": 0.0019258545979778526,
  "byte_a5": 0.00048146364949446316,
  "byte_95": 0.002407318247472316,
  "byte_d8": 0.002888781896966779,
  "byte_9b": 0.0014443909484833895,
  "byte_23": 0.0014443909484833895,
  "byte_a2": 0.00048146364949446316,
  "byte_c7": 0.00048146364949446316,
  "byte_ba": 0.00048146364949446316,
  "byte_a9": 0.0009629272989889263,
  "byte_4c": 0.00048146364949446316,
  "byte_bc": 0.00048146364949446316,
  "byte_32": 0.00048146364949446316,
  "byte_2c": 0.00048146364949446316,
  "byte_f0": 0.0009629272989889263,
  "byte_88": 0.0019258545979778526,
  "byte_d5": 0.00048146364949446316,
  "byte_47": 0.00048146364949446316,
  "byte_f2": 0.0019258545979778526,
  "byte_e3": 0.0009629272989889263,
  "byte_8b": 0.0009629272989889263,
  "byte_56": 0.01974000962927299,
  "byte_ed": 0.0014443909484833895,
  "byte_51": 0.01059220028887819,
  "byte_83": 0.0077034183919114105,
  "byte_50": 0.014925373134328358,
  "byte_29": 0.0009629272989889263,
  "byte_11": 0.0014443909484833895,
  "byte_1f": 0.0009629272989889263,
  "byte_6f": 0.0014443909484833895,
  "byte_77": 0.002888781896966779,
  "byte_94": 0.00048146364949446316,
  "byte_c3": 0.00048146364949446316,
  "byte_a6": 0.00048146364949446316,
  "byte_ab": 0.00048146364949446316,
  "byte_f5": 0.002407318247472316,
  "byte_c6": 0.00048146364949446316,
  "byte_08": 0.0009629272989889263,
  "byte_1b": 0.0014443909484833895,
  "byte_e8": 0.0009629272989889263,
  "byte_2e": 0.0009629272989889263,
  "byte_f7": 0.00048146364949446316,
  "byte_6e": 0.0014443909484833895,
  "byte_24": 0.0009629272989889263,
  "byte_b4": 0.0009629272989889263,
  "byte_e0": 0.0014443909484833895,
  "byte_d4": 0.0009629272989889263,
  "byte_43": 0.0009629272989889263,
  "byte_a4": 0.0009629272989889263,
  "byte_7f": 0.002888781896966779,
  "byte_ad": 0.0009629272989889263,
  "byte_69": 0.002888781896966779,
  "byte_c2": 0.0009629272989889263,
  "byte_b0": 0.0009629272989889263,
  "byte_68": 0.0009629272989889263,
  "byte_fc": 0.0014443909484833895,
  "byte_37": 0.0014443909484833895,
  "byte_aa": 0.0009629272989889263,
  "byte_2b": 0.0009629272989889263,
  "byte_a7": 0.0009629272989889263,
  "byte_f1": 0.0014443909484833895,
  "byte_c4": 0.0009629272989889263,
  "byte_a1": 0.0014443909484833895,
  "byte_4d": 0.0009629272989889263,
  "byte_b3": 0.0009629272989889263,
  "byte_ef": 0.0009629272989889263,
  "byte_a3": 0.0019258545979778526,
  "byte_74": 0.0014443909484833895,
  "byte_12": 0.00048146364949446316,
  "byte_49": 0.0009629272989889263,
  "byte_9d": 0.00048146364949446316,
  "byte_53": 0.00048146364949446316,
  "byte_59": 0.00048146364949446316,
  "byte_13": 0.00048146364949446316,
  "byte_44": 0.0009629272989889263,
  "byte_cd": 0.00048146364949446316,
  "byte_d0": 0.00048146364949446316,
  "byte_22": 0.00048146364949446316,
  "byte_af": 0.00048146364949446316,
  "byte_6b": 0.00048146364949446316,
  "byte_fe": 0.0038517091959557053,
  "byte_f8": 0.0014443909484833895,
  "byte_0b": 0.0009629272989889263,
  "byte_65": 0.00048146364949446316,
  "byte_62": 0.00048146364949446316,
  "byte_7a": 0.0014443909484833895,
  "byte_72": 0.00048146364949446316,
  "byte_30": 0.0009629272989889263,
  "byte_58": 0.00048146364949446316,
  "byte_27": 0.00048146364949446316,
  "byte_8e": 0.00048146364949446316,
  "byte_6d": 0.00048146364949446316,
  "byte_09": 0.00048146364949446316,
  "byte_1a": 0.00048146364949446316,
  "byte_df": 0.00048146364949446316,
  "byte_78": 0.00048146364949446316,
  "byte_1e": 0.00048146364949446316,
  "byte_bf": 0.00048146364949446316,
  "byte_eb": 0.00048146364949446316,
  "num_nodes": 4,
  "num_edges": 4,
  "avg_degree": 2.0,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 5,
  "event_nums": 2,
  "creation_block": 4806559,
  "creation_timestamp": 1514378792,
  "life_time": 423871.0,
  "duration_seconds": 6309146.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 5,
  "num_buyers": 2,
  "num_sellers": 4,
  "num_creator_transfers": 1,
  "buy_amt": 1.5e+16,
  "sell_amt": 2.5e+16,
  "avg_value": 6666666666666667.0,
  "txn_per_block": 1.1796013890985959e-05,
  "avg_gas_limit": 219018.6,
  "std_gas_limit": 257849.59247871616,
  "avg_gas_used": 176418.4,
  "std_gas_used": 258700.4288922614,
  "avg_gas_price": 12000000000.0,
  "std_gas_price": 7483314773.547883,
  "transfer_num": 1,
  "timeline_sequence": [
    [
      4806559,
      1514378792,
      1,
      10,
      0,
      690694,
      20000000000,
      0,
      1,
      1075314,
      690694,
      18285535
    ],
    [
      5225247,
      1520611764,
      0,
      77,
      10000000000000000,
      50000,
      20000000000,
      1,
      0,
      2707225,
      50000,
      17866847
    ],
    [
      5225262,
      1520612056,
      1,
      115,
      15000000000000000,
      300000,
      10000000000,
      0,
      1,
      4763261,
      89299,
      17866832
    ],
    [
      5230430,
      1520687938,
      0,
      113,
      0,
      52099,
      10000000000,
      0,
      1,
      3519560,
      52099,
      17861664
    ],
    [
      5225262,
      1520612056,
      0,
      0,
      15000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.11;\n \nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant public returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) tokenBalances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(tokenBalances[msg.sender]>=_value);\n    tokenBalances[msg.sender] = tokenBalances[msg.sender].sub(_value);\n    tokenBalances[_to] = tokenBalances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) constant public returns (uint256 balance) {\n    return tokenBalances[_owner];\n  }\n}\n\ncontract WinBitcoin is BasicToken,Ownable {\n\n   using SafeMath for uint256;\n   \n   string public constant name = \"WinBitcoin\";\n   string public constant symbol = \"WBC\";\n   uint256 public constant decimals = 18;\n   uint256 public ratePerWei = 20000;   \n   address public ethStore = 0x39977B6c5A0dbb751596280091eE5D733d20A842;\n   uint256 public REMAINING_SUPPLY = 100000000 * (10 ** uint256(decimals));\n   event Debug(string message, address addr, uint256 number);\n   event Message(string message);\n    string buyMessage;\n   // fallback function can be used to buy tokens\n   function () public payable {\n    buy(msg.sender);\n   }\n  \n   /**\n   * @dev Contructor that gives msg.sender all of existing tokens.\n   */\n    function WinBitcoin() public {\n        owner = ethStore;\n        totalSupply = REMAINING_SUPPLY;\n        tokenBalances[owner] = totalSupply;   //Since we divided the token into 10^18 parts\n    }\n    \n    function buy(address beneficiary) payable public {\n        uint amount = msg.value.mul(ratePerWei);                    // calculates the amount\n        uint bonus = amount.mul(20);\n        bonus = bonus.div(100);\n        \n        amount = amount.add(bonus);\n        require(tokenBalances[owner] >= amount);               // checks if it has enough to sell\n        tokenBalances[beneficiary] = tokenBalances[beneficiary].add(amount);                  // adds the amount to buyer's balance\n        tokenBalances[owner] = tokenBalances[owner].sub(amount);                        // subtracts amount from seller's balance\n        Transfer(owner, beneficiary, amount);               // execute an event reflecting the change\n        ethStore.transfer(msg.value);                       //send the eth to the address where eth should be collected\n        REMAINING_SUPPLY = tokenBalances[owner];\n        \n    }\n    \n    function getTokenBalance() public view returns (uint256 balance) {\n        balance = tokenBalances[msg.sender]; // show token balance in full tokens not part\n    }\n \n    function changeBuyPrice(uint newPrice) public onlyOwner {\n        ratePerWei = newPrice;\n    }\n}"
}