{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI NUMBER PUSH1 SLOAD GT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD NUMBER GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP5 POP DUP5 GT PUSH2 JUMPI PUSH1 SLOAD PUSH2 JUMP JUMPDEST DUP4 JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP4 POP CALLVALUE ADD DUP4 SWAP1 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLVALUE SWAP2 POP PUSH1 SLOAD PUSH1 SLOAD DUP4 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP3 SWAP1 SWAP3 MUL SWAP1 DUP2 ADD DUP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE PUSH1 SLOAD SWAP2 SLOAD SWAP1 SWAP3 POP GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 CALLER DUP4 PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD DUP3 ADD SWAP1 SSTORE JUMPDEST POP POP POP POP STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH4 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND SWAP3 PUSH4 SWAP3 SWAP2 AND SWAP1 DUP4 SWAP1 PUSH4 SWAP1 ADDRESS SWAP1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SLOAD SWAP1 SWAP2 AND SWAP1 PUSH4 SWAP1 DUP5 SWAP1 DUP5 SWAP1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH4 SWAP1 SWAP2 AND PUSH8 MUL SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP STOP LOG1 PUSH6 SHA3 COINBASE SWAP3 UNKNOWN_0x4d DUP12 NUMBER UNKNOWN_0xe UNKNOWN_0x4c UNKNOWN_0x2a EQ DUP1 UNKNOWN_0xca PUSH14 UNKNOWN_0xa9 UNKNOWN_0x2e UNOFFICIAL_PUSH SWAP16 SHR UNKNOWN_0x4a STOP UNKNOWN_0x29",
  "opcode_entropy": 4.658914309150755,
  "opcode_count": 1460,
  "unique_opcodes": 69,
  "byte_entropy": 5.621199546778001,
  "byte_60": 0.13459759481961148,
  "byte_40": 0.012488436632747455,
  "byte_52": 0.017113783533765033,
  "byte_04": 0.015263644773358002,
  "byte_36": 0.00046253469010175765,
  "byte_10": 0.0009250693802035153,
  "byte_61": 0.05226641998149861,
  "byte_00": 0.037927844588344126,
  "byte_ed": 0.0009250693802035153,
  "byte_57": 0.03145235892691952,
  "byte_63": 0.015263644773358002,
  "byte_ff": 0.032377428307123035,
  "byte_e0": 0.0027752081406105457,
  "byte_02": 0.04116558741905643,
  "byte_0a": 0.019888991674375578,
  "byte_35": 0.006938020351526364,
  "byte_16": 0.026364477335800184,
  "byte_08": 0.0018501387604070306,
  "byte_3c": 0.00046253469010175765,
  "byte_23": 0.0013876040703052729,
  "byte_81": 0.025901942645698426,
  "byte_14": 0.01341350601295097,
  "byte_71": 0.00046253469010175765,
  "byte_80": 0.03839037927844589,
  "byte_1b": 0.0009250693802035153,
  "byte_34": 0.010638297872340425,
  "byte_7a": 0.0013876040703052729,
  "byte_ae": 0.00046253469010175765,
  "byte_96": 0.0009250693802035153,
  "byte_9c": 0.002312673450508788,
  "byte_bd": 0.00046253469010175765,
  "byte_fb": 0.0013876040703052729,
  "byte_ab": 0.0013876040703052729,
  "byte_21": 0.00046253469010175765,
  "byte_58": 0.0009250693802035153,
  "byte_89": 0.00046253469010175765,
  "byte_be": 0.0009250693802035153,
  "byte_48": 0.0009250693802035153,
  "byte_cd": 0.0009250693802035153,
  "byte_4c": 0.0018501387604070306,
  "byte_b1": 0.00046253469010175765,
  "byte_d1": 0.00046253469010175765,
  "byte_b6": 0.0018501387604070306,
  "byte_b3": 0.0009250693802035153,
  "byte_1f": 0.00046253469010175765,
  "byte_e4": 0.00046253469010175765,
  "byte_74": 0.00046253469010175765,
  "byte_54": 0.019888991674375578,
  "byte_03": 0.03283996299722479,
  "byte_83": 0.0074005550416281225,
  "byte_cf": 0.00046253469010175765,
  "byte_1e": 0.0009250693802035153,
  "byte_1c": 0.0009250693802035153,
  "byte_87": 0.002312673450508788,
  "byte_c9": 0.0009250693802035153,
  "byte_44": 0.002312673450508788,
  "byte_8b": 0.0018501387604070306,
  "byte_33": 0.0074005550416281225,
  "byte_b4": 0.00046253469010175765,
  "byte_b2": 0.0013876040703052729,
  "byte_8d": 0.00046253469010175765,
  "byte_a5": 0.0009250693802035153,
  "byte_cb": 0.0009250693802035153,
  "byte_5b": 0.04209065679925995,
  "byte_92": 0.00786308973172988,
  "byte_91": 0.013876040703052728,
  "byte_b7": 0.00046253469010175765,
  "byte_f5": 0.00046253469010175765,
  "byte_93": 0.0018501387604070306,
  "byte_98": 0.00046253469010175765,
  "byte_bb": 0.0018501387604070306,
  "byte_c3": 0.00046253469010175765,
  "byte_43": 0.002312673450508788,
  "byte_da": 0.00046253469010175765,
  "byte_ee": 0.00046253469010175765,
  "byte_20": 0.012025901942645698,
  "byte_f0": 0.00046253469010175765,
  "byte_b8": 0.00046253469010175765,
  "byte_fc": 0.0013876040703052729,
  "byte_f9": 0.00046253469010175765,
  "byte_37": 0.00046253469010175765,
  "byte_0f": 0.00046253469010175765,
  "byte_d3": 0.00046253469010175765,
  "byte_f3": 0.0013876040703052729,
  "byte_a2": 0.00046253469010175765,
  "byte_22": 0.00046253469010175765,
  "byte_ea": 0.00046253469010175765,
  "byte_cc": 0.00046253469010175765,
  "byte_e8": 0.00046253469010175765,
  "byte_f2": 0.00046253469010175765,
  "byte_fd": 0.01942645698427382,
  "byte_e3": 0.00046253469010175765,
  "byte_90": 0.03145235892691952,
  "byte_01": 0.030064754856614247,
  "byte_a0": 0.017113783533765033,
  "byte_6b": 0.0009250693802035153,
  "byte_06": 0.006938020351526364,
  "byte_11": 0.004625346901017576,
  "byte_15": 0.022664199814986123,
  "byte_50": 0.013876040703052728,
  "byte_07": 0.006938020351526364,
  "byte_29": 0.0009250693802035153,
  "byte_09": 0.0013876040703052729,
  "byte_94": 0.0009250693802035153,
  "byte_84": 0.006012950971322849,
  "byte_56": 0.018501387604070305,
  "byte_0b": 0.0013876040703052729,
  "byte_7f": 0.0009250693802035153,
  "byte_05": 0.005550416281221091,
  "byte_fe": 0.00046253469010175765,
  "byte_82": 0.004162812210915819,
  "byte_55": 0.005087881591119334,
  "byte_85": 0.0027752081406105457,
  "byte_d4": 0.00046253469010175765,
  "byte_a9": 0.005550416281221091,
  "byte_51": 0.00786308973172988,
  "byte_24": 0.0027752081406105457,
  "byte_3b": 0.0018501387604070306,
  "byte_c6": 0.002312673450508788,
  "byte_5a": 0.0018501387604070306,
  "byte_f1": 0.002312673450508788,
  "byte_0c": 0.0018501387604070306,
  "byte_7c": 0.00046253469010175765,
  "byte_73": 0.0018501387604070306,
  "byte_a1": 0.0009250693802035153,
  "byte_79": 0.0013876040703052729,
  "byte_dc": 0.00046253469010175765,
  "byte_ef": 0.0009250693802035153,
  "byte_0e": 0.0009250693802035153,
  "byte_4e": 0.00046253469010175765,
  "byte_27": 0.00046253469010175765,
  "byte_4f": 0.00046253469010175765,
  "byte_6e": 0.0009250693802035153,
  "byte_76": 0.0013876040703052729,
  "byte_dd": 0.00046253469010175765,
  "byte_9d": 0.0009250693802035153,
  "byte_ec": 0.00046253469010175765,
  "byte_b0": 0.0013876040703052729,
  "byte_28": 0.00046253469010175765,
  "byte_e5": 0.00046253469010175765,
  "byte_3a": 0.00046253469010175765,
  "byte_1a": 0.00046253469010175765,
  "byte_2d": 0.00046253469010175765,
  "byte_ac": 0.00046253469010175765,
  "byte_5f": 0.00046253469010175765,
  "byte_70": 0.00046253469010175765,
  "byte_31": 0.00046253469010175765,
  "byte_30": 0.0009250693802035153,
  "byte_5d": 0.00046253469010175765,
  "byte_a3": 0.00046253469010175765,
  "byte_4a": 0.0013876040703052729,
  "byte_46": 0.00046253469010175765,
  "byte_69": 0.00046253469010175765,
  "byte_75": 0.00046253469010175765,
  "byte_9b": 0.00046253469010175765,
  "byte_67": 0.00046253469010175765,
  "byte_0d": 0.00046253469010175765,
  "byte_a7": 0.00046253469010175765,
  "byte_64": 0.00046253469010175765,
  "byte_88": 0.0013876040703052729,
  "byte_19": 0.0009250693802035153,
  "byte_17": 0.0013876040703052729,
  "byte_65": 0.00046253469010175765,
  "byte_62": 0.00046253469010175765,
  "byte_72": 0.00046253469010175765,
  "byte_41": 0.00046253469010175765,
  "byte_4d": 0.00046253469010175765,
  "byte_2a": 0.00046253469010175765,
  "byte_ca": 0.00046253469010175765,
  "byte_6d": 0.00046253469010175765,
  "byte_f7": 0.00046253469010175765,
  "byte_7e": 0.00046253469010175765,
  "byte_df": 0.00046253469010175765,
  "byte_2e": 0.00046253469010175765,
  "byte_9f": 0.00046253469010175765,
  "num_nodes": 34,
  "num_edges": 34,
  "avg_degree": 2.0,
  "density": 0.030303030303030304,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 90,
  "event_nums": 0,
  "creation_block": 4899098,
  "creation_timestamp": 1515808314,
  "life_time": 1634472.0,
  "duration_seconds": 23994775.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 35,
  "num_buyers": 2,
  "num_sellers": 34,
  "num_creator_transfers": 3,
  "buy_amt": 1.5950048678307156e+19,
  "sell_amt": 1.8078861478307156e+19,
  "avg_value": 3.7394406765510234e+17,
  "txn_per_block": 5.506361989460823e-05,
  "avg_gas_limit": 237181.73333333334,
  "std_gas_limit": 251584.36136147694,
  "avg_gas_used": 57030.2,
  "std_gas_used": 84008.31101625865,
  "avg_gas_price": 27374000000.0,
  "std_gas_price": 20505339889.892097,
  "setprice_num": 4,
  "authorizeamount_num": 5,
  "setblocks_num": 5,
  "transferbalance_num": 28,
  "transferoperationsfunction_num": 1,
  "retrievetoken_num": 2,
  "retrieveeth_num": 3,
  "timeline_sequence": [
    [
      4899098,
      1515808314,
      7,
      160,
      0,
      828573,
      32000000000,
      0,
      1,
      6192645,
      828573,
      18221833
    ],
    [
      4907107,
      1515934169,
      25057,
      23,
      2178310000000000,
      90000,
      52000000000,
      0,
      0,
      751050,
      21625,
      18213824
    ],
    [
      4907849,
      1515945894,
      15,
      200,
      0,
      274910,
      41000000000,
      0,
      1,
      5255355,
      27491,
      18213082
    ],
    [
      4907958,
      1515947359,
      0,
      267,
      0,
      50000,
      20000000000,
      0,
      1,
      7990715,
      43856,
      18212973
    ],
    [
      4908359,
      1515953599,
      1,
      186,
      0,
      50000,
      20000000000,
      0,
      1,
      7218630,
      43856,
      18212572
    ],
    [
      4908390,
      1515953999,
      17,
      111,
      0,
      325910,
      41000000000,
      0,
      1,
      2817098,
      32591,
      18212541
    ],
    [
      4908502,
      1515955721,
      18,
      41,
      0,
      325910,
      41000000000,
      0,
      1,
      1440641,
      32591,
      18212429
    ],
    [
      4908549,
      1515956436,
      152,
      221,
      3000000000000000000,
      210000,
      41000000000,
      0,
      1,
      6725307,
      96978,
      18212382
    ],
    [
      4908549,
      1515956436,
      1,
      229,
      150000000000000000,
      84673,
      41000000000,
      0,
      1,
      7034857,
      69673,
      18212382
    ],
    [
      4908553,
      1515956477,
      0,
      19,
      28453770000000000,
      90000,
      52000000000,
      0,
      1,
      848407,
      69673,
      18212378
    ],
    [
      4908563,
      1515956621,
      1,
      259,
      498536867000000000,
      69673,
      21000000000,
      0,
      1,
      7175985,
      69673,
      18212368
    ],
    [
      4908563,
      1515956621,
      2,
      271,
      0,
      50000,
      20000000000,
      0,
      1,
      7635076,
      43856,
      18212368
    ],
    [
      4908570,
      1515956817,
      25,
      219,
      1000000000000000000,
      21000,
      49000000000,
      1,
      0,
      6260154,
      21000,
      18212361
    ],
    [
      4908573,
      1515956866,
      25,
      80,
      200000000000000000,
      327009,
      21000000000,
      0,
      1,
      3356386,
      69673,
      18212358
    ],
    [
      4908573,
      1515956866,
      14,
      135,
      50000000000000000,
      127009,
      20000000000,
      0,
      1,
      6040908,
      69673,
      18212358
    ],
    [
      4908588,
      1515957084,
      26,
      47,
      1000000000000000000,
      21000,
      60000000000,
      1,
      0,
      1462179,
      21000,
      18212343
    ],
    [
      4908595,
      1515957217,
      174864,
      37,
      40000000000000000,
      69673,
      78000000000,
      0,
      1,
      1928918,
      69673,
      18212336
    ],
    [
      4908600,
      1515957308,
      27,
      5,
      1000000000000000000,
      210000,
      60000000000,
      0,
      1,
      231847,
      69673,
      18212331
    ],
    [
      4908783,
      1515960476,
      16,
      154,
      200000000000000000,
      104509,
      25660000000,
      0,
      1,
      5901271,
      69673,
      18212148
    ],
    [
      4908789,
      1515960546,
      220348,
      4,
      4200000000000000,
      69673,
      80000000000,
      0,
      1,
      173580,
      69673,
      18212142
    ],
    [
      4909341,
      1515968719,
      13,
      17,
      200000000000000000,
      83607,
      52000000000,
      0,
      1,
      489316,
      69673,
      18211590
    ],
    [
      4909713,
      1515974480,
      1,
      196,
      86260000000000000,
      69673,
      20000000000,
      0,
      1,
      6912534,
      69673,
      18211218
    ],
    [
      4910441,
      1515985854,
      0,
      170,
      100000000000000000,
      69673,
      10000000000,
      0,
      1,
      5940258,
      69673,
      18210490
    ],
    [
      4911887,
      1516009050,
      11,
      120,
      100000000000000000,
      69673,
      40000000000,
      0,
      1,
      3424105,
      69673,
      18209044
    ],
    [
      4912090,
      1516012413,
      5,
      280,
      293985554100000000,
      69673,
      50000000000,
      0,
      1,
      7493755,
      69673,
      18208841
    ],
    [
      4912564,
      1516019866,
      13,
      152,
      100000000000000000,
      39673,
      40000000000,
      0,
      1,
      5083645,
      39673,
      18208367
    ],
    [
      4912815,
      1516023645,
      0,
      132,
      15823220000000000,
      90000,
      51000000000,
      0,
      1,
      4965216,
      69673,
      18208116
    ],
    [
      4912957,
      1516026108,
      26,
      156,
      95640765207155873,
      83607,
      52000000000,
      0,
      1,
      3709183,
      69673,
      18207974
    ],
    [
      4913736,
      1516038975,
      7,
      246,
      12000000000000000,
      37000,
      41000000000,
      1,
      0,
      7644225,
      37000,
      18207195
    ],
    [
      4915369,
      1516064617,
      3,
      155,
      0,
      50000,
      20000000000,
      0,
      1,
      5758994,
      43856,
      18205562
    ],
    [
      4916507,
      1516081937,
      0,
      111,
      31640000000000000,
      90000,
      52000000000,
      0,
      1,
      3608016,
      69673,
      18204424
    ],
    [
      4916741,
      1516085343,
      3,
      201,
      19228020000000000,
      104509,
      20000000000,
      0,
      1,
      7720251,
      69673,
      18204190
    ],
    [
      4920137,
      1516138919,
      3,
      8,
      10000000000000000,
      69673,
      99000000000,
      0,
      1,
      285034,
      69673,
      18200794
    ],
    [
      4923595,
      1516192862,
      8,
      114,
      8000000000000000,
      69673,
      41000000000,
      0,
      1,
      3040227,
      69673,
      18197336
    ],
    [
      4923855,
      1516196721,
      4,
      181,
      0,
      50000,
      20000000000,
      0,
      1,
      6546721,
      43856,
      18197076
    ],
    [
      4925306,
      1516219020,
      1,
      195,
      10000000000000000,
      39673,
      41000000000,
      1,
      0,
      4796727,
      39673,
      18195625
    ],
    [
      4925341,
      1516219529,
      2,
      200,
      10000000000000000,
      21000,
      41000000000,
      1,
      0,
      5491140,
      21000,
      18195590
    ],
    [
      4925397,
      1516220467,
      3,
      213,
      25000000000000000,
      69673,
      41000000000,
      0,
      1,
      6287300,
      69673,
      18195534
    ],
    [
      4934460,
      1516360669,
      6,
      160,
      100000000000000000,
      69673,
      41000000000,
      0,
      1,
      5462939,
      69673,
      18186471
    ],
    [
      4934969,
      1516368560,
      5,
      140,
      8573280240000000000,
      82422,
      60000000000,
      0,
      1,
      5157178,
      81978,
      18185962
    ],
    [
      4935853,
      1516382148,
      19,
      82,
      0,
      32591,
      42000000000,
      0,
      1,
      2977602,
      32591,
      18185078
    ],
    [
      4936696,
      1516394459,
      364,
      133,
      100000000000000000,
      104509,
      3000000000,
      0,
      1,
      7868692,
      69673,
      18184235
    ],
    [
      4937295,
      1516403432,
      20,
      49,
      0,
      32591,
      42000000000,
      0,
      1,
      1590618,
      32591,
      18183636
    ],
    [
      4940192,
      1516446943,
      12,
      20,
      13082542000000000,
      69673,
      62000000000,
      0,
      1,
      790860,
      69673,
      18180739
    ],
    [
      4948085,
      1516563976,
      0,
      95,
      20000000000000000,
      69673,
      21000000000,
      0,
      1,
      5072630,
      69673,
      18172846
    ],
    [
      4948796,
      1516573956,
      0,
      43,
      6917700000000000,
      90000,
      30000000000,
      0,
      1,
      1644108,
      69673,
      18172135
    ],
    [
      4965417,
      1516817573,
      0,
      75,
      94634490000000000,
      21000,
      41000000000,
      1,
      0,
      2401120,
      21000,
      18155514
    ],
    [
      4966520,
      1516832919,
      1,
      171,
      200000000000000000,
      69673,
      41000000000,
      0,
      1,
      3823907,
      69673,
      18154411
    ],
    [
      5118471,
      1519041543,
      5,
      44,
      0,
      62172,
      38000000000,
      0,
      1,
      1664512,
      46722,
      18002460
    ],
    [
      5118482,
      1519041822,
      6,
      200,
      0,
      62108,
      10000000000,
      0,
      1,
      7811519,
      46658,
      18002449
    ],
    [
      5118495,
      1519042062,
      7,
      118,
      0,
      600000,
      9000000000,
      0,
      1,
      3994165,
      46722,
      18002436
    ],
    [
      5118620,
      1519043898,
      8,
      102,
      0,
      600000,
      9000000000,
      0,
      1,
      3399768,
      46722,
      18002311
    ],
    [
      5118629,
      1519044111,
      9,
      155,
      0,
      600000,
      9000000000,
      0,
      1,
      5411787,
      46722,
      18002302
    ],
    [
      5118636,
      1519044202,
      10,
      61,
      0,
      600000,
      9000000000,
      0,
      1,
      1873429,
      46722,
      18002295
    ],
    [
      5118640,
      1519044251,
      11,
      108,
      0,
      600000,
      9000000000,
      0,
      1,
      3717390,
      46722,
      18002291
    ],
    [
      5118645,
      1519044330,
      12,
      75,
      0,
      600000,
      9000000000,
      0,
      1,
      2813257,
      46722,
      18002286
    ],
    [
      5118652,
      1519044410,
      13,
      48,
      0,
      600000,
      9000000000,
      0,
      1,
      1667283,
      46722,
      18002279
    ],
    [
      5118655,
      1519044465,
      14,
      126,
      0,
      600000,
      9000000000,
      0,
      1,
      3665114,
      46722,
      18002276
    ],
    [
      5118658,
      1519044514,
      15,
      114,
      0,
      600000,
      9000000000,
      0,
      1,
      4186593,
      46722,
      18002273
    ],
    [
      5118661,
      1519044539,
      16,
      51,
      0,
      600000,
      9000000000,
      0,
      1,
      2017847,
      46722,
      18002270
    ],
    [
      5118663,
      1519044568,
      17,
      118,
      0,
      600000,
      9000000000,
      0,
      1,
      3899143,
      46722,
      18002268
    ],
    [
      5118667,
      1519044621,
      18,
      80,
      0,
      600000,
      9000000000,
      0,
      1,
      3252113,
      46722,
      18002264
    ],
    [
      5118669,
      1519044680,
      19,
      146,
      0,
      600000,
      9000000000,
      0,
      1,
      5074776,
      23753,
      18002262
    ],
    [
      5118671,
      1519044726,
      20,
      207,
      0,
      600000,
      7000000000,
      0,
      1,
      7242798,
      46722,
      18002260
    ],
    [
      5118675,
      1519044756,
      21,
      101,
      0,
      600000,
      7000000000,
      0,
      1,
      4642888,
      46722,
      18002256
    ],
    [
      5118685,
      1519044954,
      22,
      91,
      0,
      600000,
      4000000000,
      0,
      1,
      4345782,
      46658,
      18002246
    ],
    [
      5118687,
      1519044987,
      23,
      130,
      0,
      600000,
      7000000000,
      0,
      1,
      4973780,
      46658,
      18002244
    ],
    [
      5118695,
      1519045155,
      24,
      69,
      0,
      600000,
      7000000000,
      0,
      1,
      3300589,
      46722,
      18002236
    ],
    [
      5118699,
      1519045266,
      25,
      173,
      0,
      600000,
      7000000000,
      0,
      1,
      7228952,
      46722,
      18002232
    ],
    [
      5118713,
      1519045439,
      26,
      85,
      0,
      600000,
      7000000000,
      0,
      1,
      3653070,
      46722,
      18002218
    ],
    [
      5118716,
      1519045471,
      27,
      35,
      0,
      600000,
      7000000000,
      0,
      1,
      1374236,
      46722,
      18002215
    ],
    [
      5118720,
      1519045503,
      28,
      45,
      0,
      600000,
      7000000000,
      0,
      1,
      2011566,
      46722,
      18002211
    ],
    [
      5118725,
      1519045572,
      29,
      145,
      0,
      600000,
      7000000000,
      0,
      1,
      6811677,
      46722,
      18002206
    ],
    [
      5118728,
      1519045606,
      30,
      200,
      0,
      600000,
      7000000000,
      0,
      1,
      6787038,
      46722,
      18002203
    ],
    [
      5118732,
      1519045640,
      31,
      97,
      0,
      600000,
      7000000000,
      0,
      1,
      3745480,
      46722,
      18002199
    ],
    [
      5118735,
      1519045676,
      32,
      126,
      0,
      600000,
      7000000000,
      0,
      1,
      7136265,
      46722,
      18002196
    ],
    [
      5150237,
      1519510317,
      21,
      46,
      0,
      28946,
      16000000000,
      0,
      1,
      3578644,
      28946,
      17970694
    ],
    [
      5150242,
      1519510430,
      22,
      60,
      0,
      42491,
      16000000000,
      0,
      1,
      1781260,
      27274,
      17970689
    ],
    [
      5150263,
      1519510760,
      23,
      26,
      0,
      32723,
      16000000000,
      0,
      1,
      801255,
      30465,
      17970668
    ],
    [
      5150272,
      1519510928,
      24,
      122,
      0,
      32595,
      16000000000,
      0,
      1,
      2985861,
      30337,
      17970659
    ],
    [
      5708764,
      1527777593,
      30,
      15,
      0,
      32591,
      22000000000,
      0,
      1,
      5500892,
      32591,
      17412167
    ],
    [
      5708905,
      1527779495,
      31,
      29,
      0,
      27555,
      22000000000,
      0,
      1,
      5141334,
      27555,
      17412026
    ],
    [
      5709049,
      1527781799,
      32,
      38,
      0,
      27555,
      41000000000,
      0,
      1,
      1411219,
      27555,
      17411882
    ],
    [
      5709063,
      1527781986,
      33,
      30,
      0,
      27555,
      20000000000,
      0,
      1,
      1864835,
      27555,
      17411868
    ],
    [
      5709574,
      1527789789,
      75,
      19,
      680000000000000000,
      69673,
      30000000000,
      0,
      1,
      835882,
      69673,
      17411357
    ],
    [
      6533561,
      1539802985,
      37,
      13,
      0,
      42790,
      41000000000,
      0,
      1,
      446000,
      27569,
      16587370
    ],
    [
      6533570,
      1539803089,
      38,
      18,
      0,
      32595,
      41000000000,
      0,
      1,
      408388,
      30337,
      16587361
    ],
    [
      5150263,
      1519510760,
      0,
      0,
      270048678307155873,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5150272,
      1519510928,
      0,
      0,
      15000000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6533570,
      1539803089,
      0,
      0,
      680000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.16;\n\ninterface tokenRecipient { \n    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public;\n}\n\ninterface token {\n    function transfer(address receiver, uint amount) public;\n}\n\ncontract TokenERC20 is token {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18; // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // Notifies clients about token transfers\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // Notifies clients about spending approval\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constructor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        require(_spender != 0x0);\n        allowance[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n}\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\n\n\n\ncontract Presale is owned {\n    address public operations;\n\n    TokenERC20 public myToken;\n    uint256 public distributionSupply;\n    uint256 public priceOfToken;\n    uint256 factor;\n    uint public startBlock;\n    uint public endBlock;\n\n    uint256 defaultAuthorizedETH;\n    mapping (address => uint256) public authorizedETH;\n\n    uint256 public distributionRealized;\n    mapping (address => uint256) public realizedETH;\n    mapping (address => uint256) public realizedTokenBalance;\n\n    /**\n     * Constructor function\n     *\n     * Initializes the presale\n     *\n     */\n    function Presale() public {\n        operations = 0x249aAb680bAF7ed84e0ebE55cD078650A17162Ca;\n        myToken = TokenERC20(0xeaAa3585ffDCc973a22929D09179dC06D517b84d);\n        uint256 decimals = uint256(myToken.decimals());\n        distributionSupply = 10 ** decimals * 600000;\n        priceOfToken = 3980891719745222;\n        startBlock = 4909000;\n        endBlock   = 4966700;\n        defaultAuthorizedETH = 8 ether;\n        factor = 10 ** decimals * 3 / 2;\n    }\n\n    modifier onlyOperations {\n        require(msg.sender == operations);\n        _;\n    }\n\n    function transferOperationsFunction(address _operations) onlyOwner public {\n        operations = _operations;\n    }\n\n    function authorizeAmount(address _account, uint32 _valueETH) onlyOperations public {\n        authorizedETH[_account] = uint256(_valueETH) * 1 ether;\n    }\n\n    /**\n     * Fallback function\n     *\n     * The function without name is the default function that is called whenever anyone sends funds to a contract\n     */\n    function () payable public {\n        if (msg.sender != owner)\n        {\n            require(startBlock <= block.number && block.number <= endBlock);\n\n            uint256 senderAuthorizedETH = authorizedETH[msg.sender];\n            uint256 effectiveAuthorizedETH = (senderAuthorizedETH > 0)? senderAuthorizedETH: defaultAuthorizedETH;\n            require(msg.value + realizedETH[msg.sender] <= effectiveAuthorizedETH);\n\n            uint256 amountETH = msg.value;\n            uint256 amountToken = amountETH / priceOfToken * factor;\n            distributionRealized += amountToken;\n            realizedETH[msg.sender] += amountETH;\n            require(distributionRealized <= distributionSupply);\n\n            if (senderAuthorizedETH > 0)\n            {\n                myToken.transfer(msg.sender, amountToken);\n            }\n            else\n            {\n                realizedTokenBalance[msg.sender] += amountToken;\n            }\n        }\n    }\n\n    function transferBalance(address _account) onlyOperations public {\n        uint256 amountToken = realizedTokenBalance[_account];\n\tif (amountToken > 0)\n        {\n            realizedTokenBalance[_account] = 0;\n            myToken.transfer(_account, amountToken);\n        }\n    }\n\n    function retrieveToken() onlyOwner public {\n        myToken.transfer(owner, myToken.balanceOf(this));\n    }\n\n    function retrieveETH(uint256 _amount) onlyOwner public {\n        owner.transfer(_amount);\n    }\n\n    function setBlocks(uint _startBlock, uint _endBlock) onlyOwner public {\n        require (_endBlock > _startBlock);\n        startBlock = _startBlock;\n        endBlock = _endBlock;\n    }\n\n    function setPrice(uint256 _priceOfToken) onlyOwner public {\n        require (_priceOfToken > 0);\n        priceOfToken = _priceOfToken;\n    }\n}"
}