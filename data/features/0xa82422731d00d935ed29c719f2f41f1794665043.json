{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 PUSH1 CALLDATALOAD AND PUSH1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 PUSH1 CALLDATALOAD AND PUSH1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 PUSH1 CALLDATALOAD AND PUSH1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 PUSH1 CALLDATALOAD AND PUSH1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH2 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 CALLDATALOAD AND PUSH2 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 CALLDATALOAD DUP2 DUP2 ADD CALLDATALOAD PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 SWAP5 DUP3 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP5 PUSH1 DUP1 CALLDATALOAD SWAP6 CALLDATASIZE SWAP6 SWAP5 PUSH1 SWAP5 SWAP3 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD SWAP1 DUP5 SWAP1 SSTORE PUSH1 SLOAD DUP3 MLOAD PUSH32 DUP2 MSTORE PUSH1 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 DUP7 ADD DUP3 SWAP1 MSTORE SWAP2 MLOAD SWAP1 SWAP6 SWAP2 SWAP1 SWAP2 AND SWAP4 PUSH4 SWAP4 PUSH1 DUP1 DUP4 ADD SWAP5 SWAP4 SWAP3 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP1 DUP5 DIV JUMPDEST DIV DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH3 DUP5 DIV ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP4 AND PUSH20 NOT SWAP1 SWAP2 AND OR SWAP2 SWAP1 SWAP2 AND PUSH21 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH2 DUP7 DUP7 DUP7 DUP7 DUP7 PUSH1 PUSH2 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 ADD MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD SWAP1 DUP5 SWAP1 SSTORE PUSH1 SLOAD DUP3 MLOAD PUSH32 DUP2 MSTORE DUP8 DUP8 AND PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD DUP4 SWAP1 MSTORE SWAP3 MLOAD SWAP2 SWAP6 AND SWAP4 PUSH4 SWAP4 PUSH1 DUP1 DUP6 ADD SWAP5 SWAP2 SWAP4 SWAP3 SWAP2 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH2 DUP6 DUP6 DUP6 DUP6 PUSH1 DUP1 PUSH2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 DUP5 PUSH1 DUP1 PUSH1 PUSH2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 POP JUMPDEST DUP9 PUSH2 AND DUP3 PUSH2 AND LT ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH4 DUP4 ADD SWAP3 POP PUSH2 JUMP JUMPDEST PUSH4 DUP4 ADD SWAP3 POP JUMPDEST PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 MSTORE PUSH2 DUP10 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD MSTORE JUMPDEST PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 PUSH1 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 DUP4 ADD DUP2 SWAP1 MSTORE PUSH1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 DUP4 ADD DUP3 SWAP1 MSTORE PUSH2 DUP4 ADD DUP2 SWAP1 MSTORE PUSH2 DUP4 ADD DUP3 SWAP1 MSTORE PUSH2 DUP4 ADD MSTORE PUSH2 DUP3 ADD MSTORE PUSH1 SWAP2 POP JUMPDEST DUP8 PUSH1 AND DUP3 PUSH2 AND LT ISZERO PUSH2 JUMPI DUP1 PUSH2 PUSH1 NOT DUP5 ADD AND PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD MLOAD PUSH1 AND PUSH3 MUL DUP4 ADD SWAP3 POP DUP2 DUP1 PUSH1 ADD SWAP3 POP POP PUSH2 JUMP JUMPDEST PUSH1 DUP8 SUB PUSH1 AND PUSH3 MUL DUP4 ADD SWAP3 POP DUP6 PUSH1 AND PUSH2 MUL DUP4 ADD SWAP3 POP DUP5 PUSH1 AND PUSH1 MUL DUP4 ADD SWAP3 POP DUP4 PUSH1 AND DUP4 ADD SWAP3 POP DUP3 SWAP3 POP POP POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH4 DUP5 DIV DUP2 ADD SWAP1 DUP3 SWAP1 PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP4 PUSH2 AND PUSH2 JUMP JUMPDEST SUB SWAP1 POP DUP1 PUSH4 MUL DUP4 ADD SWAP3 POP DUP1 PUSH2 DUP4 SUB PUSH2 AND SUB PUSH4 MUL DUP4 ADD SWAP3 POP JUMPDEST DUP5 DUP4 GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 DUP4 SUB PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH4 DUP4 SUB SWAP3 POP PUSH2 JUMP JUMPDEST PUSH4 DUP4 SUB SWAP3 POP JUMPDEST PUSH1 DUP3 SUB SWAP2 POP PUSH2 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 ADD MLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 AND ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 AND MOD PUSH2 AND ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 DUP4 AND MOD PUSH2 AND ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 TIMESTAMP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP2 DUP8 ADD MLOAD PUSH1 SWAP1 DUP2 AND DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 SHA3 DUP4 DUP9 ADD MLOAD SWAP1 SWAP2 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SWAP6 MLOAD PUSH2 AND DUP4 MSTORE SWAP5 SWAP1 MSTORE SWAP3 SWAP1 SWAP3 SHA3 SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 NOT ADD PUSH1 PUSH2 DUP3 DIV PUSH1 DUP4 DIV PUSH1 DUP5 DIV SUB ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH1 AND PUSH1 EQ DUP1 PUSH2 JUMPI POP DUP3 PUSH1 AND PUSH1 EQ JUMPDEST DUP1 PUSH2 JUMPI POP DUP3 PUSH1 AND PUSH1 EQ JUMPDEST DUP1 PUSH2 JUMPI POP DUP3 PUSH1 AND PUSH1 EQ JUMPDEST DUP1 PUSH2 JUMPI POP DUP3 PUSH1 AND PUSH1 EQ JUMPDEST DUP1 PUSH2 JUMPI POP DUP3 PUSH1 AND PUSH1 EQ JUMPDEST DUP1 PUSH2 JUMPI POP DUP3 PUSH1 AND PUSH1 EQ JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP3 PUSH1 AND PUSH1 EQ DUP1 PUSH2 JUMPI POP DUP3 PUSH1 AND PUSH1 EQ JUMPDEST DUP1 PUSH2 JUMPI POP DUP3 PUSH1 AND PUSH1 EQ JUMPDEST DUP1 PUSH2 JUMPI POP DUP3 PUSH1 AND PUSH1 EQ JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD SWAP1 DUP5 SWAP1 SSTORE PUSH1 SLOAD DUP3 MLOAD PUSH32 DUP2 MSTORE PUSH1 DUP2 ADD SWAP7 SWAP1 SWAP7 MSTORE PUSH1 DUP7 ADD DUP3 SWAP1 MSTORE SWAP2 MLOAD SWAP1 SWAP6 SWAP2 SWAP1 SWAP2 AND SWAP4 PUSH4 SWAP4 PUSH1 DUP1 DUP4 ADD SWAP5 SWAP4 SWAP3 DUP4 SWAP1 SUB ADD SWAP1 DUP3 SWAP1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SWAP2 SWAP1 SWAP2 SSTORE POP JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP3 SWAP1 SSTORE MLOAD DUP4 ISZERO PUSH2 MUL SWAP2 DUP5 SWAP2 SWAP1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 SWAP2 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 TIMESTAMP PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP7 DUP3 ADD MLOAD PUSH1 SWAP1 DUP2 AND DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 SHA3 DUP8 DUP5 ADD MLOAD SWAP1 SWAP2 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 DUP7 MLOAD PUSH2 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 MLOAD SWAP1 DUP7 AND SWAP2 DUP6 ISZERO PUSH2 MUL SWAP2 DUP7 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 PUSH2 DUP7 PUSH2 JUMP JUMPDEST PUSH2 AND DUP6 MSTORE PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP6 MLOAD PUSH2 SWAP1 PUSH2 AND PUSH2 JUMP JUMPDEST SUB SWAP3 POP DUP3 PUSH4 MUL DUP5 ADD SWAP4 POP DUP3 PUSH2 DUP7 PUSH1 ADD MLOAD SUB PUSH2 AND SUB PUSH4 MUL DUP5 ADD SWAP4 POP PUSH1 SWAP2 POP JUMPDEST PUSH1 PUSH1 DUP4 AND GT PUSH2 JUMPI PUSH2 DUP3 DUP7 PUSH1 ADD MLOAD PUSH2 JUMP JUMPDEST PUSH1 AND PUSH3 MUL SWAP1 POP DUP6 DUP5 DUP3 ADD GT ISZERO PUSH2 JUMPI PUSH1 DUP3 AND PUSH1 DUP7 ADD MSTORE PUSH2 JUMP JUMPDEST SWAP3 DUP4 ADD SWAP3 PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST PUSH2 DUP6 PUSH1 ADD MLOAD DUP7 PUSH1 ADD MLOAD PUSH2 JUMP JUMPDEST PUSH1 AND DUP3 PUSH1 AND GT ISZERO ISZERO PUSH2 JUMPI DUP6 DUP5 PUSH3 ADD GT ISZERO PUSH2 JUMPI PUSH1 DUP3 AND PUSH1 DUP7 ADD MSTORE PUSH2 JUMP JUMPDEST PUSH3 SWAP4 SWAP1 SWAP4 ADD SWAP3 PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP7 PUSH2 JUMP JUMPDEST PUSH1 AND PUSH1 DUP7 ADD MSTORE PUSH2 DUP7 PUSH2 JUMP JUMPDEST PUSH1 AND PUSH1 DUP7 ADD MSTORE PUSH2 DUP7 PUSH2 JUMP JUMPDEST PUSH1 AND PUSH1 DUP7 ADD MSTORE PUSH2 DUP7 PUSH2 JUMP JUMPDEST PUSH1 AND PUSH1 DUP7 ADD MSTORE POP SWAP3 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH2 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 SWAP1 PUSH1 DUP3 MUL DUP1 CODESIZE DUP4 CODECOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP2 ADD DUP3 MSTORE PUSH1 DUP1 DUP3 MSTORE PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP1 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xac CALL UNKNOWN_0xf8 UNKNOWN_0xa9 PUSH9 UNKNOWN_0xf MSTORE UNKNOWN_0x5c UNKNOWN_0xb8 SWAP9 UNKNOWN_0xc4 GASLIMIT MSTORE DUP1 CHAINID INVALID_0x6e",
  "opcode_entropy": 4.760441861028397,
  "opcode_count": 3592,
  "unique_opcodes": 80,
  "byte_entropy": 5.746951056405048,
  "byte_60": 0.11289120715350223,
  "byte_80": 0.0422876304023845,
  "byte_40": 0.00838301043219076,
  "byte_52": 0.021050670640834577,
  "byte_04": 0.014344262295081968,
  "byte_36": 0.00037257824143070045,
  "byte_10": 0.0026080476900149033,
  "byte_61": 0.06110283159463487,
  "byte_01": 0.037257824143070044,
  "byte_c1": 0.0005588673621460507,
  "byte_57": 0.02459016393442623,
  "byte_63": 0.009873323397913561,
  "byte_ff": 0.02403129657228018,
  "byte_7c": 0.00018628912071535022,
  "byte_00": 0.06445603576751117,
  "byte_35": 0.010804769001490314,
  "byte_16": 0.029061102831594635,
  "byte_e5": 0.00037257824143070045,
  "byte_7a": 0.0007451564828614009,
  "byte_37": 0.0007451564828614009,
  "byte_81": 0.021982116244411327,
  "byte_14": 0.014157973174366617,
  "byte_c6": 0.00018628912071535022,
  "byte_18": 0.0007451564828614009,
  "byte_a6": 0.0005588673621460507,
  "byte_d5": 0.00018628912071535022,
  "byte_8b": 0.0007451564828614009,
  "byte_f7": 0.0013040238450074517,
  "byte_f6": 0.00018628912071535022,
  "byte_5d": 0.00037257824143070045,
  "byte_02": 0.023099850968703428,
  "byte_1d": 0.0007451564828614009,
  "byte_3e": 0.0018628912071535022,
  "byte_23": 0.00018628912071535022,
  "byte_9e": 0.00018628912071535022,
  "byte_1a": 0.00018628912071535022,
  "byte_4a": 0.0005588673621460507,
  "byte_ad": 0.0009314456035767511,
  "byte_78": 0.0009314456035767511,
  "byte_6c": 0.0007451564828614009,
  "byte_5f": 0.00037257824143070045,
  "byte_7e": 0.00037257824143070045,
  "byte_71": 0.0005588673621460507,
  "byte_38": 0.0009314456035767511,
  "byte_84": 0.007637853949329359,
  "byte_62": 0.0014903129657228018,
  "byte_ba": 0.0005588673621460507,
  "byte_96": 0.0014903129657228018,
  "byte_87": 0.0022354694485842027,
  "byte_a5": 0.0007451564828614009,
  "byte_65": 0.0007451564828614009,
  "byte_c7": 0.0009314456035767511,
  "byte_28": 0.0005588673621460507,
  "byte_eb": 0.0005588673621460507,
  "byte_6b": 0.0009314456035767511,
  "byte_90": 0.03614008941877794,
  "byte_b1": 0.0007451564828614009,
  "byte_03": 0.019001490312965722,
  "byte_39": 0.00037257824143070045,
  "byte_b5": 0.00037257824143070045,
  "byte_95": 0.0022354694485842027,
  "byte_24": 0.0033532041728763042,
  "byte_d0": 0.00037257824143070045,
  "byte_a4": 0.0007451564828614009,
  "byte_15": 0.01657973174366617,
  "byte_4b": 0.00037257824143070045,
  "byte_7b": 0.0011177347242921013,
  "byte_ee": 0.00037257824143070045,
  "byte_64": 0.0014903129657228018,
  "byte_8d": 0.0013040238450074517,
  "byte_7f": 0.0014903129657228018,
  "byte_79": 0.00018628912071535022,
  "byte_33": 0.0035394932935916544,
  "byte_8a": 0.00037257824143070045,
  "byte_a0": 0.012108792846497764,
  "byte_fc": 0.0005588673621460507,
  "byte_bb": 0.0016766020864381521,
  "byte_8c": 0.00018628912071535022,
  "byte_98": 0.00037257824143070045,
  "byte_d3": 0.00037257824143070045,
  "byte_83": 0.011363636363636364,
  "byte_fb": 0.00018628912071535022,
  "byte_cb": 0.00018628912071535022,
  "byte_5b": 0.0415424739195231,
  "byte_1c": 0.0007451564828614009,
  "byte_54": 0.00782414307004471,
  "byte_bd": 0.00018628912071535022,
  "byte_ec": 0.00018628912071535022,
  "byte_31": 0.0005588673621460507,
  "byte_92": 0.00819672131147541,
  "byte_d6": 0.0007451564828614009,
  "byte_13": 0.0027943368107302535,
  "byte_dc": 0.0005588673621460507,
  "byte_9a": 0.00037257824143070045,
  "byte_a3": 0.0009314456035767511,
  "byte_f0": 0.0007451564828614009,
  "byte_77": 0.00037257824143070045,
  "byte_a9": 0.0016766020864381521,
  "byte_3a": 0.00037257824143070045,
  "byte_b8": 0.0005588673621460507,
  "byte_05": 0.004470938897168405,
  "byte_76": 0.0005588673621460507,
  "byte_6e": 0.0007451564828614009,
  "byte_45": 0.0011177347242921013,
  "byte_99": 0.0005588673621460507,
  "byte_5a": 0.0005588673621460507,
  "byte_b2": 0.0011177347242921013,
  "byte_0e": 0.005216095380029807,
  "byte_72": 0.0005588673621460507,
  "byte_b7": 0.00018628912071535022,
  "byte_17": 0.0009314456035767511,
  "byte_f1": 0.0011177347242921013,
  "byte_94": 0.0026080476900149033,
  "byte_c0": 0.0009314456035767511,
  "byte_0b": 0.0033532041728763042,
  "byte_d4": 0.00037257824143070045,
  "byte_d8": 0.0005588673621460507,
  "byte_4d": 0.00037257824143070045,
  "byte_06": 0.005029806259314456,
  "byte_1e": 0.0009314456035767511,
  "byte_dd": 0.0007451564828614009,
  "byte_70": 0.00037257824143070045,
  "byte_42": 0.0005588673621460507,
  "byte_e4": 0.00018628912071535022,
  "byte_f2": 0.0005588673621460507,
  "byte_fd": 0.012295081967213115,
  "byte_e3": 0.0013040238450074517,
  "byte_9b": 0.0007451564828614009,
  "byte_f5": 0.00018628912071535022,
  "byte_bc": 0.00018628912071535022,
  "byte_fa": 0.00018628912071535022,
  "byte_93": 0.0046572280178837555,
  "byte_f8": 0.00037257824143070045,
  "byte_e6": 0.00018628912071535022,
  "byte_34": 0.0067064083457526085,
  "byte_d2": 0.00018628912071535022,
  "byte_50": 0.03334575260804769,
  "byte_db": 0.00037257824143070045,
  "byte_fe": 0.0009314456035767511,
  "byte_56": 0.02477645305514158,
  "byte_51": 0.00894187779433681,
  "byte_0a": 0.013971684053651267,
  "byte_82": 0.015461997019374068,
  "byte_20": 0.014344262295081968,
  "byte_f3": 0.0009314456035767511,
  "byte_1b": 0.002421758569299553,
  "byte_07": 0.0027943368107302535,
  "byte_0d": 0.0033532041728763042,
  "byte_29": 0.00037257824143070045,
  "byte_08": 0.004470938897168405,
  "byte_89": 0.0005588673621460507,
  "byte_d9": 0.0026080476900149033,
  "byte_44": 0.0020491803278688526,
  "byte_09": 0.0016766020864381521,
  "byte_3d": 0.0022354694485842027,
  "byte_91": 0.012108792846497764,
  "byte_58": 0.0007451564828614009,
  "byte_0f": 0.0013040238450074517,
  "byte_6d": 0.00018628912071535022,
  "byte_30": 0.0005588673621460507,
  "byte_df": 0.0007451564828614009,
  "byte_d1": 0.00018628912071535022,
  "byte_0c": 0.0029806259314456036,
  "byte_ef": 0.0005588673621460507,
  "byte_12": 0.004098360655737705,
  "byte_66": 0.00018628912071535022,
  "byte_1f": 0.0009314456035767511,
  "byte_85": 0.005216095380029807,
  "byte_97": 0.00037257824143070045,
  "byte_2a": 0.00018628912071535022,
  "byte_c4": 0.00037257824143070045,
  "byte_4e": 0.0005588673621460507,
  "byte_22": 0.0007451564828614009,
  "byte_86": 0.005029806259314456,
  "byte_11": 0.0037257824143070045,
  "byte_a7": 0.00037257824143070045,
  "byte_c8": 0.00018628912071535022,
  "byte_af": 0.00037257824143070045,
  "byte_e1": 0.0016766020864381521,
  "byte_55": 0.0026080476900149033,
  "byte_aa": 0.00018628912071535022,
  "byte_9c": 0.0013040238450074517,
  "byte_3b": 0.0005588673621460507,
  "byte_68": 0.0005588673621460507,
  "byte_3c": 0.0007451564828614009,
  "byte_b6": 0.00037257824143070045,
  "byte_74": 0.0009314456035767511,
  "byte_de": 0.00018628912071535022,
  "byte_19": 0.0011177347242921013,
  "byte_73": 0.00037257824143070045,
  "byte_be": 0.00037257824143070045,
  "byte_88": 0.0011177347242921013,
  "byte_67": 0.00018628912071535022,
  "byte_3f": 0.00018628912071535022,
  "byte_e2": 0.0007451564828614009,
  "byte_5c": 0.0005588673621460507,
  "byte_26": 0.00037257824143070045,
  "byte_e0": 0.0007451564828614009,
  "byte_ce": 0.00037257824143070045,
  "byte_25": 0.00018628912071535022,
  "byte_8e": 0.00018628912071535022,
  "byte_32": 0.00037257824143070045,
  "byte_6a": 0.00037257824143070045,
  "byte_a8": 0.00037257824143070045,
  "byte_c3": 0.00018628912071535022,
  "byte_cc": 0.00018628912071535022,
  "byte_47": 0.00018628912071535022,
  "byte_53": 0.00018628912071535022,
  "byte_59": 0.00037257824143070045,
  "byte_cd": 0.00018628912071535022,
  "byte_49": 0.00037257824143070045,
  "byte_da": 0.00018628912071535022,
  "byte_b4": 0.00037257824143070045,
  "byte_6f": 0.00018628912071535022,
  "byte_b9": 0.00018628912071535022,
  "byte_f9": 0.00018628912071535022,
  "byte_5e": 0.00018628912071535022,
  "byte_2d": 0.00037257824143070045,
  "byte_a1": 0.00018628912071535022,
  "byte_ac": 0.00018628912071535022,
  "byte_46": 0.00018628912071535022,
  "num_nodes": 17,
  "num_edges": 16,
  "avg_degree": 1.8823529411764706,
  "density": 0.058823529411764705,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 99,
  "event_nums": 1,
  "creation_block": 5804638,
  "creation_timestamp": 1529234549,
  "life_time": 374948.0,
  "duration_seconds": 5506974.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 18,
  "num_buyers": 15,
  "num_sellers": 3,
  "num_creator_transfers": 56,
  "buy_amt": 1.96986e+18,
  "sell_amt": 1.88402e+18,
  "avg_value": 3.85388e+16,
  "txn_per_block": 0.00026403590888360816,
  "avg_gas_limit": 269992.1111111111,
  "std_gas_limit": 993498.8593079716,
  "avg_gas_used": 16153.676767676769,
  "std_gas_used": 150031.2012190427,
  "avg_gas_price": 1868686868.6868687,
  "std_gas_price": 9199963180.25841,
  "ownershiptransferred_num": 1,
  "atinversebrah_num": 1,
  "setdth_num": 1,
  "transferownership_num": 2,
  "timeline_sequence": [
    [
      5804638,
      1529234549,
      62,
      2,
      0,
      5000000,
      35000000000,
      0,
      1,
      1777183,
      1500264,
      17316685
    ],
    [
      5804704,
      1529235455,
      72,
      4,
      0,
      5000000,
      50000000000,
      0,
      1,
      236368,
      43879,
      17316619
    ],
    [
      5804709,
      1529235517,
      73,
      2,
      0,
      5000000,
      50000000000,
      0,
      1,
      73149,
      31149,
      17316614
    ],
    [
      5804956,
      1529238988,
      92,
      4,
      0,
      5000000,
      50000000000,
      1,
      0,
      227972,
      23922,
      17316367
    ],
    [
      5858411,
      1530030547,
      0,
      0,
      100000000000000000,
      1445491,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5863555,
      1530107525,
      0,
      0,
      22290000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5863564,
      1530107653,
      0,
      0,
      77710000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5863576,
      1530107802,
      0,
      0,
      77710000000000000,
      1445491,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5865444,
      1530134627,
      0,
      0,
      77710000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5916656,
      1530893704,
      0,
      0,
      150000000000000000,
      264241,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5933646,
      1531147130,
      0,
      0,
      20110000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5933656,
      1531147215,
      0,
      0,
      200000000000000000,
      264241,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5933678,
      1531147521,
      0,
      0,
      23490000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5933681,
      1531147545,
      0,
      0,
      20100000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5933704,
      1531147861,
      0,
      0,
      20100000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5933713,
      1531147995,
      0,
      0,
      23510000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5933730,
      1531148330,
      0,
      0,
      10000000000000000,
      264241,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5933733,
      1531148391,
      0,
      0,
      89690000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5933763,
      1531148894,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5933803,
      1531149389,
      0,
      0,
      10000000000000000,
      264241,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5933921,
      1531151317,
      0,
      0,
      23580000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5933930,
      1531151456,
      0,
      0,
      89690000000000000,
      264241,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5933940,
      1531151717,
      0,
      0,
      89690000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5939917,
      1531240585,
      0,
      0,
      129420000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5940004,
      1531241976,
      0,
      0,
      129420000000000000,
      264241,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5944686,
      1531311670,
      0,
      0,
      10000000000000000,
      275116,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5944706,
      1531311898,
      0,
      0,
      139420000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5950325,
      1531392629,
      0,
      0,
      10000000000000000,
      264241,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5950335,
      1531392796,
      0,
      0,
      50000000000000000,
      280606,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5950447,
      1531394286,
      0,
      0,
      15600000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5951359,
      1531407346,
      0,
      0,
      10000000000000000,
      27991,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5951364,
      1531407436,
      0,
      0,
      10000000000000000,
      27991,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5951370,
      1531407501,
      0,
      0,
      10000000000000000,
      27991,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5951400,
      1531407987,
      0,
      0,
      100000000000000000,
      27991,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5951443,
      1531408634,
      0,
      0,
      8970000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5951581,
      1531410694,
      0,
      0,
      65810000000000000,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      5951685,
      1531411951,
      0,
      0,
      1170000000000000,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      5951707,
      1531412283,
      0,
      0,
      10000000000000000,
      27991,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5975491,
      1531755877,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5998518,
      1532097108,
      0,
      0,
      4950000000000000,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      5998623,
      1532098564,
      0,
      0,
      2480000000000000,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      5998657,
      1532099047,
      0,
      0,
      10000000000000000,
      29185,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5998661,
      1532099119,
      0,
      0,
      100000000000000000,
      34575,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5998667,
      1532099178,
      0,
      0,
      20750000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6011201,
      1532281989,
      0,
      0,
      90280000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6011224,
      1532282383,
      0,
      0,
      90280000000000000,
      32913,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6011233,
      1532282569,
      0,
      0,
      10000000000000000,
      48332,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6011434,
      1532285300,
      0,
      0,
      10000000000000000,
      38488,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6011460,
      1532285672,
      0,
      0,
      110280000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6011477,
      1532285895,
      0,
      0,
      110280000000000000,
      32913,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6011489,
      1532286064,
      0,
      0,
      20730000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6011629,
      1532288152,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6011646,
      1532288326,
      0,
      0,
      10000000000000000,
      27991,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6011655,
      1532288445,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6016629,
      1532361312,
      0,
      0,
      16640000000000000,
      42756,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6020820,
      1532423621,
      0,
      0,
      10000000000000000,
      42756,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6020886,
      1532424485,
      0,
      0,
      4300000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6022115,
      1532442790,
      0,
      0,
      89550000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6022164,
      1532443447,
      0,
      0,
      10000000000000000,
      42756,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6022209,
      1532444075,
      0,
      0,
      10000000000000000,
      42756,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6022236,
      1532444381,
      0,
      0,
      10000000000000000,
      43565,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6022257,
      1532444729,
      0,
      0,
      2420000000000000,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      6022257,
      1532444729,
      0,
      0,
      10000000000000000,
      42756,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6022308,
      1532445292,
      0,
      0,
      2080000000000000,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      6022312,
      1532445332,
      0,
      0,
      100000000000000000,
      49089,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6022321,
      1532445417,
      0,
      0,
      20420000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6022351,
      1532445786,
      0,
      0,
      10000000000000000,
      42756,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6022371,
      1532446063,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6022435,
      1532446932,
      0,
      0,
      4130000000000000,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      6022470,
      1532447450,
      0,
      0,
      20000000000000000,
      43628,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6022499,
      1532448004,
      0,
      0,
      20000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6022508,
      1532448222,
      0,
      0,
      80000000000000000,
      42756,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6027791,
      1532526324,
      0,
      0,
      20380000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6027877,
      1532527679,
      0,
      0,
      20400000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6028012,
      1532529750,
      0,
      0,
      10250000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6028233,
      1532533024,
      0,
      0,
      20660000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6028248,
      1532533216,
      0,
      0,
      4130000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6028268,
      1532533580,
      0,
      0,
      13760000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6034041,
      1532618295,
      0,
      0,
      6000000000000000,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      6034082,
      1532618912,
      0,
      0,
      30000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6034082,
      1532618912,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6034093,
      1532619058,
      0,
      0,
      30000000000000000,
      42756,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6034098,
      1532619123,
      0,
      0,
      10000000000000000,
      42756,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6034149,
      1532619838,
      0,
      0,
      100000000000000000,
      48837,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6034159,
      1532619976,
      0,
      0,
      110000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6034176,
      1532620182,
      0,
      0,
      30000000000000000,
      42756,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6062276,
      1533028469,
      0,
      0,
      5700000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6098680,
      1533559159,
      0,
      0,
      110000000000000000,
      42756,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6098682,
      1533559205,
      0,
      0,
      5570000000000000,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      6098719,
      1533559775,
      0,
      0,
      1230000000000000,
      2300,
      0,
      1,
      0,
      0,
      0,
      0
    ],
    [
      6104412,
      1533643396,
      0,
      0,
      10000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6104417,
      1533643466,
      0,
      0,
      44400000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6104418,
      1533643473,
      0,
      0,
      30000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6104420,
      1533643484,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6104424,
      1533643551,
      0,
      0,
      16640000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6104426,
      1533643565,
      0,
      0,
      80000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6104427,
      1533643570,
      0,
      0,
      110000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6104436,
      1533643823,
      0,
      0,
      30000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      6179586,
      1534741523,
      0,
      0,
      10000000000000000,
      264241,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "/// @title Contract that supports the receival of ERC223 tokens.\ncontract ERC223ReceivingContract {\n\n    /// @dev Standard ERC223 function that will handle incoming token transfers.\n    /// @param _from  Token sender address.\n    /// @param _value Amount of tokens.\n    /// @param _data  Transaction metadata.\n    function tokenFallback(address _from, uint _value, bytes _data) public;\n\n}\n\n\ncontract SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\ncontract ERC223Basic is ERC20Basic {\n\n    /**\n      * @dev Transfer the specified amount of tokens to the specified address.\n      *      Now with a new parameter _data.\n      *\n      * @param _to    Receiver address.\n      * @param _value Amount of tokens that will be transferred.\n      * @param _data  Transaction metadata.\n      */\n    function transfer(address _to, uint _value, bytes _data) public returns (bool);\n\n    /**\n      * @dev triggered when transfer is successfully called.\n      *\n      * @param _from  Sender address.\n      * @param _to    Receiver address.\n      * @param _value Amount of tokens that will be transferred.\n      * @param _data  Transaction metadata.\n      */\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _value, bytes _data);\n}\n\nlibrary BytesLib {\n    function concat(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bytes) {\n        bytes memory tempBytes;\n\n        assembly {\n            // Get a location of some free memory and store it in tempBytes as\n            // Solidity does for memory variables.\n            tempBytes := mload(0x40)\n\n            // Store the length of the first bytes array at the beginning of\n            // the memory for tempBytes.\n            let length := mload(_preBytes)\n            mstore(tempBytes, length)\n\n            // Maintain a memory counter for the current write location in the\n            // temp bytes array by adding the 32 bytes for the array length to\n            // the starting location.\n            let mc := add(tempBytes, 0x20)\n            // Stop copying when the memory counter reaches the length of the\n            // first bytes array.\n            let end := add(mc, length)\n\n            for {\n                // Initialize a copy counter to the start of the _preBytes data,\n                // 32 bytes into its memory.\n                let cc := add(_preBytes, 0x20)\n            } lt(mc, end) {\n                // Increase both counters by 32 bytes each iteration.\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                // Write the _preBytes data into the tempBytes memory 32 bytes\n                // at a time.\n                mstore(mc, mload(cc))\n            }\n\n            // Add the length of _postBytes to the current length of tempBytes\n            // and store it as the new length in the first 32 bytes of the\n            // tempBytes memory.\n            length := mload(_postBytes)\n            mstore(tempBytes, add(length, mload(tempBytes)))\n\n            // Move the memory counter back from a multiple of 0x20 to the\n            // actual end of the _preBytes data.\n            mc := end\n            // Stop copying when the memory counter reaches the new combined\n            // length of the arrays.\n            end := add(mc, length)\n\n            for {\n                let cc := add(_postBytes, 0x20)\n            } lt(mc, end) {\n                mc := add(mc, 0x20)\n                cc := add(cc, 0x20)\n            } {\n                mstore(mc, mload(cc))\n            }\n\n            // Update the free-memory pointer by padding our last write location\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\n            // next 32 byte block, then round down to the nearest multiple of\n            // 32. If the sum of the length of the two arrays is zero then add\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\n            mstore(0x40, and(\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\n              not(31) // Round down to the nearest 32 bytes.\n            ))\n        }\n\n        return tempBytes;\n    }\n\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\n        assembly {\n            // Read the first 32 bytes of _preBytes storage, which is the length\n            // of the array. (We don't need to use the offset into the slot\n            // because arrays use the entire slot.)\n            let fslot := sload(_preBytes_slot)\n            // Arrays of 31 bytes or less have an even value in their slot,\n            // while longer arrays have an odd value. The actual length is\n            // the slot divided by two for odd values, and the lowest order\n            // byte divided by two for even values.\n            // If the slot is even, bitwise and the slot with 255 and divide by\n            // two to get the length. If the slot is odd, bitwise and the slot\n            // with -1 and divide by two.\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n            let newlength := add(slength, mlength)\n            // slength can contain both the length and contents of the array\n            // if length < 32 bytes so let's prepare for that\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n            switch add(lt(slength, 32), lt(newlength, 32))\n            case 2 {\n                // Since the new array still fits in the slot, we just need to\n                // update the contents of the slot.\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\n                sstore(\n                    _preBytes_slot,\n                    // all the modifications to the slot are inside this\n                    // next block\n                    add(\n                        // we can just add to the slot contents because the\n                        // bytes we want to change are the LSBs\n                        fslot,\n                        add(\n                            mul(\n                                div(\n                                    // load the bytes from memory\n                                    mload(add(_postBytes, 0x20)),\n                                    // zero all bytes to the right\n                                    exp(0x100, sub(32, mlength))\n                                ),\n                                // and now shift left the number of bytes to\n                                // leave space for the length in the slot\n                                exp(0x100, sub(32, newlength))\n                            ),\n                            // increase length by the double of the memory\n                            // bytes length\n                            mul(mlength, 2)\n                        )\n                    )\n                )\n            }\n            case 1 {\n                // The stored value fits in the slot, but the combined value\n                // will exceed it.\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes_slot)\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\n\n                // The contents of the _postBytes array start 32 bytes into\n                // the structure. Our first read should obtain the `submod`\n                // bytes that can fit into the unused space in the last word\n                // of the stored array. To get this, we read 32 bytes starting\n                // from `submod`, so the data we read overlaps with the array\n                // contents by `submod` bytes. Masking the lowest-order\n                // `submod` bytes allows us to add that value directly to the\n                // stored value.\n\n                let submod := sub(32, slength)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(\n                    sc,\n                    add(\n                        and(\n                            fslot,\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\n                        ),\n                        and(mload(mc), mask)\n                    )\n                )\n\n                for {\n                    mc := add(mc, 0x20)\n                    sc := add(sc, 1)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n            default {\n                // get the keccak hash to get the contents of the array\n                mstore(0x0, _preBytes_slot)\n                // Start copying to the last used word of the stored array.\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\n\n                // save new length\n                sstore(_preBytes_slot, add(mul(newlength, 2), 1))\n\n                // Copy over the first `submod` bytes of the new data as in\n                // case 1 above.\n                let slengthmod := mod(slength, 32)\n                let mlengthmod := mod(mlength, 32)\n                let submod := sub(32, slengthmod)\n                let mc := add(_postBytes, submod)\n                let end := add(_postBytes, mlength)\n                let mask := sub(exp(0x100, submod), 1)\n\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\n\n                for {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } lt(mc, end) {\n                    sc := add(sc, 1)\n                    mc := add(mc, 0x20)\n                } {\n                    sstore(sc, mload(mc))\n                }\n\n                mask := exp(0x100, sub(mc, end))\n\n                sstore(sc, mul(div(mload(mc), mask), mask))\n            }\n        }\n    }\n\n    function slice(bytes _bytes, uint _start, uint _length) internal  pure returns (bytes) {\n        require(_bytes.length >= (_start + _length));\n\n        bytes memory tempBytes;\n\n        assembly {\n            switch iszero(_length)\n            case 0 {\n                // Get a location of some free memory and store it in tempBytes as\n                // Solidity does for memory variables.\n                tempBytes := mload(0x40)\n\n                // The first word of the slice result is potentially a partial\n                // word read from the original array. To read it, we calculate\n                // the length of that partial word and start copying that many\n                // bytes into the array. The first word we copy will start with\n                // data we don't care about, but the last `lengthmod` bytes will\n                // land at the beginning of the contents of the new array. When\n                // we're done copying, we overwrite the full first word with\n                // the actual length of the slice.\n                let lengthmod := and(_length, 31)\n\n                // The multiplication in the next line is necessary\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\n                // the following copy loop was copying the origin's length\n                // and then ending prematurely not copying everything it should.\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\n                let end := add(mc, _length)\n\n                for {\n                    // The multiplication in the next line has the same exact purpose\n                    // as the one above.\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\n                } lt(mc, end) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    mstore(mc, mload(cc))\n                }\n\n                mstore(tempBytes, _length)\n\n                //update free-memory pointer\n                //allocating the array padded to 32 bytes like the compiler does now\n                mstore(0x40, and(add(mc, 31), not(31)))\n            }\n            //if we want a zero-length slice let's just return a zero-length array\n            default {\n                tempBytes := mload(0x40)\n\n                mstore(0x40, add(tempBytes, 0x20))\n            }\n        }\n\n        return tempBytes;\n    }\n\n    function toAddress(bytes _bytes, uint _start) internal  pure returns (address) {\n        require(_bytes.length >= (_start + 20));\n        address tempAddress;\n\n        assembly {\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\n        }\n\n        return tempAddress;\n    }\n\n    function toUint(bytes _bytes, uint _start) internal  pure returns (uint256) {\n        require(_bytes.length >= (_start + 32));\n        uint256 tempUint;\n\n        assembly {\n            tempUint := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempUint;\n    }\n\n    function toBytes32(bytes _bytes, uint _start) internal  pure returns (bytes32) {\n        require(_bytes.length >= (_start + 32));\n        bytes32 tempBytes32;\n\n        assembly {\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes32;\n    }\n\n    function toBytes16(bytes _bytes, uint _start) internal  pure returns (bytes16) {\n        require(_bytes.length >= (_start + 16));\n        bytes16 tempBytes16;\n\n        assembly {\n            tempBytes16 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes16;\n    }\n\n    function toBytes2(bytes _bytes, uint _start) internal  pure returns (bytes2) {\n        require(_bytes.length >= (_start + 2));\n        bytes2 tempBytes2;\n\n        assembly {\n            tempBytes2 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes2;\n    }\n\n    function toBytes4(bytes _bytes, uint _start) internal  pure returns (bytes4) {\n        require(_bytes.length >= (_start + 4));\n        bytes4 tempBytes4;\n\n        assembly {\n            tempBytes4 := mload(add(add(_bytes, 0x20), _start))\n        }\n        return tempBytes4;\n    }\n\n    function toBytes1(bytes _bytes, uint _start) internal  pure returns (bytes1) {\n        require(_bytes.length >= (_start + 1));\n        bytes1 tempBytes1;\n\n        assembly {\n            tempBytes1 := mload(add(add(_bytes, 0x20), _start))\n        }\n\n        return tempBytes1;\n    }\n\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\n        bool success = true;\n\n        assembly {\n            let length := mload(_preBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(length, mload(_postBytes))\n            case 1 {\n                // cb is a circuit breaker in the for loop since there's\n                //  no said feature for inline assembly loops\n                // cb = 1 - don't breaker\n                // cb = 0 - break\n                let cb := 1\n\n                let mc := add(_preBytes, 0x20)\n                let end := add(mc, length)\n\n                for {\n                    let cc := add(_postBytes, 0x20)\n                // the next line is the loop condition:\n                // while(uint(mc < end) + cb == 2)\n                } eq(add(lt(mc, end), cb), 2) {\n                    mc := add(mc, 0x20)\n                    cc := add(cc, 0x20)\n                } {\n                    // if any of these checks fails then arrays are not equal\n                    if iszero(eq(mload(mc), mload(cc))) {\n                        // unsuccess:\n                        success := 0\n                        cb := 0\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes) internal view returns (bool) {\n        bool success = true;\n\n        assembly {\n            // we know _preBytes_offset is 0\n            let fslot := sload(_preBytes_slot)\n            // Decode the length of the stored array like in concatStorage().\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\n            let mlength := mload(_postBytes)\n\n            // if lengths don't match the arrays are not equal\n            switch eq(slength, mlength)\n            case 1 {\n                // slength can contain both the length and contents of the array\n                // if length < 32 bytes so let's prepare for that\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\n                if iszero(iszero(slength)) {\n                    switch lt(slength, 32)\n                    case 1 {\n                        // blank the last byte which is the length\n                        fslot := mul(div(fslot, 0x100), 0x100)\n\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\n                            // unsuccess:\n                            success := 0\n                        }\n                    }\n                    default {\n                        // cb is a circuit breaker in the for loop since there's\n                        //  no said feature for inline assembly loops\n                        // cb = 1 - don't breaker\n                        // cb = 0 - break\n                        let cb := 1\n\n                        // get the keccak hash to get the contents of the array\n                        mstore(0x0, _preBytes_slot)\n                        let sc := keccak256(0x0, 0x20)\n\n                        let mc := add(_postBytes, 0x20)\n                        let end := add(mc, mlength)\n\n                        // the next line is the loop condition:\n                        // while(uint(mc < end) + cb == 2)\n                        for {} eq(add(lt(mc, end), cb), 2) {\n                            sc := add(sc, 1)\n                            mc := add(mc, 0x20)\n                        } {\n                            if iszero(eq(sload(sc), mload(mc))) {\n                                // unsuccess:\n                                success := 0\n                                cb := 0\n                            }\n                        }\n                    }\n                }\n            }\n            default {\n                // unsuccess:\n                success := 0\n            }\n        }\n\n        return success;\n    }\n}\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n\ncontract DateTime {\n        /*\n         *  Date and Time utilities for ethereum contracts\n         *\n         */\n        struct _DateTime {\n                uint16 year;\n                uint8 month;\n                uint8 day;\n                uint8 hour;\n                uint8 minute;\n                uint8 second;\n                uint8 weekday;\n        }\n\n        uint constant DAY_IN_SECONDS = 86400;\n        uint constant YEAR_IN_SECONDS = 31536000;\n        uint constant LEAP_YEAR_IN_SECONDS = 31622400;\n\n        uint constant HOUR_IN_SECONDS = 3600;\n        uint constant MINUTE_IN_SECONDS = 60;\n\n        uint16 constant ORIGIN_YEAR = 1970;\n\n        function isLeapYear(uint16 year) public pure returns (bool) {\n                if (year % 4 != 0) {\n                        return false;\n                }\n                if (year % 100 != 0) {\n                        return true;\n                }\n                if (year % 400 != 0) {\n                        return false;\n                }\n                return true;\n        }\n\n        function leapYearsBefore(uint year) public pure returns (uint) {\n                year -= 1;\n                return year / 4 - year / 100 + year / 400;\n        }\n\n        function getDaysInMonth(uint8 month, uint16 year) public pure returns (uint8) {\n                if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n                        return 31;\n                }\n                else if (month == 4 || month == 6 || month == 9 || month == 11) {\n                        return 30;\n                }\n                else if (isLeapYear(year)) {\n                        return 29;\n                }\n                else {\n                        return 28;\n                }\n        }\n\n        function parseTimestamp(uint timestamp) internal pure returns (_DateTime dt) {\n                uint secondsAccountedFor = 0;\n                uint buf;\n                uint8 i;\n\n                // Year\n                dt.year = getYear(timestamp);\n                buf = leapYearsBefore(dt.year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * buf;\n                secondsAccountedFor += YEAR_IN_SECONDS * (dt.year - ORIGIN_YEAR - buf);\n\n                // Month\n                uint secondsInMonth;\n                for (i = 1; i <= 12; i++) {\n                        secondsInMonth = DAY_IN_SECONDS * getDaysInMonth(i, dt.year);\n                        if (secondsInMonth + secondsAccountedFor > timestamp) {\n                                dt.month = i;\n                                break;\n                        }\n                        secondsAccountedFor += secondsInMonth;\n                }\n\n                // Day\n                for (i = 1; i <= getDaysInMonth(dt.month, dt.year); i++) {\n                        if (DAY_IN_SECONDS + secondsAccountedFor > timestamp) {\n                                dt.day = i;\n                                break;\n                        }\n                        secondsAccountedFor += DAY_IN_SECONDS;\n                }\n\n                // Hour\n                dt.hour = getHour(timestamp);\n\n                // Minute\n                dt.minute = getMinute(timestamp);\n\n                // Second\n                dt.second = getSecond(timestamp);\n\n                // Day of week.\n                dt.weekday = getWeekday(timestamp);\n        }\n\n        function getYear(uint timestamp) public pure returns (uint16) {\n                uint secondsAccountedFor = 0;\n                uint16 year;\n                uint numLeapYears;\n\n                // Year\n                year = uint16(ORIGIN_YEAR + timestamp / YEAR_IN_SECONDS);\n                numLeapYears = leapYearsBefore(year) - leapYearsBefore(ORIGIN_YEAR);\n\n                secondsAccountedFor += LEAP_YEAR_IN_SECONDS * numLeapYears;\n                secondsAccountedFor += YEAR_IN_SECONDS * (year - ORIGIN_YEAR - numLeapYears);\n\n                while (secondsAccountedFor > timestamp) {\n                        if (isLeapYear(uint16(year - 1))) {\n                                secondsAccountedFor -= LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                secondsAccountedFor -= YEAR_IN_SECONDS;\n                        }\n                        year -= 1;\n                }\n                return year;\n        }\n\n        function getMonth(uint timestamp) public pure returns (uint8) {\n                return parseTimestamp(timestamp).month;\n        }\n\n        function getDay(uint timestamp) public pure returns (uint8) {\n                return parseTimestamp(timestamp).day;\n        }\n\n        function getHour(uint timestamp) public pure returns (uint8) {\n                return uint8((timestamp / 60 / 60) % 24);\n        }\n\n        function getMinute(uint timestamp) public pure returns (uint8) {\n                return uint8((timestamp / 60) % 60);\n        }\n\n        function getSecond(uint timestamp) public pure returns (uint8) {\n                return uint8(timestamp % 60);\n        }\n\n        function getWeekday(uint timestamp) public pure returns (uint8) {\n                return uint8((timestamp / DAY_IN_SECONDS + 4) % 7);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day) public pure returns (uint timestamp) {\n                return toTimestamp(year, month, day, 0, 0, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour) public pure returns (uint timestamp) {\n                return toTimestamp(year, month, day, hour, 0, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute) public pure returns (uint timestamp) {\n                return toTimestamp(year, month, day, hour, minute, 0);\n        }\n\n        function toTimestamp(uint16 year, uint8 month, uint8 day, uint8 hour, uint8 minute, uint8 second) public pure returns (uint timestamp) {\n                uint16 i;\n\n                // Year\n                for (i = ORIGIN_YEAR; i < year; i++) {\n                        if (isLeapYear(i)) {\n                                timestamp += LEAP_YEAR_IN_SECONDS;\n                        }\n                        else {\n                                timestamp += YEAR_IN_SECONDS;\n                        }\n                }\n\n                // Month\n                uint8[12] memory monthDayCounts;\n                monthDayCounts[0] = 31;\n                if (isLeapYear(year)) {\n                        monthDayCounts[1] = 29;\n                }\n                else {\n                        monthDayCounts[1] = 28;\n                }\n                monthDayCounts[2] = 31;\n                monthDayCounts[3] = 30;\n                monthDayCounts[4] = 31;\n                monthDayCounts[5] = 30;\n                monthDayCounts[6] = 31;\n                monthDayCounts[7] = 31;\n                monthDayCounts[8] = 30;\n                monthDayCounts[9] = 31;\n                monthDayCounts[10] = 30;\n                monthDayCounts[11] = 31;\n\n                for (i = 1; i < month; i++) {\n                        timestamp += DAY_IN_SECONDS * monthDayCounts[i - 1];\n                }\n\n                // Day\n                timestamp += DAY_IN_SECONDS * (day - 1);\n\n                // Hour\n                timestamp += HOUR_IN_SECONDS * (hour);\n\n                // Minute\n                timestamp += MINUTE_IN_SECONDS * (minute);\n\n                // Second\n                timestamp += second;\n\n                return timestamp;\n        }\n}\n\n\ncontract DetherBank is ERC223ReceivingContract, Ownable, SafeMath, DateTime {\n  using BytesLib for bytes;\n\n  /*\n   * Event\n   */\n  event receiveDth(address _from, uint amount);\n  event receiveEth(address _from, uint amount);\n  event sendDth(address _from, uint amount);\n  event sendEth(address _from, uint amount);\n\n  mapping(address => uint) public dthShopBalance;\n  mapping(address => uint) public dthTellerBalance;\n  mapping(address => uint) public ethShopBalance;\n  mapping(address => uint) public ethTellerBalance;\n\n\n  // store a mapping with per day/month/year a uint256 containing the wei sold amount on that date\n  //\n  //      user               day               month             year      weiSold\n  mapping(address => mapping(uint16 => mapping(uint16 => mapping(uint16 => uint256)))) ethSellsUserToday;\n\n  ERC223Basic public dth;\n  bool public isInit = false;\n\n  /**\n   * INIT\n   */\n  function setDth (address _dth) external onlyOwner {\n    require(!isInit);\n    dth = ERC223Basic(_dth);\n    isInit = true;\n  }\n\n  /**\n   * Core fonction\n   */\n  // withdraw DTH when teller delete\n  function withdrawDthTeller(address _receiver) external onlyOwner {\n    require(dthTellerBalance[_receiver] > 0);\n    uint tosend = dthTellerBalance[_receiver];\n    dthTellerBalance[_receiver] = 0;\n    require(dth.transfer(_receiver, tosend));\n  }\n  // withdraw DTH when shop delete\n  function withdrawDthShop(address _receiver) external onlyOwner  {\n    require(dthShopBalance[_receiver] > 0);\n    uint tosend = dthShopBalance[_receiver];\n    dthShopBalance[_receiver] = 0;\n    require(dth.transfer(_receiver, tosend));\n  }\n  // withdraw DTH when a shop add by admin is delete\n  function withdrawDthShopAdmin(address _from, address _receiver) external onlyOwner  {\n    require(dthShopBalance[_from]  > 0);\n    uint tosend = dthShopBalance[_from];\n    dthShopBalance[_from] = 0;\n    require(dth.transfer(_receiver, tosend));\n  }\n\n  // add DTH when shop register\n  function addTokenShop(address _from, uint _value) external onlyOwner {\n    dthShopBalance[_from] = SafeMath.add(dthShopBalance[_from], _value);\n  }\n  // add DTH when token register\n  function addTokenTeller(address _from, uint _value) external onlyOwner{\n    dthTellerBalance[_from] = SafeMath.add(dthTellerBalance[_from], _value);\n  }\n  // add ETH for escrow teller\n  function addEthTeller(address _from, uint _value) external payable onlyOwner returns (bool) {\n    ethTellerBalance[_from] = SafeMath.add(ethTellerBalance[_from] ,_value);\n    return true;\n  }\n  // helper function to extra date info from block.timestamp\n  function getDateInfo(uint timestamp) internal view returns(_DateTime) {\n    // use DateTime.sol to extract date info from the timestamp\n    _DateTime memory date = parseTimestamp(timestamp);\n    return date;\n  }\n  // withdraw ETH for teller escrow + save amount sold today for the _from user\n  function withdrawEth(address _from, address _to, uint _amount) external onlyOwner {\n    require(ethTellerBalance[_from] >= _amount);\n    ethTellerBalance[_from] = SafeMath.sub(ethTellerBalance[_from], _amount);\n\n    uint256 weiSoldToday = getWeiSoldToday(_from);\n\n    _DateTime memory date = getDateInfo(block.timestamp);\n\n    // add the sold amount, should not exceed daily limit (checked in DetherCore)\n    ethSellsUserToday[_from][date.day][date.month][date.year] = SafeMath.add(weiSoldToday, _amount);\n\n    _to.transfer(_amount);\n  }\n  // refund all ETH from teller contract\n  function refundEth(address _from) external onlyOwner {\n    uint toSend = ethTellerBalance[_from];\n    if (toSend > 0) {\n      ethTellerBalance[_from] = 0;\n      _from.transfer(toSend);\n    }\n  }\n\n  /**\n   * GETTER\n   */\n  function getDthTeller(address _user) public view returns (uint) {\n    return dthTellerBalance[_user];\n  }\n  function getDthShop(address _user) public view returns (uint) {\n    return dthShopBalance[_user];\n  }\n\n  function getEthBalTeller(address _user) public view returns (uint) {\n    return ethTellerBalance[_user];\n  }\n\n  // get amount wei sold today for this user\n  function getWeiSoldToday(address _user) public view returns (uint256 weiSoldToday) {\n    // use DateTime.sol to extract date info from the timestamp\n    _DateTime memory date = getDateInfo(block.timestamp);\n    weiSoldToday = ethSellsUserToday[_user][date.day][date.month][date.year];\n  }\n\n  /// @dev Standard ERC223 function that will handle incoming token transfers.\n  // DO NOTHING but allow to receive token when addToken* function are called\n  // by the dethercore contract\n  function tokenFallback(address _from, uint _value, bytes _data) {\n    require(msg.sender == address(dth));\n  }\n\n}"
}