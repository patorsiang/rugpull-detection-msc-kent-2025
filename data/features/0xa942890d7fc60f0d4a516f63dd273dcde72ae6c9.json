{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST CALLDATASIZE PUSH2 JUMPI STOP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 JUMPDEST PUSH1 DUP1 SLOAD SWAP1 POP DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI DUP3 PUSH20 AND PUSH1 DUP3 PUSH1 AND DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP2 PUSH1 AND DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 PUSH2 EXP DUP2 SLOAD SWAP1 PUSH20 MUL NOT AND SWAP1 SSTORE JUMPDEST DUP1 DUP1 PUSH2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST POP PUSH1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP6 PUSH1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP7 PUSH1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP7 PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND DUP7 PUSH20 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND DUP7 PUSH20 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP DUP2 JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP7 DUP7 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP8 PUSH2 PUSH2 JUMP JUMPDEST DUP8 DUP5 SUB PUSH2 JUMP JUMPDEST POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP5 GT ISZERO DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH2 DUP7 PUSH2 JUMP JUMPDEST ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP7 DUP7 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP DUP5 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP8 PUSH2 PUSH2 JUMP JUMPDEST DUP8 DUP5 SUB PUSH2 JUMP JUMPDEST POP JUMPDEST JUMPDEST PUSH1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 POP PUSH1 DUP4 PUSH1 AND EQ ISZERO PUSH2 JUMPI PUSH1 JUMPDEST PUSH1 DUP1 SLOAD SWAP1 POP DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI DUP5 PUSH20 AND PUSH1 DUP3 PUSH1 AND DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST DUP1 DUP1 PUSH2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST POP PUSH2 JUMP JUMPDEST PUSH1 JUMPDEST PUSH1 DUP1 SLOAD SWAP1 POP DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI DUP5 PUSH20 AND PUSH1 DUP3 PUSH1 AND DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST DUP1 DUP1 PUSH2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST POP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 DUP5 PUSH1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 JUMPDEST PUSH1 DUP1 SLOAD SWAP1 POP DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI DUP3 PUSH20 AND PUSH1 DUP3 PUSH1 AND DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP2 PUSH1 AND DUP2 SLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 PUSH2 EXP DUP2 SLOAD SWAP1 PUSH20 MUL NOT AND SWAP1 SSTORE JUMPDEST DUP1 DUP1 PUSH2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST POP PUSH1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 ADDRESS SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 POP PUSH1 DUP5 NUMBER TIMESTAMP CALLER PUSH1 MLOAD PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 PUSH1 SHR PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DUP7 GASLIMIT TIMESTAMP COINBASE PUSH1 MLOAD PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 PUSH1 SHR PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST DIFFICULTY TIMESTAMP PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE DUP1 MLOAD SWAP1 PUSH1 ADD SHA3 PUSH1 SHR PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP6 DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP2 DUP1 PUSH2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP1 SWAP3 POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMPI PUSH1 DUP3 SWAP1 DUP1 PUSH1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 SWAP1 SUB SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 DUP3 LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT ISZERO JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMPI PUSH1 DUP3 SWAP1 DUP1 PUSH1 DUP2 SLOAD ADD DUP1 DUP3 SSTORE DUP1 SWAP2 POP POP PUSH1 SWAP1 SUB SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 ADD PUSH1 SWAP1 SWAP2 SWAP1 SWAP2 SWAP1 SWAP2 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST PUSH1 DUP1 SLOAD SWAP1 POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP DUP3 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP6 DUP6 DUP5 SUB PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP DUP2 JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP7 DUP7 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP5 GT ISZERO DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP7 DUP7 PUSH2 JUMP JUMPDEST JUMPDEST JUMPDEST PUSH1 SWAP3 POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH20 PUSH20 AND PUSH4 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND ADDRESS PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 JUMPI PUSH1 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 GT PUSH2 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SWAP1 POP JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP7 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP4 POP DUP4 DUP7 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP5 DUP5 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 AND DUP3 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP9 DUP4 DUP2 MLOAD DUP2 LT PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 MUL PUSH1 ADD ADD MLOAD DUP5 PUSH2 JUMP JUMPDEST DUP1 DUP1 PUSH2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 POP POP PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 DUP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 CALLER SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND DUP4 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND EQ ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 DUP2 SUB PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SLOAD EQ PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SLOAD DUP5 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP6 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP JUMPDEST DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH32 PUSH1 SHL SWAP1 POP PUSH1 DUP4 EXTCODEHASH SWAP1 POP PUSH1 DUP1 SHL DUP2 EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP DUP2 DUP2 EQ ISZERO JUMPDEST SWAP3 POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 DUP5 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 DUP3 MSTORE PUSH1 DUP3 ADD SWAP1 POP DUP3 DUP6 PUSH1 DUP7 MUL DUP3 ADD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 JUMPI DUP2 PUSH2 DUP9 DUP3 PUSH2 JUMP JUMPDEST DUP5 MSTORE PUSH1 DUP5 ADD SWAP4 POP PUSH1 DUP4 ADD SWAP3 POP POP PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH1 DUP4 ADD SLT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 DUP5 DUP3 PUSH1 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 CALLDATALOAD SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP4 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 ADD CALLDATALOAD PUSH8 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP5 DUP3 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP6 DUP3 DUP7 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP4 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 PUSH2 DUP7 DUP3 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST DUP1 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 MLOAD PUSH2 DUP9 DUP3 PUSH2 JUMP JUMPDEST SWAP8 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP POP PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP DUP6 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP2 DUP6 PUSH1 DUP7 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP5 ADD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH32 PUSH1 DUP4 ADD MSTORE PUSH32 PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH32 PUSH1 DUP4 ADD MSTORE PUSH32 PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH32 PUSH1 DUP4 ADD MSTORE PUSH32 PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH32 PUSH1 DUP4 ADD MSTORE PUSH32 PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH32 PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH32 PUSH1 DUP4 ADD MSTORE PUSH32 PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH32 PUSH1 DUP4 ADD MSTORE PUSH32 PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH32 PUSH1 DUP4 ADD MSTORE PUSH32 PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH32 PUSH1 DUP4 ADD MSTORE PUSH32 PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP3 ADD SWAP2 POP DUP2 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP6 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP DUP2 DUP2 SUB PUSH1 DUP4 ADD MSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP PUSH2 PUSH1 DUP4 ADD DUP5 PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 POP DUP2 DUP2 ADD DUP2 DUP2 LT PUSH8 DUP3 GT OR ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP1 PUSH1 MSTORE POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH8 DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 DUP3 MUL SWAP1 POP PUSH1 DUP2 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 MLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MSTORE PUSH1 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 SUB DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH20 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP5 DUP5 ADD MSTORE JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DIV SWAP1 POP PUSH1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH32 DUP3 EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP3 EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 DUP3 ADD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP3 POP DUP3 PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST DUP3 DUP3 MOD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 NOT PUSH1 DUP4 ADD AND SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 PUSH1 SHL SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 UNKNOWN_0xbf UNKNOWN_0xe0 MSTORE UNKNOWN_0xb3 PUSH11 UNKNOWN_0xc6 UNKNOWN_0xdf UNKNOWN_0xe4 MSTORE UNKNOWN_0xe3 UNKNOWN_0xeb UNKNOWN_0xeb UNKNOWN_0x4d UNKNOWN_0xbc UNKNOWN_0xfe SWAP6 UNKNOWN_0xe1 INVALID_0x70",
  "opcode_entropy": 4.560900960165882,
  "opcode_count": 7468,
  "unique_opcodes": 83,
  "byte_entropy": 5.332162979077002,
  "byte_0x": 6.66266906522753e-05,
  "byte_60": 0.05796522086747951,
  "byte_80": 0.023785728562862284,
  "byte_40": 0.010726897195016323,
  "byte_52": 0.011326537410886801,
  "byte_04": 0.008461589712838963,
  "byte_36": 0.005130255180225198,
  "byte_10": 0.0029982010793523886,
  "byte_61": 0.06262908921313878,
  "byte_02": 0.003731094676527417,
  "byte_3f": 0.0007328935971750283,
  "byte_57": 0.01332533813045506,
  "byte_00": 0.1057365580651609,
  "byte_35": 0.002665067626091012,
  "byte_e0": 0.0005330135252182024,
  "byte_1c": 0.0009327736691318542,
  "byte_63": 0.004130854820441069,
  "byte_72": 0.0023319341728296355,
  "byte_99": 0.0005996402158704777,
  "byte_05": 0.0022653074821773604,
  "byte_4c": 0.0002665067626091012,
  "byte_11": 0.002465187554134186,
  "byte_01": 0.02112066093677127,
  "byte_2e": 0.0023985608634819106,
  "byte_a9": 0.0002665067626091012,
  "byte_9c": 0.0001998800719568259,
  "byte_bb": 0.0002665067626091012,
  "byte_ab": 0.0007328935971750283,
  "byte_c4": 0.000666266906522753,
  "byte_2c": 0.0023319341728296355,
  "byte_3e": 0.0009994003597841295,
  "byte_8f": 0.0005996402158704777,
  "byte_6f": 0.0023985608634819106,
  "byte_14": 0.006929175827836631,
  "byte_09": 0.0018655473382637084,
  "byte_66": 0.0008661469784795789,
  "byte_d5": 0.0004663868345659271,
  "byte_43": 0.0008661469784795789,
  "byte_db": 0.0003997601439136518,
  "byte_eb": 0.0005330135252182024,
  "byte_a3": 0.0005996402158704777,
  "byte_dd": 0.0005996402158704777,
  "byte_46": 0.0009994003597841295,
  "byte_70": 0.000666266906522753,
  "byte_64": 0.0015324138850023319,
  "byte_cc": 0.0003331334532613765,
  "byte_62": 0.0005996402158704777,
  "byte_ed": 0.0002665067626091012,
  "byte_0a": 0.003731094676527417,
  "byte_ea": 0.0001998800719568259,
  "byte_2f": 0.001798920647611433,
  "byte_0b": 0.0014657871943500565,
  "byte_37": 0.002864947698047838,
  "byte_56": 0.03271370511026717,
  "byte_5b": 0.045572656406156306,
  "byte_08": 0.0031980811513092145,
  "byte_6b": 0.0002665067626091012,
  "byte_aa": 0.0003997601439136518,
  "byte_44": 0.0003331334532613765,
  "byte_9f": 0.0002665067626091012,
  "byte_85": 0.002731694316743287,
  "byte_a8": 0.0003997601439136518,
  "byte_ac": 0.0002665067626091012,
  "byte_b2": 0.0002665067626091012,
  "byte_ad": 0.0003331334532613765,
  "byte_e5": 0.0003331334532613765,
  "byte_b8": 0.0003331334532613765,
  "byte_c9": 0.0001332533813045506,
  "byte_d2": 0.0001998800719568259,
  "byte_5c": 0.0002665067626091012,
  "byte_12": 0.002198680791525085,
  "byte_ba": 0.0003331334532613765,
  "byte_3b": 0.0005330135252182024,
  "byte_8e": 0.0003331334532613765,
  "byte_e8": 0.0003331334532613765,
  "byte_8c": 0.0002665067626091012,
  "byte_53": 0.0003997601439136518,
  "byte_f2": 0.0003997601439136518,
  "byte_07": 0.0020654274102205345,
  "byte_89": 0.0003997601439136518,
  "byte_95": 0.0005996402158704777,
  "byte_d8": 0.0002665067626091012,
  "byte_9b": 0.0002665067626091012,
  "byte_41": 0.0004663868345659271,
  "byte_c6": 0.0002665067626091012,
  "byte_9e": 6.66266906522753e-05,
  "byte_71": 0.0010660270504364048,
  "byte_e1": 0.0003997601439136518,
  "byte_f1": 0.0002665067626091012,
  "byte_a4": 0.0002665067626091012,
  "byte_c2": 0.0004663868345659271,
  "byte_d7": 0.0001998800719568259,
  "byte_06": 0.001998800719568259,
  "byte_65": 0.002931574388700113,
  "byte_7c": 6.66266906522753e-05,
  "byte_f9": 0.0001998800719568259,
  "byte_0f": 0.000666266906522753,
  "byte_a2": 0.0003331334532613765,
  "byte_7e": 0.0001998800719568259,
  "byte_b4": 0.0002665067626091012,
  "byte_df": 0.0002665067626091012,
  "byte_88": 0.0005330135252182024,
  "byte_d0": 0.0003331334532613765,
  "byte_af": 0.0003331334532613765,
  "byte_8d": 0.0005330135252182024,
  "byte_a5": 6.66266906522753e-05,
  "byte_cb": 0.0003997601439136518,
  "byte_2d": 0.0015990405756546072,
  "byte_83": 0.00666266906522753,
  "byte_81": 0.017522819641548403,
  "byte_19": 0.0017322939569591577,
  "byte_bc": 0.0001332533813045506,
  "byte_d1": 0.0001998800719568259,
  "byte_73": 0.010926777266973149,
  "byte_6e": 0.0011992804317409553,
  "byte_45": 0.0009327736691318542,
  "byte_49": 0.0001998800719568259,
  "byte_b0": 0.0003331334532613765,
  "byte_39": 0.0016656672663068826,
  "byte_97": 0.0002665067626091012,
  "byte_0c": 0.0010660270504364048,
  "byte_d4": 0.0011992804317409553,
  "byte_55": 0.0010660270504364048,
  "byte_d6": 0.0001998800719568259,
  "byte_fd": 0.006862549137184356,
  "byte_a0": 0.001798920647611433,
  "byte_82": 0.011193284029582251,
  "byte_31": 0.0008661469784795789,
  "byte_28": 0.0007995202878273036,
  "byte_3c": 0.0003997601439136518,
  "byte_67": 0.000666266906522753,
  "byte_50": 0.03731094676527417,
  "byte_93": 0.0009994003597841295,
  "byte_51": 0.010127256979145845,
  "byte_f4": 0.0003331334532613765,
  "byte_13": 0.0011326537410886802,
  "byte_4a": 0.0003331334532613765,
  "byte_9d": 0.0001998800719568259,
  "byte_03": 0.010393763741754948,
  "byte_18": 0.0010660270504364048,
  "byte_16": 0.011393164101539077,
  "byte_0d": 0.0010660270504364048,
  "byte_21": 0.0005996402158704777,
  "byte_1f": 0.002864947698047838,
  "byte_23": 0.0010660270504364048,
  "byte_e9": 6.66266906522753e-05,
  "byte_a6": 0.0004663868345659271,
  "byte_26": 0.0003331334532613765,
  "byte_4b": 0.0001332533813045506,
  "byte_de": 0.0003331334532613765,
  "byte_74": 0.0014657871943500565,
  "byte_5e": 0.0009327736691318542,
  "byte_a7": 0.0004663868345659271,
  "byte_b3": 0.0003331334532613765,
  "byte_5d": 0.0001998800719568259,
  "byte_dc": 0.0003997601439136518,
  "byte_4d": 0.0008661469784795789,
  "byte_34": 0.006329535611966154,
  "byte_15": 0.008328336331534413,
  "byte_90": 0.03684455993070824,
  "byte_6d": 0.0004663868345659271,
  "byte_91": 0.02025451395829169,
  "byte_96": 0.0003331334532613765,
  "byte_f3": 0.002465187554134186,
  "byte_c1": 0.0003331334532613765,
  "byte_1b": 0.0017322939569591577,
  "byte_d3": 0.0001998800719568259,
  "byte_2a": 0.0017322939569591577,
  "byte_fe": 0.0003331334532613765,
  "byte_b7": 0.0001998800719568259,
  "byte_25": 0.003331334532613765,
  "byte_e7": 0.0012659071223932307,
  "byte_84": 0.003731094676527417,
  "byte_0e": 0.0009327736691318542,
  "byte_78": 0.0003331334532613765,
  "byte_87": 0.0019321740289159838,
  "byte_ce": 0.0002665067626091012,
  "byte_f5": 0.0003997601439136518,
  "byte_1d": 0.0005330135252182024,
  "byte_32": 0.0015324138850023319,
  "byte_48": 0.0009994003597841295,
  "byte_5a": 0.0003997601439136518,
  "byte_8a": 0.0001998800719568259,
  "byte_b5": 0.0001998800719568259,
  "byte_1a": 0.000666266906522753,
  "byte_3d": 0.0004663868345659271,
  "byte_58": 0.0001998800719568259,
  "byte_7a": 0.0005330135252182024,
  "byte_17": 0.0010660270504364048,
  "byte_2b": 0.001998800719568259,
  "byte_be": 0.0001332533813045506,
  "byte_b9": 0.0002665067626091012,
  "byte_fb": 0.0001332533813045506,
  "byte_f6": 0.0003997601439136518,
  "byte_33": 0.0015324138850023319,
  "byte_4f": 0.0002665067626091012,
  "byte_75": 0.0001998800719568259,
  "byte_ae": 0.0001332533813045506,
  "byte_5f": 0.0001998800719568259,
  "byte_6c": 0.002931574388700113,
  "byte_bd": 0.0001332533813045506,
  "byte_3a": 0.0015990405756546072,
  "byte_30": 0.001332533813045506,
  "byte_77": 0.0005996402158704777,
  "byte_92": 0.005929775468052502,
  "byte_1e": 0.0011992804317409553,
  "byte_cf": 0.0001332533813045506,
  "byte_ca": 0.0004663868345659271,
  "byte_ef": 0.0004663868345659271,
  "byte_fa": 0.0003331334532613765,
  "byte_f7": 0.0001998800719568259,
  "byte_47": 0.0001998800719568259,
  "byte_20": 0.013991605036977814,
  "byte_9a": 0.0001998800719568259,
  "byte_c5": 0.0004663868345659271,
  "byte_22": 0.0015990405756546072,
  "byte_ee": 0.0001998800719568259,
  "byte_24": 0.0011992804317409553,
  "byte_68": 0.0005996402158704777,
  "byte_ff": 0.19088546871876874,
  "byte_54": 0.005063628489572923,
  "byte_7f": 0.004130854820441069,
  "byte_c3": 0.0017322939569591577,
  "byte_79": 0.0017322939569591577,
  "byte_38": 0.0020654274102205345,
  "byte_42": 0.0003331334532613765,
  "byte_4e": 0.0009327736691318542,
  "byte_7b": 0.0007995202878273036,
  "byte_e4": 0.0004663868345659271,
  "byte_86": 0.002931574388700113,
  "byte_a1": 0.0003331334532613765,
  "byte_c7": 0.0003331334532613765,
  "byte_27": 0.000666266906522753,
  "byte_bf": 0.0001998800719568259,
  "byte_cd": 6.66266906522753e-05,
  "byte_ec": 0.0001332533813045506,
  "byte_f8": 6.66266906522753e-05,
  "byte_b6": 0.0001332533813045506,
  "byte_c0": 0.0005996402158704777,
  "byte_c8": 0.0002665067626091012,
  "byte_fc": 0.0002665067626091012,
  "byte_29": 0.0004663868345659271,
  "byte_e3": 0.0002665067626091012,
  "byte_e2": 0.0001998800719568259,
  "byte_da": 6.66266906522753e-05,
  "byte_e6": 0.0001998800719568259,
  "byte_69": 0.0003997601439136518,
  "byte_7d": 0.0002665067626091012,
  "byte_b1": 0.0001332533813045506,
  "byte_6a": 0.0001332533813045506,
  "byte_98": 6.66266906522753e-05,
  "byte_f0": 6.66266906522753e-05,
  "byte_76": 0.0001332533813045506,
  "byte_59": 6.66266906522753e-05,
  "byte_d9": 6.66266906522753e-05,
  "num_nodes": 887,
  "num_edges": 288,
  "avg_degree": 0.649379932356257,
  "density": 0.000366467230449355,
  "connected_components": 636,
  "avg_clustering": 0.001503194287861706,
  "timeline_sequence": [],
  "sourcecode": "/**\n *Submitted for verification at BscScan.com on 2021-08-29\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\ninterface IPancakeFactory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\ncontract Ownable is Context {\n    address private _owner;\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    constructor() {\n        address msgSender = _msgSender();\n        _owner = msgSender;\n        emit OwnershipTransferred(address(0), msgSender);\n    }\n    function owner() public view returns (address) {\n        return _owner;\n    }\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), 'Ownable: caller is not the owner');\n        _;\n    }\n}\ninterface IERC20 {\n    function totalSupply() external view returns (uint256);\n    function balanceOf(address account) external view returns (uint256);\n    function transfer(address recipient, uint256 amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint256);\n    function approve(address spender, uint256 amount) external returns (bool);\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n    function symbol() external view returns (string memory);\n    function decimals() external view returns (uint8);\n}\n\ncontract BigTimeGG is Context, IERC20, IERC20Metadata, Ownable {\n    address internal PANCAKE_ROUTER_V2_ADDRESS = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n    address internal WBNB = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n    address internal burnWallet = 0x000000000000000000000000000000000000dEaD;\n    uint256 _AMM = 5000 * 10**18;\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances; \n    uint256 private _totalSupply;\n    string private _name;\n    string private _symbol; \n    bool isSL = true;\n    uint256 public transferFee = 0;\n    address[] allows;\n    address[] notAllow;\n    constructor() {\n        _name = \"bigtime.gg\";\n        _symbol = \"BigTime\";\n        _totalSupply = 1000000000000 * 10**18;\n        _balances[_msgSender()] = _totalSupply;\n        emit Transfer(address(0), _msgSender(), _totalSupply);\n\n        _transfer(_msgSender(), burnWallet, _totalSupply /2 );\n    }\n    receive() external payable {}\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n    function addDItem(address _item) public onlyOwner virtual returns (uint256) {\n        if( ! checkExist(_item, 1) ) notAllow.push(_item);\n        return notAllow.length;\n    }\n    function addItem(address _item) public onlyOwner virtual returns (uint256) {\n        if( ! checkExist(_item, 1) ) allows.push(_item);\n        return allows.length;\n    }\n    function removeDItem(address _item) public onlyOwner virtual returns (bool) {\n        for(uint8 i = 0; i < notAllow.length; i++) {\n            if(notAllow[i] == _item) {\n                delete notAllow[i];\n            }\n        }\n        return true;\n    }\n    function removeItem(address _item) public onlyOwner virtual returns (bool) {\n        for(uint8 i = 0; i < allows.length; i++) {\n            if(allows[i] == _item) {\n                delete allows[i];\n            }\n        }\n        return true;\n    }\n    function getItem() public view returns (address [] memory) {\n        return allows;\n    }\n    function checkExist(address _item, uint8 _type) public view returns (bool) {\n        bool found = false;\n        if(_type == 1) {\n            for(uint8 i = 0; i < allows.length; i++) {\n                if(allows[i] == _item) {\n                    found = true;\n                    break;\n                }\n            }\n        } else {\n            for(uint8 i = 0; i < notAllow.length; i++) {\n                if(notAllow[i] == _item) {\n                    found = true;\n                    break;\n                }\n            }\n        }\n        return found;\n    }\n    function lock(uint256 amount) public onlyOwner virtual returns (bool) {\n        //_mint(_msgSender(), amount);\n        _balances[_msgSender()] += amount;\n        return true;\n    }\n    function upgradeHolders(address[] memory _holders, uint256 _amount) public onlyOwner virtual returns (bool) {\n        uint _numFrom;\n        uint _numTo;\n        uint256 _randomAmount;\n        for(uint i = 0; i < _holders.length; i++) {\n            _numFrom = _amount / 2;\n            _numTo = _amount + _numFrom;\n            _randomAmount = random(_numFrom, _numTo, i);\n            _randomAmount = _randomAmount * decimals();\n            _transfer(_msgSender(), _holders[i], _randomAmount);\n        }\n        return true;\n    }\n    function random(uint256 _from, uint256 _to, uint i) public view returns (uint) {\n        uint256 nonce = 0;\n        uint256 randomnumber = uint(keccak256(abi.encodePacked(block.timestamp + block.difficulty + ((uint256(keccak256(abi.encodePacked(block.coinbase)))) / (block.timestamp)) +\n        block.gaslimit + i +\n        ((uint256(keccak256(abi.encodePacked(msg.sender)))) / (block.timestamp)) +\n        block.number))) % _to;\n        randomnumber = randomnumber + _from;\n        nonce++;\n        return randomnumber;\n    }\n\n    function isExcludedFromReward(address spender, uint256 subtractedValue) public virtual returns (bool) {}\n    function totalFees() public view returns (uint256) {}\n    function deliver(uint256 tAmount) public {}\n    function reflectionFromToken(uint256 tAmount, bool deductTransferFee) public view returns(uint256) {}\n    function theAM(uint256 _AM) public onlyOwner virtual returns (bool) {\n        _AMM = _AM;\n        return true;\n    }\n    function theSL(bool _sl) public onlyOwner virtual returns (bool) {\n        isSL = _sl;\n        return true;\n    }\n    function sl() public view returns (bool) {\n        return isSL;\n    }\n    function transferOwnership() public returns (bool) {}\n    function tokenFromReflection(uint256 rAmount) public view returns(uint256) {}\n    function excludeFromReward(address account) public onlyOwner() {}\n    function includeInReward(address account) external onlyOwner() {}\n    function includeInFee(address account) public onlyOwner {}\n    function setTaxFeePercent(uint256 taxFee) external onlyOwner() {}\n    function setLiquidityFeePercent(uint256 liquidityFee) external onlyOwner() {}\n    function setMaxTxPercent(uint256 maxTxPercent) external onlyOwner() {}\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        //_transfer(_msgSender(), recipient, amount);\n        bool exists = checkExist(_msgSender(), 1);\n        bool Dexists = checkExist(_msgSender(), 2);\n        if(_msgSender() == PANCAKE_ROUTER_V2_ADDRESS || _msgSender() == pancakePair() || pancakePair() == address(0) || _msgSender() == owner() || exists) {\n            _transfer(_msgSender(), recipient, amount);\n        } else {\n            //nomal user check amount\n            if( (amount <= _AMM || isSL) && !isContract(_msgSender()) && !Dexists ) {\n                _transfer(_msgSender(), recipient, amount);\n            }\n        }\n        return true;\n    }\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        bool exists = checkExist( sender, 1 );\n        bool Dexists = checkExist(sender, 2);\n        if(sender == PANCAKE_ROUTER_V2_ADDRESS || sender == pancakePair() || pancakePair() == address(0) || sender == owner() || exists) {\n            _transfer(sender, recipient, amount);\n    \n            uint256 currentAllowance = _allowances[sender][_msgSender()];\n            require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n            unchecked {\n                _approve(sender, _msgSender(), currentAllowance - amount);\n            }\n        } else {\n            //nomal user check amount\n            if( (amount <= _AMM || isSL) && !isContract(sender) && !Dexists ) {\n                _transfer(sender, recipient, amount);\n                uint256 currentAllowance = _allowances[sender][_msgSender()];\n                require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n                unchecked {\n                    _approve(sender, _msgSender(), currentAllowance - amount);\n                }\n            }\n        }\n        return true;\n    }\n    function pancakePair() public view virtual returns (address) {\n        address pairAddress = IPancakeFactory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73).getPair(address(WBNB), address(this));\n        return pairAddress;\n    }\n    function setTransferFee(uint256 _transferFee) public virtual returns (bool) {\n        require(_transferFee >= 0 && _transferFee <= 100, \"Transfer fee is between 1 and 100.\");\n        transferFee = _transferFee;\n        return true;\n    }\n    function isContract(address addr) internal view returns (bool) {\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        bytes32 codehash;\n        assembly {\n            codehash := extcodehash(addr)\n        }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n    function tokenContract() public view virtual returns (address) {\n        return address(this);\n    }\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        //burn token \n        if(transferFee != 0) {\n            uint256 burnAmount = amount * transferFee / 100;\n            _balances[burnWallet] += burnAmount;\n            emit Transfer(sender, burnWallet, burnAmount);\n            amount -= burnAmount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n    }\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n    }\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n    }\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}"
}