{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ DUP1 PUSH2 JUMPI POP PUSH3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD TIMESTAMP SUB LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP TIMESTAMP PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 SWAP1 POP PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 CALLER DUP5 DUP5 PUSH1 MLOAD DUP5 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH32 CALLER DUP4 PUSH2 CALLER PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 JUMP JUMPDEST PUSH32 PUSH3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST PUSH2 JUMP JUMPDEST PUSH32 CALLER PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST PUSH2 JUMP JUMPDEST PUSH32 CALLER PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SUB SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ PUSH2 JUMPI PUSH3 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD PUSH2 JUMP JUMPDEST TIMESTAMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH32 DUP3 DUP3 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH2 JUMP JUMPDEST PUSH32 DUP3 PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH32 DUP3 PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xf6 UNKNOWN_0xd5 PUSH29 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.673011203687083,
  "opcode_count": 1569,
  "unique_opcodes": 55,
  "byte_entropy": 4.243484921375899,
  "byte_60": 0.0548885077186964,
  "byte_80": 0.0254839500122519,
  "byte_40": 0.0078412153883852,
  "byte_52": 0.0156824307767704,
  "byte_04": 0.007106101445724087,
  "byte_36": 0.0019603038470963,
  "byte_10": 0.001470227885322225,
  "byte_61": 0.018132810585640775,
  "byte_00": 0.037980887037490814,
  "byte_99": 0.0002450379808870375,
  "byte_57": 0.008821367311933349,
  "byte_35": 0.0022053418279833373,
  "byte_7c": 0.00098015192354815,
  "byte_01": 0.02425876010781671,
  "byte_90": 0.027934329821122275,
  "byte_63": 0.0044106836559666745,
  "byte_ff": 0.43567753001715265,
  "byte_16": 0.02327860818426856,
  "byte_3a": 0.0007351139426611125,
  "byte_f3": 0.0026954177897574125,
  "byte_2a": 0.000490075961774075,
  "byte_bf": 0.0007351139426611125,
  "byte_14": 0.004165645675079637,
  "byte_06": 0.0026954177897574125,
  "byte_25": 0.0002450379808870375,
  "byte_51": 0.008086253369272238,
  "byte_29": 0.0022053418279833373,
  "byte_0d": 0.0007351139426611125,
  "byte_65": 0.00098015192354815,
  "byte_4d": 0.000490075961774075,
  "byte_59": 0.0007351139426611125,
  "byte_33": 0.00490075961774075,
  "byte_d7": 0.000490075961774075,
  "byte_93": 0.0012251899044351876,
  "byte_ac": 0.0002450379808870375,
  "byte_2e": 0.000490075961774075,
  "byte_41": 0.000490075961774075,
  "byte_07": 0.002450379808870375,
  "byte_bb": 0.0002450379808870375,
  "byte_42": 0.00098015192354815,
  "byte_e2": 0.000490075961774075,
  "byte_ae": 0.0002450379808870375,
  "byte_85": 0.0002450379808870375,
  "byte_ca": 0.000490075961774075,
  "byte_28": 0.000490075961774075,
  "byte_f1": 0.000490075961774075,
  "byte_a1": 0.0022053418279833373,
  "byte_dc": 0.000490075961774075,
  "byte_f0": 0.000490075961774075,
  "byte_5a": 0.0012251899044351876,
  "byte_a3": 0.0002450379808870375,
  "byte_34": 0.002450379808870375,
  "byte_08": 0.00294045577064445,
  "byte_3f": 0.000490075961774075,
  "byte_f5": 0.00098015192354815,
  "byte_45": 0.0002450379808870375,
  "byte_75": 0.00098015192354815,
  "byte_d6": 0.0002450379808870375,
  "byte_96": 0.0002450379808870375,
  "byte_fa": 0.0002450379808870375,
  "byte_50": 0.025728987993138937,
  "byte_8d": 0.00098015192354815,
  "byte_3e": 0.0007351139426611125,
  "byte_e3": 0.001470227885322225,
  "byte_5b": 0.016172506738544475,
  "byte_03": 0.010046557216368537,
  "byte_73": 0.022053418279833373,
  "byte_81": 0.020828228375398185,
  "byte_20": 0.023768684146042638,
  "byte_54": 0.006616025483950012,
  "byte_11": 0.0012251899044351876,
  "byte_15": 0.0098015192354815,
  "byte_05": 0.00294045577064445,
  "byte_bd": 0.000490075961774075,
  "byte_fc": 0.0007351139426611125,
  "byte_62": 0.00098015192354815,
  "byte_27": 0.00098015192354815,
  "byte_d3": 0.000490075961774075,
  "byte_02": 0.001470227885322225,
  "byte_0a": 0.00294045577064445,
  "byte_09": 0.0019603038470963,
  "byte_91": 0.011516785101690762,
  "byte_56": 0.007106101445724087,
  "byte_a8": 0.0007351139426611125,
  "byte_82": 0.0056358735604018625,
  "byte_55": 0.0017152658662092624,
  "byte_23": 0.0002450379808870375,
  "byte_7d": 0.000490075961774075,
  "byte_26": 0.0007351139426611125,
  "byte_84": 0.0036755697133055622,
  "byte_83": 0.0026954177897574125,
  "byte_e6": 0.0002450379808870375,
  "byte_fe": 0.0007351139426611125,
  "byte_87": 0.000490075961774075,
  "byte_3b": 0.0002450379808870375,
  "byte_fd": 0.0039206076941926,
  "byte_21": 0.0012251899044351876,
  "byte_3d": 0.00098015192354815,
  "byte_37": 0.000490075961774075,
  "byte_92": 0.0031854937515314874,
  "byte_53": 0.00098015192354815,
  "byte_7f": 0.0019603038470963,
  "byte_6b": 0.0002450379808870375,
  "byte_e5": 0.0007351139426611125,
  "byte_67": 0.0002450379808870375,
  "byte_0b": 0.0022053418279833373,
  "byte_d9": 0.0002450379808870375,
  "byte_e0": 0.000490075961774075,
  "byte_6c": 0.000490075961774075,
  "byte_30": 0.000490075961774075,
  "byte_7e": 0.000490075961774075,
  "byte_cf": 0.000490075961774075,
  "byte_d2": 0.00098015192354815,
  "byte_3c": 0.0002450379808870375,
  "byte_ad": 0.000490075961774075,
  "byte_86": 0.0002450379808870375,
  "byte_4f": 0.0007351139426611125,
  "byte_0c": 0.000490075961774075,
  "byte_12": 0.0002450379808870375,
  "byte_f8": 0.0007351139426611125,
  "byte_f7": 0.000490075961774075,
  "byte_5d": 0.000490075961774075,
  "byte_ea": 0.0012251899044351876,
  "byte_f9": 0.0007351139426611125,
  "byte_7a": 0.0007351139426611125,
  "byte_dd": 0.000490075961774075,
  "byte_a5": 0.0002450379808870375,
  "byte_c3": 0.000490075961774075,
  "byte_22": 0.0002450379808870375,
  "byte_b1": 0.0007351139426611125,
  "byte_a7": 0.0002450379808870375,
  "byte_c7": 0.000490075961774075,
  "byte_9f": 0.0007351139426611125,
  "byte_b5": 0.000490075961774075,
  "byte_1b": 0.0007351139426611125,
  "byte_da": 0.000490075961774075,
  "byte_db": 0.0002450379808870375,
  "byte_df": 0.0012251899044351876,
  "byte_19": 0.0007351139426611125,
  "byte_d1": 0.0012251899044351876,
  "byte_9b": 0.000490075961774075,
  "byte_de": 0.0002450379808870375,
  "byte_b8": 0.000490075961774075,
  "byte_70": 0.0007351139426611125,
  "byte_bc": 0.0002450379808870375,
  "byte_c0": 0.0002450379808870375,
  "byte_1e": 0.0002450379808870375,
  "byte_af": 0.000490075961774075,
  "byte_9d": 0.0002450379808870375,
  "byte_0e": 0.0017152658662092624,
  "byte_cb": 0.0002450379808870375,
  "byte_ed": 0.0002450379808870375,
  "byte_46": 0.000490075961774075,
  "byte_94": 0.000490075961774075,
  "byte_17": 0.0007351139426611125,
  "byte_b4": 0.0007351139426611125,
  "byte_d0": 0.0007351139426611125,
  "byte_77": 0.0007351139426611125,
  "byte_e1": 0.0007351139426611125,
  "byte_7b": 0.0007351139426611125,
  "byte_2c": 0.000490075961774075,
  "byte_2b": 0.000490075961774075,
  "byte_31": 0.000490075961774075,
  "byte_66": 0.000490075961774075,
  "byte_8c": 0.0002450379808870375,
  "byte_95": 0.0002450379808870375,
  "byte_49": 0.000490075961774075,
  "byte_18": 0.000490075961774075,
  "byte_6f": 0.000490075961774075,
  "byte_c6": 0.0002450379808870375,
  "byte_e8": 0.0002450379808870375,
  "byte_4b": 0.0002450379808870375,
  "byte_a2": 0.0002450379808870375,
  "byte_ef": 0.0002450379808870375,
  "byte_0f": 0.0002450379808870375,
  "byte_a0": 0.0002450379808870375,
  "byte_48": 0.0002450379808870375,
  "byte_69": 0.0002450379808870375,
  "byte_b3": 0.0002450379808870375,
  "byte_a4": 0.0002450379808870375,
  "byte_c8": 0.000490075961774075,
  "byte_b2": 0.0002450379808870375,
  "byte_ee": 0.0002450379808870375,
  "byte_e7": 0.000490075961774075,
  "byte_b7": 0.0002450379808870375,
  "byte_78": 0.0002450379808870375,
  "byte_fb": 0.0002450379808870375,
  "byte_cd": 0.0002450379808870375,
  "byte_aa": 0.000490075961774075,
  "byte_d5": 0.000490075961774075,
  "byte_9e": 0.000490075961774075,
  "byte_8f": 0.0002450379808870375,
  "byte_98": 0.0002450379808870375,
  "byte_cc": 0.0002450379808870375,
  "byte_1f": 0.0002450379808870375,
  "byte_6d": 0.0002450379808870375,
  "byte_f4": 0.0002450379808870375,
  "byte_72": 0.0002450379808870375,
  "byte_58": 0.0002450379808870375,
  "byte_f6": 0.0002450379808870375,
  "byte_c5": 0.0002450379808870375,
  "byte_79": 0.0002450379808870375,
  "byte_b9": 0.0002450379808870375,
  "byte_9c": 0.0002450379808870375,
  "byte_74": 0.0002450379808870375,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 10,
  "event_nums": 9,
  "creation_block": 6325718,
  "creation_timestamp": 1536865282,
  "life_time": 346940.0,
  "duration_seconds": 4905354.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 2.8823344603261072e-05,
  "avg_gas_limit": 265303.3,
  "std_gas_limit": 421183.343590425,
  "avg_gas_used": 169833.7,
  "std_gas_used": 349675.81799062114,
  "avg_gas_price": 13700000000.0,
  "std_gas_price": 16068914089.010496,
  "atinversebrah_num": 1,
  "addadvisor_num": 5,
  "replaceadvisoraddress_num": 1,
  "timeline_sequence": [
    [
      6325718,
      1536865282,
      143,
      52,
      0,
      1500000,
      5000000000,
      0,
      1,
      4391988,
      1217184,
      16795216
    ],
    [
      6325917,
      1536868289,
      144,
      124,
      0,
      50000,
      5000000000,
      0,
      1,
      4596835,
      45240,
      16795017
    ],
    [
      6325931,
      1536868507,
      145,
      89,
      0,
      50000,
      5000000000,
      0,
      1,
      3588491,
      44856,
      16795003
    ],
    [
      6327845,
      1536895042,
      151,
      155,
      0,
      100000,
      5000000000,
      0,
      1,
      3419553,
      45176,
      16793089
    ],
    [
      6327865,
      1536895368,
      152,
      23,
      0,
      100000,
      5000000000,
      0,
      1,
      6714024,
      30240,
      16793069
    ],
    [
      6328068,
      1536898356,
      155,
      63,
      0,
      300000,
      5000000000,
      0,
      1,
      7033520,
      45240,
      16792866
    ],
    [
      6330970,
      1536939894,
      11,
      1,
      0,
      300000,
      50000000000,
      0,
      1,
      138368,
      97725,
      16789964
    ],
    [
      6582399,
      1540491917,
      157,
      62,
      0,
      100000,
      8000000000,
      0,
      1,
      7554815,
      36918,
      16538535
    ],
    [
      6582632,
      1540495220,
      158,
      43,
      0,
      100000,
      8000000000,
      0,
      1,
      2727255,
      82725,
      16538302
    ],
    [
      6672658,
      1541770636,
      13,
      29,
      0,
      53033,
      41000000000,
      0,
      1,
      1135877,
      53033,
      16448276
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.15;\n\n// Math helper functions\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n/// @title DNNToken contract - Main DNN contract\n/// @author Dondrey Taylor - <dondrey@dnn.media>\ncontract DNNToken {\n    enum DNNSupplyAllocations {\n        EarlyBackerSupplyAllocation,\n        PRETDESupplyAllocation,\n        TDESupplyAllocation,\n        BountySupplyAllocation,\n        WriterAccountSupplyAllocation,\n        AdvisorySupplyAllocation,\n        PlatformSupplyAllocation\n    }\n    function balanceOf(address who) constant public returns (uint256);\n    function issueTokens(address, uint256, DNNSupplyAllocations) public pure returns (bool) {}\n}\n\n/// @author Dondrey Taylor - <dondrey@dnn.media>\ncontract DNNAdvisoryLockBox {\n\n  using SafeMath for uint256;\n\n  // DNN Token Contract\n  DNNToken public dnnToken;\n\n  // Addresses of the co-founders of DNN\n  address public cofounderA;\n  address public cofounderB;\n\n  // Amount of tokens that each advisor is entitled to\n  mapping(address => uint256) advisorsWithEntitledSupply;\n\n  // Amount of tokens that each advisor is entitled to\n\tmapping(address => uint256) advisorsTokensIssued;\n\n  // The last time that tokens were issued to each advisor\n\tmapping(address => uint256) advisorsTokensIssuedOn;\n\n  // Events\n\tevent AdvisorTokensSent(address to, uint256 issued, uint256 remaining);\n\tevent AdvisorAdded(address advisor);\n\tevent AdvisorAddressChanged(address oldaddress, address newaddress);\n  event NotWhitelisted(address to);\n  event NoTokensRemaining(address advisor);\n  event NextRedemption(uint256 nextTime);\n\n  // Checks to see if sender is a cofounder\n  modifier onlyCofounders() {\n      require (msg.sender == cofounderA || msg.sender == cofounderB);\n      _;\n  }\n\n  // Replace advisor address\n  function replaceAdvisorAddress(address oldaddress, address newaddress) public onlyCofounders {\n      // Check to see if the advisor's old address exists\n      if (advisorsWithEntitledSupply[oldaddress] > 0) {\n          advisorsWithEntitledSupply[newaddress] = advisorsWithEntitledSupply[oldaddress];\n          advisorsWithEntitledSupply[oldaddress] = 0;\n          emit AdvisorAddressChanged(oldaddress, newaddress);\n      }\n      else {\n          emit NotWhitelisted(oldaddress);\n      }\n  }\n\n  // Provides the remaining amount tokens to be issued to the advisor\n  function nextRedemptionTime(address advisorAddress) public view returns (uint256) {\n      return advisorsTokensIssuedOn[advisorAddress] == 0 ? now : (advisorsTokensIssuedOn[advisorAddress] + 30 days);\n  }\n\n  // Provides the remaining amount tokens to be issued to the advisor\n  function checkRemainingTokens(address advisorAddress) public view returns (uint256) {\n      return advisorsWithEntitledSupply[advisorAddress] - advisorsTokensIssued[advisorAddress];\n  }\n\n  // Checks if the specified address is whitelisted\n  function isWhitelisted(address advisorAddress) public view returns (bool) {\n     return advisorsWithEntitledSupply[advisorAddress] != 0;\n  }\n\n  // Add advisor address\n  function addAdvisor(address advisorAddress, uint256 entitledTokenAmount) public onlyCofounders {\n      advisorsWithEntitledSupply[advisorAddress] = entitledTokenAmount;\n      emit AdvisorAdded(advisorAddress);\n  }\n\n  // Amount of tokens that the advisor is entitled to\n  function advisorEntitlement(address advisorAddress) public view returns (uint256) {\n      return advisorsWithEntitledSupply[advisorAddress];\n  }\n\n  constructor() public\n  {\n      // Set token address\n      dnnToken = DNNToken(0x9D9832d1beb29CC949d75D61415FD00279f84Dc2);\n\n      // Set cofounder addresses\n      cofounderA = 0x3Cf26a9FE33C219dB87c2e50572e50803eFb2981;\n      cofounderB = 0x9FFE2aD5D76954C7C25be0cEE30795279c4Cab9f;\n  }\n\n\t// Handles incoming transactions\n\tfunction () public payable {\n\n      // Check to see if the advisor is within\n      // our whitelist\n      if (advisorsWithEntitledSupply[msg.sender] > 0) {\n\n          // Check to see if the advisor has any tokens left\n          if (advisorsTokensIssued[msg.sender] < advisorsWithEntitledSupply[msg.sender]) {\n\n              // Check to see if we can issue tokens to them. Advisors can redeem every 30 days for 10 months\n              if (advisorsTokensIssuedOn[msg.sender] == 0 || ((now - advisorsTokensIssuedOn[msg.sender]) >= 30 days)) {\n\n                  // Issue tokens to advisors\n                  uint256 tokensToIssue = advisorsWithEntitledSupply[msg.sender].div(10);\n\n                  // Update amount of tokens issued to this advisor\n                  advisorsTokensIssued[msg.sender] = advisorsTokensIssued[msg.sender].add(tokensToIssue);\n\n                  // Update the time that we last issued tokens to this advisor\n                  advisorsTokensIssuedOn[msg.sender] = now;\n\n                  // Allocation type will be advisory\n                  DNNToken.DNNSupplyAllocations allocationType = DNNToken.DNNSupplyAllocations.AdvisorySupplyAllocation;\n\n                  // Attempt to issue tokens\n                  if (!dnnToken.issueTokens(msg.sender, tokensToIssue, allocationType)) {\n                      revert();\n                  }\n                  else {\n                     emit AdvisorTokensSent(msg.sender, tokensToIssue, checkRemainingTokens(msg.sender));\n                  }\n              }\n              else {\n                   emit NextRedemption(advisorsTokensIssuedOn[msg.sender] + 30 days);\n              }\n          }\n          else {\n            emit NoTokensRemaining(msg.sender);\n          }\n      }\n      else {\n        emit NotWhitelisted(msg.sender);\n      }\n\t}\n\n}"
}