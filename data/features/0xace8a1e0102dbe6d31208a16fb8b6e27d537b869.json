{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 PUSH1 MUL DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 PUSH2 JUMP JUMPDEST PUSH2 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SWAP4 POP SWAP2 POP JUMPDEST PUSH1 DUP3 LT ISZERO PUSH2 JUMPI PUSH1 DUP3 DUP2 MSTORE PUSH1 DUP5 SWAP1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP6 DUP5 MSTORE SWAP2 DUP7 SWAP1 MSTORE SWAP1 SWAP2 SHA3 PUSH1 DUP1 DUP4 ADD SLOAD SWAP2 ADD DUP1 SLOAD PUSH20 NOT AND SWAP2 SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE PUSH2 JUMP JUMPDEST PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP5 LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 PUSH2 JUMP JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST POP POP PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP7 AND DUP4 MSTORE DUP1 DUP4 SHA3 SWAP5 DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 PUSH1 SWAP2 DUP3 ADD SLOAD SWAP2 ADD DUP1 SLOAD PUSH20 NOT AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SWAP1 JUMPDEST PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP2 DUP2 MSTORE PUSH1 DUP4 SWAP1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP4 DUP3 PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 SWAP3 SWAP1 SWAP3 MUL ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP SWAP1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 DUP2 ADD SLOAD SWAP1 SWAP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP2 ADD DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND OR SWAP1 SSTORE JUMPDEST POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD DUP3 MSTORE SWAP1 PUSH1 SWAP1 DUP3 SWAP1 DUP1 CODESIZE DUP4 CODECOPY POP SWAP2 SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 LOG2 JUMPI DUP14 UNKNOWN_0xf SAR SWAP5 UNKNOWN_0x2b DUP9 UNKNOWN_0xb5 UNKNOWN_0xce UNKNOWN_0xcf UNKNOWN_0xd8 INVALID_0x75",
  "opcode_entropy": 4.720165491788544,
  "opcode_count": 894,
  "unique_opcodes": 60,
  "byte_entropy": 5.391584923543837,
  "byte_60": 0.1193058568329718,
  "byte_80": 0.039045553145336226,
  "byte_40": 0.010845986984815618,
  "byte_52": 0.019522776572668113,
  "byte_04": 0.01373825018076645,
  "byte_36": 0.0014461315979754157,
  "byte_10": 0.005061460592913955,
  "byte_61": 0.046999276934201015,
  "byte_00": 0.05061460592913955,
  "byte_98": 0.0014461315979754157,
  "byte_57": 0.023138105567606652,
  "byte_63": 0.007953723788864787,
  "byte_ff": 0.07519884309472162,
  "byte_7c": 0.0007230657989877079,
  "byte_01": 0.060014461315979754,
  "byte_35": 0.006507592190889371,
  "byte_16": 0.026030368763557483,
  "byte_02": 0.03398409255242227,
  "byte_12": 0.0007230657989877079,
  "byte_4e": 0.0007230657989877079,
  "byte_64": 0.0007230657989877079,
  "byte_81": 0.023138105567606652,
  "byte_14": 0.009399855386840203,
  "byte_9d": 0.0007230657989877079,
  "byte_2a": 0.0021691973969631237,
  "byte_b4": 0.0014461315979754157,
  "byte_eb": 0.0007230657989877079,
  "byte_fa": 0.0014461315979754157,
  "byte_da": 0.0014461315979754157,
  "byte_3d": 0.0007230657989877079,
  "byte_96": 0.0007230657989877079,
  "byte_c7": 0.0007230657989877079,
  "byte_58": 0.0014461315979754157,
  "byte_03": 0.028922631959508314,
  "byte_3e": 0.0007230657989877079,
  "byte_44": 0.0021691973969631237,
  "byte_1e": 0.0014461315979754157,
  "byte_f4": 0.0007230657989877079,
  "byte_54": 0.014461315979754157,
  "byte_c0": 0.0007230657989877079,
  "byte_77": 0.0007230657989877079,
  "byte_5f": 0.0014461315979754157,
  "byte_55": 0.004338394793926247,
  "byte_50": 0.02675343456254519,
  "byte_4a": 0.0007230657989877079,
  "byte_82": 0.009399855386840203,
  "byte_b1": 0.0007230657989877079,
  "byte_79": 0.0007230657989877079,
  "byte_ba": 0.0007230657989877079,
  "byte_97": 0.0007230657989877079,
  "byte_c6": 0.0007230657989877079,
  "byte_8d": 0.0014461315979754157,
  "byte_a5": 0.0007230657989877079,
  "byte_cb": 0.0007230657989877079,
  "byte_5b": 0.03976861894432393,
  "byte_db": 0.0007230657989877079,
  "byte_a6": 0.0007230657989877079,
  "byte_f9": 0.0021691973969631237,
  "byte_e1": 0.0007230657989877079,
  "byte_f0": 0.0007230657989877079,
  "byte_fd": 0.010845986984815618,
  "byte_34": 0.006507592190889371,
  "byte_15": 0.012292118582791034,
  "byte_a9": 0.0007230657989877079,
  "byte_be": 0.0021691973969631237,
  "byte_a0": 0.018076644974692697,
  "byte_0a": 0.01735357917570499,
  "byte_11": 0.0007230657989877079,
  "byte_56": 0.021691973969631236,
  "byte_51": 0.006507592190889371,
  "byte_90": 0.038322487346348515,
  "byte_92": 0.008676789587852495,
  "byte_20": 0.019522776572668113,
  "byte_f3": 0.0021691973969631237,
  "byte_e6": 0.0007230657989877079,
  "byte_24": 0.0021691973969631237,
  "byte_2f": 0.0007230657989877079,
  "byte_0f": 0.0014461315979754157,
  "byte_18": 0.0007230657989877079,
  "byte_0b": 0.0007230657989877079,
  "byte_91": 0.014461315979754157,
  "byte_76": 0.0007230657989877079,
  "byte_83": 0.012292118582791034,
  "byte_9e": 0.0007230657989877079,
  "byte_86": 0.0028922631959508315,
  "byte_bd": 0.0007230657989877079,
  "byte_d2": 0.0007230657989877079,
  "byte_2d": 0.0007230657989877079,
  "byte_e7": 0.0007230657989877079,
  "byte_75": 0.0014461315979754157,
  "byte_fc": 0.0007230657989877079,
  "byte_84": 0.005061460592913955,
  "byte_33": 0.0028922631959508315,
  "byte_4b": 0.0007230657989877079,
  "byte_85": 0.0028922631959508315,
  "byte_ca": 0.0036153289949385392,
  "byte_5d": 0.0007230657989877079,
  "byte_93": 0.0028922631959508315,
  "byte_73": 0.0036153289949385392,
  "byte_19": 0.0036153289949385392,
  "byte_17": 0.0036153289949385392,
  "byte_7a": 0.0021691973969631237,
  "byte_37": 0.0007230657989877079,
  "byte_49": 0.0007230657989877079,
  "byte_94": 0.0014461315979754157,
  "byte_a8": 0.0007230657989877079,
  "byte_05": 0.0021691973969631237,
  "byte_b0": 0.0014461315979754157,
  "byte_fe": 0.0014461315979754157,
  "byte_9b": 0.0007230657989877079,
  "byte_1c": 0.0007230657989877079,
  "byte_38": 0.0007230657989877079,
  "byte_39": 0.0014461315979754157,
  "byte_a1": 0.0014461315979754157,
  "byte_65": 0.0007230657989877079,
  "byte_62": 0.0007230657989877079,
  "byte_72": 0.0007230657989877079,
  "byte_30": 0.0007230657989877079,
  "byte_a2": 0.0007230657989877079,
  "byte_1d": 0.0007230657989877079,
  "byte_2b": 0.0007230657989877079,
  "byte_88": 0.0007230657989877079,
  "byte_b5": 0.0007230657989877079,
  "byte_ce": 0.0007230657989877079,
  "byte_cf": 0.0007230657989877079,
  "byte_d8": 0.0007230657989877079,
  "byte_31": 0.0007230657989877079,
  "byte_99": 0.0007230657989877079,
  "byte_e2": 0.0007230657989877079,
  "byte_0c": 0.0007230657989877079,
  "byte_3a": 0.0007230657989877079,
  "byte_c3": 0.0007230657989877079,
  "byte_53": 0.0007230657989877079,
  "byte_29": 0.0007230657989877079,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 6,
  "event_nums": 0,
  "creation_block": 5686768,
  "creation_timestamp": 1527441988,
  "life_time": 583.0,
  "duration_seconds": 8624.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.010273972602739725,
  "avg_gas_limit": 198359.16666666666,
  "std_gas_limit": 158294.45673008333,
  "avg_gas_used": 124163.83333333333,
  "std_gas_used": 144973.83737352595,
  "avg_gas_price": 36416666666.666664,
  "std_gas_price": 34455788902.43102,
  "atinversebrah_num": 1,
  "additem_num": 5,
  "timeline_sequence": [
    [
      5686768,
      1527441988,
      320,
      92,
      0,
      444087,
      6500000000,
      0,
      1,
      3686331,
      444087,
      17434169
    ],
    [
      5687126,
      1527447336,
      0,
      8,
      0,
      86068,
      14000000000,
      1,
      0,
      271248,
      86068,
      17433811
    ],
    [
      5687156,
      1527447727,
      1,
      7,
      0,
      30000,
      85000000000,
      1,
      0,
      230057,
      30000,
      17433781
    ],
    [
      5687249,
      1527449264,
      2,
      148,
      0,
      30000,
      85000000000,
      1,
      0,
      3249786,
      30000,
      17433688
    ],
    [
      5687328,
      1527450228,
      3,
      10,
      0,
      300000,
      14000000000,
      0,
      1,
      494721,
      87354,
      17433609
    ],
    [
      5687351,
      1527450612,
      4,
      56,
      0,
      300000,
      14000000000,
      0,
      1,
      2466185,
      67474,
      17433586
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.24;\n\ncontract Owned {\n    address public owner;\n    address public ownerCandidate;\n\n    constructor() public {\n        owner = address(0x6b9E41bE828027Bf199b9bC4167A31566daB6B62); \n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n    \n    function changeOwner(address _newOwner) public onlyOwner {\n        ownerCandidate = _newOwner;\n    }\n    \n    function acceptOwnership() public {\n        require(msg.sender == ownerCandidate);  \n        owner = ownerCandidate;\n    }\n    \n}\n\ncontract AddressTree is Owned{\n    \n    // Max number of items in tree \n    uint256 public constant TreeLim = 2;\n    \n    struct Tree{\n        mapping(uint256 => Tree) Items;\n        address Item;\n    }\n    \n    mapping(address => Tree) public TreeList; \n    \n    function CheckTree(address root)\n        internal\n    {\n        Tree storage CurrentTree = TreeList[root];\n        if (CurrentTree.Item == address(0x0)){\n            // empty tree \n            CurrentTree.Item = root;\n        }\n\n    }\n    \n    constructor()\n        public\n    {\n    }\n    \n    \n    function AddItem(address root, address target)\n        public\n        onlyOwner\n    {\n        CheckTree(root);\n        CheckTree(target);\n        Tree storage CurrentTree = TreeList[root];\n        for (uint256 i=0; i<TreeLim; i++){\n            if (CurrentTree.Items[i].Item == address(0x0)){\n                \n                Tree storage TargetTree = TreeList[target];\n                CurrentTree.Items[i] = TargetTree;\n                return;\n            }\n        }\n        // no empty item found \n        revert();\n    }\n    \n    function SetItem(address root, uint256 index, address target)\n        public    \n        onlyOwner\n    {\n        require(index < TreeLim);\n        CheckTree(root);\n        CheckTree(target);\n        Tree storage CurrentTree = TreeList[root];\n        Tree storage TargetTree = TreeList[target];\n        CurrentTree.Items[index] = TargetTree;\n        \n    }\n    \n    //web view item\n    function GetItems(address target)\n        view\n        public\n        returns (address[TreeLim])\n    {\n        address[TreeLim] memory toReturn;\n        Tree storage CurrentTree = TreeList[target];\n        for (uint256 i=0; i<TreeLim; i++){\n            toReturn[i] = CurrentTree.Items[i].Item;\n        }\n        return toReturn;\n    }\n    \n    \n}"
}