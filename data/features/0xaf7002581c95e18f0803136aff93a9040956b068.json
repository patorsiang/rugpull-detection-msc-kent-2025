{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH20 SWAP1 DUP2 OR DUP3 SSTORE PUSH4 PUSH1 DUP2 SWAP1 SSTORE DUP2 DUP4 MSTORE PUSH1 PUSH1 MSTORE PUSH32 DUP2 SWAP1 SSTORE SWAP1 SWAP2 SWAP1 PUSH32 SWAP1 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 PUSH1 DUP1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 DUP1 DUP3 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 DUP2 CALLDATALOAD DUP2 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 DUP2 DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 PUSH1 MUL DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP6 SWAP1 SSTORE SWAP1 SWAP3 SWAP2 SWAP1 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP8 DUP4 AND DUP3 MSTORE PUSH1 DUP2 MSTORE DUP4 DUP3 SHA3 CALLER SWAP1 SWAP4 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND SWAP2 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 PUSH1 DUP4 MLOAD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 JUMPDEST DUP3 MLOAD DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI PUSH2 DUP5 DUP5 DUP4 PUSH1 AND DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD DUP5 DUP5 PUSH1 AND DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH2 JUMP JUMPDEST POP PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 CALLER SWAP1 SWAP2 AND SWAP1 PUSH32 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP4 MLOAD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP4 MLOAD EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 JUMPDEST DUP3 MLOAD DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI PUSH2 DUP4 DUP3 PUSH1 AND DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD DUP4 DUP4 PUSH1 AND DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD PUSH2 JUMP JUMPDEST POP PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND SWAP2 PUSH4 SWAP2 AND DUP5 PUSH1 MLOAD PUSH29 PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST GAS CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND SWAP2 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP STOP LOG1 PUSH6 SHA3 GASLIMIT UNOFFICIAL_DUP UNKNOWN_0xc1 BALANCE ADDMOD UNKNOWN_0xb8 PUSH22 SWAP13 DUP7 SWAP12 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.778691146623559,
  "opcode_count": 1854,
  "unique_opcodes": 68,
  "byte_entropy": 5.856895981320293,
  "byte_0x": 0.0003477051460361613,
  "byte_60": 0.11439499304589708,
  "byte_40": 0.01634214186369958,
  "byte_52": 0.027121001390820583,
  "byte_34": 0.005563282336578581,
  "byte_15": 0.013560500695410291,
  "byte_61": 0.037899860917941584,
  "byte_00": 0.06084840055632823,
  "byte_0f": 0.0006954102920723226,
  "byte_57": 0.020166898470097356,
  "byte_80": 0.037899860917941584,
  "byte_fd": 0.011821974965229486,
  "byte_5b": 0.03268428372739916,
  "byte_54": 0.006954102920723227,
  "byte_01": 0.04554937413073713,
  "byte_a0": 0.011821974965229486,
  "byte_02": 0.02121001390820584,
  "byte_0a": 0.01564673157162726,
  "byte_03": 0.022600834492350487,
  "byte_19": 0.0013908205841446453,
  "byte_16": 0.025034770514603615,
  "byte_73": 0.001043115438108484,
  "byte_48": 0.0003477051460361613,
  "byte_21": 0.0006954102920723226,
  "byte_49": 0.0006954102920723226,
  "byte_f6": 0.0006954102920723226,
  "byte_22": 0.001043115438108484,
  "byte_58": 0.0006954102920723226,
  "byte_20": 0.02920723226703755,
  "byte_2d": 0.0006954102920723226,
  "byte_13": 0.0006954102920723226,
  "byte_e5": 0.001043115438108484,
  "byte_9c": 0.0017385257301808068,
  "byte_92": 0.005563282336578581,
  "byte_a6": 0.0006954102920723226,
  "byte_f9": 0.0003477051460361613,
  "byte_1b": 0.0013908205841446453,
  "byte_f8": 0.0003477051460361613,
  "byte_90": 0.04554937413073713,
  "byte_81": 0.03372739916550765,
  "byte_17": 0.0013908205841446453,
  "byte_82": 0.012517385257301807,
  "byte_55": 0.0038247566063977748,
  "byte_63": 0.010778859527121001,
  "byte_77": 0.001043115438108484,
  "byte_35": 0.009735744089012517,
  "byte_94": 0.004172461752433936,
  "byte_83": 0.015299026425591099,
  "byte_7f": 0.003129346314325452,
  "byte_3e": 0.001043115438108484,
  "byte_05": 0.0027816411682892906,
  "byte_af": 0.0006954102920723226,
  "byte_96": 0.002086230876216968,
  "byte_46": 0.0006954102920723226,
  "byte_09": 0.003129346314325452,
  "byte_14": 0.007997218358831711,
  "byte_8a": 0.0003477051460361613,
  "byte_d8": 0.0013908205841446453,
  "byte_fc": 0.0013908205841446453,
  "byte_db": 0.0003477051460361613,
  "byte_69": 0.002086230876216968,
  "byte_c2": 0.0013908205841446453,
  "byte_9e": 0.0003477051460361613,
  "byte_85": 0.004867872044506259,
  "byte_d9": 0.0006954102920723226,
  "byte_d4": 0.0003477051460361613,
  "byte_37": 0.0027816411682892906,
  "byte_b6": 0.0006954102920723226,
  "byte_68": 0.0017385257301808068,
  "byte_8f": 0.0003477051460361613,
  "byte_3d": 0.0003477051460361613,
  "byte_5c": 0.0003477051460361613,
  "byte_4f": 0.0006954102920723226,
  "byte_91": 0.014951321279554937,
  "byte_dd": 0.0024339360222531293,
  "byte_f2": 0.0027816411682892906,
  "byte_ad": 0.001043115438108484,
  "byte_e2": 0.0013908205841446453,
  "byte_c8": 0.0013908205841446453,
  "byte_9b": 0.002086230876216968,
  "byte_b0": 0.001043115438108484,
  "byte_8d": 0.0024339360222531293,
  "byte_aa": 0.0013908205841446453,
  "byte_95": 0.002086230876216968,
  "byte_2b": 0.0013908205841446453,
  "byte_a7": 0.0017385257301808068,
  "byte_f1": 0.0013908205841446453,
  "byte_c4": 0.0013908205841446453,
  "byte_a1": 0.0017385257301808068,
  "byte_28": 0.0017385257301808068,
  "byte_f5": 0.002086230876216968,
  "byte_5a": 0.002086230876216968,
  "byte_4d": 0.001043115438108484,
  "byte_23": 0.0017385257301808068,
  "byte_b3": 0.0013908205841446453,
  "byte_ef": 0.001043115438108484,
  "byte_51": 0.01842837273991655,
  "byte_a3": 0.002086230876216968,
  "byte_89": 0.0006954102920723226,
  "byte_b2": 0.002086230876216968,
  "byte_39": 0.0006954102920723226,
  "byte_f3": 0.0024339360222531293,
  "byte_04": 0.0076495132127955496,
  "byte_36": 0.0003477051460361613,
  "byte_10": 0.003129346314325452,
  "byte_da": 0.0006954102920723226,
  "byte_ff": 0.02086230876216968,
  "byte_7c": 0.0006954102920723226,
  "byte_06": 0.0038247566063977748,
  "byte_de": 0.0003477051460361613,
  "byte_df": 0.0006954102920723226,
  "byte_5e": 0.0003477051460361613,
  "byte_18": 0.0006954102920723226,
  "byte_0d": 0.0003477051460361613,
  "byte_9f": 0.0006954102920723226,
  "byte_b8": 0.0006954102920723226,
  "byte_72": 0.0013908205841446453,
  "byte_2f": 0.0003477051460361613,
  "byte_e9": 0.0006954102920723226,
  "byte_dc": 0.0006954102920723226,
  "byte_ec": 0.0006954102920723226,
  "byte_31": 0.001043115438108484,
  "byte_3c": 0.0003477051460361613,
  "byte_67": 0.0003477051460361613,
  "byte_70": 0.0003477051460361613,
  "byte_a5": 0.0003477051460361613,
  "byte_cb": 0.0003477051460361613,
  "byte_47": 0.001043115438108484,
  "byte_41": 0.0006954102920723226,
  "byte_76": 0.0006954102920723226,
  "byte_a9": 0.0006954102920723226,
  "byte_bb": 0.001043115438108484,
  "byte_4c": 0.0006954102920723226,
  "byte_0b": 0.0003477051460361613,
  "byte_4a": 0.0003477051460361613,
  "byte_d0": 0.0006954102920723226,
  "byte_6d": 0.0003477051460361613,
  "byte_62": 0.0006954102920723226,
  "byte_ed": 0.0003477051460361613,
  "byte_fb": 0.0006954102920723226,
  "byte_e3": 0.0006954102920723226,
  "byte_8b": 0.0024339360222531293,
  "byte_ea": 0.0003477051460361613,
  "byte_3f": 0.0003477051460361613,
  "byte_56": 0.014951321279554937,
  "byte_50": 0.024687065368567455,
  "byte_2e": 0.0003477051460361613,
  "byte_1f": 0.001043115438108484,
  "byte_74": 0.001043115438108484,
  "byte_24": 0.003129346314325452,
  "byte_cf": 0.0003477051460361613,
  "byte_44": 0.002086230876216968,
  "byte_e8": 0.0006954102920723226,
  "byte_f7": 0.001043115438108484,
  "byte_6a": 0.0006954102920723226,
  "byte_12": 0.0003477051460361613,
  "byte_33": 0.004520166898470098,
  "byte_26": 0.0013908205841446453,
  "byte_93": 0.005910987482614743,
  "byte_84": 0.00521557719054242,
  "byte_07": 0.0038247566063977748,
  "byte_08": 0.0038247566063977748,
  "byte_e4": 0.0003477051460361613,
  "byte_c3": 0.0006954102920723226,
  "byte_6f": 0.001043115438108484,
  "byte_9a": 0.0003477051460361613,
  "byte_65": 0.0017385257301808068,
  "byte_6e": 0.0006954102920723226,
  "byte_6c": 0.0003477051460361613,
  "byte_7a": 0.001043115438108484,
  "byte_64": 0.0006954102920723226,
  "byte_75": 0.0006954102920723226,
  "byte_87": 0.001043115438108484,
  "byte_8c": 0.0003477051460361613,
  "byte_e1": 0.0003477051460361613,
  "byte_eb": 0.0006954102920723226,
  "byte_7d": 0.0006954102920723226,
  "byte_d1": 0.0003477051460361613,
  "byte_71": 0.0003477051460361613,
  "byte_42": 0.0006954102920723226,
  "byte_1e": 0.0006954102920723226,
  "byte_c0": 0.0003477051460361613,
  "byte_29": 0.0006954102920723226,
  "byte_c7": 0.0003477051460361613,
  "byte_b9": 0.0003477051460361613,
  "byte_25": 0.0003477051460361613,
  "byte_11": 0.002086230876216968,
  "byte_86": 0.0013908205841446453,
  "byte_b5": 0.001043115438108484,
  "byte_43": 0.0003477051460361613,
  "byte_45": 0.0006954102920723226,
  "byte_4b": 0.0006954102920723226,
  "byte_1a": 0.0003477051460361613,
  "byte_fe": 0.002086230876216968,
  "byte_5d": 0.0003477051460361613,
  "byte_6b": 0.0006954102920723226,
  "byte_be": 0.0003477051460361613,
  "byte_3b": 0.0003477051460361613,
  "byte_5f": 0.0003477051460361613,
  "byte_ca": 0.0003477051460361613,
  "byte_e0": 0.0006954102920723226,
  "byte_53": 0.0003477051460361613,
  "byte_59": 0.0003477051460361613,
  "byte_cd": 0.0003477051460361613,
  "byte_a4": 0.0003477051460361613,
  "byte_97": 0.0003477051460361613,
  "byte_b4": 0.0003477051460361613,
  "byte_30": 0.0003477051460361613,
  "byte_b1": 0.0003477051460361613,
  "byte_c1": 0.0003477051460361613,
  "byte_88": 0.0003477051460361613,
  "byte_b7": 0.0003477051460361613,
  "num_nodes": 6,
  "num_edges": 5,
  "avg_degree": 1.6666666666666667,
  "density": 0.16666666666666666,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 19,
  "event_nums": 13,
  "creation_block": 5414472,
  "creation_timestamp": 1523351926,
  "life_time": 738650.0,
  "duration_seconds": 11002465.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 7,
  "num_buyers": 1,
  "num_sellers": 5,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 2.5722567220514155e-05,
  "avg_gas_limit": 104226.05263157895,
  "std_gas_limit": 175388.36169708267,
  "avg_gas_used": 84831.36842105263,
  "std_gas_used": 178295.7495157711,
  "avg_gas_price": 4899342105.263158,
  "std_gas_price": 3408070128.5896454,
  "transfer_num": 16,
  "timeline_sequence": [
    [
      5414472,
      1523351926,
      32,
      94,
      0,
      839418,
      900000000,
      0,
      1,
      6135599,
      839418,
      17677623
    ],
    [
      5419720,
      1523426839,
      0,
      21,
      0,
      60000,
      6468750000,
      0,
      1,
      937137,
      51877,
      17672375
    ],
    [
      5420929,
      1523444777,
      1,
      68,
      0,
      60000,
      4000000000,
      0,
      1,
      4159702,
      51877,
      17671166
    ],
    [
      5468755,
      1524146580,
      5,
      140,
      0,
      60000,
      4906250000,
      0,
      1,
      7328764,
      51813,
      17623340
    ],
    [
      5471297,
      1524183787,
      6,
      26,
      0,
      60000,
      3343750000,
      0,
      1,
      1383608,
      51877,
      17620798
    ],
    [
      5472832,
      1524207174,
      7,
      120,
      0,
      60000,
      4000000000,
      0,
      1,
      4540980,
      51813,
      17619263
    ],
    [
      5473188,
      1524213144,
      8,
      299,
      0,
      60000,
      6468750000,
      0,
      1,
      7747613,
      51877,
      17618907
    ],
    [
      5473499,
      1524217794,
      86,
      98,
      0,
      85000,
      2000000000,
      1,
      0,
      6139697,
      21046,
      17618596
    ],
    [
      5479884,
      1524312637,
      10,
      170,
      0,
      25000,
      10000000000,
      1,
      0,
      7055261,
      25000,
      17612211
    ],
    [
      5485322,
      1524392892,
      11,
      45,
      0,
      25000,
      10000000000,
      1,
      0,
      1385248,
      25000,
      17606773
    ],
    [
      5485327,
      1524393021,
      12,
      95,
      0,
      50000,
      5000000000,
      1,
      0,
      3306913,
      50000,
      17606768
    ],
    [
      5486061,
      1524403347,
      13,
      111,
      0,
      23000,
      15000000000,
      1,
      0,
      3940210,
      23000,
      17606034
    ],
    [
      5486075,
      1524403613,
      14,
      146,
      0,
      100000,
      3000000000,
      0,
      1,
      7456069,
      51877,
      17606020
    ],
    [
      5488386,
      1524437170,
      15,
      64,
      0,
      100000,
      3000000000,
      0,
      1,
      2286248,
      51813,
      17603709
    ],
    [
      5493851,
      1524518713,
      16,
      13,
      0,
      100000,
      3000000000,
      0,
      1,
      373581,
      51877,
      17598244
    ],
    [
      5495248,
      1524539775,
      17,
      58,
      0,
      100000,
      3000000000,
      0,
      1,
      3040081,
      51877,
      17596847
    ],
    [
      5495481,
      1524543134,
      18,
      175,
      0,
      100000,
      3000000000,
      0,
      1,
      7630457,
      51877,
      17596614
    ],
    [
      5511024,
      1524775040,
      41,
      40,
      0,
      21000,
      1000000000,
      1,
      0,
      4546234,
      21000,
      17581071
    ],
    [
      6153122,
      1534354391,
      59,
      224,
      0,
      51877,
      5000000000,
      0,
      1,
      7982106,
      36877,
      16938973
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.19;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n \n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  \n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  \n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = 0x482149F62258F6202D13e5219C92A6f9611Bf82d;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances. \n */\ncontract BasicToken is ERC20Basic, Ownable {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of. \n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transfered\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n   function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n  \n  \n  /**\n   * @dev Function to prevent eth transfers to this contract\n    */\n    function() public payable {\n\t    revert();\n\t}\n\t\n\t\n   /**\n   * @dev  Owner can transfer out any accidentally sent ERC20 tokens\n   */\n function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n        return BasicToken(tokenAddress).transfer(owner, tokens);\n    }\n\n\t\n  /**\n    * @dev Transfer the specified amounts of tokens to the specified addresses.\n    * @dev Be aware that there is no check for duplicate recipients.\n    *\n    * @param _toAddresses Receiver addresses.\n    * @param _amounts Amounts of tokens that will be transferred.\n    */\n    function multiSend(address[] _toAddresses, uint256[] _amounts) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255);\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length);\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            transfer(_toAddresses[i], _amounts[i]);\n        }\n    }\n\n    /**\n    * @dev Transfer the specified amounts of tokens to the specified addresses from authorized balance of sender.\n    * @dev Be aware that there is no check for duplicate recipients.\n    *\n    * @param _from The address of the sender\n    * @param _toAddresses The addresses of the recipients (MAX 255)\n    * @param _amounts The amounts of tokens to be transferred\n    */\n    function multiSendFrom(address _from, address[] _toAddresses, uint256[] _amounts) public {\n        /* Ensures _toAddresses array is less than or equal to 255 */\n        require(_toAddresses.length <= 255);\n        /* Ensures _toAddress and _amounts have the same number of entries. */\n        require(_toAddresses.length == _amounts.length);\n\n        for (uint8 i = 0; i < _toAddresses.length; i++) {\n            transferFrom(_from, _toAddresses[i], _amounts[i]);\n        }\n    }\n\t\n}\n\n \ncontract DCETToken is StandardToken {\n\n  string public constant name = \"Decentralized Faucet\";\n  string public constant symbol = \"DCET\";\n  uint8 public constant decimals = 0; \n\n  uint256 public constant INITIAL_SUPPLY = 2000000000 * (10 ** uint256(decimals));\n\n  \n  function DCETToken() public {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[0x482149F62258F6202D13e5219C92A6f9611Bf82d] = INITIAL_SUPPLY;\n    Transfer(0x0, 0x482149F62258F6202D13e5219C92A6f9611Bf82d, INITIAL_SUPPLY);\n  }\n\n}"
}