{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH7 CALLVALUE LT ISZERO ISZERO PUSH2 JUMPI CALLVALUE PUSH1 SLOAD ADD PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 SLOAD CALLVALUE MUL SWAP1 POP DUP1 PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST CALLVALUE PUSH1 SLOAD ADD PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 SLOAD DUP2 PUSH1 SLOAD ADD ADD PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 SLOAD DUP2 PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SUB SUB PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 SLOAD DUP2 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD ADD PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 CALLVALUE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST POP STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP3 EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 CALLDATASIZE SWAP1 POP LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST ISZERO PUSH2 JUMPI DUP2 PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 CALLDATASIZE SWAP1 POP LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST ISZERO PUSH2 JUMPI DUP2 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD SUB SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP2 PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP3 DUP3 SLOAD ADD SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 SLOAD PUSH1 SLOAD PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP3 POP SWAP3 POP SWAP3 POP SWAP1 SWAP2 SWAP3 JUMP JUMPDEST PUSH1 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP4 PUSH20 AND PUSH1 MLOAD DUP1 DUP1 PUSH32 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH1 ADD SWAP1 POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH29 SWAP1 DIV CALLER DUP6 ADDRESS DUP7 PUSH1 MLOAD DUP6 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 GAS CALL SWAP3 POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xd1 UNKNOWN_0xbc UNKNOWN_0xe INVALID_0x7f",
  "opcode_entropy": 4.684862745185002,
  "opcode_count": 2651,
  "unique_opcodes": 60,
  "byte_entropy": 4.71539224893096,
  "byte_60": 0.07108831073653353,
  "byte_40": 0.01044338585562477,
  "byte_52": 0.018504946866984243,
  "byte_04": 0.008427995602784902,
  "byte_36": 0.0007328691828508611,
  "byte_10": 0.002565042139978014,
  "byte_61": 0.02491755221692928,
  "byte_00": 0.04580432392817882,
  "byte_fc": 0.0010993037742762918,
  "byte_57": 0.011909124221326494,
  "byte_35": 0.0034811286185415903,
  "byte_7c": 0.0005496518871381459,
  "byte_01": 0.035910589959692193,
  "byte_90": 0.036826676438255775,
  "byte_63": 0.004580432392817882,
  "byte_ff": 0.3180652253572737,
  "byte_16": 0.021436423598387686,
  "byte_80": 0.03242946134115061,
  "byte_06": 0.003297911322828875,
  "byte_fd": 0.004946866984243312,
  "byte_de": 0.0005496518871381459,
  "byte_03": 0.010626603151337486,
  "byte_14": 0.00622938805423232,
  "byte_09": 0.00311469402711616,
  "byte_5e": 0.00018321729571271528,
  "byte_a7": 0.0007328691828508611,
  "byte_b3": 0.0009160864785635764,
  "byte_91": 0.014840600952729937,
  "byte_18": 0.00018321729571271528,
  "byte_0d": 0.00036643459142543056,
  "byte_dd": 0.0016489556614144375,
  "byte_eb": 0.0005496518871381459,
  "byte_21": 0.0005496518871381459,
  "byte_94": 0.00036643459142543056,
  "byte_f3": 0.0034811286185415903,
  "byte_a2": 0.00018321729571271528,
  "byte_05": 0.002015390252839868,
  "byte_23": 0.0009160864785635764,
  "byte_b8": 0.00036643459142543056,
  "byte_72": 0.0014657383657017222,
  "byte_69": 0.0010993037742762918,
  "byte_31": 0.00036643459142543056,
  "byte_3c": 0.00018321729571271528,
  "byte_e5": 0.0005496518871381459,
  "byte_67": 0.00018321729571271528,
  "byte_e2": 0.0009160864785635764,
  "byte_65": 0.0014657383657017222,
  "byte_f2": 0.0010993037742762918,
  "byte_bc": 0.00036643459142543056,
  "byte_2e": 0.00036643459142543056,
  "byte_11": 0.001832172957127153,
  "byte_70": 0.0005496518871381459,
  "byte_a0": 0.00018321729571271528,
  "byte_82": 0.010993037742762916,
  "byte_3a": 0.00018321729571271528,
  "byte_93": 0.0010993037742762918,
  "byte_3b": 0.00036643459142543056,
  "byte_a4": 0.0005496518871381459,
  "byte_13": 0.0007328691828508611,
  "byte_87": 0.00036643459142543056,
  "byte_95": 0.0009160864785635764,
  "byte_5f": 0.00036643459142543056,
  "byte_ba": 0.00018321729571271528,
  "byte_be": 0.0005496518871381459,
  "byte_b0": 0.0007328691828508611,
  "byte_d8": 0.00018321729571271528,
  "byte_9b": 0.0009160864785635764,
  "byte_41": 0.00036643459142543056,
  "byte_d5": 0.00018321729571271528,
  "byte_a9": 0.00036643459142543056,
  "byte_9c": 0.00036643459142543056,
  "byte_bb": 0.00036643459142543056,
  "byte_07": 0.002565042139978014,
  "byte_b9": 0.0009160864785635764,
  "byte_b2": 0.0009160864785635764,
  "byte_37": 0.0009160864785635764,
  "byte_c2": 0.0007328691828508611,
  "byte_bd": 0.00018321729571271528,
  "byte_c5": 0.00018321729571271528,
  "byte_9d": 0.00036643459142543056,
  "byte_48": 0.00018321729571271528,
  "byte_47": 0.00018321729571271528,
  "byte_e6": 0.00018321729571271528,
  "byte_ca": 0.00036643459142543056,
  "byte_e9": 0.00018321729571271528,
  "byte_51": 0.011542689629901062,
  "byte_08": 0.0016489556614144375,
  "byte_62": 0.0009160864785635764,
  "byte_ed": 0.00036643459142543056,
  "byte_3e": 0.00018321729571271528,
  "byte_92": 0.004030780505679736,
  "byte_2a": 0.00018321729571271528,
  "byte_df": 0.00018321729571271528,
  "byte_0f": 0.0016489556614144375,
  "byte_c0": 0.0009160864785635764,
  "byte_4f": 0.0007328691828508611,
  "byte_5b": 0.02088677171124954,
  "byte_54": 0.008977647489923048,
  "byte_0a": 0.005496518871381458,
  "byte_15": 0.01630633931843166,
  "byte_1a": 0.00018321729571271528,
  "byte_66": 0.00018321729571271528,
  "byte_86": 0.001282521069989007,
  "byte_6f": 0.00036643459142543056,
  "byte_c1": 0.00018321729571271528,
  "byte_34": 0.004213997801392451,
  "byte_81": 0.028215463539758154,
  "byte_55": 0.002748259435690729,
  "byte_50": 0.032795895932576036,
  "byte_02": 0.004030780505679736,
  "byte_73": 0.01667277390985709,
  "byte_20": 0.027849028948332723,
  "byte_56": 0.008611212898497618,
  "byte_0b": 0.0016489556614144375,
  "byte_33": 0.0029314767314034445,
  "byte_7f": 0.0014657383657017222,
  "byte_ad": 0.0007328691828508611,
  "byte_1b": 0.0005496518871381459,
  "byte_c8": 0.001282521069989007,
  "byte_68": 0.0005496518871381459,
  "byte_8d": 0.0005496518871381459,
  "byte_aa": 0.0005496518871381459,
  "byte_2b": 0.0005496518871381459,
  "byte_f1": 0.0014657383657017222,
  "byte_c4": 0.0005496518871381459,
  "byte_a1": 0.0007328691828508611,
  "byte_28": 0.0009160864785635764,
  "byte_f5": 0.001282521069989007,
  "byte_5a": 0.0009160864785635764,
  "byte_4d": 0.0009160864785635764,
  "byte_ef": 0.0005496518871381459,
  "byte_83": 0.00622938805423232,
  "byte_a3": 0.0010993037742762918,
  "byte_85": 0.0016489556614144375,
  "byte_88": 0.0005496518871381459,
  "byte_0e": 0.002015390252839868,
  "byte_78": 0.0005496518871381459,
  "byte_84": 0.0023818248442652986,
  "byte_1f": 0.0021986075485525836,
  "byte_19": 0.0009160864785635764,
  "byte_d1": 0.0009160864785635764,
  "byte_f6": 0.00018321729571271528,
  "byte_fe": 0.00036643459142543056,
  "byte_27": 0.00018321729571271528,
  "byte_ae": 0.00018321729571271528,
  "byte_74": 0.0005496518871381459,
  "byte_d4": 0.00018321729571271528,
  "byte_1c": 0.00018321729571271528,
  "byte_24": 0.00018321729571271528,
  "byte_45": 0.00018321729571271528,
  "byte_71": 0.0005496518871381459,
  "byte_9a": 0.00018321729571271528,
  "byte_d3": 0.00036643459142543056,
  "byte_c6": 0.00018321729571271528,
  "byte_e0": 0.00018321729571271528,
  "byte_e8": 0.00036643459142543056,
  "byte_6e": 0.00036643459142543056,
  "byte_d0": 0.00018321729571271528,
  "byte_f9": 0.00018321729571271528,
  "byte_5c": 0.00036643459142543056,
  "byte_2c": 0.0007328691828508611,
  "byte_c9": 0.00018321729571271528,
  "byte_a6": 0.00036643459142543056,
  "byte_e3": 0.00018321729571271528,
  "byte_a5": 0.00018321729571271528,
  "byte_9e": 0.00018321729571271528,
  "byte_8c": 0.00036643459142543056,
  "byte_e1": 0.00036643459142543056,
  "byte_ec": 0.00036643459142543056,
  "byte_7d": 0.0007328691828508611,
  "byte_42": 0.00036643459142543056,
  "byte_1e": 0.0007328691828508611,
  "byte_f7": 0.00036643459142543056,
  "byte_29": 0.0007328691828508611,
  "byte_c7": 0.00036643459142543056,
  "byte_c3": 0.0005496518871381459,
  "byte_25": 0.00036643459142543056,
  "byte_64": 0.0010993037742762918,
  "byte_0c": 0.00036643459142543056,
  "byte_53": 0.00018321729571271528,
  "byte_58": 0.00036643459142543056,
  "byte_22": 0.00018321729571271528,
  "byte_17": 0.00036643459142543056,
  "byte_d6": 0.00036643459142543056,
  "byte_ab": 0.00018321729571271528,
  "byte_4b": 0.00018321729571271528,
  "byte_76": 0.00036643459142543056,
  "byte_6c": 0.0005496518871381459,
  "byte_75": 0.00018321729571271528,
  "byte_32": 0.00018321729571271528,
  "byte_79": 0.00018321729571271528,
  "byte_30": 0.00036643459142543056,
  "byte_a8": 0.00018321729571271528,
  "byte_f0": 0.00018321729571271528,
  "byte_7a": 0.0005496518871381459,
  "byte_dc": 0.00018321729571271528,
  "byte_ac": 0.00018321729571271528,
  "byte_da": 0.00018321729571271528,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 5,
  "event_nums": 0,
  "creation_block": 5246780,
  "creation_timestamp": 1520927453,
  "life_time": 37528.0,
  "duration_seconds": 550609.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.0001332303018998641,
  "avg_gas_limit": 375232.2,
  "std_gas_limit": 674694.1253286263,
  "avg_gas_used": 364636.2,
  "std_gas_used": 679991.9753636509,
  "avg_gas_price": 2600000000.0,
  "std_gas_price": 1959591794.2265425,
  "transferfrom_num": 2,
  "transfer_num": 2,
  "timeline_sequence": [
    [
      5246780,
      1520927453,
      0,
      32,
      0,
      1724619,
      5000000000,
      0,
      1,
      3340032,
      1724619,
      17874160
    ],
    [
      5283049,
      1521459267,
      1,
      168,
      0,
      38194,
      1000000000,
      0,
      1,
      7980310,
      25463,
      17837891
    ],
    [
      5283145,
      1521460776,
      2,
      123,
      0,
      38674,
      1000000000,
      0,
      1,
      7968873,
      25783,
      17837795
    ],
    [
      5283402,
      1521464824,
      3,
      56,
      0,
      38674,
      1000000000,
      1,
      0,
      7943134,
      23658,
      17837538
    ],
    [
      5284308,
      1521478062,
      4,
      85,
      0,
      36000,
      5000000000,
      1,
      0,
      2565135,
      23658,
      17836632
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.20;\n\ninterface ERC20Token {\n\n    function totalSupply() constant external returns (uint256 supply);\n\n    function balanceOf(address _owner) constant external returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) external returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);\n\n    function approve(address _spender, uint256 _value) external returns (bool success);\n\n    function allowance(address _owner, address _spender) constant external returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract Token is ERC20Token{\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n\n    uint256 public totalSupply;\n\n    function balanceOf(address _owner) constant external returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) external returns (bool success) {\n        if(msg.data.length < (3 * 32) + 4) { revert(); }\n        \n        if (balances[msg.sender] >= _value && _value > 0) {\n            balances[msg.sender] -= _value;\n            balances[_to] += _value;\n            Transfer(msg.sender, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success) {\n        if(msg.data.length < (3 * 32) + 4) { revert(); }\n        \n        if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {\n            balances[_to] += _value;\n            balances[_from] -= _value;\n            allowed[_from][msg.sender] -= _value;\n            Transfer(_from, _to, _value);\n            return true;\n        } else { return false; }\n    }\n\n    function approve(address _spender, uint256 _value) external returns (bool success) {\n        if (_value != 0 && allowed[msg.sender][_spender] != 0) { return false; }\n        \n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) constant external returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function totalSupply() constant external returns (uint256 supply){\n        return totalSupply;\n    }\n}\n\ncontract DIUToken is Token{\n    address owner = msg.sender;\n    bool private paused = false;\n    \n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public unitsOneEthCanBuy;\n    uint256 public totalEthInWei;\n    address public fundsWallet;\n\n    uint256 public ethRaised;\n    uint256 public tokenFunded;\n    \n    modifier onlyOwner{\n        require(msg.sender == owner);\n        _;\n    }\n    \n    modifier whenNotPause{\n        require(!paused);\n        _;\n    }\n\n    function DIUToken() {\n        balances[msg.sender] = 100000000 * 1000000000000000000;\n        totalSupply = 100000000 * 1000000000000000000;\n        name = \"D!U\";\n        decimals = 18;\n        symbol = \"D!U\";\n        unitsOneEthCanBuy = 100;\n        fundsWallet = msg.sender;\n        tokenFunded = 0;\n        ethRaised = 0;\n        paused = false;\n    }\n\n    function() payable whenNotPause{\n        if (msg.value >= 10 finney){\n            totalEthInWei = totalEthInWei + msg.value;\n            uint256 amount = msg.value * unitsOneEthCanBuy;\n            if (balances[fundsWallet] < amount) {\n                return;\n            }\n            \n            ethRaised = ethRaised + msg.value;\n            tokenFunded = tokenFunded + amount + ethRaised;\n    \n            balances[fundsWallet] = balances[fundsWallet] - amount - ethRaised;\n            balances[msg.sender] = balances[msg.sender] + amount + ethRaised;\n    \n            Transfer(fundsWallet, msg.sender, amount);\n        }\n        \n        fundsWallet.transfer(msg.value);\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData) returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n\n        if(!_spender.call(bytes4(bytes32(keccak256(\"receiveApproval(address,uint256,address,bytes)\"))), msg.sender, _value, this, _extraData)) {\n            revert();\n        }\n\n        return true;\n    }\n    \n    function pauseContract(bool) external onlyOwner{\n        paused = true;\n    }\n    \n    function unpauseContract(bool) external onlyOwner{\n        paused = false;\n    }\n    \n    function getStats() external constant returns (uint256, uint256, bool) {\n        return (ethRaised, tokenFunded, paused);\n    }\n\n}"
}