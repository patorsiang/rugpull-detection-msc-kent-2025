{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI STOP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI STOP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI STOP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI STOP JUMPDEST CALLDATASIZE PUSH2 JUMPI STOP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 MLOAD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH20 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 MLOAD PUSH20 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH20 SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP2 DUP6 DUP6 PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP6 DUP3 DUP6 PUSH2 JUMP JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH20 DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP3 SWAP1 DUP7 SWAP1 PUSH2 SWAP1 DUP8 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 CALLER DUP3 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH20 DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD SWAP1 SWAP2 SWAP1 DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP2 DUP6 DUP6 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 DUP2 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 DUP2 AND PUSH2 JUMPI PUSH1 MLOAD CALLER SWAP1 SELFBALANCE DUP1 ISZERO PUSH2 MUL SWAP2 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 MLOAD PUSH32 DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE DUP2 SWAP1 PUSH1 SWAP1 PUSH20 DUP4 AND SWAP1 PUSH4 SWAP1 PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 PUSH20 DUP4 AND CALLER DUP4 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH20 DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 DUP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH20 DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH20 DUP4 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE SWAP1 MLOAD DUP5 DUP2 MSTORE PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH20 DUP4 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD PUSH32 DUP2 EQ PUSH2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH20 DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH20 DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH20 DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP7 DUP7 SUB SWAP1 SSTORE SWAP3 DUP7 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 SHA3 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 SWAP1 PUSH2 SWAP1 DUP7 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 JUMP JUMPDEST PUSH20 DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH20 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH20 DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP7 DUP7 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP8 SWAP1 SUB SWAP1 SSTORE MLOAD DUP6 DUP2 MSTORE SWAP2 SWAP3 SWAP2 PUSH32 SWAP2 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH20 AND CALLER EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH20 DUP4 DUP2 AND PUSH32 DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH20 DUP5 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 DUP1 DUP4 ADD DUP1 MLOAD PUSH28 AND PUSH32 OR SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH32 SWAP1 DUP5 ADD MSTORE PUSH2 SWAP3 DUP7 SWAP3 SWAP2 PUSH1 SWAP2 PUSH2 SWAP2 DUP6 AND SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH1 EQ DUP1 PUSH2 JUMPI POP DUP1 DUP1 PUSH1 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 PUSH1 DUP6 PUSH2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 SELFBALANCE LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP1 DUP7 PUSH20 AND DUP6 DUP8 PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 DUP2 EQ PUSH2 JUMPI PUSH1 MLOAD SWAP2 POP PUSH1 NOT PUSH1 RETURNDATASIZE ADD AND DUP3 ADD PUSH1 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 PUSH1 DUP5 ADD RETURNDATACOPY PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 DUP8 DUP4 DUP4 DUP8 PUSH2 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP4 ISZERO PUSH2 JUMPI DUP3 MLOAD PUSH1 SUB PUSH2 JUMPI PUSH20 DUP6 AND EXTCODESIZE PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP DUP2 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 ADD REVERT JUMPDEST DUP1 PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP PUSH1 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 DUP2 MSTORE PUSH1 DUP3 MLOAD DUP1 PUSH1 DUP5 ADD MSTORE PUSH2 DUP2 PUSH1 DUP6 ADD PUSH1 DUP8 ADD PUSH2 JUMP JUMPDEST PUSH1 ADD PUSH32 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH20 DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH1 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 DUP5 ADD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 SUB PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH32 PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 MLOAD PUSH2 DUP2 DUP5 PUSH1 DUP8 ADD PUSH2 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 UNKNOWN_0xe8 DUP10 DUP13 DUP3 SELFBALANCE LOG1 DUP4 UNKNOWN_0xcd POP GAS PUSH11 UNKNOWN_0xdc PUSH16 SGT STOP CALLER",
  "opcode_entropy": 4.806533820503905,
  "opcode_count": 2363,
  "unique_opcodes": 75,
  "byte_entropy": 5.728821207882183,
  "byte_0x": 0.00019924287706714485,
  "byte_60": 0.06893803546523211,
  "byte_80": 0.02510460251046025,
  "byte_40": 0.010759115361625823,
  "byte_52": 0.029288702928870293,
  "byte_04": 0.009762900976290097,
  "byte_36": 0.002390914524805738,
  "byte_10": 0.0035863717872086074,
  "byte_61": 0.049810719266786214,
  "byte_00": 0.10659493923092249,
  "byte_eb": 0.0007969715082685794,
  "byte_57": 0.015540944411237299,
  "byte_35": 0.0009962143853357243,
  "byte_e0": 0.0009962143853357243,
  "byte_1c": 0.0003984857541342897,
  "byte_63": 0.008368200836820083,
  "byte_71": 0.0009962143853357243,
  "byte_50": 0.022713687985654513,
  "byte_18": 0.001394700139470014,
  "byte_a6": 0.0005977286312014345,
  "byte_11": 0.005977286312014346,
  "byte_84": 0.008368200836820083,
  "byte_a9": 0.0005977286312014345,
  "byte_05": 0.004981071926678621,
  "byte_9c": 0.001195457262402869,
  "byte_bb": 0.0005977286312014345,
  "byte_56": 0.02092050209205021,
  "byte_14": 0.004781829049611476,
  "byte_02": 0.004981071926678621,
  "byte_ac": 0.0009962143853357243,
  "byte_dd": 0.001195457262402869,
  "byte_62": 0.004981071926678621,
  "byte_ed": 0.00019924287706714485,
  "byte_3e": 0.0007969715082685794,
  "byte_cc": 0.00019924287706714485,
  "byte_f2": 0.0017931858936043037,
  "byte_fd": 0.00657501494321578,
  "byte_e3": 0.0003984857541342897,
  "byte_8b": 0.0003984857541342897,
  "byte_03": 0.008965929468021518,
  "byte_1f": 0.0021916716477385933,
  "byte_f9": 0.00019924287706714485,
  "byte_d0": 0.0003984857541342897,
  "byte_83": 0.010559872484558678,
  "byte_1a": 0.0003984857541342897,
  "byte_3f": 0.001394700139470014,
  "byte_5b": 0.030683403068340307,
  "byte_2d": 0.0005977286312014345,
  "byte_8d": 0.0005977286312014345,
  "byte_a5": 0.0003984857541342897,
  "byte_cb": 0.00019924287706714485,
  "byte_42": 0.0009962143853357243,
  "byte_95": 0.0005977286312014345,
  "byte_d8": 0.0007969715082685794,
  "byte_9b": 0.0005977286312014345,
  "byte_41": 0.0005977286312014345,
  "byte_77": 0.0021916716477385933,
  "byte_a4": 0.0003984857541342897,
  "byte_c2": 0.0005977286312014345,
  "byte_d7": 0.00019924287706714485,
  "byte_8c": 0.0005977286312014345,
  "byte_31": 0.0009962143853357243,
  "byte_3c": 0.0003984857541342897,
  "byte_e5": 0.003785614664275752,
  "byte_67": 0.0005977286312014345,
  "byte_bd": 0.00019924287706714485,
  "byte_01": 0.03247658896194461,
  "byte_8e": 0.00019924287706714485,
  "byte_39": 0.0003984857541342897,
  "byte_93": 0.0019924287706714486,
  "byte_51": 0.013349272763498704,
  "byte_aa": 0.0005977286312014345,
  "byte_96": 0.0003984857541342897,
  "byte_6c": 0.004781829049611476,
  "byte_68": 0.0019924287706714486,
  "byte_ca": 0.0003984857541342897,
  "byte_70": 0.0019924287706714486,
  "byte_a0": 0.0005977286312014345,
  "byte_82": 0.01892807332137876,
  "byte_ea": 0.00019924287706714485,
  "byte_06": 0.0017931858936043037,
  "byte_de": 0.00019924287706714485,
  "byte_f4": 0.0005977286312014345,
  "byte_09": 0.0019924287706714486,
  "byte_5e": 0.0003984857541342897,
  "byte_a7": 0.0009962143853357243,
  "byte_b3": 0.0005977286312014345,
  "byte_16": 0.009762900976290097,
  "byte_0d": 0.0015939430165371588,
  "byte_4f": 0.0007969715082685794,
  "byte_23": 0.0007969715082685794,
  "byte_b8": 0.0003984857541342897,
  "byte_72": 0.007172743574417215,
  "byte_6e": 0.005977286312014346,
  "byte_34": 0.0031878860330743176,
  "byte_15": 0.008368200836820083,
  "byte_5f": 0.00019924287706714485,
  "byte_91": 0.011556086869894401,
  "byte_90": 0.02012353058378163,
  "byte_32": 0.002789400278940028,
  "byte_f3": 0.0003984857541342897,
  "byte_2b": 0.001394700139470014,
  "byte_3a": 0.0033871289101414623,
  "byte_f1": 0.0009962143853357243,
  "byte_81": 0.01932655907551305,
  "byte_20": 0.027296274158198845,
  "byte_54": 0.0035863717872086074,
  "byte_7a": 0.0019924287706714486,
  "byte_89": 0.0003984857541342897,
  "byte_d6": 0.0003984857541342897,
  "byte_0b": 0.0007969715082685794,
  "byte_9a": 0.0007969715082685794,
  "byte_12": 0.005778043434947201,
  "byte_b6": 0.00019924287706714485,
  "byte_c5": 0.00019924287706714485,
  "byte_2f": 0.00019924287706714485,
  "byte_7b": 0.0007969715082685794,
  "byte_f6": 0.00019924287706714485,
  "byte_73": 0.010958358238692966,
  "byte_ff": 0.12472604104403268,
  "byte_88": 0.0005977286312014345,
  "byte_4e": 0.0005977286312014345,
  "byte_98": 0.00019924287706714485,
  "byte_ab": 0.00019924287706714485,
  "byte_c7": 0.0003984857541342897,
  "byte_e7": 0.0005977286312014345,
  "byte_4d": 0.0007969715082685794,
  "byte_94": 0.0015939430165371588,
  "byte_75": 0.0015939430165371588,
  "byte_4b": 0.00019924287706714485,
  "byte_5a": 0.0015939430165371588,
  "byte_0f": 0.001394700139470014,
  "byte_92": 0.003984857541342897,
  "byte_bc": 0.00019924287706714485,
  "byte_33": 0.0019924287706714486,
  "byte_85": 0.005180314803745766,
  "byte_07": 0.0019924287706714486,
  "byte_1d": 0.001195457262402869,
  "byte_19": 0.0007969715082685794,
  "byte_08": 0.0007969715082685794,
  "byte_24": 0.0041841004184100415,
  "byte_59": 0.0005977286312014345,
  "byte_87": 0.0021916716477385933,
  "byte_86": 0.002988643156007173,
  "byte_76": 0.0007969715082685794,
  "byte_d3": 0.00019924287706714485,
  "byte_13": 0.0021916716477385933,
  "byte_46": 0.0035863717872086074,
  "byte_1b": 0.006375772066148635,
  "byte_cd": 0.0035863717872086074,
  "byte_25": 0.0005977286312014345,
  "byte_7f": 0.007770472205618649,
  "byte_45": 0.002390914524805738,
  "byte_43": 0.002590157401872883,
  "byte_30": 0.002590157401872883,
  "byte_64": 0.008567443713887228,
  "byte_65": 0.011556086869894401,
  "byte_6f": 0.00657501494321578,
  "byte_44": 0.0031878860330743176,
  "byte_7d": 0.0005977286312014345,
  "byte_26": 0.0007969715082685794,
  "byte_69": 0.002988643156007173,
  "byte_74": 0.004582586172544332,
  "byte_17": 0.0005977286312014345,
  "byte_47": 0.0007969715082685794,
  "byte_fc": 0.0005977286312014345,
  "byte_3d": 0.0019924287706714486,
  "byte_fa": 0.00019924287706714485,
  "byte_d1": 0.0003984857541342897,
  "byte_f5": 0.0009962143853357243,
  "byte_ef": 0.0005977286312014345,
  "byte_66": 0.002988643156007173,
  "byte_6d": 0.0009962143853357243,
  "byte_2e": 0.00019924287706714485,
  "byte_22": 0.0009962143853357243,
  "byte_55": 0.001394700139470014,
  "byte_e1": 0.00019924287706714485,
  "byte_ec": 0.00019924287706714485,
  "byte_1e": 0.0003984857541342897,
  "byte_c0": 0.00019924287706714485,
  "byte_f7": 0.00019924287706714485,
  "byte_b2": 0.0003984857541342897,
  "byte_29": 0.0005977286312014345,
  "byte_0a": 0.0005977286312014345,
  "byte_c8": 0.0007969715082685794,
  "byte_c3": 0.00019924287706714485,
  "byte_b9": 0.00019924287706714485,
  "byte_a3": 0.0009962143853357243,
  "byte_53": 0.001195457262402869,
  "byte_e2": 0.0005977286312014345,
  "byte_6b": 0.0003984857541342897,
  "byte_78": 0.0003984857541342897,
  "byte_ad": 0.0003984857541342897,
  "byte_b0": 0.0003984857541342897,
  "byte_37": 0.0003984857541342897,
  "byte_c4": 0.0003984857541342897,
  "byte_a1": 0.0005977286312014345,
  "byte_28": 0.0005977286312014345,
  "byte_0c": 0.0003984857541342897,
  "byte_21": 0.00019924287706714485,
  "byte_49": 0.00019924287706714485,
  "byte_97": 0.0003984857541342897,
  "byte_da": 0.00019924287706714485,
  "byte_af": 0.00019924287706714485,
  "byte_b4": 0.0005977286312014345,
  "byte_0e": 0.0009962143853357243,
  "byte_ba": 0.00019924287706714485,
  "byte_db": 0.0003984857541342897,
  "byte_2a": 0.00019924287706714485,
  "byte_5c": 0.0005977286312014345,
  "byte_dc": 0.0003984857541342897,
  "byte_48": 0.0005977286312014345,
  "byte_58": 0.0003984857541342897,
  "byte_df": 0.0003984857541342897,
  "byte_3b": 0.00019924287706714485,
  "byte_bf": 0.00019924287706714485,
  "byte_38": 0.00019924287706714485,
  "byte_fe": 0.0003984857541342897,
  "byte_a2": 0.0003984857541342897,
  "byte_e8": 0.00019924287706714485,
  "byte_6a": 0.00019924287706714485,
  "byte_8f": 0.00019924287706714485,
  "byte_e6": 0.00019924287706714485,
  "byte_b5": 0.00019924287706714485,
  "num_nodes": 233,
  "num_edges": 118,
  "avg_degree": 1.0128755364806867,
  "density": 0.002182921414829066,
  "connected_components": 127,
  "avg_clustering": 0.005722460658082976,
  "timeline_sequence": [],
  "sourcecode": "/**\n *Submitted for verification at Etherscan.io on 2023-09-28\n*/\n\n// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.19;\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        return account.code.length > 0;\n    }\n\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(\n            address(this).balance >= amount,\n            \"Address: insufficient balance\"\n        );\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(\n            success,\n            \"Address: unable to send value, recipient may have reverted\"\n        );\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                0,\n                \"Address: low-level call failed\"\n            );\n    }\n\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return\n            functionCallWithValue(\n                target,\n                data,\n                value,\n                \"Address: low-level call with value failed\"\n            );\n    }\n\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(\n            address(this).balance >= value,\n            \"Address: insufficient balance for call\"\n        );\n        (bool success, bytes memory returndata) = target.call{value: value}(\n            data\n        );\n        return\n            verifyCallResultFromTarget(\n                target,\n                success,\n                returndata,\n                errorMessage\n            );\n    }\n\n    function functionStaticCall(\n        address target,\n        bytes memory data\n    ) internal view returns (bytes memory) {\n        return\n            functionStaticCall(\n                target,\n                data,\n                \"Address: low-level static call failed\"\n            );\n    }\n\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return\n            verifyCallResultFromTarget(\n                target,\n                success,\n                returndata,\n                errorMessage\n            );\n    }\n\n    function functionDelegateCall(\n        address target,\n        bytes memory data\n    ) internal returns (bytes memory) {\n        return\n            functionDelegateCall(\n                target,\n                data,\n                \"Address: low-level delegate call failed\"\n            );\n    }\n\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return\n            verifyCallResultFromTarget(\n                target,\n                success,\n                returndata,\n                errorMessage\n            );\n    }\n\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure {\n        if (returndata.length > 0) {\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n\ninterface IERC20Permit {\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    function nonces(address owner) external view returns (uint256);\n\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\ninterface IERC20 {\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    event Approval(\n        address indexed owner,\n        address indexed spender,\n        uint256 value\n    );\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    function allowance(\n        address owner,\n        address spender\n    ) external view returns (uint256);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transfer.selector, to, value)\n        );\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.transferFrom.selector, from, to, value)\n        );\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(token.approve.selector, spender, value)\n        );\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(\n            token,\n            abi.encodeWithSelector(\n                token.approve.selector,\n                spender,\n                oldAllowance + value\n            )\n        );\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(\n                oldAllowance >= value,\n                \"SafeERC20: decreased allowance below zero\"\n            );\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(\n                    token.approve.selector,\n                    spender,\n                    oldAllowance - value\n                )\n            );\n        }\n    }\n\n    function forceApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(\n            token.approve.selector,\n            spender,\n            value\n        );\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(\n                token,\n                abi.encodeWithSelector(token.approve.selector, spender, 0)\n            );\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(\n            nonceAfter == nonceBefore + 1,\n            \"SafeERC20: permit did not succeed\"\n        );\n    }\n\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        bytes memory returndata = address(token).functionCall(\n            data,\n            \"SafeERC20: low-level call failed\"\n        );\n        require(\n            returndata.length == 0 || abi.decode(returndata, (bool)),\n            \"SafeERC20: ERC20 operation did not succeed\"\n        );\n    }\n\n    function _callOptionalReturnBool(\n        IERC20 token,\n        bytes memory data\n    ) private returns (bool) {\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success &&\n            (returndata.length == 0 || abi.decode(returndata, (bool))) &&\n            Address.isContract(address(token));\n    }\n}\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(\n        address account\n    ) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    function allowance(\n        address owner,\n        address spender\n    ) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(\n        address spender,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    function increaseAllowance(\n        address spender,\n        uint256 addedValue\n    ) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(\n        address spender,\n        uint256 subtractedValue\n    ) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(\n            currentAllowance >= subtractedValue,\n            \"ERC20: decreased allowance below zero\"\n        );\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(\n            fromBalance >= amount,\n            \"ERC20: transfer amount exceeds balance\"\n        );\n        unchecked {\n            _balances[from] = fromBalance - amount;\n\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(\n                currentAllowance >= amount,\n                \"ERC20: insufficient allowance\"\n            );\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(\n        address indexed previousOwner,\n        address indexed newOwner\n    );\n\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(\n            newOwner != address(0),\n            \"Ownable: new owner is the zero address\"\n        );\n        _transferOwnership(newOwner);\n    }\n\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ncontract Safereum is Ownable, ERC20 {\n    using SafeERC20 for IERC20;\n\n    constructor() ERC20(\"Safereum\", \"SAFEREUM\") {\n        _transferOwnership(0x67c8423a7709aDB8ED31c04DcbB0C161637b807F);\n        _mint(owner(), 1_000_000_000_000 * (10 ** 18));\n    }\n\n    receive() external payable {}\n\n    fallback() external payable {}\n\n    function burn(uint256 amount) external {\n        super._burn(_msgSender(), amount);\n    }\n\n    function claimStuckTokens(address token) external onlyOwner {\n        if (token == address(0x0)) {\n            payable(_msgSender()).transfer(address(this).balance);\n            return;\n        }\n        IERC20 ERC20token = IERC20(token);\n        uint256 balance = ERC20token.balanceOf(address(this));\n        ERC20token.safeTransfer(_msgSender(), balance);\n    }\n}"
}