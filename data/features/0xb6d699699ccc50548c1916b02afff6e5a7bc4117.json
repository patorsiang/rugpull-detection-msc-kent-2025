{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ ISZERO PUSH2 JUMPI PUSH1 CALLVALUE GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 SLOAD PUSH2 PUSH6 CALLVALUE PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 CALLVALUE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH2 JUMP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP2 GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 GT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD DUP2 DUP5 MUL ADD DUP5 EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 MUL SWAP1 POP PUSH1 DUP5 EQ DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xe8 SWAP9 UNKNOWN_0x2b UNKNOWN_0xc7 PUSH25 INVALID_0x70",
  "opcode_entropy": 4.705846672089109,
  "opcode_count": 2467,
  "unique_opcodes": 61,
  "byte_entropy": 4.695064296327999,
  "byte_60": 0.0632810950208292,
  "byte_80": 0.03491370759769887,
  "byte_40": 0.009521920253917874,
  "byte_52": 0.01844872049196588,
  "byte_04": 0.007934933544931562,
  "byte_36": 0.0017853600476096013,
  "byte_10": 0.0029756000793493354,
  "byte_61": 0.029160880777623487,
  "byte_01": 0.03035112080936322,
  "byte_07": 0.0011902400317397343,
  "byte_57": 0.013092640349137076,
  "byte_00": 0.043840507835746875,
  "byte_35": 0.002578853402102757,
  "byte_7c": 0.00019837333862328903,
  "byte_90": 0.036302320968061894,
  "byte_63": 0.006943066851815116,
  "byte_ff": 0.32453878198770086,
  "byte_16": 0.021027573894068636,
  "byte_06": 0.0027772267407260463,
  "byte_fd": 0.005554453481452093,
  "byte_de": 0.00019837333862328903,
  "byte_03": 0.013687760365006943,
  "byte_14": 0.0053560801428288035,
  "byte_11": 0.0019837333862328904,
  "byte_09": 0.0009918666931164452,
  "byte_5e": 0.0005951200158698671,
  "byte_a7": 0.0005951200158698671,
  "byte_b3": 0.0007934933544931561,
  "byte_a1": 0.0011902400317397343,
  "byte_0c": 0.0009918666931164452,
  "byte_ed": 0.0007934933544931561,
  "byte_8c": 0.0005951200158698671,
  "byte_69": 0.0009918666931164452,
  "byte_02": 0.005752826820075382,
  "byte_18": 0.00019837333862328903,
  "byte_0d": 0.0009918666931164452,
  "byte_dd": 0.0013886133703630231,
  "byte_96": 0.00019837333862328903,
  "byte_20": 0.025788534021027574,
  "byte_95": 0.0007934933544931561,
  "byte_f2": 0.0005951200158698671,
  "byte_d4": 0.00039674667724657806,
  "byte_c1": 0.00019837333862328903,
  "byte_23": 0.0005951200158698671,
  "byte_b8": 0.00019837333862328903,
  "byte_72": 0.0015869867089863122,
  "byte_d8": 0.00039674667724657806,
  "byte_2a": 0.00039674667724657806,
  "byte_92": 0.004760960126958937,
  "byte_df": 0.00039674667724657806,
  "byte_5d": 0.00019837333862328903,
  "byte_31": 0.00039674667724657806,
  "byte_3c": 0.0005951200158698671,
  "byte_e5": 0.00039674667724657806,
  "byte_67": 0.00019837333862328903,
  "byte_3e": 0.0007934933544931561,
  "byte_aa": 0.0007934933544931561,
  "byte_f8": 0.00019837333862328903,
  "byte_6b": 0.0005951200158698671,
  "byte_bd": 0.00039674667724657806,
  "byte_5c": 0.00039674667724657806,
  "byte_ac": 0.00019837333862328903,
  "byte_94": 0.00019837333862328903,
  "byte_e8": 0.00039674667724657806,
  "byte_66": 0.00039674667724657806,
  "byte_4e": 0.0009918666931164452,
  "byte_97": 0.00039674667724657806,
  "byte_15": 0.018845467169212458,
  "byte_6d": 0.0005951200158698671,
  "byte_1b": 0.0013886133703630231,
  "byte_22": 0.00019837333862328903,
  "byte_9d": 0.00019837333862328903,
  "byte_70": 0.0007934933544931561,
  "byte_a0": 0.00019837333862328903,
  "byte_82": 0.009125173576671296,
  "byte_7b": 0.00019837333862328903,
  "byte_bc": 0.00019837333862328903,
  "byte_b0": 0.0007934933544931561,
  "byte_08": 0.0015869867089863122,
  "byte_c4": 0.0005951200158698671,
  "byte_8d": 0.0005951200158698671,
  "byte_a5": 0.00039674667724657806,
  "byte_cb": 0.00039674667724657806,
  "byte_5b": 0.025590160682404287,
  "byte_f3": 0.003967466772465781,
  "byte_9b": 0.0005951200158698671,
  "byte_41": 0.0005951200158698671,
  "byte_05": 0.0021821067248561795,
  "byte_4a": 0.00019837333862328903,
  "byte_a9": 0.00019837333862328903,
  "byte_9c": 0.00019837333862328903,
  "byte_bb": 0.00019837333862328903,
  "byte_da": 0.00039674667724657806,
  "byte_b4": 0.00019837333862328903,
  "byte_42": 0.00039674667724657806,
  "byte_3f": 0.00019837333862328903,
  "byte_62": 0.0005951200158698671,
  "byte_49": 0.00019837333862328903,
  "byte_0f": 0.0009918666931164452,
  "byte_c0": 0.0005951200158698671,
  "byte_56": 0.011704026978774052,
  "byte_34": 0.00416584011108907,
  "byte_1d": 0.00019837333862328903,
  "byte_50": 0.03352509422733584,
  "byte_26": 0.00039674667724657806,
  "byte_51": 0.010513786947034318,
  "byte_81": 0.029557627454870065,
  "byte_83": 0.004364213449712359,
  "byte_91": 0.0144812537195001,
  "byte_84": 0.0035707200952192026,
  "byte_4b": 0.00019837333862328903,
  "byte_1f": 0.0005951200158698671,
  "byte_93": 0.0005951200158698671,
  "byte_0a": 0.0037690934338424917,
  "byte_19": 0.0007934933544931561,
  "byte_ad": 0.0005951200158698671,
  "byte_ec": 0.00039674667724657806,
  "byte_73": 0.01606824042848641,
  "byte_7a": 0.0009918666931164452,
  "byte_12": 0.0009918666931164452,
  "byte_6c": 0.0013886133703630231,
  "byte_88": 0.0005951200158698671,
  "byte_a2": 0.00019837333862328903,
  "byte_ab": 0.00039674667724657806,
  "byte_cd": 0.00019837333862328903,
  "byte_d6": 0.00019837333862328903,
  "byte_ae": 0.00039674667724657806,
  "byte_e4": 0.00019837333862328903,
  "byte_43": 0.00019837333862328903,
  "byte_98": 0.0005951200158698671,
  "byte_c6": 0.00039674667724657806,
  "byte_c9": 0.00019837333862328903,
  "byte_d2": 0.00019837333862328903,
  "byte_f4": 0.00039674667724657806,
  "byte_13": 0.003967466772465781,
  "byte_d1": 0.00039674667724657806,
  "byte_21": 0.00019837333862328903,
  "byte_0e": 0.0011902400317397343,
  "byte_4c": 0.0005951200158698671,
  "byte_79": 0.00019837333862328903,
  "byte_a4": 0.00019837333862328903,
  "byte_d0": 0.00019837333862328903,
  "byte_d9": 0.00019837333862328903,
  "byte_5f": 0.00019837333862328903,
  "byte_25": 0.0005951200158698671,
  "byte_9f": 0.00019837333862328903,
  "byte_cc": 0.00019837333862328903,
  "byte_e6": 0.00039674667724657806,
  "byte_47": 0.00019837333862328903,
  "byte_55": 0.002578853402102757,
  "byte_53": 0.00019837333862328903,
  "byte_54": 0.005752826820075382,
  "byte_39": 0.00039674667724657806,
  "byte_1a": 0.00019837333862328903,
  "byte_65": 0.0009918666931164452,
  "byte_5a": 0.0007934933544931561,
  "byte_6e": 0.0007934933544931561,
  "byte_33": 0.0035707200952192026,
  "byte_fc": 0.0005951200158698671,
  "byte_85": 0.0007934933544931561,
  "byte_f1": 0.0009918666931164452,
  "byte_3d": 0.00039674667724657806,
  "byte_7f": 0.0011902400317397343,
  "byte_44": 0.0005951200158698671,
  "byte_6f": 0.0007934933544931561,
  "byte_e1": 0.00019837333862328903,
  "byte_eb": 0.00019837333862328903,
  "byte_7d": 0.00039674667724657806,
  "byte_4f": 0.00039674667724657806,
  "byte_71": 0.00019837333862328903,
  "byte_1e": 0.00039674667724657806,
  "byte_f7": 0.00019837333862328903,
  "byte_b2": 0.00019837333862328903,
  "byte_29": 0.0005951200158698671,
  "byte_c8": 0.0005951200158698671,
  "byte_c7": 0.00039674667724657806,
  "byte_c3": 0.00039674667724657806,
  "byte_b9": 0.00019837333862328903,
  "byte_a3": 0.0005951200158698671,
  "byte_64": 0.00019837333862328903,
  "byte_75": 0.00019837333862328903,
  "byte_74": 0.00019837333862328903,
  "byte_2e": 0.00019837333862328903,
  "byte_17": 0.00039674667724657806,
  "byte_86": 0.0011902400317397343,
  "byte_0b": 0.0005951200158698671,
  "byte_87": 0.00039674667724657806,
  "byte_e2": 0.00039674667724657806,
  "byte_c2": 0.00039674667724657806,
  "byte_68": 0.00039674667724657806,
  "byte_37": 0.00039674667724657806,
  "byte_2b": 0.0005951200158698671,
  "byte_28": 0.00039674667724657806,
  "byte_f5": 0.0007934933544931561,
  "byte_4d": 0.00039674667724657806,
  "byte_ef": 0.00039674667724657806,
  "byte_2c": 0.00019837333862328903,
  "byte_45": 0.00019837333862328903,
  "byte_af": 0.00019837333862328903,
  "byte_ba": 0.00019837333862328903,
  "byte_e9": 0.00019837333862328903,
  "byte_fe": 0.0015869867089863122,
  "byte_30": 0.00019837333862328903,
  "byte_58": 0.00019837333862328903,
  "byte_78": 0.00019837333862328903,
  "byte_b5": 0.00019837333862328903,
  "byte_ee": 0.00019837333862328903,
  "byte_fb": 0.00019837333862328903,
  "byte_b1": 0.00019837333862328903,
  "byte_b7": 0.00019837333862328903,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 5,
  "event_nums": 2,
  "creation_block": 7697324,
  "creation_timestamp": 1557010596,
  "life_time": 2505451.0,
  "duration_seconds": 34309831.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 1e+17,
  "avg_value": 1.6666666666666666e+16,
  "txn_per_block": 1.9956478910791347e-06,
  "avg_gas_limit": 401973.2,
  "std_gas_limit": 551630.8202859589,
  "avg_gas_used": 330077.2,
  "std_gas_used": 585128.1576859552,
  "avg_gas_price": 15580000051.2,
  "std_gas_price": 10343384316.13019,
  "transfer_num": 4,
  "atinversebrah_num": 1,
  "timeline_sequence": [
    [
      7697324,
      1557010596,
      0,
      113,
      100000000000000000,
      1500046,
      1000000000,
      0,
      1,
      7242577,
      1500046,
      15423617
    ],
    [
      7728090,
      1557428021,
      1,
      73,
      0,
      67479,
      6900000256,
      0,
      1,
      5458541,
      51907,
      15392851
    ],
    [
      10202750,
      1591320101,
      12,
      20,
      0,
      67941,
      30000000000,
      0,
      1,
      710982,
      52263,
      12918191
    ],
    [
      10202760,
      1591320231,
      13,
      134,
      0,
      187200,
      20000000000,
      1,
      0,
      5746510,
      23085,
      12918181
    ],
    [
      10202775,
      1591320427,
      14,
      157,
      0,
      187200,
      20000000000,
      1,
      0,
      6846524,
      23085,
      12918166
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.25;\n\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n    // ERC20 Token Smart Contract\n    contract DraperToken {\n        \n        string public constant name = \"Draper Token\";\n        string public constant symbol = \"DRAPER\";\n        uint8 public constant decimals = 10;\n        uint public _totalSupply = 10000000000000000;\n        uint256 public RATE = 1;\n        bool public isMinting = false;\n        bool public isExchangeListed = false;\n        string public constant generatedBy  = \"drapersolutions.com\";\n        \n        using SafeMath for uint256;\n        address public owner;\n        \n         // Functions with this modifier can only be executed by the owner\n         modifier onlyOwner() {\n            if (msg.sender != owner) {\n                throw;\n            }\n             _;\n         }\n     \n        // Balances for each account\n        mapping(address => uint256) balances;\n        // Owner of account approves the transfer of an amount to another account\n        mapping(address => mapping(address=>uint256)) allowed;\n\n        // Its a payable function works as a token factory.\n        function () payable{\n            createTokens();\n        }\n\n        // Constructor\n        constructor() public payable {\n\n            owner = 0xf1E6836b1355c5De3A66E57d8DD9C6D375D94df8; \n            balances[owner] = _totalSupply;\n        }\n\n        //allows owner to burn tokens that are not sold in a crowdsale\n        function burnTokens(uint256 _value) onlyOwner {\n\n             require(balances[msg.sender] >= _value && _value > 0 );\n             _totalSupply = _totalSupply.sub(_value);\n             balances[msg.sender] = balances[msg.sender].sub(_value);\n             \n        }\n\n\n\n        // This function creates Tokens  \n         function createTokens() payable {\n            if(isMinting == true){\n                require(msg.value > 0);\n                uint256  tokens = msg.value.div(100000000000000).mul(RATE);\n                balances[msg.sender] = balances[msg.sender].add(tokens);\n                _totalSupply = _totalSupply.add(tokens);\n                owner.transfer(msg.value);\n            }\n            else{\n                throw;\n            }\n        }\n\n\n        function endCrowdsale() onlyOwner {\n            isMinting = false;\n        }\n\n        function changeCrowdsaleRate(uint256 _value) onlyOwner {\n            RATE = _value;\n        }\n\n\n        \n        function totalSupply() constant returns(uint256){\n            return _totalSupply;\n        }\n        // What is the balance of a particular account?\n        function balanceOf(address _owner) constant returns(uint256){\n            return balances[_owner];\n        }\n\n         // Transfer the balance from owner's account to another account   \n        function transfer(address _to, uint256 _value)  returns(bool) {\n            require(balances[msg.sender] >= _value && _value > 0 );\n            balances[msg.sender] = balances[msg.sender].sub(_value);\n            balances[_to] = balances[_to].add(_value);\n            Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        \n    // Send _value amount of tokens from address _from to address _to\n    // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n    // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n    // fees in sub-currencies; the command should fail unless the _from account has\n    // deliberately authorized the sender of the message via some mechanism; we propose\n    // these standardized APIs for approval:\n    function transferFrom(address _from, address _to, uint256 _value)  returns(bool) {\n        require(allowed[_from][msg.sender] >= _value && balances[_from] >= _value && _value > 0);\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n    \n    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n    // If this function is called again it overwrites the current allowance with _value.\n    function approve(address _spender, uint256 _value) returns(bool){\n        allowed[msg.sender][_spender] = _value; \n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n    \n    // Returns the amount which _spender is still allowed to withdraw from _owner\n    function allowance(address _owner, address _spender) constant returns(uint256){\n        return allowed[_owner][_spender];\n    }\n    \n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}"
}