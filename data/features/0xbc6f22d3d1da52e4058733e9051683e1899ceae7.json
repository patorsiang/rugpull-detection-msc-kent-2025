{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP1 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 SLOAD SUB SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH32 DUP5 DUP5 DUP5 PUSH1 MLOAD DUP1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH32 PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP3 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0x21 UNKNOWN_0xc6 DUP12 PUSH28 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.676488666326718,
  "opcode_count": 3088,
  "unique_opcodes": 55,
  "byte_entropy": 4.39953618958647,
  "byte_60": 0.06337928094358392,
  "byte_80": 0.02998436833878073,
  "byte_40": 0.008242148642887593,
  "byte_52": 0.017052721330112264,
  "byte_04": 0.006963194543129174,
  "byte_36": 0.0014210601108426886,
  "byte_10": 0.0024158021884325706,
  "byte_61": 0.022879067784567286,
  "byte_01": 0.0324001705272133,
  "byte_12": 0.001136848088674151,
  "byte_57": 0.010231632798067358,
  "byte_00": 0.03041068637203354,
  "byte_35": 0.002984226232769646,
  "byte_7c": 0.00014210601108426886,
  "byte_90": 0.03566860878215149,
  "byte_63": 0.004405286343612335,
  "byte_ff": 0.3924968026147506,
  "byte_16": 0.02501065795083132,
  "byte_06": 0.0017052721330112265,
  "byte_fd": 0.005968452465539292,
  "byte_de": 0.00014210601108426886,
  "byte_03": 0.009378996731561746,
  "byte_14": 0.005115816399033679,
  "byte_17": 0.0012789540997584197,
  "byte_09": 0.0014210601108426886,
  "byte_5e": 0.00014210601108426886,
  "byte_a7": 0.0008526360665056132,
  "byte_b3": 0.000994742077589882,
  "byte_18": 0.0008526360665056132,
  "byte_0d": 0.0007105300554213443,
  "byte_dd": 0.001136848088674151,
  "byte_02": 0.004831604376865141,
  "byte_0c": 0.0002842120221685377,
  "byte_23": 0.0008526360665056132,
  "byte_b8": 0.0002842120221685377,
  "byte_72": 0.0002842120221685377,
  "byte_37": 0.000994742077589882,
  "byte_27": 0.00014210601108426886,
  "byte_e2": 0.0005684240443370755,
  "byte_e3": 0.0004263180332528066,
  "byte_bc": 0.0002842120221685377,
  "byte_31": 0.0004263180332528066,
  "byte_3c": 0.0002842120221685377,
  "byte_e5": 0.0004263180332528066,
  "byte_67": 0.0007105300554213443,
  "byte_13": 0.0004263180332528066,
  "byte_38": 0.00014210601108426886,
  "byte_af": 0.00014210601108426886,
  "byte_3e": 0.0005684240443370755,
  "byte_ed": 0.0008526360665056132,
  "byte_3f": 0.0002842120221685377,
  "byte_4b": 0.0002842120221685377,
  "byte_a8": 0.0007105300554213443,
  "byte_3a": 0.0005684240443370755,
  "byte_95": 0.0007105300554213443,
  "byte_5a": 0.0014210601108426886,
  "byte_15": 0.014636919141679692,
  "byte_c3": 0.0002842120221685377,
  "byte_73": 0.019752735540713374,
  "byte_ac": 0.0004263180332528066,
  "byte_5c": 0.0008526360665056132,
  "byte_65": 0.000994742077589882,
  "byte_81": 0.02401591587324144,
  "byte_97": 0.0004263180332528066,
  "byte_bb": 0.0005684240443370755,
  "byte_70": 0.0004263180332528066,
  "byte_a0": 0.0002842120221685377,
  "byte_82": 0.0086684666761404,
  "byte_d7": 0.00014210601108426886,
  "byte_79": 0.0002842120221685377,
  "byte_ba": 0.0002842120221685377,
  "byte_50": 0.02501065795083132,
  "byte_05": 0.0024158021884325706,
  "byte_2e": 0.0002842120221685377,
  "byte_84": 0.002842120221685377,
  "byte_56": 0.007673724598550519,
  "byte_cb": 0.0002842120221685377,
  "byte_59": 0.00014210601108426886,
  "byte_45": 0.0002842120221685377,
  "byte_8d": 0.0005684240443370755,
  "byte_a5": 0.00014210601108426886,
  "byte_5b": 0.018047463407702146,
  "byte_d8": 0.00014210601108426886,
  "byte_9b": 0.0005684240443370755,
  "byte_41": 0.00014210601108426886,
  "byte_a9": 0.0005684240443370755,
  "byte_9c": 0.00014210601108426886,
  "byte_43": 0.0004263180332528066,
  "byte_d4": 0.00014210601108426886,
  "byte_ee": 0.00014210601108426886,
  "byte_1d": 0.0002842120221685377,
  "byte_62": 0.0002842120221685377,
  "byte_f2": 0.000994742077589882,
  "byte_8b": 0.0004263180332528066,
  "byte_07": 0.001136848088674151,
  "byte_76": 0.0002842120221685377,
  "byte_34": 0.003268438254938184,
  "byte_2c": 0.0004263180332528066,
  "byte_b9": 0.0002842120221685377,
  "byte_51": 0.00881057268722467,
  "byte_20": 0.02501065795083132,
  "byte_83": 0.004405286343612335,
  "byte_91": 0.013215859030837005,
  "byte_6c": 0.00014210601108426886,
  "byte_1f": 0.0014210601108426886,
  "byte_99": 0.00014210601108426886,
  "byte_0a": 0.004263180332528066,
  "byte_19": 0.0012789540997584197,
  "byte_92": 0.004405286343612335,
  "byte_f3": 0.0024158021884325706,
  "byte_08": 0.004547392354696604,
  "byte_21": 0.0004263180332528066,
  "byte_a2": 0.00014210601108426886,
  "byte_b0": 0.0005684240443370755,
  "byte_c8": 0.0008526360665056132,
  "byte_d9": 0.0002842120221685377,
  "byte_28": 0.000994742077589882,
  "byte_f1": 0.0005684240443370755,
  "byte_4a": 0.00014210601108426886,
  "byte_53": 0.00014210601108426886,
  "byte_f7": 0.0004263180332528066,
  "byte_a1": 0.0015631661219269574,
  "byte_aa": 0.0005684240443370755,
  "byte_0e": 0.0008526360665056132,
  "byte_dc": 0.0002842120221685377,
  "byte_3d": 0.0004263180332528066,
  "byte_b4": 0.0002842120221685377,
  "byte_bd": 0.0002842120221685377,
  "byte_cc": 0.0002842120221685377,
  "byte_68": 0.0008526360665056132,
  "byte_71": 0.0002842120221685377,
  "byte_bf": 0.0004263180332528066,
  "byte_8c": 0.0004263180332528066,
  "byte_4f": 0.0005684240443370755,
  "byte_8e": 0.00014210601108426886,
  "byte_2a": 0.00014210601108426886,
  "byte_0b": 0.0004263180332528066,
  "byte_e0": 0.0005684240443370755,
  "byte_b7": 0.0002842120221685377,
  "byte_54": 0.008100042631803325,
  "byte_24": 0.0005684240443370755,
  "byte_11": 0.000994742077589882,
  "byte_32": 0.0002842120221685377,
  "byte_75": 0.00014210601108426886,
  "byte_33": 0.0027000142106011083,
  "byte_85": 0.0012789540997584197,
  "byte_55": 0.0018473781440954953,
  "byte_7f": 0.0012789540997584197,
  "byte_e1": 0.00014210601108426886,
  "byte_eb": 0.00014210601108426886,
  "byte_ec": 0.0002842120221685377,
  "byte_7d": 0.0002842120221685377,
  "byte_d1": 0.0002842120221685377,
  "byte_42": 0.0002842120221685377,
  "byte_1e": 0.0005684240443370755,
  "byte_c0": 0.00014210601108426886,
  "byte_b2": 0.00014210601108426886,
  "byte_29": 0.0002842120221685377,
  "byte_c7": 0.00014210601108426886,
  "byte_25": 0.0005684240443370755,
  "byte_a3": 0.000994742077589882,
  "byte_ce": 0.00014210601108426886,
  "byte_86": 0.0018473781440954953,
  "byte_1a": 0.0008526360665056132,
  "byte_30": 0.0002842120221685377,
  "byte_87": 0.0004263180332528066,
  "byte_1b": 0.0017052721330112265,
  "byte_26": 0.0004263180332528066,
  "byte_ad": 0.0007105300554213443,
  "byte_69": 0.0007105300554213443,
  "byte_c2": 0.0005684240443370755,
  "byte_fc": 0.0005684240443370755,
  "byte_2b": 0.0005684240443370755,
  "byte_c4": 0.0004263180332528066,
  "byte_f5": 0.0008526360665056132,
  "byte_4d": 0.0004263180332528066,
  "byte_ef": 0.0004263180332528066,
  "byte_93": 0.0005684240443370755,
  "byte_78": 0.0002842120221685377,
  "byte_2f": 0.0005684240443370755,
  "byte_9e": 0.0002842120221685377,
  "byte_df": 0.00014210601108426886,
  "byte_9f": 0.00014210601108426886,
  "byte_f4": 0.0002842120221685377,
  "byte_0f": 0.0005684240443370755,
  "byte_39": 0.00014210601108426886,
  "byte_64": 0.00014210601108426886,
  "byte_f9": 0.0002842120221685377,
  "byte_b1": 0.0002842120221685377,
  "byte_74": 0.0004263180332528066,
  "byte_ca": 0.0002842120221685377,
  "byte_6e": 0.00014210601108426886,
  "byte_9a": 0.00014210601108426886,
  "byte_ea": 0.00014210601108426886,
  "byte_6a": 0.00014210601108426886,
  "byte_8a": 0.00014210601108426886,
  "byte_7b": 0.0002842120221685377,
  "byte_fb": 0.00014210601108426886,
  "byte_b5": 0.00014210601108426886,
  "byte_c1": 0.0002842120221685377,
  "byte_d5": 0.00014210601108426886,
  "byte_22": 0.0004263180332528066,
  "byte_e6": 0.00014210601108426886,
  "byte_66": 0.00014210601108426886,
  "byte_d3": 0.0002842120221685377,
  "byte_b6": 0.00014210601108426886,
  "byte_db": 0.00014210601108426886,
  "byte_3b": 0.0002842120221685377,
  "byte_a4": 0.00014210601108426886,
  "byte_94": 0.0002842120221685377,
  "byte_f6": 0.0002842120221685377,
  "byte_48": 0.0002842120221685377,
  "byte_cf": 0.00014210601108426886,
  "byte_f8": 0.0002842120221685377,
  "byte_6f": 0.0002842120221685377,
  "byte_fe": 0.0002842120221685377,
  "byte_47": 0.00014210601108426886,
  "byte_7a": 0.0002842120221685377,
  "byte_58": 0.00014210601108426886,
  "byte_c6": 0.00014210601108426886,
  "byte_a6": 0.00014210601108426886,
  "byte_f0": 0.00014210601108426886,
  "byte_4c": 0.00014210601108426886,
  "byte_d6": 0.00014210601108426886,
  "byte_5f": 0.00014210601108426886,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 7,
  "event_nums": 10,
  "creation_block": 6293162,
  "creation_timestamp": 1536395524,
  "life_time": 383.0,
  "duration_seconds": 5310.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.018229166666666668,
  "avg_gas_limit": 347798.85714285716,
  "std_gas_limit": 737697.022617673,
  "avg_gas_used": 344009.5714285714,
  "std_gas_used": 739131.7899783034,
  "avg_gas_price": 30194285714.285713,
  "std_gas_price": 17085605350.823298,
  "transfer_num": 2,
  "transferbyowner_num": 4,
  "atinversebrah_num": 1,
  "timeline_sequence": [
    [
      6293162,
      1536395524,
      0,
      16,
      0,
      2154471,
      3360000000,
      0,
      1,
      7254468,
      2154471,
      16827782
    ],
    [
      6293272,
      1536396861,
      1,
      120,
      0,
      79575,
      3000000000,
      0,
      1,
      7776352,
      53050,
      16827672
    ],
    [
      6293466,
      1536399773,
      2,
      13,
      0,
      40480,
      41000000000,
      0,
      1,
      546636,
      40480,
      16827478
    ],
    [
      6293468,
      1536399829,
      3,
      13,
      0,
      40480,
      41000000000,
      0,
      1,
      894413,
      40480,
      16827476
    ],
    [
      6293478,
      1536399997,
      4,
      16,
      0,
      40736,
      41000000000,
      0,
      1,
      549152,
      40736,
      16827466
    ],
    [
      6293488,
      1536400084,
      5,
      30,
      0,
      40800,
      41000000000,
      0,
      1,
      6201022,
      40800,
      16827456
    ],
    [
      6293545,
      1536400834,
      6,
      1,
      0,
      38050,
      41000000000,
      0,
      1,
      59050,
      38050,
      16827399
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.23;\n\nlibrary SafeMath {\n\n  function mul(uint a, uint b) internal pure returns (uint) {\n    if (a == 0) {\n      return 0;\n    }\n    uint c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal pure returns (uint) {\n    uint c = a / b;\n    return c;\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract owned {\n    event TransferOwnership(address _owner, address _newOwner);\n    event OwnerUpdate(address _prevOwner, address _newOwner);\n    event TransferByOwner(address fromAddress, address toAddress, uint tokens);\n    event Pause();\n    event Unpause();\n    \n    address public owner;\n    address public newOwner = 0x0;\n    bool public paused = false;\n\n    constructor () public {\n        owner = msg.sender; \n    }\n\n    modifier onlyOwner {\n        require (msg.sender == owner);\n        _;\n    }\n    \n    // ------------------------------------------------------------------------\n    // Modifier to make a function callable only when the contract is not paused.\n    // ------------------------------------------------------------------------\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n    \n    // ------------------------------------------------------------------------\n    // Modifier to make a function callable only when the contract is paused.\n    // ------------------------------------------------------------------------\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n   \n    // ------------------------------------------------------------------------\n    // transfer owner to new address\n    // ------------------------------------------------------------------------\n    function transferOwnership(address _newOwner) public onlyOwner {\n        require(_newOwner != owner);\n        newOwner = _newOwner;\n        emit TransferOwnership(owner, _newOwner);\n    }\n    \n    // ------------------------------------------------------------------------\n    // accept the ownership\n    // ------------------------------------------------------------------------\n    function acceptOwnership() public{\n        require(msg.sender == newOwner);\n        emit OwnerUpdate(owner, newOwner);\n        owner = newOwner;\n        newOwner = 0x0;\n    }\n      \n    // ------------------------------------------------------------------------\n    // called by the owner to pause, triggers stopped state\n    // ------------------------------------------------------------------------\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        emit Pause();\n    }\n    \n    // ------------------------------------------------------------------------\n    // called by the owner to unpause, returns to normal state\n    // ------------------------------------------------------------------------\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        emit Unpause();\n    }\n}\n\ncontract ERC20Interface {\n    function totalSupply() public constant returns (uint);\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n    function transfer(address to, uint tokens) public returns (bool success);\n    function approve(address spender, uint tokens) public returns (bool success);\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);  \n}\n\ncontract  GoodsToken is ERC20Interface, owned {\n    using SafeMath for uint;   \n    string public name; \n    string public symbol; \n    uint public decimals;\n    uint internal maxSupply; \n    uint public totalSupply; \n    address public beneficiary;\n    \n    mapping (address => uint) public balances;\n    mapping(address => mapping(address => uint)) public allowed;\n  \n    constructor() public {         \n        name = \"GoodsToken\";    \n        symbol = \"GDS\";    \n        decimals = 18;\n        maxSupply = 100000000 * (10 ** decimals);   \n        totalSupply = maxSupply;//totalSupply.add(maxSupply);\n        beneficiary = msg.sender;\n        balances[beneficiary] = balances[beneficiary].add(totalSupply);\n    }\n    \n    // ------------------------------------------------------------------------\n    // Total supply\n    // ------------------------------------------------------------------------\n    function totalSupply() public constant returns (uint) {\n        return totalSupply  - balances[address(0)];\n    }\n\n    // ------------------------------------------------------------------------\n    // Get the token balance for account tokenOwner\n    // ------------------------------------------------------------------------\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n        return balances[tokenOwner];\n    }\n\n    // ------------------------------------------------------------------------\n    // Transfer the balance from token owner's account to to account\n    // - Owner's account must have sufficient balance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n    function transfer(address _to, uint _value) public whenNotPaused returns (bool success) {\n        if (balances[msg.sender] < _value) revert() ;           \n        if (balances[_to] + _value < balances[_to]) revert(); \n        balances[msg.sender] = balances[msg.sender].sub(_value); \n        balances[_to] = balances[_to].add(_value);\n        emit Transfer(msg.sender, _to, _value);          \n        return true;\n    }\n    \n    //----------------------------------------------------------\n    //transfer By Owner \n    //----------------------------------------------------------------------------\n    function transferByOwner(address _from, address _to, uint _value) public onlyOwner returns (bool success) {\n        if (balances[_from] < _value) revert(); \n        if (balances[_to] + _value < balances[_to]) revert();\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value); \n        emit Transfer(_from, _to, _value);\n        emit TransferByOwner(_from, _to, _value);\n        return true;\n    }\n    // ------------------------------------------------------------------------\n    // Token owner can approve for spender to transferFrom(...) tokens\n    // from the token owner's account\n    // recommends that there are no checks for the approval double-spend attack\n    // as this should be implemented in user interfaces \n    // ------------------------------------------------------------------------\n    function approve(address spender, uint tokens) public whenNotPaused returns (bool success) {\n        allowed[msg.sender][spender] = tokens;\n        emit Approval(msg.sender, spender, tokens);\n        return true;\n    }\n    \n    // ------------------------------------------------------------------------\n    // Transfer tokens from the from account to the to account\n    //\n    // The calling account must already have sufficient tokens approve(...)-d\n    // for spending from the from account and\n    // - From account must have sufficient balance to transfer\n    // - Spender must have sufficient allowance to transfer\n    // - 0 value transfers are allowed\n    // ------------------------------------------------------------------------\n   function transferFrom(address _from, address _to, uint _value) public whenNotPaused returns (bool success) {\n        if (balances[_from] < _value) revert();                \n        if (balances[_to] + _value < balances[_to]) revert(); \n        if (_value > allowed[_from][msg.sender]) revert(); \n        balances[_from] = balances[_from].sub(_value);                     \n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value); \n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    // ------------------------------------------------------------------------\n    // Returns the amount of tokens approved by the owner that can be\n    // transferred to the spender's account\n    // ------------------------------------------------------------------------\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n        return allowed[tokenOwner][spender];\n    }\n\n    // ------------------------------------------------------------------------\n    // Don't accept ETH\n    // ------------------------------------------------------------------------\n    function () public payable {\n        revert();  \n    }  \n}"
}