{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 DUP2 ADD SWAP2 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 DUP1 CALLDATALOAD DUP3 DUP2 ADD SWAP3 SWAP1 DUP3 ADD CALLDATALOAD SWAP2 DUP2 CALLDATALOAD DUP1 DUP4 ADD SWAP3 SWAP1 DUP3 ADD CALLDATALOAD SWAP2 PUSH1 CALLDATALOAD SWAP2 DUP3 ADD SWAP2 ADD CALLDATALOAD PUSH4 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 DUP2 ADD SWAP2 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH4 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 DUP2 CALLDATALOAD DUP2 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 DUP1 CALLDATALOAD DUP3 DUP2 ADD SWAP3 SWAP2 ADD CALLDATALOAD SWAP1 PUSH4 SWAP1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 DUP1 CALLDATALOAD DUP3 DUP2 ADD SWAP3 SWAP1 DUP3 ADD CALLDATALOAD SWAP2 DUP2 CALLDATALOAD SWAP2 DUP3 ADD SWAP2 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 DUP2 ADD SWAP2 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP4 DUP4 PUSH1 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 CALLER DUP3 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP5 DUP5 PUSH1 DUP10 DUP10 PUSH1 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 PUSH2 SWAP3 SWAP1 SWAP2 PUSH2 JUMP JUMPDEST POP DUP2 ISZERO PUSH2 JUMPI DUP1 PUSH1 DUP5 DUP5 PUSH1 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 DUP1 SLOAD PUSH4 NOT AND PUSH4 SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND SWAP1 SSTORE PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 DUP4 DUP4 PUSH1 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 SLOAD PUSH4 AND SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SELFDESTRUCT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH21 NOT AND PUSH1 PUSH1 EXP OR SWAP1 SSTORE PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 DUP1 MLOAD PUSH2 SWAP3 SWAP2 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP4 ISZERO ISZERO OR SWAP1 SSTORE PUSH32 SWAP1 DUP4 SWAP1 DUP4 SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP5 DUP5 PUSH1 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 DUP1 SLOAD PUSH4 NOT AND PUSH4 SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP2 PUSH1 DUP7 DUP7 PUSH1 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 PUSH2 SWAP3 SWAP1 SWAP2 PUSH2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP4 DUP4 PUSH1 MLOAD DUP1 DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP3 POP POP POP SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND SWAP2 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP3 DUP1 ADD PUSH1 NOT DUP3 CALLDATALOAD AND OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 CALLDATALOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 SWAP2 POP PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST SWAP1 JUMP STOP LOG1 PUSH6 SHA3 GASPRICE CALLER JUMP UNKNOWN_0xe6 PUSH2 DUP3 GAS PUSH12 UNKNOWN_0x28 SWAP10 SSTORE UNKNOWN_0xe8 SWAP10 UNKNOWN_0xdf RETURNDATACOPY UNKNOWN_0xc0 INVALID_0x6e",
  "opcode_entropy": 4.7643043955298525,
  "opcode_count": 2335,
  "unique_opcodes": 70,
  "byte_entropy": 5.743084724398853,
  "byte_60": 0.10990938322128033,
  "byte_40": 0.014323297281496639,
  "byte_52": 0.013154048523823443,
  "byte_04": 0.01636948260742473,
  "byte_36": 0.0008769365682548962,
  "byte_10": 0.00233849751534639,
  "byte_61": 0.04793919906460099,
  "byte_01": 0.056123940368313356,
  "byte_27": 0.0040923706518561824,
  "byte_57": 0.024846536100555393,
  "byte_63": 0.00935399006138556,
  "byte_ff": 0.026600409237065185,
  "byte_7c": 0.00029231218941829873,
  "byte_00": 0.0467699503069278,
  "byte_35": 0.00964630225080386,
  "byte_16": 0.02543116047939199,
  "byte_20": 0.01870798012277112,
  "byte_5c": 0.0008769365682548962,
  "byte_28": 0.0014615609470914938,
  "byte_78": 0.0008769365682548962,
  "byte_81": 0.028938906752411574,
  "byte_14": 0.010230926629640456,
  "byte_29": 0.0008769365682548962,
  "byte_80": 0.04413914060216311,
  "byte_2a": 0.0008769365682548962,
  "byte_a0": 0.011107863197895352,
  "byte_da": 0.001169248757673195,
  "byte_47": 0.0005846243788365975,
  "byte_4b": 0.0005846243788365975,
  "byte_2e": 0.0014615609470914938,
  "byte_1a": 0.001169248757673195,
  "byte_7d": 0.0008769365682548962,
  "byte_4d": 0.00029231218941829873,
  "byte_e0": 0.001169248757673195,
  "byte_31": 0.0005846243788365975,
  "byte_d4": 0.0005846243788365975,
  "byte_13": 0.0008769365682548962,
  "byte_25": 0.0008769365682548962,
  "byte_f6": 0.0005846243788365975,
  "byte_f7": 0.0005846243788365975,
  "byte_ab": 0.0005846243788365975,
  "byte_5e": 0.00029231218941829873,
  "byte_02": 0.023969599532300497,
  "byte_37": 0.002630809704764689,
  "byte_0f": 0.0005846243788365975,
  "byte_ed": 0.0005846243788365975,
  "byte_6e": 0.0005846243788365975,
  "byte_3c": 0.0005846243788365975,
  "byte_3f": 0.00029231218941829873,
  "byte_a8": 0.00029231218941829873,
  "byte_3a": 0.001169248757673195,
  "byte_7b": 0.001169248757673195,
  "byte_97": 0.0008769365682548962,
  "byte_5a": 0.001169248757673195,
  "byte_bb": 0.0005846243788365975,
  "byte_8e": 0.0005846243788365975,
  "byte_39": 0.00029231218941829873,
  "byte_a1": 0.0017538731365097924,
  "byte_d9": 0.0008769365682548962,
  "byte_17": 0.002630809704764689,
  "byte_34": 0.007600116924875768,
  "byte_c0": 0.001169248757673195,
  "byte_83": 0.013446360713241743,
  "byte_19": 0.003800058462437884,
  "byte_7e": 0.0008769365682548962,
  "byte_f0": 0.0008769365682548962,
  "byte_84": 0.005261619409529378,
  "byte_56": 0.018415667933352822,
  "byte_cb": 0.001169248757673195,
  "byte_59": 0.0008769365682548962,
  "byte_03": 0.0233849751534639,
  "byte_0a": 0.013154048523823443,
  "byte_8d": 0.0008769365682548962,
  "byte_a5": 0.001169248757673195,
  "byte_5b": 0.03536977491961415,
  "byte_1d": 0.00029231218941829873,
  "byte_95": 0.0005846243788365975,
  "byte_7f": 0.0017538731365097924,
  "byte_05": 0.004969307220111079,
  "byte_0b": 0.0017538731365097924,
  "byte_4c": 0.00029231218941829873,
  "byte_b9": 0.00029231218941829873,
  "byte_67": 0.00029231218941829873,
  "byte_5f": 0.0005846243788365975,
  "byte_33": 0.0043846828412744815,
  "byte_91": 0.024554223911137093,
  "byte_b0": 0.0005846243788365975,
  "byte_e2": 0.0005846243788365975,
  "byte_51": 0.015200233849751535,
  "byte_b6": 0.0005846243788365975,
  "byte_e3": 0.0008769365682548962,
  "byte_71": 0.00029231218941829873,
  "byte_fd": 0.012569424144986846,
  "byte_e8": 0.0008769365682548962,
  "byte_48": 0.00029231218941829873,
  "byte_ba": 0.0005846243788365975,
  "byte_45": 0.00029231218941829873,
  "byte_f2": 0.0008769365682548962,
  "byte_a6": 0.0008769365682548962,
  "byte_6a": 0.0005846243788365975,
  "byte_8b": 0.0005846243788365975,
  "byte_93": 0.0008769365682548962,
  "byte_15": 0.019877228880444315,
  "byte_24": 0.002630809704764689,
  "byte_b2": 0.0008769365682548962,
  "byte_69": 0.0014615609470914938,
  "byte_82": 0.01900029231218942,
  "byte_90": 0.04092370651856182,
  "byte_50": 0.028938906752411574,
  "byte_1f": 0.0043846828412744815,
  "byte_d2": 0.0005846243788365975,
  "byte_92": 0.009938614440222157,
  "byte_f3": 0.0017538731365097924,
  "byte_eb": 0.00029231218941829873,
  "byte_fc": 0.0008769365682548962,
  "byte_06": 0.003800058462437884,
  "byte_09": 0.00233849751534639,
  "byte_1e": 0.00029231218941829873,
  "byte_44": 0.0005846243788365975,
  "byte_64": 0.0005846243788365975,
  "byte_bc": 0.0005846243788365975,
  "byte_86": 0.001169248757673195,
  "byte_07": 0.003215434083601286,
  "byte_99": 0.0008769365682548962,
  "byte_ac": 0.0005846243788365975,
  "byte_e9": 0.00029231218941829873,
  "byte_de": 0.0005846243788365975,
  "byte_08": 0.003215434083601286,
  "byte_4a": 0.00029231218941829873,
  "byte_be": 0.00029231218941829873,
  "byte_30": 0.001169248757673195,
  "byte_42": 0.00029231218941829873,
  "byte_94": 0.0005846243788365975,
  "byte_96": 0.00233849751534639,
  "byte_df": 0.001169248757673195,
  "byte_85": 0.0020461853259280912,
  "byte_32": 0.00029231218941829873,
  "byte_58": 0.0005846243788365975,
  "byte_70": 0.0005846243788365975,
  "byte_75": 0.0005846243788365975,
  "byte_76": 0.0005846243788365975,
  "byte_9e": 0.0005846243788365975,
  "byte_54": 0.012569424144986846,
  "byte_cd": 0.0008769365682548962,
  "byte_e4": 0.00029231218941829873,
  "byte_f9": 0.0008769365682548962,
  "byte_88": 0.0008769365682548962,
  "byte_f1": 0.00029231218941829873,
  "byte_0c": 0.004969307220111079,
  "byte_ef": 0.001169248757673195,
  "byte_c4": 0.0005846243788365975,
  "byte_11": 0.0017538731365097924,
  "byte_b4": 0.0008769365682548962,
  "byte_89": 0.0008769365682548962,
  "byte_d7": 0.00029231218941829873,
  "byte_55": 0.0043846828412744815,
  "byte_74": 0.0005846243788365975,
  "byte_2f": 0.0014615609470914938,
  "byte_68": 0.0008769365682548962,
  "byte_9f": 0.00029231218941829873,
  "byte_f4": 0.00029231218941829873,
  "byte_ad": 0.00029231218941829873,
  "byte_d1": 0.00029231218941829873,
  "byte_12": 0.00029231218941829873,
  "byte_a9": 0.0005846243788365975,
  "byte_79": 0.00029231218941829873,
  "byte_8c": 0.00029231218941829873,
  "byte_1b": 0.00029231218941829873,
  "byte_73": 0.0005846243788365975,
  "byte_9b": 0.00029231218941829873,
  "byte_22": 0.0005846243788365975,
  "byte_e6": 0.001169248757673195,
  "byte_66": 0.00029231218941829873,
  "byte_d3": 0.0008769365682548962,
  "byte_23": 0.00029231218941829873,
  "byte_db": 0.0008769365682548962,
  "byte_0e": 0.00029231218941829873,
  "byte_2b": 0.00029231218941829873,
  "byte_3b": 0.00029231218941829873,
  "byte_a4": 0.0005846243788365975,
  "byte_a3": 0.0008769365682548962,
  "byte_3d": 0.00029231218941829873,
  "byte_bf": 0.0005846243788365975,
  "byte_87": 0.0005846243788365975,
  "byte_41": 0.0008769365682548962,
  "byte_2c": 0.0005846243788365975,
  "byte_d0": 0.0008769365682548962,
  "byte_f5": 0.00029231218941829873,
  "byte_aa": 0.00029231218941829873,
  "byte_46": 0.00029231218941829873,
  "byte_9c": 0.00029231218941829873,
  "byte_53": 0.0005846243788365975,
  "byte_49": 0.00029231218941829873,
  "byte_af": 0.00029231218941829873,
  "byte_18": 0.00029231218941829873,
  "byte_6f": 0.00029231218941829873,
  "byte_6b": 0.0005846243788365975,
  "byte_a2": 0.0005846243788365975,
  "byte_0d": 0.0008769365682548962,
  "byte_e7": 0.00029231218941829873,
  "byte_65": 0.00029231218941829873,
  "byte_62": 0.00029231218941829873,
  "byte_7a": 0.0005846243788365975,
  "byte_72": 0.0005846243788365975,
  "byte_e5": 0.00029231218941829873,
  "byte_bd": 0.00029231218941829873,
  "byte_d6": 0.00029231218941829873,
  "byte_fb": 0.00029231218941829873,
  "byte_3e": 0.00029231218941829873,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 8,
  "event_nums": 2,
  "creation_block": 5051858,
  "creation_timestamp": 1518077013,
  "life_time": 7558.0,
  "duration_seconds": 108576.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 29057500000000.0,
  "avg_value": 3228611111111.1113,
  "txn_per_block": 0.0010583410504034925,
  "avg_gas_limit": 141867.875,
  "std_gas_limit": 342495.07577716996,
  "avg_gas_used": 140430.375,
  "std_gas_used": 343082.16860685777,
  "avg_gas_price": 6000000000.0,
  "std_gas_price": 8485281374.23857,
  "monethaaddressset_num": 1,
  "ownershiptransferred_num": 1,
  "setmonethaaddress_num": 1,
  "transferownership_num": 1,
  "timeline_sequence": [
    [
      5051858,
      1518077013,
      13,
      57,
      0,
      1047084,
      8000000000,
      0,
      1,
      2879268,
      1047084,
      18069555
    ],
    [
      5052114,
      1518080757,
      21,
      90,
      0,
      45537,
      20000000000,
      0,
      1,
      2936758,
      45537,
      18069299
    ],
    [
      5052116,
      1518080807,
      22,
      106,
      0,
      30822,
      20000000000,
      0,
      1,
      3316913,
      30822,
      18069297
    ],
    [
      5052215,
      1518082230,
      0,
      0,
      14775000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5053062,
      1518094469,
      0,
      0,
      985000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5053262,
      1518097732,
      0,
      0,
      492500000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5058559,
      1518173232,
      0,
      0,
      985000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5059416,
      1518185589,
      0,
      0,
      11820000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity 0.4.18;\n\n// File: zeppelin-solidity/contracts/ownership/Ownable.sol\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n// File: contracts/Restricted.sol\n\n/** @title Restricted\n *  Exposes onlyMonetha modifier\n */\ncontract Restricted is Ownable {\n\n    //MonethaAddress set event\n    event MonethaAddressSet(\n        address _address,\n        bool _isMonethaAddress\n    );\n\n    mapping (address => bool) public isMonethaAddress;\n\n    /**\n     *  Restrict methods in such way, that they can be invoked only by monethaAddress account.\n     */\n    modifier onlyMonetha() {\n        require(isMonethaAddress[msg.sender]);\n        _;\n    }\n\n    /**\n     *  Allows owner to set new monetha address\n     */\n    function setMonethaAddress(address _address, bool _isMonethaAddress) onlyOwner public {\n        isMonethaAddress[_address] = _isMonethaAddress;\n\n        MonethaAddressSet(_address, _isMonethaAddress);\n    }\n}\n\n// File: contracts/SafeDestructible.sol\n\n/**\n * @title SafeDestructible\n * Base contract that can be destroyed by owner.\n * Can be destructed if there are no funds on contract balance.\n */\ncontract SafeDestructible is Ownable {\n    function destroy() onlyOwner public {\n        require(this.balance == 0);\n        selfdestruct(owner);\n    }\n}\n\n// File: zeppelin-solidity/contracts/lifecycle/Pausable.sol\n\n/**\n * @title Pausable\n * @dev Base contract which allows children to implement an emergency stop mechanism.\n */\ncontract Pausable is Ownable {\n  event Pause();\n  event Unpause();\n\n  bool public paused = false;\n\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is not paused.\n   */\n  modifier whenNotPaused() {\n    require(!paused);\n    _;\n  }\n\n  /**\n   * @dev Modifier to make a function callable only when the contract is paused.\n   */\n  modifier whenPaused() {\n    require(paused);\n    _;\n  }\n\n  /**\n   * @dev called by the owner to pause, triggers stopped state\n   */\n  function pause() onlyOwner whenNotPaused public {\n    paused = true;\n    Pause();\n  }\n\n  /**\n   * @dev called by the owner to unpause, returns to normal state\n   */\n  function unpause() onlyOwner whenPaused public {\n    paused = false;\n    Unpause();\n  }\n}\n\n// File: zeppelin-solidity/contracts/ownership/Contactable.sol\n\n/**\n * @title Contactable token\n * @dev Basic version of a contactable contract, allowing the owner to provide a string with their\n * contact information.\n */\ncontract Contactable is Ownable{\n\n    string public contactInformation;\n\n    /**\n     * @dev Allows the owner to set a string with their contact information.\n     * @param info The contact information to attach to the contract.\n     */\n    function setContactInformation(string info) onlyOwner public {\n         contactInformation = info;\n     }\n}\n\n// File: contracts/MerchantWallet.sol\n\n/**\n *  @title MerchantWallet\n *  Serves as a public Merchant profile with merchant profile info, \n *      payment settings and latest reputation value.\n *  Also MerchantWallet accepts payments for orders.\n */\n\ncontract MerchantWallet is Pausable, SafeDestructible, Contactable, Restricted {\n    \n    string constant VERSION = \"0.3\";\n\n    /// Address of merchant's account, that can withdraw from wallet\n    address public merchantAccount;\n    \n    /// Unique Merchant identifier hash\n    bytes32 public merchantIdHash;\n\n    /// profileMap stores general information about the merchant\n    mapping (string=>string) profileMap;\n\n    /// paymentSettingsMap stores payment and order settings for the merchant\n    mapping (string=>string) paymentSettingsMap;\n\n    /// compositeReputationMap stores composite reputation, that compraises from several metrics\n    mapping (string=>uint32) compositeReputationMap;\n\n    /// number of last digits in compositeReputation for fractional part\n    uint8 public constant REPUTATION_DECIMALS = 4;\n\n    modifier onlyMerchant() {\n        require(msg.sender == merchantAccount);\n        _;\n    }\n\n    /**\n     *  @param _merchantAccount Address of merchant's account, that can withdraw from wallet\n     *  @param _merchantId Merchant identifier\n     */\n    function MerchantWallet(address _merchantAccount, string _merchantId) public {\n        require(_merchantAccount != 0x0);\n        require(bytes(_merchantId).length > 0);\n        \n        merchantAccount = _merchantAccount;\n        merchantIdHash = keccak256(_merchantId);\n    }\n\n    /**\n     *  Accept payment from MonethaGateway\n     */\n    function () external payable {\n    }\n\n    /**\n     *  @return profile info by string key\n     */\n    function profile(string key) external constant returns (string) {\n        return profileMap[key];\n    }\n\n    /**\n     *  @return payment setting by string key\n     */\n    function paymentSettings(string key) external constant returns (string) {\n        return paymentSettingsMap[key];\n    }\n\n    /**\n     *  @return composite reputation value by string key\n     */\n    function compositeReputation(string key) external constant returns (uint32) {\n        return compositeReputationMap[key];\n    }\n\n    /**\n     *  Set profile info by string key\n     */\n    function setProfile(\n        string profileKey,\n        string profileValue,\n        string repKey,\n        uint32 repValue\n    ) external onlyOwner\n    {\n        profileMap[profileKey] = profileValue;\n        \n        if (bytes(repKey).length != 0) {\n            compositeReputationMap[repKey] = repValue;\n        }\n    }\n\n    /**\n     *  Set payment setting by string key\n     */\n    function setPaymentSettings(string key, string value) external onlyOwner {\n        paymentSettingsMap[key] = value;\n    }\n\n    /**\n     *  Set composite reputation value by string key\n     */\n    function setCompositeReputation(string key, uint32 value) external onlyMonetha {\n        compositeReputationMap[key] = value;\n    }\n\n    /**\n     *  Allows merchant to withdraw funds to beneficiary address\n     */\n    function withdrawTo(address beneficiary, uint amount) public onlyMerchant whenNotPaused {\n        require(beneficiary != 0x0);\n        beneficiary.transfer(amount);\n    }\n\n    /**\n     *  Allows merchant to withdraw funds to it's own account\n     */\n    function withdraw(uint amount) external {\n        withdrawTo(msg.sender, amount);\n    }\n\n    /**\n     *  Allows merchant to change it's account address\n     */\n    function changeMerchantAccount(address newAccount) external onlyMerchant whenNotPaused {\n        merchantAccount = newAccount;\n    }\n}"
}