{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 CALLVALUE GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP7 DUP2 MSTORE PUSH1 ADD DUP6 DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD SWAP1 PUSH1 PUSH1 DUP1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP2 DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH5 CALLVALUE GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD CALLVALUE PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD DUP1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP5 POP SWAP1 SWAP2 SWAP3 SWAP4 SWAP5 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP1 PUSH1 SWAP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE SWAP1 DUP2 PUSH1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 ADD PUSH1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 ADD PUSH1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 ADD PUSH1 DUP3 ADD DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP2 POP PUSH1 NUMBER SUB DUP3 PUSH1 ADD MLOAD PUSH1 ADD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD SWAP2 SWAP1 DIV SWAP1 GT ISZERO PUSH2 JUMPI DUP2 MLOAD PUSH1 SLOAD LT PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP2 SHA3 PUSH1 ADD SSTORE DUP2 MLOAD PUSH1 DUP1 SLOAD SWAP2 SWAP1 SWAP2 SUB SWAP1 SSTORE PUSH2 DUP3 MLOAD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH2 DUP4 MLOAD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP2 SHA3 PUSH1 ADD SSTORE PUSH1 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SHA3 SLOAD PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP2 MUL SWAP2 SWAP1 SWAP2 SUB SDIV SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP3 ADD BLOCKHASH PUSH1 DUP4 ADD BLOCKHASH DUP2 ISZERO DUP1 PUSH2 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SWAP3 POP PUSH2 JUMP JUMPDEST PUSH1 DUP6 DUP4 DUP4 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP4 SWAP1 SWAP4 AND PUSH13 MUL DUP4 MSTORE PUSH1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD SWAP3 POP JUMPDEST POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP3 SWAP2 DUP3 SWAP2 DUP3 SWAP2 PUSH1 SWAP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE SWAP1 DUP2 PUSH1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 ADD PUSH1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 ADD PUSH1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 ADD PUSH1 DUP3 ADD DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP5 POP CALLVALUE SWAP4 POP PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP8 LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 NUMBER SUB DUP6 PUSH1 ADD MLOAD PUSH1 ADD GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP5 PUSH1 ADD MLOAD ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP DUP5 PUSH1 ADD MLOAD PUSH1 ADD PUSH1 NUMBER SUB LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 DUP4 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP6 PUSH1 ADD MLOAD GT JUMPDEST ISZERO PUSH2 JUMPI DUP5 MLOAD PUSH1 SLOAD LT PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP2 SHA3 PUSH1 ADD SSTORE DUP5 MLOAD PUSH1 DUP1 SLOAD SWAP2 SWAP1 SWAP2 SUB SWAP1 SSTORE PUSH2 DUP6 MLOAD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH2 DUP6 DUP8 MLOAD ADD SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND DUP5 ISZERO PUSH2 MUL DUP6 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 JUMP JUMPDEST SWAP3 DUP3 ADD SWAP3 JUMPDEST POP PUSH1 SWAP1 POP DUP1 JUMPDEST PUSH1 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP2 SWAP1 SWAP2 ADD SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP1 DUP7 MUL SWAP1 DUP4 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST NUMBER PUSH1 DUP1 DUP8 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP3 DUP7 MSTORE PUSH1 DUP1 DUP8 ADD DUP10 SWAP1 MSTORE PUSH1 DUP8 ADD DUP9 SWAP1 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE SWAP2 DUP3 SWAP1 MSTORE SWAP1 SHA3 DUP6 SWAP1 DUP2 MLOAD DUP2 SSTORE PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SSTORE PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SSTORE PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SWAP1 DUP1 MLOAD PUSH2 SWAP3 SWAP2 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP POP POP SWAP3 DUP2 SWAP1 SUB SWAP3 PUSH1 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE CALLVALUE DUP5 LT PUSH2 JUMPI PUSH1 DUP1 SLOAD CALLVALUE DUP7 SUB SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 SSTORE PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLVALUE DUP7 SWAP1 SUB SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLVALUE SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH2 SWAP1 PUSH2 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 SUB SWAP1 SSTORE PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH2 CALLER PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 PUSH1 EXP DUP4 MUL SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH2 PUSH7 PUSH2 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP PUSH2 DUP4 PUSH1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 DUP4 SUB SWAP4 POP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH9 NOT PUSH1 PUSH1 PUSH2 DUP8 PUSH2 PUSH2 JUMP JUMPDEST ADD PUSH2 JUMP JUMPDEST MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SDIV ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 SWAP1 SWAP3 MSTORE DUP3 SHA3 SLOAD PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP2 MUL SWAP2 SWAP1 SWAP2 SUB SDIV DUP2 DUP2 SLT ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP3 SWAP2 PUSH1 SWAP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE SWAP1 DUP2 PUSH1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 ADD PUSH1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 ADD PUSH1 DUP3 ADD SLOAD DUP2 MSTORE PUSH1 ADD PUSH1 DUP3 ADD DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 MSTORE POP POP SWAP3 POP PUSH2 CALLER DUP5 PUSH1 ADD MLOAD PUSH2 JUMP JUMPDEST SWAP2 POP DUP2 PUSH1 EQ ISZERO PUSH2 JUMPI PUSH1 SWAP4 POP PUSH2 JUMP JUMPDEST DUP3 PUSH1 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 PUSH1 EXP MUL PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 MUL SWAP4 POP PUSH1 SWAP1 POP JUMPDEST PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH1 DUP4 SUB PUSH2 JUMP JUMPDEST DUP4 PUSH1 ADD MLOAD DUP3 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV MUL SWAP4 SWAP1 SWAP4 ADD SWAP3 PUSH1 ADD PUSH2 JUMP JUMPDEST DUP3 PUSH1 ADD MLOAD DUP5 MUL SWAP4 POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 SLOAD DUP4 EQ ISZERO PUSH2 JUMPI DUP1 SWAP2 POP PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH2 PUSH1 PUSH1 PUSH9 NOT PUSH2 DUP10 PUSH1 SLOAD SUB PUSH2 JUMP JUMPDEST SUB MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SDIV PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH7 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH2 CALLER PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 PUSH1 EXP DUP4 MUL SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP2 ADD SWAP1 SSTORE SWAP12 POP DUP12 SWAP11 POP PUSH5 DUP12 LT DUP1 PUSH2 JUMPI POP PUSH10 DUP12 GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER SWAP10 POP DUP12 PUSH2 PUSH2 JUMP JUMPDEST SUB SWAP9 POP PUSH2 DUP12 PUSH1 PUSH2 JUMP JUMPDEST SWAP8 POP DUP8 DUP12 SUB SWAP7 POP PUSH2 DUP8 DUP14 PUSH2 JUMP JUMPDEST SWAP6 POP PUSH1 PUSH1 EXP DUP9 MUL SWAP5 POP PUSH1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 SUB PUSH1 DUP9 DUP9 PUSH1 SLOAD ADD PUSH1 PUSH1 EXP DUP11 DUP13 DUP16 ADD MUL MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 PUSH1 EXP SUB MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP4 POP DUP4 DUP9 MUL SWAP3 POP DUP3 DUP6 SUB SWAP5 POP PUSH1 SLOAD DUP4 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP2 DUP3 ADD SWAP1 SSTORE SWAP2 POP JUMPDEST PUSH2 PUSH1 SLOAD DUP8 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP8 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP13 SWAP1 SWAP13 SSTORE PUSH1 SLOAD PUSH1 SWAP1 SWAP2 MSTORE SWAP11 SWAP1 SHA3 DUP1 SLOAD SWAP11 SWAP1 SWAP7 MUL SWAP5 SWAP1 SWAP5 SUB SWAP9 DUP10 ADD SWAP1 SWAP5 SSTORE POP POP PUSH1 DUP1 SLOAD SWAP1 SWAP7 ADD SWAP1 SWAP6 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 SWAP1 DUP2 MSTORE PUSH10 DUP3 MSTORE PUSH9 PUSH1 DUP4 ADD MSTORE PUSH9 SWAP1 DUP3 ADD MSTORE PUSH4 PUSH1 DUP3 ADD MSTORE PUSH7 PUSH1 DUP3 ADD MSTORE PUSH10 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 DUP3 ADD MSTORE PUSH10 PUSH1 DUP3 ADD MSTORE PUSH10 PUSH2 DUP3 ADD MSTORE PUSH9 PUSH2 DUP3 ADD MSTORE PUSH9 PUSH2 DUP3 ADD MSTORE PUSH10 PUSH2 DUP3 ADD MSTORE SWAP1 POP PUSH1 DUP5 MUL DUP2 DUP5 PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 MUL ADD MLOAD PUSH10 AND SWAP1 PUSH1 EXP SWAP1 DIV PUSH1 AND PUSH10 AND SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP PUSH1 SLOAD PUSH1 SLOAD PUSH1 SLOAD MUL SUB DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SDIV SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 DUP7 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP3 SLT PUSH2 JUMPI SWAP2 SWAP4 POP PUSH1 SWAP3 POP DUP4 SWAP2 PUSH2 JUMP JUMPDEST DUP2 PUSH1 NOT MUL SWAP1 POP PUSH1 PUSH1 EXP DUP7 PUSH1 SLOAD PUSH1 PUSH1 EXP DUP5 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP4 POP DUP3 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 SWAP5 POP PUSH2 JUMP JUMPDEST DUP4 DUP4 SUB SWAP5 POP JUMPDEST POP POP POP SWAP2 POP SWAP2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH9 NOT PUSH1 PUSH1 PUSH2 DUP9 DUP9 PUSH2 PUSH2 JUMP JUMPDEST SUB ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SELFDESTRUCT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD CALLVALUE SWAP1 DUP2 ADD SWAP1 SWAP2 SSTORE PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 SLT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 JUMP JUMPDEST DUP1 PUSH2 PUSH2 JUMP JUMPDEST SUB SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 CALLER PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH5 CALLVALUE LT DUP1 PUSH2 JUMPI POP PUSH10 CALLVALUE GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER SWAP9 POP PUSH2 CALLVALUE PUSH1 PUSH2 JUMP JUMPDEST SWAP8 POP DUP8 CALLVALUE SUB SWAP7 POP PUSH2 DUP8 PUSH2 JUMP JUMPDEST SWAP6 POP PUSH1 PUSH1 EXP DUP9 MUL SWAP5 POP PUSH1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 SUB PUSH1 DUP9 DUP9 PUSH1 SLOAD ADD PUSH1 PUSH1 EXP DUP11 DUP13 PUSH2 PUSH2 JUMP JUMPDEST ADD MUL MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH1 PUSH1 EXP SUB MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP4 POP DUP4 DUP9 MUL SWAP3 POP DUP3 DUP6 SUB SWAP5 POP PUSH1 SLOAD DUP4 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP2 DUP3 ADD SWAP1 SSTORE SWAP2 POP JUMPDEST PUSH2 PUSH1 SLOAD DUP8 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP8 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP10 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP12 SWAP1 SWAP12 SSTORE PUSH1 SLOAD PUSH1 SWAP1 SWAP2 MSTORE SWAP10 SWAP1 SHA3 DUP1 SLOAD SWAP10 SWAP1 SWAP7 MUL SWAP5 SWAP1 SWAP5 SUB SWAP8 DUP9 ADD SWAP1 SWAP5 SSTORE POP POP PUSH1 DUP1 SLOAD SWAP1 SWAP6 ADD SWAP1 SWAP5 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP DUP3 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP1 SWAP2 SUB SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP DUP3 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP1 SWAP2 ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 SLT ISZERO PUSH2 JUMPI DUP1 PUSH1 NOT MUL PUSH2 PUSH2 JUMP JUMPDEST ADD SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 JUMPDEST PUSH9 DUP6 GT ISZERO PUSH2 JUMPI PUSH1 DUP6 DIV SWAP5 POP PUSH1 SWAP1 SWAP3 ADD SWAP2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH8 DUP6 GT PUSH2 JUMPI PUSH1 SWAP5 SWAP1 SWAP5 MUL SWAP4 PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 EXP DUP6 ADD PUSH1 PUSH1 EXP DUP1 DUP8 SUB MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SDIV SWAP2 POP POP PUSH1 PUSH1 EXP DUP2 DUP1 MUL DUP2 SWAP1 SDIV SWAP1 PUSH9 PUSH8 PUSH8 PUSH8 DUP6 MUL DUP5 SWAP1 SDIV ADD DUP5 MUL DUP4 SWAP1 SDIV PUSH8 ADD DUP5 MUL DUP4 SWAP1 SDIV ADD DUP4 MUL DUP3 SWAP1 SDIV PUSH8 ADD DUP4 MUL DUP3 SWAP1 SDIV ADD DUP4 MUL SDIV PUSH8 DUP5 PUSH1 SIGNEXTEND MUL ADD SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 PUSH1 PUSH8 PUSH9 DUP8 ADD SDIV SUB SWAP3 POP PUSH8 DUP4 MUL DUP6 SUB SWAP5 POP PUSH1 PUSH1 EXP DUP6 DUP7 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SDIV SWAP2 POP PUSH1 PUSH1 EXP PUSH8 PUSH7 PUSH6 NOT DUP6 MUL DUP4 SWAP1 SDIV ADD DUP5 MUL DUP3 SWAP1 SDIV PUSH7 NOT ADD DUP5 MUL DUP3 SWAP1 SDIV ADD DUP4 MUL SDIV PUSH1 PUSH1 EXP PUSH1 MUL ADD SWAP1 POP DUP5 DUP2 SUB PUSH1 PUSH1 EXP DUP7 DUP4 ADD MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SDIV SWAP4 POP PUSH1 DUP4 SLT PUSH2 JUMPI DUP3 DUP5 PUSH1 DUP3 SLT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 EXP MUL SWAP4 POP PUSH2 JUMP JUMPDEST DUP3 PUSH1 SUB DUP5 PUSH1 DUP3 SLT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 EXP SWAP1 DIV SWAP4 POP JUMPDEST POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD CALLVALUE SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 DUP9 PUSH2 JUMP JUMPDEST PUSH1 SLOAD SWAP2 SWAP9 POP SWAP7 POP PUSH1 SWAP6 POP DUP9 EQ PUSH2 JUMPI PUSH2 DUP8 PUSH1 PUSH2 JUMP JUMPDEST SWAP5 POP JUMPDEST DUP5 DUP8 SUB SWAP4 POP PUSH2 PUSH1 SLOAD DUP10 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP10 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SLOAD PUSH1 SWAP1 SWAP2 MSTORE SWAP2 DUP2 SHA3 DUP1 SLOAD SWAP3 DUP12 MUL PUSH1 PUSH1 EXP DUP9 MUL ADD SWAP3 DUP4 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE PUSH1 SLOAD SWAP2 SWAP5 POP SWAP1 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 EXP DUP6 MUL SWAP2 POP PUSH1 DUP7 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 EXP DUP7 MUL DUP3 ADD SWAP2 POP JUMPDEST PUSH1 SLOAD DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP2 DUP3 ADD SWAP1 SSTORE SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD DUP8 ADD SWAP1 SSTORE JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH2 JUMP JUMPDEST SWAP1 MSTORE SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 SWAP2 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 JUMPDEST PUSH1 DUP2 MSTORE PUSH1 NOT SWAP1 SWAP2 ADD SWAP1 PUSH1 ADD DUP2 PUSH2 JUMPI SWAP1 POP POP SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xf UNKNOWN_0xbf SHR UNKNOWN_0xee GASLIMIT CALLDATALOAD PUSH16 SWAP16 UNKNOWN_0xd3 UNKNOWN_0xea SSTORE UNKNOWN_0xd3 JUMPDEST UNKNOWN_0xdf MSTORE8 UNKNOWN_0xde STOP UNKNOWN_0x29",
  "opcode_entropy": 4.888938379839078,
  "opcode_count": 4786,
  "unique_opcodes": 91,
  "byte_entropy": 5.850567291977984,
  "byte_60": 0.10822257923178034,
  "byte_40": 0.014604936468526362,
  "byte_52": 0.019424565503140062,
  "byte_04": 0.01650357820943479,
  "byte_36": 0.0002920987293705272,
  "byte_10": 0.007156418869577917,
  "byte_61": 0.06294727617934862,
  "byte_01": 0.049364685263619104,
  "byte_74": 0.00043814809405579085,
  "byte_57": 0.02307579962027165,
  "byte_63": 0.004965678399298963,
  "byte_ff": 0.005695925222725281,
  "byte_7c": 0.0001460493646852636,
  "byte_00": 0.03519789688914853,
  "byte_35": 0.0029209872937052722,
  "byte_16": 0.016065430115378997,
  "byte_02": 0.034029501971666425,
  "byte_a2": 0.0011683949174821088,
  "byte_f0": 0.0002920987293705272,
  "byte_6e": 0.0005841974587410544,
  "byte_81": 0.03110851467796115,
  "byte_14": 0.0096392580692274,
  "byte_94": 0.0043814809405579086,
  "byte_80": 0.033153205783554844,
  "byte_15": 0.023367898349642178,
  "byte_29": 0.0010223455527968454,
  "byte_5c": 0.0010223455527968454,
  "byte_3b": 0.0002920987293705272,
  "byte_18": 0.0021907404702789543,
  "byte_0d": 0.0033591353877610633,
  "byte_dd": 0.00043814809405579085,
  "byte_4e": 0.00043814809405579085,
  "byte_1c": 0.0005841974587410544,
  "byte_99": 0.0011683949174821088,
  "byte_06": 0.003067036658390536,
  "byte_70": 0.0008762961881115817,
  "byte_73": 0.0011683949174821088,
  "byte_1d": 0.0002920987293705272,
  "byte_2b": 0.0001460493646852636,
  "byte_bf": 0.0002920987293705272,
  "byte_92": 0.007594566963633708,
  "byte_24": 0.001898641740908427,
  "byte_f7": 0.0010223455527968454,
  "byte_31": 0.0008762961881115817,
  "byte_d5": 0.0002920987293705272,
  "byte_b4": 0.0001460493646852636,
  "byte_30": 0.0024828391996494815,
  "byte_1b": 0.0010223455527968454,
  "byte_ae": 0.0001460493646852636,
  "byte_3c": 0.00043814809405579085,
  "byte_cf": 0.0008762961881115817,
  "byte_d6": 0.00043814809405579085,
  "byte_0b": 0.0029209872937052722,
  "byte_03": 0.022783700890901124,
  "byte_4b": 0.00043814809405579085,
  "byte_75": 0.0013144442821673725,
  "byte_34": 0.006426172046151599,
  "byte_28": 0.0001460493646852636,
  "byte_62": 0.0002920987293705272,
  "byte_db": 0.0002920987293705272,
  "byte_f2": 0.00043814809405579085,
  "byte_65": 0.0005841974587410544,
  "byte_bc": 0.0008762961881115817,
  "byte_fb": 0.0001460493646852636,
  "byte_e7": 0.0001460493646852636,
  "byte_51": 0.009931356798597926,
  "byte_68": 0.002044691105593691,
  "byte_43": 0.0013144442821673725,
  "byte_6d": 0.0002920987293705272,
  "byte_dc": 0.0005841974587410544,
  "byte_5a": 0.0005841974587410544,
  "byte_8f": 0.0005841974587410544,
  "byte_a0": 0.006426172046151599,
  "byte_82": 0.016649627574120054,
  "byte_aa": 0.0021907404702789543,
  "byte_c1": 0.00043814809405579085,
  "byte_86": 0.0017525923762231634,
  "byte_20": 0.019570614867825326,
  "byte_41": 0.0001460493646852636,
  "byte_d7": 0.00043814809405579085,
  "byte_8b": 0.0016065430115378997,
  "byte_7a": 0.00043814809405579085,
  "byte_fe": 0.0048196290346137,
  "byte_2e": 0.00043814809405579085,
  "byte_ea": 0.00043814809405579085,
  "byte_95": 0.0011683949174821088,
  "byte_7b": 0.00043814809405579085,
  "byte_56": 0.023952095808383235,
  "byte_fd": 0.006280122681466336,
  "byte_a1": 0.0017525923762231634,
  "byte_af": 0.00043814809405579085,
  "byte_ca": 0.0001460493646852636,
  "byte_f4": 0.0002920987293705272,
  "byte_b1": 0.0007302468234263181,
  "byte_e3": 0.0002920987293705272,
  "byte_42": 0.00043814809405579085,
  "byte_b6": 0.00043814809405579085,
  "byte_88": 0.006426172046151599,
  "byte_47": 0.0001460493646852636,
  "byte_b9": 0.0002920987293705272,
  "byte_f3": 0.0011683949174821088,
  "byte_08": 0.0036512341171315906,
  "byte_4f": 0.0002920987293705272,
  "byte_bd": 0.0002920987293705272,
  "byte_a5": 0.0005841974587410544,
  "byte_c4": 0.0005841974587410544,
  "byte_50": 0.0365123411713159,
  "byte_7d": 0.0002920987293705272,
  "byte_be": 0.0001460493646852636,
  "byte_26": 0.0005841974587410544,
  "byte_96": 0.0023367898349642177,
  "byte_cb": 0.0005841974587410544,
  "byte_1f": 0.003067036658390536,
  "byte_8a": 0.0011683949174821088,
  "byte_a9": 0.0002920987293705272,
  "byte_93": 0.004673579669928435,
  "byte_22": 0.0021907404702789543,
  "byte_e5": 0.0007302468234263181,
  "byte_55": 0.007594566963633708,
  "byte_a3": 0.0005841974587410544,
  "byte_ee": 0.0002920987293705272,
  "byte_6a": 0.00043814809405579085,
  "byte_5b": 0.04030962465313276,
  "byte_11": 0.00525777712866949,
  "byte_85": 0.0048196290346137,
  "byte_f6": 0.0002920987293705272,
  "byte_05": 0.005695925222725281,
  "byte_9f": 0.0002920987293705272,
  "byte_a7": 0.0005841974587410544,
  "byte_84": 0.0051117277639842265,
  "byte_83": 0.010661603622024245,
  "byte_91": 0.01781802249160216,
  "byte_90": 0.04352271067620856,
  "byte_fc": 0.001898641740908427,
  "byte_e4": 0.00043814809405579085,
  "byte_0a": 0.013436541551044253,
  "byte_19": 0.0032130860230757995,
  "byte_46": 0.0010223455527968454,
  "byte_48": 0.0001460493646852636,
  "byte_59": 0.0002920987293705272,
  "byte_7e": 0.0007302468234263181,
  "byte_79": 0.0011683949174821088,
  "byte_9d": 0.0002920987293705272,
  "byte_44": 0.0014604936468526361,
  "byte_37": 0.0002920987293705272,
  "byte_09": 0.0013144442821673725,
  "byte_27": 0.0007302468234263181,
  "byte_0c": 0.0039433328465021174,
  "byte_8e": 0.0001460493646852636,
  "byte_ef": 0.00043814809405579085,
  "byte_33": 0.004673579669928435,
  "byte_9a": 0.0008762961881115817,
  "byte_0e": 0.0011683949174821088,
  "byte_4a": 0.0016065430115378997,
  "byte_ad": 0.0001460493646852636,
  "byte_0f": 0.0023367898349642177,
  "byte_cc": 0.0007302468234263181,
  "byte_e2": 0.0002920987293705272,
  "byte_5f": 0.0007302468234263181,
  "byte_f5": 0.0001460493646852636,
  "byte_77": 0.0002920987293705272,
  "byte_12": 0.0016065430115378997,
  "byte_13": 0.003067036658390536,
  "byte_23": 0.0005841974587410544,
  "byte_64": 0.0008762961881115817,
  "byte_e8": 0.0005841974587410544,
  "byte_d4": 0.0010223455527968454,
  "byte_07": 0.003797283481816854,
  "byte_54": 0.015189133927267416,
  "byte_1a": 0.0014604936468526361,
  "byte_b0": 0.0002920987293705272,
  "byte_a8": 0.0007302468234263181,
  "byte_2c": 0.00043814809405579085,
  "byte_6f": 0.0005841974587410544,
  "byte_6c": 0.0002920987293705272,
  "byte_f1": 0.0008762961881115817,
  "byte_3e": 0.00043814809405579085,
  "byte_c6": 0.0007302468234263181,
  "byte_45": 0.00043814809405579085,
  "byte_25": 0.0005841974587410544,
  "byte_2f": 0.0002920987293705272,
  "byte_32": 0.00043814809405579085,
  "byte_87": 0.0029209872937052722,
  "byte_72": 0.0007302468234263181,
  "byte_7f": 0.0002920987293705272,
  "byte_97": 0.0007302468234263181,
  "byte_e9": 0.0005841974587410544,
  "byte_f8": 0.0007302468234263181,
  "byte_66": 0.0011683949174821088,
  "byte_b8": 0.0001460493646852636,
  "byte_89": 0.0010223455527968454,
  "byte_71": 0.00043814809405579085,
  "byte_bb": 0.0001460493646852636,
  "byte_ec": 0.00043814809405579085,
  "byte_fa": 0.0002920987293705272,
  "byte_3a": 0.0005841974587410544,
  "byte_8d": 0.00043814809405579085,
  "byte_a4": 0.0005841974587410544,
  "byte_ab": 0.00043814809405579085,
  "byte_58": 0.0010223455527968454,
  "byte_c5": 0.0001460493646852636,
  "byte_9e": 0.00043814809405579085,
  "byte_17": 0.0014604936468526361,
  "byte_5e": 0.0001460493646852636,
  "byte_9c": 0.00043814809405579085,
  "byte_b7": 0.0002920987293705272,
  "byte_53": 0.0002920987293705272,
  "byte_4d": 0.0001460493646852636,
  "byte_98": 0.0007302468234263181,
  "byte_9b": 0.0005841974587410544,
  "byte_69": 0.0013144442821673725,
  "byte_d3": 0.0007302468234263181,
  "byte_c2": 0.0002920987293705272,
  "byte_ce": 0.0002920987293705272,
  "byte_ed": 0.00043814809405579085,
  "byte_1e": 0.0001460493646852636,
  "byte_8c": 0.00043814809405579085,
  "byte_a6": 0.0001460493646852636,
  "byte_c3": 0.0014604936468526361,
  "byte_c0": 0.0002920987293705272,
  "byte_2a": 0.0002920987293705272,
  "byte_e0": 0.0001460493646852636,
  "byte_67": 0.002044691105593691,
  "byte_da": 0.0001460493646852636,
  "byte_e6": 0.0001460493646852636,
  "byte_c9": 0.0001460493646852636,
  "byte_b5": 0.00043814809405579085,
  "byte_f9": 0.0001460493646852636,
  "byte_de": 0.0002920987293705272,
  "byte_c7": 0.0001460493646852636,
  "byte_ac": 0.0007302468234263181,
  "byte_38": 0.0002920987293705272,
  "byte_3d": 0.0001460493646852636,
  "byte_49": 0.0001460493646852636,
  "byte_d1": 0.0005841974587410544,
  "byte_3f": 0.0001460493646852636,
  "byte_c8": 0.0001460493646852636,
  "byte_5d": 0.0001460493646852636,
  "byte_6b": 0.0001460493646852636,
  "byte_d0": 0.0002920987293705272,
  "byte_39": 0.0001460493646852636,
  "byte_4c": 0.0001460493646852636,
  "byte_cd": 0.0001460493646852636,
  "byte_df": 0.0001460493646852636,
  "num_nodes": 2,
  "num_edges": 2,
  "avg_degree": 2.0,
  "density": 1.0,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 3,
  "event_nums": 0,
  "creation_block": 5137655,
  "creation_timestamp": 1519325620,
  "life_time": 22.0,
  "duration_seconds": 309.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 2,
  "num_sellers": 2,
  "num_creator_transfers": 1,
  "buy_amt": 0.0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.13043478260869565,
  "avg_gas_limit": 646369.0,
  "std_gas_limit": 885090.9765039223,
  "avg_gas_used": 637201.0,
  "std_gas_used": 891431.1385455787,
  "avg_gas_price": 4333333333.333333,
  "std_gas_price": 3299831645.5372214,
  "kill_num": 1,
  "timeline_sequence": [
    [
      5137655,
      1519325620,
      15,
      8,
      0,
      1897850,
      5000000000,
      0,
      1,
      5541119,
      1897850,
      17983290
    ],
    [
      5137677,
      1519325929,
      16,
      78,
      0,
      41257,
      8000000000,
      0,
      1,
      3345256,
      13753,
      17983268
    ],
    [
      5137677,
      1519325929,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.19;\n\n/*\n    Our Roulette - A decentralized, crowdfunded game of Roulette\n    \n    Developer:\n        Dadas1337\n        \n    Thanks to:\n    \n        FrontEnd help & tips:\n            CiernaOvca\n            Matt007\n            Kebabist\n            \n        Chief-Shiller:\n            M.Tejas\n            \n        Auditor:\n            Inventor\n            \n    If the website ever goes down for any reason, just send a 0 ETH transaction\n    with no data and at least 150 000 GAS to the contract address.\n    Your shares will be sold and dividends withdrawn.\n*/\n\ncontract OurRoulette{\n    struct Bet{\n        uint value;\n        uint height; //result of a bet placed at height is determined by blocks at height+1 and height+2, bet can be resolved from height+3 upwards..\n        uint tier; //min bet amount\n        bytes betdata;\n    }\n    mapping (address => Bet) bets;\n    \n    // These functions will be removed in the real thing, they are only here for testing purposes\n    address owner = msg.sender;\n    function Kill() public { if(owner==msg.sender)selfdestruct(owner); }\n    \n    function AddDiv() public payable {\n        require(msg.sender==owner);\n        contractBalance+=msg.value;\n        AddToDividends(msg.value);\n    }\n    \n    function SubDiv(uint256 value) public {\n        require(msg.sender==owner);\n        contractBalance-=value;\n        SubFromDividends(value);\n        msg.sender.transfer(value);\n    }\n    \n    // ---- end of testing functions\n    \n    //helper function used when calculating win amounts\n    function GroupMultiplier(uint number,uint groupID) public pure returns(uint){\n        uint80[12] memory groups=[ //matrix of bet multipliers for each group - 2bits per number\n            0x30c30c30c30c30c30c0, //0: 3rd column\n            0x0c30c30c30c30c30c30, //1: 2nd column\n            0x030c30c30c30c30c30c, //2: 1st column\n            0x0000000000003fffffc, //3: 1st 12\n            0x0000003fffffc000000, //4: 2nd 12\n            0x3fffffc000000000000, //5: 3rd 12\n            0x0000000002aaaaaaaa8, //6: 1 to 18\n            0x2222222222222222220, //7: even\n            0x222208888a222088888, //8: red\n            0x0888a22220888a22220, //9: black\n            0x0888888888888888888, //10: odd\n            0x2aaaaaaaa8000000000  //11: 19 to 36\n        ];\n        return (groups[groupID]>>(number*2))&3; //this function is only public so you can verify that group multipliers are working correctly\n    }\n    \n    //returns a \"random\" number based on blockhashes and addresses\n    function GetNumber(address adr,uint height) public view returns(uint){\n        bytes32 hash1=block.blockhash(height+1);\n        bytes32 hash2=block.blockhash(height+2);\n        if(hash1==0 || hash2==0)return 69;//if the hash equals zero, it means that its too late now (blockhash can only get most recent 256 blocks)\n        return ((uint)(keccak256(adr,hash1,hash2)))%37;\n    }\n    \n    //returns user's payout from his last bet\n    function BetPayout() public view returns (uint payout) {\n        Bet memory tmp = bets[msg.sender];\n        \n        uint n=GetNumber(msg.sender,tmp.height);\n        if(n==69)return 0; //unable to get blockhash - too late\n        \n        payout=((uint)(tmp.betdata[n]))*36; //if there is a bet on the winning number, set payout to the bet*36\n        for(uint i=37;i<49;i++)payout+=((uint)(tmp.betdata[i]))*GroupMultiplier(n,i-37); //check all groups\n        \n        return payout*tmp.tier;\n    }\n    \n    //claims last bet (if it exists), creates a new one and sends back any leftover balance\n    function PlaceBet(uint tier,bytes betdata) public payable {\n        Bet memory tmp = bets[msg.sender];\n        uint balance=msg.value; //user's balance\n        require(tier<(realReserve()/12500)); //tier has to be 12500 times lower than current balance\n        \n        require((tmp.height+2)<=(block.number-1)); //if there is a bet that can't be claimed yet, revert (this bet must be resolved before placing another one)\n        if(tmp.height!=0&&((block.number-1)>=(tmp.height+2))){ //if there is an unclaimed bet that can be resolved...\n            uint win=BetPayout();\n            \n            if(win>0&&tmp.tier>(realReserve()/12500)){\n                // tier has to be 12500 times lower than current balance\n                // if it isnt, refund the bet and cancel the new bet\n                \n                //   - this shouldnt ever happen, only in a very specific scenario where\n                //     most of the people pull out at the same time.\n                \n                if(contractBalance>=tmp.value){\n                    bets[msg.sender].height=0; //set bet height to 0 so it can't be claimed again\n                    contractBalance-=tmp.value;\n                    SubFromDividends(tmp.value);\n                    msg.sender.transfer(tmp.value+balance); //refund both last bet and current bet\n                }else msg.sender.transfer(balance); //if there isnt enough money to refund last bet, then refund at least the new bet\n                                                    //again, this should never happen, its an extreme edge-case\n                                                    //old bet can be claimed later, after the balance increases again\n\n                return; //cancel the new bet\n            }\n            \n            balance+=win; //if all is right, add last bet's payout to user's balance\n        }\n        \n        uint betsz=0;\n        for(uint i=0;i<49;i++)betsz+=(uint)(betdata[i]);\n        require(betsz<=50); //bet size can't be greater than 50 \"chips\"\n        \n        betsz*=tier; //convert chips to wei\n        require(betsz<=balance); //betsz must be smaller or equal to user's current balance\n        \n        tmp.height=block.number; //fill the new bet's structure\n        tmp.value=betsz;\n        tmp.tier=tier;\n        tmp.betdata=betdata;\n        \n        bets[msg.sender]=tmp; //save it to storage\n        \n        balance-=betsz; //balance now contains (msg.value)+(winnings from last bet) - (current bet size)\n        \n        if(balance>0){\n            contractBalance-=balance;\n            if(balance>=msg.value){\n                contractBalance-=(balance-msg.value);\n                SubFromDividends(balance-msg.value);\n            }else{\n                contractBalance+=(msg.value-balance);\n                AddToDividends(msg.value-balance);\n            }\n\n            msg.sender.transfer(balance); //send any leftover balance back to the user\n        }else{\n            contractBalance+=msg.value;\n            AddToDividends(msg.value);\n        }\n    }\n    \n    //adds \"value\" to dividends\n    function AddToDividends(uint256 value) internal {\n        earningsPerToken+=(int256)((value*scaleFactor)/totalSupply);\n    }\n    \n    //subtract \"value\" from dividends\n    function SubFromDividends(uint256 value)internal {\n        earningsPerToken-=(int256)((value*scaleFactor)/totalSupply);\n    }\n    \n    //claims last bet\n    function ClaimMyBet() public{\n        Bet memory tmp = bets[msg.sender];\n        require((tmp.height+2)<=(block.number-1)); //if it is a bet that can't be claimed yet\n        \n        uint win=BetPayout();\n        \n        if(win>0){\n            if(bets[msg.sender].tier>(realReserve()/12500)){\n                // tier has to be 12500 times lower than current balance\n                // if it isnt, refund the bet\n                \n                //   - this shouldnt ever happen, only in a very specific scenario where\n                //     most of the people pull out at the same time.\n                \n                if(contractBalance>=tmp.value){\n                    bets[msg.sender].height=0; //set bet height to 0 so it can't be claimed again\n                    contractBalance-=tmp.value;\n                    SubFromDividends(tmp.value);\n                    msg.sender.transfer(tmp.value);\n                }\n                \n                //if the code gets here, it means that there isnt enough balance to refund the bet\n                //bet can be claimed later, after the balance increases again\n                return;\n            }\n            \n            bets[msg.sender].height=0; //set bet height to 0 so it can't be claimed again\n            contractBalance-=win;\n            SubFromDividends(win);\n            msg.sender.transfer(win);\n        }\n    }\n    \n    //public function used to fill user interface with data\n    function GetMyBet() public view returns(uint, uint, uint, uint, bytes){\n        return (bets[msg.sender].value,bets[msg.sender].height,bets[msg.sender].tier,BetPayout(),bets[msg.sender].betdata);\n    }\n    \n//          --- EthPyramid code with fixed compiler warnings and support for negative dividends ---\n\n/*\n          ,/`.\n        ,'/ __`.\n      ,'_/_  _ _`.\n    ,'__/_ ___ _  `.\n  ,'_  /___ __ _ __ `.\n '-.._/___...-\"-.-..__`.\n  B\n\n EthPyramid. A no-bullshit, transparent, self-sustaining pyramid scheme.\n \n Inspired by https://test.jochen-hoenicke.de/eth/ponzitoken/\n\n Developers:\n\tArc\n\tDivine\n\tNorsefire\n\tToCsIcK\n\t\n Front-End:\n\tCardioth\n\ttenmei\n\tTrendium\n\t\n Moral Support:\n\tDeadCow.Rat\n\tDots\n\tFatKreamy\n\tKaseylol\n\tQuantumDeath666\n\tQuentin\n \n Shit-Tier:\n\tHentaiChrist\n \n*/\n    \n    // scaleFactor is used to convert Ether into tokens and vice-versa: they're of different\n\t// orders of magnitude, hence the need to bridge between the two.\n\tuint256 constant scaleFactor = 0x10000000000000000;  // 2^64\n\n\t// CRR = 50%\n\t// CRR is Cash Reserve Ratio (in this case Crypto Reserve Ratio).\n\t// For more on this: check out https://en.wikipedia.org/wiki/Reserve_requirement\n\tint constant crr_n = 1; // CRR numerator\n\tint constant crr_d = 2; // CRR denominator\n\n\t// The price coefficient. Chosen such that at 1 token total supply\n\t// the amount in reserve is 0.5 ether and token price is 1 Ether.\n\tint constant price_coeff = -0x296ABF784A358468C;\n\n\t// Array between each address and their number of tokens.\n\tmapping(address => uint256) public tokenBalance;\n\t\t\n\t// Array between each address and how much Ether has been paid out to it.\n\t// Note that this is scaled by the scaleFactor variable.\n\tmapping(address => int256) public payouts;\n\n\t// Variable tracking how many tokens are in existence overall.\n\tuint256 public totalSupply;\n\n\t// Aggregate sum of all payouts.\n\t// Note that this is scaled by the scaleFactor variable.\n\tint256 totalPayouts;\n\n\t// Variable tracking how much Ether each token is currently worth.\n\t// Note that this is scaled by the scaleFactor variable.\n\tint256 earningsPerToken;\n\t\n\t// Current contract balance in Ether\n\tuint256 public contractBalance;\n\n\t// The following functions are used by the front-end for display purposes.\n\n\t// Returns the number of tokens currently held by _owner.\n\tfunction balanceOf(address _owner) public constant returns (uint256 balance) {\n\t\treturn tokenBalance[_owner];\n\t}\n\n\t// Withdraws all dividends held by the caller sending the transaction, updates\n\t// the requisite global variables, and transfers Ether back to the caller.\n\tfunction withdraw() public {\n\t\t// Retrieve the dividends associated with the address the request came from.\n\t\tuint256 balance = dividends(msg.sender);\n\t\t\n\t\t// Update the payouts array, incrementing the request address by `balance`.\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\n\t\t\n\t\t// Increase the total amount that's been paid out to maintain invariance.\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\n\t\t\n\t\t// Send the dividends to the address that requested the withdraw.\n\t\tcontractBalance = sub(contractBalance, balance);\n\t\tmsg.sender.transfer(balance);\n\t}\n\n\t// Converts the Ether accrued as dividends back into EPY tokens without having to\n\t// withdraw it first. Saves on gas and potential price spike loss.\n\tfunction reinvestDividends() public {\n\t\t// Retrieve the dividends associated with the address the request came from.\n\t\tuint256 balance = dividends(msg.sender);\n\t\t\n\t\t// Update the payouts array, incrementing the request address by `balance`.\n\t\t// Since this is essentially a shortcut to withdrawing and reinvesting, this step still holds.\n\t\tpayouts[msg.sender] += (int256) (balance * scaleFactor);\n\t\t\n\t\t// Increase the total amount that's been paid out to maintain invariance.\n\t\ttotalPayouts += (int256) (balance * scaleFactor);\n\t\t\n\t\t// Assign balance to a new variable.\n\t\tuint value_ = (uint) (balance);\n\t\t\n\t\t// If your dividends are worth less than 1 szabo, or more than a million Ether\n\t\t// (in which case, why are you even here), abort.\n\t\tif (value_ < 0.000001 ether || value_ > 1000000 ether)\n\t\t\trevert();\n\t\t\t\n\t\t// msg.sender is the address of the caller.\n\t\taddress sender = msg.sender;\n\t\t\n\t\t// A temporary reserve variable used for calculating the reward the holder gets for buying tokens.\n\t\t// (Yes, the buyer receives a part of the distribution as well!)\n\t\tuint256 res = reserve() - balance;\n\n\t\t// 10% of the total Ether sent is used to pay existing holders.\n\t\tuint256 fee = div(value_, 10);\n\t\t\n\t\t// The amount of Ether used to purchase new tokens for the caller.\n\t\tuint256 numEther = value_ - fee;\n\t\t\n\t\t// The number of tokens which can be purchased for numEther.\n\t\tuint256 numTokens = calculateDividendTokens(numEther, balance);\n\t\t\n\t\t// The buyer fee, scaled by the scaleFactor variable.\n\t\tuint256 buyerFee = fee * scaleFactor;\n\t\t\n\t\t// Check that we have tokens in existence (this should always be true), or\n\t\t// else you're gonna have a bad time.\n\t\tif (totalSupply > 0) {\n\t\t\t// Compute the bonus co-efficient for all existing holders and the buyer.\n\t\t\t// The buyer receives part of the distribution for each token bought in the\n\t\t\t// same way they would have if they bought each token individually.\n\t\t\tuint256 bonusCoEff =\n\t\t\t    (scaleFactor - (res + numEther) * numTokens * scaleFactor / (totalSupply + numTokens) / numEther)\n\t\t\t    * (uint)(crr_d) / (uint)(crr_d-crr_n);\n\t\t\t\t\n\t\t\t// The total reward to be distributed amongst the masses is the fee (in Ether)\n\t\t\t// multiplied by the bonus co-efficient.\n\t\t\tuint256 holderReward = fee * bonusCoEff;\n\t\t\t\n\t\t\tbuyerFee -= holderReward;\n\n\t\t\t// Fee is distributed to all existing token holders before the new tokens are purchased.\n\t\t\t// rewardPerShare is the amount gained per token thanks to this buy-in.\n\t\t\tuint256 rewardPerShare = holderReward / totalSupply;\n\t\t\t\n\t\t\t// The Ether value per token is increased proportionally.\n\t\t\tearningsPerToken += (int256)(rewardPerShare);\n\t\t}\n\t\t\n\t\t// Add the numTokens which were just created to the total supply. We're a crypto central bank!\n\t\ttotalSupply = add(totalSupply, numTokens);\n\t\t\n\t\t// Assign the tokens to the balance of the buyer.\n\t\ttokenBalance[sender] = add(tokenBalance[sender], numTokens);\n\t\t\n\t\t// Update the payout array so that the buyer cannot claim dividends on previous purchases.\n\t\t// Also include the fee paid for entering the scheme.\n\t\t// First we compute how much was just paid out to the buyer...\n\t\tint256 payoutDiff  = ((earningsPerToken * (int256)(numTokens)) - (int256)(buyerFee));\n\t\t\n\t\t// Then we update the payouts array for the buyer with this amount...\n\t\tpayouts[sender] += payoutDiff;\n\t\t\n\t\t// And then we finally add it to the variable tracking the total amount spent to maintain invariance.\n\t\ttotalPayouts    += payoutDiff;\n\t\t\n\t}\n\n\t// Sells your tokens for Ether. This Ether is assigned to the callers entry\n\t// in the tokenBalance array, and therefore is shown as a dividend. A second\n\t// call to withdraw() must be made to invoke the transfer of Ether back to your address.\n\tfunction sellMyTokens() public {\n\t\tuint256 balance = balanceOf(msg.sender);\n\t\tsell(balance);\n\t}\n\n\t// The slam-the-button escape hatch. Sells the callers tokens for Ether, then immediately\n\t// invokes the withdraw() function, sending the resulting Ether to the callers address.\n    function getMeOutOfHere() public {\n\t\tsellMyTokens();\n        withdraw();\n\t}\n\n\t// Gatekeeper function to check if the amount of Ether being sent isn't either\n\t// too small or too large. If it passes, goes direct to buy().\n\tfunction fund() payable public {\n\t\t// Don't allow for funding if the amount of Ether sent is less than 1 szabo.\n\t\tif (msg.value > 0.000001 ether) {\n\t\t    contractBalance = add(contractBalance, msg.value);\n\t\t\tbuy();\n\t\t} else {\n\t\t\trevert();\n\t\t}\n    }\n\n\t// Function that returns the (dynamic) price of buying a finney worth of tokens.\n\tfunction buyPrice() public constant returns (uint) {\n\t\treturn getTokensForEther(1 finney);\n\t}\n\n\t// Function that returns the (dynamic) price of selling a single token.\n\tfunction sellPrice() public constant returns (uint) {\n        uint256 eth;\n        uint256 penalty;\n        (eth,penalty) = getEtherForTokens(1 finney);\n        \n        uint256 fee = div(eth, 10);\n        return eth - fee;\n    }\n\n\t// Calculate the current dividends associated with the caller address. This is the net result\n\t// of multiplying the number of tokens held by their current value in Ether and subtracting the\n\t// Ether that has already been paid out. Returns 0 in case of negative dividends\n\tfunction dividends(address _owner) public constant returns (uint256 amount) {\n\t    int256 r=((earningsPerToken * (int256)(tokenBalance[_owner])) - payouts[_owner]) / (int256)(scaleFactor);\n\t    if(r<0)return 0;\n\t\treturn (uint256)(r);\n\t}\n\t\n\t// Returns real dividends, including negative values\n\tfunction realDividends(address _owner) public constant returns (int256 amount) {\n\t    return (((earningsPerToken * (int256)(tokenBalance[_owner])) - payouts[_owner]) / (int256)(scaleFactor));\n\t}\n\n\t// Internal balance function, used to calculate the dynamic reserve value.\n\tfunction balance() internal constant returns (uint256 amount) {\n\t\t// msg.value is the amount of Ether sent by the transaction.\n\t\treturn contractBalance - msg.value;\n\t}\n\n\tfunction buy() internal {\n\t\t// Any transaction of less than 1 szabo is likely to be worth less than the gas used to send it.\n\t\tif (msg.value < 0.000001 ether || msg.value > 1000000 ether)\n\t\t\trevert();\n\t\t\t\t\t\t\n\t\t// msg.sender is the address of the caller.\n\t\taddress sender = msg.sender;\n\t\t\n\t\t// 10% of the total Ether sent is used to pay existing holders.\n\t\tuint256 fee = div(msg.value, 10);\n\t\t\n\t\t// The amount of Ether used to purchase new tokens for the caller.\n\t\tuint256 numEther = msg.value - fee;\n\t\t\n\t\t// The number of tokens which can be purchased for numEther.\n\t\tuint256 numTokens = getTokensForEther(numEther);\n\t\t\n\t\t// The buyer fee, scaled by the scaleFactor variable.\n\t\tuint256 buyerFee = fee * scaleFactor;\n\t\t\n\t\t// Check that we have tokens in existence (this should always be true), or\n\t\t// else you're gonna have a bad time.\n\t\tif (totalSupply > 0) {\n\t\t\t// Compute the bonus co-efficient for all existing holders and the buyer.\n\t\t\t// The buyer receives part of the distribution for each token bought in the\n\t\t\t// same way they would have if they bought each token individually.\n\t\t\tuint256 bonusCoEff =\n\t\t\t    (scaleFactor - (reserve() + numEther) * numTokens * scaleFactor / (totalSupply + numTokens) / numEther)\n\t\t\t    * (uint)(crr_d) / (uint)(crr_d-crr_n);\n\t\t\t\t\n\t\t\t// The total reward to be distributed amongst the masses is the fee (in Ether)\n\t\t\t// multiplied by the bonus co-efficient.\n\t\t\tuint256 holderReward = fee * bonusCoEff;\n\t\t\t\n\t\t\tbuyerFee -= holderReward;\n\n\t\t\t// Fee is distributed to all existing token holders before the new tokens are purchased.\n\t\t\t// rewardPerShare is the amount gained per token thanks to this buy-in.\n\t\t\tuint256 rewardPerShare = holderReward / totalSupply;\n\t\t\t\n\t\t\t// The Ether value per token is increased proportionally.\n\t\t\tearningsPerToken += (int256)(rewardPerShare);\n\t\t\t\n\t\t}\n\n\t\t// Add the numTokens which were just created to the total supply. We're a crypto central bank!\n\t\ttotalSupply = add(totalSupply, numTokens);\n\n\t\t// Assign the tokens to the balance of the buyer.\n\t\ttokenBalance[sender] = add(tokenBalance[sender], numTokens);\n\n\t\t// Update the payout array so that the buyer cannot claim dividends on previous purchases.\n\t\t// Also include the fee paid for entering the scheme.\n\t\t// First we compute how much was just paid out to the buyer...\n\t\tint256 payoutDiff = ((earningsPerToken * (int256)(numTokens)) - (int256)(buyerFee));\n\t\t\n\t\t// Then we update the payouts array for the buyer with this amount...\n\t\tpayouts[sender] += payoutDiff;\n\t\t\n\t\t// And then we finally add it to the variable tracking the total amount spent to maintain invariance.\n\t\ttotalPayouts    += payoutDiff;\n\t\t\n\t}\n\n\t// Sell function that takes tokens and converts them into Ether. Also comes with a 10% fee\n\t// to discouraging dumping, and means that if someone near the top sells, the fee distributed\n\t// will be *significant*.\n\tfunction sell(uint256 amount) internal {\n\t    // Calculate the amount of Ether that the holders tokens sell for at the current sell price.\n\t\tuint256 numEthersBeforeFee;\n\t\tuint256 penalty;\n\t\t(numEthersBeforeFee,penalty) = getEtherForTokens(amount);\n\t\t\n\t\t// 10% of the resulting Ether is used to pay remaining holders, but only if there are any remaining holders.\n\t\tuint256 fee = 0;\n\t\tif(amount!=totalSupply) fee = div(numEthersBeforeFee, 10);\n\t\t\n\t\t// Net Ether for the seller after the fee has been subtracted.\n        uint256 numEthers = numEthersBeforeFee - fee;\n\t\t\n\t\t// *Remove* the numTokens which were just sold from the total supply. We're /definitely/ a crypto central bank.\n\t\ttotalSupply = sub(totalSupply, amount);\n\t\t\n        // Remove the tokens from the balance of the buyer.\n\t\ttokenBalance[msg.sender] = sub(tokenBalance[msg.sender], amount);\n\n        // Update the payout array so that the seller cannot claim future dividends unless they buy back in.\n\t\t// First we compute how much was just paid out to the seller...\n\t\tint256 payoutDiff = (earningsPerToken * (int256)(amount) + (int256)(numEthers * scaleFactor));\n\t\t\n        // We reduce the amount paid out to the seller (this effectively resets their payouts value to zero,\n\t\t// since they're selling all of their tokens). This makes sure the seller isn't disadvantaged if\n\t\t// they decide to buy back in.\n\t\tpayouts[msg.sender] -= payoutDiff;\n\t\t\n\t\t// Decrease the total amount that's been paid out to maintain invariance.\n        totalPayouts -= payoutDiff;\n\t\t\n\t\t// Check that we have tokens in existence (this is a bit of an irrelevant check since we're\n\t\t// selling tokens, but it guards against division by zero).\n\t\tif (totalSupply > 0) {\n\t\t\t// Scale the Ether taken as the selling fee by the scaleFactor variable.\n\t\t\tuint256 etherFee = fee * scaleFactor;\n\t\t\t\n\t\t\tif(penalty>0)etherFee += (penalty * scaleFactor); //if there is any penalty, use it to settle the debt\n\t\t\t\n\t\t\t// Fee is distributed to all remaining token holders.\n\t\t\t// rewardPerShare is the amount gained per token thanks to this sell.\n\t\t\tuint256 rewardPerShare = etherFee / totalSupply;\n\t\t\t\n\t\t\t// The Ether value per token is increased proportionally.\n\t\t\tearningsPerToken += (int256)(rewardPerShare);\n\t\t}else payouts[msg.sender]+=(int256)(penalty); //if he is the last holder, give him his penalty too, so there is no leftover ETH in the contract\n\t}\n\t\n\t//returns value of all dividends currently held by all shareholders\n\tfunction totalDiv() public view returns (int256){\n\t    return ((earningsPerToken * (int256)(totalSupply))-totalPayouts)/(int256)(scaleFactor);\n\t}\n\t\n\t// Dynamic value of Ether in reserve, according to the CRR requirement. Designed to not decrease token value in case of negative dividends\n\tfunction reserve() internal constant returns (uint256 amount) {\n\t    int256 divs=totalDiv();\n\t    \n\t    if(divs<0)return balance()+(uint256)(divs*-1);\n\t    return balance()-(uint256)(divs);\n\t}\n\t\n\t// Dynamic value of Ether in reserve, according to the CRR requirement. Returns reserve without negative dividends\n\tfunction realReserve() public view returns (uint256 amount) {\n\t    int256 divs=totalDiv();\n\t    \n\t    if(divs<0)return balance();\n\t    return balance()-(uint256)(divs);\n\t}\n\n\t// Calculates the number of tokens that can be bought for a given amount of Ether, according to the\n\t// dynamic reserve and totalSupply values (derived from the buy and sell prices).\n\tfunction getTokensForEther(uint256 ethervalue) public constant returns (uint256 tokens) {\n\t\treturn sub(fixedExp(fixedLog(reserve() + ethervalue)*crr_n/crr_d + price_coeff), totalSupply);\n\t}\n\n\t// Semantically similar to getTokensForEther, but subtracts the callers balance from the amount of Ether returned for conversion.\n\tfunction calculateDividendTokens(uint256 ethervalue, uint256 subvalue) public constant returns (uint256 tokens) {\n\t\treturn sub(fixedExp(fixedLog(reserve() - subvalue + ethervalue)*crr_n/crr_d + price_coeff), totalSupply);\n\t}\n\t\n\t// Converts a number tokens into an Ether value. Doesn't account for negative dividends\n\tfunction getEtherForTokensOld(uint256 tokens) public constant returns (uint256 ethervalue) {\n\t\t// How much reserve Ether do we have left in the contract?\n\t\tuint256 reserveAmount = reserve();\n\n\t\t// If you're the Highlander (or bagholder), you get The Prize. Everything left in the vault.\n\t\tif (tokens == totalSupply)\n\t\t\treturn reserveAmount;\n\n\t\t// If there would be excess Ether left after the transaction this is called within, return the Ether\n\t\t// corresponding to the equation in Dr Jochen Hoenicke's original Ponzi paper, which can be found\n\t\t// at https://test.jochen-hoenicke.de/eth/ponzitoken/ in the third equation, with the CRR numerator \n\t\t// and denominator altered to 1 and 2 respectively.\n\t\treturn sub(reserveAmount, fixedExp((fixedLog(totalSupply - tokens) - price_coeff) * crr_d/crr_n));\n\t}\n\n\t// Converts a number tokens into an Ether value. Accounts for negative dividends\n\tfunction getEtherForTokens(uint256 tokens) public constant returns (uint256 ethervalue,uint256 penalty) {\n\t\tuint256 eth=getEtherForTokensOld(tokens);\n\t\tint256 divs=totalDiv();\n\t\tif(divs>=0)return (eth,0);\n\t\t\n\t\tuint256 debt=(uint256)(divs*-1);\n\t\tpenalty=(((debt*scaleFactor)/totalSupply)*tokens)/scaleFactor;\n\t\t\n\t\tif(penalty>eth)return (0,penalty);\n\t\treturn (eth-penalty,penalty);\n\t}\n\n\t// You don't care about these, but if you really do they're hex values for \n\t// co-efficients used to simulate approximations of the log and exp functions.\n\tint256  constant one        = 0x10000000000000000;\n\tuint256 constant sqrt2      = 0x16a09e667f3bcc908;\n\tuint256 constant sqrtdot5   = 0x0b504f333f9de6484;\n\tint256  constant ln2        = 0x0b17217f7d1cf79ac;\n\tint256  constant ln2_64dot5 = 0x2cb53f09f05cc627c8;\n\tint256  constant c1         = 0x1ffffffffff9dac9b;\n\tint256  constant c3         = 0x0aaaaaaac16877908;\n\tint256  constant c5         = 0x0666664e5e9fa0c99;\n\tint256  constant c7         = 0x049254026a7630acf;\n\tint256  constant c9         = 0x038bd75ed37753d68;\n\tint256  constant c11        = 0x03284a0c14610924f;\n\n\t// The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11\n\t// approximates the function log(1+x)-log(1-x)\n\t// Hence R(s) = log((1+s)/(1-s)) = log(a)\n\tfunction fixedLog(uint256 a) internal pure returns (int256 log) {\n\t\tint32 scale = 0;\n\t\twhile (a > sqrt2) {\n\t\t\ta /= 2;\n\t\t\tscale++;\n\t\t}\n\t\twhile (a <= sqrtdot5) {\n\t\t\ta *= 2;\n\t\t\tscale--;\n\t\t}\n\t\tint256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);\n\t\tint256 z = (s*s) / one;\n\t\treturn scale * ln2 +\n\t\t\t(s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))\n\t\t\t\t/one))/one))/one))/one))/one);\n\t}\n\n\tint256 constant c2 =  0x02aaaaaaaaa015db0;\n\tint256 constant c4 = -0x000b60b60808399d1;\n\tint256 constant c6 =  0x0000455956bccdd06;\n\tint256 constant c8 = -0x000001b893ad04b3a;\n\t\n\t// The polynomial R = 2 + c2*x^2 + c4*x^4 + ...\n\t// approximates the function x*(exp(x)+1)/(exp(x)-1)\n\t// Hence exp(x) = (R(x)+x)/(R(x)-x)\n\tfunction fixedExp(int256 a) internal pure returns (uint256 exp) {\n\t\tint256 scale = (a + (ln2_64dot5)) / ln2 - 64;\n\t\ta -= scale*ln2;\n\t\tint256 z = (a*a) / one;\n\t\tint256 R = ((int256)(2) * one) +\n\t\t\t(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);\n\t\texp = (uint256) (((R + a) * one) / (R - a));\n\t\tif (scale >= 0)\n\t\t\texp <<= scale;\n\t\telse\n\t\t\texp >>= -scale;\n\t\treturn exp;\n\t}\n\t\n\t// The below are safemath implementations of the four arithmetic operators\n\t// designed to explicitly prevent over- and under-flows of integer values.\n\n\tfunction mul(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tif (a == 0) {\n\t\t\treturn 0;\n\t\t}\n\t\tuint256 c = a * b;\n\t\tassert(c / a == b);\n\t\treturn c;\n\t}\n\n\tfunction div(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\t// assert(b > 0); // Solidity automatically throws when dividing by 0\n\t\tuint256 c = a / b;\n\t\t// assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\t\treturn c;\n\t}\n\n\tfunction sub(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal pure returns (uint256) {\n\t\tuint256 c = a + b;\n\t\tassert(c >= a);\n\t\treturn c;\n\t}\n\n\t// This allows you to buy tokens by sending Ether directly to the smart contract\n\t// without including any transaction data (useful for, say, mobile wallet apps).\n\tfunction () payable public {\n\t\t// msg.value is the amount of Ether sent by the transaction.\n\t\tif (msg.value > 0) {\n\t\t\tfund();\n\t\t} else {\n\t\t\tgetMeOutOfHere();\n\t\t}\n\t}\n}"
}