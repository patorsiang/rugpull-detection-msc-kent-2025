{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 DUP2 ADD CALLDATALOAD SWAP1 SWAP2 AND SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 DUP2 ADD CALLDATALOAD SWAP2 PUSH1 SWAP1 SWAP2 ADD CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 SHL SUB DUP2 CALLDATALOAD AND SWAP1 PUSH1 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 SHL SUB DUP2 CALLDATALOAD DUP2 AND SWAP2 PUSH1 ADD CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 PUSH1 NOT PUSH2 PUSH1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH2 NOT AND PUSH2 OR SWAP1 SSTORE JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH2 DUP5 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 PUSH1 SHL SUB DUP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SWAP1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 MSTORE PUSH1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 PUSH2 DUP6 PUSH1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 SWAP2 DUP3 ADD PUSH1 SWAP1 DUP2 SHA3 SWAP2 DUP13 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 SHA3 SLOAD SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH32 SWAP1 DUP4 SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST DUP3 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 DUP3 DUP5 PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST ADDRESS PUSH4 PUSH2 PUSH2 JUMP JUMPDEST ADDRESS DUP5 PUSH1 MLOAD DUP5 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP5 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 MSTORE PUSH1 ADD DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH4 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH2 DUP7 PUSH1 PUSH2 JUMP JUMPDEST SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 PUSH1 NOT PUSH2 PUSH1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE PUSH1 SWAP4 SWAP1 SWAP3 SWAP1 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 PUSH2 DUP6 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND DUP3 MSTORE PUSH1 DUP1 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 SWAP2 DUP3 ADD PUSH1 SWAP1 DUP2 SHA3 SWAP2 DUP14 AND DUP2 MSTORE SWAP3 MSTORE SWAP1 SHA3 SLOAD SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 SWAP2 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP6 SWAP1 SSTORE DUP2 MLOAD DUP6 DUP2 MSTORE SWAP2 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH2 PUSH1 PUSH2 DUP5 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH1 PUSH1 PUSH1 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND ISZERO JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 JUMPDEST PUSH1 DUP2 DUP4 SUB SWAP1 POP PUSH2 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 PUSH1 PUSH1 SHL SUB DUP9 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE DUP2 ISZERO PUSH2 JUMPI PUSH1 PUSH2 PUSH1 PUSH2 DUP6 PUSH1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 PUSH1 PUSH2 DUP7 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SLOAD SWAP1 SWAP2 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SLOAD DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP1 DUP4 AND SWAP4 SWAP3 DUP12 AND SWAP3 PUSH32 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 PUSH1 SLOAD PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 DUP4 AND SWAP3 DUP11 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP POP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SWAP2 SWAP1 SWAP2 SSTORE ISZERO DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP6 DUP2 AND SWAP2 AND EQ JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 SWAP2 PUSH1 PUSH1 PUSH1 SHL SUB DUP9 AND SWAP2 PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST DUP4 PUSH1 PUSH1 PUSH1 SHL SUB AND DUP6 PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP5 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE PUSH1 DUP2 MSTORE PUSH1 ADD DUP1 PUSH2 PUSH1 SWAP2 CODECOPY PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH1 MLOAD DUP1 PUSH1 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH11 SWAP3 PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD LT ISZERO DUP1 PUSH2 JUMPI POP PUSH14 PUSH1 SLOAD LT ISZERO JUMPDEST DUP1 PUSH2 JUMPI POP PUSH12 PUSH2 PUSH2 JUMP JUMPDEST GT ISZERO JUMPDEST DUP1 PUSH2 JUMPI POP PUSH4 PUSH2 PUSH1 SLOAD TIMESTAMP PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMPDEST JUMP JUMPDEST PUSH1 DUP2 DUP4 PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE DUP4 MLOAD PUSH1 DUP5 ADD MSTORE DUP4 MLOAD SWAP1 SWAP3 DUP4 SWAP3 PUSH1 SWAP1 SWAP2 ADD SWAP2 SWAP1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 DUP4 ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP PUSH1 DUP4 DUP6 DUP2 PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP UNKNOWN_0xfe TIMESTAMP GASLIMIT POP ORIGIN ADDRESS GASPRICE SHA3 PUSH21 SHA3 PUSH2 PUSH19 PUSH19 UNKNOWN_0x4f PUSH24 PUSH27 PUSH2 PUSH22 PUSH7 PUSH14 PUSH16 PUSH2 PUSH7 PUSH15 PUSH4 ORIGIN ADDRESS GASPRICE SHA3 PUSH5 PUSH20 PUSH6 ADDRESS GASPRICE SHA3 PUSH2 PUSH19 PUSH19 UNKNOWN_0xb8 UNKNOWN_0xc1 UNKNOWN_0xca UNKNOWN_0xf6 JUMPI SHA3 PUSH22 INVALID_0x6c",
  "opcode_entropy": 4.73576099917086,
  "opcode_count": 3587,
  "unique_opcodes": 88,
  "byte_entropy": 6.0933981232654615,
  "byte_0x": 0.00017056114617090227,
  "byte_60": 0.11359372334982092,
  "byte_80": 0.03308886235715504,
  "byte_40": 0.014668258570697595,
  "byte_52": 0.023878560463926318,
  "byte_34": 0.0005116834385127068,
  "byte_15": 0.012280402524304963,
  "byte_61": 0.05338563875149241,
  "byte_00": 0.022855193586900906,
  "byte_10": 0.004946273238956166,
  "byte_57": 0.01876172607879925,
  "byte_fd": 0.006993006993006993,
  "byte_5b": 0.03138325089544602,
  "byte_50": 0.025754733071806243,
  "byte_04": 0.010745352208766844,
  "byte_36": 0.0020467337540508272,
  "byte_01": 0.05406788333617602,
  "byte_cf": 0.0015350503155381204,
  "byte_35": 0.00375234521575985,
  "byte_e0": 0.001876172607879925,
  "byte_1c": 0.00017056114617090227,
  "byte_63": 0.011598157939621354,
  "byte_71": 0.0010233668770254136,
  "byte_18": 0.0015350503155381204,
  "byte_a6": 0.0006822445846836091,
  "byte_11": 0.003070100631076241,
  "byte_95": 0.0015350503155381204,
  "byte_d8": 0.0005116834385127068,
  "byte_9b": 0.0010233668770254136,
  "byte_41": 0.00034112229234180454,
  "byte_a2": 0.0006822445846836091,
  "byte_d0": 0.0010233668770254136,
  "byte_05": 0.004946273238956166,
  "byte_14": 0.009380863039399626,
  "byte_8a": 0.0006822445846836091,
  "byte_dd": 0.001876172607879925,
  "byte_62": 0.004264028654272557,
  "byte_ed": 0.0005116834385127068,
  "byte_3e": 0.0010233668770254136,
  "byte_92": 0.005969640115981579,
  "byte_f2": 0.0013644891693672181,
  "byte_e3": 0.0006822445846836091,
  "byte_8b": 0.0010233668770254136,
  "byte_c0": 0.00034112229234180454,
  "byte_f4": 0.00017056114617090227,
  "byte_46": 0.002558417192563534,
  "byte_c1": 0.00034112229234180454,
  "byte_e6": 0.0005116834385127068,
  "byte_56": 0.019102848371141054,
  "byte_22": 0.0011939280231963159,
  "byte_a4": 0.0011939280231963159,
  "byte_c2": 0.0006822445846836091,
  "byte_d7": 0.00034112229234180454,
  "byte_2a": 0.00034112229234180454,
  "byte_e2": 0.0008528057308545113,
  "byte_d6": 0.0005116834385127068,
  "byte_a9": 0.0005116834385127068,
  "byte_9c": 0.0013644891693672181,
  "byte_bb": 0.0005116834385127068,
  "byte_5e": 0.0008528057308545113,
  "byte_8f": 0.003070100631076241,
  "byte_bd": 0.0011939280231963159,
  "byte_de": 0.0005116834385127068,
  "byte_03": 0.02626641651031895,
  "byte_bf": 0.00017056114617090227,
  "byte_8c": 0.0008528057308545113,
  "byte_76": 0.0013644891693672181,
  "byte_dc": 0.0006822445846836091,
  "byte_93": 0.0040934675081016544,
  "byte_c7": 0.00034112229234180454,
  "byte_8d": 0.0010233668770254136,
  "byte_a5": 0.0005116834385127068,
  "byte_cb": 0.00034112229234180454,
  "byte_94": 0.0017056114617090227,
  "byte_b9": 0.0005116834385127068,
  "byte_7a": 0.0020467337540508272,
  "byte_4b": 0.0013644891693672181,
  "byte_af": 0.0006822445846836091,
  "byte_83": 0.010915913354937745,
  "byte_df": 0.00017056114617090227,
  "byte_e5": 0.003070100631076241,
  "byte_b7": 0.0006822445846836091,
  "byte_2b": 0.0010233668770254136,
  "byte_c8": 0.0013644891693672181,
  "byte_0f": 0.0028995394849053386,
  "byte_3a": 0.0028995394849053386,
  "byte_3c": 0.0013644891693672181,
  "byte_9f": 0.0006822445846836091,
  "byte_86": 0.0013644891693672181,
  "byte_1d": 0.0006822445846836091,
  "byte_67": 0.0008528057308545113,
  "byte_b2": 0.0006822445846836091,
  "byte_6f": 0.008357496162374212,
  "byte_69": 0.00375234521575985,
  "byte_3f": 0.00017056114617090227,
  "byte_91": 0.016885553470919325,
  "byte_7e": 0.00034112229234180454,
  "byte_77": 0.0028995394849053386,
  "byte_70": 0.001876172607879925,
  "byte_a0": 0.012109841378134062,
  "byte_82": 0.015521064301552107,
  "byte_31": 0.0008528057308545113,
  "byte_7f": 0.0035817840695889476,
  "byte_39": 0.0017056114617090227,
  "byte_51": 0.014497697424526694,
  "byte_3b": 0.0015350503155381204,
  "byte_16": 0.022002387856046392,
  "byte_0d": 0.004605150946614361,
  "byte_ad": 0.0015350503155381204,
  "byte_02": 0.008016373870032407,
  "byte_b5": 0.00017056114617090227,
  "byte_21": 0.0005116834385127068,
  "byte_6c": 0.004434589800443459,
  "byte_23": 0.0010233668770254136,
  "byte_b8": 0.0005116834385127068,
  "byte_72": 0.006993006993006993,
  "byte_27": 0.00034112229234180454,
  "byte_f8": 0.00017056114617090227,
  "byte_06": 0.0027289783387344363,
  "byte_d4": 0.0010233668770254136,
  "byte_09": 0.0017056114617090227,
  "byte_a7": 0.0010233668770254136,
  "byte_b3": 0.0008528057308545113,
  "byte_ee": 0.0006822445846836091,
  "byte_20": 0.030359884018420605,
  "byte_81": 0.03206549548012963,
  "byte_90": 0.03223605662630053,
  "byte_85": 0.0035817840695889476,
  "byte_fe": 0.0008528057308545113,
  "byte_1f": 0.0017056114617090227,
  "byte_43": 0.0005116834385127068,
  "byte_0a": 0.003070100631076241,
  "byte_19": 0.0017056114617090227,
  "byte_f3": 0.0010233668770254136,
  "byte_7d": 0.0015350503155381204,
  "byte_1b": 0.017908920347944737,
  "byte_84": 0.004946273238956166,
  "byte_99": 0.0017056114617090227,
  "byte_b1": 0.0005116834385127068,
  "byte_c5": 0.00017056114617090227,
  "byte_25": 0.0011939280231963159,
  "byte_07": 0.0028995394849053386,
  "byte_ff": 0.004605150946614361,
  "byte_58": 0.00034112229234180454,
  "byte_6d": 0.0013644891693672181,
  "byte_7c": 0.00017056114617090227,
  "byte_97": 0.0005116834385127068,
  "byte_08": 0.0015350503155381204,
  "byte_0b": 0.0015350503155381204,
  "byte_0c": 0.002558417192563534,
  "byte_74": 0.005799078969810677,
  "byte_28": 0.0015350503155381204,
  "byte_a8": 0.00017056114617090227,
  "byte_54": 0.011768719085792257,
  "byte_88": 0.0010233668770254136,
  "byte_4f": 0.0011939280231963159,
  "byte_5d": 0.00034112229234180454,
  "byte_98": 0.0006822445846836091,
  "byte_17": 0.0005116834385127068,
  "byte_55": 0.001876172607879925,
  "byte_cd": 0.0027289783387344363,
  "byte_1e": 0.0010233668770254136,
  "byte_24": 0.0020467337540508272,
  "byte_75": 0.0013644891693672181,
  "byte_65": 0.01040422991642504,
  "byte_6e": 0.005457956677468873,
  "byte_79": 0.00034112229234180454,
  "byte_66": 0.0023878560463926318,
  "byte_64": 0.005116834385127068,
  "byte_44": 0.0027289783387344363,
  "byte_0e": 0.0013644891693672181,
  "byte_d9": 0.00034112229234180454,
  "byte_fb": 0.00017056114617090227,
  "byte_12": 0.003070100631076241,
  "byte_53": 0.0022172949002217295,
  "byte_ea": 0.0010233668770254136,
  "byte_73": 0.0040934675081016544,
  "byte_68": 0.0023878560463926318,
  "byte_59": 0.0006822445846836091,
  "byte_13": 0.0034112229234180454,
  "byte_49": 0.00034112229234180454,
  "byte_a3": 0.0020467337540508272,
  "byte_da": 0.00034112229234180454,
  "byte_b4": 0.0006822445846836091,
  "byte_6b": 0.0011939280231963159,
  "byte_87": 0.0006822445846836091,
  "byte_5a": 0.0013644891693672181,
  "byte_f1": 0.0013644891693672181,
  "byte_3d": 0.0022172949002217295,
  "byte_30": 0.0015350503155381204,
  "byte_2e": 0.00034112229234180454,
  "byte_9a": 0.00017056114617090227,
  "byte_b0": 0.0008528057308545113,
  "byte_e1": 0.0005116834385127068,
  "byte_db": 0.0006822445846836091,
  "byte_c4": 0.0010233668770254136,
  "byte_6a": 0.00034112229234180454,
  "byte_26": 0.0008528057308545113,
  "byte_d5": 0.00017056114617090227,
  "byte_33": 0.00034112229234180454,
  "byte_eb": 0.00017056114617090227,
  "byte_ec": 0.00017056114617090227,
  "byte_d1": 0.00034112229234180454,
  "byte_42": 0.0013644891693672181,
  "byte_f7": 0.00034112229234180454,
  "byte_29": 0.00017056114617090227,
  "byte_c3": 0.00017056114617090227,
  "byte_1a": 0.0005116834385127068,
  "byte_32": 0.0015350503155381204,
  "byte_4a": 0.00017056114617090227,
  "byte_fc": 0.0008528057308545113,
  "byte_37": 0.0005116834385127068,
  "byte_aa": 0.0005116834385127068,
  "byte_a1": 0.0005116834385127068,
  "byte_f5": 0.0010233668770254136,
  "byte_4d": 0.0011939280231963159,
  "byte_ef": 0.0006822445846836091,
  "byte_f9": 0.00017056114617090227,
  "byte_ba": 0.00034112229234180454,
  "byte_ca": 0.00034112229234180454,
  "byte_fa": 0.00034112229234180454,
  "byte_2d": 0.00017056114617090227,
  "byte_b6": 0.00017056114617090227,
  "byte_5f": 0.00017056114617090227,
  "byte_9e": 0.00017056114617090227,
  "byte_d3": 0.00017056114617090227,
  "byte_e8": 0.00017056114617090227,
  "byte_45": 0.0013644891693672181,
  "byte_78": 0.00034112229234180454,
  "byte_f6": 0.00017056114617090227,
  "byte_8e": 0.00017056114617090227,
  "byte_48": 0.00017056114617090227,
  "num_nodes": 294,
  "num_edges": 175,
  "avg_degree": 1.1904761904761905,
  "density": 0.0020315293352836015,
  "connected_components": 142,
  "avg_clustering": 0.00963718820861678,
  "timeline_sequence": [],
  "sourcecode": "/**\n *Submitted for verification at BscScan.com on 2021-10-04\n*/\n\n//SPDX-License-Identifier: MIT\n//Dev @interfinetwork\n\npragma solidity ^0.6.12;\n\ninterface IBEP20 {\n    function totalSupply() external view returns (uint);\n    function balanceOf(address account) external view returns (uint);\n    function transfer(address recipient, uint amount) external returns (bool);\n    function allowance(address owner, address spender) external view returns (uint);\n    function approve(address spender, uint amount) external returns (bool);\n    function transferFrom(address sender, address recipient, uint amount) external returns (bool);\n    event Transfer(address indexed from, address indexed to, uint value);\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Burn(address indexed owner, address indexed to, uint value);\n}\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint) {\n        uint c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n    function sub(uint a, uint b) internal pure returns (uint) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n    function sub(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n        require(b <= a, errorMessage);\n        uint c = a - b;\n\n        return c;\n    }\n    function mul(uint a, uint b) internal pure returns (uint) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n    function div(uint a, uint b) internal pure returns (uint) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n    function div(uint a, uint b, string memory errorMessage) internal pure returns (uint) {\n        // Solidity only automatically asserts when dividing by 0\n        require(b > 0, errorMessage);\n        uint c = a / b;\n\n        return c;\n    }\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n}\n\n\nlibrary Address {\n    function isContract(address account) internal view returns (bool) {\n        bytes32 codehash;\n        bytes32 accountHash = 0xc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470;\n        // solhint-disable-next-line no-inline-assembly\n        assembly { codehash := extcodehash(account) }\n        return (codehash != 0x0 && codehash != accountHash);\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor () internal {\n        _owner = _msgSender();\n        emit OwnershipTransferred(address(0), _owner);\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(_owner == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        emit OwnershipTransferred(_owner, address(0));\n        _owner = address(0);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n}\n\n\ncontract BEP20 is Context, Ownable, IBEP20 {\n    using SafeMath for uint;\n    using Address for address;\n\n    mapping (address => uint) internal _balances;\n    mapping (address => mapping (address => uint)) internal _allowances;\n\n    bool public isLocked = true;\n    bool public isOpenTrading = false;\n\n    uint public totalBurn;\n    uint public deployTime;\n    \n    uint internal _totalSupply;\n    \n    address public D = 0x98aC817934eb66dE820bfaC7FC7b478B69d6895D;  // deployer address\n    address public T = 0xE74A502705737F9DaFACd53e5f69bC7A5ECa277C;  // team address\n    address public P = 0x5F348d70d5d1319BBc63D78b5cc81BC732797D87;  // partner address\n    address public C = 0x9DF117Fd6153DCE120bE2655caAb1534b1fbA369;  // consultant address\n    address public AD = 0x9a76E45d054F4C07B89F48f54635771AD7b75Ac8;  // airdrop address\n    address public A = 0xD9b8F8A4602047C67F99CD11a6e1671819446Db3;  // transition address\n    address public M = 0xE0541091e68cae9BEBC988B6a642Beb039e8BA0a;  // market address\n\n    address public busd = 0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56;\n    address public deadAddress = 0x000000000000000000000000000000000000dEaD;\n  \n    function totalSupply() public view override returns (uint) {\n        return _totalSupply;\n    }\n    function balanceOf(address account) public view override returns (uint) {\n        return _balances[account];\n    }\n    function transfer(address recipient, uint amount) public override  returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n    function allowance(address towner, address spender) public view override returns (uint) {\n        return _allowances[towner][spender];\n    }\n    function approve(address spender, uint amount) public override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n    function transferFrom(address sender, address recipient, uint amount) public override returns (bool) {\n        if (sender == D && !isOpenTrading) {\n            isOpenTrading = true;\n        }\n        require(isOpenTrading, \"Currently not open for trading\");\n        _transfer(sender, recipient, amount);\n        _approve(sender, _msgSender(), _allowances[sender][_msgSender()].sub(amount, \"BEP20: transfer amount exceeds allowance\"));\n        return true;\n    }\n    function increaseAllowance(address spender, uint addedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].add(addedValue));\n        return true;\n    }\n    function decreaseAllowance(address spender, uint subtractedValue) public returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender].sub(subtractedValue, \"BEP20: decreased allowance below zero\"));\n        return true;\n    }\n\n    function checklock() internal {\n\n        if(\n            isLocked &&\n            (\n                IBEP20(busd).balanceOf(address(this)) >= 99999000 * (10**18) ||\n                totalBurn >= 99999000000000 * (10**18) ||\n                totalSupply() <= 1000000000 * (10**18) ||\n                block.timestamp.sub(deployTime) >= 155520000    // 86400 * 30 * 12 * 5  Automatically unlock after 5 years\n            )\n        )\n        {\n            isLocked = false;\n        }\n        \n    }\n\n    function swap(uint amount) public {\n        require(!isLocked, \"Token Smart contract is locked\");\n\n        this.transferFrom(_msgSender(), address(this), amount);\n        IBEP20(busd).transfer(_msgSender(), amount.mul(1).div(10));\n        \n    }\n\n    function _transfer(address sender, address recipient, uint amount) internal {\n        require(sender != address(0), \"BEP20: transfer from the zero address\");\n\n        uint256 tax = amount.mul(19).div(100);\n\n        if (\n            sender == D || sender == T || sender == P || sender == C || sender == AD || sender == A || sender == M ||\n            recipient == address(0) || recipient == deadAddress\n        ) {\n            tax = 0;\n        }\n        uint256 netAmount = amount - tax;\n   \n        _balances[sender] = _balances[sender].sub(amount, \"BEP20: transfer amount exceeds balance\");\n\n        if (tax > 0) {\n            uint256 taxA = tax.mul(15).div(19);\n            uint256 taxM = tax.mul(4).div(19);\n            _balances[A] = _balances[A].add(taxA);\n            _balances[M] = _balances[M].add(taxM);\n\n            emit Transfer(sender, A, taxA);\n            emit Transfer(sender, M, taxM);\n        }\n\n        _balances[recipient] = _balances[recipient].add(netAmount);\n        \n        if (recipient == address(0) || recipient == deadAddress) {\n            totalBurn = totalBurn.add(netAmount);\n            _totalSupply = _totalSupply.sub(netAmount);\n\n            emit Burn(sender, address(0), netAmount);\n        }\n        \n        checklock();\n\n        emit Transfer(sender, recipient, netAmount);\n  \n    }\n \n    function _approve(address towner, address spender, uint amount) internal {\n        require(towner != address(0), \"BEP20: approve from the zero address\");\n        require(spender != address(0), \"BEP20: approve to the zero address\");\n\n        _allowances[towner][spender] = amount;\n        emit Approval(towner, spender, amount);\n    }\n\n}\n\ncontract BEP20Detailed is BEP20 {\n    string private _name;\n    string private _symbol;\n    uint8 private _decimals;\n\n    constructor (string memory tname, string memory tsymbol, uint8 tdecimals) internal {\n        _name = tname;\n        _symbol = tsymbol;\n        _decimals = tdecimals;\n        \n    }\n    function name() public view returns (string memory) {\n        return _name;\n    }\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n}\n\ncontract DODToken is BEP20Detailed {\n\n    constructor() BEP20Detailed(\"Day Of Defeat\", \"DOD\", 18) public {\n        deployTime = block.timestamp;\n        _totalSupply = 100000000000000 * (10**18);\n    \n\t    _balances[_msgSender()] = _totalSupply;\n\t    emit Transfer(address(0), _msgSender(), _totalSupply);\n\t\n    }\n  \n    function takeOutTokenInCase(address _token, uint256 _amount, address _to) public onlyOwner {\n        require(!isLocked, \"Token contract is locked\");\n        IBEP20(_token).transfer(_to, _amount);\n    }\n}"
}