{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 CALLER PUSH2 JUMP JUMPDEST POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH20 AND DUP6 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP3 POP CALLVALUE SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP6 DUP3 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH2 JUMP JUMPDEST POP DUP5 PUSH20 AND PUSH32 DUP4 DUP4 PUSH1 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP3 PUSH20 AND PUSH2 DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP DUP1 SWAP4 POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 DUP3 MUL ADD PUSH1 CALLDATASIZE SWAP1 POP EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH20 AND DUP5 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 AND DUP6 PUSH20 AND PUSH32 DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 AND PUSH1 EXP PUSH1 MUL DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 ADDRESS PUSH20 AND BALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH2 ADDRESS PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP3 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND ADDRESS PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP3 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMPDEST DUP4 PUSH20 AND CALLER PUSH20 AND PUSH32 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP3 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 DUP3 MUL ADD PUSH1 CALLDATASIZE SWAP1 POP EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH20 AND DUP5 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 DUP3 MUL ADD PUSH1 CALLDATASIZE SWAP1 POP EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH32 PUSH1 SLOAD DUP3 PUSH1 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH20 AND DUP5 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 AND DUP3 PUSH20 AND PUSH32 DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 POP PUSH1 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH1 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH1 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH1 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH1 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH1 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH1 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH1 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH1 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH1 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH1 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH1 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH1 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH7 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH2 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH3 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH3 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH3 MUL SWAP1 POP JUMPDEST PUSH8 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 AND PUSH1 EXP PUSH3 MUL SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xfc UNKNOWN_0xc8 UNKNOWN_0x23 UNKNOWN_0x2d UNKNOWN_0xe7 UNKNOWN_0xdf UNKNOWN_0xd3 EXP UNKNOWN_0x21 UNKNOWN_0x1e LOG3 INVALID_0x7c",
  "opcode_entropy": 4.73981116610394,
  "opcode_count": 4153,
  "unique_opcodes": 70,
  "byte_entropy": 4.81033881011734,
  "byte_60": 0.06951113051069402,
  "byte_80": 0.025425578350065474,
  "byte_40": 0.007965953731994761,
  "byte_52": 0.014295067656045395,
  "byte_04": 0.007092972501091226,
  "byte_36": 0.001636839807944129,
  "byte_10": 0.0009821038847664775,
  "byte_61": 0.027717154081187256,
  "byte_01": 0.02422522915757311,
  "byte_3e": 0.0006547359231776517,
  "byte_57": 0.013094718463553033,
  "byte_00": 0.03862941946748145,
  "byte_35": 0.0024006983849847226,
  "byte_7c": 0.0006547359231776517,
  "byte_90": 0.03426451331296377,
  "byte_63": 0.004910519423832388,
  "byte_ff": 0.3379528590135312,
  "byte_16": 0.024334351811436054,
  "byte_06": 0.001855085115670013,
  "byte_fd": 0.00501964207769533,
  "byte_de": 0.00032736796158882583,
  "byte_03": 0.008838934962898297,
  "byte_14": 0.009821038847664776,
  "byte_4a": 0.00032736796158882583,
  "byte_09": 0.0007638585770405937,
  "byte_5e": 0.00021824530772588389,
  "byte_a7": 0.0008729812309035355,
  "byte_b3": 0.0008729812309035355,
  "byte_da": 0.00043649061545176777,
  "byte_18": 0.0008729812309035355,
  "byte_0d": 0.0005456132693147098,
  "byte_dd": 0.0010912265386294195,
  "byte_02": 0.007311217808817111,
  "byte_3f": 0.00021824530772588389,
  "byte_23": 0.001636839807944129,
  "byte_b8": 0.00021824530772588389,
  "byte_72": 0.0005456132693147098,
  "byte_6a": 0.0006547359231776517,
  "byte_2f": 0.00032736796158882583,
  "byte_f2": 0.0008729812309035355,
  "byte_e9": 0.00043649061545176777,
  "byte_dc": 0.00032736796158882583,
  "byte_ef": 0.0007638585770405937,
  "byte_31": 0.0005456132693147098,
  "byte_3c": 0.00032736796158882583,
  "byte_e5": 0.0006547359231776517,
  "byte_67": 0.002728066346573549,
  "byte_1a": 0.0008729812309035355,
  "byte_42": 0.0005456132693147098,
  "byte_b6": 0.0006547359231776517,
  "byte_6f": 0.00043649061545176777,
  "byte_4b": 0.00032736796158882583,
  "byte_48": 0.00032736796158882583,
  "byte_c5": 0.0005456132693147098,
  "byte_9d": 0.00032736796158882583,
  "byte_76": 0.0005456132693147098,
  "byte_66": 0.001964207769532955,
  "byte_84": 0.001964207769532955,
  "byte_8d": 0.0010912265386294195,
  "byte_70": 0.0005456132693147098,
  "byte_a0": 0.0005456132693147098,
  "byte_82": 0.006329113924050633,
  "byte_78": 0.00021824530772588389,
  "byte_f7": 0.0007638585770405937,
  "byte_ae": 0.0005456132693147098,
  "byte_ee": 0.0006547359231776517,
  "byte_49": 0.0005456132693147098,
  "byte_a5": 0.00032736796158882583,
  "byte_cb": 0.00032736796158882583,
  "byte_5b": 0.022261021388040158,
  "byte_74": 0.00032736796158882583,
  "byte_95": 0.0006547359231776517,
  "byte_d8": 0.00032736796158882583,
  "byte_9b": 0.0007638585770405937,
  "byte_41": 0.00010912265386294194,
  "byte_a6": 0.00010912265386294194,
  "byte_f9": 0.00043649061545176777,
  "byte_e1": 0.0008729812309035355,
  "byte_05": 0.0026189436927106066,
  "byte_a9": 0.00010912265386294194,
  "byte_9c": 0.00043649061545176777,
  "byte_bb": 0.00032736796158882583,
  "byte_0e": 0.00043649061545176777,
  "byte_5d": 0.00043649061545176777,
  "byte_1b": 0.001745962461807071,
  "byte_be": 0.00043649061545176777,
  "byte_87": 0.0007638585770405937,
  "byte_32": 0.00032736796158882583,
  "byte_d7": 0.00043649061545176777,
  "byte_3d": 0.0008729812309035355,
  "byte_d6": 0.00010912265386294194,
  "byte_62": 0.0009821038847664775,
  "byte_ed": 0.00021824530772588389,
  "byte_c6": 0.00043649061545176777,
  "byte_e3": 0.00032736796158882583,
  "byte_6b": 0.00043649061545176777,
  "byte_0b": 0.0008729812309035355,
  "byte_37": 0.0009821038847664775,
  "byte_07": 0.0024006983849847226,
  "byte_85": 0.001745962461807071,
  "byte_54": 0.005347010039284155,
  "byte_ec": 0.0006547359231776517,
  "byte_8a": 0.0005456132693147098,
  "byte_c4": 0.0006547359231776517,
  "byte_83": 0.009166302924487123,
  "byte_f4": 0.00043649061545176777,
  "byte_1e": 0.001745962461807071,
  "byte_cd": 0.0005456132693147098,
  "byte_fc": 0.001855085115670013,
  "byte_38": 0.0006547359231776517,
  "byte_ce": 0.00021824530772588389,
  "byte_19": 0.0008729812309035355,
  "byte_47": 0.00043649061545176777,
  "byte_33": 0.0028371890004364906,
  "byte_08": 0.008075076385857704,
  "byte_56": 0.008184199039720647,
  "byte_50": 0.030008729812309034,
  "byte_34": 0.002728066346573549,
  "byte_15": 0.01975120034919249,
  "byte_5f": 0.00021824530772588389,
  "byte_51": 0.008293321693583587,
  "byte_20": 0.02247926669576604,
  "byte_81": 0.02073330423395897,
  "byte_91": 0.012003491924923615,
  "byte_9f": 0.00010912265386294194,
  "byte_1f": 0.001745962461807071,
  "byte_cc": 0.00021824530772588389,
  "byte_0a": 0.012112614578786556,
  "byte_92": 0.003491924923614142,
  "byte_f3": 0.002509821038847665,
  "byte_e6": 0.00043649061545176777,
  "byte_25": 0.0005456132693147098,
  "byte_73": 0.016477520733304232,
  "byte_27": 0.0007638585770405937,
  "byte_d5": 0.00021824530772588389,
  "byte_fb": 0.00010912265386294194,
  "byte_0f": 0.0009821038847664775,
  "byte_12": 0.00043649061545176777,
  "byte_26": 0.00032736796158882583,
  "byte_8b": 0.00032736796158882583,
  "byte_2b": 0.0007638585770405937,
  "byte_99": 0.00010912265386294194,
  "byte_fe": 0.0008729812309035355,
  "byte_13": 0.0007638585770405937,
  "byte_5c": 0.00021824530772588389,
  "byte_55": 0.002073330423395897,
  "byte_89": 0.00032736796158882583,
  "byte_ab": 0.00021824530772588389,
  "byte_e0": 0.00032736796158882583,
  "byte_d1": 0.0005456132693147098,
  "byte_4d": 0.0006547359231776517,
  "byte_c2": 0.0009821038847664775,
  "byte_30": 0.0006547359231776517,
  "byte_17": 0.0008729812309035355,
  "byte_3b": 0.0005456132693147098,
  "byte_6d": 0.0005456132693147098,
  "byte_ac": 0.00010912265386294194,
  "byte_4e": 0.00043649061545176777,
  "byte_d2": 0.00043649061545176777,
  "byte_69": 0.0009821038847664775,
  "byte_b7": 0.00010912265386294194,
  "byte_d9": 0.00021824530772588389,
  "byte_fa": 0.00043649061545176777,
  "byte_75": 0.00032736796158882583,
  "byte_7f": 0.0014185945002182453,
  "byte_a1": 0.0008729812309035355,
  "byte_e2": 0.0007638585770405937,
  "byte_1c": 0.0014185945002182453,
  "byte_b9": 0.0010912265386294195,
  "byte_45": 0.0005456132693147098,
  "byte_aa": 0.0006547359231776517,
  "byte_a3": 0.0013094718463553033,
  "byte_bc": 0.00043649061545176777,
  "byte_7d": 0.0008729812309035355,
  "byte_e8": 0.00032736796158882583,
  "byte_88": 0.0009821038847664775,
  "byte_f5": 0.0010912265386294195,
  "byte_b4": 0.00021824530772588389,
  "byte_a2": 0.00032736796158882583,
  "byte_f1": 0.0006547359231776517,
  "byte_93": 0.0008729812309035355,
  "byte_44": 0.00043649061545176777,
  "byte_68": 0.0007638585770405937,
  "byte_65": 0.00043649061545176777,
  "byte_77": 0.0005456132693147098,
  "byte_8c": 0.00043649061545176777,
  "byte_eb": 0.00032736796158882583,
  "byte_4f": 0.0007638585770405937,
  "byte_71": 0.00043649061545176777,
  "byte_c0": 0.00043649061545176777,
  "byte_b2": 0.00043649061545176777,
  "byte_29": 0.0007638585770405937,
  "byte_c8": 0.0012003491924923613,
  "byte_c7": 0.00043649061545176777,
  "byte_c3": 0.0005456132693147098,
  "byte_86": 0.0012003491924923613,
  "byte_11": 0.0013094718463553033,
  "byte_0c": 0.00043649061545176777,
  "byte_ba": 0.00021824530772588389,
  "byte_21": 0.0010912265386294195,
  "byte_ad": 0.00043649061545176777,
  "byte_b0": 0.0005456132693147098,
  "byte_28": 0.0008729812309035355,
  "byte_5a": 0.0006547359231776517,
  "byte_64": 0.00032736796158882583,
  "byte_43": 0.00021824530772588389,
  "byte_a4": 0.00021824530772588389,
  "byte_b5": 0.00043649061545176777,
  "byte_53": 0.00043649061545176777,
  "byte_79": 0.00021824530772588389,
  "byte_bf": 0.00021824530772588389,
  "byte_7a": 0.00032736796158882583,
  "byte_df": 0.00032736796158882583,
  "byte_af": 0.00010912265386294194,
  "byte_e7": 0.00021824530772588389,
  "byte_94": 0.00021824530772588389,
  "byte_4c": 0.00010912265386294194,
  "byte_1d": 0.00032736796158882583,
  "byte_7e": 0.00021824530772588389,
  "byte_a8": 0.00021824530772588389,
  "byte_7b": 0.00010912265386294194,
  "byte_46": 0.00021824530772588389,
  "byte_ca": 0.00010912265386294194,
  "byte_c1": 0.00021824530772588389,
  "byte_e4": 0.00010912265386294194,
  "byte_2c": 0.00021824530772588389,
  "byte_8e": 0.00021824530772588389,
  "byte_c9": 0.00021824530772588389,
  "byte_b1": 0.00010912265386294194,
  "byte_2e": 0.00010912265386294194,
  "byte_9e": 0.00021824530772588389,
  "byte_ea": 0.00021824530772588389,
  "byte_58": 0.00043649061545176777,
  "byte_f8": 0.00021824530772588389,
  "byte_f0": 0.00021824530772588389,
  "byte_d0": 0.00021824530772588389,
  "byte_59": 0.00021824530772588389,
  "byte_d3": 0.00032736796158882583,
  "byte_22": 0.0009821038847664775,
  "byte_24": 0.00021824530772588389,
  "byte_f6": 0.00010912265386294194,
  "byte_6c": 0.00010912265386294194,
  "byte_97": 0.00010912265386294194,
  "byte_2d": 0.00021824530772588389,
  "byte_2a": 0.00010912265386294194,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 10,
  "event_nums": 4,
  "creation_block": 7565428,
  "creation_timestamp": 1555236157,
  "life_time": 143.0,
  "duration_seconds": 2021.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 4.2e+17,
  "avg_value": 3.8181818181818184e+16,
  "txn_per_block": 0.06944444444444445,
  "avg_gas_limit": 305064.9,
  "std_gas_limit": 764501.2460406394,
  "avg_gas_used": 289972.5,
  "std_gas_used": 769615.3058435429,
  "avg_gas_price": 10300000000.0,
  "std_gas_price": 781024967.5906655,
  "transfer_num": 2,
  "tokenpurchase_num": 2,
  "atinversebrah_num": 1,
  "timeline_sequence": [
    [
      7565428,
      1555236157,
      0,
      20,
      0,
      2598225,
      10000000000,
      0,
      1,
      4177241,
      2598225,
      15555519
    ],
    [
      7565470,
      1555236670,
      133,
      39,
      0,
      21000,
      9000000000,
      1,
      0,
      1186285,
      21000,
      15555477
    ],
    [
      7565475,
      1555236737,
      134,
      44,
      0,
      80178,
      9000000000,
      0,
      1,
      1621486,
      80178,
      15555472
    ],
    [
      7565547,
      1555237781,
      135,
      64,
      100000000000000000,
      50178,
      10000000000,
      1,
      0,
      3247726,
      25024,
      15555400
    ],
    [
      7565552,
      1555237906,
      136,
      131,
      100000000000000000,
      50178,
      10000000000,
      1,
      0,
      4838991,
      25024,
      15555395
    ],
    [
      7565552,
      1555237906,
      137,
      132,
      100000000000000000,
      50178,
      11000000000,
      1,
      0,
      4864015,
      25024,
      15555395
    ],
    [
      7565560,
      1555238008,
      138,
      23,
      100000000000000000,
      50178,
      11000000000,
      1,
      0,
      669647,
      25024,
      15555387
    ],
    [
      7565562,
      1555238048,
      139,
      8,
      10000000000000000,
      50178,
      11000000000,
      1,
      0,
      247091,
      25024,
      15555385
    ],
    [
      7565565,
      1555238085,
      140,
      25,
      10000000000000000,
      50178,
      11000000000,
      1,
      0,
      729763,
      25024,
      15555382
    ],
    [
      7565571,
      1555238178,
      142,
      38,
      0,
      50178,
      11000000000,
      0,
      1,
      2052760,
      50178,
      15555376
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.18;\n\n// ----------------------------------------------------------------------------\n// 'Davichi Network'\n//\n// NAME     : Davichi Network\n// Symbol   : DVC\n// Total supply: 100.000.000\n// Decimals    : 8\n//\n// Enjoy.\n//\n// (c) by Davichi Network team. The desings by Mr.Tuna!\n// ----------------------------------------------------------------------------\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n    function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a >= b ? a : b;\n    }\n\n    function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n        return a < b ? a : b;\n    }\n\n    function max256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    function min256(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n}\n\ncontract ERC20Basic {\n    uint256 public totalSupply;\n\n    bool public transfersEnabled;\n\n    function balanceOf(address who) public view returns (uint256);\n\n    function transfer(address to, uint256 value) public returns (bool);\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract ERC20 {\n    uint256 public totalSupply;\n\n    bool public transfersEnabled;\n\n    function balanceOf(address _owner) public constant returns (uint256 balance);\n\n    function transfer(address _to, uint256 _value) public returns (bool success);\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);\n\n    function approve(address _spender, uint256 _value) public returns (bool success);\n\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);\n\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n\n    mapping(address => uint256) balances;\n\n    /**\n    * @dev protection against short address attack\n    */\n    modifier onlyPayloadSize(uint numwords) {\n        assert(msg.data.length == numwords * 32 + 4);\n        _;\n    }\n\n\n    /**\n    * @dev transfer token for a specified address\n    * @param _to The address to transfer to.\n    * @param _value The amount to be transferred.\n    */\n    function transfer(address _to, uint256 _value) public onlyPayloadSize(2) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[msg.sender]);\n        require(transfersEnabled);\n\n        // SafeMath.sub will throw if there is not enough balance.\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    /**\n    * @dev Gets the balance of the specified address.\n    * @param _owner The address to query the the balance of.\n    * @return An uint256 representing the amount owned by the passed address.\n    */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n}\n\ncontract StandardToken is ERC20, BasicToken {\n\n    mapping(address => mapping(address => uint256)) internal allowed;\n\n    /**\n     * @dev Transfer tokens from one address to another\n     * @param _from address The address which you want to send tokens from\n     * @param _to address The address which you want to transfer to\n     * @param _value uint256 the amount of tokens to be transferred\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public onlyPayloadSize(3) returns (bool) {\n        require(_to != address(0));\n        require(_value <= balances[_from]);\n        require(_value <= allowed[_from][msg.sender]);\n        require(transfersEnabled);\n\n        balances[_from] = balances[_from].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n        Transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n     *\n     * Beware that changing an allowance with this method brings the risk that someone may use both the old\n     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     * @param _spender The address which will spend the funds.\n     * @param _value The amount of tokens to be spent.\n     */\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        allowed[msg.sender][_spender] = _value;\n        Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    /**\n     * @dev Function to check the amount of tokens that an owner allowed to a spender.\n     * @param _owner address The address which owns the funds.\n     * @param _spender address The address which will spend the funds.\n     * @return A uint256 specifying the amount of tokens still available for the spender.\n     */\n    function allowance(address _owner, address _spender) public onlyPayloadSize(2) constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    /**\n     * approve should be called when allowed[_spender] == 0. To increment\n     * allowed value is better to use this function to avoid 2 calls (and wait until\n     * the first transaction is mined)\n     * From MonolithDAO Token.sol\n     */\n    function increaseApproval(address _spender, uint _addedValue) public returns (bool success) {\n        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool success) {\n        uint oldValue = allowed[msg.sender][_spender];\n        if (_subtractedValue > oldValue) {\n            allowed[msg.sender][_spender] = 0;\n        } else {\n            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n        }\n        Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n        return true;\n    }\n\n}\n\ncontract DavichiNetwork is StandardToken {\n\n    string public constant name = \"Davichi Network\";\n    string public constant symbol = \"DVC\";\n    uint8 public constant decimals = 8;\n    uint256 public constant INITIAL_SUPPLY = 10 * 10**1 * (10**uint256(decimals));\n    uint256 public weiRaised;\n    uint256 public tokenAllocated;\n    address public owner;\n    bool public saleToken = true;\n\n    event OwnerChanged(address indexed previousOwner, address indexed newOwner);\n    event TokenPurchase(address indexed beneficiary, uint256 value, uint256 amount);\n    event TokenLimitReached(uint256 tokenRaised, uint256 purchasedToken);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    function DavichiNetwork() public {\n        totalSupply = INITIAL_SUPPLY;\n        owner = msg.sender;\n        //owner = msg.sender; // for testing\n        balances[owner] = INITIAL_SUPPLY;\n        tokenAllocated = 0;\n        transfersEnabled = true;\n    }\n\n    // fallback function can be used to buy tokens\n    function() payable public {\n        buyTokens(msg.sender);\n    }\n\n    function buyTokens(address _investor) public payable returns (uint256){\n        require(_investor != address(0));\n        require(saleToken == true);\n        address wallet = owner;\n        uint256 weiAmount = msg.value;\n        uint256 tokens = validPurchaseTokens(weiAmount);\n        if (tokens == 0) {revert();}\n        weiRaised = weiRaised.add(weiAmount);\n        tokenAllocated = tokenAllocated.add(tokens);\n        mint(_investor, tokens, owner);\n\n        TokenPurchase(_investor, weiAmount, tokens);\n        wallet.transfer(weiAmount);\n        return tokens;\n    }\n\n    function validPurchaseTokens(uint256 _weiAmount) public returns (uint256) {\n        uint256 addTokens = getTotalAmountOfTokens(_weiAmount);\n        if (addTokens > balances[owner]) {\n            TokenLimitReached(tokenAllocated, addTokens);\n            return 0;\n        }\n        return addTokens;\n    }\n\n    /**\n    * If the user sends 0 ether, he receives 1\n    * If he sends 0.001 ether, he receives 10 \n    * If he sends 0.005 ether, he receives 50\n    * If he sends 0.01 ether, he receives 100\n    * If he sends 0.1 ether he receives 1000\n    * If he sends 1 ether, he receives 10,000 +100%\n    * If he sends 5 ether, he receives 50,000 +100%\n    * If he sends 10 ether, he receives 100,000 +100%\n    */\n    function getTotalAmountOfTokens(uint256 _weiAmount) internal pure returns (uint256) {\n        uint256 amountOfTokens = 0;\n        if(_weiAmount == 0){\n            amountOfTokens = 1 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.001 ether){\n            amountOfTokens = 10 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.002 ether){\n            amountOfTokens = 20 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.003 ether){\n            amountOfTokens = 30 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.004 ether){\n            amountOfTokens = 40 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.005 ether){\n            amountOfTokens = 50 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.006 ether){\n            amountOfTokens = 60 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.007 ether){\n            amountOfTokens = 70 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.008 ether){\n            amountOfTokens = 80 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.009 ether){\n            amountOfTokens = 90 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.01 ether){\n            amountOfTokens = 100 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.02 ether){\n            amountOfTokens = 200 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.03 ether){\n            amountOfTokens = 300 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.04 ether){\n            amountOfTokens = 400 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.05 ether){\n            amountOfTokens = 500 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.06 ether){\n            amountOfTokens = 600 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.07 ether){\n            amountOfTokens = 700 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.08 ether){\n            amountOfTokens = 800 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.09 ether){\n            amountOfTokens = 900 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.1 ether){\n            amountOfTokens = 1000 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.2 ether){\n            amountOfTokens = 2000 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.3 ether){\n            amountOfTokens = 3000 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.4 ether){\n            amountOfTokens = 4000 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.5 ether){\n            amountOfTokens = 5000 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.6 ether){\n            amountOfTokens = 6000 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.7 ether){\n            amountOfTokens = 7000 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.8 ether){\n            amountOfTokens = 8000 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 0.9 ether){\n            amountOfTokens = 9000 * (10**uint256(decimals));\n        }\n        if( _weiAmount == 1 ether){\n            amountOfTokens = 10000 * (10**uint256(decimals));\n             }\n        if( _weiAmount == 2 ether){\n            amountOfTokens = 20 * 10**3 * (10**uint256(decimals));\n          }\n        if( _weiAmount == 3 ether){\n            amountOfTokens = 30 * 10**3 * (10**uint256(decimals));\n         }\n        if( _weiAmount == 4 ether){\n            amountOfTokens = 40 * 10**3 * (10**uint256(decimals));\n          }\n        if( _weiAmount == 5 ether){\n            amountOfTokens = 50 * 10**3 * (10**uint256(decimals));\n         }\n        if( _weiAmount == 6 ether){\n            amountOfTokens = 60 * 10**3 * (10**uint256(decimals));\n             }\n        if( _weiAmount == 7 ether){\n            amountOfTokens = 70 * 10**3 * (10**uint256(decimals));\n         }\n        if( _weiAmount == 8 ether){\n            amountOfTokens = 80 * 10**3 * (10**uint256(decimals));\n         }\n        if( _weiAmount == 9 ether){\n            amountOfTokens = 90 * 10**3 * (10**uint256(decimals));\n         }\n        if( _weiAmount == 10 ether){\n            amountOfTokens = 100 * 10**3 * (10**uint256(decimals));          \n        }\n        return amountOfTokens;\n    }\n\n\n    function mint(address _to, uint256 _amount, address _owner) internal returns (bool) {\n        require(_to != address(0));\n        require(_amount <= balances[_owner]);\n\n        balances[_to] = balances[_to].add(_amount);\n        balances[_owner] = balances[_owner].sub(_amount);\n        Transfer(_owner, _to, _amount);\n        return true;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function changeOwner(address _newOwner) onlyOwner public returns (bool){\n        require(_newOwner != address(0));\n        OwnerChanged(owner, _newOwner);\n        owner = _newOwner;\n        return true;\n    }\n\n    function startSale() public onlyOwner {\n        saleToken = true;\n    }\n\n    function stopSale() public onlyOwner {\n        saleToken = false;\n    }\n\n    function enableTransfers(bool _transfersEnabled) onlyOwner public {\n        transfersEnabled = _transfersEnabled;\n    }\n\n    /**\n     * Peterson's Law Protection\n     * Claim tokens\n     */\n    function claimTokens() public onlyOwner {\n        owner.transfer(this.balance);\n        uint256 balance = balanceOf(this);\n        transfer(owner, balance);\n        Transfer(this, owner, balance);\n    }\n}"
}