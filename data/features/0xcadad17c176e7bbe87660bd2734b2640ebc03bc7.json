{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP7 SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 GT ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 DUP3 LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 DUP2 MSTORE DUP3 DUP3 SHA3 CALLER DUP4 MSTORE SWAP1 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP7 AND DUP2 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP9 AND SWAP3 PUSH32 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE POP JUMP JUMPDEST PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 DUP3 LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SLOAD SWAP3 DUP6 AND DUP3 MSTORE SWAP1 SHA3 SLOAD PUSH2 SWAP2 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP6 SWAP1 SWAP6 SSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP5 AND DUP3 MSTORE DUP5 DUP3 SHA3 SWAP2 SWAP1 SWAP2 SSTORE DUP3 SLOAD PUSH20 NOT AND DUP3 OR SWAP1 SWAP3 SSTORE DUP3 MLOAD DUP5 DUP2 MSTORE SWAP3 MLOAD SWAP1 SWAP3 CALLER SWAP3 PUSH32 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP STOP LOG1 PUSH6 SHA3 BYTE DUP7 UNKNOWN_0xb8 CHAINID UNKNOWN_0xa8 MSTORE8 UNKNOWN_0xbd CALLER LOG1 PUSH3 STOP EXP SWAP3 INVALID_0x75",
  "opcode_entropy": 4.752738831025083,
  "opcode_count": 1376,
  "unique_opcodes": 59,
  "byte_entropy": 5.80884422114481,
  "byte_60": 0.11032531824611033,
  "byte_80": 0.03866100895803866,
  "byte_40": 0.011315417256011316,
  "byte_52": 0.033003300330033,
  "byte_04": 0.006129184347006129,
  "byte_36": 0.0004714757190004715,
  "byte_10": 0.0023573785950023575,
  "byte_61": 0.042432814710042434,
  "byte_00": 0.055634134842055635,
  "byte_b9": 0.000942951438000943,
  "byte_57": 0.019801980198019802,
  "byte_63": 0.010843941537010843,
  "byte_ff": 0.024516737388024516,
  "byte_7c": 0.0004714757190004715,
  "byte_01": 0.03818953323903819,
  "byte_35": 0.006129184347006129,
  "byte_16": 0.02498821310702499,
  "byte_06": 0.0033003300330033004,
  "byte_fd": 0.012258368694012258,
  "byte_de": 0.0004714757190004715,
  "byte_03": 0.02593116454502593,
  "byte_81": 0.027817067421027818,
  "byte_14": 0.007072135785007072,
  "byte_be": 0.000942951438000943,
  "byte_09": 0.000942951438000943,
  "byte_5e": 0.000942951438000943,
  "byte_a7": 0.002828854314002829,
  "byte_b3": 0.0023573785950023575,
  "byte_48": 0.0004714757190004715,
  "byte_18": 0.000942951438000943,
  "byte_0d": 0.000942951438000943,
  "byte_dd": 0.003771805752003772,
  "byte_23": 0.001885902876001886,
  "byte_b8": 0.000942951438000943,
  "byte_72": 0.001885902876001886,
  "byte_31": 0.0023573785950023575,
  "byte_3c": 0.0004714757190004715,
  "byte_e5": 0.000942951438000943,
  "byte_67": 0.000942951438000943,
  "byte_d1": 0.000942951438000943,
  "byte_70": 0.0004714757190004715,
  "byte_a0": 0.014144271570014143,
  "byte_82": 0.01885902876001886,
  "byte_e6": 0.000942951438000943,
  "byte_8d": 0.001885902876001886,
  "byte_a5": 0.000942951438000943,
  "byte_cb": 0.0004714757190004715,
  "byte_5b": 0.034417727487034415,
  "byte_02": 0.027345591702027345,
  "byte_07": 0.005186232909005186,
  "byte_94": 0.0033003300330033004,
  "byte_b0": 0.001885902876001886,
  "byte_78": 0.0004714757190004715,
  "byte_0f": 0.0004714757190004715,
  "byte_38": 0.0004714757190004715,
  "byte_95": 0.004714757190004715,
  "byte_d8": 0.0004714757190004715,
  "byte_9b": 0.0023573785950023575,
  "byte_41": 0.000942951438000943,
  "byte_a9": 0.000942951438000943,
  "byte_05": 0.005657708628005658,
  "byte_9c": 0.0004714757190004715,
  "byte_bb": 0.0004714757190004715,
  "byte_62": 0.0014144271570014145,
  "byte_ed": 0.0004714757190004715,
  "byte_3e": 0.0004714757190004715,
  "byte_8b": 0.000942951438000943,
  "byte_f2": 0.0023573785950023575,
  "byte_e3": 0.0004714757190004715,
  "byte_b2": 0.0014144271570014145,
  "byte_34": 0.005657708628005658,
  "byte_15": 0.019801980198019802,
  "byte_ca": 0.0004714757190004715,
  "byte_50": 0.02215935879302216,
  "byte_d3": 0.0014144271570014145,
  "byte_56": 0.01603017444601603,
  "byte_51": 0.010372465818010372,
  "byte_20": 0.026402640264026403,
  "byte_83": 0.013672795851013672,
  "byte_91": 0.013201320132013201,
  "byte_92": 0.01272984441301273,
  "byte_90": 0.04667609618104668,
  "byte_85": 0.0033003300330033004,
  "byte_f5": 0.005186232909005186,
  "byte_1f": 0.0004714757190004715,
  "byte_3a": 0.000942951438000943,
  "byte_0a": 0.015558698727015558,
  "byte_19": 0.000942951438000943,
  "byte_f3": 0.0023573785950023575,
  "byte_54": 0.010843941537010843,
  "byte_6c": 0.002828854314002829,
  "byte_24": 0.001885902876001886,
  "byte_8c": 0.000942951438000943,
  "byte_88": 0.0014144271570014145,
  "byte_44": 0.001885902876001886,
  "byte_8e": 0.0004714757190004715,
  "byte_13": 0.000942951438000943,
  "byte_1c": 0.0004714757190004715,
  "byte_33": 0.006129184347006129,
  "byte_42": 0.0014144271570014145,
  "byte_73": 0.000942951438000943,
  "byte_97": 0.0004714757190004715,
  "byte_f4": 0.0004714757190004715,
  "byte_0e": 0.000942951438000943,
  "byte_7f": 0.002828854314002829,
  "byte_6e": 0.002828854314002829,
  "byte_6b": 0.0004714757190004715,
  "byte_6f": 0.0014144271570014145,
  "byte_66": 0.0004714757190004715,
  "byte_43": 0.0014144271570014145,
  "byte_64": 0.000942951438000943,
  "byte_21": 0.0004714757190004715,
  "byte_86": 0.002828854314002829,
  "byte_55": 0.005186232909005186,
  "byte_93": 0.004243281471004243,
  "byte_e1": 0.0004714757190004715,
  "byte_eb": 0.000942951438000943,
  "byte_ec": 0.0004714757190004715,
  "byte_7d": 0.000942951438000943,
  "byte_4f": 0.0004714757190004715,
  "byte_71": 0.0004714757190004715,
  "byte_1e": 0.000942951438000943,
  "byte_84": 0.004714757190004715,
  "byte_c0": 0.000942951438000943,
  "byte_f7": 0.0004714757190004715,
  "byte_29": 0.000942951438000943,
  "byte_c8": 0.0023573785950023575,
  "byte_c7": 0.0004714757190004715,
  "byte_c3": 0.0004714757190004715,
  "byte_25": 0.0004714757190004715,
  "byte_a3": 0.001885902876001886,
  "byte_11": 0.001885902876001886,
  "byte_f0": 0.0004714757190004715,
  "byte_08": 0.002828854314002829,
  "byte_ad": 0.0014144271570014145,
  "byte_1b": 0.0014144271570014145,
  "byte_e2": 0.0014144271570014145,
  "byte_69": 0.001885902876001886,
  "byte_c2": 0.0014144271570014145,
  "byte_68": 0.0014144271570014145,
  "byte_fc": 0.0014144271570014145,
  "byte_37": 0.0014144271570014145,
  "byte_aa": 0.0014144271570014145,
  "byte_2b": 0.0014144271570014145,
  "byte_f1": 0.0014144271570014145,
  "byte_c4": 0.0014144271570014145,
  "byte_a1": 0.0023573785950023575,
  "byte_28": 0.0014144271570014145,
  "byte_5a": 0.0014144271570014145,
  "byte_4d": 0.0014144271570014145,
  "byte_ef": 0.0014144271570014145,
  "byte_12": 0.0004714757190004715,
  "byte_59": 0.000942951438000943,
  "byte_17": 0.000942951438000943,
  "byte_2c": 0.0004714757190004715,
  "byte_30": 0.001885902876001886,
  "byte_2e": 0.000942951438000943,
  "byte_e0": 0.0004714757190004715,
  "byte_0b": 0.0004714757190004715,
  "byte_3d": 0.0004714757190004715,
  "byte_bd": 0.000942951438000943,
  "byte_fe": 0.000942951438000943,
  "byte_65": 0.0004714757190004715,
  "byte_7a": 0.000942951438000943,
  "byte_58": 0.0004714757190004715,
  "byte_1a": 0.0004714757190004715,
  "byte_46": 0.0004714757190004715,
  "byte_a8": 0.0004714757190004715,
  "byte_53": 0.000942951438000943,
  "byte_fa": 0.0004714757190004715,
  "byte_75": 0.0004714757190004715,
  "byte_49": 0.0004714757190004715,
  "byte_b4": 0.000942951438000943,
  "byte_7e": 0.0004714757190004715,
  "byte_2a": 0.0004714757190004715,
  "byte_32": 0.0004714757190004715,
  "num_nodes": 8,
  "num_edges": 7,
  "avg_degree": 1.75,
  "density": 0.125,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 15,
  "event_nums": 15,
  "creation_block": 6397904,
  "creation_timestamp": 1537893383,
  "life_time": 2355410.0,
  "duration_seconds": 33350701.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 9,
  "num_buyers": 1,
  "num_sellers": 7,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 6.368315338596958e-06,
  "avg_gas_limit": 90876.66666666667,
  "std_gas_limit": 159637.66435344203,
  "avg_gas_used": 86340.06666666667,
  "std_gas_used": 160913.36130247923,
  "avg_gas_price": 33933333333.333332,
  "std_gas_price": 14210168503.184221,
  "transfer_num": 12,
  "atinversebrah_num": 1,
  "transferownership_num": 1,
  "approve_num": 1,
  "timeline_sequence": [
    [
      6397904,
      1537893383,
      70,
      133,
      0,
      687208,
      8000000000,
      0,
      1,
      6781042,
      687208,
      16723043
    ],
    [
      6397914,
      1537893556,
      71,
      190,
      0,
      57411,
      8000000000,
      0,
      1,
      7903711,
      42411,
      16723033
    ],
    [
      6714170,
      1542357155,
      559,
      33,
      0,
      52064,
      41000000000,
      0,
      1,
      1299879,
      52064,
      16406777
    ],
    [
      6895007,
      1544931699,
      602,
      7,
      0,
      52064,
      41000000000,
      0,
      1,
      255560,
      52064,
      16225940
    ],
    [
      6895083,
      1544932882,
      2,
      25,
      0,
      37000,
      41000000000,
      0,
      1,
      905172,
      37000,
      16225864
    ],
    [
      6895149,
      1544933760,
      3,
      22,
      0,
      37000,
      41000000000,
      0,
      1,
      1167886,
      37000,
      16225798
    ],
    [
      6963698,
      1545937700,
      625,
      0,
      0,
      52064,
      41000000000,
      0,
      1,
      52064,
      52064,
      16157249
    ],
    [
      7109863,
      1548178304,
      10,
      13,
      0,
      37064,
      41000000000,
      0,
      1,
      423558,
      22064,
      16011084
    ],
    [
      7136088,
      1548626051,
      670,
      5,
      0,
      52064,
      41000000000,
      0,
      1,
      204098,
      52064,
      15984859
    ],
    [
      7162087,
      1549085137,
      686,
      64,
      0,
      52000,
      41000000000,
      0,
      1,
      4576278,
      52000,
      15958860
    ],
    [
      7256910,
      1550916034,
      757,
      24,
      0,
      52000,
      41000000000,
      0,
      1,
      773659,
      52000,
      15864037
    ],
    [
      7256960,
      1550916853,
      0,
      0,
      0,
      37064,
      41000000000,
      0,
      1,
      37064,
      37064,
      15863987
    ],
    [
      7331118,
      1552082309,
      786,
      7,
      0,
      52000,
      41000000000,
      0,
      1,
      563684,
      52000,
      15789829
    ],
    [
      7833058,
      1558843668,
      13,
      3,
      0,
      37000,
      41000000000,
      0,
      1,
      175137,
      22000,
      15287889
    ],
    [
      8753314,
      1571244084,
      101,
      161,
      0,
      69147,
      1000000000,
      0,
      1,
      9765243,
      46098,
      14367633
    ]
  ],
  "sourcecode": "pragma solidity 0.4.24;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n  contract ERC20 {\n  function totalSupply()public view returns (uint total_Supply);\n  function balanceOf(address _owner)public view returns (uint256 balance);\n  function allowance(address _owner, address _spender)public view returns (uint remaining);\n  function transferFrom(address _from, address _to, uint _amount)public returns (bool ok);\n  function approve(address _spender, uint _amount)public returns (bool ok);\n  function transfer(address _to, uint _amount)public returns (bool ok);\n  event Transfer(address indexed _from, address indexed _to, uint _amount);\n  event Approval(address indexed _owner, address indexed _spender, uint _amount);\n}\n\n\ncontract BankofCanada is ERC20\n{using SafeMath for uint256;\n   string public constant symbol = \",000.CAD.CanadianDollar\";\n     string public constant name = \"Bank of Canada\";\n     uint public constant decimals = 18;\n     uint256 _totalSupply = 999000000000000000000 * 10 ** 18; // 999 Trillion Total Supply including 18 decimal\n     \n     // Owner of this contract\n     address public owner;\n     \n  // Balances for each account\n     mapping(address => uint256) balances;\n  \n     // Owner of account approves the transfer of an amount to another account\n     mapping(address => mapping (address => uint256)) allowed;\n  \n     // Functions with this modifier can only be executed by the owner\n     modifier onlyOwner() {\n         if (msg.sender != owner) {\n             revert();\n         }\n         _;\n     }\n  \n     // Constructor\n     constructor () public {\n         owner = msg.sender;\n         balances[owner] = _totalSupply;\n        emit Transfer(0, owner, _totalSupply);\n     }\n     \n     function burntokens(uint256 tokens) public onlyOwner {\n         _totalSupply = (_totalSupply).sub(tokens);\n     }\n  \n    // what is the total supply of the ech tokens\n     function totalSupply() public view returns (uint256 total_Supply) {\n         total_Supply = _totalSupply;\n     }\n       // What is the balance of a particular account?\n     function balanceOf(address _owner)public view returns (uint256 balance) {\n         return balances[_owner];\n     }\n  \n     // Transfer the balance from owner's account to another account\n     function transfer(address _to, uint256 _amount)public returns (bool ok) {\n        require( _to != 0x0);\n        require(balances[msg.sender] >= _amount && _amount >= 0);\n        balances[msg.sender] = (balances[msg.sender]).sub(_amount);\n        balances[_to] = (balances[_to]).add(_amount);\n        emit Transfer(msg.sender, _to, _amount);\n             return true;\n         }\n         \n    // Send _value amount of tokens from address _from to address _to\n     // The transferFrom method is used for a withdraw workflow, allowing contracts to send\n     // tokens on your behalf, for example to \"deposit\" to a contract address and/or to charge\n     // fees in sub-currencies; the command should fail unless the _from account has\n     // deliberately authorized the sender of the message via some mechanism; we propose\n     // these standardized APIs for approval:\n     function transferFrom( address _from, address _to, uint256 _amount )public returns (bool ok) {\n     require( _to != 0x0);\n     require(balances[_from] >= _amount && allowed[_from][msg.sender] >= _amount && _amount >= 0);\n     balances[_from] = (balances[_from]).sub(_amount);\n     allowed[_from][msg.sender] = (allowed[_from][msg.sender]).sub(_amount);\n     balances[_to] = (balances[_to]).add(_amount);\n     emit Transfer(_from, _to, _amount);\n     return true;\n         }\n \n     // Allow _spender to withdraw from your account, multiple times, up to the _value amount.\n     // If this function is called again it overwrites the current allowance with _value.\n     function approve(address _spender, uint256 _amount)public returns (bool ok) {\n         require( _spender != 0x0);\n         allowed[msg.sender][_spender] = _amount;\n         emit Approval(msg.sender, _spender, _amount);\n         return true;\n     }\n  \n     function allowance(address _owner, address _spender)public view returns (uint256 remaining) {\n         require( _owner != 0x0 && _spender !=0x0);\n         return allowed[_owner][_spender];\n   }\n        \n     //In case the ownership needs to be transferred\n\tfunction transferOwnership(address newOwner) external onlyOwner\n\t{\n\t    uint256 x = balances[owner];\n\t    require( newOwner != 0x0);\n\t    balances[newOwner] = (balances[newOwner]).add(balances[owner]);\n\t    balances[owner] = 0;\n\t    owner = newOwner;\n\t    emit Transfer(msg.sender, newOwner, x);\n\t}\n  \n\t\n  \n\n}"
}