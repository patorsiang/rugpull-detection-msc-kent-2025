{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP2 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP3 PUSH20 AND PUSH1 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND PUSH1 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP2 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 DUP3 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST SWAP5 POP PUSH2 PUSH7 DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP5 POP PUSH2 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP5 DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP3 POP PUSH2 DUP8 DUP5 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP PUSH1 SLOAD TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD DUP3 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD DUP4 LT ISZERO PUSH2 JUMPI PUSH2 DUP4 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP3 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP PUSH1 SLOAD DUP3 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP3 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD DUP4 LT ISZERO PUSH2 JUMPI PUSH2 DUP4 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP3 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP PUSH1 SLOAD DUP3 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP3 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD DUP4 LT ISZERO PUSH2 JUMPI PUSH2 DUP4 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP3 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP PUSH1 SLOAD DUP3 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP3 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO ISZERO PUSH2 JUMPI PUSH1 SLOAD DUP4 LT ISZERO PUSH2 JUMPI PUSH2 DUP4 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST JUMPDEST JUMPDEST JUMPDEST PUSH1 SLOAD SWAP6 POP POP POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH20 AND PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xea UNKNOWN_0xa5 DIFFICULTY UNKNOWN_0x4f UNKNOWN_0xed CALLVALUE UNKNOWN_0xab UNKNOWN_0xad MSTORE UNKNOWN_0xa5 MOD UNKNOWN_0xe4 UNKNOWN_0xb7 UNKNOWN_0x2f UNKNOWN_0xc8 XOR UNKNOWN_0xd4 SWAP4 PC UNKNOWN_0xae SWAP15 DUP7 UNKNOWN_0xdf INVALID_0x74",
  "opcode_entropy": 4.658286206081677,
  "opcode_count": 4054,
  "unique_opcodes": 74,
  "byte_entropy": 4.922988762223047,
  "byte_60": 0.07068351945023929,
  "byte_40": 0.010553442140139894,
  "byte_52": 0.01288501656644987,
  "byte_04": 0.008099153270339918,
  "byte_36": 0.00024542888697999754,
  "byte_10": 0.0034360044177199657,
  "byte_61": 0.03767333415142962,
  "byte_01": 0.026506319793839734,
  "byte_ac": 0.00012271444348999877,
  "byte_57": 0.014480304331819856,
  "byte_00": 0.031169468646459687,
  "byte_35": 0.0018407166523499816,
  "byte_7c": 0.00036814333046999634,
  "byte_90": 0.045281629647809546,
  "byte_63": 0.007853724383359921,
  "byte_ff": 0.299914099889557,
  "byte_16": 0.021352313167259787,
  "byte_80": 0.029328751994109708,
  "byte_05": 0.0030678610872499693,
  "byte_d2": 0.00024542888697999754,
  "byte_03": 0.01104429991409989,
  "byte_5b": 0.029574180881089703,
  "byte_14": 0.006381151061479936,
  "byte_b1": 0.00036814333046999634,
  "byte_06": 0.0028224322002699718,
  "byte_fd": 0.00699472327892993,
  "byte_de": 0.0006135722174499938,
  "byte_0c": 0.0025770033132899743,
  "byte_aa": 0.0007362866609399927,
  "byte_86": 0.001104429991409989,
  "byte_02": 0.00503129218308995,
  "byte_6c": 0.0004908577739599951,
  "byte_0d": 0.002331574426309977,
  "byte_ee": 0.00036814333046999634,
  "byte_30": 0.00024542888697999754,
  "byte_2e": 0.00024542888697999754,
  "byte_95": 0.0012271444348999877,
  "byte_0f": 0.0020861455393299793,
  "byte_8b": 0.002208859982819978,
  "byte_ca": 0.00024542888697999754,
  "byte_8c": 0.00024542888697999754,
  "byte_d7": 0.00036814333046999634,
  "byte_15": 0.018529880966989813,
  "byte_84": 0.0017180022088599829,
  "byte_a7": 0.0008590011044299914,
  "byte_18": 0.002208859982819978,
  "byte_dd": 0.001104429991409989,
  "byte_29": 0.00024542888697999754,
  "byte_25": 0.00024542888697999754,
  "byte_3f": 0.00036814333046999634,
  "byte_31": 0.0006135722174499938,
  "byte_3c": 0.0007362866609399927,
  "byte_e5": 0.00024542888697999754,
  "byte_67": 0.00024542888697999754,
  "byte_7b": 0.00024542888697999754,
  "byte_79": 0.0004908577739599951,
  "byte_c6": 0.00024542888697999754,
  "byte_a4": 0.0004908577739599951,
  "byte_9c": 0.00036814333046999634,
  "byte_17": 0.0019634310958399803,
  "byte_cd": 0.00024542888697999754,
  "byte_a2": 0.0006135722174499938,
  "byte_2a": 0.0004908577739599951,
  "byte_22": 0.0006135722174499938,
  "byte_c1": 0.00012271444348999877,
  "byte_19": 0.002699717756779973,
  "byte_4b": 0.00024542888697999754,
  "byte_47": 0.00024542888697999754,
  "byte_b5": 0.00024542888697999754,
  "byte_54": 0.013621303227389863,
  "byte_a5": 0.0008590011044299914,
  "byte_e7": 0.00024542888697999754,
  "byte_ef": 0.0007362866609399927,
  "byte_24": 0.00024542888697999754,
  "byte_ce": 0.00012271444348999877,
  "byte_56": 0.01497116210577985,
  "byte_6a": 0.00036814333046999634,
  "byte_28": 0.0008590011044299914,
  "byte_f5": 0.0017180022088599829,
  "byte_d5": 0.00036814333046999634,
  "byte_4c": 0.0004908577739599951,
  "byte_7d": 0.0004908577739599951,
  "byte_65": 0.0004908577739599951,
  "byte_9a": 0.00036814333046999634,
  "byte_92": 0.0014725733218799854,
  "byte_a6": 0.00024542888697999754,
  "byte_e9": 0.00024542888697999754,
  "byte_cf": 0.00024542888697999754,
  "byte_6d": 0.00012271444348999877,
  "byte_1b": 0.0030678610872499693,
  "byte_9d": 0.00036814333046999634,
  "byte_f8": 0.00012271444348999877,
  "byte_70": 0.00024542888697999754,
  "byte_a0": 0.0008590011044299914,
  "byte_82": 0.0099398699226899,
  "byte_64": 0.00036814333046999634,
  "byte_bc": 0.0004908577739599951,
  "byte_b4": 0.00036814333046999634,
  "byte_68": 0.001104429991409989,
  "byte_8d": 0.0007362866609399927,
  "byte_cb": 0.00024542888697999754,
  "byte_d8": 0.00036814333046999634,
  "byte_9b": 0.0007362866609399927,
  "byte_41": 0.00024542888697999754,
  "byte_ea": 0.0004908577739599951,
  "byte_07": 0.0020861455393299793,
  "byte_45": 0.00024542888697999754,
  "byte_78": 0.00024542888697999754,
  "byte_bf": 0.00012271444348999877,
  "byte_e3": 0.0007362866609399927,
  "byte_af": 0.00036814333046999634,
  "byte_a9": 0.00024542888697999754,
  "byte_bb": 0.00012271444348999877,
  "byte_dc": 0.00024542888697999754,
  "byte_d4": 0.00036814333046999634,
  "byte_09": 0.0017180022088599829,
  "byte_0b": 0.0025770033132899743,
  "byte_08": 0.0024542888697999753,
  "byte_32": 0.00036814333046999634,
  "byte_eb": 0.00024542888697999754,
  "byte_f0": 0.00036814333046999634,
  "byte_1d": 0.0009817155479199902,
  "byte_50": 0.02908332310712971,
  "byte_ad": 0.0008590011044299914,
  "byte_f2": 0.0009817155479199902,
  "byte_d6": 0.00012271444348999877,
  "byte_f3": 0.004295005522149957,
  "byte_e8": 0.00012271444348999877,
  "byte_6e": 0.00024542888697999754,
  "byte_20": 0.01718002208859983,
  "byte_db": 0.00024542888697999754,
  "byte_38": 0.00012271444348999877,
  "byte_34": 0.004540434409129954,
  "byte_c4": 0.0007362866609399927,
  "byte_51": 0.011167014357589888,
  "byte_81": 0.022334028715179775,
  "byte_91": 0.01705730764510983,
  "byte_f1": 0.0008590011044299914,
  "byte_74": 0.00024542888697999754,
  "byte_83": 0.004663148852619954,
  "byte_1f": 0.004663148852619954,
  "byte_5e": 0.00036814333046999634,
  "byte_0a": 0.00601300773100994,
  "byte_77": 0.00024542888697999754,
  "byte_7f": 0.0013498588783899864,
  "byte_12": 0.0014725733218799854,
  "byte_73": 0.014725733218799853,
  "byte_1c": 0.001104429991409989,
  "byte_e2": 0.0008590011044299914,
  "byte_fc": 0.0007362866609399927,
  "byte_13": 0.0008590011044299914,
  "byte_5d": 0.00036814333046999634,
  "byte_1a": 0.0019634310958399803,
  "byte_8e": 0.00012271444348999877,
  "byte_b7": 0.00036814333046999634,
  "byte_e0": 0.0004908577739599951,
  "byte_2d": 0.00012271444348999877,
  "byte_b0": 0.0008590011044299914,
  "byte_b8": 0.0004908577739599951,
  "byte_4f": 0.00036814333046999634,
  "byte_d9": 0.00012271444348999877,
  "byte_0e": 0.001104429991409989,
  "byte_59": 0.0004908577739599951,
  "byte_33": 0.0017180022088599829,
  "byte_3b": 0.00024542888697999754,
  "byte_88": 0.00012271444348999877,
  "byte_2b": 0.001104429991409989,
  "byte_b9": 0.00012271444348999877,
  "byte_da": 0.00024542888697999754,
  "byte_26": 0.00024542888697999754,
  "byte_c2": 0.0008590011044299914,
  "byte_a8": 0.00024542888697999754,
  "byte_89": 0.00012271444348999877,
  "byte_ae": 0.00036814333046999634,
  "byte_3d": 0.00036814333046999634,
  "byte_99": 0.00012271444348999877,
  "byte_ba": 0.00024542888697999754,
  "byte_b3": 0.0007362866609399927,
  "byte_bd": 0.00024542888697999754,
  "byte_e1": 0.00036814333046999634,
  "byte_66": 0.00024542888697999754,
  "byte_8f": 0.00012271444348999877,
  "byte_97": 0.00036814333046999634,
  "byte_c0": 0.00012271444348999877,
  "byte_1e": 0.0006135722174499938,
  "byte_43": 0.00024542888697999754,
  "byte_df": 0.00024542888697999754,
  "byte_11": 0.002208859982819978,
  "byte_ed": 0.00024542888697999754,
  "byte_72": 0.0013498588783899864,
  "byte_55": 0.00601300773100994,
  "byte_85": 0.0007362866609399927,
  "byte_c8": 0.0007362866609399927,
  "byte_69": 0.0006135722174499938,
  "byte_37": 0.0006135722174499938,
  "byte_a1": 0.0009817155479199902,
  "byte_5a": 0.0006135722174499938,
  "byte_4d": 0.0006135722174499938,
  "byte_23": 0.0006135722174499938,
  "byte_a3": 0.001104429991409989,
  "byte_c5": 0.00012271444348999877,
  "byte_f6": 0.00012271444348999877,
  "byte_4e": 0.00012271444348999877,
  "byte_98": 0.00012271444348999877,
  "byte_3a": 0.00024542888697999754,
  "byte_c3": 0.00012271444348999877,
  "byte_fe": 0.00036814333046999634,
  "byte_94": 0.00036814333046999634,
  "byte_44": 0.0007362866609399927,
  "byte_21": 0.00012271444348999877,
  "byte_39": 0.00024542888697999754,
  "byte_b6": 0.00012271444348999877,
  "byte_fa": 0.00036814333046999634,
  "byte_6f": 0.00024542888697999754,
  "byte_cc": 0.00024542888697999754,
  "byte_87": 0.00024542888697999754,
  "byte_5c": 0.00012271444348999877,
  "byte_7a": 0.00036814333046999634,
  "byte_71": 0.00012271444348999877,
  "byte_fb": 0.00024542888697999754,
  "byte_d3": 0.00012271444348999877,
  "byte_3e": 0.00036814333046999634,
  "byte_27": 0.00012271444348999877,
  "byte_62": 0.00036814333046999634,
  "byte_7e": 0.00012271444348999877,
  "byte_93": 0.00024542888697999754,
  "byte_42": 0.0012271444348999877,
  "byte_be": 0.00012271444348999877,
  "byte_d1": 0.00012271444348999877,
  "byte_f4": 0.00012271444348999877,
  "byte_48": 0.00012271444348999877,
  "byte_2f": 0.00024542888697999754,
  "byte_53": 0.00012271444348999877,
  "byte_d0": 0.00012271444348999877,
  "byte_49": 0.00024542888697999754,
  "byte_6b": 0.00012271444348999877,
  "byte_9f": 0.00012271444348999877,
  "byte_58": 0.00024542888697999754,
  "byte_ab": 0.00012271444348999877,
  "byte_e4": 0.00012271444348999877,
  "byte_9e": 0.00012271444348999877,
  "byte_c9": 0.00012271444348999877,
  "num_nodes": 10,
  "num_edges": 9,
  "avg_degree": 1.8,
  "density": 0.1,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 77,
  "event_nums": 96,
  "creation_block": 5441167,
  "creation_timestamp": 1523739919,
  "life_time": 2732392.0,
  "duration_seconds": 39698078.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 11,
  "num_buyers": 1,
  "num_sellers": 9,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 2.8180426461347252e-05,
  "avg_gas_limit": 116353.24675324676,
  "std_gas_limit": 380005.30338729697,
  "avg_gas_used": 77129.09090909091,
  "std_gas_used": 239213.6977883231,
  "avg_gas_price": 5246753246.753246,
  "std_gas_price": 8173692109.771851,
  "mint_num": 1,
  "transfer_num": 76,
  "mintfinished_num": 1,
  "timeline_sequence": [
    [
      5499486,
      1524603715,
      0,
      68,
      0,
      78064,
      1000000000,
      0,
      1,
      2500131,
      52043,
      17621933
    ],
    [
      5499490,
      1524603749,
      1,
      104,
      0,
      78064,
      1000000000,
      0,
      1,
      5788682,
      52043,
      17621929
    ],
    [
      5499506,
      1524604066,
      2,
      81,
      0,
      78064,
      1000000000,
      0,
      1,
      4687493,
      52043,
      17621913
    ],
    [
      5506046,
      1524701271,
      3,
      143,
      0,
      78064,
      1000000000,
      0,
      1,
      7962624,
      52043,
      17615373
    ],
    [
      5506092,
      1524701908,
      4,
      165,
      0,
      78160,
      1000000000,
      0,
      1,
      6833763,
      52107,
      17615327
    ],
    [
      5506120,
      1524702184,
      5,
      78,
      0,
      78160,
      1000000000,
      0,
      1,
      7854306,
      52107,
      17615299
    ],
    [
      5506129,
      1524702446,
      6,
      157,
      0,
      78064,
      1000000000,
      0,
      1,
      7432825,
      52043,
      17615290
    ],
    [
      5506130,
      1524702452,
      7,
      81,
      0,
      78064,
      1000000000,
      0,
      1,
      4340406,
      52043,
      17615289
    ],
    [
      5506877,
      1524713516,
      8,
      68,
      0,
      78064,
      1000000000,
      0,
      1,
      7543476,
      52043,
      17614542
    ],
    [
      5506908,
      1524713921,
      9,
      99,
      0,
      78064,
      1000000000,
      0,
      1,
      5137318,
      52043,
      17614511
    ],
    [
      5507014,
      1524715505,
      10,
      106,
      0,
      78064,
      1000000000,
      0,
      1,
      7791075,
      52043,
      17614405
    ],
    [
      5507082,
      1524716471,
      11,
      57,
      0,
      78064,
      1000000000,
      0,
      1,
      6775967,
      52043,
      17614337
    ],
    [
      5507133,
      1524717188,
      12,
      70,
      0,
      78064,
      1000000000,
      0,
      1,
      6569529,
      52043,
      17614286
    ],
    [
      5507206,
      1524718086,
      13,
      53,
      0,
      78064,
      1000000000,
      0,
      1,
      7077234,
      52043,
      17614213
    ],
    [
      5507206,
      1524718086,
      14,
      54,
      0,
      78064,
      1000000000,
      0,
      1,
      7129277,
      52043,
      17614213
    ],
    [
      5507206,
      1524718086,
      15,
      55,
      0,
      78064,
      1000000000,
      0,
      1,
      7181320,
      52043,
      17614213
    ],
    [
      5509727,
      1524755374,
      16,
      99,
      0,
      55660,
      1000000000,
      0,
      1,
      7889789,
      37107,
      17611692
    ],
    [
      5512117,
      1524790827,
      17,
      102,
      0,
      78160,
      1000000000,
      0,
      1,
      6132603,
      52107,
      17609302
    ],
    [
      5514944,
      1524834383,
      18,
      59,
      0,
      78160,
      2000000000,
      0,
      1,
      3503285,
      52107,
      17606475
    ],
    [
      5514946,
      1524834451,
      19,
      151,
      0,
      77968,
      2000000000,
      0,
      1,
      5338395,
      51979,
      17606473
    ],
    [
      5514980,
      1524834965,
      20,
      146,
      0,
      78160,
      2000000000,
      0,
      1,
      6543231,
      52107,
      17606439
    ],
    [
      5515210,
      1524838277,
      21,
      129,
      0,
      78160,
      2000000000,
      0,
      1,
      5735374,
      52107,
      17606209
    ],
    [
      5517535,
      1524872651,
      22,
      140,
      0,
      78160,
      1000000000,
      0,
      1,
      7222345,
      52107,
      17603884
    ],
    [
      5571526,
      1525689089,
      23,
      4,
      0,
      55660,
      2000000000,
      0,
      1,
      167389,
      37107,
      17549893
    ],
    [
      5571613,
      1525690398,
      24,
      156,
      0,
      78064,
      2000000000,
      0,
      1,
      6100706,
      52043,
      17549806
    ],
    [
      5576394,
      1525760435,
      25,
      97,
      0,
      78064,
      1000000000,
      0,
      1,
      6052553,
      52043,
      17545025
    ],
    [
      5576396,
      1525760463,
      26,
      127,
      0,
      78064,
      1000000000,
      0,
      1,
      7318953,
      52043,
      17545023
    ],
    [
      5576406,
      1525760615,
      27,
      100,
      0,
      78064,
      1000000000,
      0,
      1,
      6828308,
      52043,
      17545013
    ],
    [
      5576450,
      1525761338,
      28,
      40,
      0,
      78064,
      1000000000,
      0,
      1,
      6394585,
      52043,
      17544969
    ],
    [
      5576453,
      1525761359,
      29,
      85,
      0,
      78064,
      1000000000,
      0,
      1,
      7911936,
      52043,
      17544966
    ],
    [
      5576455,
      1525761380,
      30,
      80,
      0,
      78064,
      1000000000,
      0,
      1,
      5010096,
      52043,
      17544964
    ],
    [
      5576455,
      1525761380,
      31,
      102,
      0,
      78064,
      1000000000,
      0,
      1,
      6125325,
      52043,
      17544964
    ],
    [
      5576457,
      1525761394,
      32,
      85,
      0,
      77968,
      1000000000,
      0,
      1,
      5542373,
      51979,
      17544962
    ],
    [
      5576459,
      1525761406,
      33,
      73,
      0,
      78064,
      1000000000,
      0,
      1,
      4094413,
      52043,
      17544960
    ],
    [
      5576459,
      1525761406,
      34,
      87,
      0,
      78064,
      1000000000,
      0,
      1,
      5601577,
      52043,
      17544960
    ],
    [
      5576497,
      1525762041,
      35,
      107,
      0,
      78064,
      1000000000,
      0,
      1,
      7480381,
      52043,
      17544922
    ],
    [
      5576579,
      1525763362,
      36,
      113,
      0,
      78064,
      1000000000,
      0,
      1,
      7943558,
      52043,
      17544840
    ],
    [
      5576595,
      1525763635,
      37,
      53,
      0,
      78064,
      1000000000,
      0,
      1,
      1856429,
      52043,
      17544824
    ],
    [
      5576649,
      1525764515,
      38,
      41,
      0,
      78064,
      1000000000,
      0,
      1,
      1998914,
      52043,
      17544770
    ],
    [
      5576652,
      1525764536,
      39,
      108,
      0,
      78064,
      1000000000,
      0,
      1,
      7585257,
      52043,
      17544767
    ],
    [
      5577149,
      1525771923,
      40,
      23,
      0,
      78064,
      1000000000,
      0,
      1,
      1481726,
      52043,
      17544270
    ],
    [
      5577411,
      1525776135,
      41,
      90,
      0,
      77968,
      1000000000,
      0,
      1,
      7877612,
      51979,
      17544008
    ],
    [
      5577512,
      1525777637,
      42,
      125,
      0,
      78064,
      1000000000,
      0,
      1,
      7055209,
      52043,
      17543907
    ],
    [
      5580287,
      1525819524,
      43,
      47,
      0,
      78064,
      1000000000,
      0,
      1,
      3129528,
      52043,
      17541132
    ],
    [
      5580709,
      1525825873,
      44,
      148,
      0,
      78064,
      1000000000,
      0,
      1,
      7541834,
      52043,
      17540710
    ],
    [
      5602415,
      1526154116,
      45,
      75,
      0,
      78064,
      3000000000,
      0,
      1,
      2888894,
      52043,
      17519004
    ],
    [
      5602473,
      1526154945,
      46,
      46,
      0,
      78160,
      3000000000,
      0,
      1,
      4807477,
      52107,
      17518946
    ],
    [
      5602474,
      1526154953,
      47,
      80,
      0,
      78160,
      3000000000,
      0,
      1,
      6346135,
      52107,
      17518945
    ],
    [
      5606682,
      1526217490,
      48,
      66,
      0,
      78160,
      7000000000,
      0,
      1,
      5641186,
      52107,
      17514737
    ],
    [
      5612305,
      1526302762,
      49,
      208,
      0,
      78064,
      8000000000,
      0,
      1,
      7380365,
      52043,
      17509114
    ],
    [
      5623282,
      1526469491,
      50,
      106,
      0,
      55564,
      9000000000,
      0,
      1,
      7966615,
      37043,
      17498137
    ],
    [
      5625790,
      1526507956,
      51,
      97,
      0,
      78064,
      7000000000,
      0,
      1,
      5722942,
      52043,
      17495629
    ],
    [
      5633596,
      1526626593,
      52,
      38,
      0,
      78160,
      10000000000,
      0,
      1,
      1725785,
      52107,
      17487823
    ],
    [
      5636035,
      1526664657,
      53,
      59,
      0,
      78160,
      10000000000,
      0,
      1,
      3806049,
      52107,
      17485384
    ],
    [
      5636504,
      1526671839,
      54,
      128,
      0,
      78160,
      10000000000,
      0,
      1,
      5998319,
      52107,
      17484915
    ],
    [
      5636508,
      1526671868,
      55,
      44,
      0,
      78160,
      11000000000,
      0,
      1,
      1694804,
      52107,
      17484911
    ],
    [
      5646060,
      1526818211,
      56,
      178,
      0,
      78160,
      35000000000,
      0,
      1,
      4651945,
      52107,
      17475359
    ],
    [
      5646671,
      1526827223,
      57,
      125,
      0,
      78160,
      9000000000,
      0,
      1,
      5030925,
      52107,
      17474748
    ],
    [
      5646685,
      1526827390,
      58,
      43,
      0,
      78160,
      9000000000,
      0,
      1,
      1937643,
      52107,
      17474734
    ],
    [
      5651322,
      1526897620,
      59,
      61,
      0,
      55660,
      9000000000,
      0,
      1,
      7249240,
      37107,
      17470097
    ],
    [
      5659070,
      1527017022,
      12,
      92,
      0,
      52107,
      13000000000,
      0,
      1,
      4870268,
      52107,
      17462349
    ],
    [
      5662907,
      1527076613,
      60,
      151,
      0,
      78160,
      9000000000,
      0,
      1,
      7590946,
      52107,
      17458512
    ],
    [
      5669144,
      1527172299,
      61,
      109,
      0,
      78160,
      10000000000,
      0,
      1,
      7187466,
      52107,
      17452275
    ],
    [
      5702581,
      1527683269,
      62,
      171,
      0,
      55660,
      13000000000,
      0,
      1,
      7885061,
      37107,
      17418838
    ],
    [
      5702806,
      1527686914,
      63,
      125,
      0,
      55660,
      12000000000,
      0,
      1,
      7599090,
      37107,
      17418613
    ],
    [
      5736762,
      1528206565,
      0,
      55,
      0,
      37043,
      41000000000,
      0,
      1,
      1846220,
      37043,
      17384657
    ],
    [
      5765441,
      1528646771,
      0,
      36,
      0,
      52171,
      21000000000,
      0,
      1,
      1512413,
      52171,
      17355978
    ],
    [
      5765453,
      1528646898,
      65,
      44,
      0,
      78064,
      5000000000,
      0,
      1,
      2238410,
      52043,
      17355966
    ],
    [
      5765455,
      1528646919,
      66,
      61,
      0,
      55660,
      5000000000,
      0,
      1,
      2270039,
      37107,
      17355964
    ],
    [
      5771002,
      1528732148,
      1,
      95,
      0,
      52171,
      21000000000,
      0,
      1,
      2616557,
      52171,
      17350417
    ],
    [
      5987300,
      1531931266,
      0,
      51,
      0,
      60000,
      41000000000,
      0,
      1,
      1723158,
      52043,
      17134119
    ],
    [
      6151891,
      1534336670,
      1,
      61,
      0,
      37107,
      6000000000,
      0,
      1,
      4464410,
      37107,
      16969528
    ],
    [
      7820962,
      1558681794,
      66,
      149,
      0,
      55276,
      4000000000,
      0,
      1,
      7312008,
      37107,
      15300457
    ],
    [
      7850590,
      1559081105,
      0,
      19,
      0,
      55276,
      4000000000,
      0,
      1,
      555034,
      36851,
      15270829
    ],
    [
      7850650,
      1559082009,
      1,
      18,
      0,
      78064,
      4000000000,
      0,
      1,
      938435,
      52043,
      15270769
    ],
    [
      8173559,
      1563437997,
      190,
      163,
      0,
      55276,
      1000000000,
      0,
      1,
      7915551,
      37043,
      14947860
    ],
    [
      5441167,
      1523739919,
      0,
      0,
      0,
      3427873,
      0,
      0,
      0,
      0,
      2162008,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.19;\n\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  \n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\ncontract ERC20 {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\ncontract Ownable {\n  address public owner;\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    emit OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n\ncontract StandardToken is ERC20, Ownable {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n  \n  address internal tokensHolder = 0x2Ff4be5E03a079D5FC20Dba8d763059FcB78CA9f;\n  address internal burnAndRef = 0x84765e3f2D0379eC7AAb7de8b480762a75f14ef4;\n\n  uint256 totalSupply_;\n  uint256 tokensDistributed_;\n  uint256 burnedTokens_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n  function tokensAvailable() public view returns (uint256) {\n    return balances[tokensHolder];\n  }\n  function tokensDistributed() public view returns (uint256) {\n    return tokensDistributed_;\n  }\n  function getTokensHolder() public view returns (address) {\n    return tokensHolder;\n  }\n  function burnedTokens() public view returns (uint256) {\n    return burnedTokens_;\n  }\n  function getRefAddress() public view returns (address) {\n    return burnAndRef;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    emit Transfer(msg.sender, _to, _value);\n    return true;\n  }\n  \n  function deposit(address _to, uint256 _value) onlyOwner public returns (bool) {\n    require(_to != address(0));\n    require(_value <= tokensAvailable());\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[tokensHolder] = balances[tokensHolder].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    tokensDistributed_ = tokensDistributed_.add(_value);\n    emit Transfer(address(0), _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\ncontract MintableToken is StandardToken {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    emit Mint(_to, _amount);\n    emit Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    emit MintFinished();\n    return true;\n  }\n}\n\ncontract BurnableToken is MintableToken {\n\n  event Burn(address indexed burner, uint256 value);\n  \n  function transferToRef(address _to, uint256 _value) public onlyOwner {\n    require(_value <= balances[tokensHolder]);\n\n    balances[tokensHolder] = balances[tokensHolder].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    tokensDistributed_ = tokensDistributed_.add(_value);\n    emit Transfer(tokensHolder, address(0), _value);\n  }\n  \n  function burnTokens(uint256 _value) public onlyOwner {\n    require(_value <= balances[burnAndRef]);\n\n    balances[burnAndRef] = balances[burnAndRef].sub(_value);\n    totalSupply_ = totalSupply_.sub(_value);\n    burnedTokens_ = burnedTokens_.add(_value);\n    emit Burn(burnAndRef, _value);\n    emit Transfer(burnAndRef, address(0), _value);\n  }\n}\n\ncontract WRLToken is BurnableToken {\n    string public name = \"Whyral Token\";\n    string public symbol = \"WRL\";\n    uint256 public decimals = 8;\n    \n    uint256 internal rate;\n    \n    uint256 public currentStage;\n  \n    uint256 internal stage0Cap = 42000000 * (10 ** uint256(decimals));\n    uint256 internal stage1Cap = 71165000 * (10 ** uint256(decimals));  //29165000\n    uint256 internal stage2Cap = 91165000 * (10 ** uint256(decimals));  //20000000\n    uint256 internal stage3Cap = 103497402 * (10 ** uint256(decimals)); //12332402\n\n    uint256 internal stage0Start = 1523782800; //15 April 2018\n    uint256 internal stage0End = 1527764400;   //31 May 2018\n    uint256 internal stage1Start = 1528016400; //3 June 2018\n    uint256 internal stage1End = 1530356400;   //30 June 2018\n    uint256 internal stage2Start = 1530608400; //3 July 2018\n    uint256 internal stage2End = 1532516400;   //25 July 2018\n    uint256 internal stage3Start = 1532768400; //28 July 2018\n    uint256 internal stage3End = 1534330800;   //15 Aug 2018\n    \n    uint256 internal stage0Rate = 700000;  //1 ETH = 7000.00 Decimal is considered while calculation\n    uint256 internal stage1Rate = 583300;  //1 ETH = 5833.00 Decimal is considered while calculation\n    uint256 internal stage2Rate = 500000;  //1 ETH = 5000.00 Decimal is considered while calculation\n    uint256 internal stage3Rate = 466782;  //1 ETH = 4667.82 Decimal is considered while calculation\n    \n    function getStage0Cap() public view returns (uint256) {\n        return stage0Cap;\n    }\n    function getStage1Cap() public view returns (uint256) {\n        return stage1Cap;\n    }\n    function getStage2Cap() public view returns (uint256) {\n        return stage2Cap;\n    }\n    function getStage3Cap() public view returns (uint256) {\n        return stage3Cap;\n    }\n    function getStage0End() public view returns (uint256) {\n        return stage0End;\n    }\n    function getStage1End() public view returns (uint256) {\n        return stage1End;\n    }\n    function getStage2End() public view returns (uint256) {\n        return stage2End;\n    }\n    function getStage3End() public view returns (uint256) {\n        return stage3End;\n    }\n    function getStage0Start() public view returns (uint256) {\n        return stage0Start;\n    }\n    function getStage1Start() public view returns (uint256) {\n        return stage1Start;\n    }\n    function getStage2Start() public view returns (uint256) {\n        return stage2Start;\n    }\n    function getStage3Start() public view returns (uint256) {\n        return stage3Start;\n    }\n    function getDecimals() public view returns (uint256) {\n        return decimals;\n    }\n\n    \n    function getRateStages(uint256 _tokens) public onlyOwner returns(uint256) {\n      uint256 tokensDistributedValue = tokensDistributed();\n      tokensDistributedValue = tokensDistributedValue.sub(4650259800000000);\n      uint256 burnedTokensValue = burnedTokens();\n      uint256 currentValue = tokensDistributedValue.add(burnedTokensValue);\n      uint256 finalTokenValue = currentValue.add(_tokens);\n      uint256 toBeBurned;\n      \n      if(now >= stage0Start && now < stage0End) {\n          if(finalTokenValue <= stage0Cap) {\n              rate = stage0Rate;\n              currentStage = 0;\n          }\n          else {\n              rate = 0;\n              currentStage = 0;\n          }\n      }\n      else if(now >= stage1Start && now < stage1End) {\n          if(currentValue < stage0Cap) {\n              toBeBurned = stage0Cap.sub(currentValue);\n              transferToRef(burnAndRef, toBeBurned);\n              \n              finalTokenValue = finalTokenValue.add(toBeBurned);\n              \n              if(finalTokenValue <= stage1Cap) {\n                  rate = stage1Rate;\n                  currentStage = 1;\n              }\n              else {\n                  rate = 0;\n                  currentStage = 1;\n              }\n          }\n          else {\n              if(finalTokenValue <= stage1Cap) {\n                  rate = stage1Rate;\n                  currentStage = 1;\n              }\n              else {\n                  rate = 0;\n                  currentStage = 1;\n              }\n          }\n      }\n      else if(now >= stage2Start && now < stage2End) {\n          if(currentValue < stage1Cap) {\n              toBeBurned = stage1Cap.sub(currentValue);\n              transferToRef(burnAndRef, toBeBurned);\n              \n              finalTokenValue = finalTokenValue.add(toBeBurned);\n              \n              if(finalTokenValue <= stage2Cap) {\n                  rate = stage2Rate;\n                  currentStage = 2;\n              }\n              else {\n                  rate = 0;\n                  currentStage = 2;\n              }\n          }\n          else {\n              if(finalTokenValue <= stage2Cap) {\n                  rate = stage2Rate;\n                  currentStage = 2;\n              }\n              else {\n                  rate = 0;\n                  currentStage = 2;\n              }\n          }\n      }\n      else if(now >= stage3Start && now < stage3End) {\n          if(currentValue < stage2Cap) {\n              toBeBurned = stage2Cap.sub(currentValue);\n              transferToRef(burnAndRef, toBeBurned);\n              \n              finalTokenValue = finalTokenValue.add(toBeBurned);\n              \n              if(finalTokenValue <= stage3Cap) {\n                  rate = stage3Rate;\n                  currentStage = 3;\n              }\n              else {\n                  rate = 0;\n                  currentStage = 3;\n              }\n          }\n          else {\n              if(finalTokenValue <= stage3Cap) {\n                  rate = stage3Rate;\n                  currentStage = 3;\n              }\n              else {\n                  rate = 0;\n                  currentStage = 3;\n              }\n          }\n      }\n      else if(now >= stage3End) {\n          if(currentValue < stage3Cap) {\n              toBeBurned = stage3Cap.sub(currentValue);\n              transferToRef(burnAndRef, toBeBurned);\n              \n              rate = 0;\n              currentStage = 4;\n          }\n          else {\n              rate = 0;\n              currentStage = 4;\n          }\n      }\n      else {\n          rate = 0;\n      }\n      \n      return rate;\n  }\n    \n    function WRLToken() public {\n        totalSupply_ = 0;\n        tokensDistributed_ = 0;\n        currentStage = 0;\n        \n        uint256 __initialSupply = 150000000 * (10 ** uint256(decimals));\n        address tokensHolder = getTokensHolder();\n        mint(tokensHolder, __initialSupply);\n        finishMinting();\n    }\n}\n\ncontract TimedCrowdsale {\n  using SafeMath for uint256;\n\n  uint256 public openingTime;\n  uint256 public closingTime;\n\n  /**\n   * @dev Reverts if not in crowdsale time range. \n   */\n  modifier onlyWhileOpen {\n    require(now >= openingTime && now <= closingTime);\n    _;\n  }\n\n  /**\n   * @dev Constructor, takes crowdsale opening and closing times.\n   * @param _openingTime Crowdsale opening time\n   * @param _closingTime Crowdsale closing time\n   */\n  function TimedCrowdsale(uint256 _openingTime, uint256 _closingTime) public {\n    require(_openingTime >= now);\n    require(_closingTime >= _openingTime);\n\n    openingTime = _openingTime;\n    closingTime = _closingTime;\n  }\n\n  /**\n   * @dev Checks whether the period in which the crowdsale is open has already elapsed.\n   * @return Whether crowdsale period has elapsed\n   */\n  function hasClosed() public view returns (bool) {\n    return now > closingTime;\n  }\n  \n  function isOpen() public view returns (bool) {\n    return ((now > openingTime) && (now < closingTime));\n  }\n  \n  /**\n   * @dev Extend parent behavior requiring to be within contributing period\n   * @param _beneficiary Token purchaser\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal onlyWhileOpen {\n    //super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\ncontract FinalizableCrowdsale is TimedCrowdsale, Ownable {\n  using SafeMath for uint256;\n\n  bool public isFinalized = false;\n  \n  // The token being sold\n  WRLToken public token;\n\n  event Finalized();\n\n  /**\n   * @dev Must be called after crowdsale ends, to do some extra finalization\n   * work. Calls the contract's finalization function.\n   */\n  function finalize() onlyOwner public {\n    require(!isFinalized);\n    require(hasClosed());\n\n    finalization();\n    emit Finalized();\n\n    isFinalized = true;\n  }\n\n  /**\n   * @dev Can be overridden to add finalization logic. The overriding function\n   * should call super.finalization() to ensure the chain of finalization is\n   * executed entirely.\n   */\n  function finalization() internal {\n      token.getRateStages(0);\n  }\n}\n\ncontract WhitelistedCrowdsale is FinalizableCrowdsale {\n\n  mapping(address => bool) public whitelist;\n\n  /**\n   * @dev Reverts if beneficiary is not whitelisted. Can be used when extending this contract.\n   */\n  modifier isWhitelisted(address _beneficiary) {\n    require(whitelist[_beneficiary]);\n    _;\n  }\n\n  /**\n   * @dev Adds single address to whitelist.\n   * @param _beneficiary Address to be added to the whitelist\n   */\n  function addToWhitelist(address _beneficiary) external onlyOwner {\n    whitelist[_beneficiary] = true;\n  }\n\n  /**\n   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.\n   * @param _beneficiaries Addresses to be added to the whitelist\n   */\n  function addManyToWhitelist(address[] _beneficiaries) external onlyOwner {\n    for (uint256 i = 0; i < _beneficiaries.length; i++) {\n      whitelist[_beneficiaries[i]] = true;\n    }\n  }\n\n  /**\n   * @dev Removes single address from whitelist.\n   * @param _beneficiary Address to be removed to the whitelist\n   */\n  function removeFromWhitelist(address _beneficiary) external onlyOwner {\n    whitelist[_beneficiary] = false;\n  }\n\n  /**\n   * @dev Extend parent behavior requiring beneficiary to be in whitelist.\n   * @param _beneficiary Token beneficiary\n   * @param _weiAmount Amount of wei contributed\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal isWhitelisted(_beneficiary) {\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n}\n\ncontract WRLCrowdsale is WhitelistedCrowdsale {\n  using SafeMath for uint256;\n\n  // Address where funds are collected\n  address public wallet = 0x4fB0346F51fA853639EC0d0dA211Cb6F3e27a1f5;\n  // Other Addresses\n  address internal foundersAndTeam = 0x2E6f0ebFdee59546f224450Ba0c8F0522cedA2e9;\n  address internal advisors = 0xCa502d4cEaa99Bf1aD554f91FD2A9013511629D4;\n  address internal bounties = 0x45138E31Ab7402b8Cf363F9d4e732fdb020e5Dd8;\n  address internal reserveFund = 0xE9ebcAdB98127e3CDe242EaAdcCb57BF0d9576Cc;\n  \n  uint256 internal foundersAndTeamTokens = 22502598 * (10 ** uint256(8));\n  uint256 internal advisorsTokens = 12000000 * (10 ** uint256(8));\n  uint256 internal bountiesTokens = 6000000 * (10 ** uint256(8));\n  uint256 internal reserveFundTokens = 6000000 * (10 ** uint256(8));\n    \n  // Amount of wei raised\n  uint256 public weiRaised;\n\n  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);\n  \n  //1523782800 : 15 April 2018\n  //1534330800 : 15 Aug 2018\n  function WRLCrowdsale() public \n     TimedCrowdsale(1523782800, 1534330800)\n  {\n      weiRaised = 0;\n      \n      token = new WRLToken();\n      \n      token.deposit(foundersAndTeam, foundersAndTeamTokens);\n      token.deposit(advisors, advisorsTokens);\n      token.deposit(bounties, bountiesTokens);\n      token.deposit(reserveFund, reserveFundTokens);\n  }\n  \n  /**\n   * @dev fallback function ***DO NOT OVERRIDE***\n   */\n  function () external payable {\n    buyTokens(msg.sender);\n  }\n\n  /**\n   * @dev low level token purchase ***DO NOT OVERRIDE***\n   * @param _beneficiary Address performing the token purchase\n   */\n  function buyTokens(address _beneficiary) public payable {\n    require(msg.value >= 100000000000000000);\n    uint256 weiAmount = msg.value;\n    _preValidatePurchase(_beneficiary, weiAmount);\n\n    // calculate token amount to be created\n    uint256 tokens = _getTokenAmount(weiAmount);\n\n    // update state\n    weiRaised = weiRaised.add(weiAmount);\n    uint256 rate = token.getRateStages(tokens);\n    require(rate != 0);\n\n    _processPurchase(_beneficiary, tokens);\n    emit TokenPurchase(msg.sender, _beneficiary, weiAmount, tokens);\n\n    _updatePurchasingState(_beneficiary, weiAmount);\n\n    _forwardFunds();\n    _postValidatePurchase(_beneficiary, weiAmount);\n  }\n  \n  function referralTokens(address _beneficiary, uint256 _tokens) onlyOwner public {\n      uint256 decimals = token.getDecimals();\n      _tokens = _tokens * (10 ** uint256(decimals));\n      _preValidatePurchase(_beneficiary, _tokens);\n      \n      uint256 rate = token.getRateStages(_tokens);\n      require(rate != 0);\n      \n      _processPurchase(_beneficiary, _tokens);\n      emit TokenPurchase(msg.sender, _beneficiary, 0, _tokens);\n      \n      _updatePurchasingState(_beneficiary, 0);\n      \n      _postValidatePurchase(_beneficiary, 0);\n  }\n  \n  function callStages() onlyOwner public {\n      token.getRateStages(0);\n  }\n  \n  function callBurnTokens(uint256 _tokens) public {\n      address a = token.getRefAddress();\n      require(msg.sender == a);\n      \n      token.burnTokens(_tokens);\n  }\n\n  // -----------------------------------------\n  // Internal interface (extensible)\n  // -----------------------------------------\n\n  /**\n   * @dev Validation of an incoming purchase. Use require statemens to revert state when conditions are not met. Use super to concatenate validations.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n    require(_beneficiary != address(0));\n    require(_weiAmount != 0);\n    super._preValidatePurchase(_beneficiary, _weiAmount);\n  }\n\n  /**\n   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.\n   * @param _beneficiary Address performing the token purchase\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _postValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {\n  }\n\n  /**\n   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.\n   * @param _beneficiary Address performing the token purchase\n   * @param _tokenAmount Number of tokens to be emitted\n   */\n  function _deliverTokens(address _beneficiary, uint256 _tokenAmount) internal {\n    require(_tokenAmount <= token.tokensAvailable());\n\n    token.deposit(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.\n   * @param _beneficiary Address receiving the tokens\n   * @param _tokenAmount Number of tokens to be purchased\n   */\n  function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {\n    _deliverTokens(_beneficiary, _tokenAmount);\n  }\n\n  /**\n   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)\n   * @param _beneficiary Address receiving the tokens\n   * @param _weiAmount Value in wei involved in the purchase\n   */\n  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {\n  }\n\n  /**\n   * @dev Override to extend the way in which ether is converted to tokens.\n   * @param _weiAmount Value in wei to be converted into tokens\n   * @return Number of tokens that can be purchased with the specified _weiAmount\n   */\n  function _getTokenAmount(uint256 _weiAmount) internal returns (uint256) {\n      uint256 tokenAmount = _weiAmount;\n      uint256 rate = token.getRateStages(0);\n      require(rate != 0);\n      tokenAmount = tokenAmount.mul(rate);\n      tokenAmount = tokenAmount.div(1000000000000);\n      return tokenAmount;\n  }\n\n  /**\n   * @dev Determines how ETH is stored/forwarded on purchases.\n   */\n  function _forwardFunds() internal {\n    wallet.transfer(msg.value);\n  }\n}"
}