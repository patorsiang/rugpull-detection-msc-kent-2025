{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 CALLDATALOAD DUP2 DUP2 ADD CALLDATALOAD PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 SWAP5 DUP3 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP5 PUSH1 DUP1 CALLDATALOAD SWAP6 CALLDATASIZE SWAP6 SWAP5 PUSH1 SWAP5 SWAP3 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 CALLDATALOAD DUP2 DUP2 ADD CALLDATALOAD PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 SWAP5 DUP3 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP5 PUSH1 DUP1 CALLDATALOAD SWAP6 CALLDATASIZE SWAP6 SWAP5 PUSH1 SWAP5 SWAP3 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP10 CALLDATALOAD DUP12 ADD DUP1 CALLDATALOAD SWAP2 DUP3 ADD DUP4 SWAP1 DIV DUP4 MUL DUP5 ADD DUP4 ADD SWAP1 SWAP5 MSTORE DUP1 DUP4 MSTORE SWAP8 SWAP11 SWAP10 SWAP9 DUP2 ADD SWAP8 SWAP2 SWAP7 POP SWAP2 DUP3 ADD SWAP5 POP SWAP3 POP DUP3 SWAP2 POP DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP4 ADD PUSH2 DUP7 PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 DUP7 PUSH2 JUMP JUMPDEST DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 PUSH2 DUP6 PUSH2 JUMP JUMPDEST DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE MLOAD DUP3 MLOAD DUP4 SWAP3 DUP3 SWAP2 SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 SWAP4 DUP5 SUB PUSH2 EXP PUSH1 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 SHA3 DUP10 DUP4 MSTORE SWAP4 MLOAD SWAP4 SWAP6 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP11 DUP2 AND SWAP6 POP DUP12 AND SWAP4 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 POP SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG4 DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 PUSH2 DUP7 PUSH2 JUMP JUMPDEST DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SLOAD PUSH2 SWAP2 PUSH2 SWAP2 AND PUSH2 JUMP JUMPDEST DUP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE MLOAD DUP3 MLOAD DUP4 SWAP3 DUP3 SWAP2 SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 SWAP4 DUP5 SUB PUSH2 EXP PUSH1 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 SHA3 PUSH1 SLOAD DUP10 DUP5 MSTORE SWAP5 MLOAD SWAP1 SWAP7 POP PUSH1 PUSH1 PUSH1 EXP SUB SWAP5 DUP6 AND SWAP6 POP SWAP4 DUP12 AND SWAP4 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 POP SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG4 PUSH1 SLOAD PUSH1 DUP1 MLOAD DUP5 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND SWAP3 DUP9 AND SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP3 POP PUSH2 SWAP1 PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 PUSH2 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE MLOAD DUP3 MLOAD DUP4 SWAP3 DUP3 SWAP2 SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 SWAP4 DUP5 SUB PUSH2 EXP PUSH1 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 SHA3 PUSH1 SLOAD DUP10 DUP5 MSTORE SWAP5 MLOAD SWAP1 SWAP7 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP11 DUP2 AND SWAP7 POP SWAP1 SWAP5 AND SWAP4 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 POP SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG4 PUSH1 SLOAD PUSH1 DUP1 MLOAD DUP5 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND SWAP4 AND SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 PUSH2 DUP4 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH2 DUP5 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP5 DUP5 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP4 PUSH2 JUMP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH2 DUP6 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI DUP4 PUSH2 CALLER PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 CALLER PUSH2 JUMP JUMPDEST DUP6 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 PUSH2 DUP7 PUSH2 JUMP JUMPDEST DUP6 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE SWAP3 MLOAD DUP6 MLOAD SWAP3 SWAP4 SWAP2 SWAP3 DUP7 SWAP3 DUP3 SWAP2 SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH1 PUSH1 EXP SWAP1 DIV SWAP1 CALLER DUP8 DUP8 PUSH1 MLOAD DUP6 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 GAS CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP3 PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 SWAP4 DUP5 SUB PUSH2 EXP PUSH1 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 SHA3 DUP11 DUP4 MSTORE SWAP4 MLOAD SWAP4 SWAP6 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP12 DUP2 AND SWAP6 POP CALLER AND SWAP4 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 POP SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG4 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 PUSH2 JUMP JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 EXTCODESIZE GT SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP4 PUSH2 CALLER PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 CALLER PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 PUSH2 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP6 SWAP1 SWAP6 SSTORE SWAP4 MLOAD PUSH32 DUP2 MSTORE CALLER SWAP4 DUP5 AND PUSH1 DUP3 ADD SWAP1 DUP2 MSTORE PUSH1 DUP3 ADD DUP11 SWAP1 MSTORE PUSH1 PUSH1 DUP4 ADD SWAP1 DUP2 MSTORE DUP10 MLOAD PUSH1 DUP5 ADD MSTORE DUP10 MLOAD DUP13 SWAP9 POP SWAP5 SWAP7 PUSH4 SWAP7 SWAP6 DUP13 SWAP6 DUP13 SWAP6 PUSH1 ADD SWAP3 DUP7 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 SWAP1 DUP5 SWAP1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP DUP3 PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 SWAP4 DUP5 SUB PUSH2 EXP PUSH1 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 SHA3 DUP11 DUP4 MSTORE SWAP4 MLOAD SWAP4 SWAP6 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP12 DUP2 AND SWAP6 POP CALLER AND SWAP4 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 POP SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG4 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP7 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH2 CALLER PUSH2 JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 CALLER PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 PUSH2 DUP6 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP3 SWAP1 SWAP3 SSTORE MLOAD DUP4 MLOAD DUP5 SWAP3 DUP3 SWAP2 SWAP1 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 SWAP4 DUP5 SUB PUSH2 EXP PUSH1 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 SHA3 DUP10 DUP4 MSTORE SWAP4 MLOAD SWAP4 SWAP6 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP11 DUP2 AND SWAP6 POP CALLER AND SWAP4 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP4 POP SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG4 DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP STOP UNKNOWN_0xe1 SWAP3 PUSH1 UNKNOWN_0xf9 PUSH28 MSTORE UNKNOWN_0xad SHL UNKNOWN_0xe2 UNKNOWN_0xc8 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef LOG1 PUSH6 SHA3 UNKNOWN_0xc UNKNOWN_0xf7 EXP DUP13 UNKNOWN_0x4e DUP13 UNKNOWN_0xac NUMBER DUP16 SWAP3 UNKNOWN_0x4d UNKNOWN_0xa8 PUSH11 UNKNOWN_0xdf AND DUP15 UNKNOWN_0x1e UNKNOWN_0x4f UNKNOWN_0xa5 INVALID_0x7c",
  "opcode_entropy": 4.984183826970562,
  "opcode_count": 2988,
  "unique_opcodes": 97,
  "byte_entropy": 5.739945859207097,
  "byte_60": 0.10977141421753328,
  "byte_80": 0.03843255463451394,
  "byte_40": 0.011554885707108766,
  "byte_52": 0.024868123587038434,
  "byte_04": 0.01004772670183371,
  "byte_36": 0.001004772670183371,
  "byte_10": 0.005023863350916855,
  "byte_61": 0.04848028133634765,
  "byte_00": 0.031650339110776186,
  "byte_a0": 0.012057272042200452,
  "byte_57": 0.014820396885204722,
  "byte_63": 0.004019090680733484,
  "byte_ff": 0.007033408691283597,
  "byte_e0": 0.0007535795026375283,
  "byte_02": 0.018588294398392362,
  "byte_0a": 0.016578749058025623,
  "byte_35": 0.0052750565184626974,
  "byte_16": 0.023109771414217533,
  "byte_06": 0.00904295403165034,
  "byte_fd": 0.006531022356191912,
  "byte_de": 0.00025119316754584274,
  "byte_03": 0.023863350916855063,
  "byte_81": 0.027882441597588545,
  "byte_14": 0.004019090680733484,
  "byte_a5": 0.0007535795026375283,
  "byte_18": 0.00025119316754584274,
  "byte_0d": 0.0025119316754584277,
  "byte_dd": 0.0005023863350916855,
  "byte_01": 0.05651846269781462,
  "byte_2f": 0.00025119316754584274,
  "byte_31": 0.0005023863350916855,
  "byte_3c": 0.00025119316754584274,
  "byte_e5": 0.0007535795026375283,
  "byte_67": 0.00025119316754584274,
  "byte_56": 0.01909068073348405,
  "byte_39": 0.0037678975131876413,
  "byte_1c": 0.00025119316754584274,
  "byte_91": 0.026626475759859332,
  "byte_8e": 0.0005023863350916855,
  "byte_6b": 0.0005023863350916855,
  "byte_70": 0.0005023863350916855,
  "byte_82": 0.023360964581763375,
  "byte_9a": 0.0005023863350916855,
  "byte_8d": 0.0007535795026375283,
  "byte_cb": 0.0007535795026375283,
  "byte_5b": 0.030394373273046973,
  "byte_bb": 0.0007535795026375283,
  "byte_95": 0.00552624968600854,
  "byte_d8": 0.00025119316754584274,
  "byte_9b": 0.0005023863350916855,
  "byte_41": 0.00025119316754584274,
  "byte_ec": 0.001004772670183371,
  "byte_a6": 0.0012559658377292139,
  "byte_f9": 0.0005023863350916855,
  "byte_da": 0.0007535795026375283,
  "byte_e1": 0.001004772670183371,
  "byte_a9": 0.0005023863350916855,
  "byte_05": 0.002009545340366742,
  "byte_9c": 0.0005023863350916855,
  "byte_22": 0.002009545340366742,
  "byte_be": 0.00025119316754584274,
  "byte_45": 0.00025119316754584274,
  "byte_62": 0.001004772670183371,
  "byte_5a": 0.0012559658377292139,
  "byte_f2": 0.0007535795026375283,
  "byte_e3": 0.00025119316754584274,
  "byte_8b": 0.0017583521728208992,
  "byte_c3": 0.00025119316754584274,
  "byte_f6": 0.00025119316754584274,
  "byte_8f": 0.0005023863350916855,
  "byte_8a": 0.0025119316754584277,
  "byte_e4": 0.0005023863350916855,
  "byte_34": 0.003014318010550113,
  "byte_15": 0.01004772670183371,
  "byte_b1": 0.00025119316754584274,
  "byte_50": 0.0381813614669681,
  "byte_ba": 0.0007535795026375283,
  "byte_51": 0.028133634765134388,
  "byte_20": 0.02562170308967596,
  "byte_83": 0.023360964581763375,
  "byte_92": 0.01456920371765888,
  "byte_90": 0.04697312233107259,
  "byte_85": 0.005777442853554383,
  "byte_f4": 0.0005023863350916855,
  "byte_dc": 0.00025119316754584274,
  "byte_1f": 0.0047726701833710125,
  "byte_21": 0.00025119316754584274,
  "byte_19": 0.006782215523737754,
  "byte_f3": 0.0015071590052750565,
  "byte_3b": 0.0007535795026375283,
  "byte_44": 0.0017583521728208992,
  "byte_77": 0.00025119316754584274,
  "byte_98": 0.0015071590052750565,
  "byte_24": 0.0015071590052750565,
  "byte_64": 0.001004772670183371,
  "byte_25": 0.00025119316754584274,
  "byte_a1": 0.005023863350916855,
  "byte_c7": 0.00025119316754584274,
  "byte_d0": 0.0005023863350916855,
  "byte_bc": 0.00025119316754584274,
  "byte_f8": 0.00025119316754584274,
  "byte_07": 0.002009545340366742,
  "byte_26": 0.00025119316754584274,
  "byte_2e": 0.00025119316754584274,
  "byte_46": 0.0007535795026375283,
  "byte_08": 0.00452147701582517,
  "byte_89": 0.002009545340366742,
  "byte_66": 0.0007535795026375283,
  "byte_84": 0.016327555890479777,
  "byte_94": 0.007535795026375283,
  "byte_37": 0.0012559658377292139,
  "byte_97": 0.0012559658377292139,
  "byte_bf": 0.00025119316754584274,
  "byte_96": 0.002260738507912585,
  "byte_cf": 0.0012559658377292139,
  "byte_f0": 0.00025119316754584274,
  "byte_99": 0.0007535795026375283,
  "byte_09": 0.0035167043456417984,
  "byte_3d": 0.0007535795026375283,
  "byte_54": 0.00552624968600854,
  "byte_93": 0.010298919869379553,
  "byte_11": 0.002009545340366742,
  "byte_e6": 0.0005023863350916855,
  "byte_33": 0.005023863350916855,
  "byte_43": 0.0005023863350916855,
  "byte_4f": 0.0005023863350916855,
  "byte_86": 0.00276312484300427,
  "byte_6c": 0.00025119316754584274,
  "byte_0b": 0.00552624968600854,
  "byte_ae": 0.0007535795026375283,
  "byte_55": 0.003265511178095956,
  "byte_c0": 0.0015071590052750565,
  "byte_c6": 0.0005023863350916855,
  "byte_17": 0.002009545340366742,
  "byte_0f": 0.003014318010550113,
  "byte_a4": 0.0015071590052750565,
  "byte_42": 0.0017583521728208992,
  "byte_a3": 0.0017583521728208992,
  "byte_87": 0.002009545340366742,
  "byte_b5": 0.0005023863350916855,
  "byte_88": 0.0005023863350916855,
  "byte_47": 0.00025119316754584274,
  "byte_5c": 0.00025119316754584274,
  "byte_78": 0.0005023863350916855,
  "byte_9f": 0.0005023863350916855,
  "byte_ed": 0.0005023863350916855,
  "byte_ce": 0.00025119316754584274,
  "byte_ad": 0.0005023863350916855,
  "byte_d7": 0.0005023863350916855,
  "byte_b8": 0.00025119316754584274,
  "byte_f1": 0.0017583521728208992,
  "byte_ca": 0.00025119316754584274,
  "byte_0e": 0.002009545340366742,
  "byte_73": 0.00025119316754584274,
  "byte_48": 0.00025119316754584274,
  "byte_74": 0.00025119316754584274,
  "byte_6e": 0.0007535795026375283,
  "byte_d2": 0.00025119316754584274,
  "byte_b0": 0.0005023863350916855,
  "byte_fe": 0.0007535795026375283,
  "byte_ef": 0.0005023863350916855,
  "byte_fb": 0.00025119316754584274,
  "byte_0c": 0.0015071590052750565,
  "byte_7f": 0.00025119316754584274,
  "byte_ee": 0.0005023863350916855,
  "byte_8c": 0.0012559658377292139,
  "byte_a8": 0.0005023863350916855,
  "byte_3e": 0.00025119316754584274,
  "byte_68": 0.0005023863350916855,
  "byte_af": 0.00025119316754584274,
  "byte_7b": 0.00025119316754584274,
  "byte_7d": 0.00025119316754584274,
  "byte_3a": 0.00025119316754584274,
  "byte_eb": 0.00025119316754584274,
  "byte_2b": 0.0005023863350916855,
  "byte_d3": 0.00025119316754584274,
  "byte_a2": 0.00025119316754584274,
  "byte_3f": 0.00025119316754584274,
  "byte_4c": 0.00025119316754584274,
  "byte_1b": 0.00025119316754584274,
  "byte_e2": 0.00025119316754584274,
  "byte_c8": 0.0005023863350916855,
  "byte_69": 0.00025119316754584274,
  "byte_c2": 0.00025119316754584274,
  "byte_fc": 0.00025119316754584274,
  "byte_aa": 0.00025119316754584274,
  "byte_a7": 0.00025119316754584274,
  "byte_c4": 0.00025119316754584274,
  "byte_28": 0.00025119316754584274,
  "byte_f5": 0.0005023863350916855,
  "byte_4d": 0.0005023863350916855,
  "byte_23": 0.00025119316754584274,
  "byte_b3": 0.00025119316754584274,
  "byte_65": 0.00025119316754584274,
  "byte_7a": 0.0005023863350916855,
  "byte_72": 0.00025119316754584274,
  "byte_30": 0.00025119316754584274,
  "byte_58": 0.00025119316754584274,
  "byte_f7": 0.00025119316754584274,
  "byte_4e": 0.00025119316754584274,
  "byte_ac": 0.00025119316754584274,
  "byte_6a": 0.00025119316754584274,
  "byte_27": 0.00025119316754584274,
  "byte_bd": 0.00025119316754584274,
  "byte_df": 0.00025119316754584274,
  "byte_1e": 0.00025119316754584274,
  "byte_7c": 0.00025119316754584274,
  "byte_d4": 0.00025119316754584274,
  "byte_29": 0.00025119316754584274,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 6,
  "event_nums": 8,
  "creation_block": 5577007,
  "creation_timestamp": 1525769882,
  "life_time": 191366.0,
  "duration_seconds": 2922107.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 3.135336813557196e-05,
  "avg_gas_limit": 257295.33333333334,
  "std_gas_limit": 447284.05898774834,
  "avg_gas_used": 255885.0,
  "std_gas_used": 447910.16049538326,
  "avg_gas_price": 19683366666.666668,
  "std_gas_price": 16913511659.978308,
  "transfer_num": 5,
  "atinversebrah_num": 1,
  "timeline_sequence": [
    [
      5577007,
      1525769882,
      4,
      89,
      0,
      1257442,
      3000000000,
      0,
      1,
      7863278,
      1257442,
      17543940
    ],
    [
      5577050,
      1525770474,
      5,
      85,
      0,
      54536,
      2000200000,
      1,
      0,
      3818374,
      54536,
      17543897
    ],
    [
      5577076,
      1525770951,
      6,
      36,
      0,
      55897,
      41000000000,
      0,
      1,
      2346438,
      55897,
      17543871
    ],
    [
      5577161,
      1525772022,
      7,
      58,
      0,
      55897,
      41000000000,
      0,
      1,
      2079068,
      55897,
      17543786
    ],
    [
      5577646,
      1525779922,
      0,
      34,
      0,
      60000,
      6000000000,
      0,
      1,
      2152083,
      55769,
      17543301
    ],
    [
      5768373,
      1528691989,
      1,
      49,
      0,
      60000,
      25100000000,
      0,
      1,
      1246822,
      55769,
      17352574
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.23;\n\ncontract SafeMath {\n    function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\ncontract ContractReceiver {\n     \n    struct TKN {\n        address sender;\n        uint value;\n        bytes data;\n        bytes4 sig;\n    }\n    \n    function tokenFallback(address _from, uint _value, bytes _data) public pure {\n        TKN memory tkn;\n        tkn.sender = _from;\n        tkn.value = _value;\n        tkn.data = _data;\n        uint32 u = uint32(_data[3]) + (uint32(_data[2]) << 8) + (uint32(_data[1]) << 16) + (uint32(_data[0]) << 24);\n        tkn.sig = bytes4(u);\n      \n        /* tkn variable is analogue of msg variable of Ether transaction\n        *  tkn.sender is person who initiated this token transaction   (analogue of msg.sender)\n        *  tkn.value the number of tokens that were sent   (analogue of msg.value)\n        *  tkn.data is data of token transaction   (analogue of msg.data)\n        *  tkn.sig is 4 bytes signature of function\n        *  if data of token transaction is a function execution\n        */\n    }\n}\n\ncontract ERC223 {\n    uint public totalSupply;\n    function balanceOf(address who) public view returns (uint);\n    \n    function name() public view returns (string _name);\n    function symbol() public view returns (string _symbol);\n    function decimals() public view returns (uint8 _decimals);\n    function totalSupply() public view returns (uint256 _supply);\n\n    function transfer(address to, uint value) public returns (bool ok);\n    function transfer(address to, uint value, bytes data) public returns (bool ok);\n    function transfer(address to, uint value, bytes data, string custom_fallback) public returns (bool ok);\n    \n    event Transfer(address indexed from, address indexed to, uint value, bytes indexed data);\n    event Transfer(address indexed from, address indexed to, uint value);\n}\n\ncontract ERC223Token is ERC223, SafeMath {\n\n    mapping(address => uint) balances;\n    \n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n  \n    // Function to access name of token .\n    function name() public view returns (string _name) {\n        return name;\n    }\n    // Function to access symbol of token .\n    function symbol() public view returns (string _symbol) {\n        return symbol;\n    }\n    // Function to access decimals of token .\n    function decimals() public view returns (uint8 _decimals) {\n        return decimals;\n    }\n    // Function to access total supply of tokens .\n    function totalSupply() public view returns (uint256 _totalSupply) {\n        return totalSupply;\n    }\n  \n  \n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success) {\n        \n        if(isContract(_to)) {\n            if (balanceOf(msg.sender) < _value) revert();\n            balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n            balances[_to] = safeAdd(balanceOf(_to), _value);\n            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));\n            emit Transfer(msg.sender, _to, _value, _data);\n            emit Transfer(msg.sender, _to, _value);\n            return true;\n        }\n        else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n\n    // Function that is called when a user or another contract wants to transfer funds .\n    function transfer(address _to, uint _value, bytes _data) public returns (bool success) { \n        if(isContract(_to)) {\n            return transferToContract(_to, _value, _data);\n        }\n        else {\n            return transferToAddress(_to, _value, _data);\n        }\n    }\n  \n    // Standard function transfer similar to ERC20 transfer with no _data .\n    // Added due to backwards compatibility reasons .\n    function transfer(address _to, uint _value) public returns (bool success) {\n        //standard function transfer similar to ERC20 transfer with no _data\n        //added due to backwards compatibility reasons\n        bytes memory empty;\n        if(isContract(_to)) {\n            return transferToContract(_to, _value, empty);\n        }\n        else {\n            return transferToAddress(_to, _value, empty);\n        }\n    }\n\n    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n    function isContract(address _addr) private view returns (bool is_contract) {\n        uint length;\n        assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        return (length>0);\n    }\n\n    //function that is called when transaction target is an address\n    function transferToAddress(address _to, uint _value, bytes _data) private returns (bool success) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n        balances[_to] = safeAdd(balanceOf(_to), _value);\n        emit Transfer(msg.sender, _to, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n  \n    //function that is called when transaction target is a contract\n    function transferToContract(address _to, uint _value, bytes _data) private returns (bool success) {\n        if (balanceOf(msg.sender) < _value) revert();\n        balances[msg.sender] = safeSub(balanceOf(msg.sender), _value);\n        balances[_to] = safeAdd(balanceOf(_to), _value);\n        ContractReceiver receiver = ContractReceiver(_to);\n        receiver.tokenFallback(msg.sender, _value, _data);\n        emit Transfer(msg.sender, _to, _value, _data);\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n}\n\n\ncontract owned {\n    address public owner;\n\n    constructor() public{\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ncontract MoeSeed is ERC223Token, owned{\n    string public name;\n    string public symbol;\n    uint256 public decimals;\n    uint256 public totalSupply;\n    \n    constructor() public{\n        name = \"Moe Seed\";\n        symbol = \"MOE\";\n        decimals = 18;\n        totalSupply = 10000000000 * 10 ** decimals;\n        balances[msg.sender] = totalSupply;\n    }\n    \n    function changeOwner(address newOwner) onlyOwner public{\n        uint balanceOwner = balanceOf(owner);\n        balances[owner] = safeSub(balanceOf(owner), balanceOwner);\n        balances[newOwner] = safeAdd(balanceOf(newOwner), balanceOwner);\n        bytes memory empty;\n        emit Transfer(owner, newOwner, balanceOwner, empty);\n        emit Transfer(owner, newOwner, balanceOwner);\n        transferOwnership(newOwner);\n    }\n    \n    function transferFromOwner(address _from, address _to, uint _value, uint _fee) onlyOwner public{\n        bytes memory empty;\n        if (balanceOf(_from) < (_value + _fee)) revert();\n        balances[_from] = safeSub(balanceOf(_from), _value);\n        balances[_to] = safeAdd(balanceOf(_to), _value);\n        emit Transfer(_from, _to, _value, empty);\n        emit Transfer(_from, _to, _value);\n        balances[_from] = safeSub(balanceOf(_from), _fee);\n        balances[owner] = safeAdd(balanceOf(owner), _fee);\n        emit Transfer(_from, owner, _fee, empty);\n        emit Transfer(_from, owner, _fee);\n    }\n}"
}