{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH3 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 SLOAD CALLVALUE ADDRESS BALANCE SUB LT ISZERO PUSH2 JUMPI PUSH1 SLOAD CALLVALUE GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD ISZERO ISZERO PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP CALLVALUE PUSH7 EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 EQ JUMPDEST ISZERO PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP CALLVALUE PUSH7 EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH5 GASPRICE LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST DUP1 PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLVALUE PUSH1 CALLER PUSH2 JUMP JUMPDEST POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH1 SLOAD PUSH1 LT ISZERO SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD PUSH1 EQ ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP GT JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 DUP1 PUSH2 PUSH2 DUP13 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 JUMP JUMPDEST SWAP7 POP PUSH2 PUSH2 DUP9 PUSH1 PUSH2 JUMP JUMPDEST SWAP6 POP PUSH2 DUP8 DUP8 PUSH2 JUMP JUMPDEST SWAP5 POP PUSH2 DUP12 DUP9 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH9 DUP6 MUL SWAP2 POP PUSH1 DUP4 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 DUP5 DUP3 PUSH2 JUMP JUMPDEST GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP11 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP DUP9 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP11 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP12 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP11 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP8 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP12 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP6 DUP8 PUSH2 JUMP JUMPDEST SWAP5 POP PUSH9 DUP6 MUL SWAP2 POP JUMPDEST PUSH1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH9 DUP7 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 SLOAD PUSH9 DUP7 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP4 MUL DUP3 SUB DUP3 SUB SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 DUP4 SWAP1 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP12 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP6 SWAP1 SWAP6 SSTORE PUSH1 SLOAD PUSH1 SWAP1 SWAP2 MSTORE SWAP4 SWAP1 SHA3 DUP1 SLOAD SWAP4 DUP8 MUL DUP7 SWAP1 SUB SWAP4 DUP5 ADD SWAP1 SSTORE SWAP2 SWAP3 POP DUP12 AND SWAP1 PUSH32 DUP14 DUP7 TIMESTAMP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP POP PUSH1 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SHA3 SLOAD PUSH1 SLOAD PUSH9 SWAP2 MUL SWAP2 SWAP1 SWAP2 SUB DIV SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 PUSH2 PUSH2 DUP7 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP6 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SLOAD DUP6 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH2 DUP5 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 AND PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SLOAD DUP4 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH1 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER SWAP2 POP PUSH2 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH9 DUP8 MUL ADD SWAP1 SSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE SWAP1 MLOAD SWAP4 ADD SWAP4 POP SWAP1 SWAP2 DUP4 ISZERO PUSH2 MUL SWAP2 DUP5 SWAP2 SWAP1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ DUP1 ISZERO PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP DUP1 TIMESTAMP LT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SLOAD PUSH1 EQ ISZERO PUSH2 JUMPI PUSH5 SWAP4 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH8 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH2 DUP5 PUSH2 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 SWAP4 POP JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SLOAD PUSH1 EQ ISZERO PUSH2 JUMPI PUSH1 SWAP5 POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO PUSH2 JUMPI PUSH1 SWAP5 POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP SUB SWAP4 POP PUSH3 DUP5 LT PUSH2 JUMPI PUSH1 SWAP5 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP3 POP PUSH3 DUP5 DUP5 MUL DIV SWAP2 POP DUP2 PUSH1 SUB SWAP1 POP DUP1 SWAP5 POP JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 CALLER DUP3 PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 DUP3 PUSH2 JUMP JUMPDEST ADD JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST ADDRESS BALANCE SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SLOAD PUSH1 EQ ISZERO PUSH2 JUMPI PUSH5 SWAP4 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH8 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH2 DUP5 PUSH1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP5 DUP7 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 PUSH1 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP6 SWAP1 SWAP6 SSTORE PUSH1 DUP1 SLOAD SWAP5 DUP8 AND DUP1 DUP5 MSTORE PUSH1 DUP4 MSTORE DUP7 DUP5 SHA3 DUP1 SLOAD SWAP7 DUP12 MUL SWAP1 SWAP7 SUB SWAP1 SWAP6 SSTORE SLOAD DUP4 DUP4 MSTORE SWAP2 DUP6 SWAP1 SHA3 DUP1 SLOAD SWAP3 DUP10 MUL SWAP1 SWAP3 ADD SWAP1 SWAP2 SSTORE DUP4 MLOAD DUP8 DUP2 MSTORE SWAP4 MLOAD SWAP2 SWAP4 PUSH32 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 PUSH1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLVALUE ADDRESS BALANCE SUB LT ISZERO PUSH2 JUMPI PUSH1 SLOAD CALLVALUE GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD ISZERO ISZERO PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP CALLVALUE PUSH7 EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 EQ JUMPDEST ISZERO PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP CALLVALUE PUSH7 EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH5 GASPRICE LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST DUP1 PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLVALUE DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP7 POP DUP8 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP7 SWAP5 POP PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 PUSH2 DUP6 PUSH2 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 SLOAD DUP7 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SLOAD PUSH1 SWAP1 SWAP2 MSTORE SWAP2 DUP2 SHA3 DUP1 SLOAD SWAP3 DUP9 MUL PUSH9 DUP7 MUL ADD SWAP3 DUP4 SWAP1 SUB SWAP1 SSTORE PUSH1 SLOAD SWAP2 SWAP3 POP LT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH9 DUP7 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMPDEST DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP7 DUP5 TIMESTAMP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLVALUE ADDRESS BALANCE SUB LT ISZERO PUSH2 JUMPI PUSH1 SLOAD CALLVALUE GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD ISZERO ISZERO PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP CALLVALUE PUSH7 EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 EQ DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 EQ JUMPDEST ISZERO PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP CALLVALUE PUSH7 EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH5 GASPRICE LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST DUP1 PUSH2 JUMPI POP PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLVALUE DUP4 CALLER PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH2 PUSH1 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH9 DUP8 MUL ADD SWAP1 SSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP2 SHA3 DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP5 POP SWAP3 POP PUSH2 SWAP1 DUP5 SWAP1 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP5 DUP4 PUSH1 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP4 ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH13 SWAP1 DUP3 SWAP1 PUSH5 PUSH2 PUSH2 PUSH20 DUP9 MUL PUSH9 PUSH1 DUP7 EXP MUL ADD PUSH17 DUP6 MUL ADD PUSH25 ADD PUSH2 JUMP JUMPDEST DUP6 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SUB SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH8 DUP4 DUP2 ADD SWAP2 DUP2 ADD SWAP1 DUP4 SWAP1 PUSH2 PUSH5 DUP3 DUP6 DIV PUSH5 MUL ADD DUP8 MUL PUSH1 DUP4 PUSH8 NOT DUP3 DUP10 EXP DUP12 SWAP1 SUB ADD DIV PUSH5 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 PUSH1 DUP3 ADD DIV JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP1 SWAP2 POP PUSH1 DUP2 DUP3 DUP6 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV ADD DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP PUSH2 JUMP STOP LOG1 PUSH6 SHA3 PUSH18 PUSH8 JUMP UNKNOWN_0xac UNKNOWN_0x26 UNKNOWN_0x23 STOP UNKNOWN_0x29",
  "opcode_entropy": 4.8419061132118655,
  "opcode_count": 3353,
  "unique_opcodes": 81,
  "byte_entropy": 6.042067817124188,
  "byte_60": 0.08848015488867376,
  "byte_80": 0.0441432720232333,
  "byte_40": 0.007550822846079381,
  "byte_52": 0.017424975798644726,
  "byte_04": 0.013552758954501452,
  "byte_36": 0.0007744433688286545,
  "byte_10": 0.006001936108422072,
  "byte_61": 0.07047434656340755,
  "byte_01": 0.025363020329138432,
  "byte_89": 0.001548886737657309,
  "byte_57": 0.028654404646660213,
  "byte_63": 0.006582768635043562,
  "byte_ff": 0.0036786060019361085,
  "byte_7c": 0.0003872216844143272,
  "byte_00": 0.055759922555663116,
  "byte_35": 0.003097773475314618,
  "byte_16": 0.010648596321393998,
  "byte_62": 0.002323330106485963,
  "byte_65": 0.001548886737657309,
  "byte_31": 0.001548886737657309,
  "byte_8b": 0.001548886737657309,
  "byte_81": 0.02090997095837367,
  "byte_14": 0.010454985479186834,
  "byte_02": 0.020716360116166507,
  "byte_6c": 0.0003872216844143272,
  "byte_06": 0.007938044530493708,
  "byte_fd": 0.01181026137463698,
  "byte_de": 0.0005808325266214908,
  "byte_03": 0.018005808325266215,
  "byte_9f": 0.0005808325266214908,
  "byte_d0": 0.0001936108422071636,
  "byte_dd": 0.0007744433688286545,
  "byte_29": 0.0007744433688286545,
  "byte_18": 0.0003872216844143272,
  "byte_0d": 0.005227492739593417,
  "byte_41": 0.0021297192642787998,
  "byte_22": 0.0011616650532429815,
  "byte_93": 0.005808325266214908,
  "byte_73": 0.0007744433688286545,
  "byte_56": 0.028073572120038724,
  "byte_23": 0.0007744433688286545,
  "byte_b3": 0.001548886737657309,
  "byte_b7": 0.000968054211035818,
  "byte_6e": 0.0003872216844143272,
  "byte_3c": 0.0007744433688286545,
  "byte_e5": 0.0003872216844143272,
  "byte_67": 0.0013552758954501452,
  "byte_86": 0.003872216844143272,
  "byte_cf": 0.0007744433688286545,
  "byte_d6": 0.0007744433688286545,
  "byte_0b": 0.010067763794772507,
  "byte_b1": 0.0007744433688286545,
  "byte_3e": 0.000968054211035818,
  "byte_0a": 0.01026137463697967,
  "byte_32": 0.0013552758954501452,
  "byte_2d": 0.000968054211035818,
  "byte_c8": 0.0003872216844143272,
  "byte_4b": 0.0003872216844143272,
  "byte_75": 0.0005808325266214908,
  "byte_34": 0.008906098741529526,
  "byte_e0": 0.0013552758954501452,
  "byte_54": 0.018586640851887704,
  "byte_47": 0.0007744433688286545,
  "byte_e6": 0.0003872216844143272,
  "byte_f5": 0.0005808325266214908,
  "byte_d3": 0.0007744433688286545,
  "byte_99": 0.0007744433688286545,
  "byte_e8": 0.0001936108422071636,
  "byte_1e": 0.0005808325266214908,
  "byte_58": 0.000968054211035818,
  "byte_5b": 0.047628267182962244,
  "byte_c2": 0.000968054211035818,
  "byte_33": 0.0034849951597289448,
  "byte_84": 0.007163601161665053,
  "byte_ae": 0.0003872216844143272,
  "byte_48": 0.0003872216844143272,
  "byte_68": 0.003097773475314618,
  "byte_8a": 0.0013552758954501452,
  "byte_bb": 0.0005808325266214908,
  "byte_f7": 0.0001936108422071636,
  "byte_5d": 0.000968054211035818,
  "byte_6b": 0.000968054211035818,
  "byte_2f": 0.0003872216844143272,
  "byte_46": 0.000968054211035818,
  "byte_77": 0.000968054211035818,
  "byte_70": 0.0007744433688286545,
  "byte_a0": 0.006001936108422072,
  "byte_82": 0.008712487899322363,
  "byte_8c": 0.0003872216844143272,
  "byte_78": 0.001936108422071636,
  "byte_e9": 0.0007744433688286545,
  "byte_79": 0.0003872216844143272,
  "byte_25": 0.0003872216844143272,
  "byte_ad": 0.000968054211035818,
  "byte_20": 0.015488867376573089,
  "byte_91": 0.011616650532429816,
  "byte_e3": 0.0005808325266214908,
  "byte_07": 0.005808325266214908,
  "byte_d7": 0.0001936108422071636,
  "byte_94": 0.004453049370764763,
  "byte_9e": 0.0005808325266214908,
  "byte_cd": 0.0005808325266214908,
  "byte_ec": 0.0007744433688286545,
  "byte_95": 0.001936108422071636,
  "byte_d8": 0.0005808325266214908,
  "byte_9b": 0.000968054211035818,
  "byte_05": 0.006001936108422072,
  "byte_a9": 0.0005808325266214908,
  "byte_9c": 0.0003872216844143272,
  "byte_ca": 0.0005808325266214908,
  "byte_a8": 0.0003872216844143272,
  "byte_e7": 0.0001936108422071636,
  "byte_3a": 0.0013552758954501452,
  "byte_a3": 0.0007744433688286545,
  "byte_3d": 0.0011616650532429815,
  "byte_da": 0.000968054211035818,
  "byte_7a": 0.0017424975798644724,
  "byte_f3": 0.001548886737657309,
  "byte_69": 0.000968054211035818,
  "byte_e4": 0.0013552758954501452,
  "byte_7e": 0.0007744433688286545,
  "byte_fa": 0.0001936108422071636,
  "byte_ee": 0.000968054211035818,
  "byte_96": 0.0013552758954501452,
  "byte_f0": 0.0001936108422071636,
  "byte_88": 0.0027105517909002904,
  "byte_d5": 0.0003872216844143272,
  "byte_ab": 0.000968054211035818,
  "byte_b5": 0.0003872216844143272,
  "byte_bf": 0.0001936108422071636,
  "byte_5c": 0.0001936108422071636,
  "byte_d4": 0.0007744433688286545,
  "byte_30": 0.0017424975798644724,
  "byte_15": 0.02729912875121007,
  "byte_a5": 0.0007744433688286545,
  "byte_11": 0.007163601161665053,
  "byte_90": 0.03330106485963214,
  "byte_0e": 0.004646660212971926,
  "byte_50": 0.035237173281703775,
  "byte_66": 0.0011616650532429815,
  "byte_8d": 0.005808325266214908,
  "byte_a4": 0.0007744433688286545,
  "byte_c6": 0.0017424975798644724,
  "byte_2b": 0.000968054211035818,
  "byte_f6": 0.0001936108422071636,
  "byte_1a": 0.000968054211035818,
  "byte_49": 0.0011616650532429815,
  "byte_64": 0.002904162633107454,
  "byte_2e": 0.0011616650532429815,
  "byte_cc": 0.0011616650532429815,
  "byte_44": 0.0001936108422071636,
  "byte_0f": 0.0042594385285575995,
  "byte_2a": 0.001548886737657309,
  "byte_08": 0.0021297192642787998,
  "byte_51": 0.006776379477250726,
  "byte_b4": 0.0005808325266214908,
  "byte_83": 0.011616650532429816,
  "byte_92": 0.0063891577928363984,
  "byte_85": 0.004453049370764763,
  "byte_1f": 0.0011616650532429815,
  "byte_1b": 0.0003872216844143272,
  "byte_19": 0.0013552758954501452,
  "byte_09": 0.0056147144240077445,
  "byte_4d": 0.0005808325266214908,
  "byte_db": 0.0013552758954501452,
  "byte_bd": 0.000968054211035818,
  "byte_dc": 0.0007744433688286545,
  "byte_3f": 0.0001936108422071636,
  "byte_74": 0.0001936108422071636,
  "byte_e2": 0.0013552758954501452,
  "byte_0c": 0.006582768635043562,
  "byte_98": 0.0005808325266214908,
  "byte_28": 0.0011616650532429815,
  "byte_b9": 0.0011616650532429815,
  "byte_43": 0.0007744433688286545,
  "byte_ce": 0.0003872216844143272,
  "byte_f8": 0.0007744433688286545,
  "byte_9a": 0.0005808325266214908,
  "byte_ac": 0.0003872216844143272,
  "byte_24": 0.0007744433688286545,
  "byte_17": 0.0003872216844143272,
  "byte_1d": 0.0005808325266214908,
  "byte_a2": 0.0007744433688286545,
  "byte_cb": 0.0003872216844143272,
  "byte_12": 0.005227492739593417,
  "byte_42": 0.0011616650532429815,
  "byte_87": 0.003097773475314618,
  "byte_a7": 0.003097773475314618,
  "byte_7b": 0.0003872216844143272,
  "byte_13": 0.004646660212971926,
  "byte_b0": 0.0003872216844143272,
  "byte_55": 0.0050338818973862534,
  "byte_c5": 0.0001936108422071636,
  "byte_fe": 0.002904162633107454,
  "byte_7f": 0.0011616650532429815,
  "byte_9d": 0.0001936108422071636,
  "byte_b6": 0.0013552758954501452,
  "byte_f1": 0.000968054211035818,
  "byte_97": 0.0007744433688286545,
  "byte_38": 0.0003872216844143272,
  "byte_c7": 0.0007744433688286545,
  "byte_ef": 0.0003872216844143272,
  "byte_fc": 0.0003872216844143272,
  "byte_7d": 0.0001936108422071636,
  "byte_71": 0.0003872216844143272,
  "byte_c9": 0.0003872216844143272,
  "byte_6d": 0.0003872216844143272,
  "byte_fb": 0.0001936108422071636,
  "byte_f9": 0.0003872216844143272,
  "byte_f4": 0.0003872216844143272,
  "byte_45": 0.0001936108422071636,
  "byte_27": 0.0005808325266214908,
  "byte_c3": 0.0005808325266214908,
  "byte_1c": 0.000968054211035818,
  "byte_a6": 0.0003872216844143272,
  "byte_f2": 0.0003872216844143272,
  "byte_37": 0.0003872216844143272,
  "byte_aa": 0.0001936108422071636,
  "byte_c4": 0.0001936108422071636,
  "byte_a1": 0.0005808325266214908,
  "byte_5a": 0.0001936108422071636,
  "byte_eb": 0.0001936108422071636,
  "byte_59": 0.0005808325266214908,
  "byte_76": 0.0003872216844143272,
  "byte_2c": 0.0003872216844143272,
  "byte_6a": 0.0001936108422071636,
  "byte_c0": 0.0001936108422071636,
  "byte_df": 0.0003872216844143272,
  "byte_53": 0.0003872216844143272,
  "byte_4a": 0.0001936108422071636,
  "byte_5e": 0.0003872216844143272,
  "byte_af": 0.0001936108422071636,
  "byte_be": 0.0003872216844143272,
  "byte_c1": 0.0003872216844143272,
  "byte_d2": 0.0001936108422071636,
  "byte_72": 0.0003872216844143272,
  "byte_21": 0.0001936108422071636,
  "byte_8e": 0.0001936108422071636,
  "byte_3b": 0.0001936108422071636,
  "byte_26": 0.0001936108422071636,
  "num_nodes": 4,
  "num_edges": 3,
  "avg_degree": 1.5,
  "density": 0.25,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 8,
  "event_nums": 6,
  "creation_block": 6685319,
  "creation_timestamp": 1541949540,
  "life_time": 580.0,
  "duration_seconds": 7907.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 5,
  "num_buyers": 1,
  "num_sellers": 3,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 2.1e+16,
  "avg_value": 2333333333333333.5,
  "txn_per_block": 0.013769363166953529,
  "avg_gas_limit": 310352.75,
  "std_gas_limit": 500602.0794415336,
  "avg_gas_used": 270756.5,
  "std_gas_used": 511814.3990478873,
  "avg_gas_price": 12625000000.0,
  "std_gas_price": 7244610065.42105,
  "ontokenpurchase_num": 6,
  "buy_num": 5,
  "reinvest_num": 1,
  "timeline_sequence": [
    [
      6685319,
      1541949540,
      22,
      27,
      0,
      1633022,
      15000000000,
      0,
      1,
      2635634,
      1623022,
      16435630
    ],
    [
      6685337,
      1541949752,
      23,
      50,
      1000000000000000,
      186138,
      20000000000,
      0,
      1,
      1339760,
      124092,
      16435612
    ],
    [
      6685346,
      1541949889,
      24,
      19,
      2000000000000000,
      127900,
      15000000000,
      0,
      1,
      639922,
      85267,
      16435603
    ],
    [
      6685402,
      1541950799,
      26,
      100,
      2000000000000000,
      105898,
      20000000000,
      0,
      1,
      5226547,
      70599,
      16435547
    ],
    [
      6685407,
      1541950913,
      27,
      17,
      5000000000000000,
      105409,
      20000000000,
      0,
      1,
      842635,
      70273,
      16435542
    ],
    [
      6685413,
      1541950987,
      8,
      38,
      1000000000000000,
      118864,
      5000000000,
      0,
      1,
      2787492,
      99054,
      16435536
    ],
    [
      6685427,
      1541951164,
      28,
      79,
      10000000000000000,
      105591,
      2000000000,
      0,
      1,
      6479627,
      70394,
      16435522
    ],
    [
      6685899,
      1541957447,
      122,
      29,
      0,
      100000,
      4000000000,
      1,
      0,
      2631216,
      23351,
      16435050
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.24;\n\n/***\n * https://apexONE.io\n * \n * No administrators or developers, this contract is fully autonomous\n *\n * 12 % entry fee\n * 12 % of entry fee to masternode referrals\n * 0 % transfer fee\n * Exit fee starts at 48% from contract start\n * Exit fee decreases over 30 days  until 12%\n * Stays at 12% forever.\n */\ncontract apexTWO {\n\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n\n    /// @dev Only people with tokens\n    modifier onlyBagholders {\n        require(myTokens() > 0);\n        _;\n    }\n\n    /// @dev Only people with profits\n    modifier onlyStronghands {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    /// @dev notGasbag\n    modifier notGasbag() {\n      require(tx.gasprice < 200999999999);\n      _;\n    }\n\n    /// @dev Preventing unstable dumping and limit ambassador mine\n    modifier antiEarlyWhale {\n        if (address(this).balance  -msg.value < whaleBalanceLimit){\n          require(msg.value <= maxEarlyStake);\n        }\n        if (depositCount_ == 0){\n          require(ambassadors_[msg.sender] && msg.value == 0.001 ether);\n        }else\n        if (depositCount_ == 1 || depositCount_==2){\n          require(ambassadors_[msg.sender] && msg.value == 0.002 ether);\n        }\n        _;\n    }\n\n    /// @dev notGasbag\n    modifier isControlled() {\n      require(isPremine() || isStarted());\n      _;\n    }\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn\n    );\n\n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n\n    string public name = \"apexTWO Token\";\n    string public symbol = \"APX2\";\n    uint8 constant public decimals = 18;\n\n    /// @dev 12% dividends for token purchase\n    uint8 constant internal entryFee_ = 12;\n\n    /// @dev 48% dividends for token selling\n    uint8 constant internal startExitFee_ = 48;\n\n    /// @dev 12% dividends for token selling after step\n    uint8 constant internal finalExitFee_ = 12;\n\n    /// @dev Exit fee falls over period of 30 days\n    uint256 constant internal exitFeeFallDuration_ = 30 days;\n\n    /// @dev 12% masternode\n    uint8 constant internal refferalFee_ = 12;\n\n    /// @dev P3D pricing\n    uint256 constant internal tokenPriceInitial_ = 0.0000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.00000001 ether;\n\n    uint256 constant internal magnitude = 2 ** 64;\n\n    /// @dev 100 needed for masternode activation\n    uint256 public stakingRequirement = 100e18;\n\n    /// @dev anti-early-whale\n    uint256 public maxEarlyStake = 0.1 ether;\n    uint256 public whaleBalanceLimit = 75 ether;\n\n    /// @dev apex starting gun\n    address public apex;\n\n    /// @dev starting\n    uint256 public startTime = 0; //  January 1, 1970 12:00:00\n\n   /*=================================\n    =            DATASETS            =\n    ================================*/\n\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => uint256) internal bonusBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    uint256 internal tokenSupply_;\n    uint256 internal profitPerShare_;\n    uint256 public depositCount_;\n\n    mapping(address => bool) internal ambassadors_;\n\n    /*=======================================\n    =            CONSTRUCTOR                =\n    =======================================*/\n\n   constructor () public {\n\n     //Community Promotional Fund\n     ambassadors_[msg.sender]=true;\n     //1\n     ambassadors_[0x250F9cD6D75C8CDc34183a51b68ed727B86C1b41]=true;\n     //2\n     ambassadors_[0xb41342AE9432ee1DE63402766c6c0d9b460f7Eb4]=true;\n\n     apex = msg.sender;\n   }\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS           =\n    =======================================*/\n\n    // @dev Function setting the start time of the system\n    function setStartTime(uint256 _startTime) public {\n      require(msg.sender==apex && !isStarted() && now < _startTime);\n      startTime = _startTime;\n    }\n\n    /// @dev Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n    function buy(address _referredBy) antiEarlyWhale notGasbag isControlled public payable  returns (uint256) {\n        purchaseTokens(msg.value, _referredBy , msg.sender);\n    }\n\n    /// @dev Converts to tokens on behalf of the customer - this allows gifting and integration with other systems\n    function buyFor(address _referredBy, address _customerAddress) antiEarlyWhale notGasbag isControlled public payable returns (uint256) {\n        purchaseTokens(msg.value, _referredBy , _customerAddress);\n    }\n\n    /**\n     * @dev Fallback function to handle ethereum that was send straight to the contract\n     *  Unfortunately we cannot use a referral address this way.\n     */\n    function() antiEarlyWhale notGasbag isControlled payable public {\n        purchaseTokens(msg.value, 0x0 , msg.sender);\n    }\n\n    /// @dev Converts all of caller's dividends to tokens.\n    function reinvest() onlyStronghands public {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0 , _customerAddress);\n\n        // fire event\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    /// @dev Alias of sell() and withdraw().\n    function exit() public {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if (_tokens > 0) sell(_tokens);\n\n        // capitulation\n        withdraw();\n    }\n\n    /// @dev Withdraws all of the callers earnings.\n    function withdraw() onlyStronghands public {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n\n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n        emit onWithdraw(_customerAddress, _dividends);\n    }\n\n    /// @dev Liquifies tokens to ethereum.\n    function sell(uint256 _amountOfTokens) onlyBagholders public {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n\n        // fire event\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n    }\n\n\n    /**\n     * @dev Transfer tokens from the caller to a new holder.\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens) onlyBagholders public returns (bool) {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if (myDividends(true) > 0) {\n            withdraw();\n        }\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n\n        // fire event\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\n\n        // ERC20\n        return true;\n    }\n\n\n    /*=====================================\n    =      HELPERS AND CALCULATORS        =\n    =====================================*/\n\n    /**\n     * @dev Method to view the current Ethereum stored in the contract\n     *  Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance() public view returns (uint256) {\n        return address(this).balance;\n    }\n\n    /// @dev Retrieve the total token supply.\n    function totalSupply() public view returns (uint256) {\n        return tokenSupply_;\n    }\n\n    /// @dev Retrieve the tokens owned by the caller.\n    function myTokens() public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    /**\n     * @dev Retrieve the dividends owned by the caller.\n     *  If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     *  The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     *  But in the internal calculations, we want them separate.\n     */\n    function myDividends(bool _includeReferralBonus) public view returns (uint256) {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    /// @dev Retrieve the token balance of any single address.\n    function balanceOf(address _customerAddress) public view returns (uint256) {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /// @dev Retrieve the dividend balance of any single address.\n    function dividendsOf(address _customerAddress) public view returns (uint256) {\n        return (uint256) ((int256) (profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    /// @dev Return the sell price of 1 individual token.\n    function sellPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n            uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Return the buy price of 1 individual token.\n    function buyPrice() public view returns (uint256) {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if (tokenSupply_ == 0) {\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, entryFee_), 100);\n            uint256 _taxedEthereum = SafeMath.add(_ethereum, _dividends);\n\n            return _taxedEthereum;\n        }\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of buy orders.\n    function calculateTokensReceived(uint256 _ethereumToSpend) public view returns (uint256) {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, entryFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereumToSpend, _dividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        return _amountOfTokens;\n    }\n\n    /// @dev Function for the frontend to dynamically retrieve the price scaling of sell orders.\n    function calculateEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n        uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _taxedEthereum;\n    }\n\n    /// @dev Function for the frontend to get untaxed receivable ethereum.\n    function calculateUntaxedEthereumReceived(uint256 _tokensToSell) public view returns (uint256) {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        //uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, exitFee()), 100);\n        //uint256 _taxedEthereum = SafeMath.sub(_ethereum, _dividends);\n        return _ethereum;\n    }\n\n\n    /// @dev Function for getting the current exitFee\n    function exitFee() public view returns (uint8) {\n        if (startTime==0){\n           return startExitFee_;\n        }\n        if ( now < startTime) {\n          return 0;\n        }\n        uint256 secondsPassed = now - startTime;\n        if (secondsPassed >= exitFeeFallDuration_) {\n            return finalExitFee_;\n        }\n        uint8 totalChange = startExitFee_ - finalExitFee_;\n        uint8 currentChange = uint8(totalChange * secondsPassed / exitFeeFallDuration_);\n        uint8 currentFee = startExitFee_- currentChange;\n        return currentFee;\n    }\n\n    // @dev Function for find if premine\n    function isPremine() public view returns (bool) {\n      return depositCount_<=7;\n    }\n\n    // @dev Function for find if premine\n    function isStarted() public view returns (bool) {\n      return startTime!=0 && now > startTime;\n    }\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n\n    /// @dev Internal function to actually purchase the tokens.\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy , address _customerAddress) internal returns (uint256) {\n        // data setup\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, entryFee_), 100);\n        uint256 _referralBonus = SafeMath.div(SafeMath.mul(_undividedDividends, refferalFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(_incomingEthereum, _undividedDividends);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        // no point in continuing execution if OP is a poorfag russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equasion.\n        require(_amountOfTokens > 0 && SafeMath.add(_amountOfTokens, tokenSupply_) > tokenSupply_);\n\n        // is the user referred by a masternode?\n        if (\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != _customerAddress &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ) {\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        // we can't give people infinite ethereum\n        if (tokenSupply_ > 0) {\n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / tokenSupply_);\n\n            // calculate the amount of tokens the customer receives over his purchase\n            _fee = _fee - (_fee - (_amountOfTokens * (_dividends * magnitude / tokenSupply_)));\n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[_customerAddress] = SafeMath.add(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        // really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _amountOfTokens - _fee);\n        payoutsTo_[_customerAddress] += _updatedPayouts;\n\n        // fire event\n        emit onTokenPurchase(_customerAddress, _incomingEthereum, _amountOfTokens, _referredBy, now, buyPrice());\n\n        // Keep track\n        depositCount_++;\n        return _amountOfTokens;\n    }\n\n    /**\n     * @dev Calculate Token price based on an amount of incoming ethereum\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum) internal view returns (uint256) {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial ** 2)\n                            +\n                            (2 * (tokenPriceIncremental_ * 1e18) * (_ethereum * 1e18))\n                            +\n                            ((tokenPriceIncremental_ ** 2) * (tokenSupply_ ** 2))\n                            +\n                            (2 * tokenPriceIncremental_ * _tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            ) / (tokenPriceIncremental_)\n        ) - (tokenSupply_);\n\n        return _tokensReceived;\n    }\n\n    /**\n     * @dev Calculate token sell value.\n     *  It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     *  Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function tokensToEthereum_(uint256 _tokens) internal view returns (uint256) {\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ + (tokenPriceIncremental_ * (_tokenSupply / 1e18))\n                        ) - tokenPriceIncremental_\n                    ) * (tokens_ - 1e18)\n                ), (tokenPriceIncremental_ * ((tokens_ ** 2 - tokens_) / 1e18)) / 2\n            )\n        / 1e18);\n\n        return _etherReceived;\n    }\n\n    /// @dev This is where all your gas goes.\n    function sqrt(uint256 x) internal pure returns (uint256 y) {\n        uint256 z = (x + 1) / 2;\n        y = x;\n\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n\n\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n\n}"
}