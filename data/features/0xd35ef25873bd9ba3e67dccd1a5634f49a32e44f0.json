{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH2 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH2 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH2 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH2 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 POP PUSH8 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH8 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH8 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP JUMPDEST JUMPDEST JUMPDEST PUSH2 PUSH1 PUSH2 DUP4 PUSH1 AND DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 MLOAD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH2 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 PUSH2 AND LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH2 DUP4 PUSH2 AND LT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP5 PUSH2 AND PUSH2 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP PUSH1 DUP2 EQ ISZERO PUSH2 JUMPI PUSH7 SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP11 PUSH2 AND LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH2 DUP11 PUSH2 AND LT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER SWAP9 POP PUSH1 PUSH1 DUP12 PUSH2 AND PUSH2 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP8 POP DUP8 PUSH20 AND DUP10 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLVALUE SWAP7 POP PUSH1 PUSH1 DUP12 PUSH2 AND PUSH2 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP6 POP PUSH1 DUP7 EQ ISZERO PUSH2 JUMPI PUSH7 SWAP6 POP JUMPDEST DUP6 DUP8 LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP5 POP DUP6 DUP8 GT ISZERO PUSH2 JUMPI PUSH2 DUP7 DUP9 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP5 POP DUP5 DUP8 SUB SWAP7 POP JUMPDEST PUSH2 DUP7 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 DUP5 DUP8 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP3 POP DUP3 PUSH1 PUSH1 DUP13 PUSH2 AND PUSH2 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP8 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 DUP9 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP DUP9 PUSH1 PUSH1 DUP13 PUSH2 AND PUSH2 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH32 DUP10 DUP10 DUP13 DUP7 PUSH1 MLOAD DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP4 PUSH2 AND PUSH2 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP5 POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 PUSH20 AND DUP9 PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 DUP4 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP8 PUSH20 AND PUSH2 DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 PUSH2 DUP5 DUP5 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST PUSH1 DUP6 GT ISZERO PUSH2 JUMPI DUP9 PUSH20 AND PUSH2 DUP7 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 POP PUSH8 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH8 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH8 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH8 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP JUMPDEST JUMPDEST JUMPDEST JUMPDEST PUSH2 PUSH1 PUSH2 DUP4 PUSH1 AND DUP7 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH20 AND PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP5 EQ ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 PUSH1 SWAP1 SSTORE POP PUSH1 ADD PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0x2f UNKNOWN_0xd0 UNKNOWN_0xe UNKNOWN_0xa8 DUP2 UNKNOWN_0xed XOR UNKNOWN_0xa9 GT SWAP1 UNKNOWN_0xcf INVALID_0x78",
  "opcode_entropy": 4.8299363172243845,
  "opcode_count": 2303,
  "unique_opcodes": 73,
  "byte_entropy": 5.164336478738904,
  "byte_60": 0.06685499058380415,
  "byte_40": 0.009416195856873822,
  "byte_52": 0.010357815442561206,
  "byte_04": 0.011064030131826741,
  "byte_36": 0.0007062146892655367,
  "byte_10": 0.005178907721280603,
  "byte_61": 0.0449623352165725,
  "byte_00": 0.04519774011299435,
  "byte_c5": 0.00023540489642184556,
  "byte_57": 0.018126177024482108,
  "byte_35": 0.002824858757062147,
  "byte_7c": 0.00047080979284369113,
  "byte_01": 0.029896421845574388,
  "byte_90": 0.044020715630885124,
  "byte_63": 0.005885122410546139,
  "byte_ff": 0.2427024482109228,
  "byte_16": 0.0237758945386064,
  "byte_80": 0.035781544256120526,
  "byte_12": 0.0009416195856873823,
  "byte_d9": 0.0007062146892655367,
  "byte_e1": 0.00023540489642184556,
  "byte_a5": 0.0007062146892655367,
  "byte_14": 0.007768361581920904,
  "byte_ca": 0.00023540489642184556,
  "byte_20": 0.0160075329566855,
  "byte_5f": 0.00047080979284369113,
  "byte_3b": 0.0007062146892655367,
  "byte_58": 0.00047080979284369113,
  "byte_05": 0.00211864406779661,
  "byte_3f": 0.00047080979284369113,
  "byte_4b": 0.00023540489642184556,
  "byte_a8": 0.0009416195856873823,
  "byte_3a": 0.0009416195856873823,
  "byte_3c": 0.00047080979284369113,
  "byte_4d": 0.0009416195856873823,
  "byte_99": 0.0007062146892655367,
  "byte_94": 0.0011770244821092278,
  "byte_e8": 0.00023540489642184556,
  "byte_51": 0.010357815442561206,
  "byte_5c": 0.0011770244821092278,
  "byte_97": 0.0009416195856873823,
  "byte_5a": 0.00047080979284369113,
  "byte_bb": 0.00023540489642184556,
  "byte_ae": 0.00023540489642184556,
  "byte_1c": 0.00047080979284369113,
  "byte_46": 0.00023540489642184556,
  "byte_62": 0.0007062146892655367,
  "byte_db": 0.00047080979284369113,
  "byte_81": 0.019067796610169493,
  "byte_d6": 0.00023540489642184556,
  "byte_93": 0.001647834274952919,
  "byte_be": 0.0007062146892655367,
  "byte_02": 0.010828625235404897,
  "byte_84": 0.003766478342749529,
  "byte_56": 0.013888888888888888,
  "byte_cb": 0.00047080979284369113,
  "byte_59": 0.0014124293785310734,
  "byte_32": 0.00047080979284369113,
  "byte_8d": 0.0009416195856873823,
  "byte_5b": 0.032015065913371,
  "byte_47": 0.0007062146892655367,
  "byte_eb": 0.00023540489642184556,
  "byte_d8": 0.00023540489642184556,
  "byte_fd": 0.00847457627118644,
  "byte_e3": 0.0009416195856873823,
  "byte_9c": 0.00047080979284369113,
  "byte_f2": 0.00047080979284369113,
  "byte_8b": 0.0011770244821092278,
  "byte_d3": 0.0011770244821092278,
  "byte_f6": 0.0007062146892655367,
  "byte_c3": 0.00023540489642184556,
  "byte_ce": 0.0007062146892655367,
  "byte_33": 0.00211864406779661,
  "byte_03": 0.01059322033898305,
  "byte_0c": 0.0030602636534839923,
  "byte_fa": 0.00047080979284369113,
  "byte_76": 0.0009416195856873823,
  "byte_b4": 0.0007062146892655367,
  "byte_34": 0.0035310734463276836,
  "byte_15": 0.02824858757062147,
  "byte_d5": 0.0007062146892655367,
  "byte_ef": 0.00023540489642184556,
  "byte_91": 0.017419962335216574,
  "byte_50": 0.03742937853107345,
  "byte_25": 0.00047080979284369113,
  "byte_82": 0.01012241054613936,
  "byte_f3": 0.0018832391713747645,
  "byte_26": 0.00023540489642184556,
  "byte_3d": 0.0009416195856873823,
  "byte_4f": 0.00047080979284369113,
  "byte_ac": 0.0009416195856873823,
  "byte_1f": 0.0018832391713747645,
  "byte_92": 0.0023540489642184556,
  "byte_83": 0.009180790960451978,
  "byte_37": 0.00047080979284369113,
  "byte_b9": 0.00047080979284369113,
  "byte_c1": 0.00047080979284369113,
  "byte_06": 0.0025894538606403015,
  "byte_e6": 0.00047080979284369113,
  "byte_4e": 0.00023540489642184556,
  "byte_30": 0.0007062146892655367,
  "byte_b1": 0.00047080979284369113,
  "byte_45": 0.0007062146892655367,
  "byte_0b": 0.001647834274952919,
  "byte_42": 0.00023540489642184556,
  "byte_73": 0.011299435028248588,
  "byte_a7": 0.00023540489642184556,
  "byte_bd": 0.00047080979284369113,
  "byte_67": 0.0023540489642184556,
  "byte_de": 0.00023540489642184556,
  "byte_0a": 0.006355932203389831,
  "byte_0d": 0.0009416195856873823,
  "byte_17": 0.0018832391713747645,
  "byte_43": 0.00047080979284369113,
  "byte_0e": 0.00211864406779661,
  "byte_68": 0.0007062146892655367,
  "byte_b0": 0.00047080979284369113,
  "byte_19": 0.0025894538606403015,
  "byte_c9": 0.00023540489642184556,
  "byte_0f": 0.004472693032015066,
  "byte_07": 0.001647834274952919,
  "byte_54": 0.007062146892655367,
  "byte_44": 0.0007062146892655367,
  "byte_f4": 0.0007062146892655367,
  "byte_11": 0.00423728813559322,
  "byte_5d": 0.00047080979284369113,
  "byte_f0": 0.00047080979284369113,
  "byte_b2": 0.00047080979284369113,
  "byte_8c": 0.0011770244821092278,
  "byte_78": 0.0009416195856873823,
  "byte_2d": 0.00047080979284369113,
  "byte_e9": 0.00047080979284369113,
  "byte_b6": 0.00047080979284369113,
  "byte_64": 0.0009416195856873823,
  "byte_86": 0.0018832391713747645,
  "byte_75": 0.0007062146892655367,
  "byte_55": 0.0025894538606403015,
  "byte_7f": 0.0011770244821092278,
  "byte_2f": 0.0011770244821092278,
  "byte_9e": 0.0007062146892655367,
  "byte_13": 0.00047080979284369113,
  "byte_df": 0.00023540489642184556,
  "byte_9f": 0.00023540489642184556,
  "byte_ad": 0.00023540489642184556,
  "byte_d1": 0.00047080979284369113,
  "byte_a9": 0.0009416195856873823,
  "byte_e0": 0.0009416195856873823,
  "byte_79": 0.00023540489642184556,
  "byte_ed": 0.00047080979284369113,
  "byte_2e": 0.00023540489642184556,
  "byte_a1": 0.0014124293785310734,
  "byte_98": 0.00047080979284369113,
  "byte_d4": 0.00047080979284369113,
  "byte_e4": 0.00047080979284369113,
  "byte_c7": 0.00023540489642184556,
  "byte_6b": 0.00047080979284369113,
  "byte_6e": 0.0007062146892655367,
  "byte_66": 0.0007062146892655367,
  "byte_7e": 0.0007062146892655367,
  "byte_a4": 0.0009416195856873823,
  "byte_c6": 0.00047080979284369113,
  "byte_da": 0.00047080979284369113,
  "byte_8a": 0.00047080979284369113,
  "byte_72": 0.00047080979284369113,
  "byte_87": 0.0018832391713747645,
  "byte_89": 0.0009416195856873823,
  "byte_ee": 0.00023540489642184556,
  "byte_96": 0.00047080979284369113,
  "byte_95": 0.00047080979284369113,
  "byte_08": 0.0030602636534839923,
  "byte_23": 0.0007062146892655367,
  "byte_85": 0.0025894538606403015,
  "byte_88": 0.003295668549905838,
  "byte_77": 0.00023540489642184556,
  "byte_a2": 0.00023540489642184556,
  "byte_b7": 0.00023540489642184556,
  "byte_3e": 0.00023540489642184556,
  "byte_49": 0.00047080979284369113,
  "byte_d7": 0.00023540489642184556,
  "byte_9b": 0.00023540489642184556,
  "byte_41": 0.00023540489642184556,
  "byte_d2": 0.00023540489642184556,
  "byte_53": 0.00047080979284369113,
  "byte_bc": 0.00023540489642184556,
  "byte_39": 0.00023540489642184556,
  "byte_fc": 0.0009416195856873823,
  "byte_f1": 0.0009416195856873823,
  "byte_ec": 0.00047080979284369113,
  "byte_dd": 0.00023540489642184556,
  "byte_f9": 0.00047080979284369113,
  "byte_69": 0.00047080979284369113,
  "byte_a0": 0.00047080979284369113,
  "byte_22": 0.0009416195856873823,
  "byte_70": 0.00047080979284369113,
  "byte_2b": 0.00023540489642184556,
  "byte_a3": 0.0007062146892655367,
  "byte_bf": 0.00023540489642184556,
  "byte_c8": 0.00023540489642184556,
  "byte_7a": 0.0007062146892655367,
  "byte_d0": 0.0007062146892655367,
  "byte_1a": 0.00047080979284369113,
  "byte_cf": 0.00047080979284369113,
  "byte_24": 0.00047080979284369113,
  "byte_cd": 0.00023540489642184556,
  "byte_af": 0.00023540489642184556,
  "byte_18": 0.0007062146892655367,
  "byte_6f": 0.00023540489642184556,
  "byte_e2": 0.00023540489642184556,
  "byte_fe": 0.0011770244821092278,
  "byte_6a": 0.00023540489642184556,
  "byte_65": 0.00047080979284369113,
  "byte_71": 0.00023540489642184556,
  "byte_aa": 0.00023540489642184556,
  "byte_1e": 0.00023540489642184556,
  "byte_29": 0.00023540489642184556,
  "num_nodes": 8,
  "num_edges": 9,
  "avg_degree": 2.25,
  "density": 0.16071428571428573,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 55,
  "event_nums": 20,
  "creation_block": 5181353,
  "creation_timestamp": 1519968976,
  "life_time": 57426.0,
  "duration_seconds": 840470.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 9,
  "num_buyers": 3,
  "num_sellers": 8,
  "num_creator_transfers": 18,
  "buy_amt": 1.8e+16,
  "sell_amt": 3.2e+16,
  "avg_value": 892857142857142.9,
  "txn_per_block": 0.0009577376495376739,
  "avg_gas_limit": 231066.70909090908,
  "std_gas_limit": 1014751.9581959051,
  "avg_gas_used": 58257.72727272727,
  "std_gas_used": 161684.17012800032,
  "avg_gas_price": 2927272727.2727275,
  "std_gas_price": 4305829222.026368,
  "dayclaimed_num": 17,
  "pause_num": 2,
  "unpause_num": 1,
  "claimday_num": 30,
  "setaccountnickname_num": 3,
  "timeline_sequence": [
    [
      5181353,
      1519968976,
      29,
      85,
      0,
      1219475,
      4000000000,
      0,
      1,
      6048616,
      1219475,
      17940073
    ],
    [
      5181873,
      1519977086,
      30,
      98,
      1000000000000000,
      128080,
      8000000000,
      0,
      1,
      4295675,
      85387,
      17939553
    ],
    [
      5181881,
      1519977167,
      31,
      6,
      0,
      65083,
      8000000000,
      0,
      1,
      412246,
      43389,
      17939545
    ],
    [
      5181887,
      1519977231,
      32,
      26,
      1000000000000000,
      128176,
      8000000000,
      0,
      1,
      1615575,
      85451,
      17939539
    ],
    [
      5181895,
      1519977395,
      33,
      176,
      1000000000000000,
      128080,
      8000000000,
      0,
      1,
      7644176,
      85387,
      17939531
    ],
    [
      5187298,
      1520055278,
      34,
      71,
      1000000000000000,
      128080,
      2000000000,
      0,
      1,
      3491739,
      85387,
      17934128
    ],
    [
      5187308,
      1520055463,
      35,
      49,
      1000000000000000,
      128176,
      4000000000,
      0,
      1,
      2676486,
      85451,
      17934118
    ],
    [
      5187314,
      1520055548,
      36,
      84,
      1000000000000000,
      128080,
      2000000000,
      0,
      1,
      3776378,
      85387,
      17934112
    ],
    [
      5203418,
      1520291252,
      0,
      83,
      1000000000000000,
      128176,
      2000000000,
      0,
      1,
      7688825,
      85451,
      17918008
    ],
    [
      5203427,
      1520291474,
      1,
      69,
      1000000000000000,
      128080,
      2000000000,
      0,
      1,
      4187885,
      85387,
      17917999
    ],
    [
      5203439,
      1520291688,
      2,
      81,
      1000000000000000,
      128176,
      3000000000,
      0,
      1,
      3658451,
      85451,
      17917987
    ],
    [
      5204351,
      1520304959,
      0,
      54,
      1000000000000000,
      128080,
      3000000000,
      0,
      1,
      3118939,
      85387,
      17917075
    ],
    [
      5225223,
      1520611388,
      3,
      79,
      1000000000000000,
      128080,
      4000000000,
      0,
      1,
      2854666,
      85387,
      17896203
    ],
    [
      5225257,
      1520611930,
      1,
      164,
      1000000000000000,
      128080,
      4000000000,
      0,
      1,
      7675210,
      85387,
      17896169
    ],
    [
      5225259,
      1520611959,
      2,
      89,
      1000000000000000,
      128080,
      4000000000,
      0,
      1,
      3019025,
      85387,
      17896167
    ],
    [
      5225261,
      1520612001,
      0,
      147,
      1000000000000000,
      127984,
      4000000000,
      0,
      1,
      6288591,
      85323,
      17896165
    ],
    [
      5225269,
      1520612219,
      1,
      137,
      1000000000000000,
      128080,
      4000000000,
      0,
      1,
      6229976,
      85387,
      17896157
    ],
    [
      5225271,
      1520612243,
      2,
      76,
      0,
      65563,
      4000000000,
      0,
      1,
      3901230,
      43709,
      17896155
    ],
    [
      5235537,
      1520763116,
      523,
      62,
      1000000000000000,
      128080,
      3000000000,
      0,
      1,
      4795277,
      85387,
      17885889
    ],
    [
      5236161,
      1520771981,
      881,
      85,
      2000000000000000,
      94065,
      2000000000,
      0,
      1,
      3114374,
      62710,
      17885265
    ],
    [
      5238068,
      1520799660,
      40,
      32,
      0,
      28236,
      22000000000,
      0,
      1,
      1194914,
      28236,
      17883358
    ],
    [
      5238146,
      1520800610,
      41,
      14,
      0,
      28123,
      22000000000,
      0,
      1,
      476874,
      28123,
      17883280
    ],
    [
      5238670,
      1520807866,
      51,
      73,
      0,
      28236,
      6000000000,
      0,
      1,
      7986709,
      28236,
      17882756
    ],
    [
      5238775,
      1520809400,
      0,
      9,
      1000000000000000,
      7588920,
      2000000000,
      1,
      0,
      353774,
      27773,
      17882651
    ],
    [
      5238779,
      1520809446,
      1,
      16,
      1000000000000000,
      300000,
      2000000000,
      1,
      0,
      587256,
      27773,
      17882647
    ],
    [
      5238779,
      1520809446,
      2,
      25,
      1000000000000000,
      100000,
      2000000000,
      1,
      0,
      1171182,
      27773,
      17882647
    ],
    [
      5238779,
      1520809446,
      3,
      32,
      1000000000000000,
      100000,
      2000000000,
      1,
      0,
      1662163,
      27773,
      17882647
    ],
    [
      5238779,
      1520809446,
      4,
      37,
      1000000000000000,
      100000,
      2000000000,
      1,
      0,
      1887315,
      27773,
      17882647
    ],
    [
      5238779,
      1520809446,
      5,
      42,
      1000000000000000,
      100000,
      2000000000,
      1,
      0,
      2124670,
      27709,
      17882647
    ],
    [
      5238779,
      1520809446,
      6,
      46,
      1000000000000000,
      100000,
      2000000000,
      1,
      0,
      2298469,
      27709,
      17882647
    ],
    [
      5238779,
      1520809446,
      7,
      49,
      1000000000000000,
      100000,
      2000000000,
      1,
      0,
      2421043,
      27773,
      17882647
    ],
    [
      5238779,
      1520809446,
      8,
      52,
      1000000000000000,
      100000,
      2000000000,
      1,
      0,
      2522961,
      27773,
      17882647
    ],
    [
      5238779,
      1520809446,
      9,
      55,
      0,
      100000,
      2000000000,
      1,
      0,
      2640946,
      23184,
      17882647
    ],
    [
      5238779,
      1520809446,
      10,
      58,
      1000000000000000,
      100000,
      2000000000,
      1,
      0,
      2775659,
      27709,
      17882647
    ],
    [
      5238779,
      1520809446,
      11,
      61,
      1000000000000000,
      100000,
      2000000000,
      1,
      0,
      2898169,
      27709,
      17882647
    ],
    [
      5238779,
      1520809446,
      12,
      64,
      1000000000000000,
      100000,
      2000000000,
      1,
      0,
      3032946,
      27709,
      17882647
    ],
    [
      5238779,
      1520809446,
      13,
      67,
      2000000000000000,
      100000,
      2000000000,
      1,
      0,
      3167787,
      27773,
      17882647
    ],
    [
      5181873,
      1519977086,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5181887,
      1519977231,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5181895,
      1519977395,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5187298,
      1520055278,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5187308,
      1520055463,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5187314,
      1520055548,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5203418,
      1520291252,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5203427,
      1520291474,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5203439,
      1520291688,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5204351,
      1520304959,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5225223,
      1520611388,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5225257,
      1520611930,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5225259,
      1520611959,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5225261,
      1520612001,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5225269,
      1520612219,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5235537,
      1520763116,
      0,
      0,
      1000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5236161,
      1520771981,
      0,
      0,
      100000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5236161,
      1520771981,
      0,
      0,
      1900000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "// OwnTheDay Source code\n// copyright 2018 xeroblood <https://owntheday.io>\n\npragma solidity 0.4.19;\n\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n* @title Ownable\n* @dev The Ownable contract has an owner address, and provides basic authorization control\n* functions, this simplifies the implementation of \"user permissions\".\n*/\ncontract Ownable {\n    address public owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n    * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n    * account.\n    */\n    function Ownable() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0));\n        OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n\n\n/**\n* @title Pausable\n* @dev Base contract which allows children to implement an emergency stop mechanism.\n*/\ncontract Pausable is Ownable {\n    event Pause();\n    event Unpause();\n\n    bool public paused = false;\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is not paused.\n    */\n    modifier whenNotPaused() {\n        require(!paused);\n        _;\n    }\n\n    /**\n    * @dev Modifier to make a function callable only when the contract is paused.\n    */\n    modifier whenPaused() {\n        require(paused);\n        _;\n    }\n\n    /**\n    * @dev called by the owner to pause, triggers stopped state\n    */\n    function pause() public onlyOwner whenNotPaused {\n        paused = true;\n        Pause();\n    }\n\n    /**\n    * @dev called by the owner to unpause, returns to normal state\n    */\n    function unpause() public onlyOwner whenPaused {\n        paused = false;\n        Unpause();\n    }\n}\n\n\n/**\n* @title Helps contracts guard agains reentrancy attacks.\n* @author Remco Bloemen <remco@2\u03c0.com>\n* @notice If you mark a function `nonReentrant`, you should also\n* mark it `external`.\n*/\ncontract ReentrancyGuard {\n\n    /**\n    * @dev We use a single lock for the whole contract.\n    */\n    bool private reentrancyLock = false;\n\n    /**\n    * @dev Prevents a contract from calling itself, directly or indirectly.\n    * @notice If you mark a function `nonReentrant`, you should also\n    * mark it `external`. Calling one nonReentrant function from\n    * another is not supported. Instead, you can implement a\n    * `private` function doing the actual work, and a `external`\n    * wrapper marked as `nonReentrant`.\n    */\n    modifier nonReentrant() {\n        require(!reentrancyLock);\n        reentrancyLock = true;\n        _;\n        reentrancyLock = false;\n    }\n\n}\n\n\n/// @title Own the Day!\n/// @author xeroblood (https://owntheday.io)\ncontract OwnTheDay is Pausable, ReentrancyGuard {\n    using SafeMath for uint256;\n\n    event DayClaimed(address buyer, address seller, uint16 dayIndex, uint256 newPrice);\n\n    /// @dev A mapping from Day Index to Current Price.\n    ///  Initial Price set at 1 finney (1/1000th of an ether).\n    mapping (uint16 => uint256) public dayIndexToPrice;\n\n    /// @dev A mapping from Day Index to the address owner. Days with\n    ///  no valid owner address are assigned to contract owner.\n    mapping (uint16 => address) public dayIndexToOwner;\n\n    /// @dev A mapping from Account Address to Nickname.\n    mapping (address => string) public ownerAddressToName;\n\n    /// @dev Calculate the Final Sale Price after the Owner-Cut has been calculated\n    function calculateOwnerCut(uint256 price) public pure returns (uint256) {\n        uint8 percentCut = 5;\n        if (price > 5000 finney) {\n            percentCut = 2;\n        } else if (price > 500 finney) {\n            percentCut = 3;\n        } else if (price > 250 finney) {\n            percentCut = 4;\n        }\n        return price.mul(percentCut).div(100);\n    }\n\n    /// @dev Calculate the Price Increase based on the current Purchase Price\n    function calculatePriceIncrease(uint256 price) public pure returns (uint256) {\n        uint8 percentIncrease = 100;\n        if (price > 5000 finney) {\n            percentIncrease = 15;\n        } else if (price > 2500 finney) {\n            percentIncrease = 18;\n        } else if (price > 500 finney) {\n            percentIncrease = 26;\n        } else if (price > 250 finney) {\n            percentIncrease = 36;\n        }\n        return price.mul(percentIncrease).div(100);\n    }\n\n    /// @dev Gets the Current (or Default) Price of a Day\n    function getPriceByDayIndex(uint16 dayIndex) public view returns (uint256) {\n        require(dayIndex >= 0 && dayIndex < 366);\n        uint256 price = dayIndexToPrice[dayIndex];\n        if (price == 0) { price = 1 finney; }\n        return price;\n    }\n\n    /// @dev Sets the Nickname for an Account Address\n    function setAccountNickname(string nickname) public whenNotPaused {\n        require(msg.sender != address(0));\n        require(bytes(nickname).length > 0);\n        ownerAddressToName[msg.sender] = nickname;\n    }\n\n    /// @dev Claim a Day for Your Very Own!\n    /// The Purchase Price is Paid to the Previous Owner\n    function claimDay(uint16 dayIndex) public nonReentrant whenNotPaused payable {\n        require(msg.sender != address(0));\n        require(dayIndex >= 0 && dayIndex < 366);\n\n        // Prevent buying from self\n        address buyer = msg.sender;\n        address seller = dayIndexToOwner[dayIndex];\n        require(buyer != seller);\n\n        // Get Amount Paid\n        uint256 amountPaid = msg.value;\n\n        // Get Current Purchase Price from Index and ensure enough was Paid\n        uint256 purchasePrice = dayIndexToPrice[dayIndex];\n        if (purchasePrice == 0) {\n            purchasePrice = 1 finney; // == 0.001 ether or 1000000000000000 wei\n        }\n        require(amountPaid >= purchasePrice);\n\n        // If too much was paid, track the change to be returned\n        uint256 changeToReturn = 0;\n        if (amountPaid > purchasePrice) {\n            changeToReturn = amountPaid.sub(purchasePrice);\n            amountPaid -= changeToReturn;\n        }\n\n        // Calculate New Purchase Price and update storage\n        uint256 priceIncrease = calculatePriceIncrease(purchasePrice);\n        uint256 newPurchasePrice = purchasePrice.add(priceIncrease);\n        dayIndexToPrice[dayIndex] = newPurchasePrice;\n\n        // Calculate Sale Price after Owner-Cut and update Owner Balance\n        uint256 ownerCut = calculateOwnerCut(amountPaid);\n        uint256 salePrice = amountPaid.sub(ownerCut);\n\n        // Assign Day to New Owner\n        dayIndexToOwner[dayIndex] = buyer;\n\n        // Fire Claim Event\n        DayClaimed(buyer, seller, dayIndex, newPurchasePrice);\n\n        // Transfer Funds (Initial sales are made to owner)\n        if (seller != address(0)) {\n            owner.transfer(ownerCut);\n            seller.transfer(salePrice);\n        } else {\n            owner.transfer(salePrice.add(ownerCut));\n        }\n        if (changeToReturn > 0) {\n            buyer.transfer(changeToReturn);\n        }\n    }\n}"
}