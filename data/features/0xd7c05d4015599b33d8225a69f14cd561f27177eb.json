{
  "opcode_sequence": "PUSH1 DUP1 SLOAD PUSH1 NOT SWAP1 DUP2 AND PUSH1 OR SWAP1 SWAP2 SSTORE PUSH1 DUP1 SLOAD DUP3 AND SWAP1 SSTORE PUSH1 DUP1 SLOAD SWAP1 SWAP2 AND SWAP1 SSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 DUP2 SWAP1 MSTORE PUSH32 PUSH1 SWAP1 DUP2 MSTORE PUSH3 SWAP2 PUSH1 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP1 DUP3 MSTORE PUSH32 PUSH1 SWAP1 SWAP3 ADD SWAP2 DUP3 MSTORE PUSH3 SWAP2 PUSH1 SWAP2 PUSH3 JUMP JUMPDEST POP PUSH5 PUSH1 SSTORE PUSH5 PUSH1 SSTORE PUSH4 PUSH1 SSTORE PUSH4 PUSH1 SSTORE PUSH4 PUSH1 SSTORE PUSH4 PUSH1 SSTORE PUSH4 PUSH1 SSTORE PUSH2 PUSH1 SSTORE PUSH1 PUSH1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SLOAD PUSH1 SLOAD PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH3 JUMPI DUP1 PUSH1 LT PUSH3 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH3 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 PUSH1 NOT PUSH2 PUSH1 DUP9 AND ISZERO MUL ADD SWAP1 SWAP6 AND SWAP5 SWAP1 SWAP5 DIV SWAP4 DUP5 ADD DUP2 SWAP1 DIV DUP2 MUL DUP3 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP3 DUP2 MSTORE SWAP6 POP SWAP2 SWAP4 POP SWAP2 POP DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH3 JUMPI DUP1 PUSH1 LT PUSH3 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH3 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH3 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND CALLER OR SWAP1 SSTORE POP PUSH3 SWAP2 POP DUP6 SWAP1 POP PUSH8 PUSH5 PUSH3 PUSH3 DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 SSTORE PUSH3 DUP4 PUSH8 PUSH5 PUSH3 PUSH3 DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE ADDRESS PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP2 SWAP1 SSTORE PUSH1 SLOAD PUSH3 SWAP2 PUSH5 PUSH3 PUSH3 DUP3 MUL OR DIV JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SWAP2 SHA3 SWAP2 SWAP1 SWAP2 SSTORE DUP3 MLOAD PUSH3 SWAP2 PUSH1 SWAP2 SWAP1 DUP6 ADD SWAP1 PUSH3 JUMP JUMPDEST POP DUP1 MLOAD PUSH3 SWAP1 PUSH1 SWAP1 PUSH1 DUP5 ADD SWAP1 PUSH3 JUMP JUMPDEST POP POP POP POP POP PUSH3 JUMP JUMPDEST PUSH1 DUP1 DUP4 ISZERO ISZERO PUSH3 JUMPI PUSH1 SWAP2 POP PUSH3 JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH3 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH3 JUMP JUMPDEST POP PUSH3 SWAP3 SWAP2 POP PUSH3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 DUP1 PUSH3 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP PUSH1 SLOAD LT DUP1 ISZERO PUSH2 JUMPI POP TIMESTAMP PUSH1 SLOAD GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ ISZERO PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP PUSH1 SLOAD LT DUP1 ISZERO PUSH2 JUMPI POP TIMESTAMP PUSH1 SLOAD GT JUMPDEST ISZERO PUSH2 JUMPI PUSH8 CALLVALUE LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 CALLVALUE SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP2 POP PUSH2 PUSH2 DUP4 PUSH2 JUMP JUMPDEST DUP4 SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH2 ADDRESS CALLER DUP4 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST POP POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP1 CALLDATALOAD DUP1 DUP3 ADD CALLDATALOAD DUP4 DUP2 MUL DUP1 DUP7 ADD DUP6 ADD SWAP1 SWAP7 MSTORE DUP1 DUP6 MSTORE PUSH2 SWAP6 CALLDATASIZE SWAP6 SWAP4 SWAP5 PUSH1 SWAP5 SWAP4 DUP6 ADD SWAP3 SWAP2 DUP3 SWAP2 DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP1 CALLDATALOAD DUP1 DUP3 ADD CALLDATALOAD DUP4 DUP2 MUL DUP1 DUP7 ADD DUP6 ADD SWAP1 SWAP7 MSTORE DUP1 DUP6 MSTORE PUSH2 SWAP6 CALLDATASIZE SWAP6 SWAP4 SWAP5 PUSH1 SWAP5 SWAP4 DUP6 ADD SWAP3 SWAP2 DUP3 SWAP2 DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP POP SWAP4 CALLDATALOAD SWAP5 POP PUSH2 SWAP4 POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 CALLDATALOAD DUP2 DUP2 ADD CALLDATALOAD PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 SWAP5 DUP3 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP5 PUSH1 DUP1 CALLDATALOAD SWAP6 CALLDATASIZE SWAP6 SWAP5 PUSH1 SWAP5 SWAP3 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 DUP4 ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 TIMESTAMP PUSH1 SLOAD LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 DUP5 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP PUSH2 JUMP JUMPDEST TIMESTAMP PUSH1 SLOAD LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 DUP5 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST TIMESTAMP PUSH1 SLOAD LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 DUP5 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST TIMESTAMP PUSH1 SLOAD LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 DUP5 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 DUP2 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP2 CALLVALUE DUP1 ISZERO PUSH2 MUL SWAP3 SWAP1 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP5 DUP7 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB SWAP6 SWAP1 SWAP6 AND DUP4 MSTORE SWAP4 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 SHA3 SSTORE PUSH1 SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SSTORE PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD CALLER SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMPDEST JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP2 ADDRESS BALANCE DUP1 ISZERO PUSH2 MUL SWAP3 SWAP1 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH8 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP PUSH2 ADDRESS CALLER DUP4 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 DUP6 LT DUP1 ISZERO PUSH2 JUMPI POP DUP3 DUP5 LT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP4 LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD DUP3 LT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 SSTORE PUSH1 SSTORE PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 MLOAD SWAP2 POP PUSH1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP3 MLOAD PUSH1 SWAP1 DUP5 SWAP1 DUP4 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 DUP6 DUP5 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD DUP2 ADD MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP2 PUSH1 SWAP2 PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND SWAP2 ADDRESS SWAP2 PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 DUP2 MSTORE DUP3 DUP3 SHA3 CALLER DUP4 MSTORE SWAP1 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SELFDESTRUCT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP5 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP4 AND DUP5 SWAP1 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 MLOAD SWAP2 POP PUSH1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH2 ADDRESS DUP6 DUP4 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD PUSH2 DUP7 PUSH8 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP DUP4 PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE CALLER PUSH1 DUP3 ADD DUP2 DUP2 MSTORE PUSH1 DUP4 ADD DUP8 SWAP1 MSTORE ADDRESS PUSH1 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 PUSH1 DUP6 ADD SWAP1 DUP2 MSTORE DUP8 MLOAD PUSH1 DUP7 ADD MSTORE DUP8 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND SWAP6 PUSH4 SWAP6 SWAP5 DUP12 SWAP5 SWAP4 DUP12 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 TIMESTAMP PUSH1 SLOAD GT ISZERO PUSH2 JUMPI POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST TIMESTAMP PUSH1 SLOAD LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST TIMESTAMP PUSH1 SLOAD LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST TIMESTAMP PUSH1 SLOAD LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST TIMESTAMP PUSH1 SLOAD LT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP LT JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP3 DUP4 MSTORE PUSH1 DUP1 DUP5 SHA3 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP STOP LOG1 PUSH6 SHA3 EXTCODESIZE SWAP7 UNKNOWN_0x4e SUB UNKNOWN_0xaf BASEFEE EXTCODECOPY SAR EXTCODEHASH LOG3 DUP7 STATICCALL REVERT BASEFEE UNKNOWN_0x1f PUSH2 INVALID_0x70",
  "opcode_entropy": 4.87322413251291,
  "opcode_count": 4843,
  "unique_opcodes": 80,
  "byte_entropy": 5.967330486229688,
  "byte_0x": 0.00013642564802182812,
  "byte_60": 0.10668485675306957,
  "byte_03": 0.02005457025920873,
  "byte_80": 0.041882673942701225,
  "byte_54": 0.0165075034106412,
  "byte_ff": 0.019645293315143246,
  "byte_19": 0.0030013642564802184,
  "byte_90": 0.03778990450204638,
  "byte_81": 0.02373806275579809,
  "byte_16": 0.02155525238744884,
  "byte_12": 0.0024556616643929058,
  "byte_17": 0.0032742155525238743,
  "byte_91": 0.01582537517053206,
  "byte_55": 0.006548431105047749,
  "byte_06": 0.0050477489768076395,
  "byte_82": 0.016234652114597545,
  "byte_09": 0.005184174624829468,
  "byte_c0": 0.00013642564802182812,
  "byte_40": 0.00859481582537517,
  "byte_52": 0.022100954979536153,
  "byte_05": 0.0024556616643929058,
  "byte_7f": 0.002592087312414734,
  "byte_73": 0.00218281036834925,
  "byte_65": 0.0031377899045020464,
  "byte_37": 0.0012278308321964529,
  "byte_6e": 0.0024556616643929058,
  "byte_00": 0.06084583901773533,
  "byte_a0": 0.009140518417462483,
  "byte_62": 0.006412005457025921,
  "byte_61": 0.048431105047748974,
  "byte_0b": 0.0015006821282401092,
  "byte_49": 0.0016371077762619372,
  "byte_56": 0.020600272851296043,
  "byte_5b": 0.03929058663028649,
  "byte_50": 0.029877216916780355,
  "byte_51": 0.008458390177353342,
  "byte_01": 0.03192360163710778,
  "byte_53": 0.0004092769440654843,
  "byte_4e": 0.0006821282401091405,
  "byte_20": 0.020327421555252388,
  "byte_92": 0.0049113233287858115,
  "byte_a8": 0.0005457025920873125,
  "byte_0c": 0.002319236016371078,
  "byte_64": 0.00286493860845839,
  "byte_11": 0.004638472032742156,
  "byte_44": 0.001091405184174625,
  "byte_c2": 0.0008185538881309686,
  "byte_de": 0.0005457025920873125,
  "byte_0d": 0.00286493860845839,
  "byte_ba": 0.00027285129604365623,
  "byte_86": 0.001091405184174625,
  "byte_e0": 0.001364256480218281,
  "byte_0e": 0.0019099590723055935,
  "byte_63": 0.009959072305593451,
  "byte_5c": 0.0012278308321964529,
  "byte_15": 0.023874488403819918,
  "byte_f7": 0.00013642564802182812,
  "byte_f0": 0.0006821282401091405,
  "byte_10": 0.007503410641200546,
  "byte_2b": 0.0008185538881309686,
  "byte_0f": 0.003956343792633015,
  "byte_3e": 0.0009549795361527968,
  "byte_d6": 0.00013642564802182812,
  "byte_70": 0.001364256480218281,
  "byte_ee": 0.0004092769440654843,
  "byte_13": 0.002592087312414734,
  "byte_78": 0.0004092769440654843,
  "byte_75": 0.0008185538881309686,
  "byte_14": 0.011323328785811732,
  "byte_27": 0.00013642564802182812,
  "byte_34": 0.006412005457025921,
  "byte_fb": 0.00027285129604365623,
  "byte_57": 0.025648021828103683,
  "byte_fd": 0.01296043656207367,
  "byte_02": 0.0165075034106412,
  "byte_85": 0.004092769440654843,
  "byte_94": 0.0032742155525238743,
  "byte_93": 0.003819918144611187,
  "byte_04": 0.012005457025920874,
  "byte_1f": 0.002728512960436562,
  "byte_84": 0.007776261937244202,
  "byte_83": 0.010641200545702592,
  "byte_8c": 0.0005457025920873125,
  "byte_88": 0.0006821282401091405,
  "byte_95": 0.002592087312414734,
  "byte_1e": 0.0006821282401091405,
  "byte_f2": 0.0009549795361527968,
  "byte_0a": 0.010641200545702592,
  "byte_33": 0.0047748976807639835,
  "byte_59": 0.0006821282401091405,
  "byte_67": 0.0016371077762619372,
  "byte_b6": 0.0006821282401091405,
  "byte_b3": 0.0012278308321964529,
  "byte_a7": 0.0012278308321964529,
  "byte_08": 0.005593451568894952,
  "byte_aa": 0.0020463847203274215,
  "byte_fc": 0.0015006821282401092,
  "byte_7e": 0.0008185538881309686,
  "byte_30": 0.001364256480218281,
  "byte_07": 0.0043656207366985,
  "byte_b1": 0.0004092769440654843,
  "byte_18": 0.002728512960436562,
  "byte_36": 0.001091405184174625,
  "byte_db": 0.0005457025920873125,
  "byte_f1": 0.0012278308321964529,
  "byte_2f": 0.00013642564802182812,
  "byte_22": 0.0005457025920873125,
  "byte_fe": 0.0016371077762619372,
  "byte_43": 0.0009549795361527968,
  "byte_bc": 0.0005457025920873125,
  "byte_9f": 0.00013642564802182812,
  "byte_ca": 0.0006821282401091405,
  "byte_ce": 0.00027285129604365623,
  "byte_eb": 0.00027285129604365623,
  "byte_d5": 0.0004092769440654843,
  "byte_a3": 0.00218281036834925,
  "byte_39": 0.0004092769440654843,
  "byte_f3": 0.0008185538881309686,
  "byte_ed": 0.0004092769440654843,
  "byte_7c": 0.0008185538881309686,
  "byte_35": 0.005593451568894952,
  "byte_f5": 0.001364256480218281,
  "byte_5e": 0.00027285129604365623,
  "byte_dd": 0.0009549795361527968,
  "byte_b7": 0.0004092769440654843,
  "byte_23": 0.0005457025920873125,
  "byte_b8": 0.00027285129604365623,
  "byte_72": 0.0015006821282401092,
  "byte_2d": 0.00027285129604365623,
  "byte_6c": 0.0008185538881309686,
  "byte_3b": 0.0005457025920873125,
  "byte_1d": 0.0005457025920873125,
  "byte_31": 0.0008185538881309686,
  "byte_3c": 0.0005457025920873125,
  "byte_e5": 0.0004092769440654843,
  "byte_32": 0.0008185538881309686,
  "byte_2c": 0.0005457025920873125,
  "byte_ec": 0.0005457025920873125,
  "byte_48": 0.0009549795361527968,
  "byte_b9": 0.0005457025920873125,
  "byte_a9": 0.0005457025920873125,
  "byte_5d": 0.0005457025920873125,
  "byte_42": 0.0030013642564802184,
  "byte_96": 0.0016371077762619372,
  "byte_68": 0.0016371077762619372,
  "byte_4a": 0.0004092769440654843,
  "byte_4c": 0.00013642564802182812,
  "byte_8a": 0.00027285129604365623,
  "byte_4b": 0.0004092769440654843,
  "byte_ad": 0.0008185538881309686,
  "byte_b2": 0.001091405184174625,
  "byte_b0": 0.0006821282401091405,
  "byte_d7": 0.0005457025920873125,
  "byte_c8": 0.0006821282401091405,
  "byte_c5": 0.0005457025920873125,
  "byte_5f": 0.0004092769440654843,
  "byte_e9": 0.0005457025920873125,
  "byte_3d": 0.0012278308321964529,
  "byte_79": 0.0005457025920873125,
  "byte_c6": 0.0004092769440654843,
  "byte_cc": 0.002319236016371078,
  "byte_9c": 0.0004092769440654843,
  "byte_8d": 0.0006821282401091405,
  "byte_a5": 0.0005457025920873125,
  "byte_cb": 0.0004092769440654843,
  "byte_99": 0.00027285129604365623,
  "byte_41": 0.0004092769440654843,
  "byte_d8": 0.0004092769440654843,
  "byte_9b": 0.0008185538881309686,
  "byte_bb": 0.00027285129604365623,
  "byte_6b": 0.00013642564802182812,
  "byte_b4": 0.0006821282401091405,
  "byte_d4": 0.0004092769440654843,
  "byte_8f": 0.0004092769440654843,
  "byte_b5": 0.00013642564802182812,
  "byte_7d": 0.00027285129604365623,
  "byte_bd": 0.0006821282401091405,
  "byte_69": 0.0024556616643929058,
  "byte_da": 0.00013642564802182812,
  "byte_46": 0.0004092769440654843,
  "byte_d9": 0.0004092769440654843,
  "byte_c4": 0.0005457025920873125,
  "byte_76": 0.00027285129604365623,
  "byte_fa": 0.0004092769440654843,
  "byte_e7": 0.00013642564802182812,
  "byte_24": 0.0017735334242837653,
  "byte_21": 0.00027285129604365623,
  "byte_47": 0.00013642564802182812,
  "byte_e3": 0.0004092769440654843,
  "byte_8b": 0.0006821282401091405,
  "byte_f8": 0.00027285129604365623,
  "byte_6a": 0.0005457025920873125,
  "byte_d3": 0.00013642564802182812,
  "byte_c1": 0.0006821282401091405,
  "byte_45": 0.0008185538881309686,
  "byte_71": 0.0005457025920873125,
  "byte_c3": 0.00013642564802182812,
  "byte_ea": 0.0006821282401091405,
  "byte_29": 0.0004092769440654843,
  "byte_1b": 0.001091405184174625,
  "byte_ab": 0.0019099590723055935,
  "byte_38": 0.00027285129604365623,
  "byte_7a": 0.0008185538881309686,
  "byte_25": 0.00027285129604365623,
  "byte_7b": 0.00013642564802182812,
  "byte_97": 0.0005457025920873125,
  "byte_bf": 0.00013642564802182812,
  "byte_1c": 0.0005457025920873125,
  "byte_4d": 0.0005457025920873125,
  "byte_e6": 0.0005457025920873125,
  "byte_77": 0.00013642564802182812,
  "byte_8e": 0.00027285129604365623,
  "byte_d1": 0.0005457025920873125,
  "byte_d0": 0.0004092769440654843,
  "byte_89": 0.00013642564802182812,
  "byte_a1": 0.0008185538881309686,
  "byte_cd": 0.0004092769440654843,
  "byte_f4": 0.00013642564802182812,
  "byte_4f": 0.001091405184174625,
  "byte_3f": 0.00027285129604365623,
  "byte_87": 0.001091405184174625,
  "byte_e2": 0.0004092769440654843,
  "byte_28": 0.0004092769440654843,
  "byte_5a": 0.0005457025920873125,
  "byte_ef": 0.0004092769440654843,
  "byte_dc": 0.00027285129604365623,
  "byte_9d": 0.0004092769440654843,
  "byte_cf": 0.00027285129604365623,
  "byte_a2": 0.00027285129604365623,
  "byte_6d": 0.00027285129604365623,
  "byte_c7": 0.00013642564802182812,
  "byte_ae": 0.00013642564802182812,
  "byte_58": 0.00027285129604365623,
  "byte_a4": 0.00013642564802182812,
  "byte_e4": 0.00013642564802182812,
  "byte_6f": 0.0004092769440654843,
  "byte_74": 0.0008185538881309686,
  "byte_2e": 0.00013642564802182812,
  "byte_be": 0.00013642564802182812,
  "byte_ac": 0.00013642564802182812,
  "byte_af": 0.00013642564802182812,
  "byte_98": 0.00013642564802182812,
  "num_nodes": 2,
  "num_edges": 2,
  "avg_degree": 2.0,
  "density": 1.0,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 3,
  "event_nums": 0,
  "creation_block": 6835819,
  "creation_timestamp": 1544088464,
  "life_time": 11970.0,
  "duration_seconds": 171839.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 2,
  "num_sellers": 2,
  "num_creator_transfers": 1,
  "buy_amt": 0.0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.00025060563027316015,
  "avg_gas_limit": 735826.6666666666,
  "std_gas_limit": 1011638.4948446533,
  "avg_gas_used": 726676.0,
  "std_gas_used": 1017984.729969299,
  "avg_gas_price": 5666666666.666667,
  "std_gas_price": 4921607686.744467,
  "destructcontract_num": 1,
  "timeline_sequence": [
    [
      6835819,
      1544088464,
      0,
      30,
      0,
      2166302,
      12000000000,
      0,
      1,
      3335790,
      2166302,
      16256288
    ],
    [
      6847789,
      1544260303,
      3,
      128,
      0,
      41178,
      5000000000,
      0,
      1,
      7922302,
      13726,
      16244318
    ],
    [
      6847789,
      1544260303,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.25; /*\n\n___________________________________________________________________\n  _      _                                        ______           \n  |  |  /          /                                /              \n--|-/|-/-----__---/----__----__---_--_----__-------/-------__------\n  |/ |/    /___) /   /   ' /   ) / /  ) /___)     /      /   )     \n__/__|____(___ _/___(___ _(___/_/_/__/_(___ _____/______(___/__o_o_\n\n\n .----------------.  .----------------.  .----------------.  .----------------.  .-----------------.\n| .--------------. || .--------------. || .--------------. || .--------------. || .--------------. |\n| |    _______   | || |  _________   | || |   _______    | || |  _________   | || | ____  _____  | |\n| |   /  ___  |  | || | |_   ___  |  | || |  |  ___  |   | || | |_   ___  |  | || ||_   \\|_   _| | |\n| |  |  (__ \\_|  | || |   | |_  \\_|  | || |  |_/  / /    | || |   | |_  \\_|  | || |  |   \\ | |   | |\n| |   '.___`-.   | || |   |  _|  _   | || |      / /     | || |   |  _|  _   | || |  | |\\ \\| |   | |\n| |  |`\\____) |  | || |  _| |___/ |  | || |     / /      | || |  _| |___/ |  | || | _| |_\\   |_  | |\n| |  |_______.'  | || | |_________|  | || |    /_/       | || | |_________|  | || ||_____|\\____| | |\n| |              | || |              | || |              | || |              | || |              | |\n| '--------------' || '--------------' || '--------------' || '--------------' || '--------------' |\n '----------------'  '----------------'  '----------------'  '----------------'  '----------------' \n\n\n// ----------------------------------------------------------------------------\n\n// Name        : se7en\n// Symbol      : S7N\n// Copyright (c) 2018 XSe7en Social Media Inc. ( https://se7en.social )\n// Contract written by EtherAuthority ( https://EtherAuthority.io )\n// ----------------------------------------------------------------------------\n   \n*/ \n\n//*******************************************************************//\n//------------------------ SafeMath Library -------------------------//\n//*******************************************************************//\n    /**\n     * @title SafeMath\n     * @dev Math operations with safety checks that throw on error\n     */\n    library SafeMath {\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n      }\n    \n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n      }\n    \n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n      }\n    \n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n      }\n    }\n\n\n//*******************************************************************//\n//------------------ Contract to Manage Ownership -------------------//\n//*******************************************************************//\n    \n    contract owned {\n        address public owner;\n        \n         constructor () public {\n            owner = msg.sender;\n        }\n    \n        modifier onlyOwner {\n            require(msg.sender == owner);\n            _;\n        }\n    \n        function transferOwnership(address newOwner) onlyOwner public {\n            owner = newOwner;\n        }\n    }\n    \n    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes  _extraData) external; }\n\n\n//***************************************************************//\n//------------------ ERC20 Standard Template -------------------//\n//***************************************************************//\n    \n    contract TokenERC20 {\n        // Public variables of the token\n        using SafeMath for uint256;\n        string public name;\n        string public symbol;\n        uint8 public decimals = 18;\n        uint256 public totalSupply;\n        uint256 public reservedForICO;\n        bool public safeguard = false;  //putting safeguard on will halt all non-owner functions\n    \n        // This creates an array with all balances\n        mapping (address => uint256) public balanceOf;\n        mapping (address => mapping (address => uint256)) public allowance;\n    \n        // This generates a public event on the blockchain that will notify clients\n        event Transfer(address indexed from, address indexed to, uint256 value);\n    \n        // This notifies clients about the amount burnt\n        event Burn(address indexed from, uint256 value);\n    \n        /**\n         * Constructor function\n         *\n         * Initializes contract with initial supply tokens to the creator of the contract\n         */\n        constructor (\n            uint256 initialSupply,\n            uint256 allocatedForICO,\n            string memory tokenName,\n            string memory tokenSymbol\n        ) public {\n            totalSupply = initialSupply.mul(1 ether);   \n            reservedForICO = allocatedForICO.mul(1 ether);  \n            balanceOf[address(this)] = reservedForICO;      \n            balanceOf[msg.sender]=totalSupply.sub(reservedForICO); \n            name = tokenName;                               \n            symbol = tokenSymbol;                           \n        }\n    \n        /**\n         * Internal transfer, can be called only by this contract\n         */\n        function _transfer(address _from, address _to, uint _value) internal {\n            require(!safeguard);\n            // Prevent transfer to 0x0 address. Use burn() instead\n            require(_to != address(0x0));\n            // Check if the sender has enough balance\n            require(balanceOf[_from] >= _value);\n            // Check for overflows\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n            // Save this for an assertion in the future\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n            // Subtract from the sender\n            balanceOf[_from] = balanceOf[_from].sub(_value);\n            balanceOf[_to] = balanceOf[_to].add(_value);\n            emit Transfer(_from, _to, _value);\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n        }\n    \n        /**\n         * Transfer tokens\n         *\n         * Send `_value` tokens to `_to` from your account\n         *\n         * @param _to The address of the recipient\n         * @param _value the amount to send\n         */\n        function transfer(address _to, uint256 _value) public returns (bool success) {\n            _transfer(msg.sender, _to, _value);\n            return true;\n        }\n    \n        /**\n         * Transfer tokens from other address\n         *\n         * Send `_value` tokens to `_to` in behalf of `_from`\n         *\n         * @param _from The address of the sender\n         * @param _to The address of the recipient\n         * @param _value the amount to send\n         */\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(_value <= allowance[_from][msg.sender]);    \n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n            _transfer(_from, _to, _value);\n            return true;\n        }\n    \n        /**\n         * Set allowance for other address\n         *\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n         *\n         * @param _spender The address authorized to spend\n         * @param _value the max amount they can spend\n         */\n        function approve(address _spender, uint256 _value) public\n            returns (bool success) {\n            require(!safeguard);\n            allowance[msg.sender][_spender] = _value;\n            return true;\n        }\n    \n        /**\n         * Set allowance for other address and notify\n         *\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n         *\n         * @param _spender The address authorized to spend\n         * @param _value the max amount they can spend\n         * @param _extraData some extra information to send to the approved contract\n         */\n        function approveAndCall(address _spender, uint256 _value, bytes memory _extraData)\n            public\n            returns (bool success) {\n            require(!safeguard);\n            tokenRecipient spender = tokenRecipient(_spender);\n            if (approve(_spender, _value)) {\n                spender.receiveApproval(msg.sender, _value, address(this), _extraData);\n                return true;\n            }\n        }\n    \n        /**\n         * Destroy tokens\n         *\n         * Remove `_value` tokens from the system irreversibly\n         *\n         * @param _value the amount of tokens to burn\n         */\n        function burn(uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(balanceOf[msg.sender] >= _value);   \n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            \n            totalSupply = totalSupply.sub(_value);                      \n            emit Burn(msg.sender, _value);\n            return true;\n        }\n    \n        /**\n         * Destroy tokens from other account\n         *\n         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n         *\n         * @param _from the address of the sender\n         * @param _value the amount of tokens to burn\n         */\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n            require(!safeguard);\n            require(balanceOf[_from] >= _value);                \n            require(_value <= allowance[_from][msg.sender]);    \n            balanceOf[_from] = balanceOf[_from].sub(_value);                         \n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             \n            totalSupply = totalSupply.sub(_value);                              \n            emit  Burn(_from, _value);\n            return true;\n        }\n        \n    }\n    \n//************************************************************************//\n//---------------------  SE7EN MAIN CODE STARTS HERE ---------------------//\n//************************************************************************//\n    \n    contract se7en is owned, TokenERC20 {\n        \n        /*************************************/\n        /*  User whitelisting functionality  */\n        /*************************************/\n        bool public whitelistingStatus = false;\n        mapping (address => bool) public whitelisted;\n        \n        /**\n         * Change whitelisting status on or off\n         *\n         * When whitelisting is true, then crowdsale will only accept investors who are whitelisted.\n         */\n        function changeWhitelistingStatus() onlyOwner public{\n            if (whitelistingStatus == false){\n                whitelistingStatus = true;\n            }\n            else{\n                whitelistingStatus = false;    \n            }\n        }\n        \n        /**\n         * Whitelist any user address - only Owner can do this\n         *\n         * It will add user address to whitelisted mapping\n         */\n        function whitelistUser(address userAddress) onlyOwner public{\n            require(whitelistingStatus == true);\n            require(userAddress != address(0x0));\n            whitelisted[userAddress] = true;\n        }\n        \n        /**\n         * Whitelist Many user address at once - only Owner can do this\n         * maximum of 150 addresses to prevent block gas limit max-out and DoS attack\n         * this will add user address in whitelisted mapping\n         */\n        function whitelistManyUsers(address[] memory userAddresses) onlyOwner public{\n            require(whitelistingStatus == true);\n            uint256 addressCount = userAddresses.length;\n            require(addressCount <= 150);\n            for(uint256 i = 0; i < addressCount; i++){\n                require(userAddresses[i] != address(0x0));\n                whitelisted[userAddresses[i]] = true;\n            }\n        }\n        \n        \n        \n        /********************************/\n        /* Code for the ERC20 S7N Token */\n        /********************************/\n    \n        /* Public variables of the token */\n        string private tokenName = \"se7en\";\n        string private tokenSymbol = \"S7N\";\n        uint256 private initialSupply = 74243687134;\n        uint256 private allocatedForICO = 7424368713;\n        \n\n        mapping (address => bool) public frozenAccount;\n        \n        event FrozenFunds(address target, bool frozen);\n    \n        constructor () TokenERC20(initialSupply, allocatedForICO, tokenName, tokenSymbol) public {}\n\n        function _transfer(address _from, address _to, uint _value) internal {\n            require(!safeguard);\n            require (_to != address(0x0));                      \n            require (balanceOf[_from] >= _value);               \n            require (balanceOf[_to].add(_value) >= balanceOf[_to]); \n            require(!frozenAccount[_from]);                     \n            require(!frozenAccount[_to]);                       \n            balanceOf[_from] = balanceOf[_from].sub(_value);   \n            balanceOf[_to] = balanceOf[_to].add(_value);        \n            emit Transfer(_from, _to, _value);\n        }\n        \n        /// @notice Create `mintedAmount` tokens and send it to `target`\n        /// @param target Address to receive the tokens\n        /// @param mintedAmount the amount of tokens it will receive\n        function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n            balanceOf[target] = balanceOf[target].add(mintedAmount);\n            totalSupply = totalSupply.add(mintedAmount);\n            emit Transfer(address(0x0), address(this), mintedAmount);\n            emit Transfer(address(this), target, mintedAmount);\n        }\n\n        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n        /// @param target Address to be frozen\n        /// @param freeze either to freeze it or not\n        function freezeAccount(address target, bool freeze) onlyOwner public {\n                frozenAccount[target] = freeze;\n            emit  FrozenFunds(target, freeze);\n        }\n\n        /******************************/\n        /* Code for the S7N Crowdsale */\n        /******************************/\n        \n        uint256 public datePreSale   = 1544943600 ;      // 16 Dec 2018 07:00:00 - GMT\n        uint256 public dateIcoPhase1 = 1546326000 ;      // 01 Jan 2019 07:00:00 - GMT\n        uint256 public dateIcoPhase2 = 1547622000 ;      // 16 Jan 2019 07:00:00 - GMT\n        uint256 public dateIcoPhase3 = 1549004400 ;      // 01 Feb 2019 07:00:00 - GMT\n        uint256 public dateIcoEnd    = 1551398399 ;      // 28 Feb 2019 23:59:59 - GMT\n        uint256 public exchangeRate  = 10000;             // 1 ETH = 10000 Tokens\n        uint256 public tokensSold    = 0;                // how many tokens sold through crowdsale              \n  \n        function () payable external {\n            require(!safeguard);\n            require(!frozenAccount[msg.sender]);\n            require(datePreSale < now && dateIcoEnd > now);\n            if(whitelistingStatus == true) { require(whitelisted[msg.sender]); }\n            if(datePreSale < now && dateIcoPhase1 > now){ require(msg.value >= (0.50 ether)); }\n            // calculate token amount to be sent\n            uint256 token = msg.value.mul(exchangeRate);                        \n            uint256 finalTokens = token.add(calculatePurchaseBonus(token));     \n            tokensSold = tokensSold.add(finalTokens);\n            _transfer(address(this), msg.sender, finalTokens);                  \n            forwardEherToOwner();                                               \n        }\n\n\n        function calculatePurchaseBonus(uint256 token) internal view returns(uint256){\n            if(datePreSale < now && now < dateIcoPhase1 ){\n                return token.mul(50).div(100);  //50% bonus in pre sale\n            }\n            else if(dateIcoPhase1 < now && now < dateIcoPhase2 ){\n                return token.mul(25).div(100);  //25% bonus in ICO phase 1\n            }\n            else if(dateIcoPhase2 < now && now < dateIcoPhase3 ){\n                return token.mul(10).div(100);  //10% bonus in ICO phase 2\n            }\n            else if(dateIcoPhase3 < now && now < dateIcoEnd ){\n                return token.mul(5).div(100);  //5% bonus in ICO phase 3\n            }\n            else{\n                return 0;                      //NO BONUS\n            }\n        }\n\n        function forwardEherToOwner() internal {\n            address(owner).transfer(msg.value); \n        }\n\n        function updateCrowdsale(uint256 datePreSaleNew, uint256 dateIcoPhase1New, uint256 dateIcoPhase2New, uint256 dateIcoPhase3New, uint256 dateIcoEndNew) onlyOwner public {\n            require(datePreSaleNew < dateIcoPhase1New && dateIcoPhase1New < dateIcoPhase2New);\n            require(dateIcoPhase2New < dateIcoPhase3New && dateIcoPhase3New < dateIcoEnd);\n            datePreSale   = datePreSaleNew;\n            dateIcoPhase1 = dateIcoPhase1New;\n            dateIcoPhase2 = dateIcoPhase2New;\n            dateIcoPhase3 = dateIcoPhase3New;\n            dateIcoEnd    = dateIcoEndNew;\n        }\n        \n\n        function stopICO() onlyOwner public{\n            dateIcoEnd = 0;\n        }\n        \n\n        function icoStatus() public view returns(string memory){\n            if(datePreSale > now ){\n                return \"Pre sale has not started yet\";\n            }\n            else if(datePreSale < now && now < dateIcoPhase1){\n                return \"Pre sale is running\";\n            }\n            else if(dateIcoPhase1 < now && now < dateIcoPhase2){\n                return \"ICO phase 1 is running\";\n            }\n            else if(dateIcoPhase2 < now && now < dateIcoPhase3){\n                return \"ICO phase 2 is running\";\n            }\n            else if(dateIcoPhase3 < now && now < dateIcoEnd){\n                return \"ICO phase 3 is running\";\n            }\n            else{\n                return \"ICO is not active\";\n            }\n        }\n        \n        function setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {\n            exchangeRate=newExchangeRate;\n        }\n        \n        function manualWithdrawToken(uint256 _amount) onlyOwner public {\n            uint256 tokenAmount = _amount.mul(1 ether);\n            _transfer(address(this), msg.sender, tokenAmount);\n        }\n          \n        function manualWithdrawEther()onlyOwner public{\n            address(owner).transfer(address(this).balance);\n        }\n        \n        function destructContract()onlyOwner public{\n            selfdestruct(owner);\n        }\n        \n        /**\n         * Change safeguard status on or off\n         *\n         * When safeguard is true, all the non-owner functions are unavailable.\n         * When safeguard is false, all the functions will resume!\n         */\n        function changeSafeguardStatus() onlyOwner public{\n            if (safeguard == false){\n                safeguard = true;\n            }\n            else{\n                safeguard = false;    \n            }\n        }\n        \n        \n        /********************************/\n        /* Code for the Air drop of S7N */\n        /********************************/\n        \n        /**\n         * Run an Air-Drop\n         *\n         * It requires an array of all the addresses and amount of tokens to distribute\n         * It will only process first 150 recipients. That limit is fixed to prevent gas limit\n         */\n        function airdrop(address[] memory recipients,uint tokenAmount) public onlyOwner {\n            uint256 addressCount = recipients.length;\n            require(addressCount <= 150);\n            for(uint i = 0; i < addressCount; i++)\n            {\n                \n                  _transfer(address(this), recipients[i], tokenAmount.mul(1 ether));\n            }\n        }\n}"
}