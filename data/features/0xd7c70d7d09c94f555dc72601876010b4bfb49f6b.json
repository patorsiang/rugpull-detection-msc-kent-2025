{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH3 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI DUP1 PUSH4 EQ PUSH3 JUMPI JUMPDEST PUSH3 PUSH3 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH3 JUMP JUMPDEST PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH3 JUMP JUMPDEST PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 CALLDATALOAD PUSH3 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 CALLDATALOAD PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 CALLDATALOAD PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 CALLDATALOAD PUSH1 DUP2 DUP2 ADD CALLDATALOAD PUSH1 DUP2 DUP2 MUL DUP6 DUP2 ADD DUP3 ADD SWAP1 SWAP7 MSTORE DUP2 DUP6 MSTORE PUSH3 SWAP6 PUSH1 PUSH1 PUSH1 EXP SUB DUP5 CALLDATALOAD DUP2 AND SWAP7 PUSH1 DUP1 CALLDATALOAD SWAP8 PUSH1 CALLDATALOAD SWAP8 PUSH1 CALLDATALOAD SWAP1 SWAP5 AND SWAP7 CALLDATASIZE SWAP7 SWAP5 SWAP6 PUSH1 SWAP6 SWAP3 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP2 DUP3 SWAP2 SWAP1 DUP6 ADD SWAP1 DUP5 SWAP1 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP POP DUP5 CALLDATALOAD SWAP6 POP POP POP PUSH1 DUP4 ADD CALLDATALOAD SWAP3 PUSH1 ADD CALLDATALOAD PUSH1 AND SWAP2 POP PUSH3 SWAP1 POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD SWAP1 PUSH1 CALLDATALOAD AND PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 CALLDATALOAD PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 CALLDATALOAD ISZERO ISZERO PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH3 JUMP JUMPDEST PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 CALLDATALOAD PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 CALLDATALOAD PUSH3 JUMP JUMPDEST PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 CALLDATALOAD ISZERO ISZERO PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH3 JUMP JUMPDEST PUSH3 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH3 PUSH3 JUMP JUMPDEST PUSH3 CALLER PUSH3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 AND ISZERO PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST PUSH1 SLOAD PUSH3 SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP LT ISZERO PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST PUSH1 SLOAD TIMESTAMP GT ISZERO DUP1 ISZERO PUSH3 JUMPI POP PUSH3 PUSH3 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH3 JUMPI POP PUSH1 PUSH3 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST DUP1 PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH4 SWAP1 DIV PUSH1 AND ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH3 DUP4 DUP4 PUSH3 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP8 PUSH1 MLOAD PUSH1 ADD DUP1 DUP3 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD PUSH1 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 MSTORE PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH3 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 SWAP4 DUP5 SUB PUSH2 EXP PUSH1 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 MLOAD SWAP2 SWAP1 SWAP4 ADD SWAP5 POP SWAP2 SWAP3 POP POP DUP1 DUP4 SUB DUP2 PUSH1 DUP7 GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE PUSH1 DUP1 DUP4 ADD DUP1 DUP6 MSTORE DUP7 SWAP1 MSTORE PUSH1 DUP12 AND DUP4 DUP6 ADD MSTORE PUSH1 DUP4 ADD DUP11 SWAP1 MSTORE PUSH1 DUP4 ADD DUP10 SWAP1 MSTORE SWAP3 MLOAD SWAP5 SWAP7 POP PUSH1 PUSH1 EXP SWAP1 SWAP4 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP4 PUSH1 SWAP4 PUSH1 DUP1 DUP5 ADD SWAP5 SWAP4 PUSH1 NOT DUP5 ADD SWAP4 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP2 DUP7 GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP PUSH1 PUSH1 MLOAD SUB MLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH3 DUP8 DUP8 PUSH3 JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 PUSH1 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 DUP4 ADD SLOAD PUSH1 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP4 POP SWAP2 SWAP1 DUP5 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH3 PUSH3 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ DUP1 PUSH3 JUMPI POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE SWAP1 MLOAD PUSH3 SWAP3 PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD DUP7 SWAP1 PUSH1 AND PUSH1 EXP PUSH4 PUSH3 AND JUMP JUMPDEST SWAP3 POP PUSH3 DUP5 DUP5 PUSH4 PUSH3 AND JUMP JUMPDEST SWAP2 POP PUSH3 DUP7 DUP5 DUP5 PUSH3 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH3 PUSH3 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ DUP1 PUSH3 JUMPI POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 TIMESTAMP LT DUP1 ISZERO PUSH3 JUMPI POP DUP2 PUSH1 SLOAD LT JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH3 PUSH3 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 TIMESTAMP LT DUP1 ISZERO PUSH3 JUMPI POP PUSH1 SLOAD DUP3 LT JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 SWAP1 SSTORE PUSH3 PUSH1 PUSH1 DUP4 AND PUSH1 EXP PUSH4 PUSH3 AND JUMP JUMPDEST PUSH1 SSTORE DUP3 DUP2 DUP10 DUP8 PUSH3 PUSH3 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 SWAP1 SWAP3 AND PUSH1 DUP5 ADD MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND PUSH1 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 AND PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 PUSH1 CREATE DUP1 ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND OR DUP1 DUP3 SSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE MLOAD SWAP3 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP4 POP PUSH4 SWAP3 POP PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP4 POP PUSH4 SWAP3 POP PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP15 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP1 MLOAD SWAP3 SWAP1 SWAP2 AND SWAP4 POP PUSH4 SWAP3 POP PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD DUP8 SWAP1 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP4 POP PUSH4 SWAP3 POP PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP4 AND SWAP5 POP PUSH4 SWAP4 POP PUSH1 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP PUSH1 DUP4 SWAP1 SSTORE POP PUSH3 DUP9 DUP9 DUP9 PUSH3 JUMP JUMPDEST PUSH3 DUP5 PUSH3 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH3 PUSH3 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP5 DUP5 PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH3 PUSH3 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH3 SWAP2 PUSH4 PUSH3 AND JUMP JUMPDEST SWAP3 POP PUSH3 PUSH1 PUSH3 DUP6 PUSH1 PUSH4 PUSH3 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH3 AND JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE MLOAD SWAP3 SWAP5 POP PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 SLOAD PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 DUP4 AND PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD DUP9 SWAP1 MSTORE SWAP1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP4 POP PUSH4 SWAP3 POP PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP4 AND SWAP5 POP PUSH4 SWAP4 POP PUSH1 DUP1 DUP3 ADD SWAP4 SWAP2 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE ADDRESS PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP4 POP PUSH4 SWAP3 POP DUP4 SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE MLOAD PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH3 PUSH3 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH3 PUSH3 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ DUP1 PUSH3 JUMPI POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 EXP PUSH1 MUL NOT AND PUSH1 PUSH1 EXP OR SWAP1 SSTORE PUSH1 DUP1 MLOAD PUSH1 DUP2 MSTORE SWAP1 MLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH3 PUSH3 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ DUP1 PUSH3 JUMPI POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 LT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH2 NOT AND PUSH2 DUP4 ISZERO ISZERO DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 DUP1 MLOAD PUSH1 SWAP3 DUP5 DIV DUP4 AND ISZERO ISZERO DUP2 MSTORE PUSH4 DUP5 DIV SWAP1 SWAP3 AND ISZERO ISZERO PUSH1 DUP4 ADD MSTORE PUSH1 PUSH1 EXP SWAP1 SWAP3 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 SWAP1 DUP3 SWAP1 SUB ADD SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH3 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH3 PUSH3 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ DUP1 PUSH3 JUMPI POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH3 CALLER DUP3 PUSH3 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH3 DUP3 PUSH3 JUMP JUMPDEST PUSH1 ADD SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 EXP PUSH1 MUL NOT AND DUP2 SSTORE PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH3 PUSH3 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ DUP1 PUSH3 JUMPI POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH4 SWAP1 DIV PUSH1 AND ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 AND ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH3 DUP2 PUSH1 PUSH3 JUMP JUMPDEST PUSH1 SLOAD PUSH4 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH3 PUSH3 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ DUP1 PUSH3 JUMPI POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH3 DUP4 DUP4 DUP7 PUSH1 PUSH3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH4 NOT AND PUSH4 DUP5 ISZERO ISZERO DUP2 MUL SWAP2 SWAP1 SWAP2 OR PUSH1 PUSH1 EXP PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 EXP PUSH1 PUSH1 PUSH1 EXP SUB DUP6 DUP2 AND DUP3 MUL SWAP3 SWAP1 SWAP3 OR SWAP4 DUP5 SWAP1 SSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP8 DIV DUP2 AND ISZERO ISZERO DUP3 MSTORE SWAP5 DUP7 DIV SWAP1 SWAP5 AND ISZERO ISZERO PUSH1 DUP6 ADD MSTORE SWAP4 DIV AND DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH3 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 PUSH1 SWAP1 DUP3 SWAP1 SUB ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH3 CALLER DUP6 DUP6 DUP6 DUP6 PUSH3 JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD LT ISZERO SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH3 PUSH3 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ DUP1 PUSH3 JUMPI POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH3 PUSH3 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ ISZERO PUSH3 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH3 CALLVALUE DUP7 PUSH3 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP CALLVALUE DUP4 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE JUMPDEST PUSH3 DUP3 DUP5 DUP8 DUP8 PUSH3 JUMP JUMPDEST PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP1 DUP5 ISZERO PUSH2 MUL SWAP1 DUP6 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH3 PUSH3 CALLVALUE DUP6 PUSH4 PUSH3 AND JUMP JUMPDEST CALLER PUSH3 JUMP JUMPDEST PUSH1 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH3 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH3 PUSH3 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH3 DUP5 PUSH3 JUMP JUMPDEST DUP3 ISZERO DUP1 ISZERO SWAP1 PUSH3 JUMPI POP DUP2 ISZERO ISZERO JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 TIMESTAMP LT DUP1 ISZERO PUSH3 JUMPI POP DUP2 DUP4 LT JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SSTORE POP PUSH1 DUP1 SLOAD PUSH3 NOT AND PUSH3 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH3 PUSH3 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP10 MLOAD DUP2 ISZERO ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST MOD ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP10 PUSH1 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD GT PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP9 MLOAD PUSH3 SWAP1 PUSH1 PUSH4 PUSH3 AND JUMP JUMPDEST SWAP8 POP PUSH1 SWAP6 POP JUMPDEST DUP8 DUP7 LT ISZERO PUSH3 JUMPI PUSH3 DUP7 PUSH1 PUSH4 PUSH3 AND JUMP JUMPDEST SWAP5 POP DUP9 PUSH3 DUP7 PUSH1 PUSH4 PUSH3 AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD SWAP4 POP DUP9 PUSH3 DUP7 PUSH1 PUSH4 PUSH3 AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD SWAP3 POP DUP9 PUSH3 DUP7 PUSH1 PUSH4 PUSH3 AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MLOAD SWAP2 POP DUP9 PUSH3 DUP7 PUSH1 PUSH4 PUSH3 AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD SWAP1 POP DUP2 DUP4 LT DUP1 ISZERO PUSH3 JUMPI POP DUP2 TIMESTAMP LT JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP6 ISZERO DUP1 PUSH3 JUMPI POP DUP7 PUSH1 ADD MLOAD DUP3 LT ISZERO DUP1 ISZERO PUSH3 JUMPI POP DUP7 MLOAD DUP5 GT JUMPDEST DUP1 PUSH3 JUMPI POP DUP7 PUSH1 ADD MLOAD DUP3 GT DUP1 ISZERO PUSH3 JUMPI POP DUP7 MLOAD DUP5 LT ISZERO JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP2 ADD DUP3 MSTORE DUP6 DUP2 MSTORE PUSH1 DUP2 ADD DUP6 DUP2 MSTORE SWAP2 DUP2 ADD DUP5 DUP2 MSTORE PUSH1 DUP3 ADD DUP5 DUP2 MSTORE PUSH1 DUP1 SLOAD PUSH1 DUP1 DUP3 ADD DUP4 SSTORE PUSH1 SWAP3 SWAP1 SWAP3 MSTORE DUP5 MLOAD PUSH32 PUSH1 SWAP1 SWAP3 MUL SWAP2 DUP3 ADD SSTORE SWAP5 MLOAD PUSH32 DUP7 ADD SSTORE SWAP2 MLOAD PUSH32 DUP6 ADD SSTORE MLOAD PUSH32 SWAP1 SWAP4 ADD SWAP3 SWAP1 SWAP3 SSTORE SWAP8 POP SWAP6 SWAP1 SWAP6 ADD SWAP5 PUSH3 JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH3 PUSH3 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH1 MLOAD PUSH32 SWAP1 PUSH1 SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 DUP1 JUMPDEST PUSH1 SLOAD DUP2 LT ISZERO PUSH3 JUMPI TIMESTAMP PUSH1 DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD GT ISZERO DUP1 ISZERO PUSH3 JUMPI POP PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD TIMESTAMP LT JUMPDEST DUP1 ISZERO PUSH3 JUMPI POP PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 ADD SLOAD DUP4 LT JUMPDEST ISZERO PUSH3 JUMPI PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD SWAP2 POP PUSH3 JUMP JUMPDEST PUSH1 ADD PUSH3 JUMP JUMPDEST PUSH1 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH3 SWAP1 DUP5 PUSH4 PUSH3 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SWAP1 MSTORE SHA3 SLOAD PUSH3 SWAP1 DUP6 PUSH4 PUSH3 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH3 SWAP1 DUP5 PUSH4 PUSH3 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH3 SWAP1 DUP6 PUSH4 PUSH3 AND JUMP JUMPDEST PUSH1 SSTORE PUSH3 DUP3 DUP6 PUSH3 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND DUP2 MSTORE PUSH1 DUP2 ADD DUP6 SWAP1 MSTORE DUP1 DUP3 ADD DUP7 SWAP1 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP3 ADD MSTORE SWAP1 MLOAD PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH3 PUSH2 PUSH3 PUSH1 SLOAD PUSH3 PUSH1 SLOAD PUSH3 JUMP JUMPDEST SWAP1 PUSH4 PUSH3 AND JUMP JUMPDEST SWAP2 POP PUSH3 DUP3 PUSH3 PUSH8 PUSH3 PUSH1 SLOAD PUSH1 SLOAD PUSH3 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH3 DUP2 DUP8 PUSH4 PUSH3 AND JUMP JUMPDEST SWAP4 POP DUP1 DUP7 LT ISZERO PUSH3 JUMPI PUSH3 PUSH8 PUSH3 DUP5 DUP10 PUSH4 PUSH3 AND JUMP JUMPDEST SWAP3 POP PUSH3 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH3 SWAP2 PUSH4 PUSH3 AND JUMP JUMPDEST SWAP3 POP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP10 DUP2 AND PUSH1 DUP4 ADD MSTORE SWAP2 MLOAD PUSH3 SWAP4 DUP9 SWAP4 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD SWAP1 PUSH4 PUSH3 AND JUMP JUMPDEST LT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 DUP3 GT ISZERO PUSH3 JUMPI PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND SWAP1 DUP4 ISZERO PUSH2 MUL SWAP1 DUP5 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 DUP2 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD DUP6 SWAP1 MSTORE SWAP2 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP4 ADD SWAP3 PUSH1 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH3 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 DUP4 LT PUSH3 JUMPI DUP2 PUSH3 JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 MLOAD PUSH2 DUP1 PUSH3 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE POP SWAP1 JUMP STOP PUSH1 DUP1 SLOAD PUSH1 PUSH1 EXP PUSH1 MUL NOT AND SWAP1 SSTORE PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH1 PUSH1 SWAP1 DUP2 SSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SWAP1 MSTORE PUSH32 PUSH1 SWAP1 DUP2 MSTORE PUSH3 SWAP2 PUSH1 SWAP2 SWAP1 PUSH3 JUMP JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP1 DUP3 MSTORE PUSH32 PUSH1 SWAP1 SWAP3 ADD SWAP2 DUP3 MSTORE PUSH3 SWAP2 PUSH1 SWAP2 PUSH3 JUMP JUMPDEST POP CALLVALUE DUP1 ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 MLOAD PUSH1 DUP1 PUSH3 DUP4 CODECOPY DUP2 ADD PUSH1 SWAP1 DUP2 MSTORE DUP2 MLOAD PUSH1 DUP4 ADD MLOAD SWAP2 DUP4 ADD MLOAD PUSH1 SWAP1 SWAP4 ADD MLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND CALLER OR SWAP1 SSTORE SWAP1 SWAP3 SWAP1 DUP2 DUP5 DUP2 PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 DUP1 PUSH3 JUMPI POP DUP3 ISZERO ISZERO JUMPDEST ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 GT ISZERO PUSH3 JUMPI PUSH3 DUP3 DUP5 PUSH5 PUSH3 DUP2 MUL DIV JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 SWAP1 POP DUP2 PUSH5 PUSH3 DUP2 MUL DIV JUMP JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH2 MUL PUSH2 PUSH1 PUSH1 EXP SUB NOT PUSH1 SWAP1 SWAP6 AND PUSH1 NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP4 SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE POP PUSH3 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD PUSH3 SWAP1 DUP3 PUSH5 PUSH3 PUSH3 DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 SWAP1 DUP2 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH3 SWAP1 DUP3 PUSH5 PUSH3 PUSH3 DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND SWAP2 PUSH1 SWAP2 PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH3 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH3 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH3 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH3 JUMP JUMPDEST POP PUSH3 SWAP3 SWAP2 POP PUSH3 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH3 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 DUP1 PUSH3 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP2 ISZERO DUP1 PUSH2 JUMPI POP CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP7 SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP5 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 CALLER DUP3 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ DUP1 PUSH2 JUMPI POP PUSH1 DUP2 PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE CALLER PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 ADD DUP6 SWAP1 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP4 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH2 CALLER DUP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 DUP3 ADD DUP5 SWAP1 MSTORE DUP1 MLOAD CALLER SWAP3 PUSH32 SWAP3 SWAP1 DUP3 SWAP1 SUB ADD SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP5 DUP5 PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE PUSH2 PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD ISZERO ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 CALLER SWAP1 PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD PUSH2 DUP2 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP11 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH1 DUP1 MLOAD PUSH1 PUSH1 EXP PUSH4 MUL DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP1 SWAP2 AND SWAP2 PUSH4 SWAP2 PUSH1 DUP1 DUP3 ADD SWAP3 PUSH1 SWAP3 SWAP1 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD DUP1 DUP4 GT ISZERO PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 SHA3 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SLOAD SWAP4 DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD SWAP1 SWAP2 SWAP1 PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 DUP2 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP8 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP9 AND SWAP4 SWAP2 SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SWAP1 DUP2 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD SWAP2 DUP3 MSTORE SWAP2 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND SWAP2 PUSH1 SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SWAP2 SWAP1 SWAP2 SSTORE SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SWAP1 DUP2 SSTORE PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND DUP2 MSTORE PUSH1 DUP2 ADD DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 EXP PUSH1 MUL NOT AND PUSH1 PUSH1 EXP OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP STOP UNKNOWN_0xdd CALLCODE MSTORE UNKNOWN_0xad SHL UNKNOWN_0xe2 UNKNOWN_0xc8 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef DUP13 JUMPDEST UNKNOWN_0xe1 UNKNOWN_0xe5 UNKNOWN_0xeb UNKNOWN_0xec PUSH30 PUSH19 UNKNOWN_0x2d ADDMOD DUP5 PUSH20 CREATE2 CREATE UNKNOWN_0xe DUP11 CALLER UNKNOWN_0xc9 UNKNOWN_0xae DUP13 UNKNOWN_0xe8 SWAP15 UNKNOWN_0xd4 UNKNOWN_0xc6 UNKNOWN_0xe8 DUP5 STOP UNKNOWN_0xb5 DUP6 LOG4 PUSH25 PUSH23 UNKNOWN_0xf8 UNKNOWN_0xd1 DUP8 CALLVALUE PUSH12 UNKNOWN_0xd4 DELEGATECALL SELFDESTRUCT SHR UNKNOWN_0x4f UNKNOWN_0x5d UNKNOWN_0xe7 UNKNOWN_0xc8 SIGNEXTEND DIFFICULTY STOP UNKNOWN_0x29 INVALID_0x7b",
  "opcode_entropy": 4.910652026297115,
  "opcode_count": 10556,
  "unique_opcodes": 118,
  "byte_entropy": 5.947788162075529,
  "byte_60": 0.11431986913300617,
  "byte_80": 0.044419277714860955,
  "byte_40": 0.008556688058386813,
  "byte_52": 0.018057128476154524,
  "byte_04": 0.011639612432364414,
  "byte_36": 0.0006291682395872657,
  "byte_10": 0.004404177677110859,
  "byte_62": 0.034289669057505974,
  "byte_00": 0.06876808858688814,
  "byte_02": 0.025166729583490626,
  "byte_69": 0.0008179187114634453,
  "byte_57": 0.025732980999119165,
  "byte_63": 0.010884610544859695,
  "byte_ff": 0.015477538693846734,
  "byte_e0": 0.0018245878948030703,
  "byte_0a": 0.016358374229268908,
  "byte_35": 0.005285013212533031,
  "byte_16": 0.0210771360261734,
  "byte_3c": 0.0005662514156285391,
  "byte_61": 0.01812004530011325,
  "byte_ca": 0.0005033345916698125,
  "byte_81": 0.026991317478293697,
  "byte_14": 0.010507109601107336,
  "byte_75": 0.0011325028312570782,
  "byte_03": 0.020070466842833774,
  "byte_0e": 0.001887504718761797,
  "byte_ed": 0.0013212533031332577,
  "byte_a9": 0.0005662514156285391,
  "byte_09": 0.0030829243739776014,
  "byte_28": 0.00037750094375235937,
  "byte_4a": 0.00037750094375235937,
  "byte_d5": 0.00044041776771108597,
  "byte_11": 0.004089593557317227,
  "byte_c2": 0.0006291682395872657,
  "byte_8e": 0.00037750094375235937,
  "byte_1a": 0.0009437523593808985,
  "byte_18": 0.0013841701270919844,
  "byte_65": 0.0005033345916698125,
  "byte_c5": 0.00025166729583490623,
  "byte_7d": 0.00044041776771108597,
  "byte_17": 0.003271674845853781,
  "byte_ae": 0.00044041776771108597,
  "byte_34": 0.005536680508367938,
  "byte_54": 0.012772115263621493,
  "byte_24": 0.0029570907260601485,
  "byte_43": 0.0008808355354221719,
  "byte_48": 0.00044041776771108597,
  "byte_78": 0.0005662514156285391,
  "byte_26": 0.0005033345916698125,
  "byte_27": 0.00044041776771108597,
  "byte_9a": 0.00037750094375235937,
  "byte_59": 0.00018875047187617969,
  "byte_c8": 0.0005662514156285391,
  "byte_32": 0.0003145841197936328,
  "byte_01": 0.033408833522083806,
  "byte_3a": 0.0006291682395872657,
  "byte_c3": 0.00044041776771108597,
  "byte_73": 0.0019504215427205234,
  "byte_bf": 0.00025166729583490623,
  "byte_30": 0.0009437523593808985,
  "byte_33": 0.0040266767333585,
  "byte_3f": 0.00018875047187617969,
  "byte_e5": 0.0006920850635459922,
  "byte_89": 0.0006920850635459922,
  "byte_4e": 0.00037750094375235937,
  "byte_42": 0.0013212533031332577,
  "byte_b6": 0.0011325028312570782,
  "byte_6f": 0.0005033345916698125,
  "byte_b5": 0.0003145841197936328,
  "byte_2e": 0.0003145841197936328,
  "byte_06": 0.002579589782307789,
  "byte_05": 0.005285013212533031,
  "byte_4b": 0.0005033345916698125,
  "byte_b2": 0.0003145841197936328,
  "byte_f3": 0.0012583364791745313,
  "byte_38": 0.0006920850635459922,
  "byte_51": 0.012520447967786586,
  "byte_8a": 0.0006920850635459922,
  "byte_a8": 0.0003145841197936328,
  "byte_50": 0.029004655844972946,
  "byte_58": 0.00037750094375235937,
  "byte_ba": 0.00025166729583490623,
  "byte_d3": 0.0009437523593808985,
  "byte_eb": 0.0003145841197936328,
  "byte_68": 0.0008179187114634453,
  "byte_5b": 0.04001510003775009,
  "byte_76": 0.0006291682395872657,
  "byte_d0": 0.00037750094375235937,
  "byte_91": 0.014156285390713477,
  "byte_5c": 0.0009437523593808985,
  "byte_dc": 0.0005033345916698125,
  "byte_3d": 0.004278344029193406,
  "byte_5e": 0.0008808355354221719,
  "byte_d7": 0.0006291682395872657,
  "byte_c1": 0.0009437523593808985,
  "byte_6a": 0.00037750094375235937,
  "byte_67": 0.0005662514156285391,
  "byte_ec": 0.0003145841197936328,
  "byte_d9": 0.00012583364791745311,
  "byte_7c": 0.00037750094375235937,
  "byte_f1": 0.0018245878948030703,
  "byte_7f": 0.0011325028312570782,
  "byte_71": 0.0011325028312570782,
  "byte_1e": 0.0011325028312570782,
  "byte_0c": 0.002139172014596703,
  "byte_d1": 0.00044041776771108597,
  "byte_cb": 0.0008808355354221719,
  "byte_29": 0.0005662514156285391,
  "byte_87": 0.002453756134390336,
  "byte_72": 0.0006920850635459922,
  "byte_a2": 0.0003145841197936328,
  "byte_41": 0.00044041776771108597,
  "byte_8d": 0.0008808355354221719,
  "byte_a5": 0.00037750094375235937,
  "byte_90": 0.034289669057505974,
  "byte_be": 0.0005033345916698125,
  "byte_cf": 0.00037750094375235937,
  "byte_94": 0.00201333836667925,
  "byte_07": 0.0027054234302252424,
  "byte_97": 0.0011325028312570782,
  "byte_b1": 0.00037750094375235937,
  "byte_ad": 0.0009437523593808985,
  "byte_99": 0.00037750094375235937,
  "byte_e9": 0.0006291682395872657,
  "byte_37": 0.0005662514156285391,
  "byte_6c": 0.0005033345916698125,
  "byte_a6": 0.00044041776771108597,
  "byte_f2": 0.0012583364791745313,
  "byte_af": 0.00044041776771108597,
  "byte_e4": 0.00037750094375235937,
  "byte_e7": 0.00044041776771108597,
  "byte_46": 0.0008808355354221719,
  "byte_86": 0.0022650056625141564,
  "byte_82": 0.011639612432364414,
  "byte_b3": 0.0008179187114634453,
  "byte_f0": 0.00025166729583490623,
  "byte_b9": 0.0005033345916698125,
  "byte_b8": 0.00037750094375235937,
  "byte_0b": 0.0022650056625141564,
  "byte_2f": 0.00037750094375235937,
  "byte_5d": 0.0003145841197936328,
  "byte_0f": 0.001447086951050711,
  "byte_56": 0.019189631307411602,
  "byte_47": 0.00018875047187617969,
  "byte_e6": 0.0005033345916698125,
  "byte_3e": 0.0019504215427205234,
  "byte_64": 0.0009437523593808985,
  "byte_fd": 0.014345035862589657,
  "byte_9e": 0.0003145841197936328,
  "byte_55": 0.004341260853152133,
  "byte_d2": 0.0003145841197936328,
  "byte_22": 0.0008808355354221719,
  "byte_4c": 0.00037750094375235937,
  "byte_dd": 0.0011325028312570782,
  "byte_aa": 0.0005033345916698125,
  "byte_2c": 0.00018875047187617969,
  "byte_08": 0.004655844972945766,
  "byte_e3": 0.00044041776771108597,
  "byte_8b": 0.00025166729583490623,
  "byte_f4": 0.00044041776771108597,
  "byte_f8": 0.00018875047187617969,
  "byte_98": 0.00025166729583490623,
  "byte_fc": 0.0003145841197936328,
  "byte_b0": 0.00037750094375235937,
  "byte_15": 0.02617339876683025,
  "byte_a0": 0.012646281615704039,
  "byte_92": 0.009060022650056626,
  "byte_20": 0.013338366679250032,
  "byte_e2": 0.0006291682395872657,
  "byte_fe": 0.004278344029193406,
  "byte_88": 0.001447086951050711,
  "byte_44": 0.0020762551906379767,
  "byte_84": 0.004844595444821945,
  "byte_85": 0.0036491757896061406,
  "byte_93": 0.005159179564615578,
  "byte_83": 0.008934189002139171,
  "byte_9c": 0.001006669183339625,
  "byte_0d": 0.0026425066062665155,
  "byte_19": 0.00421542720523468,
  "byte_96": 0.0013212533031332577,
  "byte_95": 0.0009437523593808985,
  "byte_a4": 0.00037750094375235937,
  "byte_7e": 0.0005033345916698125,
  "byte_45": 0.00025166729583490623,
  "byte_d4": 0.0010695860072983516,
  "byte_da": 0.0005033345916698125,
  "byte_c7": 0.0003145841197936328,
  "byte_ce": 0.00037750094375235937,
  "byte_cd": 0.00037750094375235937,
  "byte_66": 0.00018875047187617969,
  "byte_4d": 0.0003145841197936328,
  "byte_f7": 0.0005033345916698125,
  "byte_ab": 0.0008179187114634453,
  "byte_3b": 0.0015100037750094375,
  "byte_5f": 0.00044041776771108597,
  "byte_df": 0.00018875047187617969,
  "byte_bd": 0.001006669183339625,
  "byte_12": 0.0011325028312570782,
  "byte_9f": 0.0005033345916698125,
  "byte_b7": 0.0005033345916698125,
  "byte_e1": 0.0003145841197936328,
  "byte_1f": 0.0023908393104316093,
  "byte_2b": 0.00037750094375235937,
  "byte_5a": 0.0015729205989681641,
  "byte_ac": 0.0009437523593808985,
  "byte_d6": 0.0003145841197936328,
  "byte_31": 0.0006920850635459922,
  "byte_1c": 0.0016987542468856172,
  "byte_b4": 0.00044041776771108597,
  "byte_c0": 0.0005033345916698125,
  "byte_ea": 0.00037750094375235937,
  "byte_e8": 0.0008179187114634453,
  "byte_f6": 0.00044041776771108597,
  "byte_13": 0.0016358374229268906,
  "byte_c4": 0.0005033345916698125,
  "byte_21": 0.0013841701270919844,
  "byte_4f": 0.0006920850635459922,
  "byte_53": 0.00025166729583490623,
  "byte_de": 0.00018875047187617969,
  "byte_a3": 0.0012583364791745313,
  "byte_d8": 0.00037750094375235937,
  "byte_1d": 0.0010695860072983516,
  "byte_a7": 0.0006291682395872657,
  "byte_8f": 0.0003145841197936328,
  "byte_fa": 0.00025166729583490623,
  "byte_2d": 0.00025166729583490623,
  "byte_70": 0.0005662514156285391,
  "byte_c6": 0.00018875047187617969,
  "byte_8c": 0.0005662514156285391,
  "byte_bc": 0.00018875047187617969,
  "byte_a1": 0.0010695860072983516,
  "byte_39": 0.0008808355354221719,
  "byte_77": 0.0003145841197936328,
  "byte_9b": 0.00044041776771108597,
  "byte_6d": 0.00025166729583490623,
  "byte_ee": 0.00018875047187617969,
  "byte_9d": 0.00012583364791745311,
  "byte_fb": 0.00018875047187617969,
  "byte_1b": 0.0012583364791745313,
  "byte_74": 0.00044041776771108597,
  "byte_23": 0.0011325028312570782,
  "byte_7b": 0.00044041776771108597,
  "byte_cc": 0.00044041776771108597,
  "byte_db": 0.00012583364791745311,
  "byte_2a": 0.00012583364791745311,
  "byte_7a": 0.0006920850635459922,
  "byte_bb": 0.00044041776771108597,
  "byte_6e": 0.00012583364791745311,
  "byte_79": 0.00025166729583490623,
  "byte_f9": 0.0003145841197936328,
  "byte_25": 0.00037750094375235937,
  "byte_49": 0.0005033345916698125,
  "byte_f5": 0.00037750094375235937,
  "byte_ef": 0.00012583364791745311,
  "byte_c9": 0.00012583364791745311,
  "byte_6b": 6.291682395872656e-05,
  "num_nodes": 4,
  "num_edges": 3,
  "avg_degree": 1.5,
  "density": 0.25,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 65,
  "event_nums": 14,
  "creation_block": 6283876,
  "creation_timestamp": 1536260148,
  "life_time": 995156.0,
  "duration_seconds": 15103896.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 3,
  "num_creator_transfers": 1,
  "buy_amt": 0.0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 6.531632697152308e-05,
  "avg_gas_limit": 210909.84615384616,
  "std_gas_limit": 635662.4277240053,
  "avg_gas_used": 161084.73846153845,
  "std_gas_used": 588185.8667833409,
  "avg_gas_price": 5828590386.307693,
  "std_gas_price": 2586884826.485042,
  "invested_num": 13,
  "halted_num": 1,
  "atinversebrah_num": 1,
  "configurationcrowdsale_num": 1,
  "updatepriceagent_num": 1,
  "updateeurspereth_num": 46,
  "granularpreallocate_num": 14,
  "halt_num": 1,
  "timeline_sequence": [
    [
      6283876,
      1536260148,
      1799,
      5,
      0,
      4500000,
      4500000000,
      0,
      1,
      4626188,
      4311045,
      16837554
    ],
    [
      6283885,
      1536260290,
      1800,
      22,
      0,
      2100000,
      4500000000,
      0,
      1,
      3192120,
      1957203,
      16837545
    ],
    [
      6289248,
      1536337899,
      1801,
      41,
      0,
      100000,
      4500000000,
      0,
      1,
      5010144,
      45737,
      16832182
    ],
    [
      6289262,
      1536338071,
      8088,
      131,
      0,
      50000,
      4400000000,
      0,
      1,
      5481688,
      44152,
      16832168
    ],
    [
      6289867,
      1536347152,
      8089,
      180,
      0,
      50000,
      4400000000,
      0,
      1,
      5709168,
      29152,
      16831563
    ],
    [
      6289902,
      1536347596,
      1802,
      37,
      0,
      100000,
      4500000000,
      1,
      0,
      2595457,
      100000,
      16831528
    ],
    [
      6289921,
      1536347800,
      1803,
      55,
      0,
      200000,
      4500000000,
      0,
      1,
      2824375,
      142349,
      16831509
    ],
    [
      6289955,
      1536348342,
      1804,
      21,
      0,
      200000,
      4500000000,
      0,
      1,
      1370702,
      112285,
      16831475
    ],
    [
      6289997,
      1536348920,
      1805,
      12,
      0,
      200000,
      4500000000,
      0,
      1,
      531649,
      112285,
      16831433
    ],
    [
      6290024,
      1536349334,
      1806,
      38,
      0,
      200000,
      4500000000,
      0,
      1,
      1249324,
      112285,
      16831406
    ],
    [
      6290084,
      1536350211,
      1807,
      78,
      0,
      200000,
      4500000000,
      0,
      1,
      7663470,
      112285,
      16831346
    ],
    [
      6290264,
      1536352740,
      1808,
      43,
      0,
      200000,
      4500000000,
      0,
      1,
      2962662,
      112285,
      16831166
    ],
    [
      6290421,
      1536355148,
      1809,
      93,
      0,
      200000,
      4500000000,
      0,
      1,
      6656884,
      112285,
      16831009
    ],
    [
      6290481,
      1536355934,
      1810,
      40,
      0,
      200000,
      4500000000,
      0,
      1,
      6051230,
      112413,
      16830949
    ],
    [
      6290481,
      1536355934,
      1811,
      41,
      0,
      200000,
      4500000000,
      0,
      1,
      6163515,
      112285,
      16830949
    ],
    [
      6290488,
      1536356031,
      1812,
      34,
      0,
      200000,
      4500000000,
      0,
      1,
      2626717,
      96901,
      16830942
    ],
    [
      6290492,
      1536356133,
      1813,
      85,
      0,
      200000,
      4500000000,
      0,
      1,
      6434023,
      96901,
      16830938
    ],
    [
      6290495,
      1536356147,
      1814,
      16,
      0,
      200000,
      4500000000,
      0,
      1,
      1486426,
      96901,
      16830935
    ],
    [
      6290523,
      1536356551,
      1815,
      81,
      0,
      200000,
      4500000000,
      0,
      1,
      7418434,
      96837,
      16830907
    ],
    [
      6295801,
      1536433508,
      8090,
      73,
      0,
      50000,
      4400000000,
      0,
      1,
      3555871,
      29152,
      16825629
    ],
    [
      6301654,
      1536519906,
      8091,
      51,
      0,
      50000,
      4950000000,
      0,
      1,
      4213556,
      29152,
      16819776
    ],
    [
      6307648,
      1536606318,
      8092,
      87,
      0,
      50000,
      4400000000,
      0,
      1,
      6500921,
      29152,
      16813782
    ],
    [
      6313670,
      1536692889,
      8093,
      139,
      0,
      50000,
      6600000000,
      0,
      1,
      7950781,
      29152,
      16807760
    ],
    [
      6319732,
      1536779111,
      8094,
      68,
      0,
      50000,
      6600000000,
      0,
      1,
      3939586,
      29152,
      16801698
    ],
    [
      6331780,
      1536951910,
      8095,
      51,
      0,
      50000,
      4400000000,
      0,
      1,
      6823831,
      29152,
      16789650
    ],
    [
      6337886,
      1537038378,
      8096,
      92,
      0,
      50000,
      3850000000,
      0,
      1,
      7976842,
      29152,
      16783544
    ],
    [
      6350035,
      1537211114,
      8097,
      26,
      0,
      50000,
      4510000000,
      0,
      1,
      2896849,
      29152,
      16771395
    ],
    [
      6356028,
      1537297528,
      8098,
      67,
      0,
      50000,
      5500000000,
      0,
      1,
      4591168,
      29152,
      16765402
    ],
    [
      6362134,
      1537383916,
      8099,
      80,
      0,
      50000,
      14520000000,
      0,
      1,
      6391712,
      29152,
      16759296
    ],
    [
      6368162,
      1537470308,
      8100,
      94,
      0,
      50000,
      6600000000,
      0,
      1,
      7201694,
      29152,
      16753268
    ],
    [
      6374131,
      1537556734,
      8101,
      38,
      0,
      50000,
      7700000000,
      0,
      1,
      3595553,
      29152,
      16747299
    ],
    [
      6380237,
      1537643117,
      8102,
      52,
      0,
      50000,
      4400000000,
      0,
      1,
      7491590,
      29152,
      16741193
    ],
    [
      6386342,
      1537729556,
      8103,
      28,
      0,
      50000,
      4400000000,
      0,
      1,
      6845727,
      29152,
      16735088
    ],
    [
      6392422,
      1537815919,
      8104,
      18,
      0,
      50000,
      8800000000,
      0,
      1,
      590453,
      29152,
      16729008
    ],
    [
      6398551,
      1537902314,
      8105,
      69,
      0,
      50000,
      6380000000,
      0,
      1,
      7093134,
      29152,
      16722879
    ],
    [
      6404637,
      1537988707,
      8106,
      30,
      0,
      50000,
      8800000000,
      0,
      1,
      2704810,
      29152,
      16716793
    ],
    [
      6410689,
      1538075107,
      8107,
      155,
      0,
      50000,
      9680000000,
      0,
      1,
      7038607,
      29152,
      16710741
    ],
    [
      6416751,
      1538161512,
      8108,
      113,
      0,
      50000,
      11000000000,
      0,
      1,
      7262445,
      29152,
      16704679
    ],
    [
      6422941,
      1538247913,
      8109,
      28,
      0,
      50000,
      12100000000,
      0,
      1,
      2555083,
      29152,
      16698489
    ],
    [
      6429014,
      1538334461,
      8110,
      45,
      0,
      50000,
      8800000000,
      0,
      1,
      7165426,
      29152,
      16692416
    ],
    [
      6435123,
      1538420712,
      8111,
      52,
      0,
      50000,
      11000000000,
      0,
      1,
      7144352,
      29152,
      16686307
    ],
    [
      6441272,
      1538507104,
      8112,
      26,
      0,
      50000,
      12100000000,
      0,
      1,
      888782,
      29088,
      16680158
    ],
    [
      6453507,
      1538679922,
      8113,
      68,
      0,
      50000,
      3300000000,
      0,
      1,
      6270838,
      29152,
      16667923
    ],
    [
      6459629,
      1538766334,
      8114,
      47,
      0,
      50000,
      4114000110,
      0,
      1,
      1950018,
      29152,
      16661801
    ],
    [
      6472049,
      1538939107,
      8115,
      70,
      0,
      50000,
      6600000000,
      0,
      1,
      5720392,
      29152,
      16649381
    ],
    [
      6478247,
      1539025528,
      8116,
      50,
      0,
      50000,
      3300000000,
      0,
      1,
      5141394,
      29152,
      16643183
    ],
    [
      6484355,
      1539111921,
      8117,
      85,
      0,
      50000,
      4400000000,
      0,
      1,
      4929848,
      29152,
      16637075
    ],
    [
      6490593,
      1539198849,
      8118,
      52,
      0,
      50000,
      7700000000,
      0,
      1,
      5011045,
      29152,
      16630837
    ],
    [
      6496712,
      1539284734,
      8119,
      72,
      0,
      50000,
      5500000000,
      0,
      1,
      7257428,
      29152,
      16624718
    ],
    [
      6502882,
      1539371118,
      8120,
      87,
      0,
      50000,
      4400000000,
      0,
      1,
      5382911,
      29152,
      16618548
    ],
    [
      6509096,
      1539457503,
      8121,
      35,
      0,
      50000,
      1650000000,
      0,
      1,
      2172225,
      29152,
      16612334
    ],
    [
      6515215,
      1539543935,
      8122,
      35,
      0,
      50000,
      7150000000,
      0,
      1,
      1768984,
      29152,
      16606215
    ],
    [
      6521333,
      1539630308,
      8123,
      98,
      0,
      50000,
      5500000000,
      0,
      1,
      6150159,
      29152,
      16600097
    ],
    [
      6527469,
      1539717121,
      8124,
      51,
      0,
      50000,
      4400000000,
      0,
      1,
      5502094,
      29152,
      16593961
    ],
    [
      6533581,
      1539803197,
      8125,
      41,
      0,
      50000,
      4400000000,
      0,
      1,
      2168589,
      29152,
      16587849
    ],
    [
      6539767,
      1539889875,
      8126,
      142,
      0,
      50000,
      5500000000,
      0,
      1,
      7634109,
      29152,
      16581663
    ],
    [
      6545816,
      1539975907,
      8127,
      22,
      0,
      50000,
      6600000000,
      0,
      1,
      820184,
      29152,
      16575614
    ],
    [
      6551915,
      1540062360,
      8128,
      148,
      0,
      50000,
      4709375000,
      0,
      1,
      6418720,
      29152,
      16569515
    ],
    [
      6558050,
      1540148886,
      8129,
      136,
      0,
      50000,
      3300000000,
      0,
      1,
      7766126,
      29152,
      16563380
    ],
    [
      6564124,
      1540235091,
      8130,
      147,
      0,
      50000,
      5445000000,
      0,
      1,
      6322976,
      29152,
      16557306
    ],
    [
      6570283,
      1540321512,
      8131,
      32,
      0,
      50000,
      6600000000,
      0,
      1,
      2364412,
      29152,
      16551147
    ],
    [
      6576448,
      1540408011,
      8132,
      58,
      0,
      50000,
      8800000000,
      0,
      1,
      3885950,
      29152,
      16544982
    ],
    [
      6582573,
      1540494406,
      8133,
      8,
      0,
      50000,
      7700000000,
      0,
      1,
      4568082,
      29152,
      16538857
    ],
    [
      7279032,
      1551364044,
      1818,
      137,
      0,
      50000,
      11000000000,
      0,
      1,
      7954864,
      28653,
      15842398
    ],
    [
      6283885,
      1536260290,
      0,
      0,
      0,
      1959140,
      0,
      0,
      0,
      0,
      1243645,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.24;\n\n/**\n * Authored by https://www.coinfabrik.com/\n */\n\npragma solidity ^0.4.24;\n\n/**\n * Originally from https://github.com/TokenMarketNet/ico\n * Modified by https://www.coinfabrik.com/\n */\n\npragma solidity ^0.4.24;\n\n/**\n * Envisioned in FirstBlood ICO contract.\n * Originally from https://github.com/TokenMarketNet/ico\n * Modified by https://www.coinfabrik.com/\n */\n\npragma solidity ^0.4.24;\n\n/**\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\n * Modified by https://www.coinfabrik.com/\n */\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control \n * functions, this simplifies the implementation of \"user permissions\". \n */\ncontract Ownable {\n  address public owner;\n\n\n  /** \n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  constructor() public {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner. \n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to. \n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    owner = newOwner;\n  }\n\n}\n\n/**\n * Abstract contract that allows children to implement an\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n *\n */\ncontract Haltable is Ownable {\n  bool public halted;\n\n  event Halted(bool halted);\n\n  modifier stopInEmergency {\n    require(!halted);\n    _;\n  }\n\n  modifier onlyInEmergency {\n    require(halted);\n    _;\n  }\n\n  // called by the owner on emergency, triggers stopped state\n  function halt() external onlyOwner {\n    halted = true;\n    emit Halted(true);\n  }\n\n  // called by the owner on end of emergency, returns to normal state\n  function unhalt() external onlyOwner onlyInEmergency {\n    halted = false;\n    emit Halted(false);\n  }\n}\npragma solidity ^0.4.24;\n\n/**\n * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\n * Modified by https://www.coinfabrik.com/\n */\n\n/**\n * Math operations with safety checks\n */\nlibrary SafeMath {\n  function mul(uint a, uint b) internal pure returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint a, uint b) internal pure returns (uint) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint a, uint b) internal pure returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint a, uint b) internal pure returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a >= b ? a : b;\n  }\n\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\n    return a < b ? a : b;\n  }\n\n  function max256(uint a, uint b) internal pure returns (uint) {\n    return a >= b ? a : b;\n  }\n\n  function min256(uint a, uint b) internal pure returns (uint) {\n    return a < b ? a : b;\n  }\n}\n\npragma solidity ^0.4.24;\n\n/**\n * Originally from https://github.com/TokenMarketNet/ico\n * Modified by https://www.coinfabrik.com/\n */\n\npragma solidity ^0.4.24;\n\n/**\n * Originally from https://github.com/TokenMarketNet/ico\n * Modified by https://www.coinfabrik.com/\n */\n\npragma solidity ^0.4.24;\n\n/**\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\n * Modified by https://www.coinfabrik.com/\n */\n\npragma solidity ^0.4.24;\n\n/**\n * Interface for the standard token.\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n */\ncontract EIP20Token {\n\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool success);\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\n  function approve(address spender, uint256 value) public returns (bool success);\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n\n  /**\n  ** Optional functions\n  *\n  function name() public view returns (string name);\n  function symbol() public view returns (string symbol);\n  function decimals() public view returns (uint8 decimals);\n  *\n  **/\n\n}\npragma solidity ^0.4.24;\n\n// Interface for burning tokens\ncontract Burnable {\n  // @dev Destroys tokens for an account\n  // @param account Account whose tokens are destroyed\n  // @param value Amount of tokens to destroy\n  function burnTokens(address account, uint value) internal;\n  event Burned(address account, uint value);\n}\npragma solidity ^0.4.24;\n\n/**\n * Authored by https://www.coinfabrik.com/\n */\n\n\n/**\n * Internal interface for the minting of tokens.\n */\ncontract Mintable {\n\n  /**\n   * @dev Mints tokens for an account\n   * This function should the Minted event.\n   */\n  function mintInternal(address receiver, uint amount) internal;\n\n  /** Token supply got increased and a new owner received these tokens */\n  event Minted(address receiver, uint amount);\n}\n\n/**\n * @title Standard token\n * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\n */\ncontract StandardToken is EIP20Token, Burnable, Mintable {\n  using SafeMath for uint;\n\n  uint private total_supply;\n  mapping(address => uint) private balances;\n  mapping(address => mapping (address => uint)) private allowed;\n\n\n  function totalSupply() public view returns (uint) {\n    return total_supply;\n  }\n\n  /**\n   * @dev transfer token for a specified address\n   * @param to The address to transfer to.\n   * @param value The amount to be transferred.\n   */\n  function transfer(address to, uint value) public returns (bool success) {\n    balances[msg.sender] = balances[msg.sender].sub(value);\n    balances[to] = balances[to].add(value);\n    emit Transfer(msg.sender, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Gets the balance of the specified address.\n   * @param account The address whose balance is to be queried.\n   * @return An uint representing the amount owned by the passed address.\n   */\n  function balanceOf(address account) public view returns (uint balance) {\n    return balances[account];\n  }\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param from address The address which you want to send tokens from\n   * @param to address The address which you want to transfer to\n   * @param value uint the amout of tokens to be transfered\n   */\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\n    uint allowance = allowed[from][msg.sender];\n\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\n    // require(value <= allowance);\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\n\n    balances[from] = balances[from].sub(value);\n    balances[to] = balances[to].add(value);\n    allowed[from][msg.sender] = allowance.sub(value);\n    emit Transfer(from, to, value);\n    return true;\n  }\n\n  /**\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   * @param spender The address which will spend the funds.\n   * @param value The amount of tokens to be spent.\n   */\n  function approve(address spender, uint value) public returns (bool success) {\n\n    // To change the approve amount you first have to reduce the addresses'\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    require (value == 0 || allowed[msg.sender][spender] == 0);\n\n    allowed[msg.sender][spender] = value;\n    emit Approval(msg.sender, spender, value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\n   * @param account address The address which owns the funds.\n   * @param spender address The address which will spend the funds.\n   * @return A uint specifing the amount of tokens still avaible for the spender.\n   */\n  function allowance(address account, address spender) public view returns (uint remaining) {\n    return allowed[account][spender];\n  }\n\n  /**\n   * Atomic increment of approved spending\n   *\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   *\n   */\n  function addApproval(address spender, uint addedValue) public returns (bool success) {\n      uint oldValue = allowed[msg.sender][spender];\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\n      emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n      return true;\n  }\n\n  /**\n   * Atomic decrement of approved spending.\n   *\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   */\n  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\n\n      uint oldVal = allowed[msg.sender][spender];\n\n      if (subtractedValue > oldVal) {\n          allowed[msg.sender][spender] = 0;\n      } else {\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\n      }\n      emit Approval(msg.sender, spender, allowed[msg.sender][spender]);\n      return true;\n  }\n\n  /**\n   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\n   */\n  function burnTokens(address account, uint value) internal {\n    balances[account] = balances[account].sub(value);\n    total_supply = total_supply.sub(value);\n    emit Transfer(account, 0, value);\n    emit Burned(account, value);\n  }\n\n  /**\n   * @dev Provides an internal minting function.\n   */\n  function mintInternal(address receiver, uint amount) internal {\n    total_supply = total_supply.add(amount);\n    balances[receiver] = balances[receiver].add(amount);\n    emit Minted(receiver, amount);\n\n    // Beware: Address zero may be used for special transactions in a future fork.\n    // This will make the mint transaction appear in EtherScan.io\n    // We can remove this after there is a standardized minting event\n    emit Transfer(0, receiver, amount);\n  }\n  \n}\n\n/**\n * Define interface for releasing the token transfer after a successful crowdsale.\n */\ncontract ReleasableToken is StandardToken, Ownable {\n\n  /* The finalizer contract that allows lifting the transfer limits on this token */\n  address public releaseAgent;\n\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n  bool public released = false;\n\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n  mapping (address => bool) public transferAgents;\n\n  /**\n   * Set the contract that can call release and make the token transferable.\n   *\n   * Since the owner of this contract is (or should be) the crowdsale,\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\n   */\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\n    releaseAgent = addr;\n  }\n\n  /**\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\n   */\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n    transferAgents[addr] = state;\n  }\n\n  /**\n   * One way function to release the tokens into the wild.\n   *\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\n   */\n  function releaseTokenTransfer() public onlyReleaseAgent {\n    released = true;\n  }\n\n  /**\n   * Limit token transfer until the crowdsale is over.\n   */\n  modifier canTransfer(address sender) {\n    require(released || transferAgents[sender]);\n    _;\n  }\n\n  /** The function can be called only before or after the tokens have been released */\n  modifier inReleaseState(bool releaseState) {\n    require(releaseState == released);\n    _;\n  }\n\n  /** The function can be called only by a whitelisted release agent. */\n  modifier onlyReleaseAgent() {\n    require(msg.sender == releaseAgent);\n    _;\n  }\n\n  /** We restrict transfer by overriding it */\n  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\n    // Call StandardToken.transfer()\n   return super.transfer(to, value);\n  }\n\n  /** We restrict transferFrom by overriding it */\n  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\n    // Call StandardToken.transferForm()\n    return super.transferFrom(from, to, value);\n  }\n\n}\n\n\n\npragma solidity ^0.4.24;\n\n/**\n * First envisioned by Golem and Lunyr projects.\n * Originally from https://github.com/TokenMarketNet/ico\n * Modified by https://www.coinfabrik.com/\n */\n\npragma solidity ^0.4.24;\n\n/**\n * Inspired by Lunyr.\n * Originally from https://github.com/TokenMarketNet/ico\n */\n\n/**\n * Upgrade agent transfers tokens to a new contract.\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n *\n * The Upgrade agent is the interface used to implement a token\n * migration in the case of an emergency.\n * The function upgradeFrom has to implement the part of the creation\n * of new tokens on behalf of the user doing the upgrade.\n *\n * The new token can implement this interface directly, or use.\n */\ncontract UpgradeAgent {\n\n  /** This value should be the same as the original token's total supply */\n  uint public originalSupply;\n\n  /** Interface to ensure the contract is correctly configured */\n  function isUpgradeAgent() public pure returns (bool) {\n    return true;\n  }\n\n  /**\n  Upgrade an account\n\n  When the token contract is in the upgrade status the each user will\n  have to call `upgrade(value)` function from UpgradeableToken.\n\n  The upgrade function adjust the balance of the user and the supply\n  of the previous token and then call `upgradeFrom(value)`.\n\n  The UpgradeAgent is the responsible to create the tokens for the user\n  in the new contract.\n\n  * @param from Account to upgrade.\n  * @param value Tokens to upgrade.\n\n  */\n  function upgradeFrom(address from, uint value) public;\n\n}\n\n\n/**\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n *\n */\ncontract UpgradeableToken is EIP20Token, Burnable {\n  using SafeMath for uint;\n\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\n  address public upgradeMaster;\n\n  /** The next contract where the tokens will be migrated. */\n  UpgradeAgent public upgradeAgent;\n\n  /** How many tokens we have upgraded by now. */\n  uint public totalUpgraded = 0;\n\n  /**\n   * Upgrade states.\n   *\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can begin\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\n   *\n   */\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\n\n  /**\n   * Somebody has upgraded some of his tokens.\n   */\n  event Upgrade(address indexed from, address to, uint value);\n\n  /**\n   * New upgrade agent available.\n   */\n  event UpgradeAgentSet(address agent);\n\n  /**\n   * Do not allow construction without upgrade master set.\n   */\n  constructor(address master) internal {\n    setUpgradeMaster(master);\n  }\n\n  /**\n   * Allow the token holder to upgrade some of their tokens to a new contract.\n   */\n  function upgrade(uint value) public {\n    UpgradeState state = getUpgradeState();\n    // Ensure it's not called in a bad state\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\n\n    // Validate input value.\n    require(value != 0);\n\n    // Upgrade agent reissues the tokens\n    upgradeAgent.upgradeFrom(msg.sender, value);\n    \n    // Take tokens out from circulation\n    burnTokens(msg.sender, value);\n    totalUpgraded = totalUpgraded.add(value);\n\n    emit Upgrade(msg.sender, upgradeAgent, value);\n  }\n\n  /**\n   * Set an upgrade agent that handles the upgrade process\n   */\n  function setUpgradeAgent(address agent) onlyMaster external {\n    // Check whether the token is in a state that we could think of upgrading\n    require(canUpgrade());\n\n    require(agent != 0x0);\n    // Upgrade has already begun for an agent\n    require(getUpgradeState() != UpgradeState.Upgrading);\n\n    upgradeAgent = UpgradeAgent(agent);\n\n    // Bad interface\n    require(upgradeAgent.isUpgradeAgent());\n    // Make sure that token supplies match in source and target\n    require(upgradeAgent.originalSupply() == totalSupply());\n\n    emit UpgradeAgentSet(upgradeAgent);\n  }\n\n  /**\n   * Get the state of the token upgrade.\n   */\n  function getUpgradeState() public view returns(UpgradeState) {\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\n    else return UpgradeState.Upgrading;\n  }\n\n  /**\n   * Change the upgrade master.\n   *\n   * This allows us to set a new owner for the upgrade mechanism.\n   */\n  function changeUpgradeMaster(address new_master) onlyMaster public {\n    setUpgradeMaster(new_master);\n  }\n\n  /**\n   * Internal upgrade master setter.\n   */\n  function setUpgradeMaster(address new_master) private {\n    require(new_master != 0x0);\n    upgradeMaster = new_master;\n  }\n\n  /**\n   * Child contract can override to provide the condition in which the upgrade can begin.\n   */\n  function canUpgrade() public view returns(bool); \n\n  modifier onlyMaster() {\n    require(msg.sender == upgradeMaster);\n    _;\n  }\n}\n\npragma solidity ^0.4.24;\n\n/**\n * Authored by https://www.coinfabrik.com/\n */\n\n\n// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\n// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\n// Of course, this contract imposes support costs upon whoever is the lost and found master.\ncontract LostAndFoundToken {\n  /**\n   * @return Address of the account that handles movements.\n   */\n  function getLostAndFoundMaster() internal view returns (address);\n\n  /**\n   * @param agent Address that will be able to move tokens with transferFrom\n   * @param tokens Amount of tokens approved for transfer\n   * @param token_contract Contract of the token\n   */\n  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\n    require(msg.sender == getLostAndFoundMaster());\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\n    //  getting them stuck in another address by accident.\n    token_contract.approve(agent, tokens);\n  }\n}\npragma solidity ^0.4.24;\n\n/**\n * Originally from https://github.com/TokenMarketNet/ico\n * Modified by https://www.coinfabrik.com/\n */\n\n\n/**\n * A public interface to increase the supply of a token.\n *\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\n * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\n *\n */\ncontract MintableToken is Mintable, Ownable {\n\n  using SafeMath for uint;\n\n  bool public mintingFinished = false;\n\n  /** List of agents that are allowed to create new tokens */\n  mapping (address => bool) public mintAgents;\n\n  event MintingAgentChanged(address addr, bool state);\n\n\n  constructor(uint initialSupply, address multisig, bool mintable) internal {\n    require(multisig != address(0));\n    // Cannot create a token without supply and no minting\n    require(mintable || initialSupply != 0);\n    // Create initially all balance on the team multisig\n    if (initialSupply > 0)\n      mintInternal(multisig, initialSupply);\n    // No more new supply allowed after the token creation\n    mintingFinished = !mintable;\n  }\n\n  /**\n   * Create new tokens and allocate them to an address.\n   *\n   * Only callable by a mint agent (e.g. crowdsale contract).\n   */\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\n    mintInternal(receiver, amount);\n  }\n\n  /**\n   * Owner can allow a crowdsale contract to mint new tokens.\n   */\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\n    mintAgents[addr] = state;\n    emit MintingAgentChanged(addr, state);\n  }\n\n  modifier onlyMintAgent() {\n    // Only mint agents are allowed to mint new tokens\n    require(mintAgents[msg.sender]);\n    _;\n  }\n\n  /** Make sure we are not done yet. */\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n}\n\n/**\n * A crowdsale token.\n *\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n *\n * - The token transfer() is disabled until the crowdsale is over\n * - The token contract gives an opt-in upgrade path to a new contract\n * - The same token can be part of several crowdsales through the approve() mechanism\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\n *\n */\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\n\n  string public name = \"Kryptobits\";\n\n  string public symbol = \"KBE\";\n\n  uint8 public decimals;\n\n  address public lost_and_found_master;\n\n  /**\n   * Construct the token.\n   *\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\n   *\n   * @param initial_supply How many tokens we start with.\n   * @param token_decimals Number of decimal places.\n   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\n   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\n   */\n  constructor(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\n    require(token_retriever != address(0));\n    decimals = token_decimals;\n    lost_and_found_master = token_retriever;\n  }\n\n  /**\n   * When token is released to be transferable, prohibit new token creation.\n   */\n  function releaseTokenTransfer() public onlyReleaseAgent {\n    mintingFinished = true;\n    super.releaseTokenTransfer();\n  }\n\n  /**\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\n   */\n  function canUpgrade() public view returns(bool) {\n    //return released && super.canUpgrade();\n    return released;\n  }\n\n  function burn(uint value) public {\n    burnTokens(msg.sender, value);\n  }\n\n  function getLostAndFoundMaster() internal view returns(address) {\n    return lost_and_found_master;\n  }\n}\n\n/**\n * Abstract base contract for token sales.\n *\n * Handles\n * - start and end dates\n * - accepting investments\n * - various statistics during the crowdfund\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\n *\n */\ncontract GenericCrowdsale is Haltable {\n\n  using SafeMath for uint;\n\n  /* The token we are selling */\n  CrowdsaleToken public token;\n\n  /* ether will be transferred to this address */\n  address public multisigWallet;\n\n  /* the starting timestamp of the crowdsale */\n  uint public startsAt;\n\n  /* the ending timestamp of the crowdsale */\n  uint public endsAt;\n\n  /* the number of tokens already sold through this contract*/\n  uint public tokensSold = 0;\n\n  /* How many wei of funding we have raised */\n  uint public weiRaised = 0;\n\n  /* How many distinct addresses have invested */\n  uint public investorCount = 0;\n\n  /* Has this crowdsale been finalized */\n  bool public finalized = false;\n\n  /* Do we need to have a unique contributor id for each customer */\n  bool public requireCustomerId = false;\n\n  /* Has this crowdsale been configured */\n  bool public configured = false;\n\n  /**\n   * Do we verify that contributor has been cleared on the server side (accredited investors only).\n   * This method was first used in the FirstBlood crowdsale to ensure all contributors had accepted terms of sale (on the web).\n   */\n  bool public requiredSignedAddress = false;\n\n  /** Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\n  address public signerAddress;\n\n  /** How many ETH each address has invested in this crowdsale */\n  mapping (address => uint) public investedAmountOf;\n\n  /** How many tokens this crowdsale has credited for each investor address */\n  mapping (address => uint) public tokenAmountOf;\n\n  /** Addresses that are allowed to invest even before ICO officially opens. For testing, for ICO partners, etc. */\n  mapping (address => bool) public earlyParticipantWhitelist;\n\n  /** State machine\n   *\n   * - PendingConfiguration: Crowdsale not yet configured\n   * - Prefunding: We have not reached the starting timestamp yet\n   * - Funding: Active crowdsale\n   * - Success: Crowdsale ended\n   * - Finalized: The finalize function has been called and successfully executed\n   */\n  enum State{Unknown, PendingConfiguration, PreFunding, Funding, Success, Finalized}\n\n\n  // A new investment was made\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\n\n  // The rules about what kind of investments we accept were changed\n  event InvestmentPolicyChanged(bool requireCId, bool requireSignedAddress, address signer);\n\n  // Address early participation whitelist status changed\n  event Whitelisted(address addr, bool status);\n\n  // Crowdsale's finalize function has been called\n  event Finalized();\n\n  /*\n   * The configuration from the constructor was moved to the configurationGenericCrowdsale function.\n   *\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\n   * @param start Timestamp where the crowdsale will be officially started. \n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\n   *\n   * configurationGenericCrowdsale can only be called when in State.PendingConfiguration because of the inState modifier.\n   */\n  function configurationGenericCrowdsale(address team_multisig, uint start, uint end) internal inState(State.PendingConfiguration) {\n    setMultisig(team_multisig);\n\n    // Don't mess the dates\n    require(start != 0 && end != 0);\n    require(now < end && start < end);\n    startsAt = start;\n    endsAt = end;\n    configured = true;\n  }\n\n  /**\n   * Default fallback behaviour is to call buy.\n   * Ideally, no contract calls this crowdsale without supporting ERC20.\n   * However, some sort of refunding function may be desired to cover such situations.\n   */\n  function() payable public {\n    buy();\n  }\n\n  /**\n   * Make an investment.\n   *\n   * The crowdsale must be running for one to invest.\n   * We must have not pressed the emergency brake.\n   *\n   * @param receiver The Ethereum address who receives the tokens\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\n   *\n   */\n  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\n    // Determine if it's a good time to accept investment from this participant\n    if (getState() == State.PreFunding) {\n      // Are we whitelisted for early deposit\n      require(earlyParticipantWhitelist[msg.sender]);\n    }\n\n    uint weiAmount;\n    uint tokenAmount;\n    (weiAmount, tokenAmount) = calculateTokenAmount(msg.value, receiver);\n    // Sanity check against bad implementation.\n    assert(weiAmount <= msg.value);\n    \n    // Dust transaction if no tokens can be given\n    require(tokenAmount != 0);\n\n    if (investedAmountOf[receiver] == 0) {\n      // A new investor\n      investorCount++;\n    }\n    updateInvestorFunds(tokenAmount, weiAmount, receiver, customerId);\n\n    // Pocket the money\n    multisigWallet.transfer(weiAmount);\n\n    // Return excess of money\n    returnExcedent(msg.value.sub(weiAmount), msg.sender);\n  }\n\n  /**\n   * Preallocate tokens for the early investors.\n   *\n   * Preallocated tokens have been sold before the actual crowdsale opens.\n   * This function mints the tokens and moves the crowdsale needle.\n   *\n   * No money is exchanged, as the crowdsale team already have received the payment.\n   *\n   * @param receiver Account that receives the tokens.\n   * @param fullTokens tokens as full tokens - decimal places are added internally.\n   * @param weiPrice Price of a single indivisible token in wei.\n   *\n   */\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) external onlyOwner notFinished {\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\n    // weiAmount can also be 0, in which case weiRaised is not increased.\n    uint weiAmount = weiPrice.mul(tokenAmount);\n    granularPreallocate(receiver, tokenAmount, weiAmount);\n  }\n\n  /**\n   * Preallocate tokens for the early investors.\n   *\n   * Preallocated tokens have been sold before the actual crowdsale opens.\n   * This function mints the tokens and moves the crowdsale needle.\n   *\n   * No money is exchanged, as the crowdsale team already have received the payment.\n   *\n   * @param receiver Account that receives the tokens.\n   * @param tokenAmount Indivisible tokens.\n   * @param weiAmount Equivalent of tokens in wei.\n   *\n   */\n  function granularPreallocate(address receiver, uint tokenAmount, uint weiAmount) public onlyOwner notFinished {\n    require(receiver != address(0));\n    require(tokenAmount != 0);\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\n  }\n\n  /**\n   * Private function to update accounting in the crowdsale.\n   */\n  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\n    // Update investor\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\n\n    // Update totals\n    weiRaised = weiRaised.add(weiAmount);\n    tokensSold = tokensSold.add(tokenAmount);\n\n    assignTokens(receiver, tokenAmount);\n    // Tell us that the investment was completed successfully\n    emit Invested(receiver, weiAmount, tokenAmount, customerId);\n  }\n\n  /**\n   * Investing function that recognizes the receiver and verifies he is allowed to invest.\n   *\n   * @param customerId UUIDv4 that identifies this contributor\n   */\n  function buyOnBehalfWithSignedAddress(address receiver, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\n    bytes32 hash = sha256(abi.encodePacked(receiver));\n    require(ecrecover(hash, v, r, s) == signerAddress);\n    investInternal(receiver, customerId);\n  }\n\n  /**\n   * Investing function that recognizes the receiver.\n   * \n   * @param customerId UUIDv4 that identifies this contributor\n   */\n  function buyOnBehalfWithCustomerId(address receiver, uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\n    investInternal(receiver, customerId);\n  }\n\n  /**\n   * Buys tokens on behalf of an address.\n   *\n   * Pay for funding, get invested tokens back in the receiver address.\n   */\n  function buyOnBehalf(address receiver) public payable unsignedBuyAllowed {\n    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\n    investInternal(receiver, 0);\n  }\n\n  /**\n   * Investing function that recognizes the payer and verifies he is allowed to invest.\n   *\n   * @param customerId UUIDv4 that identifies this contributor\n   */\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\n    buyOnBehalfWithSignedAddress(msg.sender, customerId, v, r, s);\n  }\n\n\n  /**\n   * Investing function that recognizes the payer.\n   * \n   * @param customerId UUIDv4 that identifies this contributor\n   */\n  function buyWithCustomerId(uint128 customerId) public payable {\n    buyOnBehalfWithCustomerId(msg.sender, customerId);\n  }\n\n  /**\n   * The basic entry point to participate in the crowdsale process.\n   *\n   * Pay for funding, get invested tokens back in the sender address.\n   */\n  function buy() public payable {\n    buyOnBehalf(msg.sender);\n  }\n\n  /**\n   * Finalize a successful crowdsale.\n   *\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\n   * Note that by default tokens are not in a released state.\n   */\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n    finalized = true;\n    emit Finalized();\n  }\n\n  /**\n   * Set policy do we need to have server-side customer ids for the investments.\n   *\n   */\n  function setRequireCustomerId(bool value) public onlyOwner {\n    requireCustomerId = value;\n    emit InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n  }\n\n  /**\n   * Set policy if all investors must be cleared on the server side first.\n   *\n   * This is e.g. for the accredited investor clearing.\n   *\n   */\n  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\n    requiredSignedAddress = value;\n    signerAddress = signer;\n    emit InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\n  }\n\n  /**\n   * Allow addresses to do early participation.\n   */\n  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\n    earlyParticipantWhitelist[addr] = status;\n    emit Whitelisted(addr, status);\n  }\n\n  /**\n   * Internal setter for the multisig wallet\n   */\n  function setMultisig(address addr) internal {\n    require(addr != 0);\n    multisigWallet = addr;\n  }\n\n  /**\n   * Crowdfund state machine management.\n   *\n   * This function has the timed transition builtin.\n   * So there is no chance of the variable being stale.\n   */\n  function getState() public view returns (State) {\n    if (finalized) return State.Finalized;\n    else if (!configured) return State.PendingConfiguration;\n    else if (now < startsAt) return State.PreFunding;\n    else if (now <= endsAt && !isCrowdsaleFull()) return State.Funding;\n    else return State.Success;\n  }\n\n  /** Internal functions that exist to provide inversion of control should they be overriden */\n\n  /** Interface for the concrete instance to interact with the token contract in a customizable way */\n  function assignTokens(address receiver, uint tokenAmount) internal;\n\n  /**\n   *  Determine if the goal was already reached in the current crowdsale\n   */\n  function isCrowdsaleFull() internal view returns (bool full);\n\n  /**\n   * Returns any excess wei received\n   * \n   * This function can be overriden to provide a different refunding method.\n   */\n  function returnExcedent(uint excedent, address receiver) internal {\n    if (excedent > 0) {\n      receiver.transfer(excedent);\n    }\n  }\n\n  /** \n   *  Calculate the amount of tokens that corresponds to the received amount.\n   *  The wei amount is returned too in case not all of it can be invested.\n   *\n   *  Note: When there's an excedent due to rounding error, it should be returned to allow refunding.\n   *  This is worked around in the current design using an appropriate amount of decimals in the FractionalERC20 standard.\n   *  The workaround is good enough for most use cases, hence the simplified function signature.\n   *  @return weiAllowed The amount of wei accepted in this transaction.\n   *  @return tokenAmount The tokens that are assigned to the receiver in this transaction.\n   */\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount);\n\n  //\n  // Modifiers\n  //\n\n  modifier inState(State state) {\n    require(getState() == state);\n    _;\n  }\n\n  modifier unsignedBuyAllowed() {\n    require(!requiredSignedAddress);\n    _;\n  }\n\n  /** Modifier allowing execution only if the crowdsale is currently running.  */\n  modifier notFinished() {\n    State current_state = getState();\n    require(current_state == State.PreFunding || current_state == State.Funding);\n    _;\n  }\n\n  modifier validCustomerId(uint128 customerId) {\n    require(customerId != 0);  // UUIDv4 sanity check\n    _;\n  }\n}\npragma solidity ^0.4.24;\n\n// Simple deployment information store inside contract storage.\ncontract DeploymentInfo {\n  uint private deployed_on;\n\n  constructor() public {\n    deployed_on = block.number;\n  }\n\n\n  function getDeploymentBlock() public view returns (uint) {\n    return deployed_on;\n  }\n}\n\n/**\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\n *\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\n *\n * Heavily modified by https://www.coinfabrik.com/\n */\n\npragma solidity ^0.4.24;\n\n\n/// @dev Tranche based pricing.\n///      Implementing \"first price\" tranches, meaning, that if a buyer's order is\n///      covering more than one tranche, the price of the lowest tranche will apply\n///      to the whole order.\ncontract TokenTranchePricing {\n\n  using SafeMath for uint;\n\n  /**\n   * Define pricing schedule using tranches.\n   */\n  struct Tranche {\n      // Amount in tokens when this tranche becomes inactive\n      uint amount;\n      // Timestamp interval [start, end)\n      // Starting timestamp (included in the interval)\n      uint start;\n      // Ending timestamp (excluded from the interval)\n      uint end;\n      // How many tokens per wei you will get while this tranche is active\n      uint price;\n  }\n  // We define offsets and size for the deserialization of ordered tuples in raw arrays\n  uint private constant amount_offset = 0;\n  uint private constant start_offset = 1;\n  uint private constant end_offset = 2;\n  uint private constant price_offset = 3;\n  uint private constant tranche_size = 4;\n\n  Tranche[] public tranches;\n\n  function getTranchesLength() public view returns (uint) {\n    return tranches.length;\n  }\n  \n  // The configuration from the constructor was moved to the configurationTokenTranchePricing function.\n  //\n  /// @dev Construction, creating a list of tranches\n  /* @param init_tranches Raw array of ordered tuples: (start amount, start timestamp, end timestamp, price) */\n  //\n  function configurationTokenTranchePricing(uint[] init_tranches) internal {\n    // Need to have tuples, length check\n    require(init_tranches.length % tranche_size == 0);\n    // A tranche with amount zero can never be selected and is therefore useless.\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\n    require(init_tranches[amount_offset] > 0);\n\n    uint input_tranches_length = init_tranches.length.div(tranche_size);\n    Tranche memory last_tranche;\n    for (uint i = 0; i < input_tranches_length; i++) {\n      uint tranche_offset = i.mul(tranche_size);\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\n      uint start = init_tranches[tranche_offset.add(start_offset)];\n      uint end = init_tranches[tranche_offset.add(end_offset)];\n      uint price = init_tranches[tranche_offset.add(price_offset)];\n      // No invalid steps\n      require(start < end && now < end);\n      // Bail out when entering unnecessary tranches\n      // This is preferably checked before deploying contract into any blockchain.\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\n              (end > last_tranche.end && amount >= last_tranche.amount));\n\n      last_tranche = Tranche(amount, start, end, price);\n      tranches.push(last_tranche);\n    }\n  }\n\n  /// @dev Get the current tranche or bail out if there is no tranche defined for the current timestamp.\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\n  /// @return Returns the struct representing the current tranche\n  function getCurrentTranche(uint tokensSold) private view returns (Tranche storage) {\n    for (uint i = 0; i < tranches.length; i++) {\n      if (tranches[i].start <= now && now < tranches[i].end && tokensSold < tranches[i].amount) {\n        return tranches[i];\n      }\n    }\n    // No tranche is currently active\n    revert();\n  }\n\n  /// @dev Get the current price. May revert if there is no tranche currently active.\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\n  /// @return The current price\n  function getCurrentPrice(uint tokensSold) public view returns (uint result) {\n    return getCurrentTranche(tokensSold).price;\n  }\n\n}\n\n// This contract has the sole objective of providing a sane concrete instance of the Crowdsale contract.\ncontract Crowdsale is GenericCrowdsale, LostAndFoundToken, DeploymentInfo, TokenTranchePricing {\n  uint public sellable_tokens;\n  uint public initial_tokens;\n  uint public milieurs_per_eth;\n  // Minimum amounts of tokens that must be bought by an investor\n  uint public minimum_buy_value;\n  address public price_agent; \n\n  /*\n   * The constructor for the crowdsale was removed given it didn't receive any arguments nor had any body.\n   *\n   * The configuration from the constructor was moved to the configurationCrowdsale function which creates the token contract and also calls the configuration functions from GenericCrowdsale and TokenTranchePricing.\n   * \n   *\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\n   * @param token_retriever Address that will handle tokens accidentally sent to the token contract. See the LostAndFoundToken and CrowdsaleToken contracts for further details.\n   */\n\n  function configurationCrowdsale(address team_multisig, uint start, uint end,\n  address token_retriever, uint[] init_tranches, uint multisig_supply, uint crowdsale_supply,\n  uint8 token_decimals) public onlyOwner {\n\n    initial_tokens = multisig_supply;\n    minimum_buy_value = uint(100).mul(10 ** uint(token_decimals));\n    token = new CrowdsaleToken(multisig_supply, token_decimals, team_multisig, token_retriever);\n    // Necessary if assignTokens mints\n    token.setMintAgent(address(this), true);\n    // Necessary if finalize is overriden to release the tokens for public trading.\n    token.setReleaseAgent(address(this));\n    // Necessary for the execution of buy function and of the subsequent CrowdsaleToken's transfer function. \n    token.setTransferAgent(address(this), true);\n    // Necessary for the delivery of bounties \n    token.setTransferAgent(team_multisig, true);\n    // Crowdsale mints to himself the initial supply\n    token.mint(address(this), crowdsale_supply);\n    // Necessary if assignTokens mints\n    token.setMintAgent(address(this), false);\n\n    sellable_tokens = crowdsale_supply;\n\n    // Configuration functionality for GenericCrowdsale.\n    configurationGenericCrowdsale(team_multisig, start, end);\n\n    // Configuration functionality for TokenTranchePricing.\n    configurationTokenTranchePricing(init_tranches);\n  }\n\n  //token assignation\n  function assignTokens(address receiver, uint tokenAmount) internal {\n    token.transfer(receiver, tokenAmount);\n  }\n\n  //token amount calculation\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount) {\n    //Divided by 1000 because eth eth_price_in_eurs is multiplied by 1000\n    uint tokensPerEth = getCurrentPrice(tokensSold).mul(milieurs_per_eth).div(1000);\n    uint maxWeiAllowed = sellable_tokens.sub(tokensSold).mul(1 ether).div(tokensPerEth);\n    weiAllowed = maxWeiAllowed.min256(weiAmount);\n\n    if (weiAmount < maxWeiAllowed) {\n      tokenAmount = tokensPerEth.mul(weiAmount).div(1 ether);\n    }\n    // With this case we let the crowdsale end even when there are rounding errors due to the tokens to wei ratio\n    else {\n      tokenAmount = sellable_tokens.sub(tokensSold);\n    }\n\n    // Require a minimum contribution of 100 fulltokens\n    require(token.balanceOf(receiver).add(tokenAmount) >= minimum_buy_value);\n  }\n\n  // Implements funding state criterion\n  function isCrowdsaleFull() internal view returns (bool full) {\n    return tokensSold >= sellable_tokens;\n  }\n\n  /**\n   * Finalize a successful crowdsale.\n   *\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\n   * Note that by default tokens are not in a released state.\n   */\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\n    //Tokens sold + bounties represent 82% of the total, the other 18% goes to the multisig, partners and market making\n    uint sold = tokensSold.add(initial_tokens);\n    uint toShare = sold.mul(18).div(82);\n\n    // Mint the 18% to the multisig\n    token.setMintAgent(address(this), true);\n    token.mint(multisigWallet, toShare);\n    token.setMintAgent(address(this), false);\n\n    // Release transfers and burn unsold tokens.\n    token.releaseTokenTransfer();\n    token.burn(token.balanceOf(address(this)));\n\n    super.finalize();\n  }\n\n  /**\n   * This function decides who handles lost tokens.\n   * Do note that this function is NOT meant to be used in a token refund mecahnism.\n   * Its sole purpose is determining who can move around ERC20 tokens accidentally sent to this contract.\n   */\n  function getLostAndFoundMaster() internal view returns (address) {\n    return owner;\n  }\n\n  // These two setters are present only to correct timestamps if they are off from their target date by more than, say, a day\n  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\n    require(now < startingTime && startingTime < endsAt);\n    startsAt = startingTime;\n  }\n\n  function setEndingTime(uint endingTime) public onlyOwner notFinished {\n    require(now < endingTime && startsAt < endingTime);\n    endsAt = endingTime;\n  }\n\n  function updateEursPerEth (uint milieurs_amount) public notFinished {\n    require(milieurs_amount >= 100);\n    require(msg.sender == price_agent);\n    milieurs_per_eth = milieurs_amount;\n  }\n\n  function updatePriceAgent(address new_price_agent) public onlyOwner notFinished {\n    price_agent = new_price_agent;\n  }\n\n  /**\n   * @param new_minimum New minimum amount of indivisible tokens to be required\n   */\n  function setMinimumBuyValue(uint new_minimum) public onlyOwner notFinished {\n    minimum_buy_value = new_minimum;\n  }\n}"
}