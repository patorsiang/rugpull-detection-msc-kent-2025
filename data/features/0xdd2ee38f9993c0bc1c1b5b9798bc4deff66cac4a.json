{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH7 CALLVALUE LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH7 CALLVALUE DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD SWAP4 POP PUSH7 PUSH2 CALLVALUE DUP7 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP3 POP PUSH2 PUSH1 SLOAD DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD SWAP2 POP PUSH1 SWAP1 POP JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 JUMPI CALLER PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 DUP5 DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP2 DUP1 PUSH1 ADD SWAP3 POP POP DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD DUP2 SWAP1 SSTORE POP POP POP POP POP STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP5 POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP4 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP DUP1 PUSH1 ADD SLOAD SWAP1 DUP1 PUSH1 ADD SLOAD SWAP1 DUP1 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 DUP1 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND SWAP1 POP DUP5 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD GT ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 PUSH7 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD MUL SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 PUSH7 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD MUL SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 PUSH6 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD MUL SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 PUSH6 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD MUL SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST PUSH1 PUSH1 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 ADD SWAP2 SWAP1 POP SSTORE POP PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 DUP9 DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD SWAP3 POP PUSH1 PUSH1 DUP9 DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD SWAP2 POP PUSH1 PUSH1 DUP9 DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP DUP3 DUP3 DUP3 SWAP6 POP SWAP6 POP SWAP6 POP POP POP POP SWAP2 SWAP4 SWAP1 SWAP3 POP JUMP JUMPDEST PUSH20 PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH20 CALLER PUSH20 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 PUSH7 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD MUL SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP2 SLOAD DUP1 SWAP3 SWAP2 SWAP1 PUSH1 ADD SWAP2 SWAP1 POP SSTORE POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH20 PUSH20 AND CALLER PUSH20 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH20 CALLER PUSH20 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH2 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH2 SWAP2 CODECOPY SWAP5 POP PUSH2 PUSH1 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD SLOAD SUB PUSH2 JUMP JUMPDEST SWAP4 POP PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP SWAP3 POP PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP4 PUSH1 SLOAD PUSH2 JUMP JUMPDEST SWAP1 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH20 PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH20 CALLER PUSH20 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH20 PUSH20 AND CALLER PUSH20 AND EQ JUMPDEST DUP1 PUSH2 JUMPI POP PUSH20 CALLER PUSH20 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 PUSH3 PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE POP PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE POP PUSH1 SLOAD PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST JUMP JUMPDEST PUSH20 PUSH20 AND CALLER PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH20 CALLER PUSH20 AND EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 ISZERO ISZERO PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP JUMPDEST JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SLOAD DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 ADD PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 DUP5 ADD LT ISZERO SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH2 PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH2 JUMP JUMPDEST EQ JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 JUMP JUMPDEST POP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH1 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 DUP7 EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP SWAP5 POP PUSH2 JUMP JUMPDEST DUP6 SWAP4 POP JUMPDEST PUSH1 DUP5 EQ ISZERO ISZERO PUSH2 JUMPI DUP3 DUP1 PUSH1 ADD SWAP4 POP POP PUSH1 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP4 POP PUSH2 JUMP JUMPDEST DUP3 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 MUL PUSH1 ADD DUP3 ADD PUSH1 MSTORE POP SWAP2 POP PUSH1 DUP4 SUB SWAP1 POP JUMPDEST PUSH1 DUP7 EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP7 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD PUSH1 ADD PUSH32 MUL DUP3 DUP3 DUP1 PUSH1 SWAP1 SUB SWAP4 POP DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH31 NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP PUSH1 DUP7 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP6 POP PUSH2 JUMP JUMPDEST DUP2 SWAP5 POP JUMPDEST POP POP POP POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE POP PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH2 PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH2 JUMP JUMPDEST EQ JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 JUMP JUMPDEST POP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP7 DUP6 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP1 POP DUP3 GASPRICE MUL PUSH8 ADD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 MUL SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP3 PUSH1 DUP9 DUP9 DUP9 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP7 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP1 PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH2 PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH2 JUMP JUMPDEST EQ JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 JUMP JUMPDEST POP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP7 DUP6 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP1 POP DUP3 GASPRICE MUL PUSH8 ADD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 MUL SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH4 DUP3 DUP9 DUP9 DUP9 DUP9 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP7 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP1 PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP2 POP JUMPDEST POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 EXTCODESIZE SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH20 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH2 PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH20 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH2 PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH20 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH2 PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH20 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH2 PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH20 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH20 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH20 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP7 SWAP4 POP PUSH1 SWAP3 POP PUSH1 SWAP2 POP PUSH1 SWAP1 POP JUMPDEST DUP4 MLOAD DUP2 LT ISZERO PUSH2 JUMPI PUSH1 PUSH32 MUL DUP5 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD MLOAD PUSH32 SWAP1 DIV PUSH32 MUL PUSH31 NOT AND LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH32 MUL DUP5 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD MLOAD PUSH32 SWAP1 DIV PUSH32 MUL PUSH31 NOT AND GT ISZERO JUMPDEST ISZERO PUSH2 JUMPI DUP2 ISZERO PUSH2 JUMPI PUSH1 DUP7 EQ ISZERO PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP6 DUP1 PUSH1 SWAP1 SUB SWAP7 POP POP JUMPDEST PUSH1 DUP4 MUL SWAP3 POP PUSH1 DUP5 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD MLOAD PUSH32 SWAP1 DIV PUSH32 MUL PUSH32 SWAP1 DIV SUB DUP4 ADD SWAP3 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH32 MUL DUP5 DUP3 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD MLOAD PUSH32 SWAP1 DIV PUSH32 MUL PUSH31 NOT AND EQ ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP JUMPDEST JUMPDEST DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 DUP7 GT ISZERO PUSH2 JUMPI DUP6 PUSH1 EXP DUP4 MUL SWAP3 POP JUMPDEST DUP3 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 DUP15 SWAP9 POP DUP14 SWAP8 POP DUP13 SWAP7 POP DUP12 SWAP6 POP DUP11 SWAP5 POP DUP5 MLOAD DUP7 MLOAD DUP9 MLOAD DUP11 MLOAD DUP13 MLOAD ADD ADD ADD ADD PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 MUL PUSH1 ADD DUP3 ADD PUSH1 MSTORE POP SWAP4 POP DUP4 SWAP3 POP PUSH1 SWAP2 POP PUSH1 SWAP1 POP JUMPDEST DUP9 MLOAD DUP2 LT ISZERO PUSH2 JUMPI DUP9 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD MLOAD PUSH32 SWAP1 DIV PUSH32 MUL DUP4 DUP4 DUP1 PUSH1 ADD SWAP5 POP DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH31 NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST DUP8 MLOAD DUP2 LT ISZERO PUSH2 JUMPI DUP8 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD MLOAD PUSH32 SWAP1 DIV PUSH32 MUL DUP4 DUP4 DUP1 PUSH1 ADD SWAP5 POP DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH31 NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST DUP7 MLOAD DUP2 LT ISZERO PUSH2 JUMPI DUP7 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD MLOAD PUSH32 SWAP1 DIV PUSH32 MUL DUP4 DUP4 DUP1 PUSH1 ADD SWAP5 POP DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH31 NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST DUP6 MLOAD DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD MLOAD PUSH32 SWAP1 DIV PUSH32 MUL DUP4 DUP4 DUP1 PUSH1 ADD SWAP5 POP DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH31 NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST DUP5 MLOAD DUP2 LT ISZERO PUSH2 JUMPI DUP5 DUP2 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD MLOAD PUSH32 SWAP1 DIV PUSH32 MUL DUP4 DUP4 DUP1 PUSH1 ADD SWAP5 POP DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH31 NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP DUP1 DUP1 PUSH1 ADD SWAP2 POP POP PUSH2 JUMP JUMPDEST DUP3 SWAP10 POP POP POP POP POP POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST DUP1 PUSH1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH2 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 PUSH1 SWAP1 SSTORE POP PUSH1 ADD PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP STOP JUMPDEST SSTORE MSTORE UNKNOWN_0x4c UNKNOWN_0x5d SHA3 JUMPDEST UNKNOWN_0x27 PUSH11 UNKNOWN_0x2f PUSH2 UNKNOWN_0x2e PUSH19 BALANCE UNKNOWN_0x2f PUSH10 PUSH22 PUSH28 PUSH15 UNKNOWN_0x22 PUSH17 UNKNOWN_0x24 PUSH28 UNKNOWN_0x4f UNKNOWN_0x4e PUSH6 PUSH26 PUSH25 CODECOPY MLOAD PUSH2 PUSH9 PUSH6 CODECOPY PUSH7 PUSH21 PUSH19 JUMP PUSH6 UNKNOWN_0x2c UNKNOWN_0x22 PUSH15 PUSH25 DUP14 UNKNOWN_0xe8 SLT INVALID_0x7e",
  "opcode_entropy": 4.854664405064194,
  "opcode_count": 5552,
  "unique_opcodes": 99,
  "byte_entropy": 5.278127075482101,
  "byte_60": 0.0648786717752235,
  "byte_40": 0.009025117071094083,
  "byte_52": 0.014985100042571307,
  "byte_36": 0.00034057045551298427,
  "byte_15": 0.01924223073648361,
  "byte_61": 0.034908471690080885,
  "byte_00": 0.12643678160919541,
  "byte_fa": 0.00034057045551298427,
  "byte_57": 0.012686249467858663,
  "byte_35": 0.001362281822051937,
  "byte_7c": 0.0009365687526607067,
  "byte_01": 0.039165602383993185,
  "byte_90": 0.0334610472541507,
  "byte_04": 0.0066411238825031926,
  "byte_63": 0.0035759897828863347,
  "byte_ff": 0.2034908471690081,
  "byte_16": 0.013707960834397615,
  "byte_80": 0.025627926777352063,
  "byte_13": 0.001106853980417199,
  "byte_98": 0.00034057045551298427,
  "byte_e0": 0.0008514261387824606,
  "byte_76": 0.0005108556832694764,
  "byte_14": 0.004597701149425287,
  "byte_02": 0.008343976160068114,
  "byte_27": 0.0019582801191996594,
  "byte_dc": 0.0005108556832694764,
  "byte_29": 0.001362281822051937,
  "byte_7e": 0.0017028522775649213,
  "byte_03": 0.0066411238825031926,
  "byte_34": 0.0022988505747126436,
  "byte_70": 0.001191996594295445,
  "byte_1d": 0.0007662835249042146,
  "byte_b8": 0.00017028522775649213,
  "byte_38": 0.0008514261387824606,
  "byte_bb": 0.0006811409110259685,
  "byte_50": 0.03635589612601107,
  "byte_09": 0.0030651340996168583,
  "byte_4e": 0.00017028522775649213,
  "byte_86": 0.0020434227330779057,
  "byte_fb": 0.0005959982971477225,
  "byte_b6": 0.0009365687526607067,
  "byte_55": 0.0030651340996168583,
  "byte_a3": 0.0005108556832694764,
  "byte_73": 0.011749680715197957,
  "byte_d6": 8.514261387824607e-05,
  "byte_df": 0.00017028522775649213,
  "byte_75": 0.0004257130693912303,
  "byte_f1": 0.0014474244359301831,
  "byte_2b": 0.0028948488718603662,
  "byte_21": 0.0007662835249042146,
  "byte_05": 0.001106853980417199,
  "byte_8d": 0.00034057045551298427,
  "byte_a5": 0.0005959982971477225,
  "byte_cb": 8.514261387824607e-05,
  "byte_5b": 0.024521072796934867,
  "byte_93": 0.002213707960834398,
  "byte_4a": 0.0005108556832694764,
  "byte_a0": 0.0002554278416347382,
  "byte_23": 0.0007662835249042146,
  "byte_9a": 0.0008514261387824606,
  "byte_43": 0.0010217113665389529,
  "byte_7d": 0.0005959982971477225,
  "byte_a2": 0.0005108556832694764,
  "byte_06": 0.002639421030225628,
  "byte_0b": 0.001277139208173691,
  "byte_9d": 8.514261387824607e-05,
  "byte_8c": 0.00034057045551298427,
  "byte_39": 0.0007662835249042146,
  "byte_94": 0.001191996594295445,
  "byte_e6": 8.514261387824607e-05,
  "byte_20": 0.01992337164750958,
  "byte_45": 0.0004257130693912303,
  "byte_91": 0.008343976160068114,
  "byte_b4": 0.0009365687526607067,
  "byte_c5": 0.0002554278416347382,
  "byte_49": 0.0006811409110259685,
  "byte_9b": 0.00034057045551298427,
  "byte_c0": 0.0004257130693912303,
  "byte_48": 0.0017028522775649213,
  "byte_c8": 0.0002554278416347382,
  "byte_d3": 0.0004257130693912303,
  "byte_42": 0.00034057045551298427,
  "byte_e4": 0.0002554278416347382,
  "byte_f4": 0.0005959982971477225,
  "byte_eb": 0.0002554278416347382,
  "byte_e2": 0.0006811409110259685,
  "byte_c4": 0.00017028522775649213,
  "byte_bc": 0.0005959982971477225,
  "byte_f5": 8.514261387824607e-05,
  "byte_ed": 0.0004257130693912303,
  "byte_c9": 0.0006811409110259685,
  "byte_fc": 0.0017028522775649213,
  "byte_6a": 0.0006811409110259685,
  "byte_3f": 0.0004257130693912303,
  "byte_f7": 0.0002554278416347382,
  "byte_07": 0.0015325670498084292,
  "byte_66": 0.0007662835249042146,
  "byte_f2": 0.0005959982971477225,
  "byte_6f": 0.0017879948914431673,
  "byte_c1": 0.0007662835249042146,
  "byte_10": 0.003916560238399319,
  "byte_fd": 0.004342273307790549,
  "byte_81": 0.027756492124308217,
  "byte_26": 0.0005959982971477225,
  "byte_fe": 0.0019582801191996594,
  "byte_3b": 0.001277139208173691,
  "byte_56": 0.012175393784589187,
  "byte_44": 0.0005959982971477225,
  "byte_92": 0.00238399318859089,
  "byte_53": 0.0008514261387824606,
  "byte_0a": 0.0062154108131119625,
  "byte_54": 0.008173690932311623,
  "byte_84": 0.00280970625798212,
  "byte_83": 0.008599404001702853,
  "byte_08": 0.003150276713495104,
  "byte_33": 0.0018731375053214134,
  "byte_82": 0.006385696040868455,
  "byte_19": 0.0036611323967645805,
  "byte_17": 0.0020434227330779057,
  "byte_31": 0.001362281822051937,
  "byte_d8": 0.001106853980417199,
  "byte_1b": 0.001277139208173691,
  "byte_51": 0.013707960834397615,
  "byte_85": 0.00238399318859089,
  "byte_f3": 0.001362281822051937,
  "byte_de": 0.0002554278416347382,
  "byte_1f": 0.0030651340996168583,
  "byte_37": 0.0004257130693912303,
  "byte_0c": 0.0014474244359301831,
  "byte_ea": 0.0005108556832694764,
  "byte_0d": 0.0005959982971477225,
  "byte_47": 0.0006811409110259685,
  "byte_6c": 0.001106853980417199,
  "byte_74": 0.002213707960834398,
  "byte_46": 0.0005959982971477225,
  "byte_2c": 0.0020434227330779057,
  "byte_87": 0.0017028522775649213,
  "byte_8f": 0.0005108556832694764,
  "byte_99": 0.00034057045551298427,
  "byte_0e": 0.001277139208173691,
  "byte_32": 0.0010217113665389529,
  "byte_a6": 8.514261387824607e-05,
  "byte_ae": 0.0004257130693912303,
  "byte_e9": 0.0002554278416347382,
  "byte_ef": 0.0006811409110259685,
  "byte_11": 0.0017879948914431673,
  "byte_12": 0.0009365687526607067,
  "byte_4b": 0.0006811409110259685,
  "byte_db": 0.00017028522775649213,
  "byte_6d": 0.0009365687526607067,
  "byte_3a": 0.00238399318859089,
  "byte_78": 0.001106853980417199,
  "byte_58": 0.0008514261387824606,
  "byte_64": 0.001191996594295445,
  "byte_88": 0.002213707960834398,
  "byte_f8": 0.00034057045551298427,
  "byte_dd": 0.00017028522775649213,
  "byte_e8": 0.00017028522775649213,
  "byte_4c": 0.0009365687526607067,
  "byte_69": 0.001277139208173691,
  "byte_c6": 0.0006811409110259685,
  "byte_bf": 0.00034057045551298427,
  "byte_65": 0.0032354193273733504,
  "byte_5a": 0.001191996594295445,
  "byte_7a": 0.0005959982971477225,
  "byte_95": 0.001191996594295445,
  "byte_ac": 0.0008514261387824606,
  "byte_af": 0.0007662835249042146,
  "byte_6e": 0.0021285653469561515,
  "byte_c2": 0.0006811409110259685,
  "byte_d1": 0.0006811409110259685,
  "byte_28": 0.0010217113665389529,
  "byte_da": 0.0006811409110259685,
  "byte_3e": 0.0006811409110259685,
  "byte_5d": 0.0009365687526607067,
  "byte_1e": 0.00034057045551298427,
  "byte_5c": 0.0004257130693912303,
  "byte_d4": 8.514261387824607e-05,
  "byte_0f": 0.0005108556832694764,
  "byte_71": 0.00017028522775649213,
  "byte_7f": 0.0030651340996168583,
  "byte_22": 0.0028948488718603662,
  "byte_72": 0.0015325670498084292,
  "byte_62": 0.0005108556832694764,
  "byte_30": 0.001277139208173691,
  "byte_24": 0.0014474244359301831,
  "byte_7b": 0.001106853980417199,
  "byte_79": 0.0008514261387824606,
  "byte_e5": 0.0002554278416347382,
  "byte_bd": 0.00034057045551298427,
  "byte_d9": 0.0002554278416347382,
  "byte_b1": 0.0008514261387824606,
  "byte_d7": 8.514261387824607e-05,
  "byte_cc": 0.0005959982971477225,
  "byte_77": 0.00034057045551298427,
  "byte_9e": 8.514261387824607e-05,
  "byte_4f": 0.0005959982971477225,
  "byte_4d": 0.0005959982971477225,
  "byte_8b": 0.0005959982971477225,
  "byte_96": 0.0004257130693912303,
  "byte_a9": 0.0006811409110259685,
  "byte_e1": 0.00034057045551298427,
  "byte_59": 0.0005959982971477225,
  "byte_1a": 0.001191996594295445,
  "byte_2f": 0.0005959982971477225,
  "byte_18": 0.0002554278416347382,
  "byte_2e": 0.0010217113665389529,
  "byte_67": 0.0005108556832694764,
  "byte_b3": 0.0005108556832694764,
  "byte_a7": 0.0004257130693912303,
  "byte_b2": 0.00017028522775649213,
  "byte_d0": 0.00017028522775649213,
  "byte_25": 0.0005959982971477225,
  "byte_ee": 0.00017028522775649213,
  "byte_d2": 0.0002554278416347382,
  "byte_e3": 8.514261387824607e-05,
  "byte_1c": 0.0004257130693912303,
  "byte_a8": 0.00017028522775649213,
  "byte_d5": 0.0004257130693912303,
  "byte_ba": 8.514261387824607e-05,
  "byte_68": 0.001191996594295445,
  "byte_89": 8.514261387824607e-05,
  "byte_9f": 0.00034057045551298427,
  "byte_5f": 0.0006811409110259685,
  "byte_9c": 0.0002554278416347382,
  "byte_f6": 0.0004257130693912303,
  "byte_3d": 0.0002554278416347382,
  "byte_b7": 0.00017028522775649213,
  "byte_cf": 0.00034057045551298427,
  "byte_6b": 0.00034057045551298427,
  "byte_ce": 0.00017028522775649213,
  "byte_5e": 0.00017028522775649213,
  "byte_2a": 0.0007662835249042146,
  "byte_3c": 0.0002554278416347382,
  "byte_ab": 0.00034057045551298427,
  "byte_aa": 0.00017028522775649213,
  "byte_8e": 8.514261387824607e-05,
  "byte_97": 8.514261387824607e-05,
  "byte_8a": 0.00017028522775649213,
  "byte_b9": 8.514261387824607e-05,
  "byte_ca": 8.514261387824607e-05,
  "byte_2d": 8.514261387824607e-05,
  "byte_41": 0.00017028522775649213,
  "byte_a1": 0.00017028522775649213,
  "byte_f0": 8.514261387824607e-05,
  "num_nodes": 16,
  "num_edges": 21,
  "avg_degree": 2.625,
  "density": 0.0875,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 95,
  "event_nums": 0,
  "creation_block": 4438536,
  "creation_timestamp": 1509097047,
  "life_time": 161901.0,
  "duration_seconds": 2253912.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 17,
  "num_buyers": 10,
  "num_sellers": 13,
  "num_creator_transfers": 51,
  "buy_amt": 9.603992570503572e+17,
  "sell_amt": 1.023e+18,
  "avg_value": 2.066040892760789e+16,
  "txn_per_block": 0.0005867747155686773,
  "avg_gas_limit": 300026.7052631579,
  "std_gas_limit": 380174.82644884306,
  "avg_gas_used": 107623.12631578947,
  "std_gas_used": 335052.65796827385,
  "avg_gas_price": 6896842105.2736845,
  "std_gas_price": 8815434462.606083,
  "depositfunds_num": 4,
  "update_num": 1,
  "__callback_num": 23,
  "timeline_sequence": [
    [
      4438536,
      1509097047,
      13,
      59,
      0,
      3208097,
      6200000000,
      0,
      1,
      5144687,
      3208097,
      18682417
    ],
    [
      4438558,
      1509097418,
      15,
      28,
      40000000000000000,
      1000000,
      8000000000,
      0,
      1,
      1303315,
      21708,
      18682395
    ],
    [
      4438570,
      1509097542,
      16,
      62,
      70000000000000000,
      343674,
      8000000000,
      0,
      1,
      3198689,
      229116,
      18682383
    ],
    [
      4438601,
      1509097988,
      1,
      101,
      200000000000000000,
      702382,
      8000000000,
      0,
      1,
      3951661,
      468255,
      18682352
    ],
    [
      4438624,
      1509098485,
      20,
      54,
      20000000000000000,
      1000000,
      20000000000,
      0,
      1,
      3742288,
      251634,
      18682329
    ],
    [
      4438633,
      1509098554,
      314160,
      22,
      0,
      500000,
      20000000000,
      0,
      1,
      1622521,
      209316,
      18682320
    ],
    [
      4441598,
      1509140250,
      29,
      32,
      45000000000000000,
      228010,
      4000000000,
      0,
      1,
      1728067,
      152007,
      18679355
    ],
    [
      4444823,
      1509184995,
      315730,
      38,
      0,
      500000,
      20000000000,
      0,
      1,
      2193141,
      180482,
      18676130
    ],
    [
      4444826,
      1509185029,
      315731,
      19,
      0,
      500000,
      20000000000,
      0,
      1,
      883996,
      178747,
      18676127
    ],
    [
      4450619,
      1509265006,
      30,
      119,
      119000000000000000,
      445392,
      2000000000,
      0,
      1,
      4322919,
      296928,
      18670334
    ],
    [
      4450810,
      1509267980,
      31,
      101,
      19000000000000000,
      89847,
      10000000000,
      0,
      1,
      3964377,
      59898,
      18670143
    ],
    [
      4451055,
      1509271450,
      317436,
      90,
      0,
      500000,
      20000000000,
      0,
      1,
      3808557,
      181043,
      18669898
    ],
    [
      4451058,
      1509271475,
      317437,
      23,
      0,
      500000,
      20000000000,
      0,
      1,
      1122810,
      193747,
      18669895
    ],
    [
      4456867,
      1509353336,
      0,
      38,
      100000000000000000,
      90000,
      5000000000,
      0,
      1,
      2174983,
      21708,
      18664086
    ],
    [
      4456881,
      1509353525,
      32,
      97,
      50000000000000000,
      259065,
      5000000001,
      0,
      1,
      5148155,
      172710,
      18664072
    ],
    [
      4457199,
      1509357915,
      318809,
      61,
      0,
      500000,
      20000000000,
      0,
      1,
      2183347,
      180482,
      18663754
    ],
    [
      4457202,
      1509357958,
      318810,
      63,
      0,
      500000,
      20000000000,
      0,
      1,
      3237226,
      193811,
      18663751
    ],
    [
      4457776,
      1509365887,
      0,
      57,
      10000000000000000,
      90000,
      20000000000,
      0,
      1,
      1717292,
      89898,
      18663177
    ],
    [
      4457930,
      1509367779,
      15,
      20,
      100000000000000000,
      361225,
      8000000000,
      0,
      1,
      921604,
      261225,
      18663023
    ],
    [
      4459640,
      1509391978,
      319,
      37,
      20000000000000000,
      143401,
      1000000000,
      0,
      1,
      1021841,
      95601,
      18661313
    ],
    [
      4463362,
      1509444385,
      319686,
      21,
      0,
      500000,
      20000000000,
      0,
      1,
      874342,
      181107,
      18657591
    ],
    [
      4463365,
      1509444416,
      319687,
      24,
      0,
      500000,
      20000000000,
      0,
      1,
      985098,
      193811,
      18657588
    ],
    [
      4469178,
      1509524504,
      1,
      17,
      110000000000000000,
      445392,
      10000000000,
      0,
      1,
      969539,
      296928,
      18651775
    ],
    [
      4469634,
      1509530896,
      320622,
      7,
      0,
      500000,
      20000000000,
      0,
      1,
      598697,
      181107,
      18651319
    ],
    [
      4469636,
      1509530921,
      320623,
      28,
      0,
      500000,
      20000000000,
      0,
      1,
      4877137,
      193811,
      18651317
    ],
    [
      4475737,
      1509617337,
      321364,
      48,
      0,
      500000,
      20000000000,
      0,
      1,
      2624552,
      224945,
      18645216
    ],
    [
      4475739,
      1509617370,
      321365,
      57,
      0,
      500000,
      20000000000,
      0,
      1,
      2279103,
      132358,
      18645214
    ],
    [
      4481905,
      1509703779,
      322103,
      74,
      0,
      500000,
      20000000000,
      0,
      1,
      3585431,
      225009,
      18639048
    ],
    [
      4481908,
      1509703815,
      322104,
      26,
      0,
      500000,
      20000000000,
      0,
      1,
      2210060,
      132294,
      18639045
    ],
    [
      4486637,
      1509769990,
      3,
      105,
      10000000000000000,
      134847,
      8000000000,
      0,
      1,
      4249845,
      89898,
      18634316
    ],
    [
      4488112,
      1509790266,
      323043,
      62,
      0,
      500000,
      20000000000,
      0,
      1,
      5720550,
      180053,
      18632841
    ],
    [
      4488115,
      1509790306,
      323044,
      8,
      0,
      500000,
      20000000000,
      0,
      1,
      428730,
      178108,
      18632838
    ],
    [
      4492652,
      1509852522,
      1,
      15,
      50000000000000000,
      90000,
      8000000000,
      0,
      1,
      497074,
      21708,
      18628301
    ],
    [
      4494433,
      1509876725,
      323933,
      82,
      0,
      500000,
      20000000000,
      0,
      1,
      2945951,
      225009,
      18626520
    ],
    [
      4494435,
      1509876762,
      323934,
      42,
      0,
      500000,
      20000000000,
      0,
      1,
      1909450,
      132358,
      18626518
    ],
    [
      4500628,
      1509963185,
      324618,
      21,
      0,
      500000,
      20000000000,
      0,
      1,
      901490,
      225009,
      18620325
    ],
    [
      4500630,
      1509963196,
      324619,
      12,
      0,
      500000,
      20000000000,
      0,
      1,
      534188,
      132358,
      18620323
    ],
    [
      4506813,
      1510049614,
      325701,
      3,
      0,
      500000,
      20000000000,
      0,
      1,
      393067,
      225009,
      18614140
    ],
    [
      4506816,
      1510049628,
      325702,
      5,
      0,
      500000,
      20000000000,
      0,
      0,
      271100,
      118028,
      18614137
    ],
    [
      4512448,
      1510127321,
      2,
      52,
      30000000000000000,
      90000,
      2000000000,
      0,
      1,
      2837418,
      21708,
      18608505
    ],
    [
      4512448,
      1510127321,
      3,
      134,
      0,
      90000,
      2000000000,
      0,
      1,
      6596872,
      42474,
      18608505
    ],
    [
      4588680,
      1511185183,
      0,
      110,
      10000000000000000,
      134847,
      20000000000,
      0,
      1,
      5058062,
      89898,
      18532273
    ],
    [
      4598152,
      1511318479,
      7,
      114,
      10000000000000000,
      112347,
      20000000000,
      0,
      1,
      3008916,
      74898,
      18522801
    ],
    [
      4600437,
      1511350959,
      1,
      130,
      10000000000000000,
      89847,
      20000000000,
      0,
      1,
      4313449,
      59898,
      18520516
    ],
    [
      4438624,
      1509098485,
      0,
      0,
      10033271420863130,
      770423,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4438633,
      1509098554,
      0,
      0,
      251100000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4438633,
      1509098554,
      0,
      0,
      13500000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4438633,
      1509098554,
      0,
      0,
      2700000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4438633,
      1509098554,
      0,
      0,
      2700000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4438633,
      1509098554,
      0,
      0,
      10000000000000000,
      300309,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4444823,
      1509184995,
      0,
      0,
      10033271420863130,
      318769,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4444826,
      1509185029,
      0,
      0,
      37200000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4444826,
      1509185029,
      0,
      0,
      2000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4444826,
      1509185029,
      0,
      0,
      400000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4444826,
      1509185029,
      0,
      0,
      400000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4444826,
      1509185029,
      0,
      0,
      10000000000000000,
      330401,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4451055,
      1509271450,
      0,
      0,
      10033271420863130,
      318217,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4451058,
      1509271475,
      0,
      0,
      111600000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4451058,
      1509271475,
      0,
      0,
      6000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4451058,
      1509271475,
      0,
      0,
      1200000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4451058,
      1509271475,
      0,
      0,
      1200000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4451058,
      1509271475,
      0,
      0,
      10000000000000000,
      315635,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4457199,
      1509357915,
      0,
      0,
      10033271420863130,
      318769,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4457202,
      1509357958,
      0,
      0,
      46500000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4457202,
      1509357958,
      0,
      0,
      2500000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4457202,
      1509357958,
      0,
      0,
      500000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4457202,
      1509357958,
      0,
      0,
      500000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4457202,
      1509357958,
      0,
      0,
      10000000000000000,
      315572,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4463362,
      1509444385,
      0,
      0,
      10033271420863130,
      318154,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4463365,
      1509444416,
      0,
      0,
      120900000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4463365,
      1509444416,
      0,
      0,
      6500000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4463365,
      1509444416,
      0,
      0,
      1300000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4463365,
      1509444416,
      0,
      0,
      1300000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4463365,
      1509444416,
      0,
      0,
      10000000000000000,
      315572,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4469634,
      1509530896,
      0,
      0,
      10033271420863130,
      318154,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4469636,
      1509530921,
      0,
      0,
      102300000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4469636,
      1509530921,
      0,
      0,
      5500000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4469636,
      1509530921,
      0,
      0,
      1100000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4469636,
      1509530921,
      0,
      0,
      1100000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4469636,
      1509530921,
      0,
      0,
      10000000000000000,
      315572,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4475737,
      1509617337,
      0,
      0,
      10033271420863130,
      275985,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4475739,
      1509617370,
      0,
      0,
      10000000000000000,
      376065,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4481905,
      1509703779,
      0,
      0,
      10033271420863130,
      275922,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4481908,
      1509703815,
      0,
      0,
      10000000000000000,
      376128,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4488112,
      1509790266,
      0,
      0,
      10033271420863130,
      319191,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4488115,
      1509790306,
      0,
      0,
      9300000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4488115,
      1509790306,
      0,
      0,
      500000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4488115,
      1509790306,
      0,
      0,
      100000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4488115,
      1509790306,
      0,
      0,
      100000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4488115,
      1509790306,
      0,
      0,
      10000000000000000,
      331030,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4494433,
      1509876725,
      0,
      0,
      10033271420863130,
      275922,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4494435,
      1509876762,
      0,
      0,
      10000000000000000,
      376065,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4500628,
      1509963185,
      0,
      0,
      10033271420863130,
      275922,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4500630,
      1509963196,
      0,
      0,
      10000000000000000,
      376065,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4506813,
      1510049614,
      0,
      0,
      10033271420863130,
      275922,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.2;\n\n// import \"http://github.com/oraclize/ethereum-api/oraclizeAPI_0.4.sol\";\n\n// <ORACLIZE_API>\n/*\nCopyright (c) 2015-2016 Oraclize SRL\nCopyright (c) 2016 Oraclize LTD\n\n\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\n\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\n\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\npragma solidity ^0.4.0;//please import oraclizeAPI_pre0.4.sol when solidity < 0.4.0\n\ncontract OraclizeI {\n    address public cbAddress;\n    function query(uint _timestamp, string _datasource, string _arg) payable returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) payable returns (bytes32 _id);\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) payable returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) payable returns (bytes32 _id);\n    function queryN(uint _timestamp, string _datasource, bytes _argN) payable returns (bytes32 _id);\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) payable returns (bytes32 _id);\n    function getPrice(string _datasource) returns (uint _dsprice);\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\n    function useCoupon(string _coupon);\n    function setProofType(byte _proofType);\n    function setConfig(bytes32 _config);\n    function setCustomGasPrice(uint _gasPrice);\n    function randomDS_getSessionPubKeyHash() returns(bytes32);\n}\ncontract OraclizeAddrResolverI {\n    function getAddress() returns (address _addr);\n}\ncontract usingOraclize {\n    uint constant day = 60*60*24;\n    uint constant week = 60*60*24*7;\n    uint constant month = 60*60*24*30;\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_TLSNotary = 0x10;\n    byte constant proofType_Android = 0x20;\n    byte constant proofType_Ledger = 0x30;\n    byte constant proofType_Native = 0xF0;\n    byte constant proofStorage_IPFS = 0x01;\n    uint8 constant networkID_auto = 0;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_consensys = 161;\n\n    OraclizeAddrResolverI OAR;\n\n    OraclizeI oraclize;\n    modifier oraclizeAPI {\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0)) oraclize_setNetwork(networkID_auto);\n        oraclize = OraclizeI(OAR.getAddress());\n        _;\n    }\n    modifier coupon(string code){\n        oraclize = OraclizeI(OAR.getAddress());\n        oraclize.useCoupon(code);\n        _;\n    }\n\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n            oraclize_setNetworkName(\"eth_mainnet\");\n            return true;\n        }\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n            oraclize_setNetworkName(\"eth_ropsten3\");\n            return true;\n        }\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n            oraclize_setNetworkName(\"eth_kovan\");\n            return true;\n        }\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n            oraclize_setNetworkName(\"eth_rinkeby\");\n            return true;\n        }\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n            return true;\n        }\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n            return true;\n        }\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n            return true;\n        }\n        return false;\n    }\n\n    function __callback(bytes32 myid, string result) {\n        __callback(myid, result, new bytes(0));\n    }\n    function __callback(bytes32 myid, string result, bytes proof) {\n    }\n    \n    function oraclize_useCoupon(string code) oraclizeAPI internal {\n        oraclize.useCoupon(code);\n    }\n\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource);\n    }\n\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(0, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(0, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];       \n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN.value(price)(0, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];       \n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n        return oraclize.cbAddress();\n    }\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n        return oraclize.setProofType(proofP);\n    }\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\n        return oraclize.setCustomGasPrice(gasPrice);\n    }\n    function oraclize_setConfig(bytes32 config) oraclizeAPI internal {\n        return oraclize.setConfig(config);\n    }\n    \n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\n        return oraclize.randomDS_getSessionPubKeyHash();\n    }\n\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\n        assembly {\n            _size := extcodesize(_addr)\n        }\n    }\n\n    function parseAddr(string _a) internal returns (address){\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i=2; i<2+2*20; i+=2){\n            iaddr *= 256;\n            b1 = uint160(tmp[i]);\n            b2 = uint160(tmp[i+1]);\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n            iaddr += (b1*16+b2);\n        }\n        return address(iaddr);\n    }\n\n    function strCompare(string _a, string _b) internal returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n    }\n\n    function indexOf(string _haystack, string _needle) internal returns (int) {\n        bytes memory h = bytes(_haystack);\n        bytes memory n = bytes(_needle);\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\n            return -1;\n        else if(h.length > (2**128 -1))\n            return -1;\n        else\n        {\n            uint subindex = 0;\n            for (uint i = 0; i < h.length; i ++)\n            {\n                if (h[i] == n[0])\n                {\n                    subindex = 1;\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n                    {\n                        subindex++;\n                    }\n                    if(subindex == n.length)\n                        return int(i);\n                }\n            }\n            return -1;\n        }\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n\n    function strConcat(string _a, string _b) internal returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n\n    // parseInt\n    function parseInt(string _a) internal returns (uint) {\n        return parseInt(_a, 0);\n    }\n\n    // parseInt(parseFloat*10^_b)\n    function parseInt(string _a, uint _b) internal returns (uint) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i=0; i<bresult.length; i++){\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n                if (decimals){\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(bresult[i]) - 48;\n            } else if (bresult[i] == 46) decimals = true;\n        }\n        if (_b > 0) mint *= 10**_b;\n        return mint;\n    }\n\n    function uint2str(uint i) internal returns (string){\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n    \n    function stra2cbor(string[] arr) internal returns (bytes) {\n            uint arrlen = arr.length;\n\n            // get correct cbor output length\n            uint outputlen = 0;\n            bytes[] memory elemArray = new bytes[](arrlen);\n            for (uint i = 0; i < arrlen; i++) {\n                elemArray[i] = (bytes(arr[i]));\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\n            }\n            uint ctr = 0;\n            uint cborlen = arrlen + 0x80;\n            outputlen += byte(cborlen).length;\n            bytes memory res = new bytes(outputlen);\n\n            while (byte(cborlen).length > ctr) {\n                res[ctr] = byte(cborlen)[ctr];\n                ctr++;\n            }\n            for (i = 0; i < arrlen; i++) {\n                res[ctr] = 0x5F;\n                ctr++;\n                for (uint x = 0; x < elemArray[i].length; x++) {\n                    // if there's a bug with larger strings, this may be the culprit\n                    if (x % 23 == 0) {\n                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\n                        elemcborlen += 0x40;\n                        uint lctr = ctr;\n                        while (byte(elemcborlen).length > ctr - lctr) {\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\n                            ctr++;\n                        }\n                    }\n                    res[ctr] = elemArray[i][x];\n                    ctr++;\n                }\n                res[ctr] = 0xFF;\n                ctr++;\n            }\n            return res;\n        }\n\n    function ba2cbor(bytes[] arr) internal returns (bytes) {\n            uint arrlen = arr.length;\n\n            // get correct cbor output length\n            uint outputlen = 0;\n            bytes[] memory elemArray = new bytes[](arrlen);\n            for (uint i = 0; i < arrlen; i++) {\n                elemArray[i] = (bytes(arr[i]));\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\n            }\n            uint ctr = 0;\n            uint cborlen = arrlen + 0x80;\n            outputlen += byte(cborlen).length;\n            bytes memory res = new bytes(outputlen);\n\n            while (byte(cborlen).length > ctr) {\n                res[ctr] = byte(cborlen)[ctr];\n                ctr++;\n            }\n            for (i = 0; i < arrlen; i++) {\n                res[ctr] = 0x5F;\n                ctr++;\n                for (uint x = 0; x < elemArray[i].length; x++) {\n                    // if there's a bug with larger strings, this may be the culprit\n                    if (x % 23 == 0) {\n                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\n                        elemcborlen += 0x40;\n                        uint lctr = ctr;\n                        while (byte(elemcborlen).length > ctr - lctr) {\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\n                            ctr++;\n                        }\n                    }\n                    res[ctr] = elemArray[i][x];\n                    ctr++;\n                }\n                res[ctr] = 0xFF;\n                ctr++;\n            }\n            return res;\n        }\n        \n        \n    string oraclize_network_name;\n    function oraclize_setNetworkName(string _network_name) internal {\n        oraclize_network_name = _network_name;\n    }\n    \n    function oraclize_getNetworkName() internal returns (string) {\n        return oraclize_network_name;\n    }\n    \n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n        if ((_nbytes == 0)||(_nbytes > 32)) throw;\n        bytes memory nbytes = new bytes(1);\n        nbytes[0] = byte(_nbytes);\n        bytes memory unonce = new bytes(32);\n        bytes memory sessionKeyHash = new bytes(32);\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n        assembly {\n            mstore(unonce, 0x20)\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n            mstore(sessionKeyHash, 0x20)\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n        }\n        bytes[3] memory args = [unonce, nbytes, sessionKeyHash]; \n        bytes32 queryId = oraclize_query(_delay, \"random\", args, _customGasLimit);\n        oraclize_randomDS_setCommitment(queryId, sha3(bytes8(_delay), args[1], sha256(args[0]), args[2]));\n        return queryId;\n    }\n    \n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\n        oraclize_randomDS_args[queryId] = commitment;\n    }\n    \n    mapping(bytes32=>bytes32) oraclize_randomDS_args;\n    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\n\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n        bool sigok;\n        address signer;\n        \n        bytes32 sigr;\n        bytes32 sigs;\n        \n        bytes memory sigr_ = new bytes(32);\n        uint offset = 4+(uint(dersig[3]) - 0x20);\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\n        bytes memory sigs_ = new bytes(32);\n        offset += 32 + 2;\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n\n        assembly {\n            sigr := mload(add(sigr_, 32))\n            sigs := mload(add(sigs_, 32))\n        }\n        \n        \n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\n        if (address(sha3(pubkey)) == signer) return true;\n        else {\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\n            return (address(sha3(pubkey)) == signer);\n        }\n    }\n\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n        bool sigok;\n        \n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\n        \n        bytes memory appkey1_pubkey = new bytes(64);\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\n        \n        bytes memory tosign2 = new bytes(1+65+32);\n        tosign2[0] = 1; //role\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n        \n        if (sigok == false) return false;\n        \n        \n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n        \n        bytes memory tosign3 = new bytes(1+65);\n        tosign3[0] = 0xFE;\n        copyBytes(proof, 3, 65, tosign3, 1);\n        \n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\n        \n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n        \n        return sigok;\n    }\n    \n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) throw;\n        \n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        if (proofVerified == false) throw;\n        \n        _;\n    }\n    \n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\n        \n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        if (proofVerified == false) return 2;\n        \n        return 0;\n    }\n    \n    function matchBytes32Prefix(bytes32 content, bytes prefix) internal returns (bool){\n        bool match_ = true;\n        \n        for (var i=0; i<prefix.length; i++){\n            if (content[i] != prefix[i]) match_ = false;\n        }\n        \n        return match_;\n    }\n\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n        bool checkok;\n        \n        \n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\n        bytes memory keyhash = new bytes(32);\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\n        if (checkok == false) return false;\n        \n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\n        \n        \n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\n        checkok = matchBytes32Prefix(sha256(sig1), result);\n        if (checkok == false) return false;\n        \n        \n        // Step 4: commitment match verification, sha3(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n        // This is to verify that the computed args match with the ones specified in the query.\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\n        \n        bytes memory sessionPubkey = new bytes(64);\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\n        \n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\n            delete oraclize_randomDS_args[queryId];\n        } else return false;\n        \n        \n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\n        bytes memory tosign1 = new bytes(32+8+1+32);\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\n        checkok = verifySig(sha256(tosign1), sig1, sessionPubkey);\n        if (checkok == false) return false;\n        \n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\n        }\n        \n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n    }\n\n    \n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal returns (bytes) {\n        uint minLength = length + toOffset;\n\n        if (to.length < minLength) {\n            // Buffer too small\n            throw; // Should be a better way?\n        }\n\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n        uint i = 32 + fromOffset;\n        uint j = 32 + toOffset;\n\n        while (i < (32 + fromOffset + length)) {\n            assembly {\n                let tmp := mload(add(from, i))\n                mstore(add(to, j), tmp)\n            }\n            i += 32;\n            j += 32;\n        }\n\n        return to;\n    }\n    \n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n        // We do our own memory management here. Solidity uses memory offset\n        // 0x40 to store the current end of memory. We write past it (as\n        // writes are memory extensions), but don't update the offset so\n        // Solidity will reuse it. The memory used here is only needed for\n        // this context.\n\n        // FIXME: inline assembly can't access return values\n        bool ret;\n        address addr;\n\n        assembly {\n            let size := mload(0x40)\n            mstore(size, hash)\n            mstore(add(size, 32), v)\n            mstore(add(size, 64), r)\n            mstore(add(size, 96), s)\n\n            // NOTE: we can reuse the request memory because we deal with\n            //       the return code\n            ret := call(3000, 1, 0, size, 128, size, 32)\n            addr := mload(size)\n        }\n  \n        return (ret, addr);\n    }\n\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n\n        if (sig.length != 65)\n          return (false, 0);\n\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n\n            // Here we are loading the last 32 bytes. We exploit the fact that\n            // 'mload' will pad with zeroes if we overread.\n            // There is no 'mload8' to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n\n            // Alternative solution:\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            // v := and(mload(add(sig, 65)), 255)\n        }\n\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\n        // to match the YP range of [27, 28]\n        //\n        // geth uses [0, 1] and some clients have followed. This might change, see:\n        //  https://github.com/ethereum/go-ethereum/issues/2053\n        if (v < 27)\n          v += 27;\n\n        if (v != 27 && v != 28)\n            return (false, 0);\n\n        return safer_ecrecover(hash, v, r, s);\n    }\n        \n}\n// </ORACLIZE_API>\n\ncontract DSSafeAddSub {\n    function safeToAdd(uint a, uint b) internal returns (bool) {\n        return (a + b >= a);\n    }\n    function safeAdd(uint a, uint b) internal returns (uint) {\n        if (!safeToAdd(a, b)) throw;\n        return a + b;\n    }\n\n    function safeToSubtract(uint a, uint b) internal returns (bool) {\n        return (b <= a);\n    }\n\n    function safeSub(uint a, uint b) internal returns (uint) {\n        if (!safeToSubtract(a, b)) throw;\n        return a - b;\n    } \n}\n\ncontract E93 is DSSafeAddSub, usingOraclize {\n    \n    modifier onlyOwner {\n        \n        // ETH93 admin accounts\n        \n        require(msg.sender == 0x3a31AC87092909AF0e01B4d8fC6E03157E91F4bb || msg.sender == 0x44fc32c2a5d18700284cc9e0e2da3ad83e9a6c5d);\n        _;\n    }\n    \n    modifier onlyOraclize {\n        require(msg.sender == oraclize_cbAddress());\n        _;\n    }\n    \n    modifier onlyOwnerOrOraclize {\n        require(msg.sender == oraclize_cbAddress() || msg.sender == 0x3a31AC87092909AF0e01B4d8fC6E03157E91F4bb || msg.sender == 0x44fc32c2a5d18700284cc9e0e2da3ad83e9a6c5d);\n        _;\n    }\n    \n    address public owner = 0x44fc32c2a5d18700284cc9e0e2da3ad83e9a6c5d;\n    address public charity = 0xD3F81260a44A1df7A7269CF66Abd9c7e4f8CdcD1; // Heifer International - see https://www.heifer.org/support/faq/online-donations to verify this is their Ethereum donation address. 5% of ticket sale revenue goes to this address.\n    address public tokenContract = 0xfc5429ef09ed041622a23fee92e65efab389c1ce; // 1% of ticket sales go to E93 token holders, who can trade their E93 tokens in at any time.\n    uint public roundNumber;\n\n    struct Lottery {\n        uint256 ticketsSold;\n        uint256 winningTicket;\n        address winner;\n        bool finished;\n        mapping (uint256 => address) tickets;\n\t\tmapping (address => uint256) ticketsPerUser;\n    }\n    \n    mapping (uint => Lottery) public lotteries;\n    \n    uint public totalTicketsSold;\n    \n    function() payable {\n        \n        if (msg.value < 0.01 ether) revert();\n        \n        uint256 remainder = msg.value % (0.01 ether);\n\n        uint256 numberOfTicketsForUser = safeSub(msg.value, remainder)/10**16; // msg.value will be the amount of Ether the user sends times 10^18, so divide this by 10^16 to get the number of tickets for that user (each ticket costs 0.01 Ether)\n        \n        totalTicketsSold = safeAdd(totalTicketsSold, numberOfTicketsForUser);\n        \n        lotteries[roundNumber].ticketsPerUser[msg.sender] = safeAdd(lotteries[roundNumber].ticketsPerUser[msg.sender], numberOfTicketsForUser);\n        \n        // Each ticket for a lottery round is mapped to an address, eg. lotteries[0][5] would be the 6th ticket for the 1st lottery and might equal an address like 0x344ad635fd4e3684a326664e0698c8fefbe6dd91. With the below code, if the current round number was 0 and 6 tickets had been sold, and say the user has sent 0.03 Ether (buying 3 tickets), then their address would be mapped to lotteries[0][6], lotteries[0][7] and lotteries[0][8]\n        \n        uint256 ticketToGiveUser = lotteries[roundNumber].ticketsSold;\n        \n        for (uint i = 0; i < numberOfTicketsForUser; i++) {\n            lotteries[roundNumber].tickets[ticketToGiveUser] = msg.sender;\n            ticketToGiveUser++;\n        }\n        \n        lotteries[roundNumber].ticketsSold = safeAdd(lotteries[roundNumber].ticketsSold, numberOfTicketsForUser);\n        \n    }\n\n    function ticketsOwnedByUser (address user) public constant returns (uint256) {\n        return lotteries[roundNumber].ticketsPerUser[user];\n    }\n    \n    function lookupPriorLottery (uint256 _roundNumber) public constant returns (uint256, uint256, address) {\n        var ticketsSold = lotteries[_roundNumber].ticketsSold;\n        var winningTicket = lotteries[_roundNumber].winningTicket;\n        var winner = lotteries[_roundNumber].winner;\n        return (ticketsSold, winningTicket, winner);\n    }\n    \n    function __callback(bytes32 myid, string result) onlyOraclize {\n        \n        // This gets called once a day and signals the end of the round, unless the lottery has been paused (ie. stopped == true). This will be called first by the runInOneDay() function (which sets waiting == true and waits a day), followed immediately by the update() function which runs the Oraclize query to get a random number from random.org. \n        \n        if (stopped == true) {\n            revert();\n        }\n        \n        if (waiting == true) {\n            \n            update();\n            \n        } else {\n            \n        // waiting == false, so the update() function to generate a random number has been called. Time to determine a winner and transfer Ether.\n            \n        lotteries[roundNumber].finished = true;\n\n        if (lotteries[roundNumber].ticketsSold > 0) {\n            \n        lotteries[roundNumber].winningTicket = parseInt(result); // 'result' is the random number generated by random.org\n        \n        lotteries[roundNumber].winner = lotteries[roundNumber].tickets[lotteries[roundNumber].winningTicket];\n        \n        lotteries[roundNumber].winner.transfer(lotteries[roundNumber].ticketsSold * 0.0093 ether); // 0.0093 Winner gets 93% of ticket sale revenue (ticket price of 0.01 ether * 0.93 * number of tickets sold)\n        charity.transfer(lotteries[roundNumber].ticketsSold * 0.0005 ether); // Heifer International gets 5%\n        tokenContract.transfer(lotteries[roundNumber].ticketsSold * 0.0001 ether); // E93 token holders get 1% - see eth93.com/crowdsale\n        owner.transfer(lotteries[roundNumber].ticketsSold * 0.0001 ether); // eth93.com gets 1%\n            \n        }\n        \n        roundNumber++;\n        \n        runInOneDay();\n            \n        }\n        \n    }\n    \n    // gas for Oraclize. 400000 seems to be just enough, make it 500000 to be safe (can be changed later if necessary).\n    uint256 gas = 500000;\n    \n    bool public waiting;\n    \n    bool public stopped;\n    \n    function runInOneDay() payable onlyOwnerOrOraclize {\n        \n        // This waits for one day (86400 seconds) and then executes the __callback function, which will then execute the update() function (since the waiting variable will be set to true). Then a random number is generated, a winner is determined and the next round starts.\n        \n        waiting = true;\n        oraclize_query(86400, \"\", \"\", gas);\n    }\n  \n    function updateGas(uint256 _gas) onlyOwner {\n        gas = _gas;\n    }\n    \n    function stopGo() onlyOwner {\n        \n        // Just in case the lottery needs to be paused for some reason. The contract can still sell tickets in this case, but a winner won't be declared until stopGo() and update() are called again.\n        \n        if (stopped == false) {\n            stopped = true;\n        } else {\n            stopped = false;\n        }\n    }\n    \n    function update() payable onlyOwnerOrOraclize {\n        \n        // This queries random.org to generate a random number between 0 and the number of tickets sold for the round - 1, which is used to determine the winner. Our API key for random.org is encrypted and can only be read by the Oraclize engine. \n        \n        waiting = false;\n        \n        string memory part1 = \"[URL] ['json(https://api.random.org/json-rpc/1/invoke).result.random.data.0', '\\\\n{\\\"jsonrpc\\\":\\\"2.0\\\",\\\"method\\\":\\\"generateIntegers\\\",\\\"params\\\":{\\\"apiKey\\\":${[decrypt] BEyD7h4VOOTxKLK0QWONeG++mSGyXFb6Ey88tdxrQ6PRT34k6t2w+XxAhvbQeyj0C4B/oHHxzH8MOEW09Qa23hIFY1+RT80ePKI5L09fFQ9Ch3atoP9mxCQj15FMd+rKTG7MlrM51M44xFCIR3eJQMhXAVeGwCU=},\\\"n\\\":1,\\\"min\\\":0,\\\"max\\\":\";\n\n        string memory maxRandomNumber = uint2str(lotteries[roundNumber].ticketsSold - 1);\n\n        string memory part2 = \",\\\"replacement\\\":true,\\\"base\\\":10${[identity] \\\"}\\\"},\\\"id\\\":1${[identity] \\\"}\\\"}']\";\n\n        string memory query = strConcat(part1, maxRandomNumber, part2);\n\n        bytes32 rngId = oraclize_query(\"nested\", query, gas);\n    \n    }\n    \n    function giveAllToCharity() onlyOwner {\n        \n        // Only call this if oraclize and random.org have some permanent problem and the round can't be completed, since no random number can be generated from oraclize or random.org. Then all the funds for the last lottery can go to Heifer International. \n        \n        charity.transfer(lotteries[roundNumber].ticketsSold * 0.01 ether);\n        roundNumber++;\n    }\n    \n    function depositFunds() payable {\n        // Used to top up the contract balance without doing anything else - this is necessary to pay for Oraclize calls and transfer costs.\n    }\n\n}"
}