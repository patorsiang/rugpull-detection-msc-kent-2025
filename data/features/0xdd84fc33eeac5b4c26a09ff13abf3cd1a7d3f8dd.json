{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 TIMESTAMP PUSH1 SLOAD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD TIMESTAMP GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLVALUE SWAP3 POP PUSH2 SWAP1 DUP4 SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH2 ADDRESS CALLER DUP4 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST POP POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 CALLDATALOAD DUP2 DUP2 ADD CALLDATALOAD PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 SWAP5 DUP3 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP5 PUSH1 DUP1 CALLDATALOAD SWAP6 CALLDATASIZE SWAP6 SWAP5 PUSH1 SWAP5 SWAP3 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 DUP4 ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 DUP2 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP5 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP4 SWAP3 DUP8 AND SWAP3 PUSH32 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP2 CALLVALUE DUP1 ISZERO PUSH2 MUL SWAP3 SWAP1 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP5 DUP7 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB SWAP6 SWAP1 SWAP6 AND DUP4 MSTORE SWAP4 SWAP1 MSTORE SWAP2 SWAP1 SWAP2 SHA3 SSTORE PUSH1 SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SSTORE PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 TIMESTAMP PUSH1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP TIMESTAMP PUSH1 SLOAD LT JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD CALLER SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH1 MLOAD ADDRESS BALANCE SWAP3 PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND SWAP2 PUSH2 DUP5 ISZERO MUL SWAP2 DUP5 SWAP2 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH8 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 POP PUSH2 ADDRESS CALLER DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP3 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD ADDRESS SWAP2 PUSH1 SWAP2 PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 PUSH1 DUP1 MLOAD DUP3 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND SWAP2 ADDRESS SWAP2 PUSH32 SWAP2 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 DUP2 MSTORE DUP3 DUP3 SHA3 CALLER DUP4 MSTORE SWAP1 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 SHA3 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP4 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 SSTORE PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP5 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP4 AND DUP5 SWAP1 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH2 CALLER DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 DUP2 SWAP1 SSTORE ADDRESS DUP1 DUP3 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SWAP2 SHA3 SLOAD SWAP1 PUSH2 SWAP1 CALLER DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH32 DUP2 MSTORE CALLER PUSH1 DUP3 ADD DUP2 DUP2 MSTORE PUSH1 DUP4 ADD DUP8 SWAP1 MSTORE ADDRESS PUSH1 DUP5 ADD DUP2 SWAP1 MSTORE PUSH1 PUSH1 DUP6 ADD SWAP1 DUP2 MSTORE DUP8 MLOAD PUSH1 DUP7 ADD MSTORE DUP8 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND SWAP6 PUSH4 SWAP6 SWAP5 DUP12 SWAP5 SWAP4 DUP12 SWAP4 SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 SWAP1 SWAP2 ADD SWAP1 PUSH1 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP3 DUP4 MSTORE PUSH1 DUP1 DUP5 SHA3 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP6 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE DUP3 MLOAD SWAP4 DUP5 MSTORE SWAP1 DUP4 ADD MSTORE DUP1 MLOAD PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 DUP6 LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH8 PUSH4 PUSH2 AND JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP2 POP DUP2 LT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP6 SWAP1 SSTORE PUSH1 DUP5 SWAP1 SSTORE PUSH1 DUP4 SWAP1 SSTORE PUSH2 ADDRESS DUP3 PUSH2 JUMP JUMPDEST POP PUSH2 ADDRESS DUP3 PUSH2 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP STOP LOG1 PUSH6 SHA3 AND DUP2 UNKNOWN_0x49 UNKNOWN_0xca UNKNOWN_0x5c EXTCODEHASH DUP13 UNKNOWN_0xe6 UNKNOWN_0x2f CODESIZE MOD SGT SWAP11 UNKNOWN_0x4c INVALID_0x73",
  "opcode_entropy": 4.818330151672744,
  "opcode_count": 2930,
  "unique_opcodes": 80,
  "byte_entropy": 5.930892694323842,
  "byte_60": 0.10915331807780321,
  "byte_80": 0.04324942791762014,
  "byte_40": 0.011212814645308924,
  "byte_52": 0.02562929061784897,
  "byte_04": 0.011670480549199084,
  "byte_36": 0.0009153318077803204,
  "byte_10": 0.006407322654462242,
  "byte_61": 0.05240274599542334,
  "byte_01": 0.029519450800915333,
  "byte_8a": 0.0004576659038901602,
  "byte_57": 0.02425629290617849,
  "byte_63": 0.011670480549199084,
  "byte_ff": 0.021510297482837528,
  "byte_7c": 0.0011441647597254005,
  "byte_00": 0.043020594965675056,
  "byte_35": 0.007093821510297483,
  "byte_16": 0.021052631578947368,
  "byte_06": 0.007551487414187643,
  "byte_fd": 0.014187643020594966,
  "byte_de": 0.0004576659038901602,
  "byte_03": 0.02379862700228833,
  "byte_81": 0.02768878718535469,
  "byte_14": 0.009382151029748284,
  "byte_f2": 0.0013729977116704805,
  "byte_09": 0.006864988558352402,
  "byte_5e": 0.0002288329519450801,
  "byte_a7": 0.0016018306636155606,
  "byte_b3": 0.0016018306636155606,
  "byte_02": 0.020594965675057208,
  "byte_18": 0.0006864988558352403,
  "byte_0d": 0.0036613272311212816,
  "byte_dd": 0.0018306636155606408,
  "byte_b4": 0.0011441647597254005,
  "byte_23": 0.0011441647597254005,
  "byte_b8": 0.0004576659038901602,
  "byte_72": 0.0004576659038901602,
  "byte_db": 0.0009153318077803204,
  "byte_31": 0.0009153318077803204,
  "byte_3c": 0.0009153318077803204,
  "byte_e5": 0.0004576659038901602,
  "byte_67": 0.0011441647597254005,
  "byte_05": 0.003432494279176201,
  "byte_97": 0.0004576659038901602,
  "byte_cb": 0.0006864988558352403,
  "byte_b6": 0.0011441647597254005,
  "byte_30": 0.002517162471395881,
  "byte_34": 0.008237986270022883,
  "byte_25": 0.0004576659038901602,
  "byte_3a": 0.0006864988558352403,
  "byte_f5": 0.002517162471395881,
  "byte_45": 0.0002288329519450801,
  "byte_3b": 0.0006864988558352403,
  "byte_a0": 0.013729977116704805,
  "byte_b9": 0.0009153318077803204,
  "byte_a9": 0.0011441647597254005,
  "byte_5a": 0.0013729977116704805,
  "byte_42": 0.0011441647597254005,
  "byte_96": 0.0006864988558352403,
  "byte_6c": 0.0011441647597254005,
  "byte_68": 0.0016018306636155606,
  "byte_6f": 0.0004576659038901602,
  "byte_51": 0.009153318077803204,
  "byte_b2": 0.0004576659038901602,
  "byte_a8": 0.0006864988558352403,
  "byte_87": 0.002059496567505721,
  "byte_59": 0.0004576659038901602,
  "byte_54": 0.013501144164759725,
  "byte_c8": 0.002517162471395881,
  "byte_c5": 0.0004576659038901602,
  "byte_9c": 0.0006864988558352403,
  "byte_92": 0.007322654462242563,
  "byte_70": 0.0006864988558352403,
  "byte_44": 0.0018306636155606408,
  "byte_5d": 0.0006864988558352403,
  "byte_22": 0.0002288329519450801,
  "byte_a3": 0.0009153318077803204,
  "byte_e4": 0.0002288329519450801,
  "byte_82": 0.013958810068649886,
  "byte_fc": 0.0018306636155606408,
  "byte_78": 0.0006864988558352403,
  "byte_e9": 0.0006864988558352403,
  "byte_79": 0.0006864988558352403,
  "byte_1d": 0.0004576659038901602,
  "byte_c6": 0.0002288329519450801,
  "byte_50": 0.029977116704805493,
  "byte_32": 0.0006864988558352403,
  "byte_cc": 0.0016018306636155606,
  "byte_90": 0.04004576659038902,
  "byte_56": 0.021281464530892448,
  "byte_8b": 0.0009153318077803204,
  "byte_ae": 0.0002288329519450801,
  "byte_3f": 0.0004576659038901602,
  "byte_7a": 0.0011441647597254005,
  "byte_8d": 0.0009153318077803204,
  "byte_a5": 0.0009153318077803204,
  "byte_5b": 0.038901601830663615,
  "byte_8f": 0.0006864988558352403,
  "byte_95": 0.002745995423340961,
  "byte_d8": 0.0013729977116704805,
  "byte_9b": 0.0013729977116704805,
  "byte_41": 0.0006864988558352403,
  "byte_a4": 0.0004576659038901602,
  "byte_bb": 0.0004576659038901602,
  "byte_d4": 0.002288329519450801,
  "byte_c0": 0.0004576659038901602,
  "byte_86": 0.0009153318077803204,
  "byte_48": 0.0004576659038901602,
  "byte_77": 0.0002288329519450801,
  "byte_fe": 0.0013729977116704805,
  "byte_69": 0.0009153318077803204,
  "byte_13": 0.0006864988558352403,
  "byte_ca": 0.0006864988558352403,
  "byte_28": 0.0011441647597254005,
  "byte_62": 0.0006864988558352403,
  "byte_ed": 0.0002288329519450801,
  "byte_3e": 0.0013729977116704805,
  "byte_91": 0.013958810068649886,
  "byte_e7": 0.0006864988558352403,
  "byte_24": 0.002517162471395881,
  "byte_ea": 0.0004576659038901602,
  "byte_4b": 0.0002288329519450801,
  "byte_e3": 0.0002288329519450801,
  "byte_f8": 0.0002288329519450801,
  "byte_1e": 0.0006864988558352403,
  "byte_20": 0.020594965675057208,
  "byte_e8": 0.0002288329519450801,
  "byte_38": 0.0009153318077803204,
  "byte_0c": 0.002288329519450801,
  "byte_11": 0.002517162471395881,
  "byte_15": 0.017620137299771167,
  "byte_9d": 0.0013729977116704805,
  "byte_0b": 0.003203661327231121,
  "byte_ab": 0.0004576659038901602,
  "byte_c2": 0.0009153318077803204,
  "byte_83": 0.016247139588100687,
  "byte_4d": 0.0013729977116704805,
  "byte_0e": 0.0018306636155606408,
  "byte_55": 0.004347826086956522,
  "byte_e6": 0.0006864988558352403,
  "byte_33": 0.006178489702517162,
  "byte_ee": 0.0002288329519450801,
  "byte_08": 0.004576659038901602,
  "byte_07": 0.0018306636155606408,
  "byte_43": 0.0004576659038901602,
  "byte_85": 0.003432494279176201,
  "byte_29": 0.0006864988558352403,
  "byte_1f": 0.002059496567505721,
  "byte_6e": 0.0006864988558352403,
  "byte_0a": 0.015789473684210527,
  "byte_19": 0.0016018306636155606,
  "byte_f3": 0.0011441647597254005,
  "byte_88": 0.0011441647597254005,
  "byte_d0": 0.0009153318077803204,
  "byte_c9": 0.002517162471395881,
  "byte_1a": 0.0002288329519450801,
  "byte_af": 0.0002288329519450801,
  "byte_66": 0.0002288329519450801,
  "byte_d7": 0.0002288329519450801,
  "byte_7b": 0.0004576659038901602,
  "byte_93": 0.0038901601830663617,
  "byte_7d": 0.0004576659038901602,
  "byte_b1": 0.002517162471395881,
  "byte_bf": 0.0002288329519450801,
  "byte_dc": 0.0002288329519450801,
  "byte_f0": 0.0002288329519450801,
  "byte_eb": 0.0002288329519450801,
  "byte_2b": 0.0009153318077803204,
  "byte_b0": 0.0009153318077803204,
  "byte_d5": 0.0004576659038901602,
  "byte_e0": 0.0013729977116704805,
  "byte_fb": 0.0004576659038901602,
  "byte_84": 0.008695652173913044,
  "byte_94": 0.002288329519450801,
  "byte_64": 0.0013729977116704805,
  "byte_37": 0.0011441647597254005,
  "byte_0f": 0.003203661327231121,
  "byte_4f": 0.0006864988558352403,
  "byte_c4": 0.0009153318077803204,
  "byte_2c": 0.0002288329519450801,
  "byte_ce": 0.0002288329519450801,
  "byte_26": 0.0002288329519450801,
  "byte_4c": 0.0004576659038901602,
  "byte_75": 0.0002288329519450801,
  "byte_aa": 0.0009153318077803204,
  "byte_7f": 0.0016018306636155606,
  "byte_ad": 0.0006864988558352403,
  "byte_1b": 0.0009153318077803204,
  "byte_e2": 0.0006864988558352403,
  "byte_f1": 0.0013729977116704805,
  "byte_a1": 0.0011441647597254005,
  "byte_ef": 0.0006864988558352403,
  "byte_3d": 0.0016018306636155606,
  "byte_c3": 0.0004576659038901602,
  "byte_f9": 0.0002288329519450801,
  "byte_5c": 0.0006864988558352403,
  "byte_bd": 0.0004576659038901602,
  "byte_73": 0.0009153318077803204,
  "byte_12": 0.0004576659038901602,
  "byte_cf": 0.0004576659038901602,
  "byte_71": 0.0004576659038901602,
  "byte_b7": 0.0004576659038901602,
  "byte_39": 0.0004576659038901602,
  "byte_a2": 0.0004576659038901602,
  "byte_ac": 0.0004576659038901602,
  "byte_47": 0.0002288329519450801,
  "byte_2a": 0.0002288329519450801,
  "byte_17": 0.0004576659038901602,
  "byte_5f": 0.0002288329519450801,
  "byte_7e": 0.0004576659038901602,
  "byte_4e": 0.0004576659038901602,
  "byte_8c": 0.0004576659038901602,
  "byte_6a": 0.0002288329519450801,
  "byte_4a": 0.0002288329519450801,
  "byte_65": 0.0004576659038901602,
  "byte_58": 0.0002288329519450801,
  "byte_49": 0.0002288329519450801,
  "byte_2f": 0.0002288329519450801,
  "byte_9a": 0.0002288329519450801,
  "byte_8e": 0.0002288329519450801,
  "byte_9f": 0.0002288329519450801,
  "byte_a6": 0.0002288329519450801,
  "byte_76": 0.0002288329519450801,
  "num_nodes": 4,
  "num_edges": 4,
  "avg_degree": 2.0,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 5,
  "event_nums": 2,
  "creation_block": 6681776,
  "creation_timestamp": 1541899810,
  "life_time": 1383826.0,
  "duration_seconds": 20083923.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 5,
  "num_buyers": 2,
  "num_sellers": 4,
  "num_creator_transfers": 2,
  "buy_amt": 3250000000000000.0,
  "sell_amt": 3250000000000000.0,
  "avg_value": 1083333333333333.4,
  "txn_per_block": 3.6131684090569126e-06,
  "avg_gas_limit": 338165.2,
  "std_gas_limit": 593233.4943360498,
  "avg_gas_used": 333344.8,
  "std_gas_used": 595468.4961562281,
  "avg_gas_price": 2000000000.0,
  "std_gas_price": 2190890230.0206647,
  "transfer_num": 2,
  "timeline_sequence": [
    [
      6681776,
      1541899810,
      2,
      74,
      0,
      1522496,
      6000000000,
      0,
      1,
      6794838,
      1522496,
      16439681
    ],
    [
      8065600,
      1561983721,
      13,
      64,
      3200000000000000,
      81865,
      2000000000,
      0,
      1,
      4501795,
      79614,
      15055857
    ],
    [
      8065602,
      1561983733,
      21,
      29,
      50000000000000,
      81865,
      2000000000,
      0,
      1,
      7764193,
      64614,
      15055855
    ],
    [
      8065600,
      1561983721,
      0,
      0,
      3200000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      8065602,
      1561983733,
      0,
      0,
      50000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity 0.4.25;\n// ----------------------------------------------------------------------------\n// 'SCALE' contract\n//\n// Symbol      : SCALE\n// Name        : Scalecoin\n// Total supply: 21,000,000\n// Decimals    : 18\n//\n// Copyright (c) 2018 Scale Blockchain\n// Contract designed by: GDO Infotech Pvt Ltd (https://GDO.co.in) \n// ----------------------------------------------------------------------------\n   \n    /**\n     * @title SafeMath\n     * @dev Math operations with safety checks that throw on error\n     */\n    library SafeMath {\n      function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n          return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n      }\n    \n      function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n      }\n    \n      function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n      }\n    \n      function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n      }\n    }\n    \n    contract owned {\n        address public owner;\n        using SafeMath for uint256;\n        \n        constructor() public {\n            owner = msg.sender;\n        }\n    \n        modifier onlyOwner {\n            require(msg.sender == owner);\n            _;\n        }\n    \n        function transferOwnership(address newOwner) onlyOwner public {\n            owner = newOwner;\n        }\n    }\n    \n    interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external ; }\n    \n    contract TokenERC20 {\n        // Public variables of the token\n        using SafeMath for uint256;\n        string public name = \"Scalecoin\";\n        string public symbol = \"SCALE\";\n        uint8 public decimals = 18;         // 18 decimals is the strongly suggested default, avoid changing it\n        uint256 public totalSupply          = 21000000 * (1 ether);   \n        uint256 public tokensForCrowdsale   = 20000000 * (1 ether);\n        uint256 public tokensForTeam        = 4000000  * (1 ether);\n        uint256 public tokensForOwner       = 1000000  * (1 ether);\n        \n        address public teamWallet = 0x824C6785d5bD0b883E0E550649203796675F0012\n\n;\n    \n        // This creates an array with all balances\n        mapping (address => uint256) public balanceOf;\n        mapping (address => mapping (address => uint256)) public allowance;\n    \n        // This generates a public event on the blockchain that will notify clients\n        event Transfer(address indexed from, address indexed to, uint256 value);\n    \n        // This notifies clients about the amount burnt\n        event Burn(address indexed from, uint256 value);\n    \n        /**\n         * Constrctor function\n         *\n         * Initializes contract with initial supply tokens to the creator of the contract\n         */\n        constructor() public {\n             \n            balanceOf[this] = tokensForCrowdsale;          // 16 Million will remain in contract for crowdsale\n            balanceOf[teamWallet] = tokensForTeam;         // 4 Million will be allocated to Team\n            balanceOf[msg.sender] = tokensForOwner;        // 1 Million will be sent to contract owner\n\n        }\n    \n        /**\n         * Internal transfer, only can be called by this contract\n         */\n        function _transfer(address _from, address _to, uint _value) internal {\n            // Prevent transfer to 0x0 address. Use burn() instead\n            require(_to != 0x0);\n            // Check if the sender has enough\n            require(balanceOf[_from] >= _value);\n            // Check for overflows\n            require(balanceOf[_to].add(_value) > balanceOf[_to]);\n            // Save this for an assertion in the future\n            uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n            // Subtract from the sender\n            balanceOf[_from] = balanceOf[_from].sub(_value);\n            // Add the same to the recipient\n            balanceOf[_to] = balanceOf[_to].add(_value);\n            emit Transfer(_from, _to, _value);\n            // Asserts are used to use static analysis to find bugs in your code. They should never fail\n            assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n        }\n    \n        /**\n         * Transfer tokens\n         *\n         * Send `_value` tokens to `_to` from your account\n         *\n         * @param _to The address of the recipient\n         * @param _value the amount to send\n         */\n        function transfer(address _to, uint256 _value) public {\n            _transfer(msg.sender, _to, _value);\n        }\n    \n        /**\n         * Transfer tokens from other address\n         *\n         * Send `_value` tokens to `_to` in behalf of `_from`\n         *\n         * @param _from The address of the sender\n         * @param _to The address of the recipient\n         * @param _value the amount to send\n         */\n        function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n            require(_value <= allowance[_from][msg.sender]);     // Check allowance\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n            _transfer(_from, _to, _value);\n            return true;\n        }\n    \n        /**\n         * Set allowance for other address\n         *\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf\n         *\n         * @param _spender The address authorized to spend\n         * @param _value the max amount they can spend\n         */\n        function approve(address _spender, uint256 _value) public\n            returns (bool success) {\n            allowance[msg.sender][_spender] = _value;\n            return true;\n        }\n    \n        /**\n         * Set allowance for other address and notify\n         *\n         * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n         *\n         * @param _spender The address authorized to spend\n         * @param _value the max amount they can spend\n         * @param _extraData some extra information to send to the approved contract\n         */\n        function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n            public\n            returns (bool success) {\n            tokenRecipient spender = tokenRecipient(_spender);\n            if (approve(_spender, _value)) {\n                spender.receiveApproval(msg.sender, _value, this, _extraData);\n                return true;\n            }\n        }\n    \n        /**\n         * Destroy tokens\n         *\n         * Remove `_value` tokens from the system irreversibly\n         *\n         * @param _value the amount of money to burn\n         */\n        function burn(uint256 _value) public returns (bool success) {\n            require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n            balanceOf[msg.sender] = balanceOf[msg.sender].sub(_value);            // Subtract from the sender\n            totalSupply = totalSupply.sub(_value);                      // Updates totalSupply\n           emit Burn(msg.sender, _value);\n            return true;\n        }\n    \n        /**\n         * Destroy tokens from other account\n         *\n         * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n         *\n         * @param _from the address of the sender\n         * @param _value the amount of money to burn\n         */\n        function burnFrom(address _from, uint256 _value) public returns (bool success) {\n            require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n            require(_value <= allowance[_from][msg.sender]);    // Check allowance\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the targeted balance\n            allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);             // Subtract from the sender's allowance\n            totalSupply = totalSupply.sub(_value);                              // Update totalSupply\n          emit  Burn(_from, _value);\n            return true;\n        }\n    }\n    \n    /******************************************/\n    /*       ADVANCED TOKEN STARTS HERE       */\n    /******************************************/\n    \n    contract Scalecoin is owned, TokenERC20 {\n\n        using SafeMath for uint256;\n        uint256 public startTime = 0; //client wants ICO run Infinite time, so startTimeStamp 0\n        uint256 public endTime = 9999999999999999999999; //and entTimeStamp higher number\n        uint256 public exchangeRate = 20000; // this is how many tokens for 1 Ether\n        uint256 public tokensSold = 0; // how many tokens sold in crowdsale\n        \n        mapping (address => bool) public frozenAccount;\n    \n        /* This generates a public event on the blockchain that will notify clients */\n        event FrozenFunds(address target, bool frozen);\n    \n        /* Initializes contract with initial supply tokens to the creator of the contract */\n        constructor() TokenERC20() public {}\n\n        /* Internal transfer, only can be called by this contract */\n        function _transfer(address _from, address _to, uint _value) internal {\n            require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n            require (balanceOf[_from] >= _value);               // Check if the sender has enough\n            require (balanceOf[_to].add(_value) >= balanceOf[_to]); // Check for overflows\n            require(!frozenAccount[_from]);                     // Check if sender is frozen\n            require(!frozenAccount[_to]);                       // Check if recipient is frozen\n            balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\n            balanceOf[_to] = balanceOf[_to].add(_value);                           // Add the same to the recipient\n            emit Transfer(_from, _to, _value);\n        }\n        \n        //@dev fallback function, only accepts ether if ICO is running or Reject\n        function () payable public {\n            require(endTime > now);\n            require(startTime < now);\n            uint ethervalueWEI=msg.value;\n            // calculate token amount to be sent\n            uint256 token = ethervalueWEI.mul(exchangeRate); //weiamount * price\n            tokensSold = tokensSold.add(token);\n            _transfer(this, msg.sender, token);              // makes the transfers\n            forwardEherToOwner();\n        }\n        \n        //Automatocally forwards ether from smart contract to owner address\n        function forwardEherToOwner() internal {\n            owner.transfer(msg.value); \n          }\n        \n        //function to start an ICO.\n        //It requires: start and end timestamp, exchange rate in Wei, and token amounts to allocate for the ICO\n        //It will transfer allocated amount to the smart contract\n        function startIco(uint256 start,uint256 end, uint256 exchangeRateInWei, uint256 TokensAllocationForICO) onlyOwner public {\n            require(start < end);\n            uint256 tokenAmount = TokensAllocationForICO.mul(1 ether);\n            require(balanceOf[msg.sender] > tokenAmount);\n            startTime=start;\n            endTime=end;\n            exchangeRate = exchangeRateInWei;\n            approve(this,tokenAmount);\n            transfer(this,tokenAmount);\n        }       \n        \n        //Stops an ICO.\n        //It will also transfer remaining tokens to owner\n        function stopICO() onlyOwner public{\n            endTime = 0;\n            uint256 tokenAmount=balanceOf[this];\n            _transfer(this, msg.sender, tokenAmount);\n        }\n        \n        //function to check wheter ICO is running or not.\n        function isICORunning() public view returns(bool){\n            if(endTime > now && startTime < now){\n                return true;                \n            }else{\n                return false;\n            }\n        }\n        \n        //Function to set ICO Exchange rate. \n        function setICOExchangeRate(uint256 newExchangeRate) onlyOwner public {\n            exchangeRate=newExchangeRate;\n        }\n        \n        //Just in case, owner wants to transfer Tokens from contract to owner address\n        function manualWithdrawToken(uint256 _amount) onlyOwner public {\n            uint256 tokenAmount = _amount.mul(1 ether);\n            _transfer(this, msg.sender, tokenAmount);\n          }\n          \n        //Just in case, owner wants to transfer Ether from contract to owner address\n        function manualWithdrawEther()onlyOwner public{\n            uint256 amount=address(this).balance;\n            owner.transfer(amount);\n        }\n        \n        /// @notice Create `mintedAmount` tokens and send it to `target`\n        /// @param target Address to receive the tokens\n        /// @param mintedAmount the amount of tokens it will receive\n        function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n            balanceOf[target] = balanceOf[target].add(mintedAmount);\n            totalSupply = totalSupply.add(mintedAmount);\n           emit Transfer(0, this, mintedAmount);\n           emit Transfer(this, target, mintedAmount);\n        }\n    \n        /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n        /// @param target Address to be frozen\n        /// @param freeze either to freeze it or not\n        function freezeAccount(address target, bool freeze) onlyOwner public {\n            frozenAccount[target] = freeze;\n          emit  FrozenFunds(target, freeze);\n        }\n\n\n\n    }"
}