{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH3 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH5 GASPRICE GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLVALUE PUSH1 DUP1 PUSH2 JUMP JUMPDEST POP STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 PUSH1 CALLDATALOAD SWAP2 DUP3 ADD SWAP2 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP1 CALLDATALOAD DUP1 DUP3 ADD CALLDATALOAD PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 SWAP5 CALLDATASIZE SWAP5 SWAP3 SWAP4 PUSH1 SWAP4 SWAP3 DUP5 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP1 CALLDATALOAD DUP1 DUP3 ADD CALLDATALOAD PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 SWAP5 CALLDATASIZE SWAP5 SWAP3 SWAP4 PUSH1 SWAP4 SWAP3 DUP5 ADD SWAP2 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP8 POP PUSH2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP12 PUSH1 SLOAD TIMESTAMP LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMPDEST PUSH1 SLOAD PUSH1 AND DUP1 ISZERO PUSH2 JUMPI POP PUSH8 DUP2 PUSH2 PUSH2 JUMP JUMPDEST SUB GT ISZERO JUMPDEST ISZERO PUSH2 JUMPI CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ DUP1 ISZERO PUSH2 JUMPI POP CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH8 SWAP1 DUP3 ADD GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 PUSH2 DUP15 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 JUMP JUMPDEST SWAP9 POP PUSH2 DUP10 PUSH1 PUSH2 JUMP JUMPDEST SWAP8 POP PUSH2 PUSH2 DUP15 PUSH1 PUSH2 JUMP JUMPDEST SWAP7 POP PUSH2 DUP10 DUP10 PUSH2 JUMP JUMPDEST SWAP6 POP PUSH2 PUSH2 DUP15 DUP12 PUSH2 JUMP JUMPDEST DUP9 PUSH2 JUMP JUMPDEST SWAP5 POP PUSH2 PUSH1 SLOAD DUP9 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH9 DUP7 MUL SWAP3 POP PUSH1 DUP5 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 DUP6 DUP3 PUSH2 JUMP JUMPDEST GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP13 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP13 AND CALLER EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP14 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP13 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP10 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP14 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP7 DUP10 PUSH2 JUMP JUMPDEST SWAP6 POP PUSH9 DUP7 MUL SWAP3 POP JUMPDEST PUSH1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD DUP6 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH9 DUP8 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 SLOAD PUSH9 DUP8 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP5 MUL DUP4 SUB DUP4 SUB SWAP3 POP PUSH2 JUMP JUMPDEST PUSH1 DUP5 SWAP1 SSTORE JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP6 PUSH2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 SLOAD PUSH1 SWAP1 SWAP2 MSTORE SWAP3 SWAP1 SHA3 DUP1 SLOAD SWAP3 DUP8 MUL DUP7 SWAP1 SUB SWAP3 DUP4 ADD SWAP1 SSTORE SWAP1 SWAP3 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP14 AND SWAP1 PUSH32 DUP16 DUP8 DUP16 TIMESTAMP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 ISZERO ISZERO DUP5 DUP5 ADD MSTORE PUSH1 DUP5 ADD MSTORE PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 DUP4 SWAP10 POP PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE PUSH2 PUSH2 DUP15 PUSH1 PUSH2 JUMP JUMPDEST SWAP9 POP PUSH2 DUP10 PUSH1 PUSH2 JUMP JUMPDEST SWAP8 POP PUSH2 PUSH2 DUP15 PUSH1 PUSH2 JUMP JUMPDEST SWAP7 POP PUSH2 DUP10 DUP10 PUSH2 JUMP JUMPDEST SWAP6 POP PUSH2 PUSH2 DUP15 DUP12 PUSH2 JUMP JUMPDEST SWAP5 POP PUSH2 PUSH1 SLOAD DUP9 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH2 DUP6 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH9 DUP7 MUL SWAP3 POP PUSH1 DUP5 GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 DUP6 DUP3 PUSH2 JUMP JUMPDEST GT JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP13 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB DUP13 AND CALLER EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP14 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD LT ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP13 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP10 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP14 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH2 DUP7 DUP10 PUSH2 JUMP JUMPDEST SWAP6 POP PUSH9 DUP7 MUL SWAP3 POP JUMPDEST PUSH1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD DUP6 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH9 DUP8 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD SWAP3 SWAP1 SWAP2 DIV SWAP1 SWAP2 ADD SWAP1 SSTORE PUSH1 SLOAD PUSH9 DUP8 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP5 MUL DUP4 SUB DUP4 SUB SWAP3 POP PUSH2 JUMP JUMPDEST PUSH1 DUP5 SWAP1 SSTORE JUMPDEST CALLER PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP6 PUSH2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 SLOAD PUSH1 SWAP1 SWAP2 MSTORE SWAP3 SWAP1 SHA3 DUP1 SLOAD SWAP3 DUP8 MUL DUP7 SWAP1 SUB SWAP3 DUP4 ADD SWAP1 SSTORE SWAP1 SWAP3 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP14 AND SWAP1 PUSH32 DUP16 DUP8 DUP16 TIMESTAMP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP6 DUP7 MSTORE PUSH1 DUP7 ADD SWAP5 SWAP1 SWAP5 MSTORE SWAP2 ISZERO ISZERO DUP5 DUP5 ADD MSTORE PUSH1 DUP5 ADD MSTORE PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG3 DUP4 SWAP10 POP JUMPDEST POP POP POP POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SLOAD PUSH1 SWAP1 SWAP3 MSTORE SWAP1 SWAP2 SHA3 SLOAD PUSH1 SLOAD PUSH9 SWAP2 MUL SWAP2 SWAP1 SWAP2 SUB DIV SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP5 DUP7 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 DUP1 PUSH2 PUSH2 DUP8 PUSH1 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 PUSH2 DUP8 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH2 DUP8 DUP7 PUSH2 JUMP JUMPDEST DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SLOAD DUP7 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP7 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 PUSH2 DUP6 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH2 DUP6 PUSH1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH2 DUP6 DUP6 PUSH2 JUMP JUMPDEST DUP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH1 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP7 DUP7 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP7 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI POP PUSH1 MLOAD PUSH32 DUP2 MSTORE CALLER PUSH1 DUP3 ADD DUP2 DUP2 MSTORE PUSH1 DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 PUSH1 DUP5 ADD SWAP1 DUP2 MSTORE PUSH1 DUP5 ADD DUP7 SWAP1 MSTORE DUP9 SWAP4 PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND SWAP4 PUSH4 SWAP4 SWAP1 SWAP3 DUP11 SWAP3 DUP11 SWAP3 DUP11 SWAP3 SWAP1 SWAP2 PUSH1 ADD DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP MLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SLOAD PUSH1 EQ ISZERO PUSH2 JUMPI PUSH5 SWAP5 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH8 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 PUSH2 DUP6 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH2 DUP6 PUSH1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH2 DUP6 DUP6 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 SWAP5 POP JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH21 SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 DUP1 SLOAD PUSH21 NOT PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP4 AND PUSH20 NOT SWAP1 SWAP2 AND OR SWAP2 SWAP1 SWAP2 AND PUSH21 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 CALLER DUP3 PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 DUP3 PUSH2 JUMP JUMPDEST ADD JUMPDEST SWAP2 POP JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST ADDRESS BALANCE SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 SSTORE JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SLOAD PUSH1 EQ ISZERO PUSH2 JUMPI PUSH5 SWAP5 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH8 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 PUSH2 DUP6 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH2 DUP6 PUSH1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH2 DUP6 DUP6 PUSH2 JUMP JUMPDEST DUP4 PUSH2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 SLOAD DUP3 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP1 DUP3 SWAP1 PUSH1 DUP2 DUP2 DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 CALLER PUSH2 DUP2 PUSH2 JUMP JUMPDEST SWAP2 POP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 DUP5 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP4 AND DUP5 SWAP1 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH2 PUSH1 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER SWAP3 POP PUSH2 PUSH1 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH9 DUP10 MUL ADD SWAP1 SSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP1 DUP3 SHA3 DUP1 SLOAD SWAP1 DUP4 SWAP1 SSTORE SWAP1 MLOAD SWAP6 ADD SWAP5 SWAP3 SWAP4 POP SWAP1 SWAP2 DUP5 ISZERO PUSH2 MUL SWAP2 DUP6 SWAP2 SWAP1 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP PUSH1 DUP1 MLOAD DUP4 DUP2 MSTORE PUSH1 DUP2 ADD DUP4 SWAP1 MSTORE DUP6 ISZERO ISZERO DUP2 DUP4 ADD MSTORE SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND SWAP2 PUSH32 SWAP2 SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP4 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 PUSH1 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP6 SWAP1 SWAP6 SSTORE PUSH1 DUP1 SLOAD SWAP5 DUP8 AND DUP1 DUP5 MSTORE PUSH1 DUP4 MSTORE DUP7 DUP5 SHA3 DUP1 SLOAD SWAP7 DUP12 MUL SWAP1 SWAP7 SUB SWAP1 SWAP6 SSTORE SLOAD DUP4 DUP4 MSTORE SWAP2 DUP6 SWAP1 SHA3 DUP1 SLOAD SWAP3 DUP10 MUL SWAP1 SWAP3 ADD SWAP1 SWAP2 SSTORE DUP4 MLOAD DUP8 DUP2 MSTORE SWAP4 MLOAD SWAP2 SWAP4 PUSH32 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 PUSH1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 SWAP1 PUSH1 SWAP1 PUSH1 DUP6 ADD SWAP1 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 SWAP1 PUSH1 SWAP1 PUSH1 DUP6 ADD SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP8 POP DUP9 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP8 SWAP6 POP PUSH2 DUP7 PUSH2 JUMP JUMPDEST SWAP5 POP PUSH2 PUSH2 DUP7 PUSH1 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH2 PUSH2 DUP7 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH2 DUP7 DUP7 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 SLOAD DUP5 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH2 SWAP1 DUP8 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP8 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 SLOAD PUSH1 SWAP1 SWAP2 MSTORE SWAP2 DUP2 SHA3 DUP1 SLOAD SWAP3 DUP10 MUL PUSH9 DUP7 MUL ADD SWAP3 DUP4 SWAP1 SUB SWAP1 SSTORE PUSH1 SLOAD SWAP2 SWAP3 POP LT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH9 DUP8 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMPDEST DUP7 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP8 DUP5 TIMESTAMP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE DUP4 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 DUP4 ADD MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 LOG2 POP POP POP POP POP POP POP POP JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD SWAP1 DUP2 GT ISZERO PUSH2 JUMPI PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH5 GASPRICE GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLVALUE DUP4 PUSH1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH2 PUSH1 PUSH2 JUMP JUMPDEST GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST CALLER PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD PUSH9 DUP8 MUL ADD SWAP1 SSTORE PUSH1 SWAP1 SWAP2 MSTORE DUP2 SHA3 DUP1 SLOAD SWAP1 DUP3 SWAP1 SSTORE SWAP1 SWAP3 ADD SWAP5 POP SWAP3 POP PUSH2 SWAP1 DUP5 SWAP1 PUSH1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP5 DUP4 PUSH1 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP4 ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH12 SWAP1 DUP3 SWAP1 PUSH4 PUSH2 PUSH2 PUSH19 DUP9 MUL PUSH1 DUP6 EXP PUSH8 MUL ADD PUSH16 DUP6 MUL ADD PUSH24 ADD PUSH2 JUMP JUMPDEST DUP6 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SUB SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH8 DUP4 DUP2 ADD SWAP2 DUP2 ADD SWAP1 DUP4 SWAP1 PUSH2 PUSH5 DUP3 DUP6 DIV PUSH4 MUL ADD DUP8 MUL PUSH1 DUP4 PUSH8 NOT DUP3 DUP10 EXP DUP12 SWAP1 SUB ADD DIV PUSH4 MUL DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 SWAP1 EXTCODESIZE GT SWAP1 JUMP JUMPDEST DUP1 PUSH1 PUSH1 DUP3 ADD DIV JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP1 SWAP2 POP PUSH1 DUP2 DUP3 DUP6 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV ADD DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP PUSH2 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 PUSH2 SWAP3 POP SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP STOP LOG1 PUSH6 SHA3 DUP6 SWAP2 EQ DUP1 CALLVALUE JUMPI EXTCODECOPY UNKNOWN_0xe1 UNKNOWN_0x28 UNKNOWN_0xe7 SWAP11 COINBASE INVALID_0x7b",
  "opcode_entropy": 4.911024406017021,
  "opcode_count": 4529,
  "unique_opcodes": 91,
  "byte_entropy": 6.013561467378545,
  "byte_60": 0.09617880317231435,
  "byte_80": 0.03734679163662581,
  "byte_40": 0.009372746935832732,
  "byte_52": 0.019754866618601298,
  "byte_04": 0.011391492429704398,
  "byte_36": 0.0010093727469358328,
  "byte_10": 0.005479452054794521,
  "byte_61": 0.06416726748377793,
  "byte_01": 0.028406633020908435,
  "byte_cb": 0.0011535688536409518,
  "byte_57": 0.022350396539293438,
  "byte_63": 0.006200432588320115,
  "byte_ff": 0.010382119682768566,
  "byte_7c": 0.0004325883201153569,
  "byte_00": 0.06993511175198269,
  "byte_35": 0.004325883201153569,
  "byte_16": 0.01528478731074261,
  "byte_62": 0.0005767844268204759,
  "byte_65": 0.0004325883201153569,
  "byte_31": 0.0014419610670511895,
  "byte_8b": 0.0014419610670511895,
  "byte_81": 0.022638788752703677,
  "byte_14": 0.009372746935832732,
  "byte_ec": 0.0007209805335255948,
  "byte_06": 0.0027397260273972603,
  "byte_fd": 0.010237923576063446,
  "byte_de": 0.0005767844268204759,
  "byte_03": 0.01687094448449892,
  "byte_02": 0.018601297764960344,
  "byte_1f": 0.0020187454938716655,
  "byte_0f": 0.0021629416005767843,
  "byte_34": 0.006056236481614997,
  "byte_dc": 0.00028839221341023794,
  "byte_a9": 0.0005767844268204759,
  "byte_d0": 0.0024513338139870223,
  "byte_dd": 0.0007209805335255948,
  "byte_18": 0.00692141312184571,
  "byte_0d": 0.007930785868781542,
  "byte_f6": 0.0005767844268204759,
  "byte_1d": 0.00028839221341023794,
  "byte_54": 0.014563806777217015,
  "byte_59": 0.0008651766402307138,
  "byte_f7": 0.0004325883201153569,
  "byte_0b": 0.002883922134102379,
  "byte_22": 0.0008651766402307138,
  "byte_93": 0.004902667627974045,
  "byte_73": 0.0014419610670511895,
  "byte_2e": 0.0004325883201153569,
  "byte_25": 0.0005767844268204759,
  "byte_05": 0.005479452054794521,
  "byte_c4": 0.0004325883201153569,
  "byte_45": 0.0004325883201153569,
  "byte_46": 0.0008651766402307138,
  "byte_27": 0.0004325883201153569,
  "byte_fa": 0.00028839221341023794,
  "byte_5b": 0.04311463590483057,
  "byte_29": 0.00028839221341023794,
  "byte_42": 0.0008651766402307138,
  "byte_b4": 0.0005767844268204759,
  "byte_70": 0.0010093727469358328,
  "byte_3c": 0.00028839221341023794,
  "byte_e5": 0.00028839221341023794,
  "byte_67": 0.0015861571737563085,
  "byte_96": 0.0014419610670511895,
  "byte_ae": 0.0004325883201153569,
  "byte_a0": 0.007209805335255948,
  "byte_c1": 0.0004325883201153569,
  "byte_4b": 0.0005767844268204759,
  "byte_75": 0.0005767844268204759,
  "byte_f2": 0.0005767844268204759,
  "byte_56": 0.02638788752703677,
  "byte_d3": 0.0007209805335255948,
  "byte_99": 0.0007209805335255948,
  "byte_e8": 0.00028839221341023794,
  "byte_07": 0.004902667627974045,
  "byte_5e": 0.0005767844268204759,
  "byte_9a": 0.0011535688536409518,
  "byte_a5": 0.0005767844268204759,
  "byte_1c": 0.0007209805335255948,
  "byte_66": 0.0004325883201153569,
  "byte_7a": 0.0004325883201153569,
  "byte_4d": 0.00028839221341023794,
  "byte_26": 0.00028839221341023794,
  "byte_ef": 0.00028839221341023794,
  "byte_68": 0.0023071377072819035,
  "byte_8a": 0.0012977649603460708,
  "byte_bb": 0.0008651766402307138,
  "byte_83": 0.009661139149242971,
  "byte_6b": 0.00028839221341023794,
  "byte_2f": 0.00014419610670511897,
  "byte_32": 0.0007209805335255948,
  "byte_9d": 0.0007209805335255948,
  "byte_82": 0.009949531362653209,
  "byte_b2": 0.0005767844268204759,
  "byte_76": 0.00028839221341023794,
  "byte_be": 0.0007209805335255948,
  "byte_15": 0.027108868060562365,
  "byte_85": 0.006777217015140591,
  "byte_7f": 0.0014419610670511895,
  "byte_bd": 0.0005767844268204759,
  "byte_f4": 0.00028839221341023794,
  "byte_28": 0.0008651766402307138,
  "byte_b6": 0.0018745493871665465,
  "byte_09": 0.0023071377072819035,
  "byte_86": 0.004614275414563807,
  "byte_20": 0.01788031723143475,
  "byte_41": 0.0004325883201153569,
  "byte_21": 0.0004325883201153569,
  "byte_87": 0.003749098774333093,
  "byte_c9": 0.0005767844268204759,
  "byte_50": 0.03547224224945927,
  "byte_58": 0.0004325883201153569,
  "byte_89": 0.0023071377072819035,
  "byte_74": 0.0014419610670511895,
  "byte_37": 0.0014419610670511895,
  "byte_2d": 0.0007209805335255948,
  "byte_5c": 0.00028839221341023794,
  "byte_94": 0.005191059841384283,
  "byte_9e": 0.0005767844268204759,
  "byte_cd": 0.0007209805335255948,
  "byte_64": 0.0018745493871665465,
  "byte_95": 0.002883922134102379,
  "byte_d8": 0.0007209805335255948,
  "byte_9b": 0.0005767844268204759,
  "byte_79": 0.00028839221341023794,
  "byte_a8": 0.0004325883201153569,
  "byte_4c": 0.0005767844268204759,
  "byte_8e": 0.0010093727469358328,
  "byte_9c": 0.0005767844268204759,
  "byte_b8": 0.00028839221341023794,
  "byte_cc": 0.00028839221341023794,
  "byte_f5": 0.0004325883201153569,
  "byte_7e": 0.0004325883201153569,
  "byte_e4": 0.0004325883201153569,
  "byte_84": 0.009228550829127614,
  "byte_e9": 0.0010093727469358328,
  "byte_ee": 0.0005767844268204759,
  "byte_ab": 0.0008651766402307138,
  "byte_f0": 0.00028839221341023794,
  "byte_88": 0.0017303532804614275,
  "byte_d5": 0.00028839221341023794,
  "byte_47": 0.00028839221341023794,
  "byte_c0": 0.0005767844268204759,
  "byte_b5": 0.0005767844268204759,
  "byte_3e": 0.0010093727469358328,
  "byte_d4": 0.0010093727469358328,
  "byte_a4": 0.0005767844268204759,
  "byte_3b": 0.0010093727469358328,
  "byte_3a": 0.0007209805335255948,
  "byte_11": 0.006488824801730353,
  "byte_f8": 0.0007209805335255948,
  "byte_0a": 0.010093727469358327,
  "byte_0c": 0.004325883201153569,
  "byte_51": 0.005767844268204758,
  "byte_91": 0.012112472963229993,
  "byte_90": 0.03734679163662581,
  "byte_f3": 0.0011535688536409518,
  "byte_2b": 0.0004325883201153569,
  "byte_bf": 0.00028839221341023794,
  "byte_92": 0.008795962509012257,
  "byte_6e": 0.0004325883201153569,
  "byte_19": 0.006344628695025234,
  "byte_ca": 0.0014419610670511895,
  "byte_ea": 0.00028839221341023794,
  "byte_af": 0.0004325883201153569,
  "byte_17": 0.0024513338139870223,
  "byte_2c": 0.0020187454938716655,
  "byte_0e": 0.003604902667627974,
  "byte_24": 0.0017303532804614275,
  "byte_ad": 0.0004325883201153569,
  "byte_a2": 0.0008651766402307138,
  "byte_44": 0.0010093727469358328,
  "byte_fc": 0.0007209805335255948,
  "byte_fe": 0.0025955299206921415,
  "byte_13": 0.0027397260273972603,
  "byte_a3": 0.0007209805335255948,
  "byte_8f": 0.0008651766402307138,
  "byte_df": 0.0004325883201153569,
  "byte_d6": 0.00028839221341023794,
  "byte_eb": 0.0005767844268204759,
  "byte_f1": 0.0008651766402307138,
  "byte_12": 0.005335255948089402,
  "byte_7b": 0.0004325883201153569,
  "byte_c5": 0.00028839221341023794,
  "byte_8d": 0.0017303532804614275,
  "byte_97": 0.0007209805335255948,
  "byte_9f": 0.00028839221341023794,
  "byte_b7": 0.0024513338139870223,
  "byte_b3": 0.0011535688536409518,
  "byte_e2": 0.0004325883201153569,
  "byte_e0": 0.0015861571737563085,
  "byte_55": 0.005912040374909878,
  "byte_da": 0.00028839221341023794,
  "byte_ce": 0.0007209805335255948,
  "byte_33": 0.003749098774333093,
  "byte_ba": 0.002883922134102379,
  "byte_fb": 0.0004325883201153569,
  "byte_98": 0.00028839221341023794,
  "byte_db": 0.00014419610670511897,
  "byte_e7": 0.0004325883201153569,
  "byte_08": 0.004037490987743331,
  "byte_8c": 0.0008651766402307138,
  "byte_6c": 0.00014419610670511897,
  "byte_49": 0.0005767844268204759,
  "byte_5d": 0.0005767844268204759,
  "byte_77": 0.0005767844268204759,
  "byte_c8": 0.0005767844268204759,
  "byte_38": 0.00028839221341023794,
  "byte_b9": 0.00028839221341023794,
  "byte_d2": 0.0005767844268204759,
  "byte_aa": 0.0004325883201153569,
  "byte_6a": 0.0007209805335255948,
  "byte_ed": 0.00028839221341023794,
  "byte_3d": 0.0012977649603460708,
  "byte_43": 0.00028839221341023794,
  "byte_71": 0.0005767844268204759,
  "byte_72": 0.0007209805335255948,
  "byte_2a": 0.0007209805335255948,
  "byte_53": 0.0005767844268204759,
  "byte_a6": 0.00028839221341023794,
  "byte_b1": 0.00028839221341023794,
  "byte_48": 0.00028839221341023794,
  "byte_c3": 0.00014419610670511897,
  "byte_4e": 0.00028839221341023794,
  "byte_7d": 0.00028839221341023794,
  "byte_1a": 0.0027397260273972603,
  "byte_5a": 0.0004325883201153569,
  "byte_a7": 0.0010093727469358328,
  "byte_30": 0.0005767844268204759,
  "byte_1e": 0.0004325883201153569,
  "byte_cf": 0.00028839221341023794,
  "byte_f9": 0.00014419610670511897,
  "byte_4f": 0.00028839221341023794,
  "byte_1b": 0.00014419610670511897,
  "byte_69": 0.00014419610670511897,
  "byte_c2": 0.00014419610670511897,
  "byte_b0": 0.0005767844268204759,
  "byte_a1": 0.00028839221341023794,
  "byte_23": 0.00014419610670511897,
  "byte_4a": 0.0005767844268204759,
  "byte_c6": 0.00014419610670511897,
  "byte_78": 0.00028839221341023794,
  "byte_e3": 0.00014419610670511897,
  "byte_d1": 0.00014419610670511897,
  "byte_6f": 0.00014419610670511897,
  "byte_6d": 0.00028839221341023794,
  "byte_c7": 0.00028839221341023794,
  "byte_ac": 0.00014419610670511897,
  "byte_d7": 0.00028839221341023794,
  "byte_e1": 0.00028839221341023794,
  "byte_d9": 0.00014419610670511897,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 3,
  "event_nums": 0,
  "creation_block": 7068922,
  "creation_timestamp": 1547532301,
  "life_time": 131.0,
  "duration_seconds": 1871.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.022727272727272728,
  "avg_gas_limit": 712072.6666666666,
  "std_gas_limit": 955540.3555393264,
  "avg_gas_used": 712072.6666666666,
  "std_gas_used": 955540.3555393264,
  "avg_gas_price": 3991587301.6666665,
  "std_gas_price": 733213382.6427989,
  "updatefundaddress_num": 1,
  "finalizefundaddress_num": 1,
  "timeline_sequence": [
    [
      7068922,
      1547532301,
      4,
      94,
      0,
      2063384,
      3000000000,
      0,
      1,
      6798445,
      2063384,
      16052032
    ],
    [
      7069044,
      1547533923,
      7,
      89,
      0,
      43787,
      4224761905,
      0,
      1,
      4279426,
      43787,
      16051910
    ],
    [
      7069053,
      1547534172,
      8,
      21,
      0,
      29047,
      4750000000,
      0,
      1,
      1903825,
      29047,
      16051901
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.25;\n\ncontract AcceptsExchange {\n    Exchange public tokenContract;\n\n    constructor(address _tokenContract) public {\n        tokenContract = Exchange(_tokenContract);\n    }\n\n    modifier onlyTokenContract {\n        require(msg.sender == address(tokenContract));\n        _;\n    }\n\n    /**\n    * @dev Standard ERC677 function that will handle incoming token transfers.\n    *\n    * @param _from  Token sender address.\n    * @param _value Amount of tokens.\n    * @param _data  Transaction metadata.\n    */\n    function tokenFallback(address _from, uint256 _value, bytes _data) external returns (bool);\n}\n\n\ncontract Exchange {\n    /*=================================\n    =            MODIFIERS            =\n    =================================*/\n    // only people with tokens\n    modifier onlyBagholders() {\n        require(myTokens() > 0);\n        _;\n    }\n\n    // only people with profits\n    modifier onlyStronghands() {\n        require(myDividends(true) > 0);\n        _;\n    }\n\n    modifier notContract() {\n      require (msg.sender == tx.origin);\n      _;\n    }\n\n    // administrators can:\n    // -> change the name of the contract\n    // -> change the name of the token\n    // -> change the PoS difficulty (How many tokens it costs to hold a masternode, in case it gets crazy high later)\n    // they CANNOT:\n    // -> take funds\n    // -> disable withdrawals\n    // -> kill the contract\n    // -> change the price of tokens\n    modifier onlyAdministrator(){\n        address _customerAddress = msg.sender;\n        require(administrators[_customerAddress]);\n        _;\n    }\n\n    uint ACTIVATION_TIME = 1547996400;\n\n    // ensures that the first tokens in the contract will be equally distributed\n    // meaning, no divine dump will be ever possible\n    // result: healthy longevity.\n    modifier antiEarlyWhale(uint256 _amountOfEthereum){\n\n        if (now >= ACTIVATION_TIME) {\n            onlyAmbassadors = false;\n        }\n\n        // are we still in the vulnerable phase?\n        // if so, enact anti early whale protocol\n        if( onlyAmbassadors && ((totalEthereumBalance() - _amountOfEthereum) <= ambassadorQuota_ )){\n            require(\n                // is the customer in the ambassador list?\n                ambassadors_[msg.sender] == true &&\n\n                // does the customer purchase exceed the max ambassador quota?\n                (ambassadorAccumulatedQuota_[msg.sender] + _amountOfEthereum) <= ambassadorMaxPurchase_\n\n            );\n\n            // updated the accumulated quota\n            ambassadorAccumulatedQuota_[msg.sender] = SafeMath.add(ambassadorAccumulatedQuota_[msg.sender], _amountOfEthereum);\n\n            // execute\n            _;\n        } else {\n            // in case the ether count drops low, the ambassador phase won't reinitiate\n            onlyAmbassadors = false;\n            _;\n        }\n\n    }\n\n    /*==============================\n    =            EVENTS            =\n    ==============================*/\n    event onTokenPurchase(\n        address indexed customerAddress,\n        uint256 incomingEthereum,\n        uint256 tokensMinted,\n        address indexed referredBy,\n        bool isReinvest,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onTokenSell(\n        address indexed customerAddress,\n        uint256 tokensBurned,\n        uint256 ethereumEarned,\n        uint timestamp,\n        uint256 price\n    );\n\n    event onReinvestment(\n        address indexed customerAddress,\n        uint256 ethereumReinvested,\n        uint256 tokensMinted\n    );\n\n    event onWithdraw(\n        address indexed customerAddress,\n        uint256 ethereumWithdrawn,\n        uint256 estimateTokens,\n        bool isTransfer\n    );\n\n    // ERC20\n    event Transfer(\n        address indexed from,\n        address indexed to,\n        uint256 tokens\n    );\n\n\n    /*=====================================\n    =            CONFIGURABLES            =\n    =====================================*/\n    string public name = \"EXCHANGE\";\n    string public symbol = \"DICE\";\n    uint8 constant public decimals = 18;\n\n    uint8 constant internal dividendFee_ = 20; // 20% dividend fee on each buy and sell\n    uint8 constant internal fundFee_ = 5; // 5% to dice game\n\n    uint256 constant internal tokenPriceInitial_ = 0.00000001 ether;\n    uint256 constant internal tokenPriceIncremental_ = 0.000000001 ether;\n    uint256 constant internal magnitude = 2**64;\n\n    // Address to send the 5% Fee\n    address public giveEthFundAddress = 0x0;\n    bool public finalizedEthFundAddress = false;\n    uint256 public totalEthFundReceived; // total ETH charity received from this contract\n    uint256 public totalEthFundCollected; // total ETH charity collected in this contract\n\n    // proof of stake (defaults at 250 tokens)\n    uint256 public stakingRequirement = 25e18;\n\n    // ambassador program\n    mapping(address => bool) internal ambassadors_;\n    uint256 constant internal ambassadorMaxPurchase_ = 4 ether;\n    uint256 constant internal ambassadorQuota_ = 4 ether;\n\n   /*================================\n    =            DATASETS            =\n    ================================*/\n    // amount of shares for each address (scaled number)\n    mapping(address => uint256) internal tokenBalanceLedger_;\n    mapping(address => uint256) internal referralBalance_;\n    mapping(address => int256) internal payoutsTo_;\n    mapping(address => uint256) internal ambassadorAccumulatedQuota_;\n    uint256 internal tokenSupply_ = 0;\n    uint256 internal profitPerShare_;\n\n    // administrator list (see above on what they can do)\n    mapping(address => bool) public administrators;\n\n    // when this is set to true, only ambassadors can purchase tokens (this prevents a whale premine, it ensures a fairly distributed upper pyramid)\n    bool public onlyAmbassadors = true;\n\n    // To whitelist game contracts on the platform\n    mapping(address => bool) public canAcceptTokens_; // contracts, which can accept the exchanges tokens\n\n    /*=======================================\n    =            PUBLIC FUNCTIONS            =\n    =======================================*/\n    /*\n    * -- APPLICATION ENTRY POINTS --\n    */\n    constructor()\n        public\n    {\n        // add administrators here\n        administrators[0xB477ACeb6262b12a3c7b2445027a072f95C75Bd3] = true;\n\n        // add the ambassadors here\n        ambassadors_[0xB477ACeb6262b12a3c7b2445027a072f95C75Bd3] = true;\n    }\n\n\n    /**\n     * Converts all incoming ethereum to tokens for the caller, and passes down the referral addy (if any)\n     */\n    function buy(address _referredBy)\n        public\n        payable\n        returns(uint256)\n    {\n\n        require(tx.gasprice <= 0.05 szabo);\n        purchaseTokens(msg.value, _referredBy, false);\n    }\n\n    /**\n     * Fallback function to handle ethereum that was send straight to the contract\n     * Unfortunately we cannot use a referral address this way.\n     */\n    function()\n        payable\n        public\n    {\n\n        require(tx.gasprice <= 0.05 szabo);\n        purchaseTokens(msg.value, 0x0, false);\n    }\n\n    function updateFundAddress(address _newAddress)\n        onlyAdministrator()\n        public\n    {\n        require(finalizedEthFundAddress == false);\n        giveEthFundAddress = _newAddress;\n    }\n\n    function finalizeFundAddress(address _finalAddress)\n        onlyAdministrator()\n        public\n    {\n        require(finalizedEthFundAddress == false);\n        giveEthFundAddress = _finalAddress;\n        finalizedEthFundAddress = true;\n    }\n\n    /**\n     * Sends fund to dice smart contract\n     * No Reentrancy attack as address is finalized to dice smart contract\n     */\n    function payFund() payable public {\n        uint256 ethToPay = SafeMath.sub(totalEthFundCollected, totalEthFundReceived);\n        require(ethToPay > 0);\n        totalEthFundReceived = SafeMath.add(totalEthFundReceived, ethToPay);\n        if(!giveEthFundAddress.call.value(ethToPay)()) {\n            revert();\n        }\n    }\n\n    /**\n     * Converts all of caller's dividends to tokens.\n     */\n    function reinvest()\n        onlyStronghands()\n        public\n    {\n        // fetch dividends\n        uint256 _dividends = myDividends(false); // retrieve ref. bonus later in the code\n\n        // pay out the dividends virtually\n        address _customerAddress = msg.sender;\n        payoutsTo_[_customerAddress] +=  (int256) (_dividends * magnitude);\n\n        // retrieve ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // dispatch a buy order with the virtualized \"withdrawn dividends\"\n        uint256 _tokens = purchaseTokens(_dividends, 0x0, true);\n\n        // fire event\n        emit onReinvestment(_customerAddress, _dividends, _tokens);\n    }\n\n    /**\n     * Alias of sell() and withdraw().\n     */\n    function exit()\n        public\n    {\n        // get token count for caller & sell them all\n        address _customerAddress = msg.sender;\n        uint256 _tokens = tokenBalanceLedger_[_customerAddress];\n        if(_tokens > 0) sell(_tokens);\n\n        // lambo delivery service\n        withdraw(false);\n    }\n\n    /**\n     * Withdraws all of the callers earnings.\n     */\n    function withdraw(bool _isTransfer)\n        onlyStronghands()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        uint256 _dividends = myDividends(false); // get ref. bonus later in the code\n\n        uint256 _estimateTokens = calculateTokensReceived(_dividends);\n\n        // update dividend tracker\n        payoutsTo_[_customerAddress] += (int256) (_dividends * magnitude);\n\n        // add ref. bonus\n        _dividends += referralBalance_[_customerAddress];\n        referralBalance_[_customerAddress] = 0;\n\n        // lambo delivery service\n        _customerAddress.transfer(_dividends);\n\n        // fire event\n        emit onWithdraw(_customerAddress, _dividends, _estimateTokens, _isTransfer);\n    }\n\n    /**\n     * Liquifies tokens to ethereum.\n     */\n    function sell(uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n    {\n        // setup data\n        address _customerAddress = msg.sender;\n        // russian hackers BTFO\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n        uint256 _tokens = _amountOfTokens;\n        uint256 _ethereum = tokensToEthereum_(_tokens);\n\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n\n        // Take out dividends and then _fundPayout\n        uint256 _taxedEthereum =  SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n\n        // Add ethereum to send to fund\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n\n        // burn the sold tokens\n        tokenSupply_ = SafeMath.sub(tokenSupply_, _tokens);\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _tokens);\n\n        // update dividends tracker\n        int256 _updatedPayouts = (int256) (profitPerShare_ * _tokens + (_taxedEthereum * magnitude));\n        payoutsTo_[_customerAddress] -= _updatedPayouts;\n\n        // dividing by zero is a bad idea\n        if (tokenSupply_ > 0) {\n            // update the amount of dividends per token\n            profitPerShare_ = SafeMath.add(profitPerShare_, (_dividends * magnitude) / tokenSupply_);\n        }\n\n        // fire event\n        emit onTokenSell(_customerAddress, _tokens, _taxedEthereum, now, buyPrice());\n    }\n\n\n    /**\n     * Transfer tokens from the caller to a new holder.\n     * REMEMBER THIS IS 0% TRANSFER FEE\n     */\n    function transfer(address _toAddress, uint256 _amountOfTokens)\n        onlyBagholders()\n        public\n        returns(bool)\n    {\n        // setup\n        address _customerAddress = msg.sender;\n\n        // make sure we have the requested tokens\n        // also disables transfers until ambassador phase is over\n        // ( we dont want whale premines )\n        require(_amountOfTokens <= tokenBalanceLedger_[_customerAddress]);\n\n        // withdraw all outstanding dividends first\n        if(myDividends(true) > 0) withdraw(true);\n\n        // exchange tokens\n        tokenBalanceLedger_[_customerAddress] = SafeMath.sub(tokenBalanceLedger_[_customerAddress], _amountOfTokens);\n        tokenBalanceLedger_[_toAddress] = SafeMath.add(tokenBalanceLedger_[_toAddress], _amountOfTokens);\n\n        // update dividend trackers\n        payoutsTo_[_customerAddress] -= (int256) (profitPerShare_ * _amountOfTokens);\n        payoutsTo_[_toAddress] += (int256) (profitPerShare_ * _amountOfTokens);\n\n\n        // fire event\n        emit Transfer(_customerAddress, _toAddress, _amountOfTokens);\n\n        // ERC20\n        return true;\n    }\n\n    /**\n    * Transfer token to a specified address and forward the data to recipient\n    * ERC-677 standard\n    * https://github.com/ethereum/EIPs/issues/677\n    * @param _to    Receiver address.\n    * @param _value Amount of tokens that will be transferred.\n    * @param _data  Transaction metadata.\n    */\n    function transferAndCall(address _to, uint256 _value, bytes _data) external returns (bool) {\n      require(_to != address(0));\n      require(canAcceptTokens_[_to] == true); // security check that contract approved by the exchange\n      require(transfer(_to, _value)); // do a normal token transfer to the contract\n\n      if (isContract(_to)) {\n        AcceptsExchange receiver = AcceptsExchange(_to);\n        require(receiver.tokenFallback(msg.sender, _value, _data));\n      }\n\n      return true;\n    }\n\n    /**\n     * Additional check that the game address we are sending tokens to is a contract\n     * assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n     */\n     function isContract(address _addr) private constant returns (bool is_contract) {\n       // retrieve the size of the code on target address, this needs assembly\n       uint length;\n       assembly { length := extcodesize(_addr) }\n       return length > 0;\n     }\n\n    /*----------  ADMINISTRATOR ONLY FUNCTIONS  ----------*/\n    /**\n\n    /**\n     * In case one of us dies, we need to replace ourselves.\n     */\n    function setAdministrator(address _identifier, bool _status)\n        onlyAdministrator()\n        public\n    {\n        administrators[_identifier] = _status;\n    }\n\n    /**\n     * Precautionary measures in case we need to adjust the masternode rate.\n     */\n    function setStakingRequirement(uint256 _amountOfTokens)\n        onlyAdministrator()\n        public\n    {\n        stakingRequirement = _amountOfTokens;\n    }\n\n    /**\n     * Add or remove game contract, which can accept tokens\n     */\n    function setCanAcceptTokens(address _address, bool _value)\n      onlyAdministrator()\n      public\n    {\n      canAcceptTokens_[_address] = _value;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setName(string _name)\n        onlyAdministrator()\n        public\n    {\n        name = _name;\n    }\n\n    /**\n     * If we want to rebrand, we can.\n     */\n    function setSymbol(string _symbol)\n        onlyAdministrator()\n        public\n    {\n        symbol = _symbol;\n    }\n\n\n    /*----------  HELPERS AND CALCULATORS  ----------*/\n    /**\n     * Method to view the current Ethereum stored in the contract\n     * Example: totalEthereumBalance()\n     */\n    function totalEthereumBalance()\n        public\n        view\n        returns(uint)\n    {\n        return address(this).balance;\n    }\n\n    /**\n     * Retrieve the total token supply.\n     */\n    function totalSupply()\n        public\n        view\n        returns(uint256)\n    {\n        return tokenSupply_;\n    }\n\n    /**\n     * Retrieve the tokens owned by the caller.\n     */\n    function myTokens()\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return balanceOf(_customerAddress);\n    }\n\n    /**\n     * Retrieve the dividends owned by the caller.\n     * If `_includeReferralBonus` is to to 1/true, the referral bonus will be included in the calculations.\n     * The reason for this, is that in the frontend, we will want to get the total divs (global + ref)\n     * But in the internal calculations, we want them separate.\n     */\n    function myDividends(bool _includeReferralBonus)\n        public\n        view\n        returns(uint256)\n    {\n        address _customerAddress = msg.sender;\n        return _includeReferralBonus ? dividendsOf(_customerAddress) + referralBalance_[_customerAddress] : dividendsOf(_customerAddress) ;\n    }\n\n    /**\n     * Retrieve the token balance of any single address.\n     */\n    function balanceOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return tokenBalanceLedger_[_customerAddress];\n    }\n\n    /**\n     * Retrieve the dividend balance of any single address.\n     */\n    function dividendsOf(address _customerAddress)\n        view\n        public\n        returns(uint256)\n    {\n        return (uint256) ((int256)(profitPerShare_ * tokenBalanceLedger_[_customerAddress]) - payoutsTo_[_customerAddress]) / magnitude;\n    }\n\n    /**\n     * Return the buy price of 1 individual token.\n     */\n    function sellPrice()\n        public\n        view\n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ - tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n            uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n            return _taxedEthereum;\n        }\n    }\n\n    /**\n     * Return the sell price of 1 individual token.\n     */\n    function buyPrice()\n        public\n        view\n        returns(uint256)\n    {\n        // our calculation relies on the token supply, so we need supply. Doh.\n        if(tokenSupply_ == 0){\n            return tokenPriceInitial_ + tokenPriceIncremental_;\n        } else {\n            uint256 _ethereum = tokensToEthereum_(1e18);\n            uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n            uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n            uint256 _taxedEthereum =  SafeMath.add(SafeMath.add(_ethereum, _dividends), _fundPayout);\n            return _taxedEthereum;\n        }\n    }\n\n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of buy orders.\n     */\n    function calculateTokensReceived(uint256 _ethereumToSpend)\n        public\n        view\n        returns(uint256)\n    {\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereumToSpend, dividendFee_), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereumToSpend, fundFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereumToSpend, _dividends), _fundPayout);\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        return _amountOfTokens;\n    }\n\n    /**\n     * Function for the frontend to dynamically retrieve the price scaling of sell orders.\n     */\n    function calculateEthereumReceived(uint256 _tokensToSell)\n        public\n        view\n        returns(uint256)\n    {\n        require(_tokensToSell <= tokenSupply_);\n        uint256 _ethereum = tokensToEthereum_(_tokensToSell);\n        uint256 _dividends = SafeMath.div(SafeMath.mul(_ethereum, dividendFee_), 100);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_ethereum, fundFee_), 100);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_ethereum, _dividends), _fundPayout);\n        return _taxedEthereum;\n    }\n\n    /**\n     * Function for the frontend to show ether waiting to be send to fund in contract\n     */\n    function etherToSendFund()\n        public\n        view\n        returns(uint256) {\n        return SafeMath.sub(totalEthFundCollected, totalEthFundReceived);\n    }\n\n    /*==========================================\n    =            INTERNAL FUNCTIONS            =\n    ==========================================*/\n\n    function purchaseTokens(uint256 _incomingEthereum, address _referredBy, bool _isReinvest)\n        antiEarlyWhale(_incomingEthereum)\n        internal\n        returns(uint256)\n    {\n        // data setup\n        uint256 _undividedDividends = SafeMath.div(SafeMath.mul(_incomingEthereum, dividendFee_), 100);\n        uint256 _referralBonus = SafeMath.div(_undividedDividends, 3);\n        uint256 _fundPayout = SafeMath.div(SafeMath.mul(_incomingEthereum, fundFee_), 100);\n        uint256 _dividends = SafeMath.sub(_undividedDividends, _referralBonus);\n        uint256 _taxedEthereum = SafeMath.sub(SafeMath.sub(_incomingEthereum, _undividedDividends), _fundPayout);\n        totalEthFundCollected = SafeMath.add(totalEthFundCollected, _fundPayout);\n\n        uint256 _amountOfTokens = ethereumToTokens_(_taxedEthereum);\n        uint256 _fee = _dividends * magnitude;\n\n        // no point in continuing execution if OP is a poor russian hacker\n        // prevents overflow in the case that the pyramid somehow magically starts being used by everyone in the world\n        // (or hackers)\n        // and yes we know that the safemath function automatically rules out the \"greater then\" equation.\n        require(_amountOfTokens > 0 && (SafeMath.add(_amountOfTokens,tokenSupply_) > tokenSupply_));\n\n        // is the user referred by a masternode?\n        if(\n            // is this a referred purchase?\n            _referredBy != 0x0000000000000000000000000000000000000000 &&\n\n            // no cheating!\n            _referredBy != msg.sender &&\n\n            // does the referrer have at least X whole tokens?\n            // i.e is the referrer a godly chad masternode\n            tokenBalanceLedger_[_referredBy] >= stakingRequirement\n        ){\n            // wealth redistribution\n            referralBalance_[_referredBy] = SafeMath.add(referralBalance_[_referredBy], _referralBonus);\n        } else {\n            // no ref purchase\n            // add the referral bonus back to the global dividends cake\n            _dividends = SafeMath.add(_dividends, _referralBonus);\n            _fee = _dividends * magnitude;\n        }\n\n        // we can't give people infinite ethereum\n        if(tokenSupply_ > 0){\n\n            // add tokens to the pool\n            tokenSupply_ = SafeMath.add(tokenSupply_, _amountOfTokens);\n\n            // take the amount of dividends gained through this transaction, and allocates them evenly to each shareholder\n            profitPerShare_ += (_dividends * magnitude / (tokenSupply_));\n\n            // calculate the amount of tokens the customer receives over his purchase\n            _fee = _fee - (_fee-(_amountOfTokens * (_dividends * magnitude / (tokenSupply_))));\n\n        } else {\n            // add tokens to the pool\n            tokenSupply_ = _amountOfTokens;\n        }\n\n        // update circulating supply & the ledger address for the customer\n        tokenBalanceLedger_[msg.sender] = SafeMath.add(tokenBalanceLedger_[msg.sender], _amountOfTokens);\n\n        // Tells the contract that the buyer doesn't deserve dividends for the tokens before they owned them;\n        //really i know you think you do but you don't\n        int256 _updatedPayouts = (int256) ((profitPerShare_ * _amountOfTokens) - _fee);\n        payoutsTo_[msg.sender] += _updatedPayouts;\n\n        // fire event\n        emit onTokenPurchase(msg.sender, _incomingEthereum, _amountOfTokens, _referredBy, _isReinvest, now, buyPrice());\n\n        return _amountOfTokens;\n    }\n\n    /**\n     * Calculate Token price based on an amount of incoming ethereum\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n    function ethereumToTokens_(uint256 _ethereum)\n        internal\n        view\n        returns(uint256)\n    {\n        uint256 _tokenPriceInitial = tokenPriceInitial_ * 1e18;\n        uint256 _tokensReceived =\n         (\n            (\n                // underflow attempts BTFO\n                SafeMath.sub(\n                    (sqrt\n                        (\n                            (_tokenPriceInitial**2)\n                            +\n                            (2*(tokenPriceIncremental_ * 1e18)*(_ethereum * 1e18))\n                            +\n                            (((tokenPriceIncremental_)**2)*(tokenSupply_**2))\n                            +\n                            (2*(tokenPriceIncremental_)*_tokenPriceInitial*tokenSupply_)\n                        )\n                    ), _tokenPriceInitial\n                )\n            )/(tokenPriceIncremental_)\n        )-(tokenSupply_)\n        ;\n\n        return _tokensReceived;\n    }\n\n    /**\n     * Calculate token sell value.\n     * It's an algorithm, hopefully we gave you the whitepaper with it in scientific notation;\n     * Some conversions occurred to prevent decimal errors or underflows / overflows in solidity code.\n     */\n     function tokensToEthereum_(uint256 _tokens)\n        internal\n        view\n        returns(uint256)\n    {\n\n        uint256 tokens_ = (_tokens + 1e18);\n        uint256 _tokenSupply = (tokenSupply_ + 1e18);\n        uint256 _etherReceived =\n        (\n            // underflow attempts BTFO\n            SafeMath.sub(\n                (\n                    (\n                        (\n                            tokenPriceInitial_ +(tokenPriceIncremental_ * (_tokenSupply/1e18))\n                        )-tokenPriceIncremental_\n                    )*(tokens_ - 1e18)\n                ),(tokenPriceIncremental_*((tokens_**2-tokens_)/1e18))/2\n            )\n        /1e18);\n        return _etherReceived;\n    }\n\n\n    //This is where all your gas goes, sorry\n    //Not sorry, you probably only paid 1 gwei\n    function sqrt(uint x) internal pure returns (uint y) {\n        uint z = (x + 1) / 2;\n        y = x;\n        while (z < y) {\n            y = z;\n            z = (x / z + z) / 2;\n        }\n    }\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n    /**\n    * @dev Multiplies two numbers, throws on overflow.\n    */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / a == b);\n        return c;\n    }\n\n    /**\n    * @dev Integer division of two numbers, truncating the quotient.\n    */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    /**\n    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n    */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    /**\n    * @dev Adds two numbers, throws on overflow.\n    */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}"
}