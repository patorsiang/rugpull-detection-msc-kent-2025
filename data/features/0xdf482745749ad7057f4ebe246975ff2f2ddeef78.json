{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 SWAP1 PUSH1 SWAP1 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD ISZERO ISZERO PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 SSTORE JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 DUP2 SWAP1 SSTORE PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 DUP1 SLOAD DUP4 SWAP1 SUB SWAP1 SSTORE PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE ADDRESS SWAP1 SWAP3 AND SWAP2 PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP4 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD DUP3 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP9 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP3 MSTORE DUP1 DUP4 SHA3 CALLER SWAP1 SWAP6 AND DUP4 MSTORE SWAP4 SWAP1 MSTORE DUP3 SWAP1 SHA3 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE SWAP1 PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP PUSH1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD CALLVALUE MUL PUSH2 ADDRESS CALLER DUP4 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH2 CALLER DUP4 DUP4 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP4 PUSH2 DUP2 DUP6 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI DUP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 CALLER DUP7 ADDRESS DUP8 PUSH1 MLOAD DUP6 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST GAS CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP3 DUP4 MSTORE PUSH1 DUP1 DUP5 SHA3 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 MUL PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 CALLER ADDRESS DUP4 PUSH2 JUMP JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 PUSH1 SLOAD DUP4 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND DUP4 ISZERO ISZERO OR SWAP1 SSTORE PUSH32 SWAP1 DUP4 SWAP1 DUP4 SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 DUP2 ADD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE SWAP3 DUP6 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 SHA3 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE SWAP2 PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP STOP LOG1 PUSH6 SHA3 PUSH15 UNKNOWN_0xbc INVALID_0x70",
  "opcode_entropy": 4.700687463711051,
  "opcode_count": 2189,
  "unique_opcodes": 64,
  "byte_entropy": 5.8024834443075815,
  "byte_60": 0.12274809160305343,
  "byte_40": 0.014045801526717557,
  "byte_52": 0.028091603053435114,
  "byte_04": 0.013129770992366412,
  "byte_36": 0.0006106870229007634,
  "byte_10": 0.0030534351145038168,
  "byte_61": 0.042748091603053436,
  "byte_01": 0.046106870229007633,
  "byte_27": 0.000916030534351145,
  "byte_57": 0.02198473282442748,
  "byte_63": 0.008854961832061069,
  "byte_ff": 0.01099236641221374,
  "byte_7c": 0.0015267175572519084,
  "byte_00": 0.04305343511450382,
  "byte_35": 0.00916030534351145,
  "byte_16": 0.026259541984732824,
  "byte_05": 0.007633587786259542,
  "byte_fe": 0.0006106870229007634,
  "byte_fd": 0.013740458015267175,
  "byte_a7": 0.002137404580152672,
  "byte_81": 0.033282442748091605,
  "byte_14": 0.008854961832061069,
  "byte_2c": 0.0006106870229007634,
  "byte_80": 0.04305343511450382,
  "byte_06": 0.004580152671755725,
  "byte_de": 0.0003053435114503817,
  "byte_03": 0.02900763358778626,
  "byte_47": 0.0006106870229007634,
  "byte_09": 0.0033587786259541984,
  "byte_5e": 0.000916030534351145,
  "byte_b3": 0.0012213740458015267,
  "byte_d1": 0.0003053435114503817,
  "byte_18": 0.000916030534351145,
  "byte_0d": 0.0006106870229007634,
  "byte_dd": 0.00183206106870229,
  "byte_02": 0.025954198473282442,
  "byte_07": 0.0024427480916030535,
  "byte_23": 0.0012213740458015267,
  "byte_b8": 0.0003053435114503817,
  "byte_72": 0.0006106870229007634,
  "byte_31": 0.0012213740458015267,
  "byte_3c": 0.000916030534351145,
  "byte_e5": 0.0003053435114503817,
  "byte_67": 0.000916030534351145,
  "byte_54": 0.013435114503816794,
  "byte_42": 0.0003053435114503817,
  "byte_96": 0.000916030534351145,
  "byte_6c": 0.000916030534351145,
  "byte_68": 0.0015267175572519084,
  "byte_7d": 0.0003053435114503817,
  "byte_4b": 0.000916030534351145,
  "byte_75": 0.0003053435114503817,
  "byte_34": 0.00732824427480916,
  "byte_93": 0.0024427480916030535,
  "byte_70": 0.0006106870229007634,
  "byte_a0": 0.014351145038167938,
  "byte_82": 0.010381679389312977,
  "byte_a6": 0.0006106870229007634,
  "byte_79": 0.0006106870229007634,
  "byte_c6": 0.0006106870229007634,
  "byte_50": 0.02198473282442748,
  "byte_c5": 0.0006106870229007634,
  "byte_cc": 0.00183206106870229,
  "byte_90": 0.04580152671755725,
  "byte_e7": 0.000916030534351145,
  "byte_86": 0.0012213740458015267,
  "byte_20": 0.02564885496183206,
  "byte_41": 0.0006106870229007634,
  "byte_0b": 0.0030534351145038168,
  "byte_8d": 0.0012213740458015267,
  "byte_a5": 0.0015267175572519084,
  "byte_cb": 0.0003053435114503817,
  "byte_5b": 0.03236641221374046,
  "byte_1c": 0.0006106870229007634,
  "byte_95": 0.0024427480916030535,
  "byte_d8": 0.0006106870229007634,
  "byte_9b": 0.0015267175572519084,
  "byte_f2": 0.00183206106870229,
  "byte_ae": 0.0003053435114503817,
  "byte_3a": 0.0003053435114503817,
  "byte_a9": 0.0006106870229007634,
  "byte_9c": 0.000916030534351145,
  "byte_bb": 0.0003053435114503817,
  "byte_66": 0.000916030534351145,
  "byte_b4": 0.0012213740458015267,
  "byte_d4": 0.0006106870229007634,
  "byte_b6": 0.0003053435114503817,
  "byte_88": 0.0015267175572519084,
  "byte_ca": 0.0006106870229007634,
  "byte_e9": 0.0006106870229007634,
  "byte_51": 0.011908396946564885,
  "byte_62": 0.0006106870229007634,
  "byte_ed": 0.0003053435114503817,
  "byte_3e": 0.0003053435114503817,
  "byte_0c": 0.000916030534351145,
  "byte_e4": 0.000916030534351145,
  "byte_84": 0.005190839694656489,
  "byte_32": 0.000916030534351145,
  "byte_24": 0.0030534351145038168,
  "byte_e3": 0.0003053435114503817,
  "byte_8b": 0.0006106870229007634,
  "byte_6b": 0.0003053435114503817,
  "byte_15": 0.0183206106870229,
  "byte_37": 0.002137404580152672,
  "byte_45": 0.002137404580152672,
  "byte_8a": 0.0003053435114503817,
  "byte_56": 0.01618320610687023,
  "byte_5a": 0.00183206106870229,
  "byte_b0": 0.0012213740458015267,
  "byte_83": 0.015267175572519083,
  "byte_91": 0.013435114503816794,
  "byte_7e": 0.000916030534351145,
  "byte_1f": 0.0024427480916030535,
  "byte_c3": 0.000916030534351145,
  "byte_0a": 0.017099236641221375,
  "byte_19": 0.0012213740458015267,
  "byte_92": 0.00549618320610687,
  "byte_f3": 0.0033587786259541984,
  "byte_dc": 0.0006106870229007634,
  "byte_4e": 0.000916030534351145,
  "byte_12": 0.000916030534351145,
  "byte_1a": 0.0015267175572519084,
  "byte_44": 0.0012213740458015267,
  "byte_5f": 0.0006106870229007634,
  "byte_fb": 0.0003053435114503817,
  "byte_9e": 0.0003053435114503817,
  "byte_8f": 0.0006106870229007634,
  "byte_b1": 0.000916030534351145,
  "byte_d0": 0.0003053435114503817,
  "byte_6d": 0.0003053435114503817,
  "byte_08": 0.003969465648854962,
  "byte_49": 0.0003053435114503817,
  "byte_2f": 0.0003053435114503817,
  "byte_4f": 0.0006106870229007634,
  "byte_c9": 0.0003053435114503817,
  "byte_71": 0.00183206106870229,
  "byte_eb": 0.0003053435114503817,
  "byte_b2": 0.0003053435114503817,
  "byte_64": 0.0006106870229007634,
  "byte_94": 0.0012213740458015267,
  "byte_17": 0.000916030534351145,
  "byte_2e": 0.0003053435114503817,
  "byte_76": 0.0003053435114503817,
  "byte_3d": 0.0003053435114503817,
  "byte_33": 0.005190839694656489,
  "byte_55": 0.004580152671755725,
  "byte_46": 0.0012213740458015267,
  "byte_1b": 0.0015267175572519084,
  "byte_11": 0.0012213740458015267,
  "byte_29": 0.0006106870229007634,
  "byte_b9": 0.0006106870229007634,
  "byte_85": 0.004274809160305344,
  "byte_f1": 0.00183206106870229,
  "byte_87": 0.002748091603053435,
  "byte_2a": 0.0003053435114503817,
  "byte_7f": 0.00183206106870229,
  "byte_f5": 0.0024427480916030535,
  "byte_db": 0.0006106870229007634,
  "byte_5c": 0.0006106870229007634,
  "byte_1e": 0.000916030534351145,
  "byte_e0": 0.0006106870229007634,
  "byte_9d": 0.0006106870229007634,
  "byte_bd": 0.0006106870229007634,
  "byte_73": 0.000916030534351145,
  "byte_cf": 0.0006106870229007634,
  "byte_7a": 0.0012213740458015267,
  "byte_b7": 0.0006106870229007634,
  "byte_5d": 0.0006106870229007634,
  "byte_39": 0.0006106870229007634,
  "byte_a2": 0.0006106870229007634,
  "byte_c2": 0.0015267175572519084,
  "byte_30": 0.002137404580152672,
  "byte_ad": 0.0012213740458015267,
  "byte_e2": 0.000916030534351145,
  "byte_c8": 0.0012213740458015267,
  "byte_69": 0.000916030534351145,
  "byte_fc": 0.0015267175572519084,
  "byte_aa": 0.000916030534351145,
  "byte_2b": 0.000916030534351145,
  "byte_c4": 0.000916030534351145,
  "byte_a1": 0.0015267175572519084,
  "byte_28": 0.000916030534351145,
  "byte_4d": 0.000916030534351145,
  "byte_ef": 0.000916030534351145,
  "byte_a3": 0.000916030534351145,
  "byte_d9": 0.0006106870229007634,
  "byte_26": 0.0003053435114503817,
  "byte_ab": 0.0003053435114503817,
  "byte_f0": 0.0003053435114503817,
  "byte_3b": 0.0003053435114503817,
  "byte_48": 0.0003053435114503817,
  "byte_38": 0.0003053435114503817,
  "byte_0f": 0.0006106870229007634,
  "byte_8c": 0.0006106870229007634,
  "byte_6f": 0.0003053435114503817,
  "byte_6e": 0.0006106870229007634,
  "byte_ac": 0.0003053435114503817,
  "byte_6a": 0.0003053435114503817,
  "byte_4a": 0.0003053435114503817,
  "byte_58": 0.0006106870229007634,
  "byte_65": 0.0003053435114503817,
  "byte_fa": 0.0003053435114503817,
  "byte_bc": 0.0003053435114503817,
  "byte_d5": 0.0003053435114503817,
  "byte_25": 0.0006106870229007634,
  "byte_74": 0.0003053435114503817,
  "byte_f8": 0.0003053435114503817,
  "num_nodes": 4,
  "num_edges": 3,
  "avg_degree": 1.5,
  "density": 0.25,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 8,
  "event_nums": 4,
  "creation_block": 5467174,
  "creation_timestamp": 1524122670,
  "life_time": 13171.0,
  "duration_seconds": 196727.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 5,
  "num_buyers": 1,
  "num_sellers": 3,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 4.1e+16,
  "avg_value": 4555555555555556.0,
  "txn_per_block": 0.0006073489219556636,
  "avg_gas_limit": 434747.375,
  "std_gas_limit": 395246.2653087115,
  "avg_gas_used": 165558.25,
  "std_gas_used": 342324.767091044,
  "avg_gas_price": 5000000000.0,
  "std_gas_price": 6304760106.459246,
  "transfer_num": 1,
  "buy_num": 2,
  "setprices_num": 1,
  "minttoken_num": 1,
  "timeline_sequence": [
    [
      5467174,
      1524122670,
      19,
      76,
      0,
      1170477,
      2000000000,
      0,
      1,
      7254865,
      1070477,
      17653780
    ],
    [
      5467254,
      1524123795,
      2,
      30,
      10000000000000000,
      53971,
      20000000000,
      0,
      1,
      1029302,
      35981,
      17653700
    ],
    [
      5467418,
      1524126369,
      21,
      93,
      0,
      162373,
      2000000000,
      0,
      1,
      5418746,
      62373,
      17653536
    ],
    [
      5467427,
      1524126464,
      22,
      145,
      0,
      153272,
      2000000000,
      0,
      1,
      4757378,
      53272,
      17653527
    ],
    [
      5467433,
      1524126535,
      9,
      43,
      20000000000000000,
      400000,
      10000000000,
      1,
      0,
      1534316,
      21046,
      17653521
    ],
    [
      5467474,
      1524127050,
      24,
      76,
      0,
      137886,
      2000000000,
      0,
      1,
      7568785,
      37886,
      17653480
    ],
    [
      5480134,
      1524316662,
      10,
      28,
      1000000000000000,
      400000,
      1000000000,
      1,
      0,
      3198990,
      21046,
      17640820
    ],
    [
      5480345,
      1524319397,
      11,
      41,
      10000000000000000,
      1000000,
      1000000000,
      1,
      0,
      4240264,
      22385,
      17640609
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.16;\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }\n\ncontract TokenERC20 {\n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    // 18 decimals is the strongly suggested default, avoid changing it\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) public {\n        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount\n        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens\n        name = tokenName;                                   // Set the name for display purposes\n        symbol = tokenSymbol;                               // Set the symbol for display purposes\n    }\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to] + _value > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from] + balanceOf[_to];\n        // Subtract from the sender\n        balanceOf[_from] -= _value;\n        // Add the same to the recipient\n        balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowance\n        allowance[_from][msg.sender] -= _value;\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n    /**\n     * Destroy tokens\n     *\n     * Remove `_value` tokens from the system irreversibly\n     *\n     * @param _value the amount of money to burn\n     */\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    /**\n     * Destroy tokens from other account\n     *\n     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.\n     *\n     * @param _from the address of the sender\n     * @param _value the amount of money to burn\n     */\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= allowance[_from][msg.sender]);    // Check allowance\n        balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n}\n\n/******************************************/\n/*       ADVANCED TOKEN STARTS HERE       */\n/******************************************/\n\ncontract MyAdvancedToken is owned, TokenERC20 {\n\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function MyAdvancedToken(\n        uint256 initialSupply,\n        string tokenName,\n        string tokenSymbol\n    ) TokenERC20(initialSupply, tokenName, tokenSymbol) public {}\n\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require (balanceOf[_from] >= _value);               // Check if the sender has enough\n        require (balanceOf[_to] + _value >= balanceOf[_to]); // Check for overflows\n        require(!frozenAccount[_from]);                     // Check if sender is frozen\n        require(!frozenAccount[_to]);                       // Check if recipient is frozen\n        balanceOf[_from] -= _value;                         // Subtract from the sender\n        balanceOf[_to] += _value;                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n\n    /// @notice Create `mintedAmount` tokens and send it to `target`\n    /// @param target Address to receive the tokens\n    /// @param mintedAmount the amount of tokens it will receive\n    function mintToken(address target, uint256 mintedAmount) onlyOwner public {\n        balanceOf[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        emit Transfer(0, this, mintedAmount);\n        emit Transfer(this, target, mintedAmount);\n    }\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newSellPrice Price the users can sell to the contract\n    /// @param newBuyPrice Price users can buy from the contract\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    /// @notice Buy tokens from contract by sending ether\n    function buy() payable public {\n        uint amount = msg.value * buyPrice;               // calculates the amount\n        _transfer(this, msg.sender, amount);              // makes the transfers\n    }\n\n    /// @notice Sell `amount` tokens to contract\n    /// @param amount amount of tokens to be sold\n    function sell(uint256 amount) public {\n        require(address(this).balance >= amount * sellPrice);      // checks if the contract has enough ether to buy\n        _transfer(msg.sender, this, amount);              // makes the transfers\n        msg.sender.transfer(amount / sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks\n    }\n}"
}