{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST UNKNOWN_0xfe JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 DUP3 ISZERO PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 DUP3 ISZERO PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 CALLDATALOAD DUP2 DUP2 ADD CALLDATALOAD PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP6 ADD DUP5 ADD SWAP1 SWAP6 MSTORE DUP5 DUP5 MSTORE PUSH2 SWAP5 DUP3 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP5 PUSH1 DUP1 CALLDATALOAD SWAP6 PUSH1 SWAP5 SWAP3 SWAP4 SWAP2 SWAP1 SWAP3 ADD SWAP2 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 ADD SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE DUP1 DUP4 SHA3 DUP7 SWAP1 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP5 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP1 MLOAD PUSH1 PUSH1 PUSH1 DUP6 AND ISZERO PUSH2 MUL PUSH1 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 SHA3 SLOAD DUP1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP6 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP10 ADD SWAP1 SSTORE DUP10 DUP6 AND DUP1 DUP5 MSTORE DUP2 DUP5 SHA3 DUP1 SLOAD DUP11 SWAP1 SUB SWAP1 SSTORE PUSH1 DUP4 MSTORE DUP2 DUP5 SHA3 CALLER SWAP1 SWAP7 AND DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 SHA3 DUP1 SLOAD DUP9 SWAP1 SUB SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP2 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 PUSH1 SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP JUMPDEST POP PUSH1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 EXTCODESIZE DUP2 DUP2 GT ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP2 POP JUMPDEST JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST CALLER PUSH1 PUSH1 PUSH1 EXP SUB DUP2 DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP10 SWAP1 SUB SWAP1 SSTORE SWAP4 DUP9 AND DUP1 DUP4 MSTORE DUP5 DUP4 SHA3 DUP1 SLOAD DUP10 ADD SWAP1 SSTORE SWAP4 MLOAD PUSH32 DUP2 MSTORE PUSH1 DUP2 ADD SWAP4 DUP5 MSTORE PUSH1 DUP2 ADD DUP9 SWAP1 MSTORE PUSH1 PUSH1 DUP3 ADD SWAP1 DUP2 MSTORE DUP8 MLOAD PUSH1 DUP4 ADD MSTORE DUP8 MLOAD SWAP4 SWAP7 DUP11 SWAP7 SWAP6 PUSH4 SWAP6 SWAP2 SWAP5 DUP12 SWAP5 DUP12 SWAP5 SWAP3 SWAP4 PUSH1 SWAP1 SWAP2 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 DUP3 ISZERO PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP5 POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP POP POP DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP7 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP7 DUP7 PUSH1 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 DUP4 EQ PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP1 SLOAD DUP9 SWAP1 SUB SWAP1 SSTORE SWAP4 DUP8 AND DUP1 DUP4 MSTORE DUP5 DUP4 SHA3 DUP1 SLOAD DUP9 ADD SWAP1 SSTORE DUP5 MLOAD DUP8 DUP2 MSTORE SWAP5 MLOAD SWAP3 SWAP5 SWAP1 SWAP4 SWAP3 PUSH32 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 DUP4 PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH32 DUP6 DUP6 PUSH1 MLOAD DUP1 DUP4 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 DUP4 EQ PUSH2 JUMPI JUMPDEST DUP1 MLOAD DUP3 MSTORE PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 DUP1 MLOAD PUSH1 DUP2 ADD SWAP1 SWAP2 MSTORE PUSH1 DUP2 MSTORE SWAP1 JUMP STOP LOG1 PUSH6 SHA3 RETURNDATASIZE UNKNOWN_0x26 DUP6 UNKNOWN_0xde PUSH25 UNKNOWN_0xc0 UNOFFICIAL_PUSH STOP UNKNOWN_0x29",
  "opcode_entropy": 4.851819831570289,
  "opcode_count": 2283,
  "unique_opcodes": 67,
  "byte_entropy": 5.808681161560636,
  "byte_60": 0.10429638854296389,
  "byte_40": 0.012764632627646327,
  "byte_52": 0.030510585305105854,
  "byte_36": 0.00031133250311332503,
  "byte_15": 0.017123287671232876,
  "byte_61": 0.03891656288916563,
  "byte_00": 0.0361145703611457,
  "byte_cd": 0.0006226650062266501,
  "byte_57": 0.018991282689912826,
  "byte_63": 0.005915317559153176,
  "byte_ff": 0.0037359900373599006,
  "byte_7c": 0.0006226650062266501,
  "byte_01": 0.055417185554171855,
  "byte_35": 0.00560398505603985,
  "byte_04": 0.009962640099626401,
  "byte_16": 0.02303860523038605,
  "byte_06": 0.002801992528019925,
  "byte_fd": 0.00311332503113325,
  "byte_de": 0.0006226650062266501,
  "byte_03": 0.02708592777085928,
  "byte_81": 0.033935242839352425,
  "byte_14": 0.0062266500622665,
  "byte_cf": 0.0009339975093399751,
  "byte_80": 0.033623910336239106,
  "byte_09": 0.0021793275217932753,
  "byte_5e": 0.00031133250311332503,
  "byte_a7": 0.0012453300124533001,
  "byte_b3": 0.001556662515566625,
  "byte_5f": 0.0006226650062266501,
  "byte_18": 0.00031133250311332503,
  "byte_0d": 0.0006226650062266501,
  "byte_dd": 0.0021793275217932753,
  "byte_92": 0.014943960149439602,
  "byte_23": 0.001556662515566625,
  "byte_b8": 0.0012453300124533001,
  "byte_72": 0.0012453300124533001,
  "byte_b4": 0.0006226650062266501,
  "byte_31": 0.0012453300124533001,
  "byte_3c": 0.0018679950186799503,
  "byte_e5": 0.0012453300124533001,
  "byte_67": 0.0009339975093399751,
  "byte_ed": 0.0006226650062266501,
  "byte_4d": 0.0012453300124533001,
  "byte_78": 0.0012453300124533001,
  "byte_c6": 0.0012453300124533001,
  "byte_02": 0.017434620174346202,
  "byte_13": 0.0006226650062266501,
  "byte_70": 0.0009339975093399751,
  "byte_a0": 0.010273972602739725,
  "byte_82": 0.017123287671232876,
  "byte_0a": 0.013387297633872976,
  "byte_89": 0.001556662515566625,
  "byte_3d": 0.0006226650062266501,
  "byte_95": 0.00311332503113325,
  "byte_d8": 0.00031133250311332503,
  "byte_9b": 0.001556662515566625,
  "byte_41": 0.00031133250311332503,
  "byte_7d": 0.001556662515566625,
  "byte_a9": 0.00031133250311332503,
  "byte_05": 0.0043586550435865505,
  "byte_9c": 0.0009339975093399751,
  "byte_bb": 0.00031133250311332503,
  "byte_be": 0.0006226650062266501,
  "byte_45": 0.00031133250311332503,
  "byte_62": 0.0009339975093399751,
  "byte_c9": 0.00031133250311332503,
  "byte_07": 0.0049813200498132005,
  "byte_55": 0.003424657534246575,
  "byte_e2": 0.0012453300124533001,
  "byte_b7": 0.00031133250311332503,
  "byte_ca": 0.00031133250311332503,
  "byte_88": 0.0021793275217932753,
  "byte_bd": 0.0006226650062266501,
  "byte_5b": 0.04078455790784558,
  "byte_e3": 0.00031133250311332503,
  "byte_3e": 0.00031133250311332503,
  "byte_fe": 0.005292652552926526,
  "byte_34": 0.004669987546699875,
  "byte_d7": 0.0006226650062266501,
  "byte_df": 0.0009339975093399751,
  "byte_47": 0.00031133250311332503,
  "byte_56": 0.016500622665006227,
  "byte_51": 0.02054794520547945,
  "byte_20": 0.028019925280199254,
  "byte_83": 0.02054794520547945,
  "byte_91": 0.023972602739726026,
  "byte_90": 0.05074719800747198,
  "byte_85": 0.0043586550435865505,
  "byte_25": 0.001556662515566625,
  "byte_11": 0.00311332503113325,
  "byte_1f": 0.00560398505603985,
  "byte_19": 0.0043586550435865505,
  "byte_50": 0.03798256537982565,
  "byte_f3": 0.004047322540473225,
  "byte_7e": 0.001556662515566625,
  "byte_24": 0.0024906600249066002,
  "byte_e0": 0.0006226650062266501,
  "byte_9a": 0.00031133250311332503,
  "byte_a2": 0.001556662515566625,
  "byte_4b": 0.00031133250311332503,
  "byte_bc": 0.00031133250311332503,
  "byte_44": 0.0012453300124533001,
  "byte_f5": 0.0021793275217932753,
  "byte_8e": 0.00031133250311332503,
  "byte_1b": 0.0018679950186799503,
  "byte_2f": 0.0006226650062266501,
  "byte_98": 0.00031133250311332503,
  "byte_39": 0.0009339975093399751,
  "byte_d9": 0.00031133250311332503,
  "byte_f8": 0.00031133250311332503,
  "byte_d5": 0.001556662515566625,
  "byte_48": 0.00031133250311332503,
  "byte_84": 0.0136986301369863,
  "byte_94": 0.005292652552926526,
  "byte_64": 0.0006226650062266501,
  "byte_93": 0.007160647571606476,
  "byte_37": 0.0012453300124533001,
  "byte_96": 0.0012453300124533001,
  "byte_bf": 0.0009339975093399751,
  "byte_c7": 0.0006226650062266501,
  "byte_eb": 0.001556662515566625,
  "byte_66": 0.00031133250311332503,
  "byte_4f": 0.0006226650062266501,
  "byte_0c": 0.0018679950186799503,
  "byte_54": 0.008405977584059776,
  "byte_10": 0.0018679950186799503,
  "byte_aa": 0.001556662515566625,
  "byte_33": 0.004047322540473225,
  "byte_87": 0.0021793275217932753,
  "byte_86": 0.0018679950186799503,
  "byte_7f": 0.0021793275217932753,
  "byte_8c": 0.00031133250311332503,
  "byte_e1": 0.0009339975093399751,
  "byte_ec": 0.0006226650062266501,
  "byte_d1": 0.00031133250311332503,
  "byte_71": 0.00031133250311332503,
  "byte_42": 0.0006226650062266501,
  "byte_1e": 0.0006226650062266501,
  "byte_c0": 0.0012453300124533001,
  "byte_f7": 0.0012453300124533001,
  "byte_b2": 0.0009339975093399751,
  "byte_29": 0.0006226650062266501,
  "byte_c8": 0.001556662515566625,
  "byte_c3": 0.00031133250311332503,
  "byte_b9": 0.00031133250311332503,
  "byte_a3": 0.0018679950186799503,
  "byte_79": 0.00031133250311332503,
  "byte_b5": 0.00031133250311332503,
  "byte_08": 0.0043586550435865505,
  "byte_17": 0.00031133250311332503,
  "byte_7a": 0.0012453300124533001,
  "byte_8a": 0.0012453300124533001,
  "byte_f2": 0.001556662515566625,
  "byte_ad": 0.0009339975093399751,
  "byte_69": 0.0009339975093399751,
  "byte_c2": 0.0009339975093399751,
  "byte_b0": 0.0012453300124533001,
  "byte_68": 0.0009339975093399751,
  "byte_fc": 0.0009339975093399751,
  "byte_8d": 0.001556662515566625,
  "byte_2b": 0.001556662515566625,
  "byte_f1": 0.001556662515566625,
  "byte_c4": 0.0009339975093399751,
  "byte_a1": 0.0012453300124533001,
  "byte_28": 0.0009339975093399751,
  "byte_5a": 0.0012453300124533001,
  "byte_ef": 0.0009339975093399751,
  "byte_d4": 0.00031133250311332503,
  "byte_a8": 0.00031133250311332503,
  "byte_a6": 0.00031133250311332503,
  "byte_0b": 0.0018679950186799503,
  "byte_3b": 0.0006226650062266501,
  "byte_ee": 0.0006226650062266501,
  "byte_8b": 0.0006226650062266501,
  "byte_db": 0.00031133250311332503,
  "byte_e9": 0.00031133250311332503,
  "byte_af": 0.0006226650062266501,
  "byte_f9": 0.0006226650062266501,
  "byte_7b": 0.0006226650062266501,
  "byte_3a": 0.0006226650062266501,
  "byte_d3": 0.0006226650062266501,
  "byte_3f": 0.0012453300124533001,
  "byte_6e": 0.0006226650062266501,
  "byte_4c": 0.0006226650062266501,
  "byte_9f": 0.00031133250311332503,
  "byte_65": 0.00031133250311332503,
  "byte_30": 0.00031133250311332503,
  "byte_58": 0.00031133250311332503,
  "byte_26": 0.00031133250311332503,
  "byte_2a": 0.00031133250311332503,
  "byte_5c": 0.00031133250311332503,
  "byte_9e": 0.00031133250311332503,
  "num_nodes": 3,
  "num_edges": 2,
  "avg_degree": 1.3333333333333333,
  "density": 0.3333333333333333,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 2,
  "event_nums": 2,
  "creation_block": 3722473,
  "creation_timestamp": 1495037611,
  "life_time": 2394.0,
  "duration_seconds": 37848.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 4,
  "num_buyers": 1,
  "num_sellers": 2,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.0008350730688935282,
  "avg_gas_limit": 1456764.5,
  "std_gas_limit": 1301635.5,
  "avg_gas_used": 410106.0,
  "std_gas_used": 354978.0,
  "avg_gas_price": 10000000000.0,
  "std_gas_price": 10000000000.0,
  "transfer_num": 1,
  "timeline_sequence": [
    [
      3724867,
      1495075459,
      0,
      77,
      0,
      155129,
      20000000000,
      0,
      0,
      3361955,
      55128,
      19396605
    ],
    [
      3722473,
      1495037611,
      0,
      0,
      0,
      2758400,
      0,
      0,
      0,
      0,
      765084,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.11;\n\n /* Receiver must implement this function to receive tokens\n *  otherwise token transaction will fail\n */\n \n contract ContractReceiver {\n    function tokenFallback(address _from, uint256 _value, bytes _data){\n      _from = _from;\n      _value = _value;\n      _data = _data;\n      // Incoming transaction code here\n    }\n}\n \n /* New ERC23 contract interface */\n\ncontract ERC23 {\n  uint256 public totalSupply;\n  function balanceOf(address who) constant returns (uint256);\n  function allowance(address owner, address spender) constant returns (uint256);\n\n  function name() constant returns (string _name);\n  function symbol() constant returns (string _symbol);\n  function decimals() constant returns (uint8 _decimals);\n  function totalSupply() constant returns (uint256 _supply);\n\n  function transfer(address to, uint256 value) returns (bool ok);\n  function transfer(address to, uint256 value, bytes data) returns (bool ok);\n  function transferFrom(address from, address to, uint256 value) returns (bool ok);\n  function approve(address spender, uint256 value) returns (bool ok);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n  event Transfer(address indexed from, address indexed to, uint256 value, bytes data);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n /**\n * ERC23 token by Dexaran\n *\n * https://github.com/Dexaran/ERC23-tokens\n */\n \ncontract ERC23Token is ERC23 {\n\n  mapping(address => uint256) balances;\n  mapping (address => mapping (address => uint256)) allowed;\n\n  string public name;\n  string public symbol;\n  uint8 public decimals;\n  uint256 public totalSupply;\n\n  // Function to access name of token .\n  function name() constant returns (string _name) {\n      return name;\n  }\n  // Function to access symbol of token .\n  function symbol() constant returns (string _symbol) {\n      return symbol;\n  }\n  // Function to access decimals of token .\n  function decimals() constant returns (uint8 _decimals) {\n      return decimals;\n  }\n  // Function to access total supply of tokens .\n  function totalSupply() constant returns (uint256 _totalSupply) {\n      return totalSupply;\n  }\n\n  //function that is called when a user or another contract wants to transfer funds\n  function transfer(address _to, uint256 _value, bytes _data) returns (bool success) {\n  \n    //filtering if the target is a contract with bytecode inside it\n    if(isContract(_to)) {\n        transferToContract(_to, _value, _data);\n    }\n    else {\n        transferToAddress(_to, _value, _data);\n    }\n    return true;\n  }\n  \n  function transfer(address _to, uint256 _value) returns (bool success) {\n      \n    //standard function transfer similar to ERC20 transfer with no _data\n    //added due to backwards compatibility reasons\n    bytes memory empty;\n    if(isContract(_to)) {\n        transferToContract(_to, _value, empty);\n    }\n    else {\n        transferToAddress(_to, _value, empty);\n    }\n    return true;\n  }\n\n  //function that is called when transaction target is an address\n  function transferToAddress(address _to, uint256 _value, bytes _data) private returns (bool success) {\n    balances[msg.sender] -= _value;\n    balances[_to] += _value;\n    Transfer(msg.sender, _to, _value);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n  \n  //function that is called when transaction target is a contract\n  function transferToContract(address _to, uint256 _value, bytes _data) private returns (bool success) {\n    balances[msg.sender] -= _value;\n    balances[_to] += _value;\n    ContractReceiver reciever = ContractReceiver(_to);\n    reciever.tokenFallback(msg.sender, _value, _data);\n    Transfer(msg.sender, _to, _value);\n    Transfer(msg.sender, _to, _value, _data);\n    return true;\n  }\n  \n  //assemble the given address bytecode. If bytecode exists then the _addr is a contract.\n  function isContract(address _addr) private returns (bool is_contract) {\n      _addr = _addr;\n      uint256 length;\n      assembly {\n            //retrieve the size of the code on target address, this needs assembly\n            length := extcodesize(_addr)\n        }\n        if(length>0) {\n            return true;\n        }\n        else {\n            return false;\n        }\n    }\n\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n    var _allowance = allowed[_from][msg.sender];\n    \n    if(_value > _allowance) {\n        throw;\n    }\n\n    balances[_to] += _value;\n    balances[_from] -= _value;\n    allowed[_from][msg.sender] -= _value;\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n  function approve(address _spender, uint256 _value) returns (bool success) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\n\n// ERC223 token with the ability for the owner to block any account\ncontract DASToken is ERC23Token {\n    mapping (address => bool) blockedAccounts;\n    address public secretaryGeneral;\n\n\n    // Constructor\n    function DASToken(\n            string _name,\n            string _symbol,\n            uint8 _decimals,\n            uint256 _totalSupply,\n            address _initialTokensHolder) {\n        secretaryGeneral = msg.sender;\n        name = _name;\n        symbol = _symbol;\n        decimals = _decimals;\n        totalSupply = _totalSupply;\n        balances[_initialTokensHolder] = _totalSupply;\n    }\n\n\n    modifier onlySecretaryGeneral {\n        if (msg.sender != secretaryGeneral) throw;\n        _;\n    }\n\n\n    // block account\n    function blockAccount(address _account) onlySecretaryGeneral {\n        blockedAccounts[_account] = true;\n    }\n\n    // unblock account\n    function unblockAccount(address _account) onlySecretaryGeneral {\n        blockedAccounts[_account] = false;\n    }\n\n    // check is account blocked\n    function isAccountBlocked(address _account) returns (bool){\n        return blockedAccounts[_account];\n    }\n\n    // override transfer methods to throw on blocked accounts\n    function transfer(address _to, uint256 _value, bytes _data) returns (bool success) {\n        if (blockedAccounts[msg.sender]) {\n            throw;\n        }\n        return ERC23Token.transfer(_to, _value, _data);\n    }\n\n    function transfer(address _to, uint256 _value) returns (bool success) {\n        if (blockedAccounts[msg.sender]) {\n            throw;\n        }\n        bytes memory empty;\n        return ERC23Token.transfer(_to, _value, empty);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n        if (blockedAccounts[_from]) {\n            throw;\n        }\n        return ERC23Token.transferFrom(_from, _to, _value);\n    }\n}"
}