{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 CALLER DUP6 PUSH2 JUMP JUMPDEST EQ DUP1 PUSH2 JUMPI POP PUSH1 DUP3 EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH11 PUSH1 SLOAD PUSH2 JUMP JUMPDEST DUP3 GT ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH2 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH1 PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST ADDRESS PUSH20 AND DUP5 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 SWAP1 POP DUP1 PUSH20 AND PUSH4 DUP5 DUP5 PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP POP PUSH32 DUP5 DUP5 DUP5 PUSH1 MLOAD DUP1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 DUP3 DUP3 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST DUP2 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 DUP3 GT DUP1 ISZERO PUSH2 JUMPI POP DUP3 PUSH20 AND DUP5 PUSH20 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMPDEST DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 DUP3 GT DUP1 ISZERO PUSH2 JUMPI POP DUP3 PUSH20 AND CALLER PUSH20 AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMPDEST DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0x2f ISZERO UNKNOWN_0x4b AND REVERT UNKNOWN_0xe5 PUSH1 UNKNOWN_0xce PUSH16 DUP15 UNKNOWN_0xc7 UNKNOWN_0x29 MSIZE CREATE GASLIMIT STOP UNKNOWN_0x29",
  "opcode_entropy": 4.746905114119298,
  "opcode_count": 2609,
  "unique_opcodes": 68,
  "byte_entropy": 4.521520377242789,
  "byte_60": 0.057488653555219364,
  "byte_80": 0.030425281559926038,
  "byte_40": 0.007564296520423601,
  "byte_52": 0.015632879475542108,
  "byte_04": 0.006555723651033787,
  "byte_36": 0.0021852412170112624,
  "byte_10": 0.0018490502605479913,
  "byte_61": 0.025214321734745335,
  "byte_00": 0.04320053790553034,
  "byte_db": 0.00033619095646327115,
  "byte_57": 0.011262397041519583,
  "byte_35": 0.0033619095646327114,
  "byte_7c": 0.0005042864346949068,
  "byte_01": 0.027567658429988234,
  "byte_90": 0.03328290468986384,
  "byte_63": 0.0036981005210959825,
  "byte_ff": 0.376365775760632,
  "byte_16": 0.02302908051773407,
  "byte_50": 0.030257186081694403,
  "byte_24": 0.00033619095646327115,
  "byte_14": 0.0077323919986552365,
  "byte_e0": 0.0006723819129265423,
  "byte_06": 0.0013447638258530846,
  "byte_fd": 0.005715246259875609,
  "byte_de": 0.0008404773911581779,
  "byte_03": 0.009413346780971592,
  "byte_f7": 0.0005042864346949068,
  "byte_09": 0.001176668347621449,
  "byte_5e": 0.00033619095646327115,
  "byte_a7": 0.0008404773911581779,
  "byte_b3": 0.0006723819129265423,
  "byte_87": 0.0005042864346949068,
  "byte_13": 0.0005042864346949068,
  "byte_af": 0.00033619095646327115,
  "byte_ec": 0.0005042864346949068,
  "byte_18": 0.00016809547823163558,
  "byte_0d": 0.0018490502605479913,
  "byte_dd": 0.001176668347621449,
  "byte_02": 0.004874768868717431,
  "byte_2f": 0.0005042864346949068,
  "byte_23": 0.0006723819129265423,
  "byte_b8": 0.0008404773911581779,
  "byte_72": 0.0006723819129265423,
  "byte_5a": 0.0010085728693898135,
  "byte_31": 0.0008404773911581779,
  "byte_3c": 0.0006723819129265423,
  "byte_e5": 0.0005042864346949068,
  "byte_67": 0.00033619095646327115,
  "byte_df": 0.0005042864346949068,
  "byte_c4": 0.0008404773911581779,
  "byte_20": 0.02302908051773407,
  "byte_d4": 0.0008404773911581779,
  "byte_70": 0.00033619095646327115,
  "byte_a0": 0.00016809547823163558,
  "byte_82": 0.006723819129265423,
  "byte_27": 0.00016809547823163558,
  "byte_7e": 0.0006723819129265423,
  "byte_1f": 0.0005042864346949068,
  "byte_2b": 0.0006723819129265423,
  "byte_89": 0.00016809547823163558,
  "byte_51": 0.008909060346276684,
  "byte_9c": 0.0008404773911581779,
  "byte_c3": 0.0005042864346949068,
  "byte_95": 0.0006723819129265423,
  "byte_d8": 0.0006723819129265423,
  "byte_9b": 0.0006723819129265423,
  "byte_41": 0.00033619095646327115,
  "byte_30": 0.0005042864346949068,
  "byte_a9": 0.0006723819129265423,
  "byte_05": 0.0028576231299378045,
  "byte_bb": 0.0005042864346949068,
  "byte_c0": 0.0005042864346949068,
  "byte_62": 0.0005042864346949068,
  "byte_ed": 0.0005042864346949068,
  "byte_3e": 0.00033619095646327115,
  "byte_25": 0.0006723819129265423,
  "byte_e7": 0.00033619095646327115,
  "byte_5b": 0.02084383930072281,
  "byte_34": 0.002689527651706169,
  "byte_15": 0.01899478904017482,
  "byte_f5": 0.0013447638258530846,
  "byte_eb": 0.0005042864346949068,
  "byte_56": 0.009917633215666499,
  "byte_0c": 0.0008404773911581779,
  "byte_81": 0.02302908051773407,
  "byte_83": 0.006219532694570516,
  "byte_91": 0.01059001512859304,
  "byte_4c": 0.00033619095646327115,
  "byte_84": 0.0038661959993276183,
  "byte_79": 0.00016809547823163558,
  "byte_0a": 0.004202386955790889,
  "byte_19": 0.0010085728693898135,
  "byte_92": 0.005210959825180703,
  "byte_f3": 0.002017145738779627,
  "byte_93": 0.0006723819129265423,
  "byte_d2": 0.00016809547823163558,
  "byte_73": 0.01899478904017482,
  "byte_f8": 0.00033619095646327115,
  "byte_2d": 0.00033619095646327115,
  "byte_07": 0.0015128593040847202,
  "byte_3b": 0.00033619095646327115,
  "byte_44": 0.00033619095646327115,
  "byte_b6": 0.00016809547823163558,
  "byte_66": 0.00033619095646327115,
  "byte_c5": 0.00016809547823163558,
  "byte_f4": 0.00016809547823163558,
  "byte_08": 0.001176668347621449,
  "byte_4e": 0.00033619095646327115,
  "byte_1c": 0.00033619095646327115,
  "byte_53": 0.00016809547823163558,
  "byte_33": 0.004202386955790889,
  "byte_68": 0.0008404773911581779,
  "byte_0e": 0.0008404773911581779,
  "byte_8a": 0.00016809547823163558,
  "byte_cf": 0.00016809547823163558,
  "byte_2e": 0.00016809547823163558,
  "byte_e3": 0.00016809547823163558,
  "byte_45": 0.00033619095646327115,
  "byte_85": 0.0015128593040847202,
  "byte_6a": 0.0008404773911581779,
  "byte_b2": 0.00033619095646327115,
  "byte_cc": 0.00016809547823163558,
  "byte_0b": 0.0008404773911581779,
  "byte_86": 0.0013447638258530846,
  "byte_c8": 0.0010085728693898135,
  "byte_a8": 0.0006723819129265423,
  "byte_e9": 0.00016809547823163558,
  "byte_4f": 0.00033619095646327115,
  "byte_54": 0.005715246259875609,
  "byte_47": 0.00033619095646327115,
  "byte_a5": 0.0005042864346949068,
  "byte_17": 0.0010085728693898135,
  "byte_55": 0.002017145738779627,
  "byte_7f": 0.0016809547823163557,
  "byte_cb": 0.00033619095646327115,
  "byte_ae": 0.00033619095646327115,
  "byte_6d": 0.00016809547823163558,
  "byte_76": 0.00033619095646327115,
  "byte_2a": 0.00016809547823163558,
  "byte_9a": 0.00016809547823163558,
  "byte_da": 0.00033619095646327115,
  "byte_71": 0.0006723819129265423,
  "byte_49": 0.0006723819129265423,
  "byte_5f": 0.0005042864346949068,
  "byte_3d": 0.0010085728693898135,
  "byte_aa": 0.0008404773911581779,
  "byte_97": 0.00033619095646327115,
  "byte_f0": 0.00033619095646327115,
  "byte_78": 0.00016809547823163558,
  "byte_a1": 0.002353336695242898,
  "byte_1a": 0.00016809547823163558,
  "byte_6e": 0.0008404773911581779,
  "byte_74": 0.00033619095646327115,
  "byte_65": 0.0006723819129265423,
  "byte_6f": 0.0006723819129265423,
  "byte_4d": 0.0008404773911581779,
  "byte_64": 0.00033619095646327115,
  "byte_69": 0.0008404773911581779,
  "byte_6c": 0.0005042864346949068,
  "byte_f9": 0.00016809547823163558,
  "byte_0f": 0.00033619095646327115,
  "byte_b0": 0.0006723819129265423,
  "byte_1b": 0.0006723819129265423,
  "byte_39": 0.00016809547823163558,
  "byte_a2": 0.0005042864346949068,
  "byte_12": 0.00033619095646327115,
  "byte_ba": 0.00033619095646327115,
  "byte_d0": 0.00016809547823163558,
  "byte_11": 0.0015128593040847202,
  "byte_bf": 0.0005042864346949068,
  "byte_a6": 0.00016809547823163558,
  "byte_9d": 0.00016809547823163558,
  "byte_42": 0.00033619095646327115,
  "byte_ce": 0.00033619095646327115,
  "byte_b4": 0.0005042864346949068,
  "byte_d9": 0.00016809547823163558,
  "byte_bc": 0.00033619095646327115,
  "byte_8c": 0.0005042864346949068,
  "byte_fe": 0.0005042864346949068,
  "byte_88": 0.0006723819129265423,
  "byte_e4": 0.00016809547823163558,
  "byte_2c": 0.00016809547823163558,
  "byte_7a": 0.0006723819129265423,
  "byte_f2": 0.0006723819129265423,
  "byte_ad": 0.0005042864346949068,
  "byte_e2": 0.0005042864346949068,
  "byte_c2": 0.0006723819129265423,
  "byte_fc": 0.0006723819129265423,
  "byte_37": 0.0006723819129265423,
  "byte_8d": 0.0005042864346949068,
  "byte_f1": 0.0006723819129265423,
  "byte_28": 0.0005042864346949068,
  "byte_ef": 0.0006723819129265423,
  "byte_a3": 0.0006723819129265423,
  "byte_22": 0.00016809547823163558,
  "byte_fa": 0.00016809547823163558,
  "byte_b5": 0.0005042864346949068,
  "byte_f6": 0.00016809547823163558,
  "byte_d3": 0.00016809547823163558,
  "byte_21": 0.00016809547823163558,
  "byte_4a": 0.0005042864346949068,
  "byte_cd": 0.00016809547823163558,
  "byte_c1": 0.00016809547823163558,
  "byte_ab": 0.00016809547823163558,
  "byte_e6": 0.00016809547823163558,
  "byte_48": 0.00016809547823163558,
  "byte_38": 0.00016809547823163558,
  "byte_ac": 0.00016809547823163558,
  "byte_b9": 0.00033619095646327115,
  "byte_e1": 0.00016809547823163558,
  "byte_7d": 0.00033619095646327115,
  "byte_d1": 0.00016809547823163558,
  "byte_1e": 0.00033619095646327115,
  "byte_29": 0.0005042864346949068,
  "byte_c7": 0.00033619095646327115,
  "byte_96": 0.00016809547823163558,
  "byte_4b": 0.00033619095646327115,
  "byte_58": 0.00016809547823163558,
  "byte_94": 0.00016809547823163558,
  "byte_5d": 0.00016809547823163558,
  "byte_8e": 0.00016809547823163558,
  "byte_59": 0.00016809547823163558,
  "num_nodes": 5,
  "num_edges": 4,
  "avg_degree": 1.6,
  "density": 0.2,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 87,
  "event_nums": 54,
  "creation_block": 5927623,
  "creation_timestamp": 1531057723,
  "life_time": 1030481.0,
  "duration_seconds": 14797289.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 6,
  "num_buyers": 1,
  "num_sellers": 4,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 8.442651108898554e-05,
  "avg_gas_limit": 90646.10344827586,
  "std_gas_limit": 176964.14583920242,
  "avg_gas_used": 65236.44827586207,
  "std_gas_used": 173261.08190964346,
  "avg_gas_price": 2960919540.229885,
  "std_gas_price": 3696514553.4815545,
  "transfer_num": 81,
  "atinversebrah_num": 1,
  "createtokens_num": 1,
  "setowner_num": 1,
  "approve_num": 3,
  "timeline_sequence": [
    [
      5927623,
      1531057723,
      204,
      85,
      0,
      1670661,
      10000000000,
      0,
      1,
      7458271,
      1670661,
      17193334
    ],
    [
      5933061,
      1531138488,
      205,
      19,
      0,
      65636,
      25000000000,
      0,
      1,
      849211,
      65636,
      17187896
    ],
    [
      5933083,
      1531138797,
      206,
      78,
      0,
      52780,
      20000000000,
      0,
      1,
      5855450,
      37780,
      17187874
    ],
    [
      5933096,
      1531138937,
      207,
      92,
      0,
      28486,
      20000000000,
      0,
      1,
      7338217,
      28486,
      17187861
    ],
    [
      6507580,
      1539437055,
      83,
      50,
      0,
      250000,
      4000000000,
      0,
      1,
      3505274,
      37780,
      16613377
    ],
    [
      6513169,
      1539515555,
      0,
      112,
      0,
      79074,
      1000000000,
      0,
      1,
      7540696,
      52716,
      16607788
    ],
    [
      6520719,
      1539621756,
      1,
      37,
      0,
      79074,
      2000000000,
      0,
      1,
      7158221,
      52716,
      16600238
    ],
    [
      6520751,
      1539622175,
      2,
      79,
      0,
      79074,
      2000000000,
      0,
      1,
      6976573,
      52716,
      16600206
    ],
    [
      6520792,
      1539622731,
      3,
      57,
      0,
      79074,
      2000000000,
      0,
      1,
      7921374,
      52716,
      16600165
    ],
    [
      6520807,
      1539622866,
      4,
      128,
      0,
      79074,
      2000000000,
      0,
      1,
      7307249,
      52716,
      16600150
    ],
    [
      6520813,
      1539622957,
      5,
      74,
      0,
      39408,
      2000000000,
      1,
      0,
      6170807,
      39408,
      16600144
    ],
    [
      6520836,
      1539623284,
      6,
      122,
      0,
      39312,
      2000000000,
      1,
      0,
      7990512,
      39312,
      16600121
    ],
    [
      6520865,
      1539623647,
      7,
      74,
      0,
      39408,
      2000000000,
      1,
      0,
      6093868,
      39408,
      16600092
    ],
    [
      6520961,
      1539625142,
      8,
      237,
      0,
      79074,
      2000000000,
      0,
      1,
      7612651,
      52716,
      16599996
    ],
    [
      6520993,
      1539625678,
      9,
      98,
      0,
      39408,
      2000000000,
      1,
      0,
      7983587,
      39408,
      16599964
    ],
    [
      6521003,
      1539625770,
      10,
      105,
      0,
      39408,
      2000000000,
      1,
      0,
      7948769,
      39408,
      16599954
    ],
    [
      6521003,
      1539625770,
      11,
      106,
      0,
      39408,
      2000000000,
      1,
      0,
      7988177,
      39408,
      16599954
    ],
    [
      6521006,
      1539625802,
      12,
      123,
      0,
      39408,
      3000000000,
      1,
      0,
      7125482,
      39408,
      16599951
    ],
    [
      6521006,
      1539625802,
      13,
      124,
      0,
      39408,
      3000000000,
      1,
      0,
      7164890,
      39408,
      16599951
    ],
    [
      6521006,
      1539625802,
      14,
      133,
      0,
      79074,
      2000000000,
      0,
      1,
      7571912,
      52716,
      16599951
    ],
    [
      6521037,
      1539626324,
      15,
      49,
      0,
      39312,
      2200000000,
      1,
      0,
      6979778,
      39312,
      16599920
    ],
    [
      6521048,
      1539626400,
      16,
      69,
      0,
      79074,
      2200000000,
      0,
      1,
      6202983,
      52716,
      16599909
    ],
    [
      6521048,
      1539626400,
      17,
      102,
      0,
      39408,
      2000000000,
      1,
      0,
      7693251,
      39408,
      16599909
    ],
    [
      6521048,
      1539626400,
      18,
      103,
      0,
      39408,
      2000000000,
      1,
      0,
      7732659,
      39408,
      16599909
    ],
    [
      6521048,
      1539626400,
      19,
      104,
      0,
      39408,
      2000000000,
      1,
      0,
      7772067,
      39408,
      16599909
    ],
    [
      6521051,
      1539626412,
      20,
      64,
      0,
      39408,
      2000000000,
      1,
      0,
      5980501,
      39408,
      16599906
    ],
    [
      6521051,
      1539626412,
      21,
      65,
      0,
      39408,
      3000000000,
      1,
      0,
      6019909,
      39408,
      16599906
    ],
    [
      6521051,
      1539626412,
      22,
      66,
      0,
      39408,
      3000000000,
      1,
      0,
      6059317,
      39408,
      16599906
    ],
    [
      6521053,
      1539626470,
      23,
      170,
      0,
      39408,
      3000000000,
      1,
      0,
      7768516,
      39408,
      16599904
    ],
    [
      6521053,
      1539626470,
      24,
      171,
      0,
      39408,
      3000000000,
      1,
      0,
      7807924,
      39408,
      16599904
    ],
    [
      6521053,
      1539626470,
      25,
      172,
      0,
      39408,
      3000000000,
      1,
      0,
      7847332,
      39408,
      16599904
    ],
    [
      6521056,
      1539626526,
      26,
      90,
      0,
      39408,
      2000000000,
      1,
      0,
      5282309,
      39408,
      16599901
    ],
    [
      6521056,
      1539626526,
      27,
      91,
      0,
      39408,
      2000000000,
      1,
      0,
      5321717,
      39408,
      16599901
    ],
    [
      6521056,
      1539626526,
      28,
      92,
      0,
      79074,
      2000000000,
      0,
      1,
      5374433,
      52716,
      16599901
    ],
    [
      6521056,
      1539626526,
      29,
      93,
      0,
      39408,
      2000000000,
      1,
      0,
      5413841,
      39408,
      16599901
    ],
    [
      6521056,
      1539626526,
      30,
      94,
      0,
      39408,
      2000000000,
      1,
      0,
      5453249,
      39408,
      16599901
    ],
    [
      6521056,
      1539626526,
      31,
      95,
      0,
      39408,
      2000000000,
      1,
      0,
      5492657,
      39408,
      16599901
    ],
    [
      6521061,
      1539626610,
      32,
      109,
      0,
      39408,
      2000000000,
      1,
      0,
      6643957,
      39408,
      16599896
    ],
    [
      6521061,
      1539626610,
      33,
      110,
      0,
      39408,
      2000000000,
      1,
      0,
      6683365,
      39408,
      16599896
    ],
    [
      6521061,
      1539626610,
      34,
      111,
      0,
      39408,
      3000000000,
      1,
      0,
      6722773,
      39408,
      16599896
    ],
    [
      6521061,
      1539626610,
      35,
      112,
      0,
      39408,
      2000000000,
      1,
      0,
      6762181,
      39408,
      16599896
    ],
    [
      6521063,
      1539626637,
      36,
      91,
      0,
      39408,
      2000000000,
      1,
      0,
      6495077,
      39408,
      16599894
    ],
    [
      6521064,
      1539626674,
      37,
      150,
      0,
      39408,
      2000000000,
      1,
      0,
      7617431,
      39408,
      16599893
    ],
    [
      6521064,
      1539626674,
      38,
      151,
      0,
      39408,
      2000000000,
      1,
      0,
      7656839,
      39408,
      16599893
    ],
    [
      6521069,
      1539626770,
      39,
      92,
      0,
      39408,
      2000000000,
      1,
      0,
      7948601,
      39408,
      16599888
    ],
    [
      6521072,
      1539626820,
      40,
      133,
      0,
      39408,
      2000000000,
      1,
      0,
      7957569,
      39408,
      16599885
    ],
    [
      6521072,
      1539626820,
      41,
      134,
      0,
      39408,
      2000000000,
      1,
      0,
      7996977,
      39408,
      16599885
    ],
    [
      6521083,
      1539626959,
      42,
      50,
      0,
      39408,
      2000000000,
      1,
      0,
      7987246,
      39408,
      16599874
    ],
    [
      6521092,
      1539627065,
      43,
      83,
      0,
      78978,
      2000000000,
      0,
      1,
      7671985,
      52652,
      16599865
    ],
    [
      6521109,
      1539627225,
      44,
      70,
      0,
      79074,
      2200000000,
      0,
      1,
      7965833,
      52716,
      16599848
    ],
    [
      6521133,
      1539627456,
      45,
      65,
      0,
      79074,
      2000000000,
      0,
      1,
      6079302,
      52716,
      16599824
    ],
    [
      6521171,
      1539628018,
      46,
      103,
      0,
      79074,
      2000000000,
      0,
      1,
      6510098,
      52716,
      16599786
    ],
    [
      6521204,
      1539628405,
      47,
      106,
      0,
      78978,
      2000000000,
      0,
      1,
      6932867,
      52652,
      16599753
    ],
    [
      6521230,
      1539628803,
      48,
      100,
      0,
      79074,
      2000000000,
      0,
      1,
      7904540,
      52716,
      16599727
    ],
    [
      6521245,
      1539629050,
      49,
      45,
      0,
      79074,
      2000000000,
      0,
      1,
      7662794,
      52716,
      16599712
    ],
    [
      6521249,
      1539629115,
      50,
      42,
      0,
      79074,
      2000000000,
      0,
      1,
      6841438,
      52716,
      16599708
    ],
    [
      6521264,
      1539629326,
      51,
      57,
      0,
      79074,
      2000000000,
      0,
      1,
      5474681,
      52716,
      16599693
    ],
    [
      6521270,
      1539629395,
      52,
      88,
      0,
      79074,
      2000000000,
      0,
      1,
      5626851,
      52716,
      16599687
    ],
    [
      6521287,
      1539629583,
      53,
      76,
      0,
      78978,
      2000000000,
      0,
      1,
      7853064,
      52652,
      16599670
    ],
    [
      6521292,
      1539629669,
      54,
      39,
      0,
      79074,
      2000000000,
      0,
      1,
      6586245,
      52716,
      16599665
    ],
    [
      6521297,
      1539629739,
      55,
      46,
      0,
      79074,
      2000000000,
      0,
      1,
      2555605,
      52716,
      16599660
    ],
    [
      6521303,
      1539629835,
      56,
      64,
      0,
      79074,
      2000000000,
      0,
      1,
      5307139,
      52716,
      16599654
    ],
    [
      6521307,
      1539629867,
      57,
      102,
      0,
      79074,
      2000000000,
      0,
      1,
      7896602,
      52716,
      16599650
    ],
    [
      6521310,
      1539629908,
      58,
      51,
      0,
      79074,
      2000000000,
      0,
      1,
      6113625,
      52716,
      16599647
    ],
    [
      6521313,
      1539629958,
      59,
      247,
      0,
      79074,
      2000000000,
      0,
      1,
      7922311,
      52716,
      16599644
    ],
    [
      6521337,
      1539630335,
      60,
      47,
      0,
      79074,
      2000000000,
      0,
      1,
      5922072,
      52716,
      16599620
    ],
    [
      6521341,
      1539630363,
      61,
      79,
      0,
      79074,
      2000000000,
      0,
      1,
      6340966,
      52716,
      16599616
    ],
    [
      6521341,
      1539630363,
      62,
      80,
      0,
      79074,
      2000000000,
      0,
      1,
      6393682,
      52716,
      16599616
    ],
    [
      6521343,
      1539630388,
      63,
      96,
      0,
      79074,
      2000000000,
      0,
      1,
      6537264,
      52716,
      16599614
    ],
    [
      6521349,
      1539630473,
      64,
      68,
      0,
      79074,
      2000000000,
      0,
      1,
      7863949,
      52716,
      16599608
    ],
    [
      6521363,
      1539630651,
      65,
      30,
      0,
      79074,
      2000000000,
      0,
      1,
      7828034,
      52716,
      16599594
    ],
    [
      6521368,
      1539630706,
      66,
      97,
      0,
      79074,
      2000000000,
      0,
      1,
      7286568,
      52716,
      16599589
    ],
    [
      6521379,
      1539630834,
      67,
      37,
      0,
      79074,
      2000000000,
      0,
      1,
      7775319,
      52716,
      16599578
    ],
    [
      6521382,
      1539630868,
      68,
      138,
      0,
      79074,
      2000000000,
      0,
      1,
      7727759,
      52716,
      16599575
    ],
    [
      6521382,
      1539630868,
      69,
      139,
      0,
      79074,
      2000000000,
      0,
      1,
      7780475,
      52716,
      16599575
    ],
    [
      6521415,
      1539631407,
      70,
      79,
      0,
      79074,
      2000000000,
      0,
      1,
      6697872,
      52716,
      16599542
    ],
    [
      6521439,
      1539631734,
      71,
      99,
      0,
      79074,
      2000000000,
      0,
      1,
      7932447,
      52716,
      16599518
    ],
    [
      6521445,
      1539631819,
      72,
      100,
      0,
      79074,
      2000000000,
      0,
      1,
      7889591,
      52716,
      16599512
    ],
    [
      6521447,
      1539631853,
      73,
      75,
      0,
      79074,
      2000000000,
      0,
      1,
      6628670,
      52716,
      16599510
    ],
    [
      6521449,
      1539631879,
      74,
      178,
      0,
      79074,
      2000000000,
      0,
      1,
      6825442,
      52716,
      16599508
    ],
    [
      6521452,
      1539631917,
      75,
      113,
      0,
      79074,
      2000000000,
      0,
      1,
      7583672,
      52716,
      16599505
    ],
    [
      6521466,
      1539632130,
      76,
      140,
      0,
      79074,
      2000000000,
      0,
      1,
      7930168,
      52716,
      16599491
    ],
    [
      6538992,
      1539879144,
      77,
      61,
      0,
      79074,
      2000000000,
      0,
      1,
      4668779,
      52716,
      16581965
    ],
    [
      6623127,
      1541068265,
      78,
      111,
      0,
      250000,
      3000000000,
      0,
      1,
      7131657,
      46216,
      16497830
    ],
    [
      6623137,
      1541068420,
      80,
      140,
      0,
      250000,
      5000000000,
      0,
      1,
      7423898,
      46216,
      16497820
    ],
    [
      6845219,
      1544223482,
      85,
      52,
      0,
      250000,
      4000000000,
      0,
      1,
      5496040,
      46088,
      16275738
    ],
    [
      6958104,
      1545855012,
      378,
      77,
      0,
      250000,
      3000000000,
      0,
      1,
      6892369,
      37716,
      16162853
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.24;\n\n/*\n * Creator: IoMT (Internet of Medical Things) \n */\n\n/*\n * Abstract Token Smart Contract\n *\n */\n\n \n /*\n * Safe Math Smart Contract. \n * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol\n */\n\ncontract SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\n\n\n/**\n * ERC-20 standard token interface, as defined\n * <a href=\"http://github.com/ethereum/EIPs/issues/20\">here</a>.\n */\ncontract Token {\n  \n  function totalSupply() constant returns (uint256 supply);\n  function balanceOf(address _owner) constant returns (uint256 balance);\n  function transfer(address _to, uint256 _value) returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n  function approve(address _spender, uint256 _value) returns (bool success);\n  function allowance(address _owner, address _spender) constant returns (uint256 remaining);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n}\n\n\n\n/**\n * Abstract Token Smart Contract that could be used as a base contract for\n * ERC-20 token contracts.\n */\ncontract AbstractToken is Token, SafeMath {\n  /**\n   * Create new Abstract Token contract.\n   */\n  function AbstractToken () {\n    // Do nothing\n  }\n  \n  /**\n   * Get number of tokens currently belonging to given owner.\n   *\n   * @param _owner address to get number of tokens currently belonging to the\n   *        owner of\n   * @return number of tokens currently belonging to the owner of given address\n   */\n  function balanceOf(address _owner) constant returns (uint256 balance) {\n    return accounts [_owner];\n  }\n\n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   *\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   * accounts [_to] + _value > accounts [_to] for overflow check\n   * which is already in safeMath\n   */\n  function transfer(address _to, uint256 _value) returns (bool success) {\n    require(_to != address(0));\n    if (accounts [msg.sender] < _value) return false;\n    if (_value > 0 && msg.sender != _to) {\n      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    emit Transfer (msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   * accounts [_to] + _value > accounts [_to] for overflow check\n   * which is already in safeMath\n   */\n  function transferFrom(address _from, address _to, uint256 _value)\n  returns (bool success) {\n    require(_to != address(0));\n    if (allowances [_from][msg.sender] < _value) return false;\n    if (accounts [_from] < _value) return false; \n\n    if (_value > 0 && _from != _to) {\n\t  allowances [_from][msg.sender] = safeSub (allowances [_from][msg.sender], _value);\n      accounts [_from] = safeSub (accounts [_from], _value);\n      accounts [_to] = safeAdd (accounts [_to], _value);\n    }\n    emit Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * Allow given spender to transfer given number of tokens from message sender.\n   * @param _spender address to allow the owner of to transfer tokens from message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n   function approve (address _spender, uint256 _value) returns (bool success) {\n    allowances [msg.sender][_spender] = _value;\n    emit Approval (msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * Tell how many tokens given spender is currently allowed to transfer from\n   * given owner.\n   *\n   * @param _owner address to get number of tokens allowed to be transferred\n   *        from the owner of\n   * @param _spender address to get number of tokens allowed to be transferred\n   *        by the owner of\n   * @return number of tokens given spender is currently allowed to transfer\n   *         from given owner\n   */\n  function allowance(address _owner, address _spender) constant\n  returns (uint256 remaining) {\n    return allowances [_owner][_spender];\n  }\n\n  /**\n   * Mapping from addresses of token holders to the numbers of tokens belonging\n   * to these token holders.\n   */\n  mapping (address => uint256) accounts;\n\n  /**\n   * Mapping from addresses of token holders to the mapping of addresses of\n   * spenders to the allowances set by these token holders to these spenders.\n   */\n  mapping (address => mapping (address => uint256)) private allowances;\n  \n}\n\n\n/**\n * IoMT token token smart contract.\n */\ncontract IoMTToken is AbstractToken {\n  /**\n   * Maximum allowed number of tokens in circulation.\n   * tokenSupply = tokensIActuallyWant * (10 ^ decimals)\n   */\n   \n   \n  uint256 constant MAX_TOKEN_COUNT = 62000000 * (10**18);\n   \n  /**\n   * Address of the owner of this smart contract.\n   */\n  address private owner;\n  \n  /**\n   * Frozen account list holder\n   */\n  mapping (address => bool) private frozenAccount;\n\n  /**\n   * Current number of tokens in circulation.\n   */\n  uint256 tokenCount = 0;\n  \n \n  /**\n   * True if tokens transfers are currently frozen, false otherwise.\n   */\n  bool frozen = false;\n  \n \n  /**\n   * Create new token smart contract and make msg.sender the\n   * owner of this smart contract.\n   */\n  function IoMTToken () {\n    owner = msg.sender;\n  }\n\n  /**\n   * Get total number of tokens in circulation.\n   *\n   * @return total number of tokens in circulation\n   */\n  function totalSupply() constant returns (uint256 supply) {\n    return tokenCount;\n  }\n\n  string constant public name = \"Internet of Medical Things\";\n  string constant public symbol = \"IoMT\";\n  uint8 constant public decimals = 18;\n  \n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer(address _to, uint256 _value) returns (bool success) {\n    require(!frozenAccount[msg.sender]);\n\tif (frozen) return false;\n    else return AbstractToken.transfer (_to, _value);\n  }\n\n  /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom(address _from, address _to, uint256 _value)\n    returns (bool success) {\n\trequire(!frozenAccount[_from]);\n    if (frozen) return false;\n    else return AbstractToken.transferFrom (_from, _to, _value);\n  }\n\n   /**\n   * Change how many tokens given spender is allowed to transfer from message\n   * spender.  In order to prevent double spending of allowance,\n   * To change the approve amount you first have to reduce the addresses`\n   * allowance to zero by calling `approve(_spender, 0)` if it is not\n   * already 0 to mitigate the race condition described here:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender address to allow the owner of to transfer tokens from\n   *        message sender\n   * @param _value number of tokens to allow to transfer\n   * @return true if token transfer was successfully approved, false otherwise\n   */\n  function approve (address _spender, uint256 _value)\n    returns (bool success) {\n\trequire(allowance (msg.sender, _spender) == 0 || _value == 0);\n    return AbstractToken.approve (_spender, _value);\n  }\n\n  /**\n   * Create _value new tokens and give new created tokens to msg.sender.\n   * May only be called by smart contract owner.\n   *\n   * @param _value number of tokens to create\n   * @return true if tokens were created successfully, false otherwise\n   */\n  function createTokens(uint256 _value)\n    returns (bool success) {\n    require (msg.sender == owner);\n\n    if (_value > 0) {\n      if (_value > safeSub (MAX_TOKEN_COUNT, tokenCount)) return false;\n\t  \n      accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);\n      tokenCount = safeAdd (tokenCount, _value);\n\t  \n\t  // adding transfer event and _from address as null address\n\t  emit Transfer(0x0, msg.sender, _value);\n\t  \n\t  return true;\n    }\n\t\n\t  return false;\n    \n  }\n  \n\n  /**\n   * Set new owner for the smart contract.\n   * May only be called by smart contract owner.\n   *\n   * @param _newOwner address of new owner of the smart contract\n   */\n  function setOwner(address _newOwner) {\n    require (msg.sender == owner);\n\n    owner = _newOwner;\n  }\n\n  /**\n   * Freeze ALL token transfers.\n   * May only be called by smart contract owner.\n   */\n  function freezeTransfers () {\n    require (msg.sender == owner);\n\n    if (!frozen) {\n      frozen = true;\n      emit Freeze ();\n    }\n  }\n\n  /**\n   * Unfreeze ALL token transfers.\n   * May only be called by smart contract owner.\n   */\n  function unfreezeTransfers () {\n    require (msg.sender == owner);\n\n    if (frozen) {\n      frozen = false;\n      emit Unfreeze ();\n    }\n  }\n  \n  \n  /*A user is able to unintentionally send tokens to a contract \n  * and if the contract is not prepared to refund them they will get stuck in the contract. \n  * The same issue used to happen for Ether too but new Solidity versions added the payable modifier to\n  * prevent unintended Ether transfers. However, there\u2019s no such mechanism for token transfers.\n  * so the below function is created\n  */\n  \n  function refundTokens(address _token, address _refund, uint256 _value) {\n    require (msg.sender == owner);\n    require(_token != address(this));\n    AbstractToken token = AbstractToken(_token);\n    token.transfer(_refund, _value);\n    emit RefundTokens(_token, _refund, _value);\n  }\n  \n  /**\n   * Freeze specific account\n   * May only be called by smart contract owner.\n   */\n  function freezeAccount(address _target, bool freeze) {\n      require (msg.sender == owner);\n\t  require (msg.sender != _target);\n      frozenAccount[_target] = freeze;\n      emit FrozenFunds(_target, freeze);\n }\n\n  /**\n   * Logged when token transfers were frozen.\n   */\n  event Freeze ();\n\n  /**\n   * Logged when token transfers were unfrozen.\n   */\n  event Unfreeze ();\n  \n  /**\n   * Logged when a particular account is frozen.\n   */\n  \n  event FrozenFunds(address target, bool frozen);\n\n\n  \n  /**\n   * when accidentally send other tokens are refunded\n   */\n  \n  event RefundTokens(address _token, address _refund, uint256 _value);\n}"
}