{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST CALLER PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND SELFDESTRUCT JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH32 CALLER DUP4 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH32 CALLER DUP4 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 CALLER DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 SLOAD DUP3 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH32 DUP2 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP2 PUSH20 AND PUSH1 PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 GT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD DUP2 DUP5 MUL ADD DUP5 EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 MUL SWAP1 POP PUSH1 DUP5 EQ DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 PUSH1 SWAP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 PUSH2 SWAP3 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP DUP3 DUP2 LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 DUP3 DUP3 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD ADD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP1 POP PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 PUSH1 SWAP1 SSTORE POP PUSH1 ADD PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP STOP LOG1 PUSH6 SHA3 RETURNDATASIZE MSTORE8 PUSH26 INVALID_0x79",
  "opcode_entropy": 4.675857636687827,
  "opcode_count": 3660,
  "unique_opcodes": 56,
  "byte_entropy": 4.743093533080974,
  "byte_60": 0.06926952141057935,
  "byte_80": 0.038902882731598094,
  "byte_40": 0.008536244052616849,
  "byte_52": 0.018191995521970334,
  "byte_04": 0.009795689896445563,
  "byte_36": 0.002938706968933669,
  "byte_10": 0.00279876854184159,
  "byte_61": 0.028547439126784216,
  "byte_01": 0.0382031905961377,
  "byte_3e": 0.000279876854184159,
  "byte_57": 0.012734396865379234,
  "byte_00": 0.029247131262244614,
  "byte_35": 0.004617968094038623,
  "byte_7c": 0.0006996921354603975,
  "byte_90": 0.04002239014833473,
  "byte_63": 0.004058214385670305,
  "byte_ff": 0.31038343129023227,
  "byte_16": 0.022670025188916875,
  "byte_06": 0.00279876854184159,
  "byte_fd": 0.005737475510775259,
  "byte_de": 0.0001399384270920795,
  "byte_03": 0.012174643157010915,
  "byte_14": 0.005737475510775259,
  "byte_43": 0.00041981528127623844,
  "byte_09": 0.0012594458438287153,
  "byte_2a": 0.0001399384270920795,
  "byte_5c": 0.0009795689896445563,
  "byte_ce": 0.0006996921354603975,
  "byte_d3": 0.0001399384270920795,
  "byte_5e": 0.0001399384270920795,
  "byte_a7": 0.0006996921354603975,
  "byte_b3": 0.00041981528127623844,
  "byte_ea": 0.0001399384270920795,
  "byte_18": 0.001399384270920795,
  "byte_0d": 0.0006996921354603975,
  "byte_dd": 0.001119507416736636,
  "byte_02": 0.0054575986565911,
  "byte_4f": 0.0006996921354603975,
  "byte_23": 0.000559753708368318,
  "byte_b8": 0.0001399384270920795,
  "byte_72": 0.00041981528127623844,
  "byte_7a": 0.0006996921354603975,
  "byte_31": 0.000279876854184159,
  "byte_3c": 0.000559753708368318,
  "byte_e5": 0.00041981528127623844,
  "byte_67": 0.00041981528127623844,
  "byte_42": 0.00041981528127623844,
  "byte_96": 0.000279876854184159,
  "byte_6c": 0.000559753708368318,
  "byte_68": 0.0008396305625524769,
  "byte_30": 0.000279876854184159,
  "byte_4a": 0.000279876854184159,
  "byte_62": 0.000559753708368318,
  "byte_7e": 0.000279876854184159,
  "byte_75": 0.000279876854184159,
  "byte_70": 0.000279876854184159,
  "byte_a0": 0.000559753708368318,
  "byte_82": 0.01077525888609012,
  "byte_05": 0.0030786453960257487,
  "byte_79": 0.00041981528127623844,
  "byte_cc": 0.0006996921354603975,
  "byte_88": 0.00041981528127623844,
  "byte_1a": 0.00041981528127623844,
  "byte_c1": 0.0001399384270920795,
  "byte_8d": 0.00041981528127623844,
  "byte_a5": 0.000559753708368318,
  "byte_cb": 0.00041981528127623844,
  "byte_5b": 0.02392947103274559,
  "byte_95": 0.0006996921354603975,
  "byte_d8": 0.00041981528127623844,
  "byte_9b": 0.000559753708368318,
  "byte_41": 0.0001399384270920795,
  "byte_a2": 0.0001399384270920795,
  "byte_93": 0.0006996921354603975,
  "byte_d1": 0.0008396305625524769,
  "byte_e8": 0.000559753708368318,
  "byte_eb": 0.000279876854184159,
  "byte_a9": 0.00041981528127623844,
  "byte_9c": 0.000279876854184159,
  "byte_bb": 0.000559753708368318,
  "byte_ab": 0.000279876854184159,
  "byte_27": 0.0001399384270920795,
  "byte_be": 0.00041981528127623844,
  "byte_20": 0.02938706968933669,
  "byte_b4": 0.0008396305625524769,
  "byte_d4": 0.000559753708368318,
  "byte_b6": 0.0001399384270920795,
  "byte_b5": 0.0001399384270920795,
  "byte_1f": 0.002378953260565351,
  "byte_07": 0.0019591379792891126,
  "byte_cd": 0.000279876854184159,
  "byte_ed": 0.000559753708368318,
  "byte_55": 0.0025188916876574307,
  "byte_8e": 0.0001399384270920795,
  "byte_d0": 0.0001399384270920795,
  "byte_78": 0.00041981528127623844,
  "byte_da": 0.000279876854184159,
  "byte_bd": 0.00041981528127623844,
  "byte_94": 0.0001399384270920795,
  "byte_e9": 0.0001399384270920795,
  "byte_37": 0.0006996921354603975,
  "byte_08": 0.0016792611251049538,
  "byte_71": 0.000559753708368318,
  "byte_e6": 0.00041981528127623844,
  "byte_13": 0.0026588301147495103,
  "byte_e7": 0.000279876854184159,
  "byte_24": 0.0001399384270920795,
  "byte_33": 0.0030786453960257487,
  "byte_34": 0.003498460677301987,
  "byte_15": 0.019871256647075286,
  "byte_50": 0.03498460677301987,
  "byte_58": 0.000279876854184159,
  "byte_56": 0.010495382031905962,
  "byte_51": 0.009655751469353484,
  "byte_81": 0.029107192835152534,
  "byte_83": 0.006717044500419815,
  "byte_91": 0.017352364959417856,
  "byte_98": 0.0001399384270920795,
  "byte_84": 0.003778337531486146,
  "byte_7d": 0.0006996921354603975,
  "byte_c5": 0.000279876854184159,
  "byte_0a": 0.00279876854184159,
  "byte_19": 0.0015393226980128744,
  "byte_92": 0.007276798208788134,
  "byte_f3": 0.0026588301147495103,
  "byte_df": 0.00041981528127623844,
  "byte_f6": 0.0001399384270920795,
  "byte_73": 0.0156731038343129,
  "byte_b7": 0.0006996921354603975,
  "byte_64": 0.000279876854184159,
  "byte_0b": 0.00041981528127623844,
  "byte_86": 0.001119507416736636,
  "byte_af": 0.000279876854184159,
  "byte_69": 0.000559753708368318,
  "byte_8a": 0.0001399384270920795,
  "byte_0e": 0.000279876854184159,
  "byte_ca": 0.0001399384270920795,
  "byte_f7": 0.0008396305625524769,
  "byte_11": 0.0012594458438287153,
  "byte_46": 0.0001399384270920795,
  "byte_0f": 0.001119507416736636,
  "byte_12": 0.000559753708368318,
  "byte_3b": 0.0001399384270920795,
  "byte_b0": 0.000559753708368318,
  "byte_d9": 0.001119507416736636,
  "byte_f2": 0.000559753708368318,
  "byte_f4": 0.000279876854184159,
  "byte_29": 0.000559753708368318,
  "byte_8c": 0.00041981528127623844,
  "byte_ac": 0.000279876854184159,
  "byte_9a": 0.000279876854184159,
  "byte_c9": 0.0001399384270920795,
  "byte_fa": 0.0001399384270920795,
  "byte_6f": 0.00041981528127623844,
  "byte_2d": 0.0001399384270920795,
  "byte_d2": 0.000279876854184159,
  "byte_47": 0.000279876854184159,
  "byte_1d": 0.0001399384270920795,
  "byte_3f": 0.0001399384270920795,
  "byte_f8": 0.0001399384270920795,
  "byte_54": 0.0065771060733277355,
  "byte_fb": 0.000279876854184159,
  "byte_85": 0.0015393226980128744,
  "byte_7f": 0.0009795689896445563,
  "byte_e1": 0.000279876854184159,
  "byte_ec": 0.0001399384270920795,
  "byte_1e": 0.0008396305625524769,
  "byte_c0": 0.0001399384270920795,
  "byte_b2": 0.000279876854184159,
  "byte_c8": 0.000559753708368318,
  "byte_c7": 0.0001399384270920795,
  "byte_c3": 0.0001399384270920795,
  "byte_b9": 0.00041981528127623844,
  "byte_25": 0.0001399384270920795,
  "byte_a3": 0.00041981528127623844,
  "byte_0c": 0.00041981528127623844,
  "byte_cf": 0.00041981528127623844,
  "byte_f5": 0.0008396305625524769,
  "byte_db": 0.000279876854184159,
  "byte_87": 0.00041981528127623844,
  "byte_32": 0.000279876854184159,
  "byte_e0": 0.000279876854184159,
  "byte_9d": 0.000279876854184159,
  "byte_44": 0.00041981528127623844,
  "byte_5d": 0.000279876854184159,
  "byte_39": 0.000279876854184159,
  "byte_a1": 0.0009795689896445563,
  "byte_17": 0.000559753708368318,
  "byte_a6": 0.0001399384270920795,
  "byte_fe": 0.001399384270920795,
  "byte_97": 0.0001399384270920795,
  "byte_d7": 0.0001399384270920795,
  "byte_49": 0.0001399384270920795,
  "byte_f1": 0.00041981528127623844,
  "byte_66": 0.000279876854184159,
  "byte_4e": 0.000279876854184159,
  "byte_22": 0.000279876854184159,
  "byte_ad": 0.000279876854184159,
  "byte_1b": 0.0019591379792891126,
  "byte_e2": 0.000279876854184159,
  "byte_c2": 0.000279876854184159,
  "byte_fc": 0.000279876854184159,
  "byte_aa": 0.000279876854184159,
  "byte_2b": 0.000279876854184159,
  "byte_c4": 0.000279876854184159,
  "byte_28": 0.000279876854184159,
  "byte_5a": 0.00041981528127623844,
  "byte_4d": 0.000279876854184159,
  "byte_ef": 0.000279876854184159,
  "byte_c6": 0.000279876854184159,
  "byte_e3": 0.0001399384270920795,
  "byte_ee": 0.0001399384270920795,
  "byte_48": 0.0001399384270920795,
  "byte_38": 0.0001399384270920795,
  "byte_5f": 0.0001399384270920795,
  "byte_6e": 0.0001399384270920795,
  "byte_6a": 0.0001399384270920795,
  "byte_99": 0.0001399384270920795,
  "byte_9f": 0.0001399384270920795,
  "byte_65": 0.0001399384270920795,
  "byte_3d": 0.0001399384270920795,
  "byte_53": 0.0001399384270920795,
  "byte_26": 0.0001399384270920795,
  "byte_f0": 0.0001399384270920795,
  "byte_7b": 0.0001399384270920795,
  "byte_e4": 0.0001399384270920795,
  "byte_8f": 0.0001399384270920795,
  "byte_4c": 0.0001399384270920795,
  "byte_a4": 0.0001399384270920795,
  "byte_b1": 0.0001399384270920795,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 2,
  "event_nums": 1,
  "creation_block": 6237341,
  "creation_timestamp": 1535584357,
  "life_time": 5.0,
  "duration_seconds": 119.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.3333333333333333,
  "avg_gas_limit": 1087121.5,
  "std_gas_limit": 1034151.5,
  "avg_gas_used": 1079621.5,
  "std_gas_used": 1041651.5,
  "avg_gas_price": 3000000000.0,
  "std_gas_price": 0.0,
  "transfer_num": 1,
  "atinversebrah_num": 1,
  "timeline_sequence": [
    [
      6237341,
      1535584357,
      241,
      28,
      0,
      2121273,
      3000000000,
      0,
      1,
      6002146,
      2121273,
      16883617
    ],
    [
      6237346,
      1535584476,
      242,
      128,
      0,
      52970,
      3000000000,
      0,
      1,
      4019424,
      37970,
      16883612
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.20;\n\ncontract SafeMath {\n  function safeMul(uint256 a, uint256 b) public pure  returns (uint256)  {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function safeDiv(uint256 a, uint256 b)public pure returns (uint256) {\n    assert(b > 0);\n    uint256 c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n\n  function safeSub(uint256 a, uint256 b)public pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function safeAdd(uint256 a, uint256 b)public pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c>=a && c>=b);\n    return c;\n  }\n\n  function _assert(bool assertion)public pure {\n    assert(!assertion);\n  }\n}\n\n\ncontract ERC20Interface {\n  string public name;\n  string public symbol;\n  uint8 public  decimals;\n  uint public totalSupply;\n  function transfer(address _to, uint256 _value) returns (bool success);\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);\n  \n  function approve(address _spender, uint256 _value) returns (bool success);\n  function allowance(address _owner, address _spender) view returns (uint256 remaining);\n  event Transfer(address indexed _from, address indexed _to, uint256 _value);\n  event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n }\n \ncontract ERC20 is ERC20Interface,SafeMath {\n\n    mapping(address => uint256) public balanceOf;\n\n     mapping(address => mapping(address => uint256)) allowed;\n\n    constructor(string _name) public {\n       name = _name;  \n       symbol = \"FTC\";\n       decimals = 9;\n       totalSupply = 50000000000000000;\n       balanceOf[msg.sender] = totalSupply;\n    }\n\n  function transfer(address _to, uint256 _value) returns (bool success) {\n      require(_to != address(0));\n      require(balanceOf[msg.sender] >= _value);\n      require(balanceOf[ _to] + _value >= balanceOf[ _to]);  \n\n      balanceOf[msg.sender] =SafeMath.safeSub(balanceOf[msg.sender],_value) ;\n      balanceOf[_to] =SafeMath.safeAdd(balanceOf[_to] ,_value);\n\n   \n      emit Transfer(msg.sender, _to, _value);\n\n      return true;\n  }\n\n\n  function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {\n      require(_to != address(0));\n      require(allowed[_from][msg.sender] >= _value);\n      require(balanceOf[_from] >= _value);\n      require(balanceOf[_to] + _value >= balanceOf[_to]);\n\n      balanceOf[_from] =SafeMath.safeSub(balanceOf[_from],_value) ;\n      balanceOf[_to] = SafeMath.safeAdd(balanceOf[_to],_value);\n\n      allowed[_from][msg.sender] =SafeMath.safeSub(allowed[_from][msg.sender], _value);\n\n      emit Transfer(msg.sender, _to, _value);\n      return true;\n  }\n\n  function approve(address _spender, uint256 _value) returns (bool success) {\n      allowed[msg.sender][_spender] = _value;\n\n      emit Approval(msg.sender, _spender, _value);\n      return true;\n  }\n\n  function allowance(address _owner, address _spender) view returns (uint256 remaining) {\n      return allowed[_owner][_spender];\n  }\n\n}\n\n\ncontract owned {\n    address public owner;\n\n    constructor () public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnerShip(address newOwer) public onlyOwner {\n        owner = newOwer;\n    }\n\n}\n\ncontract SelfDesctructionContract is owned {\n   \n   string  public someValue;\n   modifier ownerRestricted {\n      require(owner == msg.sender);\n      _;\n   } \n \n   function SelfDesctructionContract() {\n      owner = msg.sender;\n   }\n   \n   function setSomeValue(string value){\n      someValue = value;\n   } \n\n   function destroyContract() ownerRestricted {\n     selfdestruct(owner);\n   }\n}\n\n\n\ncontract AdvanceToken is ERC20, SelfDesctructionContract{\n\n    mapping (address => bool) public frozenAccount;\n\n    event AddSupply(uint amount);\n    event FrozenFunds(address target, bool frozen);\n    event Burn(address target, uint amount);\n\n    constructor (string _name) ERC20(_name) public {\n\n    }\n\n    function mine(address target, uint amount) public onlyOwner {\n        totalSupply =SafeMath.safeAdd(totalSupply,amount) ;\n        balanceOf[target] = SafeMath.safeAdd(balanceOf[target],amount);\n\n        emit AddSupply(amount);\n        emit Transfer(0, target, amount);\n    }\n\n    function freezeAccount(address target, bool freeze) public onlyOwner {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n\n  function transfer(address _to, uint256 _value) public returns (bool success) {\n        success = _transfer(msg.sender, _to, _value);\n  }\n\n\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(allowed[_from][msg.sender] >= _value);\n        success =  _transfer(_from, _to, _value);\n        allowed[_from][msg.sender] =SafeMath.safeSub(allowed[_from][msg.sender],_value) ;\n  }\n\n  function _transfer(address _from, address _to, uint256 _value) internal returns (bool) {\n      require(_to != address(0));\n      require(!frozenAccount[_from]);\n\n      require(balanceOf[_from] >= _value);\n      require(balanceOf[ _to] + _value >= balanceOf[ _to]);\n\n      balanceOf[_from] =SafeMath.safeSub(balanceOf[_from],_value) ;\n      balanceOf[_to] =SafeMath.safeAdd(balanceOf[_to],_value) ;\n\n      emit Transfer(_from, _to, _value);\n      return true;\n  }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n\n        totalSupply =SafeMath.safeSub(totalSupply,_value) ;\n        balanceOf[msg.sender] =SafeMath.safeSub(balanceOf[msg.sender],_value) ;\n\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value)  public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n\n        totalSupply =SafeMath.safeSub(totalSupply,_value) ;\n        balanceOf[msg.sender] =SafeMath.safeSub(balanceOf[msg.sender], _value);\n        allowed[_from][msg.sender] =SafeMath.safeSub(allowed[_from][msg.sender],_value);\n\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n}"
}