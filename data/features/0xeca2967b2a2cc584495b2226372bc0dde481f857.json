{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH1 NOT AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SLOAD CALLER DUP8 PUSH1 MLOAD DUP1 DUP5 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND PUSH13 MUL DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 SWAP3 POP DUP5 PUSH1 NOT AND DUP4 PUSH1 NOT AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD DUP4 PUSH1 SWAP1 DIV GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SLOAD PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP2 POP DUP3 PUSH1 PUSH1 PUSH1 SLOAD PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 PUSH1 NOT AND SWAP1 SSTORE POP PUSH1 PUSH1 MUL DUP3 PUSH1 NOT AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 SLOAD GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST CALLER PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 DUP2 SWAP1 SSTORE POP NUMBER PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH2 JUMP JUMPDEST CALLER PUSH20 AND PUSH32 DUP3 PUSH1 SLOAD PUSH1 SLOAD PUSH1 MLOAD DUP1 DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 PUSH1 SWAP4 POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP1 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 SLOAD SUB SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH2 PUSH1 SLOAD PUSH1 EXP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND PUSH1 AND PUSH1 EXP PUSH1 MUL PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 DUP1 DUP4 CALLER DUP8 PUSH1 MLOAD DUP1 DUP5 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND PUSH13 MUL DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 SWAP1 POP DUP3 DUP2 PUSH1 SWAP1 DIV GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP5 PUSH1 NOT AND DUP2 PUSH1 NOT AND EQ SWAP2 POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP3 CALLER DUP7 PUSH1 MLOAD DUP1 DUP5 PUSH1 NOT AND PUSH1 NOT AND DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND PUSH13 MUL DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 SWAP1 POP DUP1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP4 PUSH20 AND PUSH4 CALLER DUP6 ADDRESS DUP7 PUSH1 MLOAD DUP6 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 PUSH20 AND PUSH4 PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP5 PUSH1 MLOAD DUP4 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 ADD SWAP1 POP DUP3 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH2 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD LT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 PUSH1 SLOAD ADD PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH2 PUSH1 PUSH1 SLOAD ADD PUSH1 EXP PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 SLOAD SUB PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SLOAD PUSH1 SLOAD DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST MOD EQ ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST PUSH1 NUMBER SUB BLOCKHASH PUSH1 DUP2 PUSH1 NOT AND SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SLOAD NUMBER SUB SWAP7 POP PUSH1 SLOAD SWAP6 POP PUSH1 DUP7 MUL SWAP5 POP DUP5 DUP8 LT ISZERO PUSH2 JUMPI PUSH2 DUP8 PUSH2 PUSH1 DUP9 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP4 POP PUSH2 PUSH2 PUSH2 PUSH1 DUP8 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP3 POP PUSH2 PUSH2 DUP5 PUSH2 PUSH2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH2 DUP6 PUSH2 PUSH1 DUP11 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP PUSH2 PUSH2 PUSH2 PUSH1 DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 PUSH2 DUP3 PUSH2 PUSH2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST NUMBER PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 SLOAD LT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST PUSH1 SLOAD PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 MUL SWAP1 POP PUSH1 DUP4 EQ DUP1 PUSH2 JUMPI POP DUP2 DUP4 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP2 DUP4 GT ISZERO PUSH2 JUMPI DUP2 SWAP1 POP PUSH2 JUMP JUMPDEST DUP3 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 OR UNKNOWN_0xca SWAP9 SWAP8 LOG3 UNKNOWN_0xba BLOCKHASH PUSH6 INVALID_0x7b",
  "opcode_entropy": 4.736942743409194,
  "opcode_count": 4558,
  "unique_opcodes": 72,
  "byte_entropy": 4.971576446709831,
  "byte_60": 0.07175518818149841,
  "byte_80": 0.03939500527611678,
  "byte_40": 0.012310939148786493,
  "byte_52": 0.015359362176105054,
  "byte_04": 0.007034822370735139,
  "byte_36": 0.0024621878297572987,
  "byte_10": 0.002110446711220542,
  "byte_61": 0.0329464181029429,
  "byte_01": 0.030718724352210108,
  "byte_c2": 0.00046898815804900925,
  "byte_57": 0.013600656583421269,
  "byte_00": 0.03962949935514128,
  "byte_35": 0.0035174111853675696,
  "byte_7c": 0.00035174111853675694,
  "byte_90": 0.0408019697502638,
  "byte_63": 0.008324539805369914,
  "byte_ff": 0.27013717903622936,
  "byte_16": 0.024504631258060735,
  "byte_06": 0.002227693750732794,
  "byte_fd": 0.0064485871731738776,
  "byte_de": 0.00046898815804900925,
  "byte_03": 0.011724703951225232,
  "byte_14": 0.006683081252198382,
  "byte_c7": 0.0007034822370735139,
  "byte_09": 0.0017587055926837848,
  "byte_5e": 0.00011724703951225231,
  "byte_a7": 0.0005862351975612616,
  "byte_b3": 0.00046898815804900925,
  "byte_02": 0.005393363817563606,
  "byte_3a": 0.0005862351975612616,
  "byte_a0": 0.00035174111853675694,
  "byte_0d": 0.0016414585531715324,
  "byte_bc": 0.00023449407902450463,
  "byte_17": 0.0014069644741470278,
  "byte_da": 0.00023449407902450463,
  "byte_48": 0.0005862351975612616,
  "byte_5f": 0.00023449407902450463,
  "byte_e7": 0.00035174111853675694,
  "byte_18": 0.0005862351975612616,
  "byte_fb": 0.00035174111853675694,
  "byte_e5": 0.0005862351975612616,
  "byte_12": 0.00023449407902450463,
  "byte_dd": 0.0009379763160980185,
  "byte_65": 0.0005862351975612616,
  "byte_23": 0.00046898815804900925,
  "byte_b8": 0.00011724703951225231,
  "byte_72": 0.0007034822370735139,
  "byte_2d": 0.00023449407902450463,
  "byte_38": 0.00035174111853675694,
  "byte_bf": 0.00011724703951225231,
  "byte_7a": 0.0005862351975612616,
  "byte_15": 0.016062844413178567,
  "byte_31": 0.00035174111853675694,
  "byte_3c": 0.0005862351975612616,
  "byte_67": 0.00011724703951225231,
  "byte_32": 0.00023449407902450463,
  "byte_e9": 0.00035174111853675694,
  "byte_97": 0.0007034822370735139,
  "byte_08": 0.0015242115136592802,
  "byte_71": 0.00046898815804900925,
  "byte_3e": 0.0005862351975612616,
  "byte_aa": 0.0005862351975612616,
  "byte_f8": 0.00035174111853675694,
  "byte_6b": 0.00046898815804900925,
  "byte_9c": 0.0008207292765857662,
  "byte_49": 0.00035174111853675694,
  "byte_4e": 0.00011724703951225231,
  "byte_f3": 0.0048071286200023445,
  "byte_76": 0.00046898815804900925,
  "byte_28": 0.00035174111853675694,
  "byte_f2": 0.0007034822370735139,
  "byte_4f": 0.0005862351975612616,
  "byte_a9": 0.00046898815804900925,
  "byte_e1": 0.0005862351975612616,
  "byte_05": 0.002110446711220542,
  "byte_25": 0.0005862351975612616,
  "byte_6d": 0.0005862351975612616,
  "byte_2b": 0.0011724703951225231,
  "byte_50": 0.03962949935514128,
  "byte_6f": 0.00035174111853675694,
  "byte_d3": 0.00046898815804900925,
  "byte_96": 0.00023449407902450463,
  "byte_d6": 0.00035174111853675694,
  "byte_7b": 0.00035174111853675694,
  "byte_70": 0.00023449407902450463,
  "byte_82": 0.010317739477078204,
  "byte_d2": 0.00011724703951225231,
  "byte_79": 0.00011724703951225231,
  "byte_ba": 0.00046898815804900925,
  "byte_29": 0.00046898815804900925,
  "byte_81": 0.02673232500879353,
  "byte_26": 0.00023449407902450463,
  "byte_9a": 0.00035174111853675694,
  "byte_56": 0.014069644741470278,
  "byte_99": 0.00011724703951225231,
  "byte_cc": 0.00011724703951225231,
  "byte_ab": 0.00035174111853675694,
  "byte_87": 0.0014069644741470278,
  "byte_a2": 0.00035174111853675694,
  "byte_8a": 0.00035174111853675694,
  "byte_9d": 0.00035174111853675694,
  "byte_07": 0.002696681908781803,
  "byte_e0": 0.00035174111853675694,
  "byte_8b": 0.00035174111853675694,
  "byte_2c": 0.00035174111853675694,
  "byte_8d": 0.0005862351975612616,
  "byte_a5": 0.00011724703951225231,
  "byte_cb": 0.00035174111853675694,
  "byte_5b": 0.02743580724586704,
  "byte_95": 0.0008207292765857662,
  "byte_d8": 0.0009379763160980185,
  "byte_9b": 0.00046898815804900925,
  "byte_41": 0.00023449407902450463,
  "byte_b6": 0.00023449407902450463,
  "byte_6a": 0.00011724703951225231,
  "byte_46": 0.00023449407902450463,
  "byte_bb": 0.00035174111853675694,
  "byte_b5": 0.00023449407902450463,
  "byte_ad": 0.00035174111853675694,
  "byte_e8": 0.00035174111853675694,
  "byte_1b": 0.0012897174346347756,
  "byte_fe": 0.0007034822370735139,
  "byte_dc": 0.0007034822370735139,
  "byte_3b": 0.00046898815804900925,
  "byte_ca": 0.00035174111853675694,
  "byte_51": 0.013014421385860007,
  "byte_66": 0.00011724703951225231,
  "byte_0a": 0.0048071286200023445,
  "byte_11": 0.0016414585531715324,
  "byte_d4": 0.00023449407902450463,
  "byte_ee": 0.00011724703951225231,
  "byte_1d": 0.0008207292765857662,
  "byte_39": 0.00011724703951225231,
  "byte_d0": 0.0005862351975612616,
  "byte_93": 0.0014069644741470278,
  "byte_6e": 0.00011724703951225231,
  "byte_f9": 0.00011724703951225231,
  "byte_62": 0.00023449407902450463,
  "byte_ed": 0.00023449407902450463,
  "byte_0b": 0.002931175987806308,
  "byte_e3": 0.00023449407902450463,
  "byte_34": 0.004220893422441084,
  "byte_20": 0.024504631258060735,
  "byte_83": 0.005862351975612616,
  "byte_91": 0.020049243756595145,
  "byte_1c": 0.0007034822370735139,
  "byte_84": 0.0031656700668308124,
  "byte_1f": 0.0036346582248798216,
  "byte_19": 0.004924375659514597,
  "byte_92": 0.006096846054637121,
  "byte_73": 0.013131668425372259,
  "byte_0c": 0.0014069644741470278,
  "byte_c8": 0.0005862351975612616,
  "byte_d1": 0.00046898815804900925,
  "byte_fc": 0.0005862351975612616,
  "byte_1e": 0.0035174111853675696,
  "byte_4b": 0.00023449407902450463,
  "byte_21": 0.001055223355610271,
  "byte_6c": 0.00046898815804900925,
  "byte_2a": 0.00011724703951225231,
  "byte_13": 0.002110446711220542,
  "byte_4c": 0.00023449407902450463,
  "byte_55": 0.0030484230273185604,
  "byte_7d": 0.0005862351975612616,
  "byte_86": 0.001055223355610271,
  "byte_30": 0.0005862351975612616,
  "byte_a8": 0.00023449407902450463,
  "byte_b1": 0.00035174111853675694,
  "byte_77": 0.00011724703951225231,
  "byte_5c": 0.00023449407902450463,
  "byte_b7": 0.00023449407902450463,
  "byte_c0": 0.00046898815804900925,
  "byte_e2": 0.00035174111853675694,
  "byte_eb": 0.00035174111853675694,
  "byte_42": 0.00035174111853675694,
  "byte_74": 0.00011724703951225231,
  "byte_f0": 0.00011724703951225231,
  "byte_f6": 0.00011724703951225231,
  "byte_47": 0.00023449407902450463,
  "byte_f7": 0.00035174111853675694,
  "byte_37": 0.00035174111853675694,
  "byte_9f": 0.00011724703951225231,
  "byte_a6": 0.00023449407902450463,
  "byte_2f": 0.00011724703951225231,
  "byte_db": 0.00023449407902450463,
  "byte_54": 0.009848751319029195,
  "byte_33": 0.0023449407902450463,
  "byte_85": 0.001055223355610271,
  "byte_7f": 0.0008207292765857662,
  "byte_8c": 0.00035174111853675694,
  "byte_ec": 0.00023449407902450463,
  "byte_b2": 0.00023449407902450463,
  "byte_c3": 0.00023449407902450463,
  "byte_b9": 0.00035174111853675694,
  "byte_a3": 0.0009379763160980185,
  "byte_0e": 0.001055223355610271,
  "byte_1a": 0.00046898815804900925,
  "byte_89": 0.00011724703951225231,
  "byte_5a": 0.0014069644741470278,
  "byte_0f": 0.0005862351975612616,
  "byte_3d": 0.0009379763160980185,
  "byte_53": 0.00023449407902450463,
  "byte_43": 0.00046898815804900925,
  "byte_cf": 0.00023449407902450463,
  "byte_ce": 0.00011724703951225231,
  "byte_f5": 0.0007034822370735139,
  "byte_c4": 0.00046898815804900925,
  "byte_d9": 0.00011724703951225231,
  "byte_7e": 0.00011724703951225231,
  "byte_68": 0.00035174111853675694,
  "byte_64": 0.0007034822370735139,
  "byte_69": 0.00023449407902450463,
  "byte_b0": 0.00023449407902450463,
  "byte_f1": 0.0005862351975612616,
  "byte_a1": 0.00035174111853675694,
  "byte_4d": 0.00023449407902450463,
  "byte_ef": 0.00035174111853675694,
  "byte_58": 0.00023449407902450463,
  "byte_59": 0.00023449407902450463,
  "byte_44": 0.00011724703951225231,
  "byte_cd": 0.00011724703951225231,
  "byte_a4": 0.00023449407902450463,
  "byte_22": 0.00011724703951225231,
  "byte_af": 0.00011724703951225231,
  "byte_b4": 0.00011724703951225231,
  "byte_94": 0.00023449407902450463,
  "byte_e6": 0.00011724703951225231,
  "byte_8f": 0.00011724703951225231,
  "byte_27": 0.00011724703951225231,
  "byte_88": 0.00011724703951225231,
  "byte_ae": 0.00011724703951225231,
  "byte_ea": 0.00011724703951225231,
  "byte_98": 0.00011724703951225231,
  "byte_75": 0.00011724703951225231,
  "num_nodes": 5,
  "num_edges": 4,
  "avg_degree": 1.6,
  "density": 0.2,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 105,
  "event_nums": 98,
  "creation_block": 5594211,
  "creation_timestamp": 1526030226,
  "life_time": 25687.0,
  "duration_seconds": 388506.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 6,
  "num_buyers": 1,
  "num_sellers": 4,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 10000000000000.0,
  "avg_value": 94339622641.50943,
  "txn_per_block": 0.004087511678604796,
  "avg_gas_limit": 115687.81904761905,
  "std_gas_limit": 257266.49188240882,
  "avg_gas_used": 113461.06666666667,
  "std_gas_used": 257741.4752119343,
  "avg_gas_price": 7653904761.904762,
  "std_gas_price": 3434977644.6872454,
  "mint_num": 93,
  "transfer_num": 8,
  "atinversebrah_num": 1,
  "transferanyerc20token_num": 1,
  "timeline_sequence": [
    [
      5594211,
      1526030226,
      0,
      100,
      0,
      2732810,
      10000000000,
      0,
      1,
      6836712,
      2732810,
      17526748
    ],
    [
      5596135,
      1526059650,
      2,
      9,
      10000000000000,
      21000,
      14000000000,
      1,
      0,
      338911,
      21000,
      17524824
    ],
    [
      5596198,
      1526060543,
      2,
      41,
      0,
      21729,
      11000000000,
      1,
      0,
      2013290,
      21046,
      17524761
    ],
    [
      5606799,
      1526219228,
      0,
      143,
      0,
      169979,
      4000000000,
      0,
      1,
      7913338,
      169979,
      17514160
    ],
    [
      5606856,
      1526219996,
      1,
      131,
      0,
      51698,
      6000000000,
      0,
      1,
      7961578,
      51698,
      17514103
    ],
    [
      5606885,
      1526220492,
      2,
      100,
      0,
      30000,
      20000000000,
      1,
      0,
      3080676,
      30000,
      17514074
    ],
    [
      5606897,
      1526220619,
      8,
      45,
      0,
      60000,
      9000000000,
      0,
      1,
      2570556,
      51698,
      17514062
    ],
    [
      5606931,
      1526221220,
      3,
      14,
      0,
      36698,
      30000000000,
      0,
      1,
      820091,
      36698,
      17514028
    ],
    [
      5606974,
      1526221821,
      4,
      25,
      0,
      36698,
      20000000000,
      0,
      1,
      772667,
      36698,
      17513985
    ],
    [
      5607479,
      1526229696,
      5,
      30,
      0,
      94915,
      6000000000,
      0,
      1,
      2897407,
      94915,
      17513480
    ],
    [
      5607488,
      1526229879,
      6,
      65,
      0,
      94915,
      6000000000,
      0,
      1,
      5323550,
      94915,
      17513471
    ],
    [
      5607510,
      1526230210,
      7,
      81,
      0,
      94979,
      6000000000,
      0,
      1,
      5560851,
      94979,
      17513449
    ],
    [
      5607524,
      1526230416,
      8,
      56,
      0,
      94979,
      6000000000,
      0,
      1,
      6510396,
      94979,
      17513435
    ],
    [
      5607529,
      1526230450,
      9,
      55,
      0,
      94851,
      6000000000,
      0,
      1,
      6897894,
      94851,
      17513430
    ],
    [
      5607540,
      1526230608,
      10,
      94,
      0,
      94979,
      6000000000,
      0,
      1,
      7977085,
      94979,
      17513419
    ],
    [
      5607615,
      1526231885,
      12,
      133,
      0,
      94915,
      5000000000,
      0,
      1,
      7678932,
      94915,
      17513344
    ],
    [
      5607622,
      1526231936,
      13,
      82,
      0,
      94979,
      5000000000,
      0,
      1,
      6823696,
      94979,
      17513337
    ],
    [
      5607697,
      1526232963,
      14,
      69,
      0,
      94851,
      4000000000,
      0,
      1,
      6722598,
      94851,
      17513262
    ],
    [
      5607848,
      1526235241,
      15,
      30,
      0,
      94979,
      11000000000,
      1,
      0,
      1418719,
      24201,
      17513111
    ],
    [
      5609037,
      1526252824,
      16,
      46,
      0,
      94915,
      4000000000,
      0,
      1,
      7935990,
      94915,
      17511922
    ],
    [
      5609058,
      1526253028,
      17,
      88,
      0,
      94979,
      4000000000,
      0,
      1,
      4459834,
      94979,
      17511901
    ],
    [
      5609105,
      1526253792,
      18,
      124,
      0,
      94915,
      3500000000,
      0,
      1,
      5019862,
      94915,
      17511854
    ],
    [
      5609124,
      1526254046,
      19,
      148,
      0,
      94915,
      3500000000,
      0,
      1,
      7258002,
      94915,
      17511835
    ],
    [
      5609545,
      1526260161,
      20,
      36,
      0,
      94851,
      3500000000,
      0,
      1,
      4282880,
      94851,
      17511414
    ],
    [
      5610127,
      1526269297,
      21,
      56,
      0,
      94979,
      5000000000,
      0,
      1,
      6307433,
      94979,
      17510832
    ],
    [
      5610155,
      1526269698,
      22,
      96,
      0,
      94915,
      5000000000,
      1,
      0,
      7817251,
      26194,
      17510804
    ],
    [
      5610185,
      1526270083,
      23,
      146,
      0,
      94979,
      5000000000,
      0,
      1,
      6833122,
      94979,
      17510774
    ],
    [
      5610189,
      1526270128,
      24,
      67,
      0,
      94915,
      5000000000,
      0,
      1,
      4700731,
      94915,
      17510770
    ],
    [
      5610194,
      1526270201,
      25,
      144,
      0,
      94915,
      5000000000,
      0,
      1,
      7058237,
      94915,
      17510765
    ],
    [
      5610198,
      1526270270,
      26,
      58,
      0,
      94979,
      5000000000,
      0,
      1,
      6925859,
      94979,
      17510761
    ],
    [
      5610236,
      1526270888,
      27,
      118,
      0,
      94915,
      4000000000,
      0,
      1,
      7635413,
      94915,
      17510723
    ],
    [
      5610242,
      1526270948,
      28,
      135,
      0,
      94851,
      4500000000,
      0,
      1,
      7762079,
      94851,
      17510717
    ],
    [
      5610249,
      1526271066,
      10,
      49,
      0,
      60000,
      8000000000,
      0,
      1,
      2433027,
      51698,
      17510710
    ],
    [
      5610255,
      1526271146,
      29,
      146,
      0,
      94979,
      4500000000,
      0,
      1,
      7997558,
      94979,
      17510704
    ],
    [
      5610455,
      1526274132,
      30,
      49,
      0,
      94979,
      4000000000,
      0,
      1,
      7310724,
      94979,
      17510504
    ],
    [
      5610462,
      1526274213,
      31,
      45,
      0,
      94915,
      4500000000,
      0,
      1,
      5950224,
      94915,
      17510497
    ],
    [
      5610464,
      1526274246,
      32,
      87,
      0,
      94915,
      4500000000,
      0,
      1,
      7575103,
      94915,
      17510495
    ],
    [
      5610515,
      1526275112,
      33,
      84,
      0,
      94979,
      4500000000,
      0,
      1,
      7273687,
      94979,
      17510444
    ],
    [
      5610522,
      1526275228,
      34,
      155,
      0,
      94915,
      4300000000,
      0,
      1,
      5869188,
      94915,
      17510437
    ],
    [
      5612138,
      1526300409,
      11,
      83,
      0,
      60000,
      11360000000,
      0,
      1,
      3362002,
      51698,
      17508821
    ],
    [
      5612163,
      1526300780,
      35,
      272,
      0,
      94979,
      11000000000,
      0,
      1,
      7284827,
      94979,
      17508796
    ],
    [
      5612250,
      1526301937,
      36,
      54,
      0,
      94915,
      9000000000,
      0,
      1,
      3044321,
      94915,
      17508709
    ],
    [
      5612283,
      1526302364,
      37,
      183,
      0,
      94915,
      8000000000,
      0,
      1,
      7303545,
      94915,
      17508676
    ],
    [
      5612285,
      1526302413,
      38,
      93,
      0,
      94979,
      8000000000,
      0,
      1,
      4157786,
      94979,
      17508674
    ],
    [
      5612302,
      1526302693,
      39,
      78,
      0,
      94915,
      8000000000,
      0,
      1,
      7159363,
      94915,
      17508657
    ],
    [
      5612304,
      1526302746,
      40,
      167,
      0,
      94979,
      11000000000,
      0,
      1,
      6043637,
      94979,
      17508655
    ],
    [
      5612313,
      1526302841,
      41,
      178,
      0,
      94915,
      7500000000,
      0,
      1,
      7428715,
      94915,
      17508646
    ],
    [
      5612333,
      1526303155,
      42,
      162,
      0,
      94979,
      11000000000,
      0,
      1,
      5949271,
      94979,
      17508626
    ],
    [
      5612407,
      1526304217,
      43,
      71,
      0,
      94979,
      8000000000,
      0,
      1,
      4941464,
      94979,
      17508552
    ],
    [
      5612411,
      1526304254,
      44,
      79,
      0,
      94979,
      8000000000,
      0,
      1,
      6217947,
      94979,
      17508548
    ],
    [
      5612418,
      1526304356,
      45,
      184,
      0,
      94979,
      8000000000,
      0,
      1,
      7823370,
      94979,
      17508541
    ],
    [
      5612427,
      1526304487,
      46,
      107,
      0,
      94979,
      8000000000,
      0,
      1,
      7021895,
      94979,
      17508532
    ],
    [
      5612431,
      1526304563,
      47,
      130,
      0,
      94979,
      8000000000,
      0,
      1,
      7079471,
      94979,
      17508528
    ],
    [
      5612433,
      1526304586,
      48,
      84,
      0,
      94979,
      8000000000,
      0,
      1,
      5753479,
      94979,
      17508526
    ],
    [
      5612437,
      1526304635,
      49,
      91,
      0,
      94915,
      8000000000,
      0,
      1,
      7286362,
      94915,
      17508522
    ],
    [
      5612595,
      1526307131,
      50,
      177,
      0,
      94979,
      8000000000,
      0,
      1,
      7722046,
      94979,
      17508364
    ],
    [
      5612598,
      1526307159,
      51,
      66,
      0,
      94979,
      8000000000,
      0,
      1,
      4817208,
      94979,
      17508361
    ],
    [
      5612613,
      1526307438,
      52,
      114,
      0,
      94979,
      8000000000,
      0,
      1,
      6875408,
      94979,
      17508346
    ],
    [
      5613035,
      1526314126,
      53,
      38,
      0,
      94915,
      8000000000,
      0,
      1,
      3602856,
      94915,
      17507924
    ],
    [
      5613039,
      1526314187,
      54,
      132,
      0,
      94915,
      8000000000,
      0,
      1,
      7851739,
      94915,
      17507920
    ],
    [
      5613234,
      1526316946,
      55,
      158,
      0,
      94787,
      8000000000,
      0,
      1,
      6691909,
      94787,
      17507725
    ],
    [
      5613236,
      1526316959,
      56,
      163,
      0,
      94915,
      8000000000,
      1,
      0,
      7220706,
      26194,
      17507723
    ],
    [
      5613245,
      1526317103,
      57,
      52,
      0,
      94851,
      8000000000,
      0,
      1,
      5753381,
      94851,
      17507714
    ],
    [
      5613305,
      1526318003,
      58,
      157,
      0,
      94851,
      8000000000,
      0,
      1,
      6591647,
      94851,
      17507654
    ],
    [
      5613319,
      1526318128,
      59,
      148,
      0,
      94915,
      8000000000,
      0,
      1,
      7744055,
      94915,
      17507640
    ],
    [
      5613370,
      1526319038,
      60,
      74,
      0,
      94915,
      8000000000,
      0,
      1,
      2424736,
      94915,
      17507589
    ],
    [
      5613641,
      1526323083,
      61,
      125,
      0,
      94979,
      7000000000,
      0,
      1,
      5376272,
      94979,
      17507318
    ],
    [
      5613681,
      1526323779,
      62,
      93,
      0,
      94979,
      7000000000,
      0,
      1,
      7720442,
      94979,
      17507278
    ],
    [
      5613714,
      1526324183,
      63,
      108,
      0,
      94915,
      7000000000,
      0,
      1,
      7912719,
      94915,
      17507245
    ],
    [
      5613734,
      1526324539,
      64,
      106,
      0,
      94979,
      7000000000,
      0,
      1,
      6552634,
      94979,
      17507225
    ],
    [
      5613738,
      1526324584,
      65,
      105,
      0,
      94979,
      7000000000,
      0,
      1,
      7981909,
      94979,
      17507221
    ],
    [
      5613748,
      1526324720,
      66,
      131,
      0,
      94851,
      7000000000,
      0,
      1,
      6588655,
      94851,
      17507211
    ],
    [
      5613769,
      1526325163,
      67,
      142,
      0,
      94915,
      7000000000,
      0,
      1,
      7991437,
      94915,
      17507190
    ],
    [
      5613774,
      1526325227,
      68,
      35,
      0,
      94979,
      7000000000,
      0,
      1,
      4792045,
      94979,
      17507185
    ],
    [
      5613778,
      1526325285,
      69,
      158,
      0,
      94979,
      7000000000,
      0,
      1,
      7662092,
      94979,
      17507181
    ],
    [
      5613785,
      1526325368,
      70,
      275,
      0,
      94979,
      7000000000,
      0,
      1,
      7128730,
      94979,
      17507174
    ],
    [
      5613792,
      1526325507,
      71,
      131,
      0,
      94979,
      7000000000,
      0,
      1,
      6541271,
      94979,
      17507167
    ],
    [
      5613796,
      1526325567,
      72,
      66,
      0,
      94851,
      7000000000,
      0,
      1,
      5139882,
      94851,
      17507163
    ],
    [
      5613801,
      1526325623,
      73,
      218,
      0,
      94915,
      7000000000,
      0,
      1,
      7119736,
      94915,
      17507158
    ],
    [
      5613807,
      1526325766,
      74,
      140,
      0,
      94979,
      7000000000,
      0,
      1,
      7308509,
      94979,
      17507152
    ],
    [
      5613815,
      1526325920,
      75,
      89,
      0,
      94979,
      7000000000,
      0,
      1,
      6411189,
      94979,
      17507144
    ],
    [
      5613820,
      1526325966,
      76,
      50,
      0,
      94979,
      7000000000,
      0,
      1,
      6080355,
      94979,
      17507139
    ],
    [
      5613827,
      1526326128,
      77,
      57,
      0,
      94979,
      7000000000,
      0,
      1,
      4369333,
      94979,
      17507132
    ],
    [
      5614606,
      1526337762,
      78,
      137,
      0,
      94979,
      7000000000,
      0,
      1,
      6482464,
      94979,
      17506353
    ],
    [
      5614608,
      1526337778,
      79,
      121,
      0,
      94915,
      7000000000,
      0,
      1,
      7666073,
      94915,
      17506351
    ],
    [
      5614611,
      1526337849,
      80,
      50,
      0,
      94979,
      7000000000,
      0,
      1,
      2647814,
      94979,
      17506348
    ],
    [
      5614613,
      1526337900,
      81,
      125,
      0,
      94979,
      7000000000,
      0,
      1,
      5185548,
      94979,
      17506346
    ],
    [
      5614618,
      1526337993,
      82,
      62,
      0,
      94915,
      7000000000,
      0,
      1,
      2477596,
      94915,
      17506341
    ],
    [
      5615307,
      1526348501,
      83,
      69,
      0,
      94979,
      7000000000,
      0,
      1,
      3665461,
      94979,
      17505652
    ],
    [
      5615310,
      1526348525,
      84,
      90,
      0,
      94979,
      7000000000,
      0,
      1,
      6462279,
      94979,
      17505649
    ],
    [
      5615314,
      1526348615,
      85,
      123,
      0,
      94851,
      7000000000,
      0,
      1,
      4231030,
      94851,
      17505645
    ],
    [
      5615319,
      1526348706,
      86,
      102,
      0,
      94979,
      7000000000,
      0,
      1,
      4843211,
      94979,
      17505640
    ],
    [
      5615323,
      1526348749,
      87,
      55,
      0,
      94979,
      7000000000,
      0,
      1,
      6686895,
      94979,
      17505636
    ],
    [
      5615688,
      1526354393,
      88,
      20,
      0,
      36762,
      11000000000,
      0,
      1,
      757757,
      36762,
      17505271
    ],
    [
      5618704,
      1526400112,
      89,
      111,
      0,
      94979,
      9000000000,
      0,
      1,
      6290118,
      94979,
      17502255
    ],
    [
      5618709,
      1526400206,
      90,
      101,
      0,
      94979,
      9000000000,
      0,
      1,
      5408128,
      94979,
      17502250
    ],
    [
      5618714,
      1526400277,
      91,
      61,
      0,
      94915,
      9000000000,
      0,
      1,
      6805192,
      94915,
      17502245
    ],
    [
      5618738,
      1526400569,
      92,
      59,
      0,
      94979,
      9000000000,
      0,
      1,
      2908294,
      94979,
      17502221
    ],
    [
      5618746,
      1526400656,
      93,
      192,
      0,
      94979,
      9000000000,
      0,
      1,
      6596278,
      94979,
      17502213
    ],
    [
      5618752,
      1526400751,
      94,
      77,
      0,
      94979,
      9000000000,
      0,
      1,
      7944836,
      94979,
      17502207
    ],
    [
      5618759,
      1526400839,
      95,
      73,
      0,
      94979,
      9000000000,
      0,
      1,
      4254611,
      94979,
      17502200
    ],
    [
      5618767,
      1526400889,
      96,
      81,
      0,
      94979,
      9000000000,
      0,
      1,
      4200422,
      94979,
      17502192
    ],
    [
      5618772,
      1526400967,
      97,
      137,
      0,
      94979,
      9000000000,
      0,
      1,
      7439122,
      94979,
      17502187
    ],
    [
      5619776,
      1526416833,
      98,
      98,
      0,
      94979,
      7500000000,
      0,
      1,
      7330680,
      94979,
      17501183
    ],
    [
      5619898,
      1526418732,
      99,
      30,
      0,
      94979,
      10000000000,
      0,
      1,
      1415005,
      94979,
      17501061
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.18;\n\n\n// ----------------------------------------------------------------------------\n\n// 'Yiha' contract\n\n// Mineable ERC20 Token using Proof Of Work\n\n//\n\n// Symbol      : YIHA\n\n// Name        : Yiha\n\n// Total supply: 250,000,000.00\n\n// Decimals    : 8\n\n//\n\n\n// ----------------------------------------------------------------------------\n\n\n\n// ----------------------------------------------------------------------------\n\n// Safe maths\n\n// ----------------------------------------------------------------------------\n\nlibrary SafeMath {\n\n    function add(uint a, uint b) internal pure returns (uint c) {\n\n        c = a + b;\n\n        require(c >= a);\n\n    }\n\n    function sub(uint a, uint b) internal pure returns (uint c) {\n\n        require(b <= a);\n\n        c = a - b;\n\n    }\n\n    function mul(uint a, uint b) internal pure returns (uint c) {\n\n        c = a * b;\n\n        require(a == 0 || c / a == b);\n\n    }\n\n    function div(uint a, uint b) internal pure returns (uint c) {\n\n        require(b > 0);\n\n        c = a / b;\n\n    }\n\n}\n\n\n\nlibrary ExtendedMath {\n\n\n    //return the smaller of the two inputs (a or b)\n    function limitLessThan(uint a, uint b) internal pure returns (uint c) {\n\n        if(a > b) return b;\n\n        return a;\n\n    }\n}\n\n// ----------------------------------------------------------------------------\n\n// ERC Token Standard #20 Interface\n\n// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n\n// ----------------------------------------------------------------------------\n\ncontract ERC20Interface {\n\n    function totalSupply() public constant returns (uint);\n\n    function balanceOf(address tokenOwner) public constant returns (uint balance);\n\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);\n\n    function transfer(address to, uint tokens) public returns (bool success);\n\n    function approve(address spender, uint tokens) public returns (bool success);\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success);\n\n\n    event Transfer(address indexed from, address indexed to, uint tokens);\n\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n\n}\n\n\n\n// ----------------------------------------------------------------------------\n\n// Contract function to receive approval and execute function in one call\n\n//\n\n// Borrowed from MiniMeToken\n\n// ----------------------------------------------------------------------------\n\ncontract ApproveAndCallFallBack {\n\n    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;\n\n}\n\n\n\n// ----------------------------------------------------------------------------\n\n// Owned contract\n\n// ----------------------------------------------------------------------------\n\ncontract Owned {\n\n    address public owner;\n\n    address public newOwner;\n\n\n    event OwnershipTransferred(address indexed _from, address indexed _to);\n\n\n    function Owned() public {\n\n        owner = msg.sender;\n\n    }\n\n\n    modifier onlyOwner {\n\n        require(msg.sender == owner);\n\n        _;\n\n    }\n\n\n    function transferOwnership(address _newOwner) public onlyOwner {\n\n        newOwner = _newOwner;\n\n    }\n\n    function acceptOwnership() public {\n\n        require(msg.sender == newOwner);\n\n        OwnershipTransferred(owner, newOwner);\n\n        owner = newOwner;\n\n        newOwner = address(0);\n\n    }\n\n}\n\n\n\n// ----------------------------------------------------------------------------\n\n// ERC20 Token, with the addition of symbol, name and decimals and an\n\n// initial fixed supply\n\n// ----------------------------------------------------------------------------\n\ncontract Yiha is ERC20Interface, Owned {\n\n    using SafeMath for uint;\n    using ExtendedMath for uint;\n\n\n    string public symbol;\n\n    string public  name;\n\n    uint8 public decimals;\n\n    uint public _totalSupply;\n\n\n\n     uint public latestDifficultyPeriodStarted;\n\n\n\n    uint public epochCount;//number of 'blocks' mined\n\n\n    uint public _BLOCKS_PER_READJUSTMENT = 1024;\n\n\n    //a little number\n    uint public  _MINIMUM_TARGET = 2**16;\n\n\n      //a big number is easier ; just find a solution that is smaller\n    //uint public  _MAXIMUM_TARGET = 2**224;  bitcoin uses 224\n    uint public  _MAXIMUM_TARGET = 2**234;\n\n\n    uint public miningTarget;\n\n    bytes32 public challengeNumber;   //generate a new one when a new reward is minted\n\n\n\n    uint public rewardEra;\n    uint public maxSupplyForEra;\n\n\n    address public lastRewardTo;\n    uint public lastRewardAmount;\n    uint public lastRewardEthBlockNumber;\n\n    bool locked = false;\n\n    mapping(bytes32 => bytes32) solutionForChallenge;\n\n    uint public tokensMinted;\n\n    mapping(address => uint) balances;\n\n\n    mapping(address => mapping(address => uint)) allowed;\n\n\n    event Mint(address indexed from, uint reward_amount, uint epochCount, bytes32 newChallengeNumber);\n\n    // ------------------------------------------------------------------------\n\n    // Constructor\n\n    // ------------------------------------------------------------------------\n\n    function Yiha() public onlyOwner{\n\n\n\n        symbol = \"YIHA\";\n\n        name = \"Yiha\";\n\n        decimals = 8;\n\n        _totalSupply = 250000000 * 10**uint(decimals);\n\n        if(locked) revert();\n        locked = true;\n\n        tokensMinted = 0;\n\n        rewardEra = 0;\n        maxSupplyForEra = _totalSupply.div(2);\n\n        miningTarget = _MAXIMUM_TARGET;\n\n        latestDifficultyPeriodStarted = block.number;\n\n        _startNewMiningEpoch();\n\n\n        //The owner gets nothing! You must mine this ERC20 token\n        //balances[owner] = _totalSupply;\n        //Transfer(address(0), owner, _totalSupply);\n\n    }\n\n\n\n\n        function mint(uint256 nonce, bytes32 challenge_digest) public returns (bool success) {\n\n\n            //the PoW must contain work that includes a recent ethereum block hash (challenge number) and the msg.sender's address to prevent MITM attacks\n            bytes32 digest =  keccak256(challengeNumber, msg.sender, nonce );\n\n            //the challenge digest must match the expected\n            if (digest != challenge_digest) revert();\n\n            //the digest must be smaller than the target\n            if(uint256(digest) > miningTarget) revert();\n\n\n            //only allow one reward for each challenge\n             bytes32 solution = solutionForChallenge[challengeNumber];\n             solutionForChallenge[challengeNumber] = digest;\n             if(solution != 0x0) revert();  //prevent the same answer from awarding twice\n\n\n            uint reward_amount = getMiningReward();\n\n            balances[msg.sender] = balances[msg.sender].add(reward_amount);\n\n            tokensMinted = tokensMinted.add(reward_amount);\n\n\n            //Cannot mint more tokens than there are\n            assert(tokensMinted <= maxSupplyForEra);\n\n            //set readonly diagnostics data\n            lastRewardTo = msg.sender;\n            lastRewardAmount = reward_amount;\n            lastRewardEthBlockNumber = block.number;\n\n\n             _startNewMiningEpoch();\n\n              Mint(msg.sender, reward_amount, epochCount, challengeNumber );\n\n           return true;\n\n        }\n\n\n    //a new 'block' to be mined\n    function _startNewMiningEpoch() internal {\n\n      //if max supply for the era will be exceeded next reward round then enter the new era before that happens\n\n      //40 is the final reward era, almost all tokens minted\n      //once the final era is reached, more tokens will not be given out because the assert function\n      if( tokensMinted.add(getMiningReward()) > maxSupplyForEra && rewardEra < 39)\n      {\n        rewardEra = rewardEra + 1;\n      }\n\n      //set the next minted supply at which the era will change\n      // total supply is 25000000000000000  because of 8 decimal places\n      maxSupplyForEra = _totalSupply - _totalSupply.div( 2**(rewardEra + 1));\n\n      epochCount = epochCount.add(1);\n\n      //every so often, readjust difficulty. Dont readjust when deploying\n      if(epochCount % _BLOCKS_PER_READJUSTMENT == 0)\n      {\n        _reAdjustDifficulty();\n      }\n\n\n      //make the latest ethereum block hash a part of the next challenge for PoW to prevent pre-mining future blocks\n      //do this last since this is a protection mechanism in the mint() function\n      challengeNumber = block.blockhash(block.number - 1);\n\n\n\n\n\n\n    }\n\n\n\n\n    //https://en.bitcoin.it/wiki/Difficulty#What_is_the_formula_for_difficulty.3F\n    //as of 2017 the bitcoin difficulty was up to 17 zeroes, it was only 8 in the early days\n\n    //readjust the target by 5 percent\n    function _reAdjustDifficulty() internal {\n\n\n        uint ethBlocksSinceLastDifficultyPeriod = block.number - latestDifficultyPeriodStarted;\n        //assume 360 ethereum blocks per hour\n\n        //we want miners to spend 10 minutes to mine each 'block', about 60 ethereum blocks = one yiha epoch\n        uint epochsMined = _BLOCKS_PER_READJUSTMENT; //256\n\n        uint targetEthBlocksPerDiffPeriod = epochsMined * 60; //should be 60 times slower than ethereum\n\n        //if there were less eth blocks passed in time than expected\n        if( ethBlocksSinceLastDifficultyPeriod < targetEthBlocksPerDiffPeriod )\n        {\n          uint excess_block_pct = (targetEthBlocksPerDiffPeriod.mul(100)).div( ethBlocksSinceLastDifficultyPeriod );\n\n          uint excess_block_pct_extra = excess_block_pct.sub(100).limitLessThan(1000);\n          // If there were 5% more blocks mined than expected then this is 5.  If there were 100% more blocks mined than expected then this is 100.\n\n          //make it harder\n          miningTarget = miningTarget.sub(miningTarget.div(2000).mul(excess_block_pct_extra));   //by up to 50 %\n        }else{\n          uint shortage_block_pct = (ethBlocksSinceLastDifficultyPeriod.mul(100)).div( targetEthBlocksPerDiffPeriod );\n\n          uint shortage_block_pct_extra = shortage_block_pct.sub(100).limitLessThan(1000); //always between 0 and 1000\n\n          //make it easier\n          miningTarget = miningTarget.add(miningTarget.div(2000).mul(shortage_block_pct_extra));   //by up to 50 %\n        }\n\n\n\n        latestDifficultyPeriodStarted = block.number;\n\n        if(miningTarget < _MINIMUM_TARGET) //very difficult\n        {\n          miningTarget = _MINIMUM_TARGET;\n        }\n\n        if(miningTarget > _MAXIMUM_TARGET) //very easy\n        {\n          miningTarget = _MAXIMUM_TARGET;\n        }\n    }\n\n\n    //this is a recent ethereum block hash, used to prevent pre-mining future blocks\n    function getChallengeNumber() public constant returns (bytes32) {\n        return challengeNumber;\n    }\n\n    //the number of zeroes the digest of the PoW solution requires.  Auto adjusts\n     function getMiningDifficulty() public constant returns (uint) {\n        return _MAXIMUM_TARGET.div(miningTarget);\n    }\n\n    function getMiningTarget() public constant returns (uint) {\n       return miningTarget;\n   }\n\n\n\n    //21m coins total\n    //reward begins at 50 and is cut in half every reward era (as tokens are mined)\n    function getMiningReward() public constant returns (uint) {\n        //once we get half way thru the coins, only get 25 per block\n\n         //every reward era, the reward amount halves.\n\n         return (50 * 10**uint(decimals) ).div( 2**rewardEra ) ;\n\n    }\n\n    //help debug mining software\n    function getMintDigest(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number) public view returns (bytes32 digesttest) {\n\n        bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n\n        return digest;\n\n      }\n\n        //help debug mining software\n      function checkMintSolution(uint256 nonce, bytes32 challenge_digest, bytes32 challenge_number, uint testTarget) public view returns (bool success) {\n\n          bytes32 digest = keccak256(challenge_number,msg.sender,nonce);\n\n          if(uint256(digest) > testTarget) revert();\n\n          return (digest == challenge_digest);\n\n        }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Total supply\n\n    // ------------------------------------------------------------------------\n\n    function totalSupply() public constant returns (uint) {\n\n        return _totalSupply  - balances[address(0)];\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Get the token balance for account `tokenOwner`\n\n    // ------------------------------------------------------------------------\n\n    function balanceOf(address tokenOwner) public constant returns (uint balance) {\n\n        return balances[tokenOwner];\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Transfer the balance from token owner's account to `to` account\n\n    // - Owner's account must have sufficient balance to transfer\n\n    // - 0 value transfers are allowed\n\n    // ------------------------------------------------------------------------\n\n    function transfer(address to, uint tokens) public returns (bool success) {\n\n        balances[msg.sender] = balances[msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        Transfer(msg.sender, to, tokens);\n\n        return true;\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n\n    // from the token owner's account\n\n    //\n\n    // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\n\n    // recommends that there are no checks for the approval double-spend attack\n\n    // as this should be implemented in user interfaces\n\n    // ------------------------------------------------------------------------\n\n    function approve(address spender, uint tokens) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        Approval(msg.sender, spender, tokens);\n\n        return true;\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Transfer `tokens` from the `from` account to the `to` account\n\n    //\n\n    // The calling account must already have sufficient tokens approve(...)-d\n\n    // for spending from the `from` account and\n\n    // - From account must have sufficient balance to transfer\n\n    // - Spender must have sufficient allowance to transfer\n\n    // - 0 value transfers are allowed\n\n    // ------------------------------------------------------------------------\n\n    function transferFrom(address from, address to, uint tokens) public returns (bool success) {\n\n        balances[from] = balances[from].sub(tokens);\n\n        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);\n\n        balances[to] = balances[to].add(tokens);\n\n        Transfer(from, to, tokens);\n\n        return true;\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Returns the amount of tokens approved by the owner that can be\n\n    // transferred to the spender's account\n\n    // ------------------------------------------------------------------------\n\n    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {\n\n        return allowed[tokenOwner][spender];\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Token owner can approve for `spender` to transferFrom(...) `tokens`\n\n    // from the token owner's account. The `spender` contract function\n\n    // `receiveApproval(...)` is then executed\n\n    // ------------------------------------------------------------------------\n\n    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {\n\n        allowed[msg.sender][spender] = tokens;\n\n        Approval(msg.sender, spender, tokens);\n\n        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);\n\n        return true;\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Don't accept ETH\n\n    // ------------------------------------------------------------------------\n\n    function () public payable {\n\n        revert();\n\n    }\n\n\n\n    // ------------------------------------------------------------------------\n\n    // Owner can transfer out any accidentally sent ERC20 tokens\n\n    // ------------------------------------------------------------------------\n\n    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {\n\n        return ERC20Interface(tokenAddress).transfer(owner, tokens);\n\n    }\n\n}"
}