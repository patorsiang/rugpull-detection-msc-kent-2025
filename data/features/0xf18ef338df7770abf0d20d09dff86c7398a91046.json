{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 CALLER CALLVALUE PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH8 DUP5 LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP4 DUP6 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP PUSH1 SLOAD PUSH2 PUSH2 JUMP JUMPDEST LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 PUSH2 JUMP JUMPDEST LT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 DUP5 DUP4 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 ADD SWAP2 POP JUMPDEST DUP2 PUSH1 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 SLOAD SUB PUSH1 DUP2 SWAP1 SSTORE POP DUP4 PUSH1 SLOAD ADD PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 CALLVALUE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP3 EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 PUSH9 DUP9 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP4 POP PUSH1 DUP5 GT ISZERO PUSH2 JUMPI PUSH1 SWAP4 POP JUMPDEST PUSH2 DUP5 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP7 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH2 DUP3 PUSH1 PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP PUSH2 DUP4 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 DUP3 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 PUSH1 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD DUP3 LT ISZERO PUSH2 JUMPI PUSH1 SWAP1 POP PUSH2 JUMP JUMPDEST DUP2 PUSH1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD DUP3 GT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 SWAP1 POP PUSH2 JUMP JUMPDEST DUP2 PUSH1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD DUP3 GT JUMPDEST ISZERO PUSH2 JUMPI PUSH2 SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD PUSH2 PUSH2 JUMP JUMPDEST LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 PUSH2 JUMP JUMPDEST LT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD GT JUMPDEST DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 PUSH2 JUMP JUMPDEST LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 PUSH2 JUMP JUMPDEST LT JUMPDEST DUP1 ISZERO PUSH2 JUMPI POP PUSH1 PUSH1 SLOAD GT JUMPDEST JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP3 DUP5 LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP7 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP6 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP4 PUSH1 DUP2 SWAP1 SSTORE POP DUP3 PUSH1 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 DUP2 SWAP1 SSTORE POP DUP6 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP5 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP DUP1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH1 SLOAD PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 PUSH1 SLOAD DUP3 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 DUP2 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 EQ ISZERO PUSH2 JUMPI DUP2 PUSH1 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH1 DUP4 EQ ISZERO PUSH2 JUMPI PUSH1 SLOAD DUP3 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 DUP2 SWAP1 SSTORE POP DUP1 PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 SLOAD SUB PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 DUP4 PUSH2 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 PUSH1 PUSH1 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SWAP1 POP DUP2 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 PUSH1 PUSH1 PUSH1 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 PUSH1 PUSH1 PUSH1 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMPDEST DUP2 PUSH1 PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH1 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 TIMESTAMP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 MUL SWAP1 POP PUSH1 DUP5 EQ DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 EXP SWAP16 PUSH2 DUP2 UNKNOWN_0x49 UNKNOWN_0xed LOG4 PUSH23 UNKNOWN_0x29",
  "opcode_entropy": 4.64598427796098,
  "opcode_count": 3941,
  "unique_opcodes": 63,
  "byte_entropy": 4.438298295788905,
  "byte_60": 0.0661327508797476,
  "byte_80": 0.031064191238927313,
  "byte_40": 0.006431258342434171,
  "byte_52": 0.014682684140274238,
  "byte_04": 0.007402014318650649,
  "byte_36": 0.0016988229583788375,
  "byte_10": 0.0031549569227035555,
  "byte_61": 0.033248392185414394,
  "byte_01": 0.029729401771629655,
  "byte_6a": 0.00024268899405411964,
  "byte_57": 0.01334789467297658,
  "byte_00": 0.039436961533794446,
  "byte_35": 0.003518990413784735,
  "byte_7c": 0.00036403349108117945,
  "byte_90": 0.04162116248028152,
  "byte_63": 0.005945880354325931,
  "byte_ff": 0.35942240019415117,
  "byte_16": 0.021963353961897827,
  "byte_07": 0.002184200946487077,
  "byte_8f": 0.00024268899405411964,
  "byte_d9": 0.00012134449702705982,
  "byte_ea": 0.00048537798810823927,
  "byte_14": 0.006067224851352991,
  "byte_76": 0.00024268899405411964,
  "byte_09": 0.004247057395947094,
  "byte_5e": 0.00024268899405411964,
  "byte_a7": 0.00024268899405411964,
  "byte_b3": 0.0018201674554058974,
  "byte_a1": 0.00048537798810823927,
  "byte_13": 0.0009707559762164785,
  "byte_7b": 0.00036403349108117945,
  "byte_3b": 0.00048537798810823927,
  "byte_cd": 0.00024268899405411964,
  "byte_02": 0.0030336124256764956,
  "byte_06": 0.002062856449460017,
  "byte_18": 0.0007280669821623589,
  "byte_0d": 0.001334789467297658,
  "byte_dd": 0.00048537798810823927,
  "byte_51": 0.00715932532459653,
  "byte_23": 0.00012134449702705982,
  "byte_b8": 0.00012134449702705982,
  "byte_72": 0.00036403349108117945,
  "byte_2e": 0.00036403349108117945,
  "byte_0f": 0.0008494114791894187,
  "byte_26": 0.00012134449702705982,
  "byte_25": 0.00024268899405411964,
  "byte_03": 0.008858148282975367,
  "byte_39": 0.00024268899405411964,
  "byte_c4": 0.00048537798810823927,
  "byte_c9": 0.00024268899405411964,
  "byte_32": 0.00036403349108117945,
  "byte_42": 0.0006067224851352991,
  "byte_b6": 0.00012134449702705982,
  "byte_6f": 0.00036403349108117945,
  "byte_5d": 0.00024268899405411964,
  "byte_43": 0.00024268899405411964,
  "byte_e9": 0.00012134449702705982,
  "byte_c1": 0.0006067224851352991,
  "byte_88": 0.0014561339643247178,
  "byte_4b": 0.00012134449702705982,
  "byte_b2": 0.00024268899405411964,
  "byte_78": 0.0012134449702705982,
  "byte_f3": 0.002790923431622376,
  "byte_66": 0.00036403349108117945,
  "byte_4a": 0.00012134449702705982,
  "byte_1a": 0.0007280669821623589,
  "byte_d6": 0.0006067224851352991,
  "byte_ca": 0.00024268899405411964,
  "byte_68": 0.0006067224851352991,
  "byte_3a": 0.00012134449702705982,
  "byte_4c": 0.00024268899405411964,
  "byte_21": 0.00036403349108117945,
  "byte_8a": 0.00024268899405411964,
  "byte_1b": 0.0009707559762164785,
  "byte_62": 0.00048537798810823927,
  "byte_70": 0.00012134449702705982,
  "byte_a0": 0.00012134449702705982,
  "byte_82": 0.006552602839461231,
  "byte_31": 0.00024268899405411964,
  "byte_91": 0.01322655017594952,
  "byte_86": 0.0007280669821623589,
  "byte_48": 0.00012134449702705982,
  "byte_9b": 0.00024268899405411964,
  "byte_a9": 0.00048537798810823927,
  "byte_e8": 0.00012134449702705982,
  "byte_8d": 0.00036403349108117945,
  "byte_a5": 0.00012134449702705982,
  "byte_cb": 0.00024268899405411964,
  "byte_5b": 0.0259677223637908,
  "byte_05": 0.0016988229583788375,
  "byte_73": 0.017594952068923673,
  "byte_dc": 0.00012134449702705982,
  "byte_b7": 0.00012134449702705982,
  "byte_a3": 0.00012134449702705982,
  "byte_f4": 0.00048537798810823927,
  "byte_df": 0.00024268899405411964,
  "byte_7e": 0.00036403349108117945,
  "byte_0b": 0.0006067224851352991,
  "byte_9c": 0.00036403349108117945,
  "byte_bb": 0.00012134449702705982,
  "byte_b4": 0.00036403349108117945,
  "byte_56": 0.013105205678922462,
  "byte_fc": 0.00036403349108117945,
  "byte_bf": 0.00024268899405411964,
  "byte_f9": 0.00012134449702705982,
  "byte_6c": 0.00024268899405411964,
  "byte_2b": 0.00012134449702705982,
  "byte_c5": 0.00012134449702705982,
  "byte_ba": 0.00012134449702705982,
  "byte_cf": 0.00012134449702705982,
  "byte_d3": 0.00036403349108117945,
  "byte_7a": 0.00036403349108117945,
  "byte_fa": 0.00048537798810823927,
  "byte_ed": 0.00024268899405411964,
  "byte_3e": 0.00036403349108117945,
  "byte_08": 0.0030336124256764956,
  "byte_27": 0.00024268899405411964,
  "byte_eb": 0.00012134449702705982,
  "byte_89": 0.00024268899405411964,
  "byte_9e": 0.00024268899405411964,
  "byte_f2": 0.00012134449702705982,
  "byte_fd": 0.006431258342434171,
  "byte_e3": 0.00012134449702705982,
  "byte_8b": 0.0006067224851352991,
  "byte_f7": 0.00024268899405411964,
  "byte_0c": 0.0008494114791894187,
  "byte_74": 0.00012134449702705982,
  "byte_33": 0.0016988229583788375,
  "byte_34": 0.003883023904865914,
  "byte_15": 0.016624196092707197,
  "byte_50": 0.031428224730008496,
  "byte_2f": 0.00024268899405411964,
  "byte_81": 0.02633175585487198,
  "byte_20": 0.023419487926222546,
  "byte_ad": 0.00012134449702705982,
  "byte_ec": 0.00012134449702705982,
  "byte_92": 0.004732435384055333,
  "byte_12": 0.002790923431622376,
  "byte_be": 0.00012134449702705982,
  "byte_e7": 0.00012134449702705982,
  "byte_47": 0.00012134449702705982,
  "byte_69": 0.00024268899405411964,
  "byte_94": 0.00024268899405411964,
  "byte_9d": 0.00036403349108117945,
  "byte_c8": 0.00012134449702705982,
  "byte_11": 0.002062856449460017,
  "byte_d4": 0.00024268899405411964,
  "byte_2d": 0.00024268899405411964,
  "byte_6e": 0.00024268899405411964,
  "byte_77": 0.00036403349108117945,
  "byte_d2": 0.00012134449702705982,
  "byte_c7": 0.00036403349108117945,
  "byte_71": 0.00012134449702705982,
  "byte_7f": 0.00036403349108117945,
  "byte_da": 0.00012134449702705982,
  "byte_17": 0.0008494114791894187,
  "byte_8e": 0.00036403349108117945,
  "byte_83": 0.0036403349108117948,
  "byte_84": 0.001941511952432957,
  "byte_45": 0.00012134449702705982,
  "byte_1f": 0.004853779881082393,
  "byte_0a": 0.005096468875136513,
  "byte_19": 0.0010921004732435385,
  "byte_e6": 0.00012134449702705982,
  "byte_37": 0.00036403349108117945,
  "byte_29": 0.00036403349108117945,
  "byte_db": 0.00036403349108117945,
  "byte_e4": 0.00024268899405411964,
  "byte_1d": 0.00036403349108117945,
  "byte_aa": 0.00012134449702705982,
  "byte_1e": 0.00036403349108117945,
  "byte_d5": 0.00012134449702705982,
  "byte_3f": 0.00012134449702705982,
  "byte_46": 0.00012134449702705982,
  "byte_67": 0.00012134449702705982,
  "byte_f0": 0.00024268899405411964,
  "byte_59": 0.00012134449702705982,
  "byte_85": 0.0010921004732435385,
  "byte_54": 0.009343526271083607,
  "byte_2a": 0.00024268899405411964,
  "byte_22": 0.00012134449702705982,
  "byte_af": 0.00024268899405411964,
  "byte_55": 0.004004368401892974,
  "byte_cc": 0.0012134449702705982,
  "byte_87": 0.00048537798810823927,
  "byte_f1": 0.00012134449702705982,
  "byte_93": 0.0006067224851352991,
  "byte_3d": 0.00036403349108117945,
  "byte_e2": 0.00012134449702705982,
  "byte_ef": 0.00012134449702705982,
  "byte_96": 0.00024268899405411964,
  "byte_a2": 0.00012134449702705982,
  "byte_64": 0.00012134449702705982,
  "byte_0e": 0.00012134449702705982,
  "byte_98": 0.00012134449702705982,
  "byte_9f": 0.00024268899405411964,
  "byte_b1": 0.0010921004732435385,
  "byte_30": 0.00024268899405411964,
  "byte_8c": 0.00012134449702705982,
  "byte_c2": 0.00012134449702705982,
  "byte_44": 0.00012134449702705982,
  "byte_79": 0.00024268899405411964,
  "byte_4d": 0.00024268899405411964,
  "byte_b0": 0.00012134449702705982,
  "byte_1c": 0.00048537798810823927,
  "byte_3c": 0.00024268899405411964,
  "byte_fe": 0.0006067224851352991,
  "byte_e0": 0.00012134449702705982,
  "byte_f8": 0.00012134449702705982,
  "byte_65": 0.00012134449702705982,
  "byte_58": 0.00012134449702705982,
  "byte_6d": 0.00012134449702705982,
  "byte_49": 0.00012134449702705982,
  "byte_a4": 0.00012134449702705982,
  "byte_b5": 0.00024268899405411964,
  "byte_b9": 0.00012134449702705982,
  "byte_4f": 0.00012134449702705982,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 10,
  "event_nums": 0,
  "creation_block": 6079392,
  "creation_timestamp": 1533279065,
  "life_time": 17907.0,
  "duration_seconds": 260207.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.0005584096493187402,
  "avg_gas_limit": 365858.9,
  "std_gas_limit": 644344.1436535992,
  "avg_gas_used": 278765.5,
  "std_gas_used": 664881.485718658,
  "avg_gas_price": 6261000000.0,
  "std_gas_price": 3749171775.2058253,
  "atinversebrah_num": 1,
  "initialize_num": 1,
  "sendforpreico_num": 1,
  "transfer_num": 6,
  "setperiod_num": 1,
  "timeline_sequence": [
    [
      6079392,
      1533279065,
      2,
      67,
      0,
      2268867,
      2210000000,
      0,
      1,
      7532941,
      2268867,
      17041568
    ],
    [
      6079415,
      1533279406,
      3,
      65,
      0,
      189340,
      2200000000,
      0,
      1,
      3369420,
      189340,
      17041545
    ],
    [
      6079513,
      1533281028,
      4,
      98,
      0,
      56275,
      2200000000,
      0,
      1,
      7922382,
      56275,
      17041447
    ],
    [
      6079689,
      1533283733,
      6,
      155,
      0,
      34963,
      3000000000,
      1,
      0,
      6854114,
      34963,
      17041271
    ],
    [
      6079881,
      1533286440,
      7,
      46,
      0,
      349630,
      10000000000,
      0,
      1,
      1644992,
      34963,
      17041079
    ],
    [
      6079881,
      1533286440,
      8,
      110,
      0,
      349630,
      3000000000,
      0,
      1,
      4592657,
      34963,
      17041079
    ],
    [
      6079881,
      1533286440,
      9,
      111,
      0,
      210000,
      10000000000,
      0,
      1,
      4627684,
      35027,
      17041079
    ],
    [
      6097080,
      1533536243,
      10,
      106,
      0,
      49804,
      10000000000,
      0,
      1,
      4151433,
      33203,
      17023880
    ],
    [
      6097093,
      1533536485,
      11,
      35,
      0,
      75040,
      10000000000,
      0,
      1,
      2036231,
      50027,
      17023867
    ],
    [
      6097299,
      1533539272,
      12,
      14,
      0,
      75040,
      10000000000,
      0,
      1,
      720997,
      50027,
      17023661
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.21;\n\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n*/\nlibrary SafeMath {\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a * b;\n        assert(a == 0 || c / a == b);\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        // assert(b > 0); // Solidity automatically throws when dividing by 0\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        assert(b <= a);\n        return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        assert(c >= a);\n        return c;\n    }\n}\n\n\n/**\n* @title Ownable\n* @dev The Ownable contract has an owner address, and provides basic authorization control \n* functions, this simplifies the implementation of \"user permissions\". \n*/ \ncontract Ownable {\n    address public owner;\n\n/** \n* @dev The Ownable constructor sets the original `owner` of the contract to the sender\n* account.\n*/\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    /**\n    * @dev Throws if called by any account other than the owner.\n    */\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    /**\n    * @dev Allows the current owner to transfer control of the contract to a newOwner.\n    * @param newOwner The address to transfer ownership to.\n    */\n    function transferOwnership(address newOwner) public onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\n\n/**\n * @title ERC20Basic\n    * @dev Simpler version of ERC20 interface\n       * @dev see https://github.com/ethereum/EIPs/issues/179\n          */\ncontract ERC20Basic {\n    uint256 public totalSupply;\n    function balanceOf(address who) public constant returns  (uint256);\n    function transfer(address to, uint256 value) public returns (bool);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n    using SafeMath for uint256;\n    mapping(address => uint256) balances;\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n    function transfer(address _to, uint256 _value) public returns (bool) {\n        balances[msg.sender] = balances[msg.sender].sub(_value);\n        balances[_to] = balances[_to].add(_value);\n        return true;\n    }\n\n  /**\n  * @dev Gets the balance of the specified address.\n      * @param _owner The address to query the the balance of.\n          * @return An uint256 representing the amount owned by the passed address.\n              */\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\n        return balances[_owner];\n    }\n}\n\n\n/**\n * @title ERC20 interface\n    * @dev see https://github.com/ethereum/EIPs/issues/20\n       */\ncontract ERC20 is ERC20Basic {\n    function allowance(address owner, address spender) public constant returns (uint256);\n    function transferFrom(address from, address to, uint256 value) public returns (bool);\n    function approve(address spender, uint256 value) public returns (bool);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n\n/**\n * @title Standard ERC20 token\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n */\ncontract StandardToken is ERC20, BasicToken {\n    mapping (address => mapping (address => uint256)) allowed;\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n        uint256 _allowance = allowed[_from][msg.sender];\n\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // require (_value <= _allowance);\n\n        balances[_to] = balances[_to].add(_value);\n        balances[_from] = balances[_from].sub(_value);\n        allowed[_from][msg.sender] = _allowance.sub(_value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool) {\n        // To change the approve amount you first have to reduce the addresses`\n        //  allowance to zero by calling `approve(_spender, 0)` if it is not\n        //  already 0 to mitigate the race condition described here:\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n        require((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifing the amount of tokens still avaible for the spender.\n   */\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n\n\n/*Token  Contract*/\ncontract BBBToken is StandardToken, Ownable {\n    using SafeMath for uint256;\n\n    // Token \u8cc7\u8a0a\n    string  public constant NAME = \"M724 Coin\";\n    string  public constant SYMBOL = \"M724\";\n    uint8   public constant DECIMALS = 18;\n\n    // Sale period1.\n    uint256 public startDate1;\n    uint256 public endDate1;\n\n    // Sale period2.\n    uint256 public startDate2;\n    uint256 public endDate2;\n\n     //\u76ee\u524d\u92b7\u552e\u984d\n    uint256 public saleCap;\n\n    // Address Where Token are keep\n    address public tokenWallet;\n\n    // Address where funds are collected.\n    address public fundWallet;\n\n    // Amount of raised money in wei.\n    uint256 public weiRaised;\n\n    // Event\n    event TokenPurchase(address indexed purchaser, uint256 value, uint256 amount);\n\n    // Modifiers\n    modifier uninitialized() {\n        require(tokenWallet == 0x0);\n        require(fundWallet == 0x0);\n        _;\n    }\n\n    constructor() public {}\n    // Trigger with Transfer event\n    // Fallback function can be used to buy tokens\n    function () public payable {\n        buyTokens(msg.sender, msg.value);\n    }\n\n    function getDate() public view returns(uint256 _date) {\n        _date = getCurrentTimestamp();\n    }\n\n    //\u521d\u59cb\u5316\u5408\u7d04\n    function initialize(address _tokenWallet, address _fundWallet, uint256 _start1, uint256 _end1,\n                        uint256 _saleCap, uint256 _totalSupply) public\n                        onlyOwner uninitialized {\n        //require(_start >= getCurrentTimestamp());\n        require(_start1 < _end1);\n        require(_tokenWallet != 0x0);\n        require(_fundWallet != 0x0);\n        require(_totalSupply >= _saleCap);\n\n        startDate1 = _start1;\n        endDate1 = _end1;\n        saleCap = _saleCap;\n        tokenWallet = _tokenWallet;\n        fundWallet = _fundWallet;\n        totalSupply = _totalSupply;\n\n        balances[tokenWallet] = saleCap;\n        balances[0xb1] = _totalSupply.sub(saleCap);\n    }\n\n    //\u8a2d\u5b9a\u92b7\u552e\u671f\u9593\n    function setPeriod(uint period, uint256 _start, uint256 _end) public onlyOwner {\n        require(_end > _start);\n        if (period == 1) {\n            startDate1 = _start;\n            endDate1 = _end;\n        }else if (period == 2) {\n            require(_start > endDate1);\n            startDate2 = _start;\n            endDate2 = _end;      \n        }\n    }\n\n    // For pushing pre-ICO records\n    function sendForPreICO(address buyer, uint256 amount) public onlyOwner {\n        require(saleCap >= amount);\n\n        saleCap = saleCap - amount;\n        // Transfer\n        balances[tokenWallet] = balances[tokenWallet].sub(amount);\n        balances[buyer] = balances[buyer].add(amount);\n    }\n\n        //Set SaleCap\n    function setSaleCap(uint256 _saleCap) public onlyOwner {\n        require(balances[0xb1].add(balances[tokenWallet]).sub(_saleCap) > 0);\n        uint256 amount=0;\n        //\u76ee\u524d\u92b7\u552e\u984d \u5927\u65bc \u65b0\u92b7\u552e\u984d\n        if (balances[tokenWallet] > _saleCap) {\n            amount = balances[tokenWallet].sub(_saleCap);\n            balances[0xb1] = balances[0xb1].add(amount);\n        } else {\n            amount = _saleCap.sub(balances[tokenWallet]);\n            balances[0xb1] = balances[0xb1].sub(amount);\n        }\n        balances[tokenWallet] = _saleCap;\n        saleCap = _saleCap;\n    }\n\n    //Calcute Bouns\n    function getBonusByTime(uint256 atTime) public constant returns (uint256) {\n        if (atTime < startDate1) {\n            return 0;\n        } else if (endDate1 > atTime && atTime > startDate1) {\n            return 5000;\n        } else if (endDate2 > atTime && atTime > startDate2) {\n            return 2500;\n        } else {\n            return 0;\n        }\n    }\n\n    function getBounsByAmount(uint256 etherAmount, uint256 tokenAmount) public pure returns (uint256) {\n        //\u6700\u9ad840%\n        uint256 bonusRatio = etherAmount.div(500 ether);\n        if (bonusRatio > 4) {\n            bonusRatio = 4;\n        }\n        uint256 bonusCount = SafeMath.mul(bonusRatio, 10);\n        uint256 bouns = SafeMath.mul(tokenAmount, bonusCount);\n        uint256 realBouns = SafeMath.div(bouns, 100);\n        return realBouns;\n    }\n\n    //\u7d42\u6b62\u5408\u7d04\n    function finalize() public onlyOwner {\n        require(!saleActive());\n\n        // Transfer the rest of token to tokenWallet\n        balances[tokenWallet] = balances[tokenWallet].add(balances[0xb1]);\n        balances[0xb1] = 0;\n    }\n    \n    //\u78ba\u8a8d\u662f\u5426\u6b63\u5e38\u92b7\u552e\n    function saleActive() public constant returns (bool) {\n        return (\n            (getCurrentTimestamp() >= startDate1 &&\n                getCurrentTimestamp() < endDate1 && saleCap > 0) ||\n            (getCurrentTimestamp() >= startDate2 &&\n                getCurrentTimestamp() < endDate2 && saleCap > 0)\n                );\n    }\n   \n    //Get CurrentTS\n    function getCurrentTimestamp() internal view returns (uint256) {\n        return now;\n    }\n\n     //\u8cfc\u8cb7Token\n    function buyTokens(address sender, uint256 value) internal {\n        //Check Sale Status\n        require(saleActive());\n        \n        //Minum buying limit\n        require(value >= 0.5 ether);\n\n        // Calculate token amount to be purchased\n        uint256 bonus = getBonusByTime(getCurrentTimestamp());\n        uint256 amount = value.mul(bonus);\n        // \u7b2c\u4e00\u968e\u6bb5\u92b7\u552e\u671f\uff0c\u6bcf\u6b21\u8cfc\u8cb7\u91cf\u8d85\u904e500Ether\uff0c\u591a\u589e\u52a010%\n        if (getCurrentTimestamp() >= startDate1 && getCurrentTimestamp() < endDate1) {\n            uint256 p1Bouns = getBounsByAmount(value, amount);\n            amount = amount + p1Bouns;\n        }\n        // We have enough token to sale\n        require(saleCap >= amount);\n\n        // Transfer\n        balances[tokenWallet] = balances[tokenWallet].sub(amount);\n        balances[sender] = balances[sender].add(amount);\n\n        saleCap = saleCap - amount;\n\n        // Update state.\n        weiRaised = weiRaised + value;\n\n        // Forward the fund to fund collection wallet.\n        //tokenWallet.transfer(msg.value);\n        fundWallet.transfer(msg.value);\n    }   \n}"
}