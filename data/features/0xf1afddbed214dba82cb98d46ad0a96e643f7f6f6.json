{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 MLOAD PUSH1 DUP1 PUSH2 DUP4 CODECOPY DUP2 ADD PUSH1 MSTORE DUP1 DUP1 MLOAD SWAP2 POP POP JUMPDEST JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND OR SWAP1 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 PUSH1 PUSH1 EXP SUB NOT SWAP3 DUP4 AND OR SWAP1 SWAP3 SSTORE PUSH1 DUP1 SLOAD SWAP3 DUP5 AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST POP JUMPDEST PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP1 PUSH1 DUP1 CALLDATALOAD SWAP2 PUSH1 CALLDATALOAD SWAP2 PUSH1 CALLDATALOAD SWAP1 DUP2 ADD SWAP2 ADD CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP8 AND DUP2 MSTORE PUSH1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE DUP5 SLOAD PUSH1 PUSH1 NOT PUSH2 PUSH1 DUP5 AND ISZERO MUL ADD SWAP1 SWAP2 AND DIV SWAP2 DUP4 ADD DUP3 SWAP1 MSTORE SWAP1 PUSH1 DUP4 ADD SWAP1 DUP6 SWAP1 DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP SWAP8 POP POP POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP5 POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 SLOAD NUMBER LT ISZERO PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST POP PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST POP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH11 DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH1 AND ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 SWAP1 SHA3 PUSH1 DUP2 ADD DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE DUP4 DUP2 SSTORE PUSH1 ADD DUP3 SWAP1 SSTORE PUSH32 SWAP1 DUP5 SWAP1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 DUP2 SWAP1 DUP2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 CALLER PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD DUP1 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD NUMBER LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD ISZERO ISZERO PUSH2 JUMPI PUSH2 TIMESTAMP PUSH2 JUMP JUMPDEST JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH2 DUP10 DUP10 DUP10 DUP10 DUP10 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP DUP13 SWAP5 POP PUSH2 SWAP4 POP POP POP POP JUMP JUMPDEST SWAP2 POP PUSH32 DUP10 DUP4 DUP11 PUSH1 SLOAD DUP8 DUP12 DUP12 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP9 AND DUP2 MSTORE PUSH1 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 PUSH1 DUP3 ADD DUP2 DUP2 MSTORE SWAP1 DUP3 ADD DUP4 SWAP1 MSTORE PUSH1 DUP3 ADD DUP5 DUP5 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP SWAP9 POP POP POP POP POP POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP4 POP JUMPDEST JUMPDEST POP JUMPDEST JUMPDEST POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SLOAD DUP1 PUSH1 EQ ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH2 SWAP1 CALLVALUE SWAP1 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 DUP2 ADD DUP3 SWAP1 SSTORE SLOAD SWAP1 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP4 POP PUSH8 PUSH2 CALLVALUE PUSH1 SLOAD PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP3 POP PUSH2 CALLER DUP5 TIMESTAMP PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE DUP9 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 PUSH1 ADD SLOAD SWAP2 SWAP4 POP SWAP1 GT ISZERO PUSH2 JUMPI PUSH2 CALLER CALLVALUE PUSH2 JUMP JUMPDEST JUMPDEST PUSH32 CALLER DUP4 DUP6 PUSH1 SLOAD DUP9 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP6 AND DUP6 MSTORE PUSH1 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 DUP1 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP5 ADD MSTORE PUSH1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 SWAP1 SWAP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP5 POP JUMPDEST JUMPDEST POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 CALLER PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP3 SWAP1 SSTORE PUSH32 DUP3 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 JUMPDEST JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 DUP1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD DUP1 SLOAD PUSH1 NOT AND SWAP1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP2 SWAP1 SSTORE JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH11 DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 CALLER PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE GT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP2 POP POP PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND BALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 GT DUP1 ISZERO PUSH2 JUMPI POP TIMESTAMP DUP2 GT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD NUMBER GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH1 SLOAD PUSH32 SWAP1 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP1 DUP1 PUSH1 CALLVALUE LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD DUP1 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD NUMBER LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD ISZERO ISZERO PUSH2 JUMPI PUSH2 TIMESTAMP PUSH2 JUMP JUMPDEST JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST SWAP4 POP PUSH8 PUSH2 CALLVALUE PUSH1 SLOAD PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP3 POP PUSH2 CALLER DUP5 TIMESTAMP PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE DUP9 PUSH2 JUMP JUMPDEST SWAP2 POP PUSH32 CALLER DUP4 DUP6 PUSH1 SLOAD DUP9 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP6 AND DUP6 MSTORE PUSH1 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 DUP1 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 DUP5 ADD MSTORE PUSH1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 SWAP1 SWAP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP5 POP JUMPDEST JUMPDEST POP JUMPDEST JUMPDEST POP POP POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 JUMPDEST POP DUP1 SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 DUP4 ADD SLOAD PUSH1 DUP5 ADD SLOAD PUSH1 DUP6 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP5 AND SWAP6 POP SWAP2 SWAP4 SWAP1 SWAP3 PUSH1 SWAP1 SWAP2 ADD SWAP1 DUP7 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SLOAD GT DUP1 ISZERO PUSH2 JUMPI POP TIMESTAMP PUSH1 SLOAD GT ISZERO JUMPDEST SWAP1 POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 ADD PUSH1 JUMPDEST SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 CALLER PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP3 SWAP1 SSTORE PUSH32 DUP3 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP PUSH1 JUMPDEST JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP2 SWAP1 SSTORE PUSH1 SLOAD SWAP1 SWAP7 POP PUSH2 PUSH11 DUP9 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP2 SWAP1 DIV SWAP6 POP PUSH2 SWAP1 DUP7 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 SLOAD SWAP1 SWAP3 AND SWAP3 PUSH4 SWAP3 DUP10 SWAP2 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SLOAD GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 DUP1 SLOAD SWAP2 SWAP1 SSTORE PUSH1 SLOAD SWAP1 SWAP5 POP PUSH2 PUSH11 DUP7 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP3 POP PUSH1 SLOAD PUSH2 PUSH11 DUP7 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP2 POP PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP5 SWAP1 SWAP5 SSTORE PUSH1 SLOAD SWAP1 SWAP3 AND SWAP3 PUSH4 SWAP3 DUP6 SWAP2 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP6 AND MUL DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND PUSH1 DUP4 ADD MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD PUSH1 ADD SWAP1 SSTORE JUMPDEST PUSH1 SWAP7 POP JUMPDEST JUMPDEST POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 JUMPDEST PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH1 DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 JUMPDEST POP PUSH1 ADD SLOAD PUSH2 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH4 DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 DUP4 ADD SLOAD PUSH1 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 PUSH1 SWAP1 SWAP2 AND SWAP1 DUP5 JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP3 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP2 POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 DUP1 JUMPDEST PUSH1 SLOAD DUP2 LT ISZERO PUSH2 JUMPI PUSH2 DUP3 PUSH1 DUP4 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 JUMPDEST POP PUSH1 ADD SLOAD PUSH2 JUMP JUMPDEST SWAP2 POP JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 DUP2 SWAP1 CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 AND ISZERO PUSH2 JUMPI PUSH1 SWAP7 POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP6 POP PUSH1 SLOAD SWAP5 POP JUMPDEST DUP6 DUP6 LT DUP1 ISZERO PUSH2 JUMPI POP PUSH3 GAS GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP7 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP7 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP7 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP7 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 PUSH1 ADD DUP1 MLOAD SWAP1 POP JUMPDEST POP SWAP4 POP SWAP4 POP PUSH1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 EXP SUB DUP5 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 DUP2 ADD PUSH2 DUP4 DUP3 PUSH2 JUMP JUMPDEST SWAP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 ADD PUSH1 JUMPDEST DUP2 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP10 AND PUSH2 SWAP4 SWAP1 SWAP4 EXP SWAP3 DUP4 MUL SWAP3 MUL NOT AND OR SWAP1 SSTORE POP JUMPDEST PUSH1 PUSH2 DUP5 PUSH1 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP2 POP PUSH2 DUP4 DUP4 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP1 SWAP2 POP PUSH2 SWAP1 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE JUMPDEST PUSH2 PUSH1 SLOAD PUSH1 PUSH2 JUMP JUMPDEST PUSH1 SSTORE JUMPDEST PUSH1 SWAP1 SWAP5 ADD SWAP4 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP7 SWAP1 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP6 PUSH1 SLOAD EQ ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 NOT AND PUSH1 OR SWAP1 SSTORE JUMPDEST PUSH1 SWAP7 POP JUMPDEST JUMPDEST POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND SWAP2 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP6 AND OR SWAP1 SSTORE PUSH1 DUP3 SWAP1 SSTORE PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH2 SWAP1 PUSH4 SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH1 SWAP1 GT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP PUSH1 JUMPDEST JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD NUMBER LT ISZERO JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 DUP2 PUSH2 JUMP JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH3 DUP2 ADD PUSH1 SSTORE PUSH3 DUP2 ADD PUSH1 SSTORE PUSH3 DUP2 ADD PUSH1 SSTORE PUSH3 DUP2 ADD PUSH1 SSTORE PUSH3 DUP2 ADD PUSH1 SSTORE PUSH3 DUP2 ADD PUSH1 SSTORE PUSH3 DUP2 ADD PUSH1 SSTORE PUSH3 DUP2 ADD PUSH1 SSTORE PUSH3 DUP2 ADD PUSH1 SSTORE PUSH3 DUP2 ADD PUSH1 SSTORE PUSH3 DUP2 ADD PUSH1 SSTORE JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH1 SLOAD TIMESTAMP LT ISZERO DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP14 POP PUSH1 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP13 POP PUSH1 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP12 POP PUSH1 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP11 POP PUSH1 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP10 POP PUSH1 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP9 POP PUSH1 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP8 POP PUSH1 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP7 POP PUSH1 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP6 POP PUSH1 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP5 POP PUSH1 SLOAD TIMESTAMP GT DUP1 ISZERO PUSH2 JUMPI POP PUSH1 SLOAD TIMESTAMP GT ISZERO JUMPDEST SWAP4 POP DUP14 DUP1 PUSH2 JUMPI POP DUP9 JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SWAP15 POP PUSH2 JUMP JUMPDEST DUP13 DUP1 PUSH2 JUMPI POP DUP8 JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SWAP15 POP PUSH2 JUMP JUMPDEST DUP12 DUP1 PUSH2 JUMPI POP DUP7 JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SWAP15 POP PUSH2 JUMP JUMPDEST DUP11 DUP1 PUSH2 JUMPI POP DUP6 JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SWAP15 POP PUSH2 JUMP JUMPDEST DUP10 DUP1 PUSH2 JUMPI POP DUP5 JUMPDEST ISZERO PUSH2 JUMPI PUSH1 SWAP15 POP PUSH2 JUMP JUMPDEST DUP4 ISZERO PUSH2 JUMPI PUSH3 SWAP3 POP PUSH2 TIMESTAMP PUSH1 SLOAD PUSH2 JUMP JUMPDEST SWAP2 POP DUP3 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP PUSH2 DUP2 PUSH1 PUSH2 JUMP JUMPDEST SWAP15 POP JUMPDEST JUMPDEST POP POP POP POP POP POP POP POP POP POP POP POP POP POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP11 SWAP7 POP NUMBER LT PUSH2 JUMPI PUSH1 SLOAD PUSH2 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH2 PUSH2 PUSH2 JUMP JUMPDEST DUP8 PUSH2 JUMP JUMPDEST SWAP5 POP PUSH1 SLOAD DUP6 GT ISZERO PUSH2 JUMPI PUSH2 DUP6 PUSH1 SLOAD PUSH2 JUMP JUMPDEST SWAP4 POP PUSH1 SLOAD PUSH2 DUP6 PUSH8 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP3 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP12 AND DUP4 ISZERO PUSH2 MUL DUP5 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP7 DUP6 PUSH2 JUMP JUMPDEST SWAP6 POP DUP6 SWAP10 POP JUMPDEST JUMPDEST PUSH1 PUSH2 DUP8 DUP10 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP2 POP PUSH2 DUP7 DUP4 PUSH2 JUMP JUMPDEST SWAP6 POP PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 DUP13 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP8 DUP2 MSTORE PUSH1 ADD DUP12 DUP2 MSTORE PUSH1 ADD DUP11 DUP2 MSTORE PUSH1 ADD DUP10 DUP2 MSTORE PUSH1 ADD DUP9 DUP2 MSTORE POP SWAP1 POP PUSH1 DUP1 SLOAD DUP1 PUSH1 ADD DUP3 DUP2 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST SWAP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 MUL ADD PUSH1 JUMPDEST POP DUP3 SWAP1 DUP2 MLOAD DUP2 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SSTORE PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SSTORE PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SSTORE PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SWAP1 DUP1 MLOAD PUSH2 SWAP3 SWAP2 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH1 DUP3 ADD MLOAD PUSH1 SWAP1 SWAP2 ADD SSTORE POP POP PUSH1 PUSH1 PUSH1 EXP SUB DUP12 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH2 SWAP1 DUP8 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP13 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE JUMPDEST POP POP POP POP POP SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 PUSH1 ADD SLOAD PUSH1 SWAP1 PUSH2 SWAP1 DUP5 SWAP1 PUSH2 JUMP JUMPDEST DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 ISZERO GT PUSH2 JUMPI PUSH1 DUP4 DUP2 MSTORE PUSH1 SWAP1 SHA3 PUSH2 SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE PUSH1 ADD PUSH2 PUSH2 JUMP JUMPDEST DUP2 MSTORE PUSH1 ADD PUSH1 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 ISZERO GT PUSH2 JUMPI PUSH1 MUL DUP2 PUSH1 MUL DUP4 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST JUMPDEST POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST JUMPDEST POP PUSH2 SWAP3 SWAP2 POP PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI DUP1 SLOAD PUSH20 NOT AND DUP2 SSTORE PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 DUP3 ADD DUP2 SWAP1 SSTORE PUSH2 PUSH1 DUP4 ADD DUP3 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH1 DUP3 ADD SSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST POP DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV PUSH1 DUP3 SSTORE DUP1 PUSH1 LT PUSH2 JUMPI POP PUSH2 JUMP JUMPDEST PUSH1 ADD PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 DUP2 ADD SWAP1 PUSH2 SWAP2 SWAP1 PUSH2 JUMP JUMPDEST JUMPDEST POP JUMP STOP LOG1 PUSH6 SHA3 DUP11 UNKNOWN_0xce UNKNOWN_0xaa GASPRICE UNKNOWN_0x49 UNKNOWN_0xab UNKNOWN_0x5e UNKNOWN_0x5c UNKNOWN_0xc2 UNKNOWN_0xd7 SGT DUP10 UNKNOWN_0xdc LOG1 UNKNOWN_0xdd SLT SHL MUL OR UNKNOWN_0xf7 UNKNOWN_0xe0 UNKNOWN_0xee UNKNOWN_0xbf JUMPDEST SHA3 PUSH30 DUP5 DUP7 UNKNOWN_0x28 MULMOD UNKNOWN_0xf6 UNKNOWN_0xc SDIV UNKNOWN_0x5c UNKNOWN_0xb7 BALANCE",
  "opcode_entropy": 4.7642709232354274,
  "opcode_count": 7442,
  "unique_opcodes": 103,
  "byte_entropy": 5.907833305047005,
  "byte_0x": 9.29022668153103e-05,
  "byte_60": 0.12430323299888517,
  "byte_40": 0.021553325901151988,
  "byte_52": 0.020995912300260128,
  "byte_08": 0.0017651430694908955,
  "byte_80": 0.03743961352657005,
  "byte_54": 0.017094017094017096,
  "byte_ff": 0.014306949089557786,
  "byte_19": 0.002787068004459309,
  "byte_16": 0.015979189892233372,
  "byte_90": 0.03669639539204757,
  "byte_55": 0.006038647342995169,
  "byte_34": 0.006038647342995169,
  "byte_15": 0.03140096618357488,
  "byte_61": 0.05202526941657377,
  "byte_00": 0.032422891118543296,
  "byte_57": 0.02582683017465626,
  "byte_fd": 0.010126347082868822,
  "byte_5b": 0.05128205128205128,
  "byte_51": 0.0216462281679673,
  "byte_20": 0.019695280564845784,
  "byte_29": 0.000650315867707172,
  "byte_eb": 0.0011148272017837235,
  "byte_83": 0.006967670011148272,
  "byte_39": 0.0002787068004459309,
  "byte_81": 0.030286138981791156,
  "byte_01": 0.03781122259383129,
  "byte_91": 0.015143069490895578,
  "byte_50": 0.029821627647714604,
  "byte_a0": 0.010126347082868822,
  "byte_02": 0.022110739502043848,
  "byte_0a": 0.013006317354143442,
  "byte_03": 0.0216462281679673,
  "byte_33": 0.0030657748049052395,
  "byte_17": 0.002787068004459309,
  "byte_62": 0.0014864362690449647,
  "byte_92": 0.003437383872166481,
  "byte_84": 0.0037160906726124115,
  "byte_47": 0.0005574136008918618,
  "byte_a4": 0.000650315867707172,
  "byte_f3": 0.004923820141211446,
  "byte_36": 0.0005574136008918618,
  "byte_a3": 0.000650315867707172,
  "byte_63": 0.008639910813823858,
  "byte_e0": 0.0026941657376439985,
  "byte_35": 0.0029728725380899295,
  "byte_04": 0.007339279078409513,
  "byte_22": 0.0012077294685990338,
  "byte_8d": 0.0002787068004459309,
  "byte_14": 0.008825715347454478,
  "byte_af": 0.0007432181345224824,
  "byte_0b": 0.002136752136752137,
  "byte_97": 0.0010219249349684132,
  "byte_bc": 0.0005574136008918618,
  "byte_86": 0.0014864362690449647,
  "byte_0d": 0.0030657748049052395,
  "byte_c5": 0.0001858045336306206,
  "byte_bf": 0.00046451133407655144,
  "byte_fb": 0.00046451133407655144,
  "byte_05": 0.003530286138981791,
  "byte_10": 0.003808992939427722,
  "byte_32": 0.0003716090672612412,
  "byte_2a": 0.0007432181345224824,
  "byte_1a": 0.0016722408026755853,
  "byte_d6": 0.000650315867707172,
  "byte_6d": 0.0005574136008918618,
  "byte_21": 0.0014864362690449647,
  "byte_1d": 0.0014864362690449647,
  "byte_ea": 0.0007432181345224824,
  "byte_3f": 0.0010219249349684132,
  "byte_0c": 0.0037160906726124115,
  "byte_78": 0.00046451133407655144,
  "byte_f5": 0.0005574136008918618,
  "byte_41": 0.0005574136008918618,
  "byte_fa": 0.000650315867707172,
  "byte_95": 0.0013935340022296545,
  "byte_db": 0.000650315867707172,
  "byte_6b": 0.00046451133407655144,
  "byte_24": 0.0037160906726124115,
  "byte_3d": 0.0002787068004459309,
  "byte_6a": 0.0009290226681531029,
  "byte_71": 0.0003716090672612412,
  "byte_e4": 0.00046451133407655144,
  "byte_46": 0.0002787068004459309,
  "byte_d3": 0.0005574136008918618,
  "byte_5d": 0.0005574136008918618,
  "byte_4f": 0.00046451133407655144,
  "byte_48": 0.0002787068004459309,
  "byte_53": 0.00046451133407655144,
  "byte_12": 0.002229654403567447,
  "byte_74": 0.0005574136008918618,
  "byte_4d": 0.0001858045336306206,
  "byte_73": 0.0007432181345224824,
  "byte_99": 0.0003716090672612412,
  "byte_4e": 0.0019509476031215162,
  "byte_f8": 0.0002787068004459309,
  "byte_ca": 0.0007432181345224824,
  "byte_f1": 0.0017651430694908955,
  "byte_ef": 0.0001858045336306206,
  "byte_e6": 0.0003716090672612412,
  "byte_a8": 0.00046451133407655144,
  "byte_d0": 0.0002787068004459309,
  "byte_5a": 0.0017651430694908955,
  "byte_58": 0.00046451133407655144,
  "byte_7f": 0.0019509476031215162,
  "byte_94": 0.0019509476031215162,
  "byte_6f": 0.000650315867707172,
  "byte_5c": 0.000650315867707172,
  "byte_c8": 0.000650315867707172,
  "byte_5e": 0.0002787068004459309,
  "byte_dd": 0.0005574136008918618,
  "byte_da": 0.00046451133407655144,
  "byte_79": 0.0005574136008918618,
  "byte_98": 0.0005574136008918618,
  "byte_7d": 0.0005574136008918618,
  "byte_06": 0.002601263470828688,
  "byte_7a": 0.000650315867707172,
  "byte_09": 0.0024154589371980675,
  "byte_5f": 0.0002787068004459309,
  "byte_9c": 0.00046451133407655144,
  "byte_31": 0.0008361204013377926,
  "byte_4c": 0.0007432181345224824,
  "byte_96": 0.0009290226681531029,
  "byte_c9": 0.00046451133407655144,
  "byte_44": 0.0009290226681531029,
  "byte_ab": 0.0002787068004459309,
  "byte_82": 0.007803790412486065,
  "byte_ee": 0.000650315867707172,
  "byte_28": 0.0017651430694908955,
  "byte_2b": 0.0008361204013377926,
  "byte_e3": 0.000650315867707172,
  "byte_7c": 9.29022668153103e-05,
  "byte_07": 0.002508361204013378,
  "byte_13": 0.0019509476031215162,
  "byte_a5": 9.29022668153103e-05,
  "byte_cb": 0.0003716090672612412,
  "byte_64": 0.0019509476031215162,
  "byte_a2": 0.00046451133407655144,
  "byte_ad": 0.000650315867707172,
  "byte_93": 0.0024154589371980675,
  "byte_de": 0.00046451133407655144,
  "byte_8c": 0.0005574136008918618,
  "byte_9b": 0.0005574136008918618,
  "byte_ec": 0.0005574136008918618,
  "byte_d4": 0.0002787068004459309,
  "byte_9e": 0.0010219249349684132,
  "byte_a1": 0.0016722408026755853,
  "byte_3b": 0.0020438498699368265,
  "byte_c7": 0.0003716090672612412,
  "byte_68": 0.0012077294685990338,
  "byte_e1": 0.0003716090672612412,
  "byte_56": 0.020438498699368264,
  "byte_11": 0.00622445187662579,
  "byte_38": 0.0003716090672612412,
  "byte_f9": 0.0003716090672612412,
  "byte_59": 0.0003716090672612412,
  "byte_b0": 0.0002787068004459309,
  "byte_8f": 0.0001858045336306206,
  "byte_b3": 0.00046451133407655144,
  "byte_f4": 0.000650315867707172,
  "byte_d2": 0.0002787068004459309,
  "byte_b4": 0.0003716090672612412,
  "byte_b5": 0.0001858045336306206,
  "byte_bd": 0.0005574136008918618,
  "byte_be": 9.29022668153103e-05,
  "byte_cd": 0.0005574136008918618,
  "byte_70": 9.29022668153103e-05,
  "byte_27": 0.0013935340022296545,
  "byte_c0": 0.0007432181345224824,
  "byte_c4": 0.0003716090672612412,
  "byte_fc": 0.000650315867707172,
  "byte_e5": 0.0001858045336306206,
  "byte_9a": 0.0005574136008918618,
  "byte_b8": 0.0001858045336306206,
  "byte_cc": 0.00046451133407655144,
  "byte_72": 0.0005574136008918618,
  "byte_69": 0.00046451133407655144,
  "byte_d7": 0.0005574136008918618,
  "byte_43": 0.0011148272017837235,
  "byte_ed": 0.0002787068004459309,
  "byte_4a": 0.00046451133407655144,
  "byte_85": 0.0036231884057971015,
  "byte_f2": 0.0005574136008918618,
  "byte_8b": 0.0010219249349684132,
  "byte_ac": 0.0010219249349684132,
  "byte_f6": 0.0005574136008918618,
  "byte_df": 0.0002787068004459309,
  "byte_65": 0.000650315867707172,
  "byte_ba": 0.0005574136008918618,
  "byte_ce": 0.003530286138981791,
  "byte_f0": 0.0007432181345224824,
  "byte_0f": 0.0013935340022296545,
  "byte_9d": 0.0008361204013377926,
  "byte_e2": 0.0002787068004459309,
  "byte_e8": 0.0003716090672612412,
  "byte_d5": 0.0002787068004459309,
  "byte_25": 0.0011148272017837235,
  "byte_1f": 0.002136752136752137,
  "byte_30": 0.0007432181345224824,
  "byte_8a": 0.0008361204013377926,
  "byte_a6": 0.0002787068004459309,
  "byte_ae": 0.0002787068004459309,
  "byte_18": 0.001579338535860275,
  "byte_7b": 0.0001858045336306206,
  "byte_3c": 0.000650315867707172,
  "byte_b6": 0.0005574136008918618,
  "byte_75": 0.0001858045336306206,
  "byte_87": 0.0023225566703827575,
  "byte_8e": 0.00046451133407655144,
  "byte_f7": 0.0001858045336306206,
  "byte_1c": 0.0014864362690449647,
  "byte_23": 0.0017651430694908955,
  "byte_e9": 0.000650315867707172,
  "byte_0e": 0.002136752136752137,
  "byte_1b": 0.002601263470828688,
  "byte_66": 0.00046451133407655144,
  "byte_6c": 9.29022668153103e-05,
  "byte_b7": 0.0002787068004459309,
  "byte_d8": 0.0001858045336306206,
  "byte_b1": 0.0002787068004459309,
  "byte_4b": 0.00046451133407655144,
  "byte_77": 0.000650315867707172,
  "byte_67": 0.0005574136008918618,
  "byte_fe": 0.005109624674842066,
  "byte_6e": 0.0003716090672612412,
  "byte_3e": 0.0001858045336306206,
  "byte_c3": 0.0003716090672612412,
  "byte_e7": 0.0002787068004459309,
  "byte_a9": 0.0002787068004459309,
  "byte_d1": 0.00046451133407655144,
  "byte_c6": 0.001300631735414344,
  "byte_76": 0.0001858045336306206,
  "byte_89": 0.0013935340022296545,
  "byte_42": 0.002879970271274619,
  "byte_37": 0.0002787068004459309,
  "byte_2f": 0.0002787068004459309,
  "byte_a7": 0.000650315867707172,
  "byte_88": 0.0014864362690449647,
  "byte_26": 0.0030657748049052395,
  "byte_2d": 0.0002787068004459309,
  "byte_1e": 0.0009290226681531029,
  "byte_aa": 0.00046451133407655144,
  "byte_3a": 0.0003716090672612412,
  "byte_c2": 0.0003716090672612412,
  "byte_c1": 0.0003716090672612412,
  "byte_9f": 0.0002787068004459309,
  "byte_45": 0.0001858045336306206,
  "byte_cf": 0.0001858045336306206,
  "byte_dc": 0.0001858045336306206,
  "byte_7e": 0.0002787068004459309,
  "byte_d9": 9.29022668153103e-05,
  "byte_49": 0.0003716090672612412,
  "byte_2c": 9.29022668153103e-05,
  "byte_bb": 9.29022668153103e-05,
  "byte_2e": 0.0001858045336306206,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 4,
  "event_nums": 0,
  "creation_block": 4307045,
  "creation_timestamp": 1506242820,
  "life_time": 353.0,
  "duration_seconds": 10749.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.011299435028248588,
  "avg_gas_limit": 4712388.0,
  "std_gas_limit": 0.0,
  "avg_gas_used": 3665003.5,
  "std_gas_used": 891357.6459111405,
  "avg_gas_price": 14400000000.0,
  "std_gas_price": 1039230484.5413264,
  "loadearlypurchases_num": 3,
  "timeline_sequence": [
    [
      4307045,
      1506242820,
      33,
      20,
      0,
      4712388,
      12600000000,
      0,
      0,
      4808520,
      2929556,
      18785068
    ],
    [
      4307338,
      1506251905,
      36,
      36,
      0,
      4712388,
      15000000000,
      0,
      0,
      5949339,
      4572105,
      18784775
    ],
    [
      4307391,
      1506253344,
      37,
      30,
      0,
      4712388,
      15000000000,
      0,
      0,
      5918421,
      4527761,
      18784722
    ],
    [
      4307398,
      1506253569,
      38,
      28,
      0,
      4712388,
      15000000000,
      0,
      0,
      3735788,
      2630592,
      18784715
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.13;\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\ncontract AbstractStarbaseToken {\n    function isFundraiser(address fundraiserAddress) public returns (bool);\n    function company() public returns (address);\n    function allocateToCrowdsalePurchaser(address to, uint256 value) public returns (bool);\n    function allocateToMarketingSupporter(address to, uint256 value) public returns (bool);\n}\n\ncontract AbstractStarbaseCrowdsale {\n    function startDate() constant returns (uint256) {}\n    function endedAt() constant returns (uint256) {}\n    function isEnded() constant returns (bool);\n    function totalRaisedAmountInCny() constant returns (uint256);\n    function numOfPurchasedTokensOnCsBy(address purchaser) constant returns (uint256);\n    function numOfPurchasedTokensOnEpBy(address purchaser) constant returns (uint256);\n}\n\n/// @title EarlyPurchase contract - Keep track of purchased amount by Early Purchasers\n/// @author Starbase PTE. LTD. - <info@starbase.co>\ncontract StarbaseEarlyPurchase {\n    /*\n     *  Constants\n     */\n    string public constant PURCHASE_AMOUNT_UNIT = 'CNY';    // Chinese Yuan\n    string public constant PURCHASE_AMOUNT_RATE_REFERENCE = 'http://www.xe.com/currencytables/';\n    uint256 public constant PURCHASE_AMOUNT_CAP = 9000000;\n\n    /*\n     *  Types\n     */\n    struct EarlyPurchase {\n        address purchaser;\n        uint256 amount;        // CNY based amount\n        uint256 purchasedAt;   // timestamp\n    }\n\n    /*\n     *  External contracts\n     */\n    AbstractStarbaseCrowdsale public starbaseCrowdsale;\n\n    /*\n     *  Storage\n     */\n    address public owner;\n    EarlyPurchase[] public earlyPurchases;\n    uint256 public earlyPurchaseClosedAt;\n\n    /*\n     *  Modifiers\n     */\n    modifier noEther() {\n        require(msg.value == 0);\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyBeforeCrowdsale() {\n        assert(address(starbaseCrowdsale) == address(0) || starbaseCrowdsale.startDate() == 0);\n        _;\n    }\n\n    modifier onlyEarlyPurchaseTerm() {\n        assert(earlyPurchaseClosedAt <= 0);\n        _;\n    }\n\n    /*\n     *  Contract functions\n     */\n\n    /**\n     * @dev Returns early purchased amount by purchaser's address\n     * @param purchaser Purchaser address\n     */\n    function purchasedAmountBy(address purchaser)\n        external\n        constant\n        noEther\n        returns (uint256 amount)\n    {\n        for (uint256 i; i < earlyPurchases.length; i++) {\n            if (earlyPurchases[i].purchaser == purchaser) {\n                amount += earlyPurchases[i].amount;\n            }\n        }\n    }\n\n    /**\n     * @dev Returns total amount of raised funds by Early Purchasers\n     */\n    function totalAmountOfEarlyPurchases()\n        constant\n        noEther\n        public\n        returns (uint256 totalAmount)\n    {\n        for (uint256 i; i < earlyPurchases.length; i++) {\n            totalAmount += earlyPurchases[i].amount;\n        }\n    }\n\n    /**\n     * @dev Returns number of early purchases\n     */\n    function numberOfEarlyPurchases()\n        external\n        constant\n        noEther\n        returns (uint256)\n    {\n        return earlyPurchases.length;\n    }\n\n    /**\n     * @dev Append an early purchase log\n     * @param purchaser Purchaser address\n     * @param amount Purchase amount\n     * @param purchasedAt Timestamp of purchased date\n     */\n    function appendEarlyPurchase(address purchaser, uint256 amount, uint256 purchasedAt)\n        external\n        noEther\n        onlyOwner\n        onlyBeforeCrowdsale\n        onlyEarlyPurchaseTerm\n        returns (bool)\n    {\n        if (amount == 0 ||\n            totalAmountOfEarlyPurchases() + amount > PURCHASE_AMOUNT_CAP)\n        {\n            return false;\n        }\n\n        assert(purchasedAt != 0 || purchasedAt <= now);\n\n        earlyPurchases.push(EarlyPurchase(purchaser, amount, purchasedAt));\n        return true;\n    }\n\n    /**\n     * @dev Close early purchase term\n     */\n    function closeEarlyPurchase()\n        external\n        noEther\n        onlyOwner\n        returns (bool)\n    {\n        earlyPurchaseClosedAt = now;\n    }\n\n    /**\n     * @dev Setup function sets external contract's address\n     * @param starbaseCrowdsaleAddress Token address\n     */\n    function setup(address starbaseCrowdsaleAddress)\n        external\n        noEther\n        onlyOwner\n        returns (bool)\n    {\n        if (address(starbaseCrowdsale) == 0) {\n            starbaseCrowdsale = AbstractStarbaseCrowdsale(starbaseCrowdsaleAddress);\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * @dev Contract constructor function\n     */\n    function StarbaseEarlyPurchase() noEther {\n        owner = msg.sender;\n    }\n}\n\n/// @title EarlyPurchaseAmendment contract - Amend early purchase records of the original contract\n/// @author Starbase PTE. LTD. - <support@starbase.co>\ncontract StarbaseEarlyPurchaseAmendment {\n    /*\n     *  Events\n     */\n    event EarlyPurchaseInvalidated(uint256 epIdx);\n    event EarlyPurchaseAmended(uint256 epIdx);\n\n    /*\n     *  External contracts\n     */\n    AbstractStarbaseCrowdsale public starbaseCrowdsale;\n    StarbaseEarlyPurchase public starbaseEarlyPurchase;\n\n    /*\n     *  Storage\n     */\n    address public owner;\n    uint256[] public invalidEarlyPurchaseIndexes;\n    uint256[] public amendedEarlyPurchaseIndexes;\n    mapping (uint256 => StarbaseEarlyPurchase.EarlyPurchase) public amendedEarlyPurchases;\n\n    /*\n     *  Modifiers\n     */\n    modifier noEther() {\n        require(msg.value == 0);\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner);\n        _;\n    }\n\n    modifier onlyBeforeCrowdsale() {\n        assert(address(starbaseCrowdsale) == address(0) || starbaseCrowdsale.startDate() == 0);\n        _;\n    }\n\n    modifier onlyEarlyPurchasesLoaded() {\n        assert(address(starbaseEarlyPurchase) != address(0));\n        _;\n    }\n\n    /*\n     *  Functions below are compatible with starbaseEarlyPurchase contract\n     */\n\n    /**\n     * @dev Returns an early purchase record\n     * @param earlyPurchaseIndex Index number of an early purchase\n     */\n    function earlyPurchases(uint256 earlyPurchaseIndex)\n        external\n        constant\n        onlyEarlyPurchasesLoaded\n        returns (address purchaser, uint256 amount, uint256 purchasedAt)\n    {\n        return starbaseEarlyPurchase.earlyPurchases(earlyPurchaseIndex);\n    }\n\n    /**\n     * @dev Returns early purchased amount by purchaser's address\n     * @param purchaser Purchaser address\n     */\n    function purchasedAmountBy(address purchaser)\n        external\n        constant\n        noEther\n        returns (uint256 amount)\n    {\n        StarbaseEarlyPurchase.EarlyPurchase[] memory normalizedEP =\n            normalizedEarlyPurchases();\n        for (uint256 i; i < normalizedEP.length; i++) {\n            if (normalizedEP[i].purchaser == purchaser) {\n                amount += normalizedEP[i].amount;\n            }\n        }\n    }\n\n    /**\n     * @dev Returns total amount of raised funds by Early Purchasers\n     */\n    function totalAmountOfEarlyPurchases()\n        constant\n        noEther\n        public\n        returns (uint256 totalAmount)\n    {\n        StarbaseEarlyPurchase.EarlyPurchase[] memory normalizedEP =\n            normalizedEarlyPurchases();\n        for (uint256 i; i < normalizedEP.length; i++) {\n            totalAmount += normalizedEP[i].amount;\n        }\n    }\n\n    /**\n     * @dev Returns number of early purchases\n     */\n    function numberOfEarlyPurchases()\n        external\n        constant\n        noEther\n        returns (uint256)\n    {\n        return normalizedEarlyPurchases().length;\n    }\n\n    /**\n     * @dev Sets up function sets external contract's address\n     * @param starbaseCrowdsaleAddress Token address\n     */\n    function setup(address starbaseCrowdsaleAddress)\n        external\n        noEther\n        onlyOwner\n        returns (bool)\n    {\n        if (address(starbaseCrowdsale) == 0) {\n            starbaseCrowdsale = AbstractStarbaseCrowdsale(starbaseCrowdsaleAddress);\n            return true;\n        }\n        return false;\n    }\n\n    /*\n     *  Contract functions unique to StarbaseEarlyPurchaseAmendment\n     */\n\n     /**\n      * @dev Invalidate early purchase\n      * @param earlyPurchaseIndex Index number of the purchase\n      */\n    function invalidateEarlyPurchase(uint256 earlyPurchaseIndex)\n        external\n        noEther\n        onlyOwner\n        onlyEarlyPurchasesLoaded\n        onlyBeforeCrowdsale\n        returns (bool)\n    {\n        assert(numberOfRawEarlyPurchases() > earlyPurchaseIndex); // Array Index Out of Bounds Exception\n\n        for (uint256 i; i < invalidEarlyPurchaseIndexes.length; i++) {\n            assert(invalidEarlyPurchaseIndexes[i] != earlyPurchaseIndex);\n        }\n\n        invalidEarlyPurchaseIndexes.push(earlyPurchaseIndex);\n        EarlyPurchaseInvalidated(earlyPurchaseIndex);\n        return true;\n    }\n\n    /**\n     * @dev Checks whether early purchase is invalid\n     * @param earlyPurchaseIndex Index number of the purchase\n     */\n    function isInvalidEarlyPurchase(uint256 earlyPurchaseIndex)\n        constant\n        noEther\n        public\n        returns (bool)\n    {\n        assert(numberOfRawEarlyPurchases() > earlyPurchaseIndex); // Array Index Out of Bounds Exception\n\n\n        for (uint256 i; i < invalidEarlyPurchaseIndexes.length; i++) {\n            if (invalidEarlyPurchaseIndexes[i] == earlyPurchaseIndex) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev Amends a given early purchase with data\n     * @param earlyPurchaseIndex Index number of the purchase\n     * @param purchaser Purchaser's address\n     * @param amount Value of purchase\n     * @param purchasedAt Purchase timestamp\n     */\n    function amendEarlyPurchase(uint256 earlyPurchaseIndex, address purchaser, uint256 amount, uint256 purchasedAt)\n        external\n        noEther\n        onlyOwner\n        onlyEarlyPurchasesLoaded\n        onlyBeforeCrowdsale\n        returns (bool)\n    {\n        assert(purchasedAt != 0 || purchasedAt <= now);\n\n        assert(numberOfRawEarlyPurchases() > earlyPurchaseIndex);\n\n        assert(!isInvalidEarlyPurchase(earlyPurchaseIndex)); // Invalid early purchase cannot be amended\n\n        if (!isAmendedEarlyPurchase(earlyPurchaseIndex)) {\n            amendedEarlyPurchaseIndexes.push(earlyPurchaseIndex);\n        }\n\n        amendedEarlyPurchases[earlyPurchaseIndex] =\n            StarbaseEarlyPurchase.EarlyPurchase(purchaser, amount, purchasedAt);\n        EarlyPurchaseAmended(earlyPurchaseIndex);\n        return true;\n    }\n\n    /**\n     * @dev Checks whether early purchase is amended\n     * @param earlyPurchaseIndex Index number of the purchase\n     */\n    function isAmendedEarlyPurchase(uint256 earlyPurchaseIndex)\n        constant\n        noEther\n        returns (bool)\n    {\n        assert(numberOfRawEarlyPurchases() > earlyPurchaseIndex); // Array Index Out of Bounds Exception\n\n        for (uint256 i; i < amendedEarlyPurchaseIndexes.length; i++) {\n            if (amendedEarlyPurchaseIndexes[i] == earlyPurchaseIndex) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * @dev Loads early purchases data to StarbaseEarlyPurchaseAmendment contract\n     * @param starbaseEarlyPurchaseAddress Address from starbase early purchase\n     */\n    function loadStarbaseEarlyPurchases(address starbaseEarlyPurchaseAddress)\n        external\n        noEther\n        onlyOwner\n        onlyBeforeCrowdsale\n        returns (bool)\n    {\n        assert(starbaseEarlyPurchaseAddress != 0 ||\n            address(starbaseEarlyPurchase) == 0);\n\n        starbaseEarlyPurchase = StarbaseEarlyPurchase(starbaseEarlyPurchaseAddress);\n        assert(starbaseEarlyPurchase.earlyPurchaseClosedAt() != 0); // the early purchase must be closed\n\n        return true;\n    }\n\n    /**\n     * @dev Contract constructor function. It sets owner\n     */\n    function StarbaseEarlyPurchaseAmendment() noEther {\n        owner = msg.sender;\n    }\n\n    /**\n     * Internal functions\n     */\n\n    /**\n     * @dev Normalizes early purchases data\n     */\n    function normalizedEarlyPurchases()\n        constant\n        internal\n        returns (StarbaseEarlyPurchase.EarlyPurchase[] normalizedEP)\n    {\n        uint256 rawEPCount = numberOfRawEarlyPurchases();\n        normalizedEP = new StarbaseEarlyPurchase.EarlyPurchase[](\n            rawEPCount - invalidEarlyPurchaseIndexes.length);\n\n        uint256 normalizedIdx;\n        for (uint256 i; i < rawEPCount; i++) {\n            if (isInvalidEarlyPurchase(i)) {\n                continue;   // invalid early purchase should be ignored\n            }\n\n            StarbaseEarlyPurchase.EarlyPurchase memory ep;\n            if (isAmendedEarlyPurchase(i)) {\n                ep = amendedEarlyPurchases[i];  // amended early purchase should take a priority\n            } else {\n                ep = getEarlyPurchase(i);\n            }\n\n            normalizedEP[normalizedIdx] = ep;\n            normalizedIdx++;\n        }\n    }\n\n    /**\n     * @dev Fetches early purchases data\n     */\n    function getEarlyPurchase(uint256 earlyPurchaseIndex)\n        internal\n        constant\n        onlyEarlyPurchasesLoaded\n        returns (StarbaseEarlyPurchase.EarlyPurchase)\n    {\n        var (purchaser, amount, purchasedAt) =\n            starbaseEarlyPurchase.earlyPurchases(earlyPurchaseIndex);\n        return StarbaseEarlyPurchase.EarlyPurchase(purchaser, amount, purchasedAt);\n    }\n\n    /**\n     * @dev Returns raw number of early purchases\n     */\n    function numberOfRawEarlyPurchases()\n        internal\n        constant\n        onlyEarlyPurchasesLoaded\n        returns (uint256)\n    {\n        return starbaseEarlyPurchase.numberOfEarlyPurchases();\n    }\n}\n\n/**\n * @title Crowdsale contract - Starbase crowdsale to create STAR.\n * @author Starbase PTE. LTD. - <info@starbase.co>\n */\ncontract StarbaseCrowdsale is Ownable {\n    /*\n     *  Events\n     */\n    event CrowdsaleEnded(uint256 endedAt);\n    event StarbasePurchasedWithEth(address purchaser, uint256 amount, uint256 rawAmount, uint256 cnyEthRate, uint256 bonusTokensPercentage);\n    event StarbasePurchasedOffChain(address purchaser, uint256 amount, uint256 rawAmount, uint256 cnyBtcRate, uint256 bonusTokensPercentage, string data);\n    event CnyEthRateUpdated(uint256 cnyEthRate);\n    event CnyBtcRateUpdated(uint256 cnyBtcRate);\n    event QualifiedPartnerAddress(address qualifiedPartner);\n\n    /**\n     *  External contracts\n     */\n    AbstractStarbaseToken public starbaseToken;\n    StarbaseEarlyPurchaseAmendment public starbaseEpAmendment;\n\n    /**\n     *  Constants\n     */\n    uint256 constant public crowdsaleTokenAmount = 125000000e18;\n    uint256 constant public earlyPurchaseTokenAmount = 50000000e18;\n    uint256 constant public MIN_INVESTMENT = 1; // min is 1 Wei\n    uint256 constant public MAX_CAP = 67000000; // in CNY. approximately 10M USD. (includes raised amount from both EP and CS)\n    string public constant PURCHASE_AMOUNT_UNIT = 'CNY';  // Chinese Yuan\n\n    /**\n     * Types\n     */\n    struct CrowdsalePurchase {\n        address purchaser;\n        uint256 amount;        // CNY based amount with bonus\n        uint256 rawAmount;     // CNY based amount no bonus\n        uint256 purchasedAt;   // timestamp\n        string data;           // additional data (e.g. Tx ID of Bitcoin)\n        uint256 bonus;\n    }\n\n    struct QualifiedPartners {\n        uint256 amountCap;\n        uint256 amountRaised;\n        bool    bonaFide;\n        uint256 commissionFeePercentage; // example 5 will calculate the percentage as 5%\n    }\n\n    /**\n     *  Storage\n     */\n    uint public numOfDeliveredCrowdsalePurchases;  // index to keep the number of crowdsale purchases have already been processed by `withdrawPurchasedTokens`\n    uint public numOfDeliveredEarlyPurchases;  // index to keep the number of early purchases have already been processed by `withdrawPurchasedTokens`\n    uint256 public numOfLoadedEarlyPurchases; // index to keep the number of early purchases that have already been loaded by `loadEarlyPurchases`\n\n    // early purchase\n    address[] public earlyPurchasers;\n    mapping (address => uint256) public earlyPurchasedAmountBy; // early purchased amount in CNY per purchasers' address\n    bool public earlyPurchasesLoaded = false;  // returns whether all early purchases are loaded into this contract\n    uint256 public totalAmountOfEarlyPurchasesInCny;\n\n    // crowdsale\n    uint256 public maxCrowdsaleCap;     // = 67M CNY - (total raised amount from EP)\n    uint256 public totalAmountOfPurchasesInCny; // totalPreSale + totalCrowdsale\n    mapping (address => QualifiedPartners) public qualifiedPartners;\n    uint256 public purchaseStartBlock;  // crowdsale purchases can be accepted from this block number\n    uint256 public startDate;\n    uint256 public endedAt;\n    CrowdsalePurchase[] public crowdsalePurchases;\n    mapping (address => uint256) public crowdsalePurchaseAmountBy; // crowdsale purchase amount in CNY per purchasers' address\n    uint256 public cnyBtcRate; // this rate won't be used from a smart contract function but external system\n    uint256 public cnyEthRate;\n\n    // bonus milestones\n    uint256 public firstBonusSalesEnds;\n    uint256 public secondBonusSalesEnds;\n    uint256 public thirdBonusSalesEnds;\n    uint256 public fourthBonusSalesEnds;\n    uint256 public fifthBonusSalesEnds;\n    uint256 public firstExtendedBonusSalesEnds;\n    uint256 public secondExtendedBonusSalesEnds;\n    uint256 public thirdExtendedBonusSalesEnds;\n    uint256 public fourthExtendedBonusSalesEnds;\n    uint256 public fifthExtendedBonusSalesEnds;\n    uint256 public sixthExtendedBonusSalesEnds;\n\n    // after the crowdsale\n    mapping (address => uint256) public numOfPurchasedTokensOnCsBy;    // the number of tokens purchased on the crowdsale by a purchaser\n    mapping (address => uint256) public numOfPurchasedTokensOnEpBy;    // the number of tokens early purchased by a purchaser\n\n    /**\n     *  Modifiers\n     */\n    modifier minInvestment() {\n        // User has to send at least the ether value of one token.\n        assert(msg.value >= MIN_INVESTMENT);\n        _;\n    }\n\n    modifier whenEnded() {\n        assert(isEnded());\n        _;\n    }\n\n    modifier hasBalance() {\n        assert(this.balance > 0);\n        _;\n    }\n    modifier rateIsSet(uint256 _rate) {\n        assert(_rate != 0);\n        _;\n    }\n\n    modifier whenNotEnded() {\n        assert(!isEnded());\n        _;\n    }\n\n    modifier tokensNotDelivered() {\n        assert(numOfDeliveredCrowdsalePurchases == 0);\n        assert(numOfDeliveredEarlyPurchases == 0);\n        _;\n    }\n\n    modifier onlyFundraiser() {\n        assert(address(starbaseToken) != 0);\n        assert(starbaseToken.isFundraiser(msg.sender));\n        _;\n    }\n\n    /**\n     * Contract functions\n     */\n    /**\n     * @dev Contract constructor function sets owner address and\n     *      address of StarbaseEarlyPurchaseAmendment contract.\n     * @param starbaseEpAddr The address that holds the early purchasers Star tokens\n     */\n    function StarbaseCrowdsale(address starbaseEpAddr) {\n        require(starbaseEpAddr != 0);\n        owner = msg.sender;\n        starbaseEpAmendment = StarbaseEarlyPurchaseAmendment(starbaseEpAddr);\n    }\n\n    /**\n     * @dev Fallback accepts payment for Star tokens with Eth\n     */\n    function() payable {\n        redirectToPurchase();\n    }\n\n    /**\n     * External functions\n     */\n\n    /**\n     * @dev Setup function sets external contracts' addresses and set the max crowdsale cap\n     * @param starbaseTokenAddress Token address.\n     * @param _purchaseStartBlock Block number to start crowdsale\n     */\n    function setup(address starbaseTokenAddress, uint256 _purchaseStartBlock)\n        external\n        onlyOwner\n        returns (bool)\n    {\n        assert(address(starbaseToken) == 0);\n        starbaseToken = AbstractStarbaseToken(starbaseTokenAddress);\n        purchaseStartBlock = _purchaseStartBlock;\n\n        totalAmountOfEarlyPurchasesInCny = totalAmountOfEarlyPurchases();\n        // set the max cap of this crowdsale\n        maxCrowdsaleCap = SafeMath.sub(MAX_CAP, totalAmountOfEarlyPurchasesInCny);\n        assert(maxCrowdsaleCap > 0);\n\n        return true;\n    }\n\n    /**\n     * @dev Allows owner to record a purchase made outside of Ethereum blockchain\n     * @param purchaser Address of a purchaser\n     * @param rawAmount Purchased amount in CNY\n     * @param purchasedAt Timestamp at the purchase made\n     * @param data Identifier as an evidence of the purchase (e.g. btc:1xyzxyz)\n     */\n    function recordOffchainPurchase(\n        address purchaser,\n        uint256 rawAmount,\n        uint256 purchasedAt,\n        string data\n    )\n        external\n        onlyFundraiser\n        whenNotEnded\n        rateIsSet(cnyBtcRate)\n        returns (bool)\n    {\n        require(purchaseStartBlock > 0 && block.number >= purchaseStartBlock);\n        if (startDate == 0) {\n            startCrowdsale(block.timestamp);\n        }\n\n        uint256 bonusTier = getBonusTier();\n        uint amount = recordPurchase(purchaser, rawAmount, purchasedAt, data, bonusTier);\n\n        StarbasePurchasedOffChain(purchaser, amount, rawAmount, cnyBtcRate, bonusTier, data);\n        return true;\n    }\n\n    /**\n     * @dev Transfers raised funds to company's wallet address at any given time.\n     */\n    function withdrawForCompany()\n        external\n        onlyFundraiser\n        hasBalance\n    {\n        address company = starbaseToken.company();\n        require(company != address(0));\n        company.transfer(this.balance);\n    }\n\n    /**\n     * @dev Update the CNY/ETH rate to record purchases in CNY\n     */\n    function updateCnyEthRate(uint256 rate)\n        external\n        onlyFundraiser\n        returns (bool)\n    {\n        cnyEthRate = rate;\n        CnyEthRateUpdated(cnyEthRate);\n        return true;\n    }\n\n    /**\n     * @dev Update the CNY/BTC rate to record purchases in CNY\n     */\n    function updateCnyBtcRate(uint256 rate)\n        external\n        onlyFundraiser\n        returns (bool)\n    {\n        cnyBtcRate = rate;\n        CnyBtcRateUpdated(cnyBtcRate);\n        return true;\n    }\n\n    /**\n     * @dev Allow for the possibility for contract owner to start crowdsale\n     */\n    function ownerStartsCrowdsale(uint256 timestamp)\n        external\n        onlyOwner\n    {\n        assert(startDate == 0 && block.number >= purchaseStartBlock);   // overwriting startDate is not permitted and it should be after the crowdsale start block\n        startCrowdsale(timestamp);\n\n    }\n\n    /**\n     * @dev Ends crowdsale\n     * @param timestamp Timestamp at the crowdsale ended\n     */\n    function endCrowdsale(uint256 timestamp)\n        external\n        onlyOwner\n    {\n        assert(timestamp > 0 && timestamp <= now);\n        assert(block.number > purchaseStartBlock && endedAt == 0);   // cannot end before it starts and overwriting time is not permitted\n        endedAt = timestamp;\n        totalAmountOfEarlyPurchasesInCny = totalAmountOfEarlyPurchases();\n        totalAmountOfPurchasesInCny = totalRaisedAmountInCny();\n        CrowdsaleEnded(endedAt);\n    }\n\n    /**\n     * @dev Deliver tokens to purchasers according to their purchase amount in CNY\n     */\n    function withdrawPurchasedTokens()\n        external\n        whenEnded\n        returns (bool)\n    {\n        assert(earlyPurchasesLoaded);\n        assert(address(starbaseToken) != 0);\n\n        /*\n         * \u201cValue\u201d refers to the contribution of the User:\n         *  {crowdsale_purchaser_token_amount} =\n         *  {crowdsale_token_amount} * {crowdsalePurchase_value} / {earlypurchase_value} + {crowdsale_value}.\n         *\n         * Example: If a User contributes during the Contribution Period 100 CNY (including applicable\n         * Bonus, if any) and the total amount early purchases amounts to 6\u2019000\u2019000 CNY\n         * and total amount raised during the Contribution Period is 30\u2019000\u2019000, then he will get\n         * 347.22 STAR = 125\u2019000\u2019000 STAR * 100 CNY / 30\u2019000\u2019000 CNY + 6\u2019000\u2019000 CNY.\n        */\n\n        if (crowdsalePurchaseAmountBy[msg.sender] > 0) {\n            uint256 crowdsalePurchaseValue = crowdsalePurchaseAmountBy[msg.sender];\n            crowdsalePurchaseAmountBy[msg.sender] = 0;\n\n            uint256 tokenCount =\n                SafeMath.mul(crowdsaleTokenAmount, crowdsalePurchaseValue) /\n                totalAmountOfPurchasesInCny;\n\n            numOfPurchasedTokensOnCsBy[msg.sender] =\n                SafeMath.add(numOfPurchasedTokensOnCsBy[msg.sender], tokenCount);\n            assert(starbaseToken.allocateToCrowdsalePurchaser(msg.sender, tokenCount));\n            numOfDeliveredCrowdsalePurchases++;\n        }\n\n        /*\n         * \u201cValue\u201d refers to the contribution of the User:\n         * {earlypurchaser_token_amount} =\n         * {earlypurchaser_token_amount} * ({earlypurchase_value} / {total_earlypurchase_value})\n         *  + {crowdsale_token_amount} * ({earlypurchase_value} / {earlypurchase_value} + {crowdsale_value}).\n         *\n         * Example: If an Early Purchaser contributes 100 CNY (including Bonus of 20%) and the\n         * total amount of early purchases amounts to 6\u2019000\u2019000 CNY and the total amount raised\n         * during the Contribution Period is 30\u2019000\u2019000 CNY, then he will get 1180.55 STAR =\n         * 50\u2019000\u2019000 STAR * 100 CNY / 6\u2019000\u2019000 CNY + 125\u2019000\u2019000 STAR * 100 CNY /\n         * 30\u2019000\u2019000 CNY + 6\u2019000\u2019000 CNY\n         */\n\n        if (earlyPurchasedAmountBy[msg.sender] > 0) {  // skip if is not an early purchaser\n            uint256 earlyPurchaserPurchaseValue = earlyPurchasedAmountBy[msg.sender];\n            earlyPurchasedAmountBy[msg.sender] = 0;\n\n            uint256 epTokenCalculationFromEPTokenAmount = SafeMath.mul(earlyPurchaseTokenAmount, earlyPurchaserPurchaseValue) / totalAmountOfEarlyPurchasesInCny;\n\n            uint256 epTokenCalculationFromCrowdsaleTokenAmount = SafeMath.mul(crowdsaleTokenAmount, earlyPurchaserPurchaseValue) / totalAmountOfPurchasesInCny;\n\n            uint256 epTokenCount = SafeMath.add(epTokenCalculationFromEPTokenAmount, epTokenCalculationFromCrowdsaleTokenAmount);\n\n            numOfPurchasedTokensOnEpBy[msg.sender] = SafeMath.add(numOfPurchasedTokensOnEpBy[msg.sender], epTokenCount);\n            assert(starbaseToken.allocateToCrowdsalePurchaser(msg.sender, epTokenCount));\n            numOfDeliveredEarlyPurchases++;\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Load early purchases from the contract keeps track of them\n     */\n    function loadEarlyPurchases() external onlyOwner returns (bool) {\n        if (earlyPurchasesLoaded) {\n            return false;    // all EPs have already been loaded\n        }\n\n        uint256 numOfOrigEp = starbaseEpAmendment\n            .starbaseEarlyPurchase()\n            .numberOfEarlyPurchases();\n\n        for (uint256 i = numOfLoadedEarlyPurchases; i < numOfOrigEp && msg.gas > 200000; i++) {\n            if (starbaseEpAmendment.isInvalidEarlyPurchase(i)) {\n                numOfLoadedEarlyPurchases = SafeMath.add(numOfLoadedEarlyPurchases, 1);\n                continue;\n            }\n            var (purchaser, amount,) =\n                starbaseEpAmendment.isAmendedEarlyPurchase(i)\n                ? starbaseEpAmendment.amendedEarlyPurchases(i)\n                : starbaseEpAmendment.earlyPurchases(i);\n            if (amount > 0) {\n                if (earlyPurchasedAmountBy[purchaser] == 0) {\n                    earlyPurchasers.push(purchaser);\n                }\n                // each early purchaser receives 20% bonus\n                uint256 bonus = SafeMath.mul(amount, 20) / 100;\n                uint256 amountWithBonus = SafeMath.add(amount, bonus);\n\n                earlyPurchasedAmountBy[purchaser] = SafeMath.add(earlyPurchasedAmountBy[purchaser], amountWithBonus);\n            }\n\n            numOfLoadedEarlyPurchases = SafeMath.add(numOfLoadedEarlyPurchases, 1);\n        }\n\n        assert(numOfLoadedEarlyPurchases <= numOfOrigEp);\n        if (numOfLoadedEarlyPurchases == numOfOrigEp) {\n            earlyPurchasesLoaded = true;    // enable the flag\n        }\n        return true;\n    }\n\n    /**\n      * @dev Set qualified crowdsale partner i.e. Bitcoin Suisse address\n      * @param _qualifiedPartner Address of the qualified partner that can purchase during crowdsale\n      * @param _amountCap Ether value which partner is able to contribute\n      * @param _commissionFeePercentage Integer that represents the fee to pay qualified partner 5 is 5%\n      */\n    function setQualifiedPartner(address _qualifiedPartner, uint256 _amountCap, uint256 _commissionFeePercentage)\n        external\n        onlyOwner\n    {\n        assert(!qualifiedPartners[_qualifiedPartner].bonaFide);\n        qualifiedPartners[_qualifiedPartner].bonaFide = true;\n        qualifiedPartners[_qualifiedPartner].amountCap = _amountCap;\n        qualifiedPartners[_qualifiedPartner].commissionFeePercentage = _commissionFeePercentage;\n        QualifiedPartnerAddress(_qualifiedPartner);\n    }\n\n    /**\n     * @dev Remove address from qualified partners list.\n     * @param _qualifiedPartner Address to be removed from the list.\n     */\n    function unlistQualifiedPartner(address _qualifiedPartner) external onlyOwner {\n        assert(qualifiedPartners[_qualifiedPartner].bonaFide);\n        qualifiedPartners[_qualifiedPartner].bonaFide = false;\n    }\n\n    /**\n     * @dev Update whitelisted address amount allowed to raise during the presale.\n     * @param _qualifiedPartner Qualified Partner address to be updated.\n     * @param _amountCap Amount that the address is able to raise during the presale.\n     */\n    function updateQualifiedPartnerCapAmount(address _qualifiedPartner, uint256 _amountCap) external onlyOwner {\n        assert(qualifiedPartners[_qualifiedPartner].bonaFide);\n        qualifiedPartners[_qualifiedPartner].amountCap = _amountCap;\n    }\n\n    /**\n     * Public functions\n     */\n\n    /**\n     * @dev Returns boolean for whether crowdsale has ended\n     */\n    function isEnded() constant public returns (bool) {\n        return (endedAt > 0 && endedAt <= now);\n    }\n\n    /**\n     * @dev Returns number of purchases to date.\n     */\n    function numOfPurchases() constant public returns (uint256) {\n        return crowdsalePurchases.length;\n    }\n\n    /**\n     * @dev Calculates total amount of tokens purchased includes bonus tokens.\n     */\n    function totalAmountOfCrowdsalePurchases() constant public returns (uint256 amount) {\n        for (uint256 i; i < crowdsalePurchases.length; i++) {\n            amount = SafeMath.add(amount, crowdsalePurchases[i].amount);\n        }\n    }\n\n    /**\n     * @dev Calculates total amount of tokens purchased without bonus conversion.\n     */\n    function totalAmountOfCrowdsalePurchasesWithoutBonus() constant public returns (uint256 amount) {\n        for (uint256 i; i < crowdsalePurchases.length; i++) {\n            amount = SafeMath.add(amount, crowdsalePurchases[i].rawAmount);\n        }\n    }\n\n    /**\n     * @dev Returns total raised amount in CNY (includes EP) and bonuses\n     */\n    function totalRaisedAmountInCny() constant public returns (uint256) {\n        return SafeMath.add(totalAmountOfEarlyPurchases(), totalAmountOfCrowdsalePurchases());\n    }\n\n    /**\n     * @dev Returns total amount of early purchases in CNY\n     */\n    function totalAmountOfEarlyPurchases() constant public returns(uint256) {\n       return starbaseEpAmendment.totalAmountOfEarlyPurchases();\n    }\n\n    /**\n     * @dev Allows qualified crowdsale partner to purchase Star Tokens\n     */\n    function purchaseAsQualifiedPartner()\n        payable\n        public\n        rateIsSet(cnyEthRate)\n        returns (bool)\n    {\n        require(qualifiedPartners[msg.sender].bonaFide);\n        qualifiedPartners[msg.sender].amountRaised = SafeMath.add(msg.value, qualifiedPartners[msg.sender].amountRaised);\n\n        assert(qualifiedPartners[msg.sender].amountRaised <= qualifiedPartners[msg.sender].amountCap);\n\n        uint256 bonusTier = 30; // Pre sale purchasers get 30 percent bonus\n        uint256 rawAmount = SafeMath.mul(msg.value, cnyEthRate) / 1e18;\n        uint amount = recordPurchase(msg.sender, rawAmount, now, '', bonusTier);\n\n        if (qualifiedPartners[msg.sender].commissionFeePercentage > 0) {\n            sendQualifiedPartnerCommissionFee(msg.sender, msg.value);\n        }\n\n        StarbasePurchasedWithEth(msg.sender, amount, rawAmount, cnyEthRate, bonusTier);\n        return true;\n    }\n\n    /**\n     * @dev Allows user to purchase STAR tokens with Ether\n     */\n    function purchaseWithEth()\n        payable\n        public\n        minInvestment\n        whenNotEnded\n        rateIsSet(cnyEthRate)\n        returns (bool)\n    {\n        require(purchaseStartBlock > 0 && block.number >= purchaseStartBlock);\n        if (startDate == 0) {\n            startCrowdsale(block.timestamp);\n        }\n\n        uint256 bonusTier = getBonusTier();\n\n        uint256 rawAmount = SafeMath.mul(msg.value, cnyEthRate) / 1e18;\n        uint amount = recordPurchase(msg.sender, rawAmount, now, '', bonusTier);\n\n        StarbasePurchasedWithEth(msg.sender, amount, rawAmount, cnyEthRate, bonusTier);\n        return true;\n    }\n\n    /**\n     * Internal functions\n     */\n\n    /**\n     * @dev Initializes Starbase crowdsale\n     */\n    function startCrowdsale(uint256 timestamp) internal {\n        startDate = timestamp;\n\n        // set token bonus milestones\n        firstBonusSalesEnds = startDate + 7 days;             // 1. 1st ~ 7th day\n        secondBonusSalesEnds = firstBonusSalesEnds + 14 days; // 2. 8th ~ 21st day\n        thirdBonusSalesEnds = secondBonusSalesEnds + 14 days; // 3. 22nd ~ 35th day\n        fourthBonusSalesEnds = thirdBonusSalesEnds + 7 days;  // 4. 36th ~ 42nd day\n        fifthBonusSalesEnds = fourthBonusSalesEnds + 3 days;  // 5. 43rd ~ 45th day\n\n        // extended sales bonus milestones\n        firstExtendedBonusSalesEnds = fifthBonusSalesEnds + 3 days;         // 1. 46th ~ 48th day\n        secondExtendedBonusSalesEnds = firstExtendedBonusSalesEnds + 3 days; // 2. 49th ~ 51st day\n        thirdExtendedBonusSalesEnds = secondExtendedBonusSalesEnds + 3 days; // 3. 52nd ~ 54th day\n        fourthExtendedBonusSalesEnds = thirdExtendedBonusSalesEnds + 3 days; // 4. 55th ~ 57th day\n        fifthExtendedBonusSalesEnds = fourthExtendedBonusSalesEnds + 3 days;  // 5. 58th ~ 60th day\n        sixthExtendedBonusSalesEnds = fifthExtendedBonusSalesEnds + 60 days; // 6. 61st ~ 120th day\n    }\n\n    /**\n     * @dev Abstract record of a purchase to Tokens\n     * @param purchaser Address of the buyer\n     * @param rawAmount Amount in CNY as per the CNY/ETH rate used\n     * @param timestamp Timestamp at the purchase made\n     * @param data Identifier as an evidence of the purchase (e.g. btc:1xyzxyz)\n     * @param bonusTier bonus milestones of the purchase\n     */\n    function recordPurchase(\n        address purchaser,\n        uint256 rawAmount,\n        uint256 timestamp,\n        string data,\n        uint256 bonusTier\n    )\n        internal\n        returns(uint256 amount)\n    {\n        amount = rawAmount; // amount to check reach of max cap. it does not care for bonus tokens here\n\n        // presale transfers which occurs before the crowdsale ignores the crowdsale hard cap\n        if (block.number >= purchaseStartBlock) {\n\n            assert(totalAmountOfCrowdsalePurchasesWithoutBonus() <= maxCrowdsaleCap);\n\n            uint256 crowdsaleTotalAmountAfterPurchase = SafeMath.add(totalAmountOfCrowdsalePurchasesWithoutBonus(), amount);\n\n            // check whether purchase goes over the cap and send the difference back to the purchaser.\n            if (crowdsaleTotalAmountAfterPurchase > maxCrowdsaleCap) {\n              uint256 difference = SafeMath.sub(crowdsaleTotalAmountAfterPurchase, maxCrowdsaleCap);\n              uint256 ethValueToReturn = SafeMath.mul(difference, 1e18) / cnyEthRate;\n              purchaser.transfer(ethValueToReturn);\n              amount = SafeMath.sub(amount, difference);\n              rawAmount = amount;\n            }\n\n        }\n\n        uint256 covertedAmountwWithBonus = SafeMath.mul(amount, bonusTier) / 100;\n        amount = SafeMath.add(amount, covertedAmountwWithBonus); // at this point amount bonus is calculated\n\n        CrowdsalePurchase memory purchase = CrowdsalePurchase(purchaser, amount, rawAmount, timestamp, data, bonusTier);\n        crowdsalePurchases.push(purchase);\n        crowdsalePurchaseAmountBy[purchaser] = SafeMath.add(crowdsalePurchaseAmountBy[purchaser], amount);\n        return amount;\n    }\n\n    /**\n     * @dev Fetchs Bonus tier percentage per bonus milestones\n     */\n    function getBonusTier() internal returns (uint256) {\n        bool firstBonusSalesPeriod = now >= startDate && now <= firstBonusSalesEnds; // 1st ~ 7th day get 20% bonus\n        bool secondBonusSalesPeriod = now > firstBonusSalesEnds && now <= secondBonusSalesEnds; // 8th ~ 21st day get 15% bonus\n        bool thirdBonusSalesPeriod = now > secondBonusSalesEnds && now <= thirdBonusSalesEnds; // 22nd ~ 35th day get 10% bonus\n        bool fourthBonusSalesPeriod = now > thirdBonusSalesEnds && now <= fourthBonusSalesEnds; // 36th ~ 42nd day get 5% bonus\n        bool fifthBonusSalesPeriod = now > fourthBonusSalesEnds && now <= fifthBonusSalesEnds; // 43rd and 45th day get 0% bonus\n\n        // extended bonus sales\n        bool firstExtendedBonusSalesPeriod = now > fifthBonusSalesEnds && now <= firstExtendedBonusSalesEnds; // extended sales 46th ~ 48th day get 20% bonus\n        bool secondExtendedBonusSalesPeriod = now > firstExtendedBonusSalesEnds && now <= secondExtendedBonusSalesEnds; // 49th ~ 51st 15% bonus\n        bool thirdExtendedBonusSalesPeriod = now > secondExtendedBonusSalesEnds && now <= thirdExtendedBonusSalesEnds; // 52nd ~ 54th day get 10% bonus\n        bool fourthExtendedBonusSalesPeriod = now > thirdExtendedBonusSalesEnds && now <= fourthExtendedBonusSalesEnds; // 55th ~ 57th day day get 5% bonus\n        bool fifthExtendedBonusSalesPeriod = now > fourthExtendedBonusSalesEnds && now <= fifthExtendedBonusSalesEnds; // 58th ~ 60th day get 0% bonus\n        bool sixthExtendedBonusSalesPeriod = now > fifthExtendedBonusSalesEnds && now <= sixthExtendedBonusSalesEnds; // 61st ~ 120th day get {number_of_days} - 60 * 1% bonus\n\n        if (firstBonusSalesPeriod || firstExtendedBonusSalesPeriod) return 20;\n        if (secondBonusSalesPeriod || secondExtendedBonusSalesPeriod) return 15;\n        if (thirdBonusSalesPeriod || thirdExtendedBonusSalesPeriod) return 10;\n        if (fourthBonusSalesPeriod || fourthExtendedBonusSalesPeriod) return 5;\n        if (fifthBonusSalesPeriod || fifthExtendedBonusSalesPeriod) return 0;\n\n        if (sixthExtendedBonusSalesPeriod) {\n          uint256 DAY_IN_SECONDS = 86400;\n          uint256 secondsSinceStartDate = SafeMath.sub(now, startDate);\n          uint256 numberOfDays = secondsSinceStartDate / DAY_IN_SECONDS;\n\n          return SafeMath.sub(numberOfDays, 60);\n        }\n    }\n\n    /**\n     * @dev Fetchs Bonus tier percentage per bonus milestones\n     * @dev qualifiedPartner Address of partners that participated in pre sale\n     * @dev amountSent Value sent by qualified partner\n     */\n    function sendQualifiedPartnerCommissionFee(address qualifiedPartner, uint256 amountSent) internal {\n        //calculate the commission fee to send to qualified partner\n        uint256 commissionFeePercentageCalculationAmount = SafeMath.mul(amountSent, qualifiedPartners[qualifiedPartner].commissionFeePercentage) / 100;\n\n        // send commission fee amount\n        qualifiedPartner.transfer(commissionFeePercentageCalculationAmount);\n    }\n\n    /**\n     * @dev redirectToPurchase Redirect to adequate purchase function within the smart contract\n     */\n    function redirectToPurchase() internal {\n        if (block.number < purchaseStartBlock) {\n            purchaseAsQualifiedPartner();\n        } else {\n            purchaseWithEth();\n        }\n    }\n}"
}