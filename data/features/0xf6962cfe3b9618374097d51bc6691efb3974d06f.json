{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 SLOAD TIMESTAMP GT ISZERO ISZERO PUSH2 JUMPI PUSH2 CALLER PUSH2 JUMP JUMPDEST JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP PUSH1 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLVALUE SWAP2 POP PUSH2 PUSH1 SLOAD DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP DUP1 PUSH1 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP3 EQ DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH9 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND BALANCE LT ISZERO ISZERO PUSH2 JUMPI PUSH2 PUSH2 PUSH2 PUSH2 PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND BALANCE PUSH2 PUSH2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP DUP1 DUP4 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP4 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 PUSH1 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP4 DUP3 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP4 PUSH20 AND DUP6 PUSH20 AND PUSH32 DUP6 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP PUSH1 SLOAD LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH8 DUP5 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP2 POP DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 SLOAD DUP4 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP DUP1 ADDRESS PUSH20 AND BALANCE LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP CALLER PUSH20 AND PUSH2 DUP3 SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH9 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND BALANCE LT ISZERO ISZERO PUSH2 JUMPI PUSH2 PUSH2 PUSH2 PUSH2 PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND BALANCE PUSH2 PUSH2 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP PUSH1 SLOAD LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP PUSH1 SLOAD LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND BALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST TIMESTAMP PUSH1 SLOAD LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD GT ISZERO PUSH2 JUMPI PUSH2 PUSH1 SLOAD PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP JUMPDEST JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND SWAP1 POP PUSH2 DUP3 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 MUL SWAP1 POP PUSH1 DUP5 EQ DUP1 PUSH2 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP1 POP DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI DUP1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP JUMPDEST POP JUMP STOP LOG1 PUSH6 SHA3 SMOD DUP13 UNKNOWN_0x2c MULMOD PUSH28 UNKNOWN_0x29",
  "opcode_entropy": 4.711533306658327,
  "opcode_count": 3996,
  "unique_opcodes": 63,
  "byte_entropy": 4.734157862548109,
  "byte_60": 0.06221906789685356,
  "byte_40": 0.009108114502010883,
  "byte_52": 0.012893304944405016,
  "byte_04": 0.009226401703335699,
  "byte_36": 0.00035486160397445,
  "byte_10": 0.00319375443577005,
  "byte_61": 0.03536787319612018,
  "byte_01": 0.025195173882185947,
  "byte_c2": 0.0007097232079489,
  "byte_57": 0.014785900165602082,
  "byte_00": 0.032647267565649396,
  "byte_35": 0.0023657440264963333,
  "byte_7c": 0.00035486160397445,
  "byte_90": 0.03915306363851431,
  "byte_63": 0.007570380884788266,
  "byte_ff": 0.33901111899692454,
  "byte_16": 0.023066004258339247,
  "byte_80": 0.031227821149751596,
  "byte_06": 0.0046132008516678496,
  "byte_fd": 0.007688668086113083,
  "byte_de": 0.00011828720132481665,
  "byte_03": 0.008634965696711615,
  "byte_14": 0.008280104092737165,
  "byte_d9": 0.00035486160397445,
  "byte_09": 0.0029571800331204164,
  "byte_5e": 0.0004731488052992666,
  "byte_a7": 0.0007097232079489,
  "byte_b3": 0.0016560208185474332,
  "byte_02": 0.0050863496569671166,
  "byte_67": 0.0007097232079489,
  "byte_0b": 0.0004731488052992666,
  "byte_e0": 0.0007097232079489,
  "byte_94": 0.00035486160397445,
  "byte_c1": 0.0002365744026496333,
  "byte_11": 0.0015377336172226164,
  "byte_b8": 0.0004731488052992666,
  "byte_f9": 0.00035486160397445,
  "byte_e4": 0.0002365744026496333,
  "byte_18": 0.0005914360066240833,
  "byte_0d": 0.0009462976105985332,
  "byte_dd": 0.0008280104092737166,
  "byte_1a": 0.0010645848119233499,
  "byte_9b": 0.0009462976105985332,
  "byte_23": 0.0005914360066240833,
  "byte_72": 0.0004731488052992666,
  "byte_27": 0.0008280104092737166,
  "byte_8e": 0.0002365744026496333,
  "byte_cd": 0.00035486160397445,
  "byte_e1": 0.00035486160397445,
  "byte_dc": 0.0004731488052992666,
  "byte_29": 0.0004731488052992666,
  "byte_b0": 0.0004731488052992666,
  "byte_cf": 0.0002365744026496333,
  "byte_f4": 0.0004731488052992666,
  "byte_2f": 0.0007097232079489,
  "byte_f2": 0.0009462976105985332,
  "byte_e9": 0.00011828720132481665,
  "byte_1d": 0.0008280104092737166,
  "byte_31": 0.0010645848119233499,
  "byte_3c": 0.0004731488052992666,
  "byte_e5": 0.00035486160397445,
  "byte_46": 0.0002365744026496333,
  "byte_9e": 0.0005914360066240833,
  "byte_ac": 0.0002365744026496333,
  "byte_6f": 0.00035486160397445,
  "byte_34": 0.0043766264490182165,
  "byte_fc": 0.0008280104092737166,
  "byte_37": 0.0005914360066240833,
  "byte_98": 0.00035486160397445,
  "byte_3f": 0.0002365744026496333,
  "byte_4b": 0.00011828720132481665,
  "byte_a8": 0.00035486160397445,
  "byte_3a": 0.00035486160397445,
  "byte_bb": 0.0004731488052992666,
  "byte_5c": 0.0007097232079489,
  "byte_97": 0.00035486160397445,
  "byte_5a": 0.0004731488052992666,
  "byte_e8": 0.00035486160397445,
  "byte_55": 0.002720605630470783,
  "byte_8f": 0.00011828720132481665,
  "byte_05": 0.0029571800331204164,
  "byte_15": 0.022829429855689615,
  "byte_66": 0.0002365744026496333,
  "byte_4e": 0.0002365744026496333,
  "byte_6d": 0.0002365744026496333,
  "byte_7f": 0.0010645848119233499,
  "byte_d8": 0.00035486160397445,
  "byte_a3": 0.0009462976105985332,
  "byte_77": 0.0002365744026496333,
  "byte_70": 0.0009462976105985332,
  "byte_a0": 0.0004731488052992666,
  "byte_82": 0.008161816891412349,
  "byte_a4": 0.00035486160397445,
  "byte_79": 0.00035486160397445,
  "byte_d7": 0.0004731488052992666,
  "byte_1e": 0.0009462976105985332,
  "byte_f1": 0.0007097232079489,
  "byte_43": 0.00011828720132481665,
  "byte_38": 0.00035486160397445,
  "byte_bd": 0.0005914360066240833,
  "byte_84": 0.0018925952211970665,
  "byte_56": 0.0127750177430802,
  "byte_cb": 0.0002365744026496333,
  "byte_59": 0.0004731488052992666,
  "byte_8b": 0.0007097232079489,
  "byte_c0": 0.00035486160397445,
  "byte_58": 0.0002365744026496333,
  "byte_33": 0.0029571800331204164,
  "byte_8d": 0.0004731488052992666,
  "byte_a5": 0.00011828720132481665,
  "byte_5b": 0.027087769103383015,
  "byte_71": 0.0002365744026496333,
  "byte_95": 0.0004731488052992666,
  "byte_41": 0.00035486160397445,
  "byte_c6": 0.00035486160397445,
  "byte_9d": 0.00035486160397445,
  "byte_92": 0.0018925952211970665,
  "byte_5f": 0.00035486160397445,
  "byte_c8": 0.0005914360066240833,
  "byte_07": 0.0026023184291459663,
  "byte_54": 0.010172699313934233,
  "byte_a9": 0.0004731488052992666,
  "byte_9c": 0.00035486160397445,
  "byte_7d": 0.00035486160397445,
  "byte_b6": 0.00035486160397445,
  "byte_42": 0.0011828720132481666,
  "byte_88": 0.0008280104092737166,
  "byte_ce": 0.00035486160397445,
  "byte_74": 0.0002365744026496333,
  "byte_ee": 0.0002365744026496333,
  "byte_f6": 0.00035486160397445,
  "byte_62": 0.0002365744026496333,
  "byte_ed": 0.0002365744026496333,
  "byte_3e": 0.0004731488052992666,
  "byte_08": 0.0023657440264963333,
  "byte_1f": 0.0046132008516678496,
  "byte_e2": 0.0007097232079489,
  "byte_cc": 0.0009462976105985332,
  "byte_17": 0.0016560208185474332,
  "byte_f8": 0.00035486160397445,
  "byte_ec": 0.0004731488052992666,
  "byte_8a": 0.0002365744026496333,
  "byte_c4": 0.0004731488052992666,
  "byte_e3": 0.00011828720132481665,
  "byte_fa": 0.00011828720132481665,
  "byte_8c": 0.0004731488052992666,
  "byte_24": 0.0002365744026496333,
  "byte_d6": 0.0002365744026496333,
  "byte_0c": 0.0009462976105985332,
  "byte_0a": 0.0050863496569671166,
  "byte_51": 0.0099361249112846,
  "byte_20": 0.01939910101726993,
  "byte_81": 0.021055121835817366,
  "byte_83": 0.004849775254317483,
  "byte_91": 0.015495623373550982,
  "byte_50": 0.02365744026496333,
  "byte_2c": 0.00035486160397445,
  "byte_19": 0.0021291696238466998,
  "byte_f3": 0.003430328838419683,
  "byte_73": 0.01656020818547433,
  "byte_0e": 0.0008280104092737166,
  "byte_ef": 0.0005914360066240833,
  "byte_f7": 0.00035486160397445,
  "byte_0f": 0.0018925952211970665,
  "byte_49": 0.0002365744026496333,
  "byte_6e": 0.0002365744026496333,
  "byte_df": 0.00035486160397445,
  "byte_12": 0.0005914360066240833,
  "byte_6a": 0.00011828720132481665,
  "byte_28": 0.0004731488052992666,
  "byte_30": 0.0004731488052992666,
  "byte_76": 0.00035486160397445,
  "byte_7a": 0.00035486160397445,
  "byte_b9": 0.0002365744026496333,
  "byte_fb": 0.00011828720132481665,
  "byte_26": 0.0002365744026496333,
  "byte_4c": 0.0002365744026496333,
  "byte_39": 0.0002365744026496333,
  "byte_af": 0.00011828720132481665,
  "byte_db": 0.0002365744026496333,
  "byte_25": 0.0007097232079489,
  "byte_d1": 0.0004731488052992666,
  "byte_fe": 0.0007097232079489,
  "byte_1b": 0.0011828720132481666,
  "byte_64": 0.00035486160397445,
  "byte_1c": 0.0002365744026496333,
  "byte_2a": 0.00011828720132481665,
  "byte_75": 0.00035486160397445,
  "byte_96": 0.00011828720132481665,
  "byte_eb": 0.00035486160397445,
  "byte_7b": 0.00035486160397445,
  "byte_bc": 0.00011828720132481665,
  "byte_86": 0.0007097232079489,
  "byte_85": 0.0010645848119233499,
  "byte_ad": 0.0005914360066240833,
  "byte_69": 0.0004731488052992666,
  "byte_68": 0.0008280104092737166,
  "byte_aa": 0.0004731488052992666,
  "byte_2b": 0.0005914360066240833,
  "byte_a1": 0.0015377336172226164,
  "byte_f5": 0.0007097232079489,
  "byte_4d": 0.0007097232079489,
  "byte_4f": 0.0002365744026496333,
  "byte_b2": 0.00011828720132481665,
  "byte_c7": 0.00035486160397445,
  "byte_c3": 0.00011828720132481665,
  "byte_93": 0.0005914360066240833,
  "byte_3d": 0.00035486160397445,
  "byte_b5": 0.0002365744026496333,
  "byte_da": 0.0002365744026496333,
  "byte_ea": 0.0009462976105985332,
  "byte_be": 0.00035486160397445,
  "byte_ae": 0.0002365744026496333,
  "byte_d0": 0.00011828720132481665,
  "byte_22": 0.00035486160397445,
  "byte_2d": 0.0002365744026496333,
  "byte_87": 0.0004731488052992666,
  "byte_13": 0.0005914360066240833,
  "byte_65": 0.0002365744026496333,
  "byte_3b": 0.0002365744026496333,
  "byte_78": 0.0002365744026496333,
  "byte_9f": 0.0002365744026496333,
  "byte_2e": 0.0002365744026496333,
  "byte_45": 0.00011828720132481665,
  "byte_6c": 0.0002365744026496333,
  "byte_ca": 0.00011828720132481665,
  "byte_b7": 0.0002365744026496333,
  "byte_e6": 0.00011828720132481665,
  "byte_d3": 0.00035486160397445,
  "byte_bf": 0.00011828720132481665,
  "byte_99": 0.00011828720132481665,
  "byte_48": 0.00011828720132481665,
  "num_nodes": 8,
  "num_edges": 8,
  "avg_degree": 2.0,
  "density": 0.14285714285714285,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 13,
  "event_nums": 7,
  "creation_block": 4654184,
  "creation_timestamp": 1512103778,
  "life_time": 408231.0,
  "duration_seconds": 6125961.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 9,
  "num_buyers": 2,
  "num_sellers": 8,
  "num_creator_transfers": 1,
  "buy_amt": 5.1e+17,
  "sell_amt": 8.15849032e+17,
  "avg_value": 9.470350228571429e+16,
  "txn_per_block": 3.184463736306806e-05,
  "avg_gas_limit": 250491.53846153847,
  "std_gas_limit": 701862.9529386681,
  "avg_gas_used": 238504.15384615384,
  "std_gas_used": 704970.5957583071,
  "avg_gas_price": 20923076923.076923,
  "std_gas_price": 15900950810.765705,
  "unpause_num": 1,
  "transfer_num": 1,
  "cashout_num": 1,
  "timeline_sequence": [
    [
      4654184,
      1512103778,
      0,
      15,
      0,
      2679620,
      20000000000,
      0,
      1,
      3765867,
      2679620,
      18467340
    ],
    [
      4654986,
      1512115197,
      4,
      10,
      0,
      42664,
      27000000000,
      0,
      1,
      274821,
      28443,
      18466538
    ],
    [
      4664734,
      1512253514,
      0,
      19,
      100000000000000000,
      90000,
      20000000000,
      0,
      1,
      598517,
      56326,
      18456790
    ],
    [
      4687291,
      1512595897,
      7,
      73,
      30000000000000000,
      84489,
      42000000000,
      0,
      1,
      3198426,
      56326,
      18434233
    ],
    [
      4718393,
      1513061018,
      44,
      29,
      200000000000000000,
      84489,
      50000000000,
      0,
      1,
      1124563,
      56326,
      18403131
    ],
    [
      4752773,
      1513577316,
      14,
      210,
      150000000000000000,
      21000,
      5000000000,
      1,
      0,
      7919738,
      21000,
      18368751
    ],
    [
      4755816,
      1513622883,
      20,
      160,
      150000000000000000,
      22000,
      5000000000,
      1,
      0,
      7107935,
      22000,
      18365708
    ],
    [
      4761322,
      1513708025,
      29,
      90,
      150000000000000000,
      56326,
      25000000000,
      0,
      1,
      5990098,
      56326,
      18360202
    ],
    [
      4801990,
      1514312595,
      32,
      149,
      30000000000000000,
      84489,
      10000000000,
      0,
      1,
      7757604,
      56326,
      18319534
    ],
    [
      4822989,
      1514622571,
      7,
      43,
      0,
      49779,
      27000000000,
      0,
      1,
      2658185,
      30927,
      18298535
    ],
    [
      5062415,
      1518229739,
      13,
      3,
      0,
      36934,
      41000000000,
      0,
      1,
      159781,
      36934,
      18059109
    ],
    [
      4822989,
      1514622571,
      0,
      0,
      510000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      5062397,
      1518229411,
      0,
      0,
      5849032000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "/**\n*\n* Inspired by FirstBlood Token - firstblood.io\n*\n*/\n\npragma solidity ^0.4.16;\n\n/**\n* @title SafeMath\n* @dev Math operations with safety checks that throw on error\n**/\nlibrary SafeMath {\n\tfunction mul(uint256 a, uint256 b) internal returns (uint256) {\n\t\tuint256 c = a * b;\n\t\tassert(a == 0 || c / a == b);\n\t\treturn c;\n  \t}\n\n  \tfunction div(uint256 a, uint256 b) internal returns (uint256) {\n\t\tuint256 c = a / b;\n\t\treturn c;\n  \t}\n\n\tfunction sub(uint256 a, uint256 b) internal returns (uint256) {\n\t\tassert(b <= a);\n\t\treturn a - b;\n\t}\n\n\tfunction add(uint256 a, uint256 b) internal returns (uint256) {\n\t\t uint256 c = a + b;\n\t\t assert(c >= a);\n\t\t return c;\n\t}\n}\n\n/**\n* @title Ownable\n* @dev The Ownable contract has an owner address, and provides basic authorization control\n* functions, this simplifies the implementation of \"user permissions\".\n**/\ncontract Ownable {\n\taddress public owner;\n\n\t/**\n\t* @dev The Ownable constructor sets the original 'owner' of the contract to the sender\n\t* account.\n\t**/\n\tfunction Ownable() {\n\t\towner = msg.sender;\n\t}\n\n\t/**\n\t* @dev Throws if called by any account other than the owner.\n\t**/\n\tmodifier onlyOwner() {\n\t\trequire(msg.sender == owner);\n\t\t_;\n\t}\n\n\t/**\n\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\n\t* @param newOwner The address to transfer ownership to.\n\t**/\n\tfunction transferOwnership(address newOwner) onlyOwner {\n\t\tif (newOwner != address(0)) {\n\t\t\towner = newOwner;\n\t\t}\n\t}\n}\n\n/**\n* @title Pausable\n* @dev Base contract which allows children to implement an emergency stop mechanism.\n**/\ncontract Pausable is Ownable {\n\tevent Pause();\n\tevent Unpause();\n\tevent PauseRefund();\n\tevent UnpauseRefund();\n\n\tbool public paused = true;\n\tbool public refundPaused = true;\n\t// Deadline set to December 29th, 2017 at 11:59pm PST\n\tuint256 public durationInMinutes = 60*24*29+60*3+10;\n\tuint256 public dayAfterInMinutes = 60*24*30+60*3+10;\n\tuint256 public deadline = now + durationInMinutes * 1 minutes;\n\tuint256 public dayAfterDeadline = now + dayAfterInMinutes * 1 minutes;\n\n\t/**\n\t* @dev modifier to allow actions only when the contract IS NOT paused\n\t**/\n\tmodifier whenNotPaused() {\n\t\trequire(!paused);\n\t\t_;\n\t}\n\n\t/**\n\t* @dev modifier to allow actions only when the refund IS NOT paused\n\t**/\n\tmodifier whenRefundNotPaused() {\n\t\trequire(!refundPaused);\n\t\t_;\n\t}\n\n\t/**\n\t* @dev modifier to allow actions only when the contract IS paused\n\t**/\n\tmodifier whenPaused {\n\t\trequire(paused);\n\t\t_;\n\t}\n\n\t/**\n\t* @dev modifier to allow actions only when the refund IS paused\n\t**/\n\tmodifier whenRefundPaused {\n\t\trequire(refundPaused);\n\t\t_;\n\t}\n\n\t/**\n\t* @dev modifier to allow actions only when the crowdsale has ended\n\t**/\n\tmodifier whenCrowdsaleEnded {\n\t\trequire(deadline < now);\n\t\t_;\n\t}\n\n\t/**\n\t* @dev modifier to allow actions only when the crowdsale has not ended\n\t**/\n\tmodifier whenCrowdsaleNotEnded {\n\t\trequire(deadline >= now);\n\t\t_;\n\t}\n\n\t/**\n\t* @dev called by the owner to pause, triggers stopped state\n\t**/\n\tfunction pause() onlyOwner whenNotPaused returns (bool) {\n\t\tpaused = true;\n\t\tPause();\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev called by the owner to pause, triggers stopped state\n\t**/\n\tfunction pauseRefund() onlyOwner whenRefundNotPaused returns (bool) {\n\t\trefundPaused = true;\n\t\tPauseRefund();\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev called by the owner to unpause, returns to normal state\n\t**/\n\tfunction unpause() onlyOwner whenPaused returns (bool) {\n\t\tpaused = false;\n\t\tUnpause();\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev called by the owner to unpause, returns to normal state\n\t**/\n\tfunction unpauseRefund() onlyOwner whenRefundPaused returns (bool) {\n\t\trefundPaused = false;\n\t\tUnpauseRefund();\n\t\treturn true;\n\t}\n}\n\n/**\n* @title ERC20Basic\n* @dev Simpler version of ERC20 interface\n* @dev see https://github.com/ethereum/EIPs/issues/179\n**/\ncontract ERC20Basic {\n\tuint256 public totalSupply;\n\tfunction balanceOf(address who) constant returns (uint256);\n\tfunction transfer(address to, uint256 value) returns (bool);\n\tevent Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n* @title Basic token\n* @dev Basic version of StandardToken, with no allowances.\n**/\ncontract BasicToken is ERC20Basic {\n\tusing SafeMath for uint256;\n\n\tmapping(address => uint256) balances;\n\n\t/**\n\t* @dev transfer token for a specified address\n\t* @param _to The address to transfer to.\n\t* @param _value The amount to be transferred.\n\t**/\n\tfunction transfer(address _to, uint256 _value) returns (bool) {\n\t\tbalances[msg.sender] = balances[msg.sender].sub(_value);\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tTransfer(msg.sender, _to, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev Gets the balance of the specified address.\n\t* @param _owner The address to query the the balance of.\n\t* @return An uint256 representing the amount owned by the passed address.\n\t**/\n\tfunction balanceOf(address _owner) constant returns (uint256 balance) {\n\t\treturn balances[_owner];\n\t}\n}\n\n/**\n* @title ERC20 interface\n* @dev see https://github.com/ethereum/EIPs/issues/20\n**/\ncontract ERC20 is ERC20Basic {\n\tfunction allowance(address owner, address spender) constant returns (uint256);\n\tfunction transferFrom(address from, address to, uint256 value) returns (bool);\n\tfunction approve(address spender, uint256 value) returns (bool);\n\tevent Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n* @title Standard ERC20 token\n*\n* @dev Implementation of the basic standard token.\n* @dev https://github.com/ethereum/EIPs/issues/20\n* @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n**/\ncontract StandardToken is ERC20, BasicToken {\n\n\tmapping (address => mapping (address => uint256)) allowed;\n\n\t/**\n\t* @dev Transfer tokens from one address to another\n\t* @param _from address The address which you want to send tokens from\n\t* @param _to address The address which you want to transfer to\n\t* @param _value uint256 the amout of tokens to be transfered\n\t**/\n\tfunction transferFrom(address _from, address _to, uint256 _value) returns (bool) {\n\t\tvar _allowance = allowed[_from][msg.sender];\n\n\t\trequire (_value <= _allowance);\n\n\t\tbalances[_to] = balances[_to].add(_value);\n\t\tbalances[_from] = balances[_from].sub(_value);\n\t\tallowed[_from][msg.sender] = _allowance.sub(_value);\n\t\t\n\t\tTransfer(_from, _to, _value);\n\t\t\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\n\t* @param _spender The address which will spend the funds.\n\t* @param _value The amount of tokens to be spent.\n\t**/\n\tfunction approve(address _spender, uint256 _value) returns (bool) {\n\t\t\n\t\t/**\n\t\t* To change the approve amount you first have to reduce the addresses'\n\t\t* allowance to zero by calling 'approve(_spender, 0)' if it is not\n\t\t* already 0 to mitigate the race condition described here: \n\t\thttps://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n\t\t**/\n\t\trequire((_value == 0) || (allowed[msg.sender][_spender] == 0));\n\n\t\tallowed[msg.sender][_spender] = _value;\n\t\tApproval(msg.sender, _spender, _value);\n\t\treturn true;\n\t}\n\n\t/**\n\t* @dev Function to check the amount of tokens that an owner allowed to a spender.\n\t* @param _owner address The address which owns the funds.\n\t* @param _spender address The address which will spend the funds.\n\t* @return A uint256 specifing the amount of tokens still available for the spender.\n\t**/\n\tfunction allowance(address _owner, address _spender) constant returns (uint256 remaining) {\n\t\treturn allowed[_owner][_spender];\n\t}\n\n}\n\n/**\n* @title hodlToken\n* @dev All tokens are pre-assigned to the creator.\n* Tokens can be transferred using 'transfer' and other\n* 'StandardToken' functions.\n**/\ncontract hodlToken is Pausable, StandardToken {\n\n\tusing SafeMath for uint256;\n\n\taddress public escrow = this;\n\n\t//20% Finder allocation \n\tuint256 public purchasableTokens = 112000 * 10**18;\n\tuint256 public founderAllocation = 28000 * 10**18;\n\n\tstring public name = \"TeamHODL Token\";\n\tstring public symbol = \"THODL\";\n\tuint256 public decimals = 18;\n\tuint256 public INITIAL_SUPPLY = 140000 * 10**18;\n\n\tuint256 public RATE = 200;\n\tuint256 public REFUND_RATE = 200;\n\n\t/**\n\t* @dev Contructor that gives msg.sender all of existing tokens.\n\t**/\n\tfunction hodlToken() {\n\t\ttotalSupply = INITIAL_SUPPLY;\n\t\tbalances[msg.sender] = INITIAL_SUPPLY;\n\t}\n\n\t/**\n\t* @dev Allows the current owner to transfer control of the contract to a newOwner.\n\t* @param newOwner The address to transfer ownership to.\n\t**/\n\tfunction transferOwnership(address newOwner) onlyOwner {\n\t\taddress oldOwner = owner;\n\t\tsuper.transferOwnership(newOwner);\n\t\tbalances[newOwner] = balances[oldOwner];\n\t\tbalances[oldOwner] = 0;\n\t}\n\n\t/**\n\t* @dev Allows the current owner to transfer escrowship of the contract to a escrow account.\n\t* @param newEscrow The address to transfer the escrow account to.\n\t**/\n\tfunction transferEscrowship(address newEscrow) onlyOwner {\n\t\tif (newEscrow != address(0)) {\n\t\t\tescrow = newEscrow;\n\t\t}\n\t}\n\n\t/**\n\t* @dev Allows the current owner to set the new total supply, to be used iff not all tokens sold during crowdsale.\n\t**/\n\tfunction setTotalSupply() onlyOwner whenCrowdsaleEnded {\n\t\tif (purchasableTokens > 0) {\n\t\t\ttotalSupply = totalSupply.sub(purchasableTokens);\n\t\t}\n\t}\n\n\t/**\n\t* @dev Allows the current owner to withdraw ether funds after ICO ended.\n\t**/\n\tfunction cashOut() onlyOwner whenCrowdsaleEnded {\n\t\t\n\t\t/**\n\t\t* Transfer money from escrow wallet up to 1 day after ICO end.\n\t\t**/\n\t\tif (dayAfterDeadline >= now) {\n\t\t\towner.transfer(escrow.balance);\n\t\t}\n\t}\n  \n\t/**\n\t* @dev Allows owner to change the exchange rate of tokens (default 0.005 Ether)\n\t**/\n\tfunction setRate(uint256 rate) {\n\n\t\t/**\n\t\t* If break-even point has been reached (3500 Eth = 3.5*10**21 Wei),\n\t\t* rate updates to 20% of total revenue (100% of dedicated wallet after forwarding contract)\n\t\t**/\n\t\tif (escrow.balance >= 7*10**20) {\n\n\t\t\t/**\n\t\t\t* Rounds up to address division error\n\t\t\t**/\n\t\t\tRATE = (((totalSupply.mul(10000)).div(escrow.balance)).add(9999)).div(10000);\n\t\t}\n\t}\n  \n\t/**\n\t* @dev Allows owner to change the refund exchange rate of tokens (default 0.005 Ether)\n\t* @param rate The number of tokens to release\n\t**/\n\tfunction setRefundRate(uint256 rate) {\n\n\t\t/**\n\t\t* If break-even point has been reached (3500 Eth = 3.5*10**21 Wei),\n\t\t* refund rate updates to 20% of total revenue (100% of dedicated wallet after forwarding contract)\n\t\t**/\n\t\tif (escrow.balance >= 7*10**20) {\n\n\t\t\t/**\n\t\t\t* Rounds up to address division error\n\t\t\t**/\n\t\t\tREFUND_RATE = (((totalSupply.mul(10000)).div(escrow.balance)).add(9999)).div(10000);\n\t\t}\n\t}\n\n\t/**\n\t* @dev fallback function\n\t**/\n\tfunction () payable {\n\t\tif(now <= deadline){\n\t\t\tbuyTokens(msg.sender);\n\t\t}\n\t}\n\n\t/**\n\t* @dev function that sells available tokens\n\t**/\n\tfunction buyTokens(address addr) payable whenNotPaused whenCrowdsaleNotEnded {\n\t\t\n\t\t/**\n\t\t* Calculate tokens to sell and check that they are purchasable\n\t\t**/\n\t\tuint256 weiAmount = msg.value;\n\t\tuint256 tokens = weiAmount.mul(RATE);\n\t\trequire(purchasableTokens >= tokens);\n\n\t\t/**\n\t\t* Send tokens to buyer\n\t\t**/\n\t\tpurchasableTokens = purchasableTokens.sub(tokens);\n\t\tbalances[owner] = balances[owner].sub(tokens);\n\t\tbalances[addr] = balances[addr].add(tokens);\n\n\t\tTransfer(owner, addr, tokens);\n\t}\n  \n\tfunction fund() payable {}\n\n\tfunction defund() onlyOwner {}\n\n\tfunction refund(uint256 _amount) payable whenNotPaused whenCrowdsaleEnded {\n\n\t\t/**\n\t\t* Calculate amount of THODL to refund\n\t\t**/\n\t\tuint256 refundTHODL = _amount.mul(10**18);\n\t\trequire(balances[msg.sender] >= refundTHODL);\n\n\t\t/**\n\t\t* Calculate refund in wei\n\t\t**/\n\t\tuint256 weiAmount = refundTHODL.div(REFUND_RATE);\n\t\trequire(this.balance >= weiAmount);\n\n\t\tbalances[msg.sender] = balances[msg.sender].sub(refundTHODL);\n\t\t\n\t\t/**\n\t\t* The tokens are burned\n\t\t**/\n\t\ttotalSupply = totalSupply.sub(refundTHODL);\n\n\t\tmsg.sender.transfer(weiAmount);\n\t}\n}"
}