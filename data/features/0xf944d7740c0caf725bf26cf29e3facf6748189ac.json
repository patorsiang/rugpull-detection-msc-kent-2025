{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP3 SWAP2 SWAP3 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP PUSH2 PUSH1 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 DUP1 CALLVALUE GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SLOAD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 SLOAD CALLVALUE PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST SWAP1 POP PUSH2 PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND CALLER DUP4 PUSH2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP1 POP SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 ADDRESS PUSH20 AND BALANCE LT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH2 ADDRESS PUSH20 AND BALANCE SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP2 SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 DUP3 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 DUP5 SWAP1 POP PUSH2 DUP6 DUP6 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI DUP1 PUSH20 AND PUSH4 CALLER DUP7 ADDRESS DUP8 PUSH1 MLOAD DUP6 PUSH4 AND PUSH29 MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP6 POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 JUMPI RETURNDATASIZE PUSH1 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 REVERT JUMPDEST POP POP POP POP PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP2 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SWAP2 POP POP SLOAD DUP2 JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 DUP3 DUP3 PUSH1 MLOAD DUP1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 DUP1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP5 EQ ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST DUP3 DUP5 MUL SWAP1 POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 DUP3 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP2 PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP2 PUSH20 AND DUP4 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP5 DUP5 DUP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 CALLER DUP4 DUP4 PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 UNKNOWN_0xc8 UNKNOWN_0xc7 DUP7 UNKNOWN_0xd6 DUP15 MUL UNKNOWN_0xb3 UNKNOWN_0xc0 INVALID_0x7b",
  "opcode_entropy": 4.745621694986019,
  "opcode_count": 2793,
  "unique_opcodes": 67,
  "byte_entropy": 4.637123958382102,
  "byte_60": 0.06571480871316127,
  "byte_80": 0.039538714991762765,
  "byte_40": 0.00805418268350723,
  "byte_52": 0.0166575141863445,
  "byte_04": 0.009152480322167308,
  "byte_36": 0.002196595277320154,
  "byte_10": 0.003660992128866923,
  "byte_61": 0.030569284276038805,
  "byte_00": 0.04027091341753615,
  "byte_fc": 0.0009152480322167307,
  "byte_57": 0.013728720483250962,
  "byte_35": 0.004576240161083654,
  "byte_7c": 0.0005491488193300384,
  "byte_01": 0.03423027640490573,
  "byte_90": 0.03789126853377265,
  "byte_63": 0.004942339373970346,
  "byte_ff": 0.3216181585209592,
  "byte_16": 0.022149002379644882,
  "byte_06": 0.0032948929159802307,
  "byte_fd": 0.007321984257733846,
  "byte_de": 0.0003660992128866923,
  "byte_03": 0.010982976386600769,
  "byte_14": 0.006406736225517115,
  "byte_09": 0.0016474464579901153,
  "byte_5e": 0.00018304960644334616,
  "byte_a7": 0.0003660992128866923,
  "byte_b3": 0.0005491488193300384,
  "byte_96": 0.00018304960644334616,
  "byte_18": 0.00018304960644334616,
  "byte_0d": 0.0018304960644334614,
  "byte_dd": 0.0007321984257733846,
  "byte_fb": 0.00018304960644334616,
  "byte_23": 0.0003660992128866923,
  "byte_b8": 0.0003660992128866923,
  "byte_72": 0.0003660992128866923,
  "byte_02": 0.005857587406187077,
  "byte_26": 0.0003660992128866923,
  "byte_31": 0.0007321984257733846,
  "byte_3c": 0.0003660992128866923,
  "byte_e5": 0.0003660992128866923,
  "byte_67": 0.00018304960644334616,
  "byte_ab": 0.00018304960644334616,
  "byte_70": 0.00018304960644334616,
  "byte_a0": 0.00018304960644334616,
  "byte_82": 0.009152480322167308,
  "byte_dc": 0.00018304960644334616,
  "byte_73": 0.015925315760571115,
  "byte_62": 0.0005491488193300384,
  "byte_37": 0.0007321984257733846,
  "byte_7b": 0.0003660992128866923,
  "byte_33": 0.0029287937030935385,
  "byte_86": 0.0014643968515467693,
  "byte_20": 0.025443895295625116,
  "byte_41": 0.0003660992128866923,
  "byte_0b": 0.0020135456708768075,
  "byte_4a": 0.0003660992128866923,
  "byte_8d": 0.0003660992128866923,
  "byte_a5": 0.0005491488193300384,
  "byte_cb": 0.0003660992128866923,
  "byte_5b": 0.025260845689181768,
  "byte_75": 0.00018304960644334616,
  "byte_95": 0.0005491488193300384,
  "byte_d8": 0.0005491488193300384,
  "byte_9b": 0.0003660992128866923,
  "byte_cc": 0.0003660992128866923,
  "byte_9e": 0.00018304960644334616,
  "byte_69": 0.0005491488193300384,
  "byte_85": 0.0023796448837635,
  "byte_e2": 0.0003660992128866923,
  "byte_5c": 0.00018304960644334616,
  "byte_a6": 0.0003660992128866923,
  "byte_f2": 0.0009152480322167307,
  "byte_ae": 0.00018304960644334616,
  "byte_3a": 0.00018304960644334616,
  "byte_89": 0.00018304960644334616,
  "byte_a9": 0.0003660992128866923,
  "byte_05": 0.0027457440966501922,
  "byte_9c": 0.0003660992128866923,
  "byte_bb": 0.00018304960644334616,
  "byte_93": 0.001281347245103423,
  "byte_b4": 0.0005491488193300384,
  "byte_d4": 0.0003660992128866923,
  "byte_b6": 0.00018304960644334616,
  "byte_e0": 0.00018304960644334616,
  "byte_ca": 0.0003660992128866923,
  "byte_e9": 0.0003660992128866923,
  "byte_51": 0.008969430715723961,
  "byte_3b": 0.0003660992128866923,
  "byte_ed": 0.0007321984257733846,
  "byte_3e": 0.0005491488193300384,
  "byte_e6": 0.00018304960644334616,
  "byte_e7": 0.00018304960644334616,
  "byte_24": 0.00018304960644334616,
  "byte_5d": 0.00018304960644334616,
  "byte_e3": 0.0003660992128866923,
  "byte_8b": 0.0003660992128866923,
  "byte_ac": 0.0005491488193300384,
  "byte_ef": 0.0005491488193300384,
  "byte_56": 0.011532125205930808,
  "byte_34": 0.003477942522423577,
  "byte_15": 0.022149002379644882,
  "byte_12": 0.001098297638660077,
  "byte_50": 0.03551162365000915,
  "byte_1b": 0.0007321984257733846,
  "byte_07": 0.0023796448837635,
  "byte_81": 0.026176093721398497,
  "byte_83": 0.006955885044847154,
  "byte_91": 0.015376166941241077,
  "byte_84": 0.0032948929159802307,
  "byte_1f": 0.0018304960644334614,
  "byte_88": 0.0007321984257733846,
  "byte_0a": 0.0054914881933003845,
  "byte_19": 0.0009152480322167307,
  "byte_92": 0.0060406370126304225,
  "byte_f3": 0.002196595277320154,
  "byte_a2": 0.00018304960644334616,
  "byte_e1": 0.0003660992128866923,
  "byte_f4": 0.0009152480322167307,
  "byte_08": 0.001098297638660077,
  "byte_32": 0.00018304960644334616,
  "byte_b7": 0.0003660992128866923,
  "byte_c0": 0.0005491488193300384,
  "byte_e8": 0.0003660992128866923,
  "byte_1d": 0.0003660992128866923,
  "byte_2e": 0.0003660992128866923,
  "byte_3f": 0.00018304960644334616,
  "byte_48": 0.0005491488193300384,
  "byte_46": 0.0003660992128866923,
  "byte_5f": 0.0003660992128866923,
  "byte_49": 0.00018304960644334616,
  "byte_8a": 0.00018304960644334616,
  "byte_4f": 0.0005491488193300384,
  "byte_74": 0.00018304960644334616,
  "byte_21": 0.0005491488193300384,
  "byte_4e": 0.0003660992128866923,
  "byte_68": 0.0003660992128866923,
  "byte_87": 0.0009152480322167307,
  "byte_9f": 0.0003660992128866923,
  "byte_ec": 0.0005491488193300384,
  "byte_47": 0.0003660992128866923,
  "byte_0c": 0.0014643968515467693,
  "byte_aa": 0.0003660992128866923,
  "byte_b5": 0.00018304960644334616,
  "byte_0e": 0.0003660992128866923,
  "byte_da": 0.0005491488193300384,
  "byte_11": 0.0023796448837635,
  "byte_54": 0.006772835438403808,
  "byte_25": 0.0003660992128866923,
  "byte_0f": 0.001098297638660077,
  "byte_fa": 0.00018304960644334616,
  "byte_53": 0.0003660992128866923,
  "byte_c1": 0.00018304960644334616,
  "byte_cf": 0.00018304960644334616,
  "byte_55": 0.001281347245103423,
  "byte_13": 0.0003660992128866923,
  "byte_a1": 0.0007321984257733846,
  "byte_30": 0.0007321984257733846,
  "byte_c8": 0.0005491488193300384,
  "byte_f1": 0.0007321984257733846,
  "byte_3d": 0.0007321984257733846,
  "byte_df": 0.0003660992128866923,
  "byte_6d": 0.00018304960644334616,
  "byte_8f": 0.00018304960644334616,
  "byte_b1": 0.00018304960644334616,
  "byte_17": 0.0005491488193300384,
  "byte_44": 0.00018304960644334616,
  "byte_66": 0.00018304960644334616,
  "byte_5a": 0.0003660992128866923,
  "byte_7a": 0.0005491488193300384,
  "byte_7f": 0.0003660992128866923,
  "byte_38": 0.00018304960644334616,
  "byte_7e": 0.00018304960644334616,
  "byte_8c": 0.00018304960644334616,
  "byte_6f": 0.00018304960644334616,
  "byte_6e": 0.00018304960644334616,
  "byte_b9": 0.00018304960644334616,
  "byte_6a": 0.00018304960644334616,
  "byte_64": 0.00018304960644334616,
  "byte_fe": 0.0007321984257733846,
  "byte_2a": 0.00018304960644334616,
  "byte_ad": 0.00018304960644334616,
  "byte_c2": 0.00018304960644334616,
  "byte_b0": 0.00018304960644334616,
  "byte_2b": 0.00018304960644334616,
  "byte_c4": 0.00018304960644334616,
  "byte_28": 0.00018304960644334616,
  "byte_f5": 0.0003660992128866923,
  "byte_4d": 0.00018304960644334616,
  "byte_a3": 0.00018304960644334616,
  "byte_f0": 0.0003660992128866923,
  "byte_65": 0.00018304960644334616,
  "byte_58": 0.00018304960644334616,
  "byte_c7": 0.00018304960644334616,
  "byte_d6": 0.00018304960644334616,
  "byte_8e": 0.00018304960644334616,
  "byte_9a": 0.00018304960644334616,
  "byte_1c": 0.00018304960644334616,
  "byte_71": 0.00018304960644334616,
  "byte_ba": 0.00018304960644334616,
  "byte_1a": 0.00018304960644334616,
  "byte_af": 0.00018304960644334616,
  "byte_29": 0.00018304960644334616,
  "num_nodes": 4,
  "num_edges": 3,
  "avg_degree": 1.5,
  "density": 0.25,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 65,
  "event_nums": 29,
  "creation_block": 5704242,
  "creation_timestamp": 1527708387,
  "life_time": 4954153.0,
  "duration_seconds": 69703396.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 5,
  "num_buyers": 1,
  "num_sellers": 3,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 5410000016565507.0,
  "avg_value": 81969697220689.5,
  "txn_per_block": 1.3120302679327287e-05,
  "avg_gas_limit": 539749.6615384616,
  "std_gas_limit": 1402014.289925334,
  "avg_gas_used": 59183.83076923077,
  "std_gas_used": 200190.98653532515,
  "avg_gas_price": 10124615384.615385,
  "std_gas_price": 24440502911.0364,
  "transfer_num": 33,
  "atinversebrah_num": 1,
  "setbuyprice_num": 1,
  "transferfrom_num": 13,
  "approve_num": 1,
  "timeline_sequence": [
    [
      5704242,
      1527708387,
      149,
      27,
      0,
      1657882,
      18000000000,
      0,
      1,
      5051421,
      1657882,
      17416719
    ],
    [
      5704256,
      1527708681,
      150,
      103,
      0,
      42258,
      18000000000,
      0,
      1,
      4801354,
      42258,
      17416705
    ],
    [
      5743769,
      1528314707,
      157,
      58,
      0,
      54536,
      30000000000,
      0,
      1,
      7950123,
      53502,
      17377192
    ],
    [
      5743785,
      1528314969,
      158,
      14,
      0,
      54536,
      35000000000,
      0,
      1,
      1446318,
      53502,
      17377176
    ],
    [
      5743987,
      1528318226,
      159,
      71,
      0,
      54536,
      15000000000,
      0,
      1,
      3053491,
      53502,
      17376974
    ],
    [
      5744335,
      1528323371,
      160,
      67,
      0,
      54536,
      10000000000,
      0,
      1,
      2732502,
      53502,
      17376626
    ],
    [
      5747756,
      1528376170,
      161,
      99,
      0,
      54536,
      15000000000,
      0,
      1,
      3632717,
      53566,
      17373205
    ],
    [
      5747843,
      1528377528,
      162,
      150,
      0,
      54536,
      12000000000,
      0,
      1,
      6755956,
      53502,
      17373118
    ],
    [
      5749450,
      1528402018,
      163,
      124,
      0,
      54536,
      12000000000,
      0,
      1,
      6988881,
      53502,
      17371511
    ],
    [
      5760084,
      1528564329,
      164,
      72,
      0,
      54536,
      8000000000,
      0,
      1,
      3732686,
      53438,
      17360877
    ],
    [
      5760543,
      1528571519,
      173,
      66,
      0,
      54536,
      8000000000,
      0,
      1,
      2240625,
      53502,
      17360418
    ],
    [
      5777217,
      1528826406,
      180,
      38,
      0,
      54536,
      6000000000,
      0,
      1,
      1467716,
      53502,
      17343744
    ],
    [
      5791511,
      1529040918,
      185,
      36,
      0,
      54536,
      13000000000,
      0,
      1,
      1501148,
      53502,
      17329450
    ],
    [
      5872260,
      1530236571,
      4,
      182,
      0,
      60000,
      4125000000,
      1,
      0,
      7319497,
      24905,
      17248701
    ],
    [
      6071892,
      1533168558,
      11,
      59,
      0,
      60000,
      1100000000,
      1,
      0,
      4848275,
      24905,
      17049069
    ],
    [
      6091777,
      1533459033,
      210,
      0,
      0,
      7588885,
      3000000000,
      0,
      1,
      53438,
      53438,
      17029184
    ],
    [
      6093292,
      1533481163,
      0,
      30,
      49,
      29784,
      21000000000,
      1,
      0,
      1013165,
      23248,
      17027669
    ],
    [
      6093298,
      1533481278,
      1,
      26,
      3223089,
      29784,
      21000000000,
      1,
      0,
      657144,
      23248,
      17027663
    ],
    [
      6133182,
      1534063762,
      2,
      56,
      3223089,
      200000,
      5000000000,
      1,
      0,
      2602053,
      23248,
      16987779
    ],
    [
      6133185,
      1534063872,
      3,
      18,
      12592,
      200000,
      5000000000,
      1,
      0,
      1405299,
      23248,
      16987776
    ],
    [
      6133192,
      1534063960,
      4,
      24,
      12592,
      54536,
      5000000000,
      1,
      0,
      1358327,
      23248,
      16987769
    ],
    [
      6133211,
      1534064183,
      5,
      42,
      12592,
      3000000,
      5000000000,
      1,
      0,
      1920884,
      23248,
      16987750
    ],
    [
      6133533,
      1534068747,
      6,
      47,
      12848,
      3000000,
      5000000000,
      1,
      0,
      2898516,
      23248,
      16987428
    ],
    [
      6133563,
      1534069244,
      7,
      32,
      53,
      3000000,
      4000000000,
      1,
      0,
      2810932,
      23248,
      16987398
    ],
    [
      6133616,
      1534070016,
      8,
      70,
      53,
      210000,
      6000000000,
      1,
      0,
      2740349,
      23248,
      16987345
    ],
    [
      6133637,
      1534070409,
      9,
      0,
      53,
      7588885,
      6000000000,
      1,
      0,
      23248,
      23248,
      16987324
    ],
    [
      6134243,
      1534079651,
      10,
      54,
      13616,
      210000,
      4000000000,
      1,
      0,
      2197562,
      23248,
      16986718
    ],
    [
      6134268,
      1534080083,
      11,
      160,
      13616,
      210000,
      4000000000,
      1,
      0,
      5663063,
      23184,
      16986693
    ],
    [
      6134273,
      1534080128,
      12,
      128,
      13616,
      210000,
      4000000000,
      1,
      0,
      7120044,
      23184,
      16986688
    ],
    [
      6134284,
      1534080272,
      13,
      188,
      53,
      210000,
      4000000000,
      1,
      0,
      7037150,
      23248,
      16986677
    ],
    [
      6134295,
      1534080418,
      14,
      118,
      13616,
      210000,
      4000000000,
      1,
      0,
      7803518,
      23248,
      16986666
    ],
    [
      6134330,
      1534080971,
      15,
      63,
      13616,
      210000,
      4000000000,
      0,
      1,
      4447518,
      36247,
      16986631
    ],
    [
      6134354,
      1534081260,
      16,
      116,
      53,
      210000,
      5000000000,
      0,
      1,
      4499509,
      36247,
      16986607
    ],
    [
      6134423,
      1534082360,
      17,
      77,
      53,
      210000,
      5000000000,
      1,
      0,
      4396499,
      23248,
      16986538
    ],
    [
      6134429,
      1534082456,
      18,
      24,
      53,
      210000,
      5000000000,
      0,
      1,
      981099,
      36247,
      16986532
    ],
    [
      6134439,
      1534082593,
      19,
      89,
      53,
      210000,
      5000000000,
      0,
      1,
      4532751,
      36247,
      16986522
    ],
    [
      6134450,
      1534082790,
      20,
      91,
      53,
      210000,
      5000000000,
      0,
      1,
      6602883,
      36247,
      16986511
    ],
    [
      6134491,
      1534083423,
      21,
      27,
      49,
      210000,
      4000000000,
      0,
      1,
      5517151,
      36247,
      16986470
    ],
    [
      6134511,
      1534083762,
      23,
      161,
      49,
      210000,
      4000000000,
      0,
      1,
      7770196,
      36247,
      16986450
    ],
    [
      6134518,
      1534083868,
      24,
      105,
      1,
      210000,
      4000000000,
      0,
      1,
      7769629,
      36247,
      16986443
    ],
    [
      6134533,
      1534084073,
      25,
      169,
      10000000000000,
      210000,
      4000000000,
      0,
      1,
      6988623,
      36247,
      16986428
    ],
    [
      6134544,
      1534084255,
      26,
      30,
      100000000000000,
      210000,
      4000000000,
      0,
      1,
      3955429,
      36247,
      16986417
    ],
    [
      6134558,
      1534084424,
      27,
      67,
      5000000000000000,
      210000,
      4000000000,
      0,
      1,
      4164563,
      36247,
      16986403
    ],
    [
      6134584,
      1534084727,
      28,
      34,
      100000000000000,
      210000,
      4000000000,
      0,
      1,
      2878418,
      36247,
      16986377
    ],
    [
      6134956,
      1534089930,
      29,
      114,
      100000000000000,
      210000,
      4000000000,
      0,
      1,
      7304751,
      36247,
      16986005
    ],
    [
      6134962,
      1534090080,
      30,
      93,
      100000000000000,
      210000,
      4000000000,
      0,
      1,
      4976678,
      36247,
      16985999
    ],
    [
      6134969,
      1534090225,
      31,
      141,
      0,
      210000,
      4000000000,
      1,
      0,
      7633241,
      21091,
      16985992
    ],
    [
      6135010,
      1534090912,
      32,
      118,
      0,
      210000,
      4000000000,
      1,
      0,
      7743007,
      25518,
      16985951
    ],
    [
      6135045,
      1534091493,
      33,
      70,
      0,
      210000,
      4000000000,
      1,
      0,
      4868873,
      25518,
      16985916
    ],
    [
      6135050,
      1534091571,
      34,
      128,
      0,
      210000,
      4000000000,
      1,
      0,
      6395801,
      21091,
      16985911
    ],
    [
      6135067,
      1534091860,
      35,
      31,
      10000000,
      210000,
      4000000000,
      1,
      0,
      1698995,
      24586,
      16985894
    ],
    [
      6135075,
      1534091960,
      36,
      100,
      0,
      210000,
      4000000000,
      1,
      0,
      4836830,
      25518,
      16985886
    ],
    [
      6135092,
      1534092130,
      37,
      17,
      0,
      210000,
      4000000000,
      1,
      0,
      643817,
      25518,
      16985869
    ],
    [
      6135100,
      1534092248,
      38,
      91,
      0,
      210000,
      4000000000,
      1,
      0,
      6023245,
      25518,
      16985861
    ],
    [
      6135110,
      1534092383,
      39,
      44,
      0,
      210000,
      4000000000,
      1,
      0,
      7212793,
      25390,
      16985851
    ],
    [
      6135114,
      1534092451,
      40,
      57,
      0,
      210000,
      4000000000,
      1,
      0,
      7427357,
      25390,
      16985847
    ],
    [
      6135126,
      1534092652,
      41,
      62,
      0,
      210000,
      4000000000,
      1,
      0,
      5877953,
      25390,
      16985835
    ],
    [
      6135128,
      1534092691,
      42,
      128,
      0,
      210000,
      4000000000,
      1,
      0,
      6492883,
      25390,
      16985833
    ],
    [
      6135157,
      1534093078,
      43,
      76,
      0,
      210000,
      4000000000,
      1,
      0,
      7453029,
      25710,
      16985804
    ],
    [
      6135174,
      1534093266,
      44,
      67,
      0,
      210000,
      4000000000,
      1,
      0,
      3780270,
      25774,
      16985787
    ],
    [
      6135193,
      1534093473,
      45,
      92,
      0,
      210000,
      4000000000,
      1,
      0,
      5509765,
      25710,
      16985768
    ],
    [
      6135515,
      1534098095,
      46,
      45,
      0,
      210000,
      4000000000,
      0,
      1,
      2978073,
      53374,
      16985446
    ],
    [
      6259940,
      1535913615,
      47,
      64,
      0,
      75000,
      12875000000,
      0,
      1,
      1994068,
      53374,
      16861021
    ],
    [
      6354018,
      1537268474,
      216,
      24,
      0,
      80061,
      6000000000,
      0,
      1,
      6974501,
      53374,
      16766943
    ],
    [
      10658395,
      1597411783,
      243,
      103,
      0,
      46757,
      199000000000,
      0,
      1,
      6486833,
      42507,
      12462566
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.23;\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal constant returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  function div(uint256 a, uint256 b) internal constant returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  function sub(uint256 a, uint256 b) internal constant returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  function add(uint256 a, uint256 b) internal constant returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n\ncontract owned {\n    address public owner;\n\n    function owned() public {\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner {\n        require(msg.sender == owner);\n        _;\n    }\n\n    function transferOwnership(address newOwner) onlyOwner public {\n        require(newOwner != 0x0);\n        require(newOwner != owner);\n        owner = newOwner;\n    }\n}\n\ninterface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }\n\ncontract TokenERC20 {\n    \n    using SafeMath for uint256;\n    \n    // Public variables of the token\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n\n    // This creates an array with all balances\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    // This generates a public event on the blockchain that will notify clients\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    // This notifies clients about the amount burnt\n    event Burn(address indexed from, uint256 value);\n\n    /**\n     * Constrctor function\n     *\n     * Initializes contract with initial supply tokens to the creator of the contract\n     */\n    function TokenERC20() public {}\n\n    /**\n     * Internal transfer, only can be called by this contract\n     */\n    function _transfer(address _from, address _to, uint _value) internal {\n        // Prevent transfer to 0x0 address. Use burn() instead\n        require(_to != 0x0);\n        // Check if the sender has enough\n        require(balanceOf[_from] >= _value);\n        // Check for overflows\n        require(balanceOf[_to].add(_value) > balanceOf[_to]);\n        // Save this for an assertion in the future\n        uint previousBalances = balanceOf[_from].add(balanceOf[_to]);\n        // Subtract from the sender\n        balanceOf[_from] = balanceOf[_from].sub(_value);\n        // Add the same to the recipient\n        balanceOf[_to] = balanceOf[_to].add(_value);\n        emit Transfer(_from, _to, _value);\n        // Asserts are used to use static analysis to find bugs in your code. They should never fail\n        assert(balanceOf[_from].add(balanceOf[_to]) == previousBalances);\n    }\n\n    /**\n     * Transfer tokens\n     *\n     * Send `_value` tokens to `_to` from your account\n     *\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transfer(address _to, uint256 _value) public {\n        _transfer(msg.sender, _to, _value);\n    }\n\n    /**\n     * Transfer tokens from other address\n     *\n     * Send `_value` tokens to `_to` in behalf of `_from`\n     *\n     * @param _from The address of the sender\n     * @param _to The address of the recipient\n     * @param _value the amount to send\n     */\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= allowance[_from][msg.sender]);     // Check allowanc\n        allowance[_from][msg.sender] =allowance[_from][msg.sender].sub(_value);\n        _transfer(_from, _to, _value);\n        return true;\n    }\n\n    /**\n     * Set allowance for other address\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     */\n    function approve(address _spender, uint256 _value) public\n        returns (bool success) {\n        require(_spender != 0x0);    \n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    /**\n     * Set allowance for other address and notify\n     *\n     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it\n     *\n     * @param _spender The address authorized to spend\n     * @param _value the max amount they can spend\n     * @param _extraData some extra information to send to the approved contract\n     */\n    function approveAndCall(address _spender, uint256 _value, bytes _extraData)\n        public\n        returns (bool success) {\n        tokenRecipient spender = tokenRecipient(_spender);\n        if (approve(_spender, _value)) {\n            spender.receiveApproval(msg.sender, _value, this, _extraData);\n            return true;\n        }\n    }\n\n}\n\n/******************************************/\n/*  Bind Network TOKEN STARTS HERE       */\n/******************************************/\n\ncontract BNDToken is owned, TokenERC20 {\n\n    string public name = \"Bind Network\";\n    string public symbol = \"BND\";\n    uint8 public decimals = 18;\n    \n    \n    uint256 public buyPrice;\n    uint256 public totalSupply = 149000000e18;  \n    \n    \n    mapping (address => bool) public frozenAccount;\n\n    /* This generates a public event on the blockchain that will notify clients */\n    event FrozenFunds(address target, bool frozen);\n\n    /* Initializes contract with initial supply tokens to the creator of the contract */\n    function BNDToken () public {\n        balanceOf[msg.sender] = totalSupply;\n    }\n    function () payable {\n        buy();\n    }\n    /* Internal transfer, only can be called by this contract */\n    function _transfer(address _from, address _to, uint _value) internal {\n        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead\n        require(!frozenAccount[msg.sender]);\n        require (balanceOf[_from] > _value);                // Check if the sender has enough\n        require (balanceOf[_to].add(_value) > balanceOf[_to]); // Check for overflow\n        balanceOf[_from] = balanceOf[_from].sub(_value);                         // Subtract from the sender\n        balanceOf[_to] = balanceOf[_to].add(_value);                           // Add the same to the recipient\n        emit Transfer(_from, _to, _value);\n    }\n    \n    /**\n   * Transfer given number of tokens from given owner to given recipient.\n   *\n   * @param _from address to transfer tokens from the owner of\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer from given owner to given\n   *        recipient\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transferFrom(address _from, address _to, uint256 _value)\n    returns (bool success) {\n\trequire(!frozenAccount[_from]);\n    return TokenERC20.transferFrom(_from, _to, _value);\n  }\n  \n  /**\n   * Transfer given number of tokens from message sender to given recipient.\n   * @param _to address to transfer tokens to the owner of\n   * @param _value number of tokens to transfer to the owner of given address\n   * @return true if tokens were transferred successfully, false otherwise\n   */\n  function transfer(address _to, uint256 _value) public {\n    require(!frozenAccount[msg.sender]);\n    return TokenERC20.transfer(_to, _value);\n  }\n\n\n    /// @notice `freeze? Prevent | Allow` `target` from sending & receiving tokens\n    /// @param target Address to be frozen\n    /// @param freeze either to freeze it or not\n    \n    function freezeAccount(address target, bool freeze) onlyOwner public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth\n    /// @param newBuyPrice Price users can buy from the contract\n    function setbuyPrice( uint256 newBuyPrice) onlyOwner public {\n        require(newBuyPrice > 0);\n        buyPrice = newBuyPrice;\n    }\n    \n    function withdrawEther() onlyOwner {\n       require(address(this).balance >= 0 ether);\n       owner.transfer(address(this).balance);\n    }\n   \n\t\n    /// @notice Buy tokens from contract by sending ether\n    function buy() payable public {\n        require(msg.value > 0);\n        require(buyPrice > 0);\n         uint amount = msg.value.mul(buyPrice); \n        _transfer(owner, msg.sender, amount);              // makes the transfers\n    }\n\n\n}"
}