{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH1 CALLDATALOAD PUSH29 SWAP1 DIV PUSH4 AND DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD ISZERO ISZERO SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH1 AND PUSH1 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP1 PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE PUSH1 DUP2 ADD SWAP1 POP PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 DUP1 CALLDATALOAD PUSH20 AND SWAP1 PUSH1 ADD SWAP1 SWAP2 SWAP1 POP POP PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO DUP2 ISZERO ISZERO EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 DUP2 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SLOAD SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP4 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP6 DUP6 DUP6 PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO DUP2 ISZERO ISZERO EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP POP JUMP JUMPDEST PUSH12 DUP2 JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH12 DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP2 PUSH12 PUSH1 SLOAD DUP3 ADD LT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP DUP1 DUP4 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 JUMP JUMPDEST PUSH2 DUP4 DUP3 PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP JUMPDEST DUP4 PUSH20 AND CALLER PUSH20 AND PUSH32 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP9 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MSTORE DUP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 PUSH1 SWAP2 POP SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO DUP2 ISZERO ISZERO EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP DUP2 JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP2 JUMP JUMPDEST PUSH1 CALLER PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND DUP1 PUSH2 JUMPI POP PUSH1 PUSH1 DUP3 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND JUMPDEST ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP5 DUP5 PUSH2 JUMP JUMPDEST SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND DUP2 JUMP JUMPDEST PUSH1 PUSH2 DUP3 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 PUSH1 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 DUP5 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 DUP4 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH20 AND DUP2 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP1 PUSH20 AND PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH20 MUL NOT AND SWAP1 DUP4 PUSH20 AND MUL OR SWAP1 SSTORE POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 DUP1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 PUSH1 DUP8 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 PUSH1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 PUSH1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND DUP5 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND PUSH32 DUP4 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP3 PUSH20 AND PUSH1 PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP2 DUP4 SUB SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH20 AND PUSH20 AND CALLER PUSH20 AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 SWAP1 SLOAD SWAP1 PUSH2 EXP SWAP1 DIV PUSH1 AND ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 PUSH2 EXP DUP2 SLOAD DUP2 PUSH1 MUL NOT AND SWAP1 DUP4 ISZERO ISZERO MUL OR SWAP1 SSTORE POP PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH20 AND DUP4 PUSH20 AND EQ ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD DUP3 GT ISZERO ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 CALLER PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP PUSH2 DUP3 PUSH1 DUP1 DUP7 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 SLOAD PUSH2 SWAP1 SWAP2 SWAP1 PUSH4 AND JUMP JUMPDEST PUSH1 DUP1 DUP6 PUSH20 AND PUSH20 AND DUP2 MSTORE PUSH1 ADD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 SHA3 DUP2 SWAP1 SSTORE POP DUP3 PUSH20 AND CALLER PUSH20 AND PUSH32 DUP5 PUSH1 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 ADD SWAP2 POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 ADD SWAP1 POP DUP4 DUP2 LT ISZERO ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 SHA3 SMOD UNKNOWN_0x25 UNKNOWN_0xe2 UNKNOWN_0xc0 UNKNOWN_0x2b UNKNOWN_0xd0 UNKNOWN_0xe9 UNKNOWN_0xc0 SHL UNKNOWN_0x2f UNKNOWN_0xb3 UNKNOWN_0x25 DUP1 UNKNOWN_0xc3 UNKNOWN_0xed INVALID_0x72",
  "opcode_entropy": 4.675134197742974,
  "opcode_count": 3399,
  "unique_opcodes": 66,
  "byte_entropy": 4.400148877010675,
  "byte_60": 0.06234161175874303,
  "byte_40": 0.008236188545362393,
  "byte_52": 0.016218955904713634,
  "byte_04": 0.007729346173340091,
  "byte_36": 0.00012671059300557527,
  "byte_10": 0.001900658895083629,
  "byte_61": 0.02483527622909275,
  "byte_01": 0.026609224531170806,
  "byte_3e": 0.0005068423720223011,
  "byte_57": 0.010897110998479472,
  "byte_00": 0.03852002027369488,
  "byte_35": 0.002914343639128231,
  "byte_7c": 0.00025342118601115053,
  "byte_90": 0.03522554485554993,
  "byte_63": 0.00481500253421186,
  "byte_ff": 0.3929295489102889,
  "byte_16": 0.0245818550430816,
  "byte_80": 0.026482513938165232,
  "byte_02": 0.004308160162189559,
  "byte_f6": 0.00025342118601115053,
  "byte_a3": 0.001393816523061328,
  "byte_14": 0.007729346173340091,
  "byte_43": 0.0003801317790167258,
  "byte_05": 0.002787633046122656,
  "byte_d2": 0.00025342118601115053,
  "byte_03": 0.00963000506842372,
  "byte_5b": 0.020907247845919918,
  "byte_87": 0.0006335529650278763,
  "byte_06": 0.001393816523061328,
  "byte_fd": 0.006715661429295489,
  "byte_de": 0.0003801317790167258,
  "byte_b4": 0.0005068423720223011,
  "byte_09": 0.0006335529650278763,
  "byte_5e": 0.00025342118601115053,
  "byte_a7": 0.0007602635580334517,
  "byte_b3": 0.0007602635580334517,
  "byte_42": 0.0005068423720223011,
  "byte_18": 0.0006335529650278763,
  "byte_0d": 0.0003801317790167258,
  "byte_dd": 0.0011403953370501775,
  "byte_9c": 0.0005068423720223011,
  "byte_23": 0.0006335529650278763,
  "byte_b8": 0.00025342118601115053,
  "byte_72": 0.0005068423720223011,
  "byte_c5": 0.00012671059300557527,
  "byte_29": 0.0007602635580334517,
  "byte_4f": 0.0005068423720223011,
  "byte_53": 0.0005068423720223011,
  "byte_2f": 0.0005068423720223011,
  "byte_f2": 0.0010136847440446021,
  "byte_e9": 0.0003801317790167258,
  "byte_dc": 0.00025342118601115053,
  "byte_77": 0.00025342118601115053,
  "byte_31": 0.0003801317790167258,
  "byte_3c": 0.0007602635580334517,
  "byte_e5": 0.0005068423720223011,
  "byte_67": 0.0003801317790167258,
  "byte_a0": 0.0003801317790167258,
  "byte_3d": 0.00025342118601115053,
  "byte_0c": 0.0015205271160669033,
  "byte_49": 0.0003801317790167258,
  "byte_24": 0.00025342118601115053,
  "byte_cf": 0.00012671059300557527,
  "byte_c1": 0.00012671059300557527,
  "byte_0f": 0.0007602635580334517,
  "byte_19": 0.0015205271160669033,
  "byte_f8": 0.00012671059300557527,
  "byte_66": 0.00025342118601115053,
  "byte_84": 0.00240750126710593,
  "byte_70": 0.00025342118601115053,
  "byte_82": 0.007982767359351241,
  "byte_ac": 0.00012671059300557527,
  "byte_7d": 0.0011403953370501775,
  "byte_64": 0.0003801317790167258,
  "byte_bc": 0.00025342118601115053,
  "byte_f9": 0.00025342118601115053,
  "byte_86": 0.001393816523061328,
  "byte_28": 0.0006335529650278763,
  "byte_26": 0.00012671059300557527,
  "byte_d1": 0.0006335529650278763,
  "byte_a6": 0.00025342118601115053,
  "byte_9f": 0.0005068423720223011,
  "byte_8d": 0.0005068423720223011,
  "byte_a5": 0.0003801317790167258,
  "byte_cb": 0.0003801317790167258,
  "byte_8c": 0.0005068423720223011,
  "byte_95": 0.0005068423720223011,
  "byte_d8": 0.00012671059300557527,
  "byte_9b": 0.0005068423720223011,
  "byte_41": 0.0003801317790167258,
  "byte_e1": 0.0005068423720223011,
  "byte_96": 0.00012671059300557527,
  "byte_13": 0.0003801317790167258,
  "byte_25": 0.0007602635580334517,
  "byte_21": 0.00025342118601115053,
  "byte_6f": 0.0003801317790167258,
  "byte_a9": 0.00025342118601115053,
  "byte_bb": 0.00012671059300557527,
  "byte_76": 0.00025342118601115053,
  "byte_d3": 0.00025342118601115053,
  "byte_d7": 0.00012671059300557527,
  "byte_d6": 0.00025342118601115053,
  "byte_07": 0.0015205271160669033,
  "byte_4b": 0.0005068423720223011,
  "byte_62": 0.00025342118601115053,
  "byte_ed": 0.00025342118601115053,
  "byte_e3": 0.0005068423720223011,
  "byte_8b": 0.0003801317790167258,
  "byte_08": 0.0012671059300557526,
  "byte_11": 0.0016472377090724784,
  "byte_34": 0.003294475418144957,
  "byte_15": 0.02040040547389762,
  "byte_4e": 0.00012671059300557527,
  "byte_85": 0.0017739483020780538,
  "byte_73": 0.019513431322858592,
  "byte_20": 0.02382159148504815,
  "byte_91": 0.013304612265585403,
  "byte_50": 0.02242777496198682,
  "byte_4a": 0.00025342118601115053,
  "byte_56": 0.008996452103395844,
  "byte_92": 0.0021540800810947794,
  "byte_9a": 0.00012671059300557527,
  "byte_51": 0.008869741510390269,
  "byte_81": 0.021540800810947794,
  "byte_f3": 0.002914343639128231,
  "byte_bf": 0.00025342118601115053,
  "byte_c7": 0.0005068423720223011,
  "byte_83": 0.003421186011150532,
  "byte_ec": 0.0006335529650278763,
  "byte_1f": 0.0005068423720223011,
  "byte_0a": 0.00481500253421186,
  "byte_4d": 0.0005068423720223011,
  "byte_97": 0.0003801317790167258,
  "byte_af": 0.00025342118601115053,
  "byte_89": 0.00012671059300557527,
  "byte_d0": 0.0006335529650278763,
  "byte_93": 0.0003801317790167258,
  "byte_75": 0.00012671059300557527,
  "byte_0b": 0.0008869741510390269,
  "byte_1a": 0.0006335529650278763,
  "byte_8a": 0.0015205271160669033,
  "byte_ab": 0.00012671059300557527,
  "byte_da": 0.00025342118601115053,
  "byte_e2": 0.0006335529650278763,
  "byte_38": 0.00012671059300557527,
  "byte_5d": 0.00025342118601115053,
  "byte_d5": 0.00025342118601115053,
  "byte_b7": 0.00012671059300557527,
  "byte_ae": 0.00025342118601115053,
  "byte_55": 0.0021540800810947794,
  "byte_f4": 0.00012671059300557527,
  "byte_7a": 0.0005068423720223011,
  "byte_12": 0.0003801317790167258,
  "byte_b0": 0.0005068423720223011,
  "byte_fb": 0.00025342118601115053,
  "byte_1c": 0.0007602635580334517,
  "byte_48": 0.00012671059300557527,
  "byte_54": 0.0063355296502787635,
  "byte_33": 0.003801317790167258,
  "byte_c9": 0.00012671059300557527,
  "byte_ef": 0.0005068423720223011,
  "byte_17": 0.0010136847440446021,
  "byte_7f": 0.0015205271160669033,
  "byte_74": 0.00025342118601115053,
  "byte_69": 0.0005068423720223011,
  "byte_6e": 0.00025342118601115053,
  "byte_eb": 0.0003801317790167258,
  "byte_71": 0.0005068423720223011,
  "byte_1e": 0.0017739483020780538,
  "byte_c0": 0.0007602635580334517,
  "byte_f7": 0.0003801317790167258,
  "byte_b2": 0.0003801317790167258,
  "byte_c8": 0.0007602635580334517,
  "byte_c3": 0.0006335529650278763,
  "byte_b9": 0.0003801317790167258,
  "byte_fa": 0.00025342118601115053,
  "byte_ea": 0.00025342118601115053,
  "byte_99": 0.00012671059300557527,
  "byte_6b": 0.0006335529650278763,
  "byte_df": 0.00012671059300557527,
  "byte_3b": 0.00025342118601115053,
  "byte_2e": 0.00025342118601115053,
  "byte_e8": 0.00025342118601115053,
  "byte_c2": 0.0005068423720223011,
  "byte_cc": 0.00012671059300557527,
  "byte_a4": 0.00025342118601115053,
  "byte_e6": 0.00012671059300557527,
  "byte_0e": 0.00025342118601115053,
  "byte_1b": 0.0012671059300557526,
  "byte_88": 0.00012671059300557527,
  "byte_30": 0.00025342118601115053,
  "byte_b1": 0.00025342118601115053,
  "byte_d4": 0.00012671059300557527,
  "byte_e0": 0.0003801317790167258,
  "byte_ee": 0.00012671059300557527,
  "byte_2a": 0.00025342118601115053,
  "byte_59": 0.00025342118601115053,
  "byte_44": 0.00025342118601115053,
  "byte_cd": 0.00012671059300557527,
  "byte_22": 0.00012671059300557527,
  "byte_27": 0.00012671059300557527,
  "byte_ad": 0.0003801317790167258,
  "byte_68": 0.0005068423720223011,
  "byte_fc": 0.0003801317790167258,
  "byte_37": 0.0003801317790167258,
  "byte_aa": 0.0003801317790167258,
  "byte_2b": 0.0006335529650278763,
  "byte_f1": 0.0005068423720223011,
  "byte_c4": 0.0003801317790167258,
  "byte_a1": 0.0008869741510390269,
  "byte_f5": 0.0008869741510390269,
  "byte_5a": 0.0003801317790167258,
  "byte_98": 0.00025342118601115053,
  "byte_79": 0.00012671059300557527,
  "byte_3a": 0.00025342118601115053,
  "byte_fe": 0.0003801317790167258,
  "byte_94": 0.00012671059300557527,
  "byte_4c": 0.00012671059300557527,
  "byte_a2": 0.00025342118601115053,
  "byte_39": 0.00012671059300557527,
  "byte_1d": 0.0003801317790167258,
  "byte_a8": 0.00025342118601115053,
  "byte_32": 0.00012671059300557527,
  "byte_ca": 0.00012671059300557527,
  "byte_65": 0.00025342118601115053,
  "byte_f0": 0.00012671059300557527,
  "byte_9d": 0.00012671059300557527,
  "byte_46": 0.00012671059300557527,
  "byte_d9": 0.00012671059300557527,
  "byte_9e": 0.00025342118601115053,
  "byte_58": 0.00012671059300557527,
  "byte_bd": 0.00012671059300557527,
  "byte_6a": 0.00012671059300557527,
  "num_nodes": 24,
  "num_edges": 23,
  "avg_degree": 1.9166666666666667,
  "density": 0.041666666666666664,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 154,
  "event_nums": 169,
  "creation_block": 5199468,
  "creation_timestamp": 1520232704,
  "life_time": 7400720.0,
  "duration_seconds": 103006979.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 25,
  "num_buyers": 1,
  "num_sellers": 23,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 2.0808783360432045e-05,
  "avg_gas_limit": 76487.28571428571,
  "std_gas_limit": 176466.26495458634,
  "avg_gas_used": 61250.9025974026,
  "std_gas_used": 176116.77043097274,
  "avg_gas_price": 53381165897.66234,
  "std_gas_price": 37753910685.07967,
  "transfer_num": 146,
  "ownershiptransferred_num": 1,
  "settransferagent_num": 3,
  "setreleaseagent_num": 1,
  "transferownership_num": 1,
  "withdraw_num": 1,
  "release_num": 1,
  "timeline_sequence": [
    [
      5199468,
      1520232704,
      12,
      86,
      0,
      2236780,
      10000000000,
      0,
      1,
      6286945,
      2236780,
      17921493
    ],
    [
      5199683,
      1520235750,
      14,
      81,
      0,
      66115,
      12000000000,
      0,
      1,
      3164643,
      44077,
      17921278
    ],
    [
      5199687,
      1520235915,
      15,
      142,
      0,
      66115,
      12000000000,
      0,
      1,
      5318776,
      44077,
      17921274
    ],
    [
      5199695,
      1520236020,
      16,
      22,
      0,
      66115,
      21000000000,
      0,
      1,
      835018,
      44077,
      17921266
    ],
    [
      5199703,
      1520236114,
      17,
      30,
      0,
      79473,
      21000000000,
      0,
      1,
      920797,
      52982,
      17921258
    ],
    [
      5199727,
      1520236444,
      18,
      67,
      0,
      79569,
      21000000000,
      0,
      1,
      2970596,
      53046,
      17921234
    ],
    [
      5200006,
      1520240901,
      23,
      101,
      0,
      65842,
      9000000000,
      0,
      1,
      4341035,
      43895,
      17920955
    ],
    [
      5200149,
      1520243087,
      24,
      91,
      0,
      46086,
      10000000000,
      0,
      1,
      3270719,
      30724,
      17920812
    ],
    [
      6826394,
      1543952828,
      47,
      68,
      0,
      52918,
      21000000000,
      0,
      1,
      1629801,
      52918,
      16294567
    ],
    [
      6826399,
      1543952885,
      48,
      19,
      0,
      37854,
      21000000000,
      1,
      0,
      2534184,
      37854,
      16294562
    ],
    [
      6826403,
      1543952943,
      49,
      5,
      0,
      52854,
      21000000000,
      0,
      1,
      159529,
      52854,
      16294558
    ],
    [
      6826452,
      1543953472,
      50,
      4,
      0,
      300000,
      21000000000,
      1,
      0,
      156570,
      21869,
      16294509
    ],
    [
      6826486,
      1543953859,
      51,
      9,
      0,
      70000,
      21000000000,
      0,
      1,
      916513,
      37982,
      16294475
    ],
    [
      6826493,
      1543953938,
      52,
      55,
      0,
      70000,
      21000000000,
      0,
      1,
      2055844,
      37982,
      16294468
    ],
    [
      6830349,
      1544009910,
      54,
      16,
      0,
      27655,
      21000000000,
      0,
      1,
      573757,
      27655,
      16290612
    ],
    [
      6830681,
      1544015068,
      56,
      13,
      0,
      37459,
      21000000000,
      0,
      1,
      328640,
      37459,
      16290280
    ],
    [
      6830689,
      1544015122,
      57,
      43,
      0,
      52587,
      21000000000,
      0,
      1,
      1931752,
      52587,
      16290272
    ],
    [
      6830695,
      1544015228,
      58,
      47,
      0,
      52587,
      21000000000,
      0,
      1,
      1422573,
      52587,
      16290266
    ],
    [
      6830700,
      1544015282,
      59,
      23,
      0,
      52587,
      21000000000,
      0,
      1,
      979611,
      52587,
      16290261
    ],
    [
      6831407,
      1544025230,
      60,
      0,
      0,
      37587,
      21000000000,
      0,
      1,
      37587,
      37587,
      16289554
    ],
    [
      6831422,
      1544025442,
      61,
      63,
      0,
      52587,
      21000000000,
      0,
      1,
      4593222,
      52587,
      16289539
    ],
    [
      6831454,
      1544025853,
      62,
      101,
      0,
      52587,
      21000000000,
      0,
      1,
      4885393,
      52587,
      16289507
    ],
    [
      6831844,
      1544031050,
      63,
      7,
      0,
      37587,
      21000000000,
      0,
      1,
      292999,
      37587,
      16289117
    ],
    [
      6876070,
      1544662446,
      71,
      107,
      0,
      52587,
      21000000000,
      0,
      1,
      2558259,
      52587,
      16244891
    ],
    [
      6876078,
      1544662586,
      72,
      42,
      0,
      52587,
      21000000000,
      0,
      1,
      1815863,
      52587,
      16244883
    ],
    [
      6902115,
      1545034565,
      101,
      2,
      0,
      50000,
      80000000000,
      1,
      0,
      122925,
      50000,
      16218846
    ],
    [
      6902194,
      1545035815,
      102,
      1,
      0,
      40000,
      74000000000,
      1,
      0,
      61000,
      40000,
      16218767
    ],
    [
      6902220,
      1545036273,
      103,
      3,
      0,
      45000,
      71000000000,
      1,
      0,
      125520,
      45000,
      16218741
    ],
    [
      6902237,
      1545036492,
      104,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      99495,
      52587,
      16218724
    ],
    [
      6902258,
      1545036811,
      105,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      104060,
      52587,
      16218703
    ],
    [
      6902265,
      1545036895,
      106,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      77612,
      52523,
      16218696
    ],
    [
      6902289,
      1545037240,
      107,
      9,
      0,
      80000,
      99000000000,
      0,
      1,
      313230,
      52523,
      16218672
    ],
    [
      6902299,
      1545037405,
      108,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      73587,
      52587,
      16218662
    ],
    [
      6902305,
      1545037459,
      109,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16218656
    ],
    [
      6902308,
      1545037526,
      110,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      105264,
      52587,
      16218653
    ],
    [
      6902310,
      1545037560,
      111,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      73587,
      52587,
      16218651
    ],
    [
      6902314,
      1545037724,
      112,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16218647
    ],
    [
      6902318,
      1545037895,
      113,
      4,
      0,
      80000,
      99000000000,
      0,
      1,
      170125,
      52587,
      16218643
    ],
    [
      6902322,
      1545037951,
      114,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52523,
      52523,
      16218639
    ],
    [
      6902328,
      1545038086,
      115,
      3,
      0,
      80000,
      99000000000,
      0,
      1,
      131144,
      52523,
      16218633
    ],
    [
      6902342,
      1545038199,
      116,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52523,
      52523,
      16218619
    ],
    [
      6902346,
      1545038287,
      117,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16218615
    ],
    [
      6902353,
      1545038370,
      118,
      2,
      0,
      80000,
      99000000000,
      0,
      1,
      151589,
      52587,
      16218608
    ],
    [
      6902358,
      1545038513,
      119,
      113,
      0,
      80000,
      99000000000,
      0,
      1,
      2497050,
      52587,
      16218603
    ],
    [
      6902367,
      1545038609,
      120,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16218594
    ],
    [
      6902372,
      1545038709,
      121,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16218589
    ],
    [
      6902378,
      1545038786,
      122,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      89208,
      52587,
      16218583
    ],
    [
      6902388,
      1545038941,
      123,
      81,
      0,
      80000,
      99000000000,
      0,
      1,
      1754450,
      37523,
      16218573
    ],
    [
      6902393,
      1545039087,
      124,
      84,
      0,
      80000,
      99000000000,
      0,
      1,
      2053915,
      52587,
      16218568
    ],
    [
      6902405,
      1545039186,
      125,
      2,
      0,
      80000,
      99000000000,
      0,
      1,
      120495,
      52587,
      16218556
    ],
    [
      6902415,
      1545039282,
      126,
      3,
      0,
      80000,
      99000000000,
      0,
      1,
      115587,
      52587,
      16218546
    ],
    [
      6902421,
      1545039352,
      127,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      37587,
      37587,
      16218540
    ],
    [
      6902645,
      1545042351,
      128,
      2,
      0,
      80000,
      99000000000,
      0,
      1,
      105495,
      52587,
      16218316
    ],
    [
      6902650,
      1545042428,
      129,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      84495,
      52587,
      16218311
    ],
    [
      6902658,
      1545042561,
      130,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16218303
    ],
    [
      6902672,
      1545042694,
      131,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      84495,
      52587,
      16218289
    ],
    [
      6902682,
      1545042835,
      132,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16218279
    ],
    [
      6902700,
      1545043143,
      133,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      234502,
      52523,
      16218261
    ],
    [
      6908046,
      1545121686,
      134,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16212915
    ],
    [
      6908053,
      1545121772,
      135,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      73587,
      52587,
      16212908
    ],
    [
      6908056,
      1545121825,
      136,
      2,
      0,
      80000,
      99000000000,
      0,
      1,
      112041,
      52587,
      16212905
    ],
    [
      6908069,
      1545122002,
      137,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16212892
    ],
    [
      6908077,
      1545122107,
      138,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16212884
    ],
    [
      6908086,
      1545122225,
      139,
      3,
      0,
      80000,
      99000000000,
      0,
      1,
      173772,
      52587,
      16212875
    ],
    [
      6908092,
      1545122305,
      140,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      84495,
      52587,
      16212869
    ],
    [
      6908094,
      1545122418,
      141,
      2,
      0,
      80000,
      99000000000,
      0,
      1,
      91116,
      37587,
      16212867
    ],
    [
      6908100,
      1545122525,
      142,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      84431,
      52523,
      16212861
    ],
    [
      6908105,
      1545122634,
      143,
      4,
      0,
      80000,
      99000000000,
      0,
      1,
      188403,
      52587,
      16212856
    ],
    [
      6908115,
      1545122822,
      144,
      2,
      0,
      80000,
      99000000000,
      0,
      1,
      125760,
      52587,
      16212846
    ],
    [
      6908122,
      1545122936,
      145,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16212839
    ],
    [
      6908128,
      1545122990,
      146,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16212833
    ],
    [
      6908132,
      1545123072,
      147,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16212829
    ],
    [
      6908138,
      1545123164,
      148,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16212823
    ],
    [
      6908146,
      1545123322,
      149,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16212815
    ],
    [
      6908152,
      1545123436,
      150,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16212809
    ],
    [
      6908222,
      1545124352,
      151,
      4,
      0,
      80000,
      99000000000,
      0,
      1,
      167765,
      52523,
      16212739
    ],
    [
      6909307,
      1545140784,
      152,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16211654
    ],
    [
      6909318,
      1545140964,
      153,
      2,
      0,
      80000,
      99000000000,
      0,
      1,
      110208,
      52587,
      16211643
    ],
    [
      6909323,
      1545141075,
      154,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      89208,
      52587,
      16211638
    ],
    [
      6909333,
      1545141139,
      155,
      1,
      0,
      80000,
      99000000000,
      0,
      1,
      99495,
      52587,
      16211628
    ],
    [
      6913633,
      1545204089,
      199,
      9,
      0,
      52459,
      45000000000,
      0,
      1,
      340674,
      52459,
      16207328
    ],
    [
      6913649,
      1545204298,
      200,
      6,
      0,
      52523,
      45000000000,
      0,
      1,
      209656,
      52523,
      16207312
    ],
    [
      6913660,
      1545204416,
      201,
      22,
      0,
      52587,
      45000000000,
      0,
      1,
      940440,
      52587,
      16207301
    ],
    [
      6913671,
      1545204639,
      202,
      60,
      0,
      52587,
      45000000000,
      0,
      1,
      1514602,
      52587,
      16207290
    ],
    [
      6913687,
      1545204897,
      203,
      3,
      0,
      52459,
      45000000000,
      0,
      1,
      163146,
      52459,
      16207274
    ],
    [
      6913698,
      1545205136,
      204,
      56,
      0,
      52523,
      45000000000,
      0,
      1,
      2249020,
      52523,
      16207263
    ],
    [
      6913707,
      1545205237,
      205,
      0,
      0,
      52523,
      45000000000,
      0,
      1,
      52523,
      52523,
      16207254
    ],
    [
      6913717,
      1545205423,
      206,
      99,
      0,
      52523,
      45000000000,
      0,
      1,
      2310048,
      52523,
      16207244
    ],
    [
      6914738,
      1545220183,
      156,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52523,
      52523,
      16206223
    ],
    [
      6917267,
      1545257346,
      164,
      0,
      0,
      52523,
      46000000000,
      0,
      1,
      52523,
      52523,
      16203694
    ],
    [
      6919079,
      1545284391,
      3,
      11,
      0,
      37523,
      41000000000,
      0,
      1,
      513456,
      37523,
      16201882
    ],
    [
      6919240,
      1545286560,
      165,
      33,
      0,
      52587,
      46000000000,
      0,
      1,
      817591,
      52587,
      16201721
    ],
    [
      6919260,
      1545286773,
      166,
      10,
      0,
      52587,
      36000000000,
      0,
      1,
      496384,
      52587,
      16201701
    ],
    [
      6919264,
      1545286853,
      167,
      24,
      0,
      52587,
      36000000000,
      0,
      1,
      898801,
      52587,
      16201697
    ],
    [
      6919266,
      1545286899,
      168,
      32,
      0,
      52587,
      36000000000,
      0,
      1,
      1024138,
      52587,
      16201695
    ],
    [
      6919272,
      1545287007,
      169,
      7,
      0,
      52587,
      36000000000,
      0,
      1,
      287108,
      52587,
      16201689
    ],
    [
      6919293,
      1545287416,
      170,
      45,
      0,
      52587,
      36000000000,
      0,
      1,
      1316274,
      52587,
      16201668
    ],
    [
      6919300,
      1545287510,
      171,
      24,
      0,
      52587,
      36000000000,
      0,
      1,
      723983,
      52587,
      16201661
    ],
    [
      6919388,
      1545288947,
      172,
      15,
      0,
      52523,
      36000000000,
      0,
      1,
      425727,
      52523,
      16201573
    ],
    [
      6920537,
      1545306153,
      173,
      22,
      0,
      52587,
      36000000000,
      0,
      1,
      613473,
      52587,
      16200424
    ],
    [
      6920555,
      1545306392,
      174,
      2,
      0,
      52523,
      36000000000,
      0,
      1,
      145799,
      52523,
      16200406
    ],
    [
      6920559,
      1545306525,
      175,
      25,
      0,
      52587,
      36000000000,
      0,
      1,
      4511650,
      52587,
      16200402
    ],
    [
      6920664,
      1545307822,
      207,
      4,
      0,
      37523,
      45000000000,
      0,
      1,
      369525,
      37523,
      16200297
    ],
    [
      6920893,
      1545311148,
      176,
      14,
      0,
      52587,
      36000000000,
      0,
      1,
      396101,
      52587,
      16200068
    ],
    [
      6920907,
      1545311337,
      177,
      5,
      0,
      52523,
      36000000000,
      0,
      1,
      204278,
      52523,
      16200054
    ],
    [
      6920969,
      1545312409,
      157,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16199992
    ],
    [
      6920974,
      1545312502,
      158,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      52587,
      52587,
      16199987
    ],
    [
      6944602,
      1545659314,
      179,
      1,
      0,
      52587,
      36000000000,
      0,
      1,
      105051,
      52587,
      16176359
    ],
    [
      6944607,
      1545659412,
      180,
      56,
      0,
      52459,
      36000000000,
      0,
      1,
      2072404,
      52459,
      16176354
    ],
    [
      6955487,
      1545817437,
      1,
      8,
      0,
      37587,
      41000000000,
      0,
      1,
      244633,
      22587,
      16165474
    ],
    [
      6959187,
      1545871013,
      181,
      16,
      0,
      52587,
      36000000000,
      0,
      1,
      525820,
      52587,
      16161774
    ],
    [
      6959218,
      1545871455,
      182,
      5,
      0,
      52587,
      36000000000,
      0,
      1,
      235408,
      52587,
      16161743
    ],
    [
      6962117,
      1545914451,
      183,
      12,
      0,
      52587,
      36000000000,
      0,
      1,
      339153,
      52587,
      16158844
    ],
    [
      6967743,
      1545996619,
      185,
      5,
      0,
      52523,
      36000000000,
      0,
      1,
      157523,
      52523,
      16153218
    ],
    [
      6972371,
      1546064262,
      186,
      7,
      0,
      52587,
      36000000000,
      0,
      1,
      266226,
      52587,
      16148590
    ],
    [
      6991027,
      1546337019,
      129,
      0,
      0,
      52459,
      40000000000,
      0,
      1,
      52459,
      52459,
      16129934
    ],
    [
      6991037,
      1546337156,
      130,
      131,
      0,
      52459,
      40000000000,
      0,
      1,
      3094295,
      52459,
      16129924
    ],
    [
      6991051,
      1546337444,
      131,
      15,
      0,
      37587,
      40000000000,
      0,
      1,
      382993,
      37587,
      16129910
    ],
    [
      6991087,
      1546338036,
      132,
      15,
      0,
      37587,
      40000000000,
      0,
      1,
      452445,
      37587,
      16129874
    ],
    [
      7001761,
      1546494306,
      208,
      13,
      0,
      52587,
      45000000000,
      0,
      1,
      405743,
      52587,
      16119200
    ],
    [
      7011947,
      1546652862,
      159,
      0,
      0,
      80000,
      99000000000,
      0,
      1,
      37587,
      37587,
      16109014
    ],
    [
      7329638,
      1552061750,
      82,
      73,
      0,
      52459,
      5795317712,
      0,
      1,
      5137996,
      52459,
      15791323
    ],
    [
      7492583,
      1554257309,
      0,
      24,
      0,
      52651,
      10000000000,
      0,
      1,
      2238644,
      37651,
      15628378
    ],
    [
      7492583,
      1554257309,
      1,
      65,
      0,
      52651,
      10000000000,
      1,
      0,
      6252396,
      24710,
      15628378
    ],
    [
      7492674,
      1554258517,
      0,
      117,
      0,
      37523,
      10000000000,
      0,
      1,
      7101769,
      22523,
      15628287
    ],
    [
      7623267,
      1556015498,
      37,
      76,
      0,
      37587,
      10000000000,
      0,
      1,
      3500104,
      37587,
      15497694
    ],
    [
      7678005,
      1556750761,
      28,
      40,
      0,
      60000,
      3000000000,
      0,
      1,
      2427234,
      37587,
      15442956
    ],
    [
      8485152,
      1567621072,
      85,
      41,
      0,
      52587,
      5795317712,
      0,
      1,
      3069083,
      52587,
      14635809
    ],
    [
      8557060,
      1568590692,
      1,
      31,
      0,
      37523,
      12450000000,
      1,
      0,
      1052218,
      37523,
      14563901
    ],
    [
      8557068,
      1568590783,
      2,
      38,
      0,
      37523,
      12450000000,
      1,
      0,
      2467982,
      37523,
      14563893
    ],
    [
      8557084,
      1568591009,
      3,
      42,
      0,
      37587,
      12450000000,
      0,
      1,
      1534460,
      22587,
      14563877
    ],
    [
      8744663,
      1571126269,
      25,
      6,
      0,
      52587,
      41000000000,
      0,
      1,
      199705,
      37587,
      14376298
    ],
    [
      9836641,
      1586416752,
      17,
      140,
      0,
      53323,
      5666961227,
      0,
      1,
      8260703,
      53323,
      13284320
    ],
    [
      9836657,
      1586416874,
      18,
      140,
      0,
      38323,
      5666961227,
      0,
      1,
      8505397,
      38323,
      13284304
    ],
    [
      9836676,
      1586417090,
      19,
      223,
      0,
      38323,
      5666961227,
      0,
      1,
      9544963,
      38323,
      13284285
    ],
    [
      9836691,
      1586417258,
      20,
      66,
      0,
      38323,
      6732000000,
      0,
      1,
      2821822,
      23323,
      13284270
    ],
    [
      9841589,
      1586482446,
      3,
      80,
      0,
      38323,
      3986012250,
      0,
      1,
      5935762,
      23323,
      13279372
    ],
    [
      9842648,
      1586496202,
      43,
      136,
      0,
      38323,
      3986012250,
      0,
      1,
      9851936,
      23323,
      13278313
    ],
    [
      9844365,
      1586519612,
      0,
      44,
      0,
      38323,
      4554000258,
      0,
      1,
      2476837,
      23323,
      13276596
    ],
    [
      9848199,
      1586571296,
      0,
      152,
      0,
      53323,
      4500000000,
      0,
      1,
      8096006,
      53323,
      13272762
    ],
    [
      9848199,
      1586571296,
      1,
      153,
      0,
      53311,
      4500000000,
      0,
      1,
      8134317,
      38311,
      13272762
    ],
    [
      9849427,
      1586587758,
      2,
      112,
      0,
      38323,
      3450000000,
      0,
      1,
      6506992,
      38323,
      13271534
    ],
    [
      9849736,
      1586591762,
      3,
      201,
      0,
      38311,
      3450000000,
      0,
      1,
      8002880,
      38311,
      13271225
    ],
    [
      9850956,
      1586607791,
      4,
      155,
      0,
      38323,
      4500000000,
      0,
      1,
      9454468,
      38323,
      13270005
    ],
    [
      9860671,
      1586736393,
      0,
      98,
      0,
      38323,
      3600000000,
      0,
      1,
      8472231,
      23323,
      13260290
    ],
    [
      9863525,
      1586775173,
      0,
      34,
      0,
      38323,
      7500000000,
      0,
      1,
      1303040,
      38323,
      13257436
    ],
    [
      9863530,
      1586775238,
      1,
      22,
      0,
      38323,
      7500000000,
      0,
      1,
      943776,
      38323,
      13257431
    ],
    [
      9863537,
      1586775352,
      2,
      38,
      0,
      38335,
      7500000000,
      0,
      1,
      1874612,
      23335,
      13257424
    ],
    [
      9909335,
      1587386205,
      5,
      149,
      0,
      53323,
      12000000000,
      0,
      1,
      5935443,
      53323,
      13211626
    ],
    [
      10184709,
      1591078799,
      6,
      22,
      0,
      53323,
      39000000000,
      0,
      1,
      1012347,
      53323,
      12936252
    ],
    [
      11574850,
      1609588656,
      1,
      103,
      0,
      60000,
      46000001459,
      0,
      1,
      6036676,
      38323,
      11546111
    ],
    [
      12081214,
      1616317669,
      26,
      29,
      0,
      53323,
      93000001459,
      0,
      1,
      2149669,
      53323,
      11039747
    ],
    [
      12081215,
      1616317673,
      27,
      144,
      0,
      53323,
      93000001459,
      0,
      1,
      9043275,
      53323,
      11039746
    ],
    [
      12600188,
      1623239683,
      116,
      37,
      0,
      54423,
      12000000000,
      0,
      1,
      5608833,
      54423,
      10520773
    ]
  ],
  "sourcecode": "pragma solidity 0.4.20;\n\n/**\n * @title ERC20Basic\n * @dev Simpler version of ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/179\n */\ncontract ERC20Basic {\n  function totalSupply() public view returns (uint256);\n  function balanceOf(address who) public view returns (uint256);\n  function transfer(address to, uint256 value) public returns (bool);\n  event Transfer(address indexed from, address indexed to, uint256 value);\n}\n\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n\n  /**\n  * @dev Multiplies two numbers, throws on overflow.\n  */\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n\n  /**\n  * @dev Integer division of two numbers, truncating the quotient.\n  */\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n\n  /**\n  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\n  */\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n\n  /**\n  * @dev Adds two numbers, throws on overflow.\n  */\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n\n/**\n * @title Basic token\n * @dev Basic version of StandardToken, with no allowances.\n */\ncontract BasicToken is ERC20Basic {\n  using SafeMath for uint256;\n\n  mapping(address => uint256) balances;\n\n  uint256 totalSupply_;\n\n  /**\n  * @dev total number of tokens in existence\n  */\n  function totalSupply() public view returns (uint256) {\n    return totalSupply_;\n  }\n\n  /**\n  * @dev transfer token for a specified address\n  * @param _to The address to transfer to.\n  * @param _value The amount to be transferred.\n  */\n  function transfer(address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[msg.sender]);\n\n    // SafeMath.sub will throw if there is not enough balance.\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n    return true;\n  }\n\n  /**\n  * @dev Gets the balance of the specified address.\n  * @param _owner The address to query the the balance of.\n  * @return An uint256 representing the amount owned by the passed address.\n  */\n  function balanceOf(address _owner) public view returns (uint256 balance) {\n    return balances[_owner];\n  }\n\n}\n\n/**\n * @title ERC20 interface\n * @dev see https://github.com/ethereum/EIPs/issues/20\n */\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) public view returns (uint256);\n  function transferFrom(address from, address to, uint256 value) public returns (bool);\n  function approve(address spender, uint256 value) public returns (bool);\n  event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n\n/**\n * @title Standard ERC20 token\n *\n * @dev Implementation of the basic standard token.\n * @dev https://github.com/ethereum/EIPs/issues/20\n * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\n */\ncontract StandardToken is ERC20, BasicToken {\n\n  mapping (address => mapping (address => uint256)) internal allowed;\n\n\n  /**\n   * @dev Transfer tokens from one address to another\n   * @param _from address The address which you want to send tokens from\n   * @param _to address The address which you want to transfer to\n   * @param _value uint256 the amount of tokens to be transferred\n   */\n  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {\n    require(_to != address(0));\n    require(_value <= balances[_from]);\n    require(_value <= allowed[_from][msg.sender]);\n\n    balances[_from] = balances[_from].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\n    Transfer(_from, _to, _value);\n    return true;\n  }\n\n  /**\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\n   *\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n   * @param _spender The address which will spend the funds.\n   * @param _value The amount of tokens to be spent.\n   */\n  function approve(address _spender, uint256 _value) public returns (bool) {\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n    return true;\n  }\n\n  /**\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\n   * @param _owner address The address which owns the funds.\n   * @param _spender address The address which will spend the funds.\n   * @return A uint256 specifying the amount of tokens still available for the spender.\n   */\n  function allowance(address _owner, address _spender) public view returns (uint256) {\n    return allowed[_owner][_spender];\n  }\n\n  /**\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To increment\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _addedValue The amount of tokens to increase the allowance by.\n   */\n  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {\n    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n  /**\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\n   *\n   * approve should be called when allowed[_spender] == 0. To decrement\n   * allowed value is better to use this function to avoid 2 calls (and wait until\n   * the first transaction is mined)\n   * From MonolithDAO Token.sol\n   * @param _spender The address which will spend the funds.\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\n   */\n  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {\n    uint oldValue = allowed[msg.sender][_spender];\n    if (_subtractedValue > oldValue) {\n      allowed[msg.sender][_spender] = 0;\n    } else {\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\n    }\n    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\n    return true;\n  }\n\n}\n\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n\n\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() public {\n    owner = msg.sender;\n  }\n\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) public onlyOwner {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n\n}\n\n/**\n * @title Mintable token\n * @dev Simple ERC20 Token example, with mintable token creation\n * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\n */\ncontract MintableToken is StandardToken, Ownable {\n  event Mint(address indexed to, uint256 amount);\n  event MintFinished();\n\n  bool public mintingFinished = false;\n\n\n  modifier canMint() {\n    require(!mintingFinished);\n    _;\n  }\n\n  /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint256 _amount) onlyOwner canMint public returns (bool) {\n    totalSupply_ = totalSupply_.add(_amount);\n    balances[_to] = balances[_to].add(_amount);\n    Mint(_to, _amount);\n    Transfer(address(0), _to, _amount);\n    return true;\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    mintingFinished = true;\n    MintFinished();\n    return true;\n  }\n}\n\n/**\n * @title StarCoin\n *\n * @dev Burnable Ownable ERC20 token\n */\ncontract StarCoin is MintableToken {\n\n  string public constant name = \"StarCoin\";\n  string public constant symbol = \"STAR\";\n  uint8 public constant decimals = 18;\n  uint public constant INITIAL_SUPPLY = 400000000 * 1 ether; //40M tokens accroding to https://starflow.com/ico/\n  uint public constant MAXIMUM_SUPPLY = 1000000000 * 1 ether; // 100M tokens is maximum according to https://starflow.com/ico/\n\n  /* The finalizer contract that allows unlift the transfer limits on this token */\n  address public releaseAgent;\n\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\n  bool public released = false;\n\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\n  mapping (address => bool) public transferAgents;\n\n  /**\n   * Limit token transfer until the crowdsale is over.\n   *\n   */\n  modifier canTransfer(address _sender) {\n    require(released || transferAgents[_sender]);\n    _;\n  }\n\n  /** The function can be called only before or after the tokens have been released */\n  modifier inReleaseState(bool releaseState) {\n    require(releaseState == released);\n    _;\n  }\n\n  /** The function can be called only by a whitelisted release agent. */\n  modifier onlyReleaseAgent() {\n    require(msg.sender == releaseAgent);\n    _;\n  }\n\n  /** Restrict minting by the MAXIMUM_SUPPLY allowed **/\n  modifier bellowMaximumSupply(uint _amount) {\n    require(_amount + totalSupply_ < MAXIMUM_SUPPLY);\n    _;\n  }\n\n\n  /**\n   * @dev Constructor that gives msg.sender all of existing tokens.\n   */\n  function StarCoin() {\n    totalSupply_ = INITIAL_SUPPLY;\n    balances[msg.sender] = INITIAL_SUPPLY;\n  }\n\n\n  /**\n   * Set the contract that can call release and make the token transferable.\n   *\n   * Design choice. Allow reset the release agent to fix fat finger mistakes.\n   */\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\n    require(addr != 0x0);\n\n    // We don't do interface check here as we might want to a normal wallet address to act as a release agent\n    releaseAgent = addr;\n  }\n\n  function release() onlyReleaseAgent inReleaseState(false) public {\n    released = true;\n  }\n\n  /**\n   * Owner can allow a particular address (a crowdsale contract) to transfer tokens despite the lock up period.\n   */\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\n    require(addr != 0x0);\n    transferAgents[addr] = state;\n  }\n\n  function transfer(address _to, uint _value) canTransfer(msg.sender) returns (bool success) {\n    // Call Burnable.transfer()\n    return super.transfer(_to, _value);\n  }\n\n  function transferFrom(address _from, address _to, uint _value) canTransfer(_from) returns (bool success) {\n    // Call Burnable.transferForm()\n    return super.transferFrom(_from, _to, _value);\n  }\n\n    /**\n   * @dev Function to mint tokens\n   * @param _to The address that will receive the minted tokens.\n   * @param _amount The amount of tokens to mint.\n   * @return A boolean that indicates if the operation was successful.\n   */\n  function mint(address _to, uint _amount) onlyOwner canMint bellowMaximumSupply(_amount) public returns (bool) {\n    return super.mint(_to, _amount);\n  }\n\n  /**\n   * @dev Function to stop minting new tokens.\n   * @return True if the operation was successful.\n   */\n  function finishMinting() onlyOwner canMint public returns (bool) {\n    return super.finishMinting();\n  }\n\n\n}"
}