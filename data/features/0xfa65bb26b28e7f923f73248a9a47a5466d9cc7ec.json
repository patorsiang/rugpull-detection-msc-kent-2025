{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE PUSH1 CALLDATASIZE LT PUSH2 JUMPI PUSH4 PUSH1 PUSH1 EXP PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST PUSH32 CALLVALUE PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD SWAP1 PUSH1 PUSH1 DUP1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 DUP1 CALLDATALOAD SWAP1 PUSH1 PUSH1 DUP1 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 PUSH1 DUP3 ADD DUP2 SWAP1 DIV DUP2 MUL ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY DUP3 ADD SWAP2 POP POP POP POP POP POP SWAP2 SWAP1 DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP3 ADD DUP1 CALLDATALOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 SWAP1 PUSH1 DUP5 ADD DUP4 DUP4 DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP PUSH2 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST PUSH1 MLOAD DUP1 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 SLOAD CALLVALUE GT ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST CALLVALUE SWAP4 POP PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD DUP5 LT PUSH2 JUMPI PUSH1 SLOAD SWAP4 POP CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 DUP6 CALLVALUE SUB SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL POP POP POP POP POP JUMPDEST PUSH32 CALLER DUP6 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SWAP3 POP PUSH3 SWAP2 POP PUSH2 DUP4 PUSH1 DUP5 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND DUP3 MSTORE PUSH1 DUP1 DUP4 ADD DUP8 SWAP1 MSTORE PUSH1 DUP3 DUP5 ADD DUP2 SWAP1 MSTORE DUP5 DUP2 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SHA3 DUP2 MLOAD DUP2 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP2 SWAP1 SWAP2 AND OR DUP2 SSTORE PUSH1 DUP3 ADD MLOAD DUP2 PUSH1 ADD SSTORE PUSH1 DUP3 ADD MLOAD PUSH1 SWAP1 SWAP2 ADD SSTORE POP PUSH1 DUP1 SLOAD PUSH1 DUP2 ADD PUSH2 DUP4 DUP3 PUSH2 JUMP JUMPDEST POP PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SSTORE POP POP POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH32 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND DUP3 PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 DUP3 ADD MSTORE PUSH1 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 ISZERO PUSH2 MUL DUP3 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL POP POP POP POP POP POP JUMP JUMPDEST PUSH2 DUP3 DUP3 PUSH1 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP PUSH2 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP5 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP5 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP6 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 PUSH1 ADD SLOAD DUP7 SWAP2 SWAP1 GT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST DUP6 DUP6 DUP6 PUSH1 DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 PUSH1 EXP MUL PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH32 EQ ISZERO DUP1 PUSH2 JUMPI POP DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 PUSH1 EXP MUL PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH32 EQ ISZERO JUMPDEST DUP1 PUSH2 JUMPI POP DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH32 PUSH1 PUSH1 EXP SWAP2 DUP3 SWAP1 DIV DUP3 MUL AND EQ ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 DUP3 DUP6 DUP6 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 JUMP JUMPDEST SWAP1 POP DUP1 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP10 PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND OR SWAP1 SWAP3 MSTORE POP POP POP SWAP2 SWAP1 SWAP2 ADD SWAP3 POP PUSH1 SWAP2 POP POP MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP13 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SWAP2 SWAP1 MOD PUSH1 DUP3 ADD SSTORE SWAP7 POP PUSH2 DUP11 PUSH2 JUMP JUMPDEST ISZERO PUSH2 JUMPI DUP7 SLOAD PUSH1 DUP9 ADD SLOAD PUSH1 DUP10 ADD SLOAD PUSH32 SWAP3 PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP2 SWAP1 PUSH1 MLOAD DUP1 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP7 SLOAD PUSH1 DUP9 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH2 SWAP1 PUSH2 SWAP1 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 DUP2 ISZERO MUL SWAP1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP POP PUSH2 JUMP JUMPDEST DUP7 SLOAD PUSH1 DUP9 ADD SLOAD PUSH1 DUP10 ADD SLOAD PUSH32 SWAP3 PUSH1 PUSH1 PUSH1 EXP SUB AND SWAP2 SWAP1 PUSH1 MLOAD DUP1 DUP5 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 MSTORE PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 MSTORE PUSH1 ADD SWAP4 POP POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP7 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 PUSH1 PUSH1 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL POP POP POP POP POP JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 SWAP1 SWAP2 SHA3 ADD SLOAD SWAP1 POP DUP2 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SSTORE JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 PUSH1 MSTORE PUSH1 SWAP1 DUP2 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 DUP3 ADD SLOAD PUSH1 SWAP1 SWAP3 ADD SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND SWAP2 SWAP1 DUP4 JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND SWAP2 AND PUSH32 PUSH1 MLOAD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND BALANCE PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP2 SWAP1 SSTORE PUSH8 SWAP1 GT ISZERO PUSH2 JUMPI PUSH8 PUSH1 SSTORE JUMPDEST JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP9 ISZERO DUP1 PUSH2 JUMPI POP PUSH1 DUP10 GT JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP6 POP DUP9 PUSH1 PUSH1 EXP MUL DUP7 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP PUSH1 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP5 POP PUSH1 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP4 POP PUSH2 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 DUP6 MSTORE TIMESTAMP COINBASE XOR PUSH1 NUMBER SUB BLOCKHASH XOR PUSH1 DUP7 ADD MSTORE PUSH1 DUP5 MSTORE DUP3 PUSH1 DUP6 ADD MSTORE PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 DUP7 DUP2 MSTORE PUSH1 ADD DUP8 DUP2 MSTORE PUSH1 ADD DUP6 DUP2 MSTORE POP SWAP2 POP PUSH2 DUP11 PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP5 DUP12 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH2 DUP2 PUSH25 DUP13 MUL PUSH1 DUP6 ADD MLOAD PUSH1 DUP7 MLOAD PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP7 PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP PUSH1 DUP8 ADD MLOAD PUSH1 MLOAD PUSH24 NOT DUP6 AND DUP2 MSTORE PUSH1 DUP2 ADD DUP5 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND OR SWAP1 SWAP3 MSTORE POP POP POP SWAP2 SWAP1 SWAP2 ADD DUP5 DUP2 MSTORE PUSH1 ADD SWAP1 POP DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND OR SWAP1 SWAP3 MSTORE POP POP POP SWAP2 SWAP1 SWAP2 ADD SWAP6 POP PUSH1 SWAP5 POP POP POP POP POP MLOAD DUP1 SWAP2 SUB SWAP1 SHA3 PUSH2 JUMP JUMPDEST SWAP10 SWAP9 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 JUMP JUMPDEST POP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 POP PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP2 POP POP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 PUSH1 ADD PUSH1 DUP1 SWAP2 DIV MUL PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 ADD DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV DUP1 ISZERO PUSH2 JUMPI DUP1 PUSH1 LT PUSH2 JUMPI PUSH2 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 ADD SWAP2 PUSH2 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 ADD SWAP1 PUSH1 ADD DUP1 DUP4 GT PUSH2 JUMPI DUP3 SWAP1 SUB PUSH1 AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST DUP14 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV PUSH1 ADD SWAP8 POP PUSH1 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP7 POP PUSH2 DUP15 DUP10 PUSH1 DUP11 PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 DUP12 DUP15 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND OR SWAP1 SWAP3 MSTORE POP POP POP SWAP2 SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP POP PUSH1 SWAP1 DUP2 ADD SWAP2 POP PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP7 PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 DUP8 PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND OR SWAP1 SWAP3 MSTORE POP POP POP SWAP2 SWAP1 SWAP2 ADD SWAP3 POP PUSH1 SWAP2 POP POP MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 EQ SWAP9 POP DUP9 PUSH2 JUMPI PUSH1 SWAP10 POP PUSH2 JUMP JUMPDEST DUP14 PUSH1 DUP10 ADD DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 PUSH1 EXP MUL PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 ADD PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP6 POP PUSH2 DUP15 DUP10 PUSH1 ADD DUP9 MLOAD DUP10 PUSH1 PUSH2 JUMP JUMPDEST POP PUSH2 PUSH1 DUP8 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP7 PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP DUP14 PUSH2 JUMP JUMPDEST SWAP9 POP DUP9 ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP10 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP5 POP PUSH2 DUP15 DUP10 PUSH1 ADD PUSH1 DUP9 PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP4 POP DUP6 MLOAD DUP9 PUSH1 ADD PUSH1 ADD ADD PUSH1 ADD SWAP3 POP PUSH2 DUP15 PUSH1 DUP6 SUB PUSH1 DUP8 PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 DUP5 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP7 PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP SWAP2 POP DUP5 DUP3 PUSH1 MLOAD DUP1 DUP4 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND OR SWAP1 SWAP3 MSTORE POP POP POP SWAP2 SWAP1 SWAP2 ADD SWAP3 DUP4 MSTORE POP POP PUSH1 ADD SWAP1 POP PUSH1 MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 PUSH1 DUP15 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD EQ ISZERO PUSH2 JUMPI PUSH1 DUP14 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP2 SHA3 SSTORE PUSH2 JUMP JUMPDEST PUSH1 SWAP10 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP1 POP PUSH2 DUP15 DUP10 PUSH1 DUP5 PUSH1 PUSH2 JUMP JUMPDEST POP PUSH2 PUSH1 DUP3 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP7 PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP DUP8 DUP7 PUSH2 JUMP JUMPDEST SWAP9 POP DUP9 ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP10 POP PUSH2 JUMP JUMPDEST PUSH1 DUP3 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND ISZERO ISZERO PUSH2 JUMPI PUSH2 DUP15 DUP5 PUSH2 JUMP JUMPDEST PUSH1 DUP4 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 DUP1 SLOAD PUSH1 NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMPDEST PUSH1 DUP3 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD PUSH1 AND SWAP10 POP JUMPDEST POP POP POP POP POP POP POP POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 PUSH2 PUSH1 PUSH2 PUSH1 PUSH1 PUSH4 PUSH2 AND JUMP JUMPDEST SWAP1 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 DUP4 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 PUSH1 ADD SLOAD GT ISZERO PUSH2 JUMPI POP PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 DUP1 DUP4 ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP PUSH2 JUMP JUMPDEST POP DUP3 DUP3 MUL DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV EQ PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 SLOAD PUSH1 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 JUMP JUMPDEST POP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 POP PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 JUMP JUMPDEST POP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 POP PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 MUL PUSH1 ADD DUP3 ADD PUSH1 MSTORE DUP1 ISZERO PUSH2 JUMPI DUP2 PUSH1 ADD JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 SWAP1 SUB SWAP1 DUP2 PUSH2 JUMPI SWAP1 POP JUMPDEST POP SWAP1 POP DUP4 MLOAD DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE DUP4 PUSH1 PUSH1 MUL ADD MLOAD DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP2 SWAP1 SWAP2 ADD ADD MSTORE PUSH1 DUP5 ADD MLOAD DUP2 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH2 DUP7 DUP7 DUP4 DUP7 PUSH2 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 SWAP2 DUP3 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SWAP2 SHA3 SSTORE JUMP JUMPDEST EXTCODESIZE SWAP1 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH20 OR SWAP1 SSTORE PUSH2 PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST POP PUSH1 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH20 OR SWAP1 SSTORE PUSH2 PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH20 OR SWAP1 SSTORE PUSH2 PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH20 OR SWAP1 SSTORE PUSH2 PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH20 OR DUP2 SSTORE PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH20 OR DUP2 SSTORE PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH20 PUSH2 JUMP JUMPDEST GT ISZERO PUSH2 JUMPI POP PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH20 OR DUP2 SSTORE PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST DUP4 DUP3 ADD PUSH1 DUP1 DUP3 DUP7 MLOAD LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 DUP1 DUP8 ADD SWAP1 DUP5 ADD JUMPDEST DUP7 DUP9 PUSH1 ADD ADD DUP3 LT ISZERO PUSH2 JUMPI DUP2 DUP10 ADD MLOAD DUP7 DUP3 ADD MSTORE PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST POP SWAP4 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 PUSH1 DUP2 JUMPDEST DUP4 MLOAD DUP2 PUSH1 AND LT ISZERO PUSH2 JUMPI DUP4 DUP2 PUSH1 AND DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 PUSH1 EXP MUL PUSH1 PUSH1 PUSH1 EXP SUB NOT AND DUP6 DUP3 PUSH1 AND PUSH1 DUP2 LT ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST BYTE PUSH1 PUSH1 EXP MUL PUSH1 PUSH1 PUSH1 EXP SUB NOT AND EQ ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP2 POP JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 SWAP3 ADD PUSH1 NOT AND DUP2 ADD DUP3 ADD PUSH1 MSTORE SWAP4 POP DUP11 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 PUSH1 EXP MUL PUSH1 PUSH1 EXP SWAP1 DIV SUB PUSH1 ADD SWAP2 POP PUSH2 DUP11 DUP4 PUSH1 DUP7 PUSH1 PUSH2 JUMP JUMPDEST SWAP3 POP PUSH1 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP1 POP PUSH1 DUP3 ADD SWAP2 POP PUSH2 DUP11 PUSH1 DUP13 PUSH1 DUP7 SUB DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 PUSH1 EXP MUL PUSH1 PUSH1 EXP SWAP1 DIV SUB DUP5 ADD PUSH1 DUP5 PUSH1 PUSH2 JUMP JUMPDEST SWAP1 POP PUSH1 DUP4 ADD MLOAD SWAP5 POP PUSH1 DUP2 ADD MLOAD SWAP4 POP PUSH2 DUP12 PUSH1 DUP8 DUP8 PUSH2 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND DUP10 PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND OR SWAP1 SWAP3 MSTORE POP POP POP SWAP2 SWAP1 SWAP2 ADD SWAP3 POP PUSH1 SWAP2 POP POP MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ ISZERO PUSH2 JUMPI PUSH1 SWAP8 POP PUSH2 JUMP JUMPDEST PUSH2 DUP12 PUSH1 DUP8 DUP8 PUSH2 JUMP JUMPDEST SWAP1 SWAP8 POP SWAP6 POP PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND DUP10 PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND OR SWAP1 SWAP3 MSTORE POP POP POP SWAP2 SWAP1 SWAP2 ADD SWAP3 POP PUSH1 SWAP2 POP POP MLOAD SWAP1 DUP2 SWAP1 SUB SWAP1 SHA3 PUSH1 PUSH1 PUSH1 EXP SUB AND EQ SWAP8 POP JUMPDEST POP POP POP POP POP POP POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST DUP11 DUP11 PUSH1 ADD DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 PUSH1 EXP MUL PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 ADD PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP7 POP PUSH2 DUP12 DUP12 DUP10 MLOAD DUP11 PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 DUP1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP6 POP PUSH2 DUP12 PUSH1 PUSH1 DUP10 PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP5 POP PUSH1 PUSH1 EXP DUP6 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP PUSH2 DUP12 PUSH1 DUP13 SUB PUSH1 DUP9 PUSH1 PUSH2 JUMP JUMPDEST POP PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP SWAP4 POP PUSH2 DUP5 PUSH1 PUSH1 DUP9 PUSH1 PUSH2 JUMP JUMPDEST POP PUSH2 PUSH1 DUP7 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP7 PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP DUP9 DUP9 PUSH2 JUMP JUMPDEST SWAP8 POP DUP8 ISZERO ISZERO PUSH2 JUMPI PUSH1 SWAP9 POP PUSH2 JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE DUP1 PUSH1 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE PUSH1 ADD PUSH32 DUP2 MSTORE POP SWAP3 POP PUSH1 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP2 POP PUSH32 DUP3 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP PUSH2 DUP12 PUSH1 PUSH1 DUP6 PUSH1 PUSH2 JUMP JUMPDEST POP DUP11 PUSH1 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 PUSH1 EXP MUL PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 ADD PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP1 POP PUSH2 DUP12 PUSH1 DUP4 MLOAD DUP5 PUSH1 PUSH2 JUMP JUMPDEST POP PUSH2 PUSH1 DUP4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 DUP4 LT PUSH2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 JUMP JUMPDEST PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP7 PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP PUSH1 MLOAD DUP1 MLOAD SWAP1 POP DUP3 DUP6 PUSH2 JUMP JUMPDEST SWAP8 POP DUP8 SWAP9 POP JUMPDEST POP POP POP POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 JUMP JUMPDEST POP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 POP PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP8 DUP7 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP4 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP1 PUSH1 ADD DUP4 DUP2 MSTORE PUSH1 ADD DUP3 DUP2 SUB DUP3 MSTORE DUP5 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP4 POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP3 POP POP PUSH8 GASPRICE DUP6 MUL ADD DUP3 GT ISZERO PUSH2 JUMPI PUSH1 SWAP3 POP PUSH2 JUMP JUMPDEST PUSH2 DUP6 PUSH2 JUMP JUMPDEST PUSH1 SLOAD SWAP1 SWAP2 POP PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP4 DUP10 DUP10 DUP6 DUP10 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP7 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD DUP1 DUP6 DUP2 MSTORE PUSH1 ADD DUP1 PUSH1 ADD DUP1 PUSH1 ADD DUP5 DUP2 MSTORE PUSH1 ADD DUP4 DUP2 SUB DUP4 MSTORE DUP7 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP DUP4 DUP2 SUB DUP3 MSTORE DUP6 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP7 POP POP POP POP POP POP POP PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP POP PUSH1 MLOAD DUP1 MLOAD SWAP4 POP POP JUMPDEST POP POP SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 DUP1 MLOAD PUSH2 SWAP3 SWAP2 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP1 PUSH1 MLOAD DUP9 DUP2 MSTORE DUP8 PUSH1 DUP3 ADD MSTORE DUP7 PUSH1 DUP3 ADD MSTORE DUP6 PUSH1 DUP3 ADD MSTORE PUSH1 DUP2 PUSH1 DUP4 PUSH1 PUSH1 PUSH2 CALL SWAP3 POP DUP1 MLOAD SWAP3 SWAP10 SWAP3 SWAP9 POP SWAP2 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 PUSH2 PUSH2 JUMP JUMPDEST PUSH1 DUP1 PUSH1 DUP12 MLOAD SWAP10 POP PUSH1 SWAP9 POP DUP10 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 MUL PUSH1 ADD DUP3 ADD PUSH1 MSTORE DUP1 ISZERO PUSH2 JUMPI DUP2 PUSH1 ADD JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 SWAP1 SUB SWAP1 DUP2 PUSH2 JUMPI SWAP1 POP JUMPDEST POP SWAP8 POP PUSH1 SWAP7 POP JUMPDEST DUP10 DUP8 LT ISZERO PUSH2 JUMPI DUP12 DUP8 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD DUP9 DUP9 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 SWAP1 DUP2 MUL SWAP1 SWAP2 ADD ADD MSTORE PUSH1 PUSH1 DUP10 DUP10 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD MLOAD SUB DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST DIV DUP9 DUP9 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD MLOAD ADD SWAP9 SWAP1 SWAP9 ADD PUSH1 ADD SWAP8 PUSH1 SWAP1 SWAP7 ADD SWAP6 PUSH2 JUMP JUMPDEST PUSH1 SWAP9 SWAP1 SWAP9 ADD SWAP8 PUSH1 SWAP6 POP PUSH1 DUP11 ADD SWAP5 POP DUP9 PUSH1 MLOAD DUP1 MSIZE LT PUSH2 JUMPI POP MSIZE JUMPDEST DUP2 DUP2 MSTORE PUSH1 NOT PUSH1 DUP4 ADD AND DUP2 ADD PUSH1 ADD PUSH1 MSTORE SWAP1 POP SWAP4 POP JUMPDEST PUSH1 DUP7 SWAP1 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 EXP DUP6 MUL DUP7 PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST BYTE PUSH1 PUSH1 EXP MUL DUP5 DUP8 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP PUSH1 SWAP1 SWAP6 ADD SWAP5 PUSH2 JUMP JUMPDEST PUSH1 SWAP7 POP JUMPDEST DUP10 DUP8 LT ISZERO PUSH2 JUMPI PUSH32 DUP5 DUP8 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP PUSH1 SWAP1 SWAP6 ADD SWAP5 PUSH1 SWAP3 POP JUMPDEST DUP8 DUP8 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD MLOAD DUP4 LT ISZERO PUSH2 JUMPI PUSH1 DUP4 MOD ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP4 DUP10 DUP10 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD MLOAD SUB LT ISZERO PUSH2 JUMPI DUP3 DUP9 DUP9 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD MLOAD SUB PUSH2 JUMP JUMPDEST PUSH1 JUMPDEST PUSH1 ADD SWAP2 POP DUP6 SWAP1 POP JUMPDEST DUP1 DUP7 SUB PUSH1 GT ISZERO PUSH2 JUMPI PUSH1 PUSH1 EXP DUP3 MUL DUP2 DUP8 SUB PUSH1 DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST BYTE PUSH1 PUSH1 EXP MUL DUP5 DUP8 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP PUSH1 SWAP1 SWAP6 ADD SWAP5 PUSH2 JUMP JUMPDEST DUP8 DUP8 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD SWAP1 PUSH1 MUL ADD MLOAD DUP4 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST ADD PUSH1 ADD MLOAD PUSH1 PUSH1 EXP SWAP1 DIV PUSH1 PUSH1 EXP MUL DUP5 DUP8 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP PUSH1 SWAP6 DUP7 ADD SWAP6 SWAP3 SWAP1 SWAP3 ADD SWAP2 PUSH2 JUMP JUMPDEST PUSH32 DUP5 DUP8 DUP2 MLOAD DUP2 LT PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST SWAP1 PUSH1 ADD ADD SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB NOT AND SWAP1 DUP2 PUSH1 BYTE SWAP1 MSTORE8 POP PUSH1 SWAP7 DUP8 ADD SWAP7 SWAP1 SWAP6 ADD SWAP5 PUSH2 JUMP JUMPDEST POP SWAP2 SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 ISZERO GT PUSH2 JUMPI PUSH1 DUP4 DUP2 MSTORE PUSH1 SWAP1 SHA3 PUSH2 SWAP2 DUP2 ADD SWAP1 DUP4 ADD PUSH2 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE SWAP1 JUMP JUMPDEST PUSH1 PUSH1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST DUP2 MSTORE PUSH1 ADD SWAP1 PUSH1 SWAP1 SUB SWAP1 DUP2 PUSH2 JUMPI SWAP1 POP POP SWAP1 JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 DUP2 PUSH1 AND ISZERO PUSH2 MUL SUB AND PUSH1 SWAP1 DIV SWAP1 PUSH1 MSTORE PUSH1 PUSH1 SHA3 SWAP1 PUSH1 ADD PUSH1 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 LT PUSH2 JUMPI DUP1 MLOAD PUSH1 NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 ADD SWAP2 SWAP1 PUSH1 ADD SWAP1 PUSH2 JUMP JUMPDEST POP PUSH2 SWAP3 SWAP2 POP PUSH2 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 JUMPI PUSH1 DUP2 SSTORE PUSH1 ADD PUSH2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND ISZERO DUP1 PUSH2 JUMPI POP PUSH1 SLOAD PUSH2 SWAP1 PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH2 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH2 PUSH1 PUSH2 JUMP JUMPDEST POP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 POP PUSH2 JUMPI PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 PUSH1 PUSH1 MLOAD PUSH1 ADD MSTORE PUSH1 MLOAD DUP2 PUSH4 AND PUSH1 PUSH1 EXP MUL DUP2 MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP PUSH1 MLOAD DUP1 MLOAD PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND PUSH1 PUSH1 PUSH1 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH4 DUP3 PUSH1 MLOAD PUSH1 PUSH1 EXP PUSH4 DUP5 AND MUL DUP2 MSTORE PUSH32 SWAP1 SWAP2 AND PUSH1 DUP3 ADD MSTORE PUSH1 ADD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 GAS SUB CALL ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST POP POP POP POP JUMP STOP LOG1 PUSH6 SHA3 PUSH23 UNKNOWN_0xc0 UNKNOWN_0x4b DUP11 ISZERO UNKNOWN_0xef UNKNOWN_0x2a UNKNOWN_0xb3 UNKNOWN_0xe STOP UNKNOWN_0x29",
  "opcode_entropy": 4.790563237387078,
  "opcode_count": 7801,
  "unique_opcodes": 91,
  "byte_entropy": 5.856863387718291,
  "byte_60": 0.12270260808681953,
  "byte_40": 0.019341851916681252,
  "byte_52": 0.020217048835988096,
  "byte_04": 0.00656397689480133,
  "byte_36": 0.00026255907579205323,
  "byte_10": 0.007876772273761596,
  "byte_61": 0.04410992473306494,
  "byte_00": 0.0544372483808857,
  "byte_7f": 0.0025380710659898475,
  "byte_57": 0.018379135305443724,
  "byte_63": 0.004025905828811483,
  "byte_ff": 0.010239803955890076,
  "byte_e0": 0.002100472606336426,
  "byte_02": 0.024155434972868896,
  "byte_0a": 0.015315946087869771,
  "byte_35": 0.0014878347628216348,
  "byte_16": 0.018029056537720987,
  "byte_12": 0.0009627166112375284,
  "byte_8e": 0.0009627166112375284,
  "byte_1a": 0.0022755119901977944,
  "byte_f0": 0.00026255907579205323,
  "byte_81": 0.032819884474006654,
  "byte_14": 0.005076142131979695,
  "byte_d8": 0.0006126378435147909,
  "byte_80": 0.030981970943462278,
  "byte_27": 0.0011377559950988972,
  "byte_dc": 0.0005251181515841065,
  "byte_29": 0.004025905828811483,
  "byte_7e": 0.0007001575354454753,
  "byte_ee": 0.00035007876772273763,
  "byte_38": 0.0015753544547523193,
  "byte_bb": 0.0005251181515841065,
  "byte_fa": 0.00035007876772273763,
  "byte_50": 0.04944862594083669,
  "byte_01": 0.054787327148608435,
  "byte_44": 0.0007876772273761596,
  "byte_56": 0.015578505163661823,
  "byte_1e": 0.0014878347628216348,
  "byte_91": 0.015403465779800455,
  "byte_a1": 0.0007876772273761596,
  "byte_71": 0.00026255907579205323,
  "byte_d0": 0.000437598459653422,
  "byte_ed": 0.000875196919306844,
  "byte_05": 0.0012252756870295817,
  "byte_ef": 0.0009627166112375284,
  "byte_88": 0.003063189217573954,
  "byte_ea": 0.0009627166112375284,
  "byte_41": 0.0007001575354454753,
  "byte_b9": 0.000437598459653422,
  "byte_17": 0.003938386136880798,
  "byte_8d": 0.0007001575354454753,
  "byte_a5": 0.00017503938386136881,
  "byte_cb": 0.00017503938386136881,
  "byte_5b": 0.032732364782075966,
  "byte_2d": 0.00026255907579205323,
  "byte_c9": 0.00026255907579205323,
  "byte_c3": 0.00017503938386136881,
  "byte_ae": 0.0005251181515841065,
  "byte_5c": 0.0009627166112375284,
  "byte_f2": 0.0005251181515841065,
  "byte_fd": 0.005426220899702433,
  "byte_e3": 0.00035007876772273763,
  "byte_8b": 0.0016628741466830036,
  "byte_a8": 0.00035007876772273763,
  "byte_54": 0.0075266935060388585,
  "byte_33": 0.0007876772273761596,
  "byte_a0": 0.007964291965692281,
  "byte_03": 0.02030456852791878,
  "byte_90": 0.03474531769648171,
  "byte_a2": 0.0007001575354454753,
  "byte_9d": 0.00035007876772273763,
  "byte_c7": 0.00035007876772273763,
  "byte_d6": 0.0009627166112375284,
  "byte_d9": 0.00017503938386136881,
  "byte_30": 0.0006126378435147909,
  "byte_a7": 0.0005251181515841065,
  "byte_0e": 0.0016628741466830036,
  "byte_09": 0.0020129529144057414,
  "byte_49": 0.0007876772273761596,
  "byte_66": 0.000437598459653422,
  "byte_99": 0.001050236303168213,
  "byte_77": 0.00026255907579205323,
  "byte_51": 0.028969018029056538,
  "byte_b2": 8.751969193068441e-05,
  "byte_b5": 8.751969193068441e-05,
  "byte_9a": 0.000437598459653422,
  "byte_24": 0.0011377559950988972,
  "byte_89": 0.002800630141781901,
  "byte_67": 0.0006126378435147909,
  "byte_b8": 0.00017503938386136881,
  "byte_58": 0.0007001575354454753,
  "byte_9e": 0.00017503938386136881,
  "byte_34": 0.0012252756870295817,
  "byte_20": 0.02678102573078943,
  "byte_15": 0.01671626115876072,
  "byte_06": 0.0018379135305443726,
  "byte_f9": 0.00035007876772273763,
  "byte_83": 0.01470330824435498,
  "byte_1f": 0.006038858743217224,
  "byte_82": 0.01374059163311745,
  "byte_92": 0.006476457202870646,
  "byte_84": 0.005338701207771749,
  "byte_37": 0.00035007876772273763,
  "byte_94": 0.0016628741466830036,
  "byte_96": 0.0018379135305443726,
  "byte_9c": 0.0007001575354454753,
  "byte_95": 0.0016628741466830036,
  "byte_4f": 8.751969193068441e-05,
  "byte_ce": 0.0007001575354454753,
  "byte_e7": 0.00026255907579205323,
  "byte_08": 0.0014003150708909505,
  "byte_f3": 0.0006126378435147909,
  "byte_22": 0.0018379135305443726,
  "byte_55": 0.003063189217573954,
  "byte_75": 0.00035007876772273763,
  "byte_72": 0.0006126378435147909,
  "byte_93": 0.0022755119901977944,
  "byte_b3": 0.0006126378435147909,
  "byte_af": 0.0009627166112375284,
  "byte_11": 0.0027131104498512165,
  "byte_dd": 0.0006126378435147909,
  "byte_e8": 0.0005251181515841065,
  "byte_3d": 0.00017503938386136881,
  "byte_21": 0.001050236303168213,
  "byte_fc": 0.0006126378435147909,
  "byte_85": 0.003938386136880798,
  "byte_f1": 0.002800630141781901,
  "byte_a3": 0.0007876772273761596,
  "byte_26": 0.0015753544547523193,
  "byte_6b": 0.0005251181515841065,
  "byte_47": 0.00026255907579205323,
  "byte_5d": 0.00035007876772273763,
  "byte_2c": 0.0005251181515841065,
  "byte_d7": 0.00017503938386136881,
  "byte_6e": 0.001312795378960266,
  "byte_db": 0.00017503938386136881,
  "byte_3f": 0.00035007876772273763,
  "byte_b7": 0.00026255907579205323,
  "byte_ab": 0.00035007876772273763,
  "byte_f8": 0.004200945212672852,
  "byte_e2": 0.00017503938386136881,
  "byte_b4": 0.000437598459653422,
  "byte_62": 0.0006126378435147909,
  "byte_0d": 0.0009627166112375284,
  "byte_7b": 0.0007001575354454753,
  "byte_7c": 0.00017503938386136881,
  "byte_87": 0.004113425520742167,
  "byte_07": 0.000875196919306844,
  "byte_19": 0.007176614738316121,
  "byte_f4": 0.00017503938386136881,
  "byte_c0": 0.0005251181515841065,
  "byte_c2": 0.0005251181515841065,
  "byte_43": 0.0005251181515841065,
  "byte_79": 0.00035007876772273763,
  "byte_f5": 0.00026255907579205323,
  "byte_bc": 0.00035007876772273763,
  "byte_1c": 0.0018379135305443726,
  "byte_ec": 0.000437598459653422,
  "byte_c5": 0.000437598459653422,
  "byte_d1": 0.00017503938386136881,
  "byte_59": 0.003938386136880798,
  "byte_68": 0.0019254332224750569,
  "byte_ca": 0.000437598459653422,
  "byte_b0": 0.00035007876772273763,
  "byte_0c": 0.000875196919306844,
  "byte_70": 0.000875196919306844,
  "byte_f7": 8.751969193068441e-05,
  "byte_86": 0.003500787677227376,
  "byte_3c": 0.00035007876772273763,
  "byte_4e": 0.00026255907579205323,
  "byte_fe": 0.0037633467530194292,
  "byte_4c": 0.0015753544547523193,
  "byte_28": 0.0014878347628216348,
  "byte_32": 0.00026255907579205323,
  "byte_45": 0.00026255907579205323,
  "byte_53": 0.001050236303168213,
  "byte_64": 0.0014003150708909505,
  "byte_8c": 0.0007001575354454753,
  "byte_8a": 0.0014003150708909505,
  "byte_2b": 0.0007001575354454753,
  "byte_97": 0.001312795378960266,
  "byte_ac": 0.0005251181515841065,
  "byte_6d": 0.00026255907579205323,
  "byte_98": 0.0014878347628216348,
  "byte_0b": 0.001312795378960266,
  "byte_2f": 0.0005251181515841065,
  "byte_ad": 0.00026255907579205323,
  "byte_23": 0.0006126378435147909,
  "byte_cc": 0.0015753544547523193,
  "byte_48": 0.0014878347628216348,
  "byte_bd": 0.00035007876772273763,
  "byte_d5": 0.0007001575354454753,
  "byte_2a": 0.0020129529144057414,
  "byte_4a": 0.0005251181515841065,
  "byte_cf": 0.0006126378435147909,
  "byte_3a": 0.0005251181515841065,
  "byte_fb": 0.0007001575354454753,
  "byte_0f": 0.0007876772273761596,
  "byte_13": 0.001050236303168213,
  "byte_42": 0.0005251181515841065,
  "byte_cd": 0.00017503938386136881,
  "byte_df": 0.00035007876772273763,
  "byte_a4": 0.00035007876772273763,
  "byte_da": 0.00035007876772273763,
  "byte_18": 0.0027131104498512165,
  "byte_6f": 0.0006126378435147909,
  "byte_31": 0.0009627166112375284,
  "byte_7a": 0.0006126378435147909,
  "byte_e9": 0.0025380710659898475,
  "byte_c8": 0.00035007876772273763,
  "byte_5f": 0.001050236303168213,
  "byte_c6": 0.0014003150708909505,
  "byte_78": 0.0005251181515841065,
  "byte_5a": 0.002100472606336426,
  "byte_be": 8.751969193068441e-05,
  "byte_9b": 0.000437598459653422,
  "byte_3b": 0.0018379135305443726,
  "byte_f6": 0.0011377559950988972,
  "byte_a9": 0.00017503938386136881,
  "byte_de": 0.0005251181515841065,
  "byte_1b": 0.002363031682128479,
  "byte_c4": 0.00035007876772273763,
  "byte_4d": 0.00035007876772273763,
  "byte_3e": 0.00035007876772273763,
  "byte_6a": 0.00017503938386136881,
  "byte_e4": 0.0005251181515841065,
  "byte_74": 0.001050236303168213,
  "byte_aa": 0.00026255907579205323,
  "byte_d4": 0.00026255907579205323,
  "byte_e5": 0.0005251181515841065,
  "byte_b1": 8.751969193068441e-05,
  "byte_73": 0.0014003150708909505,
  "byte_1d": 0.000875196919306844,
  "byte_9f": 0.000437598459653422,
  "byte_d2": 0.00035007876772273763,
  "byte_b6": 0.0007001575354454753,
  "byte_65": 0.0011377559950988972,
  "byte_69": 0.0005251181515841065,
  "byte_25": 0.0012252756870295817,
  "byte_76": 0.00026255907579205323,
  "byte_d3": 0.00017503938386136881,
  "byte_2e": 0.00026255907579205323,
  "byte_6c": 0.00026255907579205323,
  "byte_e1": 0.00017503938386136881,
  "byte_c1": 0.00017503938386136881,
  "byte_8f": 0.0005251181515841065,
  "byte_bf": 0.00026255907579205323,
  "byte_4b": 0.00026255907579205323,
  "byte_39": 0.00035007876772273763,
  "byte_46": 8.751969193068441e-05,
  "byte_e6": 8.751969193068441e-05,
  "byte_ba": 8.751969193068441e-05,
  "byte_a6": 0.00017503938386136881,
  "byte_eb": 0.00017503938386136881,
  "num_nodes": 10,
  "num_edges": 13,
  "avg_degree": 2.6,
  "density": 0.14444444444444443,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 36,
  "event_nums": 13,
  "creation_block": 4665693,
  "creation_timestamp": 1512267660,
  "life_time": 3517807.0,
  "duration_seconds": 51303945.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 11,
  "num_buyers": 6,
  "num_sellers": 9,
  "num_creator_transfers": 14,
  "buy_amt": 2.633620169019558e+18,
  "sell_amt": 5.7252e+18,
  "avg_value": 2.259140586221502e+17,
  "txn_per_block": 1.0233645497423396e-05,
  "avg_gas_limit": 615237.3333333334,
  "std_gas_limit": 1750719.916072068,
  "avg_gas_used": 167745.44444444444,
  "std_gas_used": 538016.4738692923,
  "avg_gas_price": 7555605555.555555,
  "std_gas_price": 9523192873.014585,
  "log_newbet_num": 6,
  "log_betwon_num": 2,
  "__callback_num": 6,
  "timeline_sequence": [
    [
      4665693,
      1512267660,
      3,
      27,
      0,
      3309391,
      5000000000,
      0,
      1,
      4156835,
      3309391,
      18455837
    ],
    [
      4665777,
      1512268768,
      5,
      62,
      3000000000000000000,
      33604,
      10000000000,
      0,
      1,
      2136776,
      22403,
      18455753
    ],
    [
      4667627,
      1512295472,
      2911903,
      17,
      2000200000000000000,
      358490,
      20000000000,
      0,
      1,
      808274,
      258490,
      18453903
    ],
    [
      4667631,
      1512295527,
      355121,
      25,
      0,
      200000,
      20000000000,
      0,
      1,
      950278,
      159011,
      18453899
    ],
    [
      4916144,
      1516076453,
      0,
      70,
      25000000000000000,
      319836,
      12000000000,
      0,
      1,
      3516074,
      213224,
      18205386
    ],
    [
      4916149,
      1516076512,
      384535,
      197,
      0,
      200000,
      40000000000,
      0,
      1,
      6048738,
      109697,
      18205381
    ],
    [
      8177991,
      1563496382,
      21,
      142,
      50000000000000000,
      21000,
      3000000000,
      1,
      0,
      6669766,
      21000,
      14943539
    ],
    [
      8177995,
      1563496445,
      22,
      129,
      50000000000000000,
      21000,
      3000000000,
      1,
      0,
      5691932,
      21000,
      14943535
    ],
    [
      8178000,
      1563496525,
      23,
      53,
      100000000000000000,
      21000,
      3000000000,
      1,
      0,
      2228047,
      21000,
      14943530
    ],
    [
      8178004,
      1563496593,
      24,
      26,
      50000000000000000,
      21000,
      21000000000,
      1,
      0,
      885837,
      21000,
      14943526
    ],
    [
      8178051,
      1563497199,
      25,
      5,
      50000000000000000,
      7600000,
      4000000000,
      0,
      1,
      320643,
      213224,
      14943479
    ],
    [
      8178052,
      1563497209,
      57417,
      67,
      0,
      200000,
      20000000000,
      0,
      1,
      2467942,
      154456,
      14943478
    ],
    [
      8178060,
      1563497344,
      26,
      129,
      50000000000000000,
      21000,
      5000000000,
      1,
      0,
      4659445,
      21000,
      14943470
    ],
    [
      8183406,
      1563570425,
      27,
      3,
      50000000000000000,
      21000,
      20000000000,
      1,
      0,
      114848,
      21000,
      14938124
    ],
    [
      8183417,
      1563570531,
      28,
      143,
      50000000000000000,
      210000,
      3000000000,
      1,
      0,
      5976903,
      210000,
      14938113
    ],
    [
      8183426,
      1563570618,
      29,
      61,
      50000000000000000,
      210000,
      5000000000,
      1,
      0,
      2299170,
      210000,
      14938104
    ],
    [
      8183461,
      1563571137,
      19,
      76,
      50000000000000000,
      213224,
      6000600000,
      0,
      1,
      2593260,
      213224,
      14938069
    ],
    [
      8183463,
      1563571164,
      57327,
      18,
      0,
      200000,
      20000000000,
      0,
      1,
      730665,
      105291,
      14938067
    ],
    [
      8183482,
      1563571408,
      20,
      117,
      100000000000000000,
      213224,
      6000600000,
      0,
      1,
      3912526,
      213224,
      14938048
    ],
    [
      8183485,
      1563571458,
      57332,
      13,
      0,
      200000,
      20000000000,
      0,
      1,
      542456,
      105227,
      14938045
    ],
    [
      8183497,
      1563571574,
      21,
      16,
      50000000000000000,
      213224,
      6000600000,
      0,
      1,
      1512424,
      213224,
      14938033
    ],
    [
      8183500,
      1563571605,
      57539,
      10,
      0,
      200000,
      20000000000,
      0,
      1,
      530623,
      105574,
      14938030
    ],
    [
      4667627,
      1512295472,
      0,
      0,
      1500180000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4667631,
      1512295527,
      0,
      0,
      1000040000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4916144,
      1516076453,
      0,
      0,
      8105000000000000,
      212874,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      4916149,
      1516076512,
      0,
      0,
      1,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      8178051,
      1563497199,
      0,
      0,
      4215861503259500,
      7379285,
      0,
      0,
      0,
      0,
      16196,
      0
    ],
    [
      8178052,
      1563497209,
      0,
      0,
      1,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      8183417,
      1563570531,
      0,
      0,
      4215861503259500,
      104754,
      0,
      1,
      0,
      0,
      16196,
      0
    ],
    [
      8183426,
      1563570618,
      0,
      0,
      4215861503259500,
      104754,
      0,
      1,
      0,
      0,
      16196,
      0
    ],
    [
      8183461,
      1563571137,
      0,
      0,
      4215861503259500,
      107928,
      0,
      0,
      0,
      0,
      16196,
      0
    ],
    [
      8183463,
      1563571164,
      0,
      0,
      1,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      8183482,
      1563571408,
      0,
      0,
      4215861503259500,
      107928,
      0,
      0,
      0,
      0,
      16196,
      0
    ],
    [
      8183485,
      1563571458,
      0,
      0,
      1,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ],
    [
      8183497,
      1563571574,
      0,
      0,
      4215861503259500,
      107928,
      0,
      0,
      0,
      0,
      16196,
      0
    ],
    [
      8183500,
      1563571605,
      0,
      0,
      100000000000000000,
      2300,
      0,
      0,
      0,
      0,
      0,
      0
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.17;\n/**\n * @title Ownable\n * @dev The Ownable contract has an owner address, and provides basic authorization control\n * functions, this simplifies the implementation of \"user permissions\".\n */\ncontract Ownable {\n  address public owner;\n  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n  /**\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\n   * account.\n   */\n  function Ownable() {\n    owner = msg.sender;\n  }\n  /**\n   * @dev Throws if called by any account other than the owner.\n   */\n  modifier onlyOwner() {\n    require(msg.sender == owner);\n    _;\n  }\n  /**\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\n   * @param newOwner The address to transfer ownership to.\n   */\n  function transferOwnership(address newOwner) onlyOwner public {\n    require(newOwner != address(0));\n    OwnershipTransferred(owner, newOwner);\n    owner = newOwner;\n  }\n}\n/**\n * @title SafeMath\n * @dev Math operations with safety checks that throw on error\n */\nlibrary SafeMath {\n  function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n    if (a == 0) {\n      return 0;\n    }\n    uint256 c = a * b;\n    assert(c / a == b);\n    return c;\n  }\n  function div(uint256 a, uint256 b) internal pure returns (uint256) {\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\n    uint256 c = a / b;\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n    return c;\n  }\n  function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 c = a + b;\n    assert(c >= a);\n    return c;\n  }\n}\n// <ORACLIZE_API>\n/*\nCopyright (c) 2015-2016 Oraclize SRL\nCopyright (c) 2016 Oraclize LTD\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n  //please import oraclizeAPI_pre0.4.sol when solidity < 0.4.0\ncontract OraclizeI {\n    address public cbAddress;\n    function query(uint _timestamp, string _datasource, string _arg) payable returns (bytes32 _id);\n    function query_withGasLimit(uint _timestamp, string _datasource, string _arg, uint _gaslimit) payable returns (bytes32 _id);\n    function query2(uint _timestamp, string _datasource, string _arg1, string _arg2) payable returns (bytes32 _id);\n    function query2_withGasLimit(uint _timestamp, string _datasource, string _arg1, string _arg2, uint _gaslimit) payable returns (bytes32 _id);\n    function queryN(uint _timestamp, string _datasource, bytes _argN) payable returns (bytes32 _id);\n    function queryN_withGasLimit(uint _timestamp, string _datasource, bytes _argN, uint _gaslimit) payable returns (bytes32 _id);\n    function getPrice(string _datasource) returns (uint _dsprice);\n    function getPrice(string _datasource, uint gaslimit) returns (uint _dsprice);\n    function useCoupon(string _coupon);\n    function setProofType(byte _proofType);\n    function setConfig(bytes32 _config);\n    function setCustomGasPrice(uint _gasPrice);\n    function randomDS_getSessionPubKeyHash() returns(bytes32);\n}\ncontract OraclizeAddrResolverI {\n    function getAddress() returns (address _addr);\n}\ncontract usingOraclize {\n    uint constant day = 60*60*24;\n    uint constant week = 60*60*24*7;\n    uint constant month = 60*60*24*30;\n    byte constant proofType_NONE = 0x00;\n    byte constant proofType_TLSNotary = 0x10;\n    byte constant proofType_Android = 0x20;\n    byte constant proofType_Ledger = 0x30;\n    byte constant proofType_Native = 0xF0;\n    byte constant proofStorage_IPFS = 0x01;\n    uint8 constant networkID_auto = 0;\n    uint8 constant networkID_mainnet = 1;\n    uint8 constant networkID_testnet = 2;\n    uint8 constant networkID_morden = 2;\n    uint8 constant networkID_consensys = 161;\n    OraclizeAddrResolverI OAR;\n    OraclizeI oraclize;\n    modifier oraclizeAPI {\n        if((address(OAR)==0)||(getCodeSize(address(OAR))==0))\n            oraclize_setNetwork(networkID_auto);\n        if(address(oraclize) != OAR.getAddress())\n            oraclize = OraclizeI(OAR.getAddress());\n        _;\n    }\n    modifier coupon(string code){\n        oraclize = OraclizeI(OAR.getAddress());\n        oraclize.useCoupon(code);\n        _;\n    }\n    function oraclize_setNetwork(uint8 networkID) internal returns(bool){\n        if (getCodeSize(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed)>0){ //mainnet\n            OAR = OraclizeAddrResolverI(0x1d3B2638a7cC9f2CB3D298A3DA7a90B67E5506ed);\n            oraclize_setNetworkName(\"eth_mainnet\");\n            return true;\n        }\n        if (getCodeSize(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1)>0){ //ropsten testnet\n            OAR = OraclizeAddrResolverI(0xc03A2615D5efaf5F49F60B7BB6583eaec212fdf1);\n            oraclize_setNetworkName(\"eth_ropsten3\");\n            return true;\n        }\n        if (getCodeSize(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e)>0){ //kovan testnet\n            OAR = OraclizeAddrResolverI(0xB7A07BcF2Ba2f2703b24C0691b5278999C59AC7e);\n            oraclize_setNetworkName(\"eth_kovan\");\n            return true;\n        }\n        if (getCodeSize(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48)>0){ //rinkeby testnet\n            OAR = OraclizeAddrResolverI(0x146500cfd35B22E4A392Fe0aDc06De1a1368Ed48);\n            oraclize_setNetworkName(\"eth_rinkeby\");\n            return true;\n        }\n        if (getCodeSize(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475)>0){ //ethereum-bridge\n            OAR = OraclizeAddrResolverI(0x6f485C8BF6fc43eA212E93BBF8ce046C7f1cb475);\n            return true;\n        }\n        if (getCodeSize(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF)>0){ //ether.camp ide\n            OAR = OraclizeAddrResolverI(0x20e12A1F859B3FeaE5Fb2A0A32C18F5a65555bBF);\n            return true;\n        }\n        if (getCodeSize(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA)>0){ //browser-solidity\n            OAR = OraclizeAddrResolverI(0x51efaF4c8B3C9AfBD5aB9F4bbC82784Ab6ef8fAA);\n            return true;\n        }\n        return false;\n    }\n    function __callback(bytes32 myid, string result) {\n        __callback(myid, result, new bytes(0));\n    }\n    function __callback(bytes32 myid, string result, bytes proof) {\n    }\n    \n    function oraclize_useCoupon(string code) oraclizeAPI internal {\n        oraclize.useCoupon(code);\n    }\n    function oraclize_getPrice(string datasource) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource);\n    }\n    function oraclize_getPrice(string datasource, uint gaslimit) oraclizeAPI internal returns (uint){\n        return oraclize.getPrice(datasource, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(0, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query.value(price)(timestamp, datasource, arg);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(timestamp, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query_withGasLimit.value(price)(0, datasource, arg, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(0, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        return oraclize.query2.value(price)(timestamp, datasource, arg1, arg2);\n    }\n    function oraclize_query(uint timestamp, string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(timestamp, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string arg1, string arg2, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        return oraclize.query2_withGasLimit.value(price)(0, datasource, arg1, arg2, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(0, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = stra2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](1);\n        dynargs[0] = args[0];       \n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, string[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        string[] memory dynargs = new string[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN.value(price)(0, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource);\n        if (price > 1 ether + tx.gasprice*200000) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN.value(price)(timestamp, datasource, args);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(timestamp, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[] argN, uint gaslimit) oraclizeAPI internal returns (bytes32 id){\n        uint price = oraclize.getPrice(datasource, gaslimit);\n        if (price > 1 ether + tx.gasprice*gaslimit) return 0; // unexpectedly high price\n        bytes memory args = ba2cbor(argN);\n        return oraclize.queryN_withGasLimit.value(price)(0, datasource, args, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[1] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](1);\n        dynargs[0] = args[0];       \n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[2] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](2);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[3] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](3);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    \n    function oraclize_query(string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[4] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](4);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs);\n    }\n    function oraclize_query(uint timestamp, string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(timestamp, datasource, dynargs, gaslimit);\n    }\n    function oraclize_query(string datasource, bytes[5] args, uint gaslimit) oraclizeAPI internal returns (bytes32 id) {\n        bytes[] memory dynargs = new bytes[](5);\n        dynargs[0] = args[0];\n        dynargs[1] = args[1];\n        dynargs[2] = args[2];\n        dynargs[3] = args[3];\n        dynargs[4] = args[4];\n        return oraclize_query(datasource, dynargs, gaslimit);\n    }\n    function oraclize_cbAddress() oraclizeAPI internal returns (address){\n        return oraclize.cbAddress();\n    }\n    function oraclize_setProof(byte proofP) oraclizeAPI internal {\n        return oraclize.setProofType(proofP);\n    }\n    function oraclize_setCustomGasPrice(uint gasPrice) oraclizeAPI internal {\n        return oraclize.setCustomGasPrice(gasPrice);\n    }\n    function oraclize_setConfig(bytes32 config) oraclizeAPI internal {\n        return oraclize.setConfig(config);\n    }\n    \n    function oraclize_randomDS_getSessionPubKeyHash() oraclizeAPI internal returns (bytes32){\n        return oraclize.randomDS_getSessionPubKeyHash();\n    }\n    function getCodeSize(address _addr) constant internal returns(uint _size) {\n        assembly {\n            _size := extcodesize(_addr)\n        }\n    }\n    function parseAddr(string _a) internal returns (address){\n        bytes memory tmp = bytes(_a);\n        uint160 iaddr = 0;\n        uint160 b1;\n        uint160 b2;\n        for (uint i=2; i<2+2*20; i+=2){\n            iaddr *= 256;\n            b1 = uint160(tmp[i]);\n            b2 = uint160(tmp[i+1]);\n            if ((b1 >= 97)&&(b1 <= 102)) b1 -= 87;\n            else if ((b1 >= 65)&&(b1 <= 70)) b1 -= 55;\n            else if ((b1 >= 48)&&(b1 <= 57)) b1 -= 48;\n            if ((b2 >= 97)&&(b2 <= 102)) b2 -= 87;\n            else if ((b2 >= 65)&&(b2 <= 70)) b2 -= 55;\n            else if ((b2 >= 48)&&(b2 <= 57)) b2 -= 48;\n            iaddr += (b1*16+b2);\n        }\n        return address(iaddr);\n    }\n    function strCompare(string _a, string _b) internal returns (int) {\n        bytes memory a = bytes(_a);\n        bytes memory b = bytes(_b);\n        uint minLength = a.length;\n        if (b.length < minLength) minLength = b.length;\n        for (uint i = 0; i < minLength; i ++)\n            if (a[i] < b[i])\n                return -1;\n            else if (a[i] > b[i])\n                return 1;\n        if (a.length < b.length)\n            return -1;\n        else if (a.length > b.length)\n            return 1;\n        else\n            return 0;\n    }\n    function indexOf(string _haystack, string _needle) internal returns (int) {\n        bytes memory h = bytes(_haystack);\n        bytes memory n = bytes(_needle);\n        if(h.length < 1 || n.length < 1 || (n.length > h.length))\n            return -1;\n        else if(h.length > (2**128 -1))\n            return -1;\n        else\n        {\n            uint subindex = 0;\n            for (uint i = 0; i < h.length; i ++)\n            {\n                if (h[i] == n[0])\n                {\n                    subindex = 1;\n                    while(subindex < n.length && (i + subindex) < h.length && h[i + subindex] == n[subindex])\n                    {\n                        subindex++;\n                    }\n                    if(subindex == n.length)\n                        return int(i);\n                }\n            }\n            return -1;\n        }\n    }\n    function strConcat(string _a, string _b, string _c, string _d, string _e) internal returns (string) {\n        bytes memory _ba = bytes(_a);\n        bytes memory _bb = bytes(_b);\n        bytes memory _bc = bytes(_c);\n        bytes memory _bd = bytes(_d);\n        bytes memory _be = bytes(_e);\n        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);\n        bytes memory babcde = bytes(abcde);\n        uint k = 0;\n        for (uint i = 0; i < _ba.length; i++) babcde[k++] = _ba[i];\n        for (i = 0; i < _bb.length; i++) babcde[k++] = _bb[i];\n        for (i = 0; i < _bc.length; i++) babcde[k++] = _bc[i];\n        for (i = 0; i < _bd.length; i++) babcde[k++] = _bd[i];\n        for (i = 0; i < _be.length; i++) babcde[k++] = _be[i];\n        return string(babcde);\n    }\n    function strConcat(string _a, string _b, string _c, string _d) internal returns (string) {\n        return strConcat(_a, _b, _c, _d, \"\");\n    }\n    function strConcat(string _a, string _b, string _c) internal returns (string) {\n        return strConcat(_a, _b, _c, \"\", \"\");\n    }\n    function strConcat(string _a, string _b) internal returns (string) {\n        return strConcat(_a, _b, \"\", \"\", \"\");\n    }\n    // parseInt\n    function parseInt(string _a) internal returns (uint) {\n        return parseInt(_a, 0);\n    }\n    // parseInt(parseFloat*10^_b)\n    function parseInt(string _a, uint _b) internal returns (uint) {\n        bytes memory bresult = bytes(_a);\n        uint mint = 0;\n        bool decimals = false;\n        for (uint i=0; i<bresult.length; i++){\n            if ((bresult[i] >= 48)&&(bresult[i] <= 57)){\n                if (decimals){\n                   if (_b == 0) break;\n                    else _b--;\n                }\n                mint *= 10;\n                mint += uint(bresult[i]) - 48;\n            } else if (bresult[i] == 46) decimals = true;\n        }\n        if (_b > 0) mint *= 10**_b;\n        return mint;\n    }\n    function uint2str(uint i) internal returns (string){\n        if (i == 0) return \"0\";\n        uint j = i;\n        uint len;\n        while (j != 0){\n            len++;\n            j /= 10;\n        }\n        bytes memory bstr = new bytes(len);\n        uint k = len - 1;\n        while (i != 0){\n            bstr[k--] = byte(48 + i % 10);\n            i /= 10;\n        }\n        return string(bstr);\n    }\n    \n    function stra2cbor(string[] arr) internal returns (bytes) {\n            uint arrlen = arr.length;\n            // get correct cbor output length\n            uint outputlen = 0;\n            bytes[] memory elemArray = new bytes[](arrlen);\n            for (uint i = 0; i < arrlen; i++) {\n                elemArray[i] = (bytes(arr[i]));\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\n            }\n            uint ctr = 0;\n            uint cborlen = arrlen + 0x80;\n            outputlen += byte(cborlen).length;\n            bytes memory res = new bytes(outputlen);\n            while (byte(cborlen).length > ctr) {\n                res[ctr] = byte(cborlen)[ctr];\n                ctr++;\n            }\n            for (i = 0; i < arrlen; i++) {\n                res[ctr] = 0x5F;\n                ctr++;\n                for (uint x = 0; x < elemArray[i].length; x++) {\n                    // if there's a bug with larger strings, this may be the culprit\n                    if (x % 23 == 0) {\n                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\n                        elemcborlen += 0x40;\n                        uint lctr = ctr;\n                        while (byte(elemcborlen).length > ctr - lctr) {\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\n                            ctr++;\n                        }\n                    }\n                    res[ctr] = elemArray[i][x];\n                    ctr++;\n                }\n                res[ctr] = 0xFF;\n                ctr++;\n            }\n            return res;\n        }\n    function ba2cbor(bytes[] arr) internal returns (bytes) {\n            uint arrlen = arr.length;\n            // get correct cbor output length\n            uint outputlen = 0;\n            bytes[] memory elemArray = new bytes[](arrlen);\n            for (uint i = 0; i < arrlen; i++) {\n                elemArray[i] = (bytes(arr[i]));\n                outputlen += elemArray[i].length + (elemArray[i].length - 1)/23 + 3; //+3 accounts for paired identifier types\n            }\n            uint ctr = 0;\n            uint cborlen = arrlen + 0x80;\n            outputlen += byte(cborlen).length;\n            bytes memory res = new bytes(outputlen);\n            while (byte(cborlen).length > ctr) {\n                res[ctr] = byte(cborlen)[ctr];\n                ctr++;\n            }\n            for (i = 0; i < arrlen; i++) {\n                res[ctr] = 0x5F;\n                ctr++;\n                for (uint x = 0; x < elemArray[i].length; x++) {\n                    // if there's a bug with larger strings, this may be the culprit\n                    if (x % 23 == 0) {\n                        uint elemcborlen = elemArray[i].length - x >= 24 ? 23 : elemArray[i].length - x;\n                        elemcborlen += 0x40;\n                        uint lctr = ctr;\n                        while (byte(elemcborlen).length > ctr - lctr) {\n                            res[ctr] = byte(elemcborlen)[ctr - lctr];\n                            ctr++;\n                        }\n                    }\n                    res[ctr] = elemArray[i][x];\n                    ctr++;\n                }\n                res[ctr] = 0xFF;\n                ctr++;\n            }\n            return res;\n        }\n        \n        \n    string oraclize_network_name;\n    function oraclize_setNetworkName(string _network_name) internal {\n        oraclize_network_name = _network_name;\n    }\n    \n    function oraclize_getNetworkName() internal returns (string) {\n        return oraclize_network_name;\n    }\n    \n    function oraclize_newRandomDSQuery(uint _delay, uint _nbytes, uint _customGasLimit) internal returns (bytes32){\n        if ((_nbytes == 0)||(_nbytes > 32)) throw;\n        bytes memory nbytes = new bytes(1);\n        nbytes[0] = byte(_nbytes);\n        bytes memory unonce = new bytes(32);\n        bytes memory sessionKeyHash = new bytes(32);\n        bytes32 sessionKeyHash_bytes32 = oraclize_randomDS_getSessionPubKeyHash();\n        assembly {\n            mstore(unonce, 0x20)\n            mstore(add(unonce, 0x20), xor(blockhash(sub(number, 1)), xor(coinbase, timestamp)))\n            mstore(sessionKeyHash, 0x20)\n            mstore(add(sessionKeyHash, 0x20), sessionKeyHash_bytes32)\n        }\n        bytes[3] memory args = [unonce, nbytes, sessionKeyHash]; \n        bytes32 queryId = oraclize_query(_delay, \"random\", args, _customGasLimit);\n        oraclize_randomDS_setCommitment(queryId, sha3(bytes8(_delay), args[1], sha256(args[0]), args[2]));\n        return queryId;\n    }\n    \n    function oraclize_randomDS_setCommitment(bytes32 queryId, bytes32 commitment) internal {\n        oraclize_randomDS_args[queryId] = commitment;\n    }\n    \n    mapping(bytes32=>bytes32) oraclize_randomDS_args;\n    mapping(bytes32=>bool) oraclize_randomDS_sessionKeysHashVerified;\n    function verifySig(bytes32 tosignh, bytes dersig, bytes pubkey) internal returns (bool){\n        bool sigok;\n        address signer;\n        \n        bytes32 sigr;\n        bytes32 sigs;\n        \n        bytes memory sigr_ = new bytes(32);\n        uint offset = 4+(uint(dersig[3]) - 0x20);\n        sigr_ = copyBytes(dersig, offset, 32, sigr_, 0);\n        bytes memory sigs_ = new bytes(32);\n        offset += 32 + 2;\n        sigs_ = copyBytes(dersig, offset+(uint(dersig[offset-1]) - 0x20), 32, sigs_, 0);\n        assembly {\n            sigr := mload(add(sigr_, 32))\n            sigs := mload(add(sigs_, 32))\n        }\n        \n        \n        (sigok, signer) = safer_ecrecover(tosignh, 27, sigr, sigs);\n        if (address(sha3(pubkey)) == signer) return true;\n        else {\n            (sigok, signer) = safer_ecrecover(tosignh, 28, sigr, sigs);\n            return (address(sha3(pubkey)) == signer);\n        }\n    }\n    function oraclize_randomDS_proofVerify__sessionKeyValidity(bytes proof, uint sig2offset) internal returns (bool) {\n        bool sigok;\n        \n        // Step 6: verify the attestation signature, APPKEY1 must sign the sessionKey from the correct ledger app (CODEHASH)\n        bytes memory sig2 = new bytes(uint(proof[sig2offset+1])+2);\n        copyBytes(proof, sig2offset, sig2.length, sig2, 0);\n        \n        bytes memory appkey1_pubkey = new bytes(64);\n        copyBytes(proof, 3+1, 64, appkey1_pubkey, 0);\n        \n        bytes memory tosign2 = new bytes(1+65+32);\n        tosign2[0] = 1; //role\n        copyBytes(proof, sig2offset-65, 65, tosign2, 1);\n        bytes memory CODEHASH = hex\"fd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c\";\n        copyBytes(CODEHASH, 0, 32, tosign2, 1+65);\n        sigok = verifySig(sha256(tosign2), sig2, appkey1_pubkey);\n        \n        if (sigok == false) return false;\n        \n        \n        // Step 7: verify the APPKEY1 provenance (must be signed by Ledger)\n        bytes memory LEDGERKEY = hex\"7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4\";\n        \n        bytes memory tosign3 = new bytes(1+65);\n        tosign3[0] = 0xFE;\n        copyBytes(proof, 3, 65, tosign3, 1);\n        \n        bytes memory sig3 = new bytes(uint(proof[3+65+1])+2);\n        copyBytes(proof, 3+65, sig3.length, sig3, 0);\n        \n        sigok = verifySig(sha256(tosign3), sig3, LEDGERKEY);\n        \n        return sigok;\n    }\n    \n    modifier oraclize_randomDS_proofVerify(bytes32 _queryId, string _result, bytes _proof) {\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) throw;\n        \n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        if (proofVerified == false) throw;\n        \n        _;\n    }\n    \n    function oraclize_randomDS_proofVerify__returnCode(bytes32 _queryId, string _result, bytes _proof) internal returns (uint8){\n        // Step 1: the prefix has to match 'LP\\x01' (Ledger Proof version 1)\n        if ((_proof[0] != \"L\")||(_proof[1] != \"P\")||(_proof[2] != 1)) return 1;\n        \n        bool proofVerified = oraclize_randomDS_proofVerify__main(_proof, _queryId, bytes(_result), oraclize_getNetworkName());\n        if (proofVerified == false) return 2;\n        \n        return 0;\n    }\n    \n    function matchBytes32Prefix(bytes32 content, bytes prefix) internal returns (bool){\n        bool match_ = true;\n        \n        for (var i=0; i<prefix.length; i++){\n            if (content[i] != prefix[i]) match_ = false;\n        }\n        \n        return match_;\n    }\n    function oraclize_randomDS_proofVerify__main(bytes proof, bytes32 queryId, bytes result, string context_name) internal returns (bool){\n        bool checkok;\n        \n        \n        // Step 2: the unique keyhash has to match with the sha256 of (context name + queryId)\n        uint ledgerProofLength = 3+65+(uint(proof[3+65+1])+2)+32;\n        bytes memory keyhash = new bytes(32);\n        copyBytes(proof, ledgerProofLength, 32, keyhash, 0);\n        checkok = (sha3(keyhash) == sha3(sha256(context_name, queryId)));\n        if (checkok == false) return false;\n        \n        bytes memory sig1 = new bytes(uint(proof[ledgerProofLength+(32+8+1+32)+1])+2);\n        copyBytes(proof, ledgerProofLength+(32+8+1+32), sig1.length, sig1, 0);\n        \n        \n        // Step 3: we assume sig1 is valid (it will be verified during step 5) and we verify if 'result' is the prefix of sha256(sig1)\n        checkok = matchBytes32Prefix(sha256(sig1), result);\n        if (checkok == false) return false;\n        \n        \n        // Step 4: commitment match verification, sha3(delay, nbytes, unonce, sessionKeyHash) == commitment in storage.\n        // This is to verify that the computed args match with the ones specified in the query.\n        bytes memory commitmentSlice1 = new bytes(8+1+32);\n        copyBytes(proof, ledgerProofLength+32, 8+1+32, commitmentSlice1, 0);\n        \n        bytes memory sessionPubkey = new bytes(64);\n        uint sig2offset = ledgerProofLength+32+(8+1+32)+sig1.length+65;\n        copyBytes(proof, sig2offset-64, 64, sessionPubkey, 0);\n        \n        bytes32 sessionPubkeyHash = sha256(sessionPubkey);\n        if (oraclize_randomDS_args[queryId] == sha3(commitmentSlice1, sessionPubkeyHash)){ //unonce, nbytes and sessionKeyHash match\n            delete oraclize_randomDS_args[queryId];\n        } else return false;\n        \n        \n        // Step 5: validity verification for sig1 (keyhash and args signed with the sessionKey)\n        bytes memory tosign1 = new bytes(32+8+1+32);\n        copyBytes(proof, ledgerProofLength, 32+8+1+32, tosign1, 0);\n        checkok = verifySig(sha256(tosign1), sig1, sessionPubkey);\n        if (checkok == false) return false;\n        \n        // verify if sessionPubkeyHash was verified already, if not.. let's do it!\n        if (oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] == false){\n            oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash] = oraclize_randomDS_proofVerify__sessionKeyValidity(proof, sig2offset);\n        }\n        \n        return oraclize_randomDS_sessionKeysHashVerified[sessionPubkeyHash];\n    }\n    \n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function copyBytes(bytes from, uint fromOffset, uint length, bytes to, uint toOffset) internal returns (bytes) {\n        uint minLength = length + toOffset;\n        if (to.length < minLength) {\n            // Buffer too small\n            throw; // Should be a better way?\n        }\n        // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\n        uint i = 32 + fromOffset;\n        uint j = 32 + toOffset;\n        while (i < (32 + fromOffset + length)) {\n            assembly {\n                let tmp := mload(add(from, i))\n                mstore(add(to, j), tmp)\n            }\n            i += 32;\n            j += 32;\n        }\n        return to;\n    }\n    \n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    // Duplicate Solidity's ecrecover, but catching the CALL return value\n    function safer_ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal returns (bool, address) {\n        // We do our own memory management here. Solidity uses memory offset\n        // 0x40 to store the current end of memory. We write past it (as\n        // writes are memory extensions), but don't update the offset so\n        // Solidity will reuse it. The memory used here is only needed for\n        // this context.\n        // FIXME: inline assembly can't access return values\n        bool ret;\n        address addr;\n        assembly {\n            let size := mload(0x40)\n            mstore(size, hash)\n            mstore(add(size, 32), v)\n            mstore(add(size, 64), r)\n            mstore(add(size, 96), s)\n            // NOTE: we can reuse the request memory because we deal with\n            //       the return code\n            ret := call(3000, 1, 0, size, 128, size, 32)\n            addr := mload(size)\n        }\n  \n        return (ret, addr);\n    }\n    // the following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\n    function ecrecovery(bytes32 hash, bytes sig) internal returns (bool, address) {\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        if (sig.length != 65)\n          return (false, 0);\n        // The signature format is a compact form of:\n        //   {bytes32 r}{bytes32 s}{uint8 v}\n        // Compact means, uint8 is not padded to 32 bytes.\n        assembly {\n            r := mload(add(sig, 32))\n            s := mload(add(sig, 64))\n            // Here we are loading the last 32 bytes. We exploit the fact that\n            // 'mload' will pad with zeroes if we overread.\n            // There is no 'mload8' to do this, but that would be nicer.\n            v := byte(0, mload(add(sig, 96)))\n            // Alternative solution:\n            // 'byte' is not working due to the Solidity parser, so lets\n            // use the second best option, 'and'\n            // v := and(mload(add(sig, 65)), 255)\n        }\n        // albeit non-transactional signatures are not specified by the YP, one would expect it\n        // to match the YP range of [27, 28]\n        //\n        // geth uses [0, 1] and some clients have followed. This might change, see:\n        //  https://github.com/ethereum/go-ethereum/issues/2053\n        if (v < 27)\n          v += 27;\n        if (v != 27 && v != 28)\n            return (false, 0);\n        return safer_ecrecover(hash, v, r, s);\n    }\n        \n}\n// </ORACLIZE_API>\ncontract Bitlagio is Ownable, usingOraclize {\n  using SafeMath for uint;\n  uint constant N = 4;\n  uint constant MODULO = 100;\n  uint constant HOUSE_EDGE = 10;\n  uint minBet = 0.01 ether;\n  struct Bet {\n    address playerAddress;\n    uint amountBet;\n    uint numberRolled;\n  }\n  mapping(bytes32 => Bet) public bets;\n  bytes32[] public betsKeys;\n  // only allows player to wager Math.min(1/10 * pot balance, 10eth)\n  uint maxBetAllowed;\n  event LOG_NewBet(address playerAddress, uint amount);\n  event LOG_BetWon(address playerAddress, uint numberRolled, uint amountWon);\n  event LOG_BetLost(address playerAddress, uint numberRolled, uint amountLost);\n  event LOG_OwnerDeposit(uint amount);\n  event LOG_OwnerWithdraw(address destination, uint amount);\n  modifier onlyIfBetSizeAllowed() {\n    if (msg.value <= minBet) throw;\n    _;\n  }\n  modifier onlyIfBetExist(bytes32 betId) {\n    if(bets[betId].playerAddress == address(0x0)) throw;\n    _;\n  }\n  modifier onlyIfNotProcessed(bytes32 betId) {\n    if (bets[betId].numberRolled > 0) throw;\n    _;\n  }\n  modifier onlyOraclize {\n    if (msg.sender != oraclize_cbAddress()) throw;\n    _;\n  }\n  function Bitlagio() public {\n    oraclize_setProof(proofType_Ledger);\n  }\n  function adjustMaxBetAllowed() internal {\n    maxBetAllowed = this.balance.div(10);\n    if (maxBetAllowed > 10 ether) {\n      maxBetAllowed = 10 ether;\n    }\n  }\n  function () payable external {\n    if (msg.sender != owner) {\n      makeBet();\n    } else {\n      LOG_OwnerDeposit(msg.value);\n    }\n  }\n  function makeBet() onlyIfBetSizeAllowed {\n    var betSize = msg.value;\n    adjustMaxBetAllowed();\n    if (betSize >= maxBetAllowed) {\n      betSize = maxBetAllowed;\n      msg.sender.send(msg.value - betSize);  // refund better of his ether over limit\n    }\n    LOG_NewBet(msg.sender, betSize);\n    uint delay = 0; // number of seconds to wait before the execution takes place\n    uint callbackGas = 200000; // amount of gas we want Oraclize to set for the callback function\n    bytes32 betId = oraclize_newRandomDSQuery(delay, N, callbackGas);\n    bets[betId] = Bet(msg.sender, betSize, 0);\n    betsKeys.push(betId);\n  }\n  function __callback(bytes32 betId, string result, bytes proof) public\n    onlyOraclize\n    onlyIfBetExist(betId)\n    onlyIfNotProcessed(betId)\n    oraclize_randomDS_proofVerify(betId, result, proof)\n  {\n    bets[betId].numberRolled = uint(sha3(result)) % MODULO;\n    Bet thisBet = bets[betId];\n    if (betWon(betId)) {\n      LOG_BetWon(thisBet.playerAddress, thisBet.numberRolled, thisBet.amountBet);\n      thisBet.playerAddress.send(thisBet.amountBet.mul(2));\n    } else {\n      LOG_BetLost(thisBet.playerAddress, thisBet.numberRolled, thisBet.amountBet);\n      thisBet.playerAddress.send(1);  // sending 1 wei just to let player know he didn't win\n    }\n  }\n  function betWon(bytes32 betId) internal returns(bool) {\n    if (bets[betId].numberRolled > MODULO.div(2).add(HOUSE_EDGE)) {\n      return true;\n    }\n    return false;\n  }\n  function withdrawFromPot(uint amount) onlyOwner {\n    LOG_OwnerWithdraw(owner, amount);\n    owner.send(amount);\n  }\n  function setMinBet(uint _minBet) onlyOwner {\n    minBet = _minBet;\n  }\n}"
}