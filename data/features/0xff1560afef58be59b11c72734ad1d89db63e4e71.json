{
  "opcode_sequence": "PUSH1 PUSH1 MSTORE JUMPDEST JUMPDEST PUSH1 DUP1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB NOT AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND OR SWAP1 SSTORE JUMPDEST PUSH5 PUSH1 DUP2 DUP2 SSTORE PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND DUP3 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP4 SHA3 DUP5 SWAP1 SSTORE PUSH1 DUP5 SWAP1 SSTORE ADDRESS SWAP1 SWAP2 AND SWAP3 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP2 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE PUSH1 SLOAD PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST PUSH2 DUP1 PUSH2 PUSH1 CODECOPY PUSH1 RETURN STOP PUSH1 PUSH1 MSTORE CALLDATASIZE ISZERO PUSH2 JUMPI PUSH4 PUSH29 PUSH1 CALLDATALOAD DIV AND PUSH4 DUP2 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI DUP1 PUSH4 EQ PUSH2 JUMPI JUMPDEST PUSH1 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD PUSH1 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 JUMPI DUP1 DUP3 ADD MLOAD DUP2 DUP5 ADD MSTORE JUMPDEST PUSH1 ADD PUSH2 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 AND DUP1 ISZERO PUSH2 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 DUP4 PUSH1 SUB PUSH2 EXP SUB NOT AND DUP2 MSTORE PUSH1 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD DUP2 AND SWAP1 PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 CALLDATALOAD PUSH2 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH2 PUSH1 PUSH1 PUSH1 EXP SUB PUSH1 CALLDATALOAD AND PUSH2 JUMP JUMPDEST STOP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 DUP3 SWAP1 SSTORE PUSH1 DUP2 SWAP1 SSTORE JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST DUP1 ISZERO DUP1 ISZERO SWAP1 PUSH2 JUMPI POP PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD ISZERO ISZERO JUMPDEST ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 DUP5 SWAP1 SSTORE PUSH32 SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 CALLDATASIZE LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP6 AND DUP5 MSTORE DUP3 MSTORE DUP1 DUP4 SHA3 SLOAD SWAP4 DUP9 AND DUP4 MSTORE PUSH1 SWAP1 SWAP2 MSTORE SWAP1 SHA3 SLOAD SWAP1 SWAP3 POP PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP8 AND DUP2 MSTORE SHA3 SLOAD PUSH2 SWAP1 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP7 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SSTORE PUSH2 DUP3 DUP5 PUSH4 PUSH2 AND JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP8 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 CALLER DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 SHA3 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE DUP2 SLOAD DUP5 ADD DUP3 SSTORE ADDRESS SWAP1 SWAP3 AND SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP2 PUSH1 PUSH1 PUSH1 EXP SUB AND ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST POP POP JUMP JUMPDEST PUSH1 SLOAD DUP2 JUMP JUMPDEST PUSH1 SLOAD PUSH1 PUSH1 PUSH1 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 MSTORE PUSH1 DUP2 MSTORE PUSH32 PUSH1 DUP3 ADD MSTORE DUP2 JUMP JUMPDEST PUSH1 PUSH1 SLOAD CALLVALUE DUP2 ISZERO ISZERO PUSH2 JUMPI UNKNOWN_0xfe JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD SWAP2 SWAP1 DIV SWAP2 POP DUP2 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD DUP7 ADD SWAP1 SSTORE ADDRESS SWAP1 SWAP4 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 SHA3 DUP1 SLOAD DUP6 SWAP1 SUB SWAP1 SSTORE SWAP1 SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 SWAP1 GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP3 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 DUP2 ADD GT PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER DUP2 AND PUSH1 DUP2 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD DUP7 SWAP1 SUB SWAP1 SSTORE SWAP3 DUP6 AND DUP1 DUP3 MSTORE SWAP1 DUP4 SWAP1 SHA3 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE SWAP2 PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP5 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP1 DUP4 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 SWAP1 DUP2 MSTORE PUSH1 DUP1 DUP4 SHA3 SWAP4 DUP6 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SHA3 SLOAD JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB CALLER AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 SWAP1 SHA3 SLOAD DUP2 SWAP1 LT ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB ADDRESS DUP2 AND PUSH1 SWAP1 DUP2 MSTORE PUSH1 PUSH1 MSTORE PUSH1 DUP1 DUP3 SHA3 DUP1 SLOAD DUP6 ADD SWAP1 SSTORE CALLER SWAP1 SWAP3 AND DUP1 DUP3 MSTORE SWAP1 DUP3 SWAP1 SHA3 DUP1 SLOAD DUP5 SWAP1 SUB SWAP1 SSTORE PUSH1 SLOAD SWAP1 SWAP2 SWAP1 DUP4 MUL DUP1 ISZERO PUSH2 MUL SWAP2 MLOAD PUSH1 PUSH1 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST ADDRESS PUSH1 PUSH1 PUSH1 EXP SUB AND CALLER PUSH1 PUSH1 PUSH1 EXP SUB AND PUSH1 DUP1 MLOAD PUSH1 PUSH2 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 MLOAD SWAP1 DUP2 MSTORE PUSH1 ADD PUSH1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 SLOAD CALLER PUSH1 PUSH1 PUSH1 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST PUSH1 PUSH1 PUSH1 EXP SUB DUP2 AND ISZERO PUSH2 JUMPI PUSH1 DUP1 SLOAD PUSH20 NOT AND PUSH1 PUSH1 PUSH1 EXP SUB DUP4 AND OR SWAP1 SSTORE JUMPDEST JUMPDEST JUMPDEST POP JUMP JUMPDEST PUSH1 DUP3 DUP3 ADD PUSH2 DUP5 DUP3 LT ISZERO PUSH2 JUMP JUMPDEST DUP1 SWAP2 POP JUMPDEST POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 PUSH2 DUP4 DUP4 GT ISZERO PUSH2 JUMP JUMPDEST POP DUP1 DUP3 SUB JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO PUSH2 JUMPI PUSH1 DUP1 REVERT JUMPDEST JUMPDEST POP JUMP STOP UNKNOWN_0xdd CALLCODE MSTORE UNKNOWN_0xad SHL UNKNOWN_0xe2 UNKNOWN_0xc8 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef LOG1 PUSH6 SHA3 DUP11 UNKNOWN_0xa6 UNKNOWN_0xcb MULMOD UNKNOWN_0xe3 CALL UNKNOWN_0x4b DUP10 UNOFFICIAL_SWAP PUSH5 CODESIZE PUSH24 SWAP12 PUSH10 CALL PUSH4 CREATE2 GAS UNKNOWN_0x4d CREATE2 UNKNOWN_0x23 UNKNOWN_0xb3 UNKNOWN_0xef",
  "opcode_entropy": 4.807279040340169,
  "opcode_count": 2060,
  "unique_opcodes": 80,
  "byte_entropy": 5.624184730024938,
  "byte_0x": 0.00033909799932180403,
  "byte_60": 0.12241437775517125,
  "byte_40": 0.019667683960664633,
  "byte_52": 0.03221430993557138,
  "byte_5b": 0.04408273991183452,
  "byte_03": 0.030179721939640556,
  "byte_80": 0.043404543913190916,
  "byte_54": 0.011190233977619531,
  "byte_01": 0.04543913190912174,
  "byte_a0": 0.01356391997287216,
  "byte_02": 0.02034587995930824,
  "byte_0a": 0.018989487962021025,
  "byte_19": 0.00169548999660902,
  "byte_16": 0.023397761953204477,
  "byte_33": 0.0054255679891488644,
  "byte_17": 0.00339097999321804,
  "byte_90": 0.048830111902339775,
  "byte_55": 0.00678195998643608,
  "byte_64": 0.00169548999660902,
  "byte_0d": 0.0006781959986436081,
  "byte_d1": 0.0006781959986436081,
  "byte_69": 0.002034587995930824,
  "byte_d9": 0.00033909799932180403,
  "byte_fc": 0.0013563919972872161,
  "byte_00": 0.05459477789081044,
  "byte_81": 0.03730077992539844,
  "byte_82": 0.009494743981010512,
  "byte_20": 0.029840623940318754,
  "byte_83": 0.013903017972193964,
  "byte_84": 0.007121057985757884,
  "byte_04": 0.008138351983723296,
  "byte_30": 0.003051881993896236,
  "byte_91": 0.01865038996269922,
  "byte_92": 0.004069175991861648,
  "byte_51": 0.02305866395388267,
  "byte_61": 0.04136995591726009,
  "byte_0b": 0.0013563919972872161,
  "byte_39": 0.003051881993896236,
  "byte_a3": 0.003051881993896236,
  "byte_ac": 0.00033909799932180403,
  "byte_b8": 0.0006781959986436081,
  "byte_f3": 0.004408273991183452,
  "byte_36": 0.0006781959986436081,
  "byte_15": 0.01356391997287216,
  "byte_f9": 0.00033909799932180403,
  "byte_57": 0.018311291963377416,
  "byte_63": 0.008138351983723296,
  "byte_ff": 0.012546625974906748,
  "byte_7c": 0.00033909799932180403,
  "byte_35": 0.005764665988470668,
  "byte_05": 0.00339097999321804,
  "byte_fe": 0.001017293997965412,
  "byte_fd": 0.011190233977619531,
  "byte_a7": 0.002034587995930824,
  "byte_14": 0.007799253984401492,
  "byte_06": 0.004069175991861648,
  "byte_de": 0.0006781959986436081,
  "byte_09": 0.00339097999321804,
  "byte_5e": 0.00033909799932180403,
  "byte_b3": 0.00169548999660902,
  "byte_a4": 0.00033909799932180403,
  "byte_18": 0.00033909799932180403,
  "byte_dd": 0.002034587995930824,
  "byte_c8": 0.00169548999660902,
  "byte_23": 0.001017293997965412,
  "byte_72": 0.00169548999660902,
  "byte_ed": 0.0006781959986436081,
  "byte_31": 0.0006781959986436081,
  "byte_3c": 0.0006781959986436081,
  "byte_e5": 0.0006781959986436081,
  "byte_67": 0.00033909799932180403,
  "byte_37": 0.00169548999660902,
  "byte_8d": 0.0013563919972872161,
  "byte_c3": 0.001017293997965412,
  "byte_dc": 0.00033909799932180403,
  "byte_4b": 0.001017293997965412,
  "byte_75": 0.00033909799932180403,
  "byte_34": 0.00678195998643608,
  "byte_70": 0.00033909799932180403,
  "byte_86": 0.003730077992539844,
  "byte_79": 0.00033909799932180403,
  "byte_c6": 0.00033909799932180403,
  "byte_50": 0.02034587995930824,
  "byte_68": 0.0013563919972872161,
  "byte_b7": 0.00033909799932180403,
  "byte_41": 0.0006781959986436081,
  "byte_db": 0.00339097999321804,
  "byte_a5": 0.00033909799932180403,
  "byte_cb": 0.001017293997965412,
  "byte_95": 0.001017293997965412,
  "byte_d8": 0.00033909799932180403,
  "byte_9b": 0.0013563919972872161,
  "byte_2f": 0.0006781959986436081,
  "byte_a6": 0.0006781959986436081,
  "byte_f2": 0.0013563919972872161,
  "byte_ae": 0.00033909799932180403,
  "byte_3a": 0.001017293997965412,
  "byte_ba": 0.00033909799932180403,
  "byte_a9": 0.0006781959986436081,
  "byte_9c": 0.00033909799932180403,
  "byte_bb": 0.00033909799932180403,
  "byte_d4": 0.00033909799932180403,
  "byte_62": 0.0006781959986436081,
  "byte_3e": 0.00033909799932180403,
  "byte_f8": 0.0006781959986436081,
  "byte_e4": 0.00033909799932180403,
  "byte_32": 0.00033909799932180403,
  "byte_e3": 0.001017293997965412,
  "byte_8b": 0.00033909799932180403,
  "byte_47": 0.0006781959986436081,
  "byte_24": 0.002373685995252628,
  "byte_56": 0.015598507968802983,
  "byte_2c": 0.001017293997965412,
  "byte_93": 0.00339097999321804,
  "byte_10": 0.002034587995930824,
  "byte_1f": 0.0006781959986436081,
  "byte_96": 0.0006781959986436081,
  "byte_af": 0.00033909799932180403,
  "byte_ca": 0.00033909799932180403,
  "byte_d3": 0.00033909799932180403,
  "byte_6c": 0.0006781959986436081,
  "byte_44": 0.00033909799932180403,
  "byte_22": 0.00033909799932180403,
  "byte_88": 0.0013563919972872161,
  "byte_8e": 0.00033909799932180403,
  "byte_94": 0.0013563919972872161,
  "byte_c2": 0.001017293997965412,
  "byte_e6": 0.00033909799932180403,
  "byte_07": 0.002373685995252628,
  "byte_13": 0.00033909799932180403,
  "byte_6a": 0.0006781959986436081,
  "byte_a1": 0.0013563919972872161,
  "byte_df": 0.00033909799932180403,
  "byte_08": 0.00169548999660902,
  "byte_d7": 0.00033909799932180403,
  "byte_0c": 0.00033909799932180403,
  "byte_7f": 0.0013563919972872161,
  "byte_45": 0.0006781959986436081,
  "byte_78": 0.0006781959986436081,
  "byte_74": 0.00033909799932180403,
  "byte_65": 0.001017293997965412,
  "byte_6d": 0.00033909799932180403,
  "byte_43": 0.00033909799932180403,
  "byte_6f": 0.00033909799932180403,
  "byte_6e": 0.00033909799932180403,
  "byte_87": 0.001017293997965412,
  "byte_8c": 0.00033909799932180403,
  "byte_e1": 0.00033909799932180403,
  "byte_eb": 0.00033909799932180403,
  "byte_ec": 0.00033909799932180403,
  "byte_7d": 0.0006781959986436081,
  "byte_4f": 0.00033909799932180403,
  "byte_71": 0.00033909799932180403,
  "byte_42": 0.0006781959986436081,
  "byte_1e": 0.0006781959986436081,
  "byte_c0": 0.0006781959986436081,
  "byte_f7": 0.00033909799932180403,
  "byte_b2": 0.0006781959986436081,
  "byte_29": 0.001017293997965412,
  "byte_c7": 0.00033909799932180403,
  "byte_b9": 0.00033909799932180403,
  "byte_25": 0.00033909799932180403,
  "byte_85": 0.0027127839945744322,
  "byte_1b": 0.001017293997965412,
  "byte_ce": 0.00033909799932180403,
  "byte_58": 0.0006781959986436081,
  "byte_b0": 0.001017293997965412,
  "byte_11": 0.001017293997965412,
  "byte_59": 0.00033909799932180403,
  "byte_2a": 0.00033909799932180403,
  "byte_f1": 0.0013563919972872161,
  "byte_89": 0.0006781959986436081,
  "byte_bf": 0.0006781959986436081,
  "byte_73": 0.00033909799932180403,
  "byte_ad": 0.001017293997965412,
  "byte_e2": 0.0006781959986436081,
  "byte_aa": 0.0006781959986436081,
  "byte_2b": 0.0006781959986436081,
  "byte_c4": 0.0006781959986436081,
  "byte_28": 0.0006781959986436081,
  "byte_f5": 0.0013563919972872161,
  "byte_5a": 0.0006781959986436081,
  "byte_4d": 0.0006781959986436081,
  "byte_ef": 0.0006781959986436081,
  "byte_7a": 0.001017293997965412,
  "byte_8a": 0.00033909799932180403,
  "byte_38": 0.00033909799932180403,
  "byte_77": 0.00033909799932180403,
  "byte_27": 0.00033909799932180403,
  "num_nodes": 2,
  "num_edges": 1,
  "avg_degree": 1.0,
  "density": 0.5,
  "connected_components": 1,
  "avg_clustering": 0.0,
  "txn_nums": 4,
  "event_nums": 6,
  "creation_block": 4132348,
  "creation_timestamp": 1502200122,
  "life_time": 423.0,
  "duration_seconds": 8753.0,
  "from_creation_to_transfer": 0.0,
  "num_addresses": 3,
  "num_buyers": 1,
  "num_sellers": 1,
  "num_creator_transfers": 0,
  "buy_amt": 0,
  "sell_amt": 0.0,
  "avg_value": 0.0,
  "txn_per_block": 0.009433962264150943,
  "avg_gas_limit": 250091.5,
  "std_gas_limit": 360666.9588723786,
  "avg_gas_used": 250090.5,
  "std_gas_used": 360666.9588723786,
  "avg_gas_price": 1000000000.0,
  "std_gas_price": 0.0,
  "transfer_num": 1,
  "minttoken_num": 1,
  "sell_num": 1,
  "timeline_sequence": [
    [
      4132348,
      1502200122,
      45,
      110,
      0,
      874696,
      1000000000,
      0,
      0,
      6440106,
      874695,
      18959767
    ],
    [
      4132370,
      1502200530,
      46,
      35,
      0,
      38015,
      1000000000,
      0,
      0,
      1086265,
      38014,
      18959745
    ],
    [
      4132388,
      1502201088,
      47,
      179,
      0,
      35899,
      1000000000,
      0,
      0,
      3987944,
      35898,
      18959727
    ],
    [
      4132771,
      1502208875,
      49,
      10,
      0,
      51756,
      1000000000,
      0,
      0,
      1279625,
      51755,
      18959344
    ]
  ],
  "sourcecode": "pragma solidity ^0.4.14;\n\n/* \u00a9The Extreme Coin (XT) SWAP for Yobit.net  contract\n +35796229192\n \u00a9RomanLanskoj 2017\nThere is no law stronger than the code\n*/\nlibrary SafeMath {\n  function mul(uint a, uint b) internal returns (uint) {\n    uint c = a * b;\n    assert(a == 0 || c / a == b);\n    return c;\n  }\n  function div(uint a, uint b) internal returns (uint) {\n    assert(b > 0);\n    uint c = a / b;\n    assert(a == b * c + a % b);\n    return c;\n  }\n  function sub(uint a, uint b) internal returns (uint) {\n    assert(b <= a);\n    return a - b;\n  }\n  function add(uint a, uint b) internal returns (uint) {\n    uint c = a + b;\n    assert(c >= a);\n    return c;\n  }\n  function max64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a >= b ? a : b;\n  }\n  function min64(uint64 a, uint64 b) internal constant returns (uint64) {\n    return a < b ? a : b;\n  }\n  function max256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a >= b ? a : b;\n  }\n  function min256(uint256 a, uint256 b) internal constant returns (uint256) {\n    return a < b ? a : b;\n  }\n  function assert(bool assertion) internal {\n    if (!assertion) {\n      throw;\n    }\n  }\n}\n\ncontract Ownable {\n    address public owner;\n    function Ownable() {\n        owner = msg.sender;\n    }\n    modifier onlyOwner {\n        if (msg.sender != owner) throw;\n        _;\n    }\n    function transferOwnership(address newOwner) onlyOwner {\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n}\n\ncontract ERC20Basic {\n  uint public totalSupply;\n  function balanceOf(address who) constant returns (uint);\n  function transfer(address to, uint value);\n  event Transfer(address indexed from, address indexed to, uint value);\n}\ncontract ERC20 is ERC20Basic {\n  function allowance(address owner, address spender) constant returns (uint);\n  function transferFrom(address from, address to, uint value);\n  function approve(address spender, uint value);\n  event Approval(address indexed owner, address indexed spender, uint value);\n}\n\ncontract newToken is ERC20Basic {\n  \n  using SafeMath for uint;\n  \n  mapping(address => uint) balances;\n  \n\n  modifier onlyPayloadSize(uint size) {\n     if(msg.data.length < size + 4) {\n       throw;\n     }\n     _;\n  }\n  function transfer(address _to, uint _value) onlyPayloadSize(2 * 32) {\n    balances[msg.sender] = balances[msg.sender].sub(_value);\n    balances[_to] = balances[_to].add(_value);\n    Transfer(msg.sender, _to, _value);\n  }\n  function balanceOf(address _owner) constant returns (uint balance) {\n    return balances[_owner];\n  }\n}\n\ncontract StandardToken is newToken, ERC20 {\n  mapping (address => mapping (address => uint)) allowed;\n  function transferFrom(address _from, address _to, uint _value) onlyPayloadSize(3 * 32) {\n    var _allowance = allowed[_from][msg.sender];\n    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met\n    // if (_value > _allowance) throw;\n    balances[_to] = balances[_to].add(_value);\n    balances[_from] = balances[_from].sub(_value);\n    allowed[_from][msg.sender] = _allowance.sub(_value);\n    Transfer(_from, _to, _value);\n  }\n  function approve(address _spender, uint _value) {\n    // To change the approve amount you first have to reduce the addresses`\n    //  allowance to zero by calling approve(_spender, 0) if it is not\n    //  already 0 to mitigate the race condition described here:\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    if ((_value != 0) && (allowed[msg.sender][_spender] != 0)) throw;\n    allowed[msg.sender][_spender] = _value;\n    Approval(msg.sender, _spender, _value);\n  }\n  function allowance(address _owner, address _spender) constant returns (uint remaining) {\n    return allowed[_owner][_spender];\n  }\n}\n\ncontract Extreme is StandardToken, Ownable {\n  string public constant name = \"Extreme Coin\";\n  string public constant symbol = \"XT\";\n  uint public constant decimals = 2;\n  uint256 public initialSupply;\n    \n  // Constructor\n  function Extreme () { \n     totalSupply = 59347950076;\n      balances[msg.sender] = totalSupply;\n      initialSupply = totalSupply; \n        Transfer(0, this, totalSupply);\n        Transfer(this, msg.sender, totalSupply);\n  }\n}\n\ncontract ExtremeToken is Ownable, Extreme {\n\nuint256 public sellPrice;\nuint256 public buyPrice;\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner {\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() payable returns (uint amount)\n    {\n        amount = msg.value / buyPrice;\n        if (balances[this] < amount) throw; \n        balances[msg.sender] += amount;\n        balances[this] -= amount;\n        Transfer(this, msg.sender, amount);\n    }\n\n    function sell(uint256 amount) {\n        if (balances[msg.sender] < amount ) throw;\n        balances[this] += amount;\n        balances[msg.sender] -= amount;\n        if (!msg.sender.send(amount * sellPrice)) {\n            throw;\n        } else {\n            Transfer(msg.sender, this, amount);\n        }               \n    }\n    \n  function transfer(address _to, uint256 _value) {\n        require(balances[msg.sender] > _value);\n        require(balances[_to] + _value > balances[_to]);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        Transfer(msg.sender, _to, _value);\n    }\n\n   function mintToken(address target, uint256 mintedAmount) onlyOwner {\n        balances[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        Transfer(0, this, mintedAmount);\n        Transfer(this, target, mintedAmount);\n    }\n\n}"
}